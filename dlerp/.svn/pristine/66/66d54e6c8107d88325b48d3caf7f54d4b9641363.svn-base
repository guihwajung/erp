<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="form" width="1280" height="720" titletext="출금요청 등록" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="1" left="0.0" top="10.0" height="110.0" right="0" cssclass="div_SEARCH_Bg">
          <Layouts>
            <Layout>
              <Static id="staCD_CORP" taborder="9" text="법인코드" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Div id="ccfCD_CORP" CodeFindName="DZX_CFCORP" CDTextWidth="50" taborder="0" left="staCD_CORP:0.0" top="10.0" width="280" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
              <Static id="staDT_REQ" taborder="10" text="회계일자" left="ccfCD_CORP:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Calendar id="ctclDT_REQ_FROM" taborder="1" left="staDT_REQ:0.0" top="10.0" width="105" height="24.0" dateformat="yyyy-MM-dd" editformat="yyyyMMdd" autoselect="true" onchanged="fnSearchInit"/>
              <Static id="staDT_REQ00" taborder="11" text="~" left="ctclDT_REQ_FROM:0.0" top="10.0" width="30.0" height="24.0" cssclass="sta_WF_AC"/>
              <Calendar id="ctclDT_REQ_TO" taborder="2" left="staDT_REQ00:0.0" top="10.0" width="105" height="24.0" dateformat="yyyy-MM-dd" editformat="yyyyMMdd" autoselect="true" onchanged="fnSearchInit"/>
              <Static id="staTY_PAY" taborder="12" text="현금구분" left="ctclDT_REQ_TO:40" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Combo id="ccboTY_PAY" taborder="3" left="staTY_PAY:0.0" top="10.0" width="70" height="24.0" innerdataset="dsTY_PAY" datacolumn="DS_CODE" codecolumn="CD_CODE" value="" text="전체" index="-1" onitemchanged="divSearch_ccboTY_PAY_onitemchanged"/>
              <Static id="staCD_SYSTEM" taborder="13" text="시스템" left="ccboTY_PAY:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Combo id="ccboCD_SYSTEM" taborder="6" left="staCD_SYSTEM:0.0" top="10.0" width="85" height="24.0" innerdataset="dsCD_SYSTEM" datacolumn="DS_CODE" codecolumn="CD_CODE" value="" onitemchanged="fnSearchInit" text="전체" index="0"/>
              <Static id="staCD_DEPTOPER" taborder="14" text="발행부서" left="0.0" top="staCD_CORP:10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Div id="ccfCD_DEPTOPER" CodeFindName="DFX_CFACNTUNIT_GROUP" CDTextWidth="70" taborder="4" left="staCD_DEPTOPER:0.0" top="staCD_CORP:10.0" width="280" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
              <Static id="staCD_VENDOR" taborder="15" text="거래처" left="ccfCD_DEPTOPER:0.0" top="staCD_CORP:10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Div id="ccfCD_VENDOR" CodeFindName="DFX_CFVENDOR" CDTextWidth="70" taborder="5" left="staCD_VENDOR:0.0" top="staCD_CORP:10.0" width="280" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
              <Static id="staTY_PAYMENT2" taborder="20" text="출금구분" left="ccfCD_VENDOR:0.0" top="staCD_CORP:10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Combo id="ccboTY_PAYMENT2" taborder="21" left="staTY_PAYMENT2:0.0" top="staCD_CORP:10.0" width="250" height="24.0" datacolumn="DS_CODE" codecolumn="CD_CODE" innerdataset="dsTY_PAYMENT2"/>
              <Static id="staNO_CONSULT" taborder="22" text="원안품의" left="ccboTY_PAYMENT2:0.0" top="staCD_CORP:10.0" width="92.0" height="24.0" visible="false" cssclass="sta_WF_SchLabel"/>
              <Div id="ccfNO_CONSULT" CodeFindName="DFX_CFCONSULTALL" CDTextWidth="80" taborder="23" left="staNO_CONSULT:0.0" top="staCD_CORP:10.0" width="400" height="24.0" url="cmm::cmmCodeFind.xfdl" visible="false"/>
              <Static id="staCD_DEPT_BE" taborder="16" text="귀속부서" left="0.0" top="staCD_DEPTOPER:10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Div id="ccfCD_DEPT_BE" CodeFindName="DFX_CFACNTUNIT" CDTextWidth="70" taborder="7" left="staCD_DEPT_BE:0.0" top="staCD_DEPTOPER:10.0" width="280" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
              <Static id="staACC_CD" taborder="17" text="계정코드" left="ccfCD_DEPT_BE:0.0" top="staCD_DEPTOPER:10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Div id="ccfACC_CD" CodeFindName="DFX_CFACNTBYMISUMIBUL" CDTextWidth="70" taborder="8" left="staACC_CD:0.0" top="staCD_DEPTOPER:10.0" width="280" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
              <Static id="staACC_CD00" taborder="18" text="전표번호" left="ccfACC_CD:0.0" top="staCD_DEPTOPER:10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Edit id="edtCD_TRADE" taborder="19" left="staACC_CD00:0.0" top="staCD_DEPTOPER:10.0" width="250" height="24.0"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg" ondragmove="divData_ondragmove">
          <Layouts>
            <Layout>
              <Div id="divSplitter" taborder="1" left="0" top="50%" width="100%" height="5" cursor="ns-resize" ondrag="divData_divSplitter_ondrag" cssclass="div_Splitter"/>
              <Div id="divDataTop" taborder="0" left="0" top="0" bottom="divSplitter:5" right="0">
                <Layouts>
                  <Layout>
                    <Calendar id="tclDT_REQ" taborder="3" top="2" right="471" height="20" dateformat="yyyy-MM-dd" editformat="yyyyMMdd" autoselect="true" width="105"/>
                    <Button id="btnDtUpdate" taborder="4" text="지급요청일변경(선택)" top="0" width="130" height="22" onclick="btnDtUpdate_onclick" left="tclDT_REQ:5"/>
                    <Static id="sta01" taborder="1" text="미지급현황" left="0" top="0" height="22" cssclass="sta_TITLE_Bg" right="tclDT_REQ:5"/>
                    <Grid id="objGrid" taborder="0" left="0" top="sta01:5" bottom="0" right="0"/>
                    <Button id="btnInsert" taborder="2" text="자금신청(선택)" top="0" width="100" height="22" onclick="btnInsert_onclick" right="582"/>
                    <Button id="btnIssueSlip" taborder="5" text="전표조회" top="0" width="80" height="22" onclick="btnIssueSlip_onclick" right="0"/>
                    <Calendar id="tclDT_EXPIRY" taborder="6" top="1" right="225" height="20" dateformat="yyyy-MM-dd" editformat="yyyyMMdd" autoselect="true" width="105"/>
                    <Button id="btnDtUpdate2" taborder="7" text="어음만기일변경(선택)" top="0" width="130" height="22" onclick="btnDtUpdate2_onclick" left="tclDT_EXPIRY:5"/>
                  </Layout>
                </Layouts>
              </Div>
              <Div id="divDataBottom" taborder="0" left="0" top="divSplitter:5" bottom="0" right="0">
                <Layouts>
                  <Layout>
                    <Button id="btnDelete" taborder="2" text="청구내역취소" top="0" width="90" right="5" height="22" onclick="btnDelete_onclick"/>
                    <Static id="sta02" taborder="0" text="자금청구현황" left="0" top="0" right="btnDelete:5" height="22" cssclass="sta_TITLE_Bg"/>
                    <Grid id="objGridSub" taborder="1" left="0" top="sta02:5" bottom="0" right="0"/>
                    <Button id="btnHold" taborder="3" text="지급보류" top="0" width="90" right="102" height="22" onclick="divData_divDataBottom_btnHold_onclick"/>
                  </Layout>
                </Layouts>
              </Div>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	this.fnSetCombo();
	
	//다른 화면에서 들어왔을경우
	if(!this.gfnIsNull(this.getOwnerFrame().CD_CORP)){
		this.ccfCD_CORP.form.CDTextBox.set_value(this.getOwnerFrame().CD_CORP);	
		this.ccfCD_CORP.form.DSTextBox.set_value(this.getOwnerFrame().DS_CORP); 
		this.ccfCD_DEPTOPER.form.CDTextBox.set_value(this.getOwnerFrame().CD_DEPTOPER);
		this.ccfCD_DEPTOPER.form.DSTextBox.set_value(this.getOwnerFrame().DS_DEPTOPER);
		this.ctclDT_REQ_FROM.set_value(this.getOwnerFrame().DT_REQ_FROM);
		this.ctclDT_REQ_TO.set_value(this.getOwnerFrame().DT_REQ_TO);
		this.edtCD_TRADE.set_value(this.getOwnerFrame().CD_TRADE);
		
		this.FormBtns.Select.click();
	}
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 ************************************************************************/
this.fnSetButton = function() {
   	this.FormBtns.Add.set_enable(false);
   	//this.FormBtns.Save.set_enable(false);
   	this.FormBtns.Del.set_enable(false);
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결
 ************************************************************************/
this.fnSetExtendButton = function() {
	//this.btn1 = this.gfnFormButtonAdd("Detail", "fnDetail1");
	this.btnAccount = this.gfnFormButtonAdd("btnAccount", "fnAccount", "계좌관리");
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.dxGrid = this.divData.form.divDataTop.form.objGrid;
	this.dxGridSub = this.divData.form.divDataBottom.form.objGridSub;
	
	this.ccfCD_CORP = this.divSearch.form.ccfCD_CORP;
	
	this.ctclDT_REQ_FROM = this.divSearch.form.ctclDT_REQ_FROM;
	this.ctclDT_REQ_TO = this.divSearch.form.ctclDT_REQ_TO;
	
	
	this.ccfCD_DEPTOPER = this.divSearch.form.ccfCD_DEPTOPER;
	this.ccfCD_VENDOR = this.divSearch.form.ccfCD_VENDOR;
	this.ccfCD_DEPT_BE = this.divSearch.form.ccfCD_DEPT_BE;
	this.ccfACC_CD = this.divSearch.form.ccfACC_CD;
	this.ccfNO_CONSULT = this.divSearch.form.ccfNO_CONSULT;
	
	this.ccboTY_PAY = this.divSearch.form.ccboTY_PAY;
	this.ccboCD_SYSTEM = this.divSearch.form.ccboCD_SYSTEM;
	
	this.tclDT_REQ = this.divData.form.divDataTop.form.tclDT_REQ;
	this.tclDT_EXPIRY = this.divData.form.divDataTop.form.tclDT_EXPIRY; //20200313 어음만기일 추가
	
	this.edtCD_TRADE = this.divSearch.form.edtCD_TRADE;
	
	this.ccboTY_PAYMENT2 = this.divSearch.form.ccboTY_PAYMENT2; // 20200410 출금구분 추가
	
	this.grSearch = this.FormInfo.GR_SEARCH;				// 권한
	this.idGroup = this.FormInfo.ID_GROUP;					// 그룹코드(그룹ID)	
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	
	this.gfnGridInit(this.dxGrid, this.dsList, "DF", "DFB_REQUESTLIST");		
	this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforuserDataSetParam";
	this.dxGrid.AfterCDTextChanged = "fnGrid_AfterCDTextChanged";	
	this.dxGrid.AfterEdit = "fnGrid_AfterEdit";
	
	this.gfnGridInit(this.dxGridSub, this.dsListSub, "DF", "DFB_REQUESTLIST2");

	this.ccboCD_SYSTEM.set_index(0);
	
	var today = this.gfnGetDate();
	this.dsSearch.setColumn(0, "DT_REQ_FROM", today);
	this.dsSearch.setColumn(0, "DT_REQ_TO", today);
	
	this.ccfCD_CORP.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.ccfCD_DEPTOPER.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.ccfCD_VENDOR.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.ccfCD_DEPT_BE.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.ccfACC_CD.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.ccfNO_CONSULT.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	
	this.ccfCD_CORP.AfterCDTextChanged = "fnAfterCDTextChanged";
	this.ccfCD_DEPTOPER.AfterCDTextChanged = "fnAfterCDTextChanged";
	this.ccfCD_VENDOR.AfterCDTextChanged = "fnAfterCDTextChanged";
	this.ccfCD_DEPT_BE.AfterCDTextChanged = "fnAfterCDTextChanged";
	this.ccfACC_CD.AfterCDTextChanged = "fnAfterCDTextChanged";
	this.ccfNO_CONSULT.AfterCDTextChanged = "fnAfterCDTextChanged";
	
	this.dxGrid.addEventHandler("onselectchanged", this.fnGrid_RowCellChanged, this);
	
	this.dxGrid.setFormatColProperty(11, "size", 0);
	this.dxGrid.setFormatColProperty(13, "size", 0);
	this.dxGrid.setFormatColProperty(18, "size", 0);
	this.dxGrid.setFormatColProperty(22, "size", 0);
	this.dxGrid.setFormatColProperty(23, "size", 0);
	
    this.dxGridSub.setFormatColProperty(10, "size", 0);
	this.dxGridSub.setFormatColProperty(12, "size", 0);
	this.dxGridSub.setFormatColProperty(14, "size", 0);
	this.dxGridSub.setFormatColProperty(15, "size", 0);
	this.dxGridSub.setFormatColProperty(16, "size", 0);	
	//this.dxGridSub.setCellProperty("body", 19, "edittype", "expr:"+this.ucFlag+" == \"#\" ? 'text':'none'");
	
	// 법인코드 init
	if (this.gfnIsNull(this.ccfCD_CORP.form.CDTextBox.value)) {
		this.ccfCD_CORP.form.DSTextBox.set_value(this.AuthClient.DS_CORP); 
		this.ccfCD_CORP.form.CDTextBox.set_value(this.AuthClient.CD_CORP);	
	}	
	
	// 권한체크
	// 법인코드(1)/발의부서필수(7)
	if (nexacro.toNumber(this.grSearch) >= 1) {
		this.divSearch.form.staCD_CORP.set_textDecoration("underline");
	}	
	if (nexacro.toNumber(this.grSearch) >= 7) {
		this.ccfCD_DEPTOPER.form.CDTextBox.set_value(this.AuthClient.CD_DEPT);
		this.ccfCD_DEPTOPER.form.DSTextBox.set_value(this.AuthClient.DS_DEPT);
		this.ccfCD_DEPTOPER.set_enable(false);
	}
}

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {

	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("DT_REQ_FROM", "string");	// 회계일자
	this.dsSelect.addColumn("DT_REQ_TO", "string");		// 회계일자
	this.dsSelect.addColumn("CD_DEPTOPER", "string");	// 발의부서
	this.dsSelect.addColumn("CD_DEPT_BE", "string");	// 귀속부서
	this.dsSelect.addColumn("CD_VENDOR", "string");		// 거래처
	this.dsSelect.addColumn("CD_SYSTEM", "string");		// 시스템
	this.dsSelect.addColumn("ACCT_CD", "string");		// 계정코드
	this.dsSelect.addColumn("CD_CORP", "string");		// 법인코드
	this.dsSelect.addColumn("TY_CASH", "string");		// 현금구분
	this.dsSelect.addColumn("CD_TRADE", "string");		// 전표번호
	this.dsSelect.addColumn("GR_SEARCH", "string");		// 조회수준
	this.dsSelect.addColumn("ID_USER", "string");		// 로그인사용자
	this.dsSelect.addColumn("CD_DEPT", "string");		// 로그인부서	
	this.dsSelect.addColumn("TY_PAYMENT2", "string");   // 출금구분 20200410 추가		
	this.dsSelect.addColumn("NO_CONSULT", "string");   // 원안품의 20200428 추가
	
	this.dsInsert = new Dataset();
	this.dsInsert.addColumn("NO_MIBUL", "bigdecimal");
	this.dsInsert.addColumn("AM_REQ", "bigdecimal");
	this.dsInsert.addColumn("AM_CASH", "bigdecimal");
	this.dsInsert.addColumn("AM_NOTES", "bigdecimal");
	this.dsInsert.addColumn("QN_ILSU", "bigdecimal");
	this.dsInsert.addColumn("DT_EXPIRY", "string");
	this.dsInsert.addColumn("RM_BIGO", "string");
	this.dsInsert.addColumn("NO_ACCOUNT", "string");
	this.dsInsert.addColumn("TY_GUBUN", "string");
	this.dsInsert.addColumn("CD_BANK", "string");
	this.dsInsert.addColumn("CD_SIDEBANK", "string");
	this.dsInsert.addColumn("NO_ACCOUNT_B2B", "string");
	this.dsInsert.addColumn("TY_GUBUN_B2B", "string");
	this.dsInsert.addColumn("CD_BANK_B2B", "string");
	this.dsInsert.addColumn("CD_SIDEBANK_B2B", "string");
	this.dsInsert.addColumn("DT_REQ_C", "string");
	this.dsInsert.addColumn("DT_REQ_N", "string");
	this.dsInsert.addColumn("CD_SUJI", "string");
	this.dsInsert.addColumn("TY_PAYMENT2", "string");
	this.dsInsert.addColumn("NO_CONSULT", "string");
	this.dsInsert.addColumn("ID_USER", "string");
	
	
	this.dsSave = new Dataset();
	this.dsSave.addColumn("NO_MIBUL", "bigdecimal");
	this.dsSave.addColumn("AM_CASH", "bigdecimal");
	this.dsSave.addColumn("AM_NOTES", "bigdecimal");
	this.dsSave.addColumn("DT_REQ_C", "string");
	this.dsSave.addColumn("DT_REQ_N", "string");	
	this.dsSave.addColumn("NO_ACCOUNT", "string");
	this.dsSave.addColumn("TY_GUBUN", "string");
	this.dsSave.addColumn("CD_BANK", "string");
	this.dsSave.addColumn("CD_SIDEBANK", "string");
	this.dsSave.addColumn("NO_ACCOUNT_B2B", "string");
	this.dsSave.addColumn("TY_GUBUN_B2B", "string");
	this.dsSave.addColumn("CD_BANK_B2B", "string");
	this.dsSave.addColumn("CD_SIDEBANK_B2B", "string");	
	this.dsSave.addColumn("DT_EXPIRY", "string");
	this.dsSave.addColumn("QN_ILSU", "bigdecimal");
	this.dsSave.addColumn("CD_SUJI", "string");
	this.dsSave.addColumn("TY_PAYMENT2", "string");
	this.dsSave.addColumn("NO_CONSULT", "string");	
	this.dsSave.addColumn("RM_BIGO", "string");
	this.dsSave.addColumn("ID_USER", "string");	
	this.dsSave.addColumn("CD_VENDOR", "string");	

	this.dsUpdate = new Dataset();
	this.dsUpdate.addColumn("NO_MIBUL", "bigdecimal");
	this.dsUpdate.addColumn("DT_REQ", "string");
	
	this.dsUpdate2 = new Dataset();
	this.dsUpdate2.addColumn("NO_MIBUL", "bigdecimal");
	this.dsUpdate2.addColumn("DT_EXPIRY", "string");	
	
	this.dsUpdateHold = new Dataset();
	this.dsUpdateHold.addColumn("NO_REQUEST", "string");
	this.dsUpdateHold.addColumn("SEQ_ALLOT", "string");	
	this.dsUpdateHold.addColumn("YN_DEFER", "string");
	this.dsUpdateHold.addColumn("AM_DEFER", "bigdecimal");	
	this.dsUpdateHold.addColumn("RM_DEFER", "string");
	this.dsUpdateHold.addColumn("DT_EXPIRY", "string");
	this.dsUpdateHold.addColumn("ID_USER", "string");	

	this.dsDelete = new Dataset();
	this.dsDelete.addColumn("NO_REQUEST", "bigdecimal");
	this.dsDelete.addColumn("NO_MIBUL", "bigdecimal");
	this.dsDelete.addColumn("AM_REQ", "bigdecimal");
	this.dsDelete.addColumn("DT_REQ", "string");
	this.dsDelete.addColumn("ID_USER", "string");
}

/************************************************************************
 * 버튼 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;

	this.gfnGridBeforeSelect(this.dxGrid);
	this.gfnGridBeforeSelect(this.dxGridSub);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	this.dsSelect.setColumn(0, "DT_REQ_FROM", this.dsSearch.getColumn(0, "DT_REQ_FROM"));
	this.dsSelect.setColumn(0, "DT_REQ_TO", this.dsSearch.getColumn(0, "DT_REQ_TO"));
	this.dsSelect.setColumn(0, "CD_DEPTOPER", this.dsSearch.getColumn(0, "CD_DEPTOPER"));
	this.dsSelect.setColumn(0, "CD_DEPT_BE", this.dsSearch.getColumn(0, "CD_DEPT_BE"));
	this.dsSelect.setColumn(0, "CD_VENDOR", this.dsSearch.getColumn(0, "CD_VENDOR"));
	this.dsSelect.setColumn(0, "CD_SYSTEM", this.dsSearch.getColumn(0, "CD_SYSTEM"));
	this.dsSelect.setColumn(0, "ACCT_CD", this.dsSearch.getColumn(0, "ACCT_CD"));
	this.dsSelect.setColumn(0, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
	this.dsSelect.setColumn(0, "TY_CASH", this.dsSearch.getColumn(0, "TY_PAY"));
	this.dsSelect.setColumn(0, "CD_TRADE", this.dsSearch.getColumn(0, "CD_TRADE"));
	this.dsSelect.setColumn(0, "GR_SEARCH", this.FormInfo.GR_SEARCH); //20200311 추가
	this.dsSelect.setColumn(0, "ID_USER", this.AuthClient.ID_USER); //20200311 추가
	this.dsSelect.setColumn(0, "CD_DEPT", this.AuthClient.CD_DEPT);	 //20200311 추가
	this.dsSelect.setColumn(0, "TY_PAYMENT2", this.dsSearch.getColumn(0, "TY_PAYMENT2"));	 //20200411 추가 
	this.dsSelect.setColumn(0, "NO_CONSULT", this.dsSearch.getColumn(0, "NO_CONSULT"));		 //20200428 추가
	

	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect t_select=dsSelect";
	var outData     = "dsList=select0 dsListSub=t_select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
	
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
}

/*
 *	삭제 버튼
 */ 
this.fnDel = function() {
}

/*
 *	저장 버튼
 */ 
this.fnSave = function() { //20200313 추가
	// 그리드 필수항목 체크
	if (!this.gfnGridValidate(this.dxGrid)) return;
	this.dxGrid.updateToDataset();
	this.dsSave.clearData();

	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "U":
				var nrow = this.dsSave.addRow();
				//this.dsSave.setColumn(nrow, "TY_SAVE", flag);
				this.dsSave.setColumn(nrow, "NO_MIBUL", this.dsList.getColumn(i, "NO_MIBUL"));
				this.dsSave.setColumn(nrow, "AM_CASH", this.dsList.getColumn(i, "AM_CASH"));
				this.dsSave.setColumn(nrow, "AM_NOTES", this.dsList.getColumn(i, "AM_NOTES"));
				this.dsSave.setColumn(nrow, "DT_REQ_C", this.dsList.getColumn(i, "DT_REQ_C"));
				this.dsSave.setColumn(nrow, "DT_REQ_N", this.dsList.getColumn(i, "DT_REQ_N"));
				this.dsSave.setColumn(nrow, "NO_ACCOUNT", this.dsList.getColumn(i, "NO_ACCOUNT"));
				this.dsSave.setColumn(nrow, "TY_GUBUN", this.dsList.getColumn(i, "TY_GUBUN"));
				this.dsSave.setColumn(nrow, "CD_BANK", this.dsList.getColumn(i, "CD_BANK"));
				this.dsSave.setColumn(nrow, "CD_SIDEBANK", this.dsList.getColumn(i, "CD_SIDEBANK"));
				this.dsSave.setColumn(nrow, "NO_ACCOUNT_B2B", this.dsList.getColumn(i, "NO_ACCOUNT_B2B"));
				this.dsSave.setColumn(nrow, "TY_GUBUN_B2B", this.dsList.getColumn(i, "TY_GUBUN_B2B"));
				this.dsSave.setColumn(nrow, "CD_BANK_B2B", this.dsList.getColumn(i, "CD_BANK_B2B"));
				this.dsSave.setColumn(nrow, "CD_SIDEBANK_B2B", this.dsList.getColumn(i, "CD_SIDEBANK_B2B"));
				this.dsSave.setColumn(nrow, "DT_EXPIRY", this.dsList.getColumn(i, "DT_EXPIRY"));
				this.dsSave.setColumn(nrow, "QN_ILSU", this.dsList.getColumn(i, "QN_ILSU"));
				this.dsSave.setColumn(nrow, "CD_SUJI", this.dsList.getColumn(i, "CD_SUJI"));			
				this.dsSave.setColumn(nrow, "TY_PAYMENT2", this.dsList.getColumn(i, "TY_PAYMENT2"));
				this.dsSave.setColumn(nrow, "NO_CONSULT", this.dsList.getColumn(i, "NO_CONSULT"));
				this.dsSave.setColumn(nrow, "RM_BIGO", this.dsList.getColumn(i, "RM_BIGO"));	
				this.dsSave.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
				this.dsSave.setColumn(nrow, "CD_VENDOR", this.dsList.getColumn(i, "CD_VENDOR"));
				break;
		}
	}

	if (this.dsSave.rowcount == 0) return;

	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "save=dsSave";
	var outData     = "dsOutput=save";
	var strArg      = "";
	var callBackFnc = "fnCallback";

	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */ 
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}
 
/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {	

	if (nexacro.toNumber(this.grSearch) >= 1) {
		if (this.gfnIsNull(this.ccfCD_CORP.form.CDTextBox.text)) {
			this.gfnAlert("법인코드가 입력되지 않았습니다.");
			this.ccfCD_CORP.form.CDTextBox.setFocus();
			return false;
		}
	}	 
// 	if (nexacro.toNumber(this.grSearch) >= 7) {
// 		if (this.gfnIsNull(this.ccfCD_DEPTOPER.form.CDTextBox.text)) {
// 			this.gfnAlert("발의부서가 입력되지 않았습니다.");
// 			this.ccfCD_DEPTOPER.form.CDTextBox.setFocus();
// 			return false;
// 		}
// 	} 20200311 주석

	if (this.gfnIsNull(this.ctclDT_REQ_FROM.value)) {
		this.gfnAlert("회계일자(FROM)을 입력 하세요.");
		this.ctclDT_REQ_FROM.setFocus();
		return false;
	}
	
	if (this.gfnIsNull(this.ctclDT_REQ_TO.value)) {
		this.gfnAlert("회계일자(TO)을 입력 하세요.");
		this.ctclDT_REQ_TO.setFocus();
		return false;
	}

	if ( !this.gfnIsNull(this.ctclDT_REQ_FROM.value) && !this.gfnIsNull(this.ctclDT_REQ_TO.value) ) {
		if ( this.ctclDT_REQ_FROM.value > this.ctclDT_REQ_TO.value ) {
			this.gfnAlert("회계일자가 잘못 입력 되었습니다..");
			this.ctclDT_REQ_FROM.setFocus();
			return false;
		}
	}	
	// 출금구분
// 	if (this.gfnIsNull(this.ccboTY_PAYMENT2.value)) {
// 		this.gfnAlert("출금구분을 선텍하세요.");
// 		return false;
// 	}	
	

	return true;
};
/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);
		this.gfnGridAfterSelect(this.dxGridSub);	
		
		this.fnSetButton();
	}
	else if (svcID == "update" || svcID == "update2") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "insert") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}else if(svcID == "updateH") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}else if(svcID == "delete") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "savesub") {
		if (errorCode == 0) {
			this.FormBtns.SubSelect.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	} else if (svcID == "combo") {
		//  조회조건(완료여부)
		var iRow = this.dsTY_PAY.insertRow(0); 
		this.dsTY_PAY.setColumn(iRow, "CD_CODE", "");
		this.dsTY_PAY.setColumn(iRow, "DS_CODE", "전체");
		
		//this.ccboTY_PAY.set_index(0);
		this.ccboTY_PAY.set_index(0);	// 전체
		this.setGridPropertyByTyPay(this.ccboTY_PAY.value);
				
		var iRow = this.dsTY_PAYMENT2.insertRow(0);
		this.dsTY_PAYMENT2.setColumn(iRow, "CD_CODE", "");
		this.dsTY_PAYMENT2.setColumn(iRow, "DS_CODE", "전체");
		this.divSearch.form.ccboTY_PAYMENT2.set_index(0);		
		
		//this.divSearch_ccboTY_PAY_onitemchanged(this.ccboTY_PAY);
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow)  {
	if (id == "ccfCD_CORP") {
		dsUserParam.setColumn(nrow, "CD_GROUP", ""); 
	}
	else if (id == "ccfCD_DEPTOPER") {
		dsUserParam.setColumn(nrow, "CD_GROUP", ""); 
		dsUserParam.setColumn(nrow, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP")); 
		dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
		dsUserParam.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
		dsUserParam.setColumn(nrow, "CD_DEPT", this.AuthClient.CD_DEPT);
	}
	else if (id == "ccfCD_DEPT_BE") {
		dsUserParam.setColumn(nrow, "CD_GROUP", ""); 
		dsUserParam.setColumn(nrow, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP")); 
	}
	else if (id == "ccfCD_VENDOR") {
		dsUserParam.setColumn(nrow, "TY_VENDOR1", "전체"); 
		dsUserParam.setColumn(nrow, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP")); 
	}
	else if (id == "ccfNO_CONSULT") { //원안품의
		dsUserParam.setColumn(nrow, "CD_CORP",  this.dsSearch.getColumn(0, "CD_CORP")); 
		dsUserParam.setColumn(nrow, "GR_SEARCH",  this.FormInfo.GR_SEARCH);
		dsUserParam.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
		dsUserParam.setColumn(nrow, "CD_DEPT", this.dsSearch.getColumn(0, "CD_DEPTOPER")); //발행부서 
		dsUserParam.setColumn(nrow, "FR_DATE", this.dsSearch.getColumn(0, "DT_REQ_FROM")); //회계일자
		dsUserParam.setColumn(nrow, "TO_DATE", this.dsSearch.getColumn(0, "DT_REQ_TO")); //회계일자
	}	
	return true;
}

this.fnAfterCDTextChanged = function(id) {
	this.fnSearchInit();
} 


this.fnGrid_BeforuserDataSetParam = function(id, dsUserParam, nrow) {

	var cdCorp = this.dsList.getColumn(this.dsList.rowposition, "CD_CORP");
	
	// 계좌(현금)
	if (id == "DFX_CFACCOUNTMATCH") {
		dsUserParam.setColumn(nrow, "TY_VENDOR", this.dsList.getColumn(this.dsList.rowposition, "TY_VENDOR"));
		dsUserParam.setColumn(nrow, "CD_PAY", this.dsList.getColumn(this.dsList.rowposition, "CD_VENDOR"));
		dsUserParam.setColumn(nrow, "TY_CASH", this.dsList.getColumn(this.dsList.rowposition, "CD_CURR") == "KRW" ? "C" : "F");
		dsUserParam.setColumn(nrow, "CD_CORP", cdCorp);
	} 
	
	// 계좌(어음)
	if (id == "DFX_CFACCOUNTMATCH1") {
		dsUserParam.setColumn(nrow, "TY_VENDOR", this.dsList.getColumn(this.dsList.rowposition, "TY_VENDOR"));
		dsUserParam.setColumn(nrow, "CD_PAY", this.dsList.getColumn(this.dsList.rowposition, "CD_VENDOR"));
		dsUserParam.setColumn(nrow, "TY_CASH", "N");
		dsUserParam.setColumn(nrow, "CD_CORP", cdCorp);
	} 	
	
	// 수지
	if (id == "DFX_CFSUJICODE") {
		dsUserParam.setColumn(nrow, "TY_INOUT", "O");	
		dsUserParam.setColumn(nrow, "YN_USE", "Y");		
	}
	
	// 원안품의
	if (id == "DFX_CFCONSULTDTL") {
		dsUserParam.setColumn(nrow, "CD_DEPT", this.dsList.getColumn(this.dsList.rowposition, "CD_DEPTOPER"));		
		dsUserParam.setColumn(nrow, "DT_REQUEST", this.dsList.getColumn(this.dsList.rowposition, "DT_REQ_C"));
		dsUserParam.setColumn(nrow, "DT_REQUEST_N", this.dsList.getColumn(this.dsList.rowposition, "DT_REQ_N"));
		dsUserParam.setColumn(nrow, "AM_CASH", this.dsList.getColumn(this.dsList.rowposition, "AM_CASH"));
		dsUserParam.setColumn(nrow, "AM_NOTES", this.dsList.getColumn(this.dsList.rowposition, "AM_NOTES"));
		//dsUserParam.setColumn(nrow, "CD_DEPT", "0111807");		
	}
	
	//trace(dsUserParam.saveXML());
	return true;
}

this.fnGrid_AfterCDTextChanged = function(id, codeFindData) {
		
	// 계좌(현금)
	if (id == "DFX_CFACCOUNTMATCH") {
	} 
	
	// 계좌(어음)
	if (id == "DFX_CFACCOUNTMATCH1") {
	} 	
	
	// 수지
	if (id == "DFX_CFSUJICODE") {
	}
	
	// 원안품의
	if (id == "DFX_CFCONSULTDTL") {	
	}
	
	return true;
};
/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
 this.fnGrid_RowCellChanged = function(obj:nexacro.Grid,e:nexacro.GridSelectEventInfo)
{
	
	if (!this.gfnGridIsRow(this.dxGrid)) return;
	
	var noslip = this.dsList.getColumn(this.dsList.rowposition, "NO_SLIP1");
	if(noslip == "") {
		this.divData.form.divDataTop.form.btnIssueSlip.set_enable(false);
	}
	else {
		this.divData.form.divDataTop.form.btnIssueSlip.set_enable(true);
	}
};

/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.fnSearchInit = function(obj,e) {
	if(e == null || (e.pretext != e.posttext)) {
		this.gfnSetFormStatus(this);
		this.gfnGridClear(this.dxGrid);
		this.gfnGridClear(this.dxGridSub);
	}
}

this.divSearch_ccboTY_PAY_onitemchanged = function(obj:nexacro.Combo,e:nexacro.ItemChangeEventInfo)
{
	var sTyPay = e.postvalue;
	this.setGridPropertyByTyPay(sTyPay);
};

// 현금구분 콤보 값 변경 셋팅
this.setGridPropertyByTyPay = function(sTyPay){

	this.fnSearchInit();

	//if(e.prevalue != e.postvalue) {
		this.dxGrid.setFormatColProperty(10, "size", 100);
		this.dxGrid.setFormatColProperty(11, "size", 100);
		this.dxGrid.setFormatColProperty(12, "size", 100);
		this.dxGrid.setFormatColProperty(13, "size", 100);
		this.dxGrid.setFormatColProperty(14, "size", 100);
		this.dxGrid.setFormatColProperty(18, "size", 100);
		this.dxGrid.setFormatColProperty(22, "size", 100);
		this.dxGrid.setFormatColProperty(23, "size", 80);
		
		this.dxGridSub.setFormatColProperty(8, "size", 100);
		this.dxGridSub.setFormatColProperty(9, "size", 100);
		this.dxGridSub.setFormatColProperty(10, "size", 100);
		this.dxGridSub.setFormatColProperty(11, "size", 100);
		this.dxGridSub.setFormatColProperty(12, "size", 100);
		this.dxGridSub.setFormatColProperty(13, "size", 100);
		this.dxGridSub.setFormatColProperty(14, "size", 100);
		this.dxGridSub.setFormatColProperty(15, "size", 80);

		if (sTyPay == "C" || sTyPay =="F") {
			this.dxGrid.setFormatColProperty(11, "size", 0);
			this.dxGrid.setFormatColProperty(13, "size", 0);
			this.dxGrid.setFormatColProperty(18, "size", 0);
			this.dxGrid.setFormatColProperty(22, "size", 0);
			this.dxGrid.setFormatColProperty(23, "size", 0);
			
			this.dxGridSub.setFormatColProperty(10, "size", 0);
			this.dxGridSub.setFormatColProperty(12, "size", 0);
			this.dxGridSub.setFormatColProperty(14, "size", 0);
			this.dxGridSub.setFormatColProperty(15, "size", 0);
			this.dxGridSub.setFormatColProperty(16, "size", 0);			
		}
		else if (sTyPay == "N") {
			this.dxGrid.setFormatColProperty(10, "size", 0);
			this.dxGrid.setFormatColProperty(12, "size", 0);
			this.dxGrid.setFormatColProperty(14, "size", 0);
			
			this.dxGridSub.setFormatColProperty(9, "size", 0);
			this.dxGridSub.setFormatColProperty(11, "size", 0);
			this.dxGridSub.setFormatColProperty(13, "size", 0);
		}
	//}
};

// 공통코드콤보
this.fnSetCombo = function() {
	
	this.dsCombo = new Dataset();
	this.dsCombo.addColumn("CD_SYSTEM", "string");
	this.dsCombo.addColumn("CD_TYPE", "string");
	this.dsCombo.addRow();
	this.dsCombo.setColumn(0, "CD_SYSTEM", "DF");
	this.dsCombo.setColumn(0, "CD_TYPE", "B7");	
	
	this.dsCombo2 = new Dataset();
	this.dsCombo2.addColumn("CD_SYSTEM", "string");
	this.dsCombo2.addColumn("CD_TYPE", "string");
	this.dsCombo2.addRow();
	this.dsCombo2.setColumn(0, "CD_SYSTEM", "DF");
	this.dsCombo2.setColumn(0, "CD_TYPE", "B2");		
	
	var strSvcId    = "combo";
	var strSvcType  = "select";
	var inProc		= "_dsProc";
	var inData      = "combo=dsCombo combo2=dsCombo2";
	var outData     = "dsTY_PAY=combo0 dsTY_PAYMENT2=combo20";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); 	// 통신방법 정의 [생략가능]
};

this.divData_ondragmove = function(obj:nexacro.Div,e:nexacro.DragEventInfo)
{
	if(e.userdata == "splitter") {
		this.divData.form.divSplitter.set_top(e.clienty);
		this.divData.form.resetScroll();	
	}
};

this.divData_divSplitter_ondrag = function(obj:nexacro.Div,e:nexacro.DragEventInfo)
{
	e.set_userdata("splitter");
	return true;
};

this.btnDtUpdate_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	if (this.gfnIsNull(this.tclDT_REQ.value)) {
		this.gfnAlert("지급요청일을 입력하세요.");
		this.tclDT_REQ.setFocus();
		return false;
	}
	
	if (this.dsList.rowcount == 0) {
		this.gfnAlert("선택한 내역이 존재하지 않습니다.");
		return false;		
	}
	
	if ( this.dsList.findRow("CHK", 1) <= -1 ) {
		this.gfnAlert("체크된 행이 없습니다.");
		return false;
	}	
	
	this.gfnConfirm("현재 선택한 내역을 집행요청일자 일괄변경 하시겠습니까?", "fnDtUpdate_callback");
};

this.fnDtUpdate_callback = function(strId, val) 
{
// 	if (this.gfnIsNull(this.tclDT_REQ.value)) {
// 		// Alert후 실행할 처리
// 		this.fnVaidateCallback = function() {
// 			this.ccfCD_SYSTEM.form.CDTextBox.setFocus();
// 		}
// 		this.gfnAlert("시스템을 입력하세요.", "fnVaidateCallback");
// 		return false;
// 	}
	
	if (!val) {return;}
	
	var arrChk = [];
	for(var i = 0; i < this.dsList.rowcount; i++) {
		if(this.dsList.getColumn(i, "CHK") == 1) {
			arrChk.push(i);
		}
	}	
	
	if(arrChk.length > 0) { 
		this.dsUpdate.clearData();
		
		// 체크행 처리
		//this.gfnAlert("체크행:" + arrChk.join(','));
		for(var i = 0; i < arrChk.length; i++) {
			var nrow = this.dsUpdate.addRow();
			this.dsUpdate.setColumn(nrow, "NO_MIBUL", this.dsList.getColumn(arrChk[i], "NO_MIBUL"));
			this.dsUpdate.setColumn(nrow, "DT_REQ", this.tclDT_REQ.value);
		}		
	
		if (this.dsUpdate.rowcount == 0) return;
	
		var strSvcId    = "update";
		var strSvcType  = "save";
		var inProc		= "_dsProc";
		var inData      = "update=dsUpdate";
		var outData     = "";
		var strArg      = "";
		var callBackFnc = "fnCallback";
		
		this.gfnTransaction(strSvcId , 	// transaction을 구분하기 위한 svc id값
							strSvcType , 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
							callBackFnc); // 통신방법 정의 [생략가능]
	
	} else {
		this.gfnAlert("체크된 행이 없습니다.");
	}
};

// 어음만기일 변경
this.btnDtUpdate2_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	if (this.gfnIsNull(this.tclDT_EXPIRY.value)) {
		this.gfnAlert("어음만기일을 입력하세요.");
		this.tclDT_EXPIRY.setFocus();
		return false;
	}
	
	if (this.dsList.rowcount == 0) {
		this.gfnAlert("선택한 내역이 존재하지 않습니다.");
		return false;		
	}
	
	if ( this.dsList.findRow("CHK", 1) <= -1 ) {
		this.gfnAlert("체크된 행이 없습니다.");
		return false;
	}	
	
	this.gfnConfirm("현재 선택한 내역의 어음만기일자를 일괄변경 하시겠습니까?", "fnDtUpdate2_callback");	
};

this.fnDtUpdate2_callback = function(strId, val) 
{
	if (!val) {return;}
	
	var arrChk = [];
	for(var i = 0; i < this.dsList.rowcount; i++) {
		if(this.dsList.getColumn(i, "CHK") == 1) {
			arrChk.push(i);
		}
	}	
	
	// 체크된 행의 어음금액이 있어야 UDPATE 가능 >> sp 처리로 주석처리
// 	for(var i = 0; i < arrChk.length; i++) {
// 		if(this.dsList.getColumn(arrChk[i], "AM_NOTES") <= 0){
// 			this.gfnAlert("어음청구금액이 존재하는 행만 어음변경일을 수정할 수 있습니다.");
// 			return;
// 		}
// 	}	
	
	if(arrChk.length > 0) { 
		this.dsUpdate2.clearData();
		
		// 체크행 처리
		//this.gfnAlert("체크행:" + arrChk.join(','));
		for(var i = 0; i < arrChk.length; i++) {
			var nrow = this.dsUpdate2.addRow();
			this.dsUpdate2.setColumn(nrow, "NO_MIBUL", this.dsList.getColumn(arrChk[i], "NO_MIBUL"));
			this.dsUpdate2.setColumn(nrow, "DT_EXPIRY", this.tclDT_EXPIRY.value);
		}		
	
		if (this.dsUpdate2.rowcount == 0) return;
	
		var strSvcId    = "update2";
		var strSvcType  = "save";
		var inProc		= "_dsProc";
		var inData      = "update2=dsUpdate2";
		var outData     = "";
		var strArg      = "";
		var callBackFnc = "fnCallback";
		
		this.gfnTransaction(strSvcId , 	// transaction을 구분하기 위한 svc id값
							strSvcType , 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
							callBackFnc); // 통신방법 정의 [생략가능]
	
	} else {
		this.gfnAlert("체크된 행이 없습니다.");
	}
};




this.btnInsert_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{

	if ( this.dsList.findRow("CHK", 1) <= -1 ) {
		this.gfnAlert("체크된 행이 없습니다.");
		return false;
	}

	var isConfirm = false;
	for(var i = 0; i < this.dsList.rowcount; i++) {
		if(this.dsList.getColumn(i, "CHK") == 1) {
			if (this.dsList.getColumn(i, "YN_CLAIM") == "Y")
				isConfirm = true;
		}
	}
	
	var msg = "현재 선택한 내역을 청구 하시겠습니까?";
	if (isConfirm)
	{
		msg = "채권채무내역이 존재합니다.\r\n" + msg;
	}
	this.gfnConfirm(msg, "fnInsert_callback");

};

this.fnInsert_callback = function(strId, val) 
{
	if (!val) {return;}
	
	var arrChk = [];
	for(var i = 0; i < this.dsList.rowcount; i++) {
		if(this.dsList.getColumn(i, "CHK") == 1) {
			if (!this.fnValidUser(i)) {
				return false;
			}
				
			arrChk.push(i);
		}
	}
	
	if(arrChk.length > 0) { 
		this.dsInsert.clearData();
		
		// 체크행 처리
		for(var i = 0; i < arrChk.length; i++) {
			var nrow = this.dsInsert.addRow();
			this.dsInsert.setColumn(nrow, "NO_MIBUL", this.dsList.getColumn(arrChk[i], "NO_MIBUL"));
			this.dsInsert.setColumn(nrow, "AM_REQ", this.dsList.getColumn(arrChk[i], "AM_CASH") + this.dsList.getColumn(arrChk[i], "AM_NOTES"));
			this.dsInsert.setColumn(nrow, "AM_CASH", this.dsList.getColumn(arrChk[i], "AM_CASH"));
			this.dsInsert.setColumn(nrow, "AM_NOTES", this.dsList.getColumn(arrChk[i], "AM_NOTES"));
			this.dsInsert.setColumn(nrow, "QN_ILSU", this.dsList.getColumn(arrChk[i], "QN_ILSU"));
			this.dsInsert.setColumn(nrow, "DT_EXPIRY", this.dsList.getColumn(arrChk[i], "DT_EXPIRY"));
			this.dsInsert.setColumn(nrow, "RM_BIGO", this.dsList.getColumn(arrChk[i], "RM_BIGO"));
			this.dsInsert.setColumn(nrow, "NO_ACCOUNT", this.dsList.getColumn(arrChk[i], "NO_ACCOUNT"));
			this.dsInsert.setColumn(nrow, "TY_GUBUN", this.dsList.getColumn(arrChk[i], "TY_GUBUN"));
			this.dsInsert.setColumn(nrow, "CD_BANK", this.dsList.getColumn(arrChk[i], "CD_BANK"));
			this.dsInsert.setColumn(nrow, "CD_SIDEBANK", this.dsList.getColumn(arrChk[i], "CD_SIDEBANK"));
			this.dsInsert.setColumn(nrow, "NO_ACCOUNT_B2B", this.dsList.getColumn(arrChk[i], "NO_ACCOUNT_B2B"));
			this.dsInsert.setColumn(nrow, "TY_GUBUN_B2B", this.dsList.getColumn(arrChk[i], "TY_GUBUN_B2B"));
			this.dsInsert.setColumn(nrow, "CD_BANK_B2B", this.dsList.getColumn(arrChk[i], "CD_BANK_B2B"));
			this.dsInsert.setColumn(nrow, "CD_SIDEBANK_B2B", this.dsList.getColumn(arrChk[i], "CD_SIDEBANK_B2B"));
			this.dsInsert.setColumn(nrow, "DT_REQ_C", this.dsList.getColumn(arrChk[i], "DT_REQ_C"));
			this.dsInsert.setColumn(nrow, "DT_REQ_N", this.dsList.getColumn(arrChk[i], "DT_REQ_N"));
			this.dsInsert.setColumn(nrow, "CD_SUJI", this.dsList.getColumn(arrChk[i], "CD_SUJI"));
			this.dsInsert.setColumn(nrow, "TY_PAYMENT2", this.dsList.getColumn(arrChk[i], "TY_PAYMENT2"));
			this.dsInsert.setColumn(nrow, "NO_CONSULT", this.dsList.getColumn(arrChk[i], "NO_CONSULT"));
			this.dsInsert.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
		}
		
		if (this.dsInsert.rowcount == 0) return;
	
		var strSvcId    = "insert";
		var strSvcType  = "save";
		var inProc		= "_dsProc";
		var inData      = "insert=dsInsert";
		var outData     = "";
		var strArg      = "";
		var callBackFnc = "fnCallback";
		
		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
							strSvcType , 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
							callBackFnc); // 통신방법 정의 [생략가능]
	
	} else {
		this.gfnAlert("체크된 행이 없습니다.");
	}
}

this.fnValidUser = function(r) {
	var msg = "";
	var blnEmpty = true;
	
// 	if ( this.gfnIsNull(this.dsList.getColumn(r, "CD_SUJI")) ) {
// 		msg += "자금수지(코드)가 입력되지 않았습니다.!!\r\n";
// 		blnEmpty = false;	
// 	}
// 	
// 	if ( this.gfnIsNull(this.dsList.getColumn(r, "TY_PAYMENT2")) ) {
// 		msg += "출금구분이 입력되지 않았습니다.!!\r\n";
// 		blnEmpty = false;	
// 	}	
	
	if ((this.dsList.getColumn(r, "CD_SYSTEM") == "DSB" || this.dsList.getColumn(r, "CD_SYSTEM") == "DSC") && this.dsList.getColumn(r, "AM_NOTES") > 0) {
		msg += "노무비는 [어음(전자)지급]을 할 수가 없습니다!!!\r\n";
		blnEmpty = false;
	}
	if (this.dsList.getColumn(r, "CD_SYSTEM") == "DAU" && this.dsList.getColumn(r, "AM_NOTES") > 0) {
		msg += "급여는 [어음(전자)지급]을 할 수가 없습니다!!!\r\n";
		blnEmpty = false;
	}
	if (this.dsList.getColumn(r, "AM_REMAIN") + this.dsList.getColumn(r, "AM_REQUEST") < this.dsList.getColumn(r, "AM_CASH") + this.dsList.getColumn(r, "AM_NOTES")) {
		msg += "청구금액이 청구가능금액을 초과하였습니다.\r\n";
		blnEmpty = false;
	}
	if (this.dsList.getColumn(r, "AM_CASH") == 0 && this.dsList.getColumn(r, "AM_NOTES") == 0) {
		msg += "청구할 금액(현금+어음)이 입력되지 않았습니다.\r\n";
		blnEmpty = false;
	}
	if (this.dsList.getColumn(r, "AM_REMAIN") < this.dsList.getColumn(r, "AM_REQUEST") + this.dsList.getColumn(r, "AM_CASH") + this.dsList.getColumn(r, "AM_NOTES")) {
		msg += "청구금액(현금+어음)은 (잔액-청구중)금액을 초과할수 없습니다.\r\n";
		blnEmpty = false;
	}
	if (this.dsList.getColumn(r, "AM_NOTES") != 0) {
		if (this.gfnIsNull(this.dsList.getColumn(r, "DT_REQ_N"))) {
			msg += "청구금액(어음)이 존재하므로 집행요청일(어음)은 필수입력 항목입니다.\r\n";
			blnEmpty = false;
		}
// 		if (this.gfnIsNull(this.dsList.getColumn(r, "DT_EXPIRY"))) {
// 			msg += "청구금액(어음)이 존재하므로 만기일자는 필수입력 항목입니다.\r\n";
// 			blnEmpty = false;
// 		}
		
		// 2019.10.02 SP에서 체크함에 따라 주석처리
// 		if (!this.gfnIsNull(this.dsList.getColumn(r, "DT_EFDTE")) && !this.gfnIsNull(this.dsList.getColumn(r, "DT_EXPIRY"))) {
// 			if (this.dsList.getColumn(r, "DT_EFDTE") > this.dsList.getColumn(r, "DT_EXPIRY")) {
// 				msg += "어음 만기일자는 계상일자보다 이전일 수 없습니다.\r\n";
// 				blnEmpty = false;
// 			}
// 		}
	}
	
	if (!blnEmpty) {
		this.gfnAlert(msg);
		return false;
	}
	
	return true;
}

this.btnIssueSlip_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	var param = {};

	var no_slip = this.dsList.getColumn(this.dsList.rowposition, "NO_SLIP1");

	if(no_slip == "" || this.gfnIsNull(no_slip))
	{
		this.gfnAlert("발행된 전표가 없습니다.");
		return false;
	}

	param.CD_TRADE = no_slip;
	param.IUD_FLAG = "S";
	param.strYN_JUNDO_START = "";

	this.gfnFormOpen("DHA", "DHA_ISSUESLIP", "fnPopCallBack", param);
};

this.fnPopCallBack = function(svcID, val) {
	//if (val != false) {
		//var json = JSON.parse(val);
		
// 		if (svcID.indexOf("DHA_ISSUESLIP") > -1) {
// 			this.FormBtns.Select.click();
// 		}
	//}
}

this.btnDelete_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	if ( this.dsListSub.findRow("CHK", 1) <= -1 ) {
		this.gfnAlert("체크된 행이 없습니다.");
		return false;
	}	

	this.gfnConfirm("선택한 청구내역을 취소 하시겠습니까?", "fnDelete_callback");
};

this.fnDelete_callback = function(strId, val) 
{
	if (!val) {return;}
	
	var arrChk = [];
	for(var i = 0; i < this.dsListSub.rowcount; i++) {
		if(this.dsListSub.getColumn(i, "CHK") == 1) {
			arrChk.push(i);
		}
	}	
	
	if(arrChk.length > 0) { 
		this.dsDelete.clearData();
		
		// 체크행 처리
		//this.gfnAlert("체크행:" + arrChk.join(','));
		for(var i = 0; i < arrChk.length; i++) {
			var nrow = this.dsDelete.addRow();
			this.dsDelete.setColumn(nrow, "NO_REQUEST", this.dsListSub.getColumn(arrChk[i], "NO_REQUEST"));
			this.dsDelete.setColumn(nrow, "NO_MIBUL", this.dsListSub.getColumn(arrChk[i], "NO_MIBUL"));
			this.dsDelete.setColumn(nrow, "AM_REQ", this.dsListSub.getColumn(arrChk[i], "AM_CASH") + this.dsListSub.getColumn(arrChk[i], "AM_NOTES"));
			this.dsDelete.setColumn(nrow, "DT_REQ", this.dsListSub.getColumn(arrChk[i], "DT_REQ"));
			this.dsDelete.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
		}		
	
		if (this.dsDelete.rowcount == 0) return;
	
		var strSvcId    = "delete";
		var strSvcType  = "save";
		var inProc		= "_dsProc";
		var inData      = "delete=dsDelete";
		var outData     = "";
		var strArg      = "";
		var callBackFnc = "fnCallback";
		
		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
							strSvcType , 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
							callBackFnc); // 통신방법 정의 [생략가능]
	
	} else {
		this.gfnAlert("체크된 행이 없습니다.");
	}
};



this.dsList_oncolumnchanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if( this.dsList.getColumn(this.dsList.rowposition, this.ucFlag) == "#" ) {
		return;
	}
	
	
	//trace(this.dsList.saveXML());
	this.fnSetButton();
};

// 계좌관리 popup
this.fnAccount = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	if(!this.gfnGridIsRow(this.dxGrid)) return;
	var param = {};
	param.CD_VENDOR = this.dsList.getColumn(this.dsList.rowposition,"CD_VENDOR");
	param.DS_VENDOR = this.dsList.getColumn(this.dsList.rowposition,"DS_VENDOR");

	param.CD_CORP = this.dsSearch.getColumn(0, "CD_CORP");
	param.DS_CORP = this.ccfCD_CORP.form.DSTextBox.value;

	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DFB_ACCOUNT", "", param);
}

/*
 *현금구분 : 전체
 *   AFTER_EDIT : AM_CASH   -> 어음 = 잔액 - 청구중금액 - AM_CASH
 *           AM_NOTES -> 현금 = 잔액 - 청구중금액 - AM_NOTES
 *현금구분 : 현금
 *   AFTER_EDIT : AM_CASH   -> 어음 = 0
 *현금구분 : 어음
 *   AFTER_EDIT : AM_NOTES   -> 현금 = 0
 */   
this.fnGrid_AfterEdit = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo) {

	if(e.columnid == "AM_CASH" || e.columnid == "AM_NOTES") {
		if(e.oldvalue != e.newvalue) {
			var AM_REMAIN = this.dsList.getColumn(this.dsList.rowposition, "AM_REMAIN");	// 잔액
			var AM_REQUEST = this.dsList.getColumn(this.dsList.rowposition, "AM_REQUEST");	// 청구중금액
			var AM_CASH = this.dsList.getColumn(this.dsList.rowposition, "AM_CASH");		// 현금
			var AM_NOTES = this.dsList.getColumn(this.dsList.rowposition, "AM_NOTES");		// 어음
		
			switch(this.ccboTY_PAY.text) {
// 			case "전체":
// 				if (e.columnid == "AM_CASH") {
// 					this.dsList.setColumn(this.dsList.rowposition, "AM_NOTES", (AM_REMAIN - AM_REQUEST - AM_CASH));
// 				}
// 				if (e.columnid == "AM_NOTES") {
// 					this.dsList.setColumn(this.dsList.rowposition, "AM_CASH", (AM_REMAIN - AM_REQUEST - AM_NOTES));
// 				}
// 				break;
			case "현금":
				if (e.columnid == "AM_CASH") {
					this.dsList.setColumn(this.dsList.rowposition, "AM_NOTES", 0);
				}			
				break;
			case "어음":
				if (e.columnid == "AM_NOTES") {
					this.dsList.setColumn(this.dsList.rowposition, "AM_CASH", 0);
				}			
				break;		
			default: 
			}
		}
	}
	else if (e.columnid = "TY_PAYMENT2"){
		if(e.oldvalue != e.newvalue) {
			this.gfnSetFormStatus(this, "U");		
			this.dsList.setColumn(e.row, this.ucFlag , "U");		
			this.FormBtns.Save.set_enable(true);
		}
	}
}
this.dsList_cancolumnchange = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if( this.dsList.getColumn(this.dsList.rowposition, this.ucFlag) == "#" ) {
		return;
	}

	this.fnSetButton();
	return true;
};
this.divData_divDataBottom_btnHold_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	if ( this.dsListSub.findRow("CHK", 1) <= -1 ) {
		this.gfnAlert("체크된 행이 없습니다.");
		return false;
	}	
	this.gfnConfirm("선택한 청구내역을 지급보류 하시겠습니까?", "fnHold_callback");
};

this.fnHold_callback = function(strId, val) 
{
	if (!val) {return;};
	
	var arrChk = [];
	for(var i = 0; i < this.dsListSub.rowcount; i++) {
		if(this.dsListSub.getColumn(i, "CHK") == 1) {
			arrChk.push(i);
		}
	};
	
	/*체크된 행의 지급보류 여부 체크*/
	for(var i = 0; i < arrChk.length; i++) {
		if(this.dsListSub.getColumn(arrChk[i], "YN_DEFER") == ""){
			this.gfnAlert("지급보류 여부를 확인해주세요.");
			return;
		}
		if (new String(this.dsListSub.getColumn(arrChk[i], "YN_DEFER")).valueOf() == "undefined"){
		    this.gfnAlert("지급보류 여부를 확인해주세요.");
			return;
		}
	};
	
	if(arrChk.length > 0) { 
		this.dsUpdateHold.clearData();
		// 체크행 처리
		//this.gfnAlert("체크행:" + arrChk.join(','));
		for(var i = 0; i < arrChk.length; i++) {
			var nrow = this.dsUpdateHold.addRow();
			this.dsUpdateHold.setColumn(nrow, "NO_REQUEST", this.dsListSub.getColumn(arrChk[i], "NO_REQUEST"));
			this.dsUpdateHold.setColumn(nrow, "SEQ_ALLOT", this.dsListSub.getColumn(arrChk[i], "SEQ_ALLOT"));
			this.dsUpdateHold.setColumn(nrow, "YN_DEFER", this.dsListSub.getColumn(arrChk[i], "YN_DEFER"));
			this.dsUpdateHold.setColumn(nrow, "AM_DEFER", this.dsListSub.getColumn(arrChk[i], "AM_DEFER"));
			this.dsUpdateHold.setColumn(nrow, "RM_DEFER", this.dsListSub.getColumn(arrChk[i], "RM_DEFER"));
			this.dsUpdateHold.setColumn(nrow, "DT_EXPIRY", this.dsListSub.getColumn(arrChk[i], "DT_EXPIRY"));
			this.dsUpdateHold.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
		}
	
		if (this.dsUpdateHold.rowcount == 0) return;
	
		var strSvcId    = "updateH";
		var strSvcType  = "save";
		var inProc		= "_dsProc";
		var inData      = "updateH=dsUpdateHold";
		var outData     = "";
		var strArg      = "";
		var callBackFnc = "fnCallback";
		
		this.gfnTransaction(strSvcId , 	// transaction을 구분하기 위한 svc id값
							strSvcType , 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
							callBackFnc); // 통신방법 정의 [생략가능]
	
	} else {
		this.gfnAlert("체크된 행이 없습니다.");
	}
};
]]></Script>
    <Objects>
      <Dataset id="dsList" oncolumnchanged="dsList_oncolumnchanged" cancolumnchange="dsList_cancolumnchange"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">t_select</Col>
            <Col id="SP">DFBPR_REQUEST_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DFBPR_MIBUL_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">insert</Col>
            <Col id="SP">DFBPR_REQUEST_INSERT</Col>
          </Row>
          <Row>
            <Col id="TARGET">save</Col>
            <Col id="SP">DFBPR_MIBUL_UPDATE</Col>
          </Row>
          <Row>
            <Col id="TARGET">delete</Col>
            <Col id="SP">DFBPR_REQUEST_DELETE</Col>
          </Row>
          <Row>
            <Col id="TARGET">update</Col>
            <Col id="SP">DFBPR_MIBUL_DT_UPDATE</Col>
          </Row>
          <Row>
            <Col id="TARGET">update2</Col>
            <Col id="SP">DFBPR_MIBUL_DT_EXPIRY</Col>
          </Row>
          <Row>
            <Col id="TARGET">combo</Col>
            <Col id="SP">DZXPR_COMBO_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">combo2</Col>
            <Col id="SP">DZXPR_COMBO_SELECT</Col>
          </Row>
          <Row>
            <Col id="SP">DFBPR_REQUEST_UPDATE</Col>
            <Col id="TARGET">updateH</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsListSub"/>
      <Dataset id="dsSearch">
        <ColumnInfo>
          <Column id="CD_CORP" type="STRING" size="256"/>
          <Column id="DT_REQ_FROM" type="STRING" size="256"/>
          <Column id="DT_REQ_TO" type="STRING" size="256"/>
          <Column id="TY_PAY" type="STRING" size="256"/>
          <Column id="CD_SYSTEM" type="STRING" size="256"/>
          <Column id="CD_DEPTOPER" type="STRING" size="256"/>
          <Column id="CD_VENDOR" type="STRING" size="256"/>
          <Column id="CD_DEPT_BE" type="STRING" size="256"/>
          <Column id="ACC_CD" type="STRING" size="256"/>
          <Column id="CD_TRADE" type="STRING" size="256"/>
          <Column id="TY_PAYMENT2" type="STRING" size="256"/>
          <Column id="NO_CONSULT" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
      <Dataset id="dsTY_PAY"/>
      <Dataset id="dsCD_SYSTEM">
        <ColumnInfo>
          <Column id="CD_CODE" type="STRING" size="256"/>
          <Column id="DS_CODE" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="DS_CODE">전체</Col>
          </Row>
          <Row>
            <Col id="DS_CODE">인사</Col>
            <Col id="CD_CODE">DA</Col>
          </Row>
          <Row>
            <Col id="DS_CODE">회계</Col>
            <Col id="CD_CODE">DH</Col>
          </Row>
          <Row>
            <Col id="DS_CODE">자재</Col>
            <Col id="CD_CODE">DM</Col>
          </Row>
          <Row>
            <Col id="DS_CODE">노무</Col>
            <Col id="CD_CODE">DS</Col>
          </Row>
          <Row>
            <Col id="DS_CODE">공사</Col>
            <Col id="CD_CODE">DW</Col>
          </Row>
          <Row>
            <Col id="DS_CODE">자금</Col>
            <Col id="CD_CODE">DF</Col>
          </Row>
          <Row>
            <Col id="DS_CODE">하자</Col>
            <Col id="CD_CODE">DB</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsTY_PAYMENT2"/>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ctclDT_REQ_FROM" propid="value" datasetid="dsSearch" columnid="DT_REQ_FROM"/>
      <BindItem id="item1" compid="divSearch.form.ctclDT_REQ_TO" propid="value" datasetid="dsSearch" columnid="DT_REQ_TO"/>
      <BindItem id="item2" compid="divSearch.form.ccfCD_CORP.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_CORP"/>
      <BindItem id="item3" compid="divSearch.form.ccboTY_PAY" propid="value" datasetid="dsSearch" columnid="TY_PAY"/>
      <BindItem id="item4" compid="divSearch.form.ccboCD_SYSTEM" propid="value" datasetid="dsSearch" columnid="CD_SYSTEM"/>
      <BindItem id="item5" compid="divSearch.form.ccfCD_DEPTOPER.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_DEPTOPER"/>
      <BindItem id="item6" compid="divSearch.form.ccfCD_VENDOR.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_VENDOR"/>
      <BindItem id="item7" compid="divSearch.form.ccfCD_DEPT_BE.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_DEPT_BE"/>
      <BindItem id="item8" compid="divSearch.form.ccfACC_CD.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="ACC_CD"/>
      <BindItem id="item9" compid="divSearch.form.edtCD_TRADE" propid="value" datasetid="dsSearch" columnid="CD_TRADE"/>
      <BindItem id="item10" compid="divSearch.form.ccboTY_PAYMENT2" propid="value" datasetid="dsSearch" columnid="TY_PAYMENT2"/>
      <BindItem id="item11" compid="divSearch.form.ccfNO_CONSULT.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="NO_CONSULT"/>
    </Bind>
  </Form>
</FDL>
