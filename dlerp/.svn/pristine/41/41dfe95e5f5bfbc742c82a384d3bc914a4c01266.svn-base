(function()
{
    return function()
    {
        if (!this._is_form)
            return;
        
        var obj = null;
        
        this.on_create = function()
        {
            this.set_name("form");
            this.set_titletext("평가진행현황");
            if (Form == this.constructor)
            {
                this._setFormPosition(1280,720);
            }
            
            // Object(Dataset, ExcelExportObject) Initialize
            obj = new Dataset("dsList", this);
            obj._setContents("");
            this.addChild(obj.name, obj);


            obj = new Dataset("dsListGoalHistory", this);
            obj._setContents("");
            this.addChild(obj.name, obj);


            obj = new Dataset("_dsProc", this);
            obj._setContents("<ColumnInfo><Column id=\"TARGET\" type=\"STRING\" size=\"256\"/><Column id=\"SP\" type=\"STRING\" size=\"256\"/></ColumnInfo><Rows><Row><Col id=\"TARGET\">select</Col><Col id=\"SP\">DAJPR_RTNG_PSNL_SELECT</Col></Row><Row><Col id=\"TARGET\">save</Col><Col id=\"SP\">DAJPR_RTNG_PSNL_SAVE</Col></Row><Row><Col id=\"TARGET\">complete</Col><Col id=\"SP\">DAJPR_RTNG_PSNL_RTNG_COMPLETE</Col></Row><Row><Col id=\"TARGET\">select_goal_history</Col><Col id=\"SP\">DAJPR_RTNG_GOAL_HISTORY_SELECT</Col></Row></Rows>");
            this.addChild(obj.name, obj);


            obj = new Dataset("dsSearch", this);
            obj._setContents("<ColumnInfo><Column id=\"CD_CORP\" type=\"STRING\" size=\"256\"/><Column id=\"DS_CORP\" type=\"STRING\" size=\"256\"/><Column id=\"ID_RTNG\" type=\"STRING\" size=\"256\"/><Column id=\"DS_RTNG\" type=\"STRING\" size=\"256\"/><Column id=\"TY_PTCP\" type=\"STRING\" size=\"256\"/><Column id=\"ID_SABUN\" type=\"STRING\" size=\"256\"/><Column id=\"DS_HNAME\" type=\"STRING\" size=\"256\"/><Column id=\"ID_PERSON\" type=\"STRING\" size=\"256\"/><Column id=\"CD_RTNG_ASBLNEXT\" type=\"STRING\" size=\"256\"/><Column id=\"DS_RTNG_ASBLNEXT\" type=\"STRING\" size=\"256\"/><Column id=\"ID_CNTN_RTNG\" type=\"STRING\" size=\"256\"/><Column id=\"DS_CNTN_RTNG\" type=\"STRING\" size=\"256\"/></ColumnInfo><Rows><Row><Col id=\"CD_CORP\"/></Row></Rows>");
            this.addChild(obj.name, obj);
            
            // UI Components Initialize
            obj = new Div("divSearch","0","0",null,"46.0","0",null,null,null,null,null,this);
            obj.set_taborder("1");
            obj.set_cssclass("div_SEARCH_Bg");
            obj.set_text("");
            this.addChild(obj.name, obj);

            obj = new Static("staCD_CORP","0","10.0","66","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("2");
            obj.set_text("법인");
            obj.set_cssclass("sta_WF_SchLabelE");
            this.divSearch.addChild(obj.name, obj);

            obj = new Div("ccfCD_CORP","staCD_CORP:0.0","10.0","250","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.getSetter("CDTextWidth").set("50");
            obj.set_taborder("3");
            obj.set_url("cmm::cmmCodeFind.xfdl");
            obj.set_text("");
            obj.getSetter("CodeFindName").set("DAX_CFCORP_CODEFIND");
            obj.set_enable("false");
            this.divSearch.addChild(obj.name, obj);

            obj = new Static("staID_RTNG","ccfCD_CORP:0.0","10.0","92","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("1");
            obj.set_text("평가회차");
            obj.set_rtl("false");
            obj.set_cssclass("sta_WF_SchLabelE");
            this.divSearch.addChild(obj.name, obj);

            obj = new Div("ccfID_RTNG","staID_RTNG:0.0","10.0","350","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.getSetter("CDTextWidth").set("100");
            obj.set_taborder("3");
            obj.set_url("cmm::cmmCodeFind.xfdl");
            obj.set_text("");
            obj.getSetter("CodeFindName").set("DAX_CFRTNG_STD");
            this.divSearch.addChild(obj.name, obj);

            obj = new Edit("edtCD_RTNG_ASBLNEXT","ccfID_RTNG:5","10.0","80","24",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("6");
            obj.set_readonly("false");
            obj.set_enable("false");
            this.divSearch.addChild(obj.name, obj);

            obj = new Static("staID_SABUN_APL","edtCD_RTNG_ASBLNEXT:0","10.0","79","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("2");
            obj.set_text("성명");
            obj.set_cssclass("sta_WF_SchLabel");
            this.divSearch.addChild(obj.name, obj);

            obj = new Div("ccfID_SABUN","staID_SABUN_APL:0.0","10.0","250","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.getSetter("CodeFindName").set("DAX_CFBASEINFO_ALL");
            obj.getSetter("CDTextWidth").set("90");
            obj.set_taborder("3");
            obj.set_url("cmm::cmmCodeFind.xfdl");
            obj.set_text("");
            obj.set_enable("false");
            this.divSearch.addChild(obj.name, obj);

            obj = new Div("divData","0","divSearch:10",null,null,"0","0",null,null,null,null,this);
            obj.set_taborder("0");
            obj.set_cssclass("div_DATA_Bg");
            this.addChild(obj.name, obj);

            obj = new Grid("objGrid","0","0",null,null,"0","0",null,null,null,null,this.divData.form);
            obj.set_taborder("0");
            obj.set_autofittype("col");
            obj._setContents("");
            this.divData.addChild(obj.name, obj);
            // Layout Functions
            //-- Default Layout : this
            obj = new Layout("default","",this._adjust_width,this._adjust_height,this,function(p){});
            this.addLayout(obj.name, obj);
            
            // BindItem Information
            obj = new BindItem("item0","divSearch.form.ccfCD_CORP.form.CDTextBox","value","dsSearch","CD_CORP");
            this.addChild(obj.name, obj);
            obj.bind();

            obj = new BindItem("item1","divSearch.form.ccfCD_CORP.form.DSTextBox","value","dsSearch","DS_CORP");
            this.addChild(obj.name, obj);
            obj.bind();

            obj = new BindItem("item2","divSearch.form.ccfID_RTNG.form.CDTextBox","value","dsSearch","ID_RTNG");
            this.addChild(obj.name, obj);
            obj.bind();

            obj = new BindItem("item3","divSearch.form.ccfID_RTNG.form.DSTextBox","value","dsSearch","DS_RTNG");
            this.addChild(obj.name, obj);
            obj.bind();

            obj = new BindItem("item4","divSearch.form.ccfID_SABUN.form.CDTextBox","value","dsSearch","ID_SABUN");
            this.addChild(obj.name, obj);
            obj.bind();

            obj = new BindItem("item5","divSearch.form.ccfID_SABUN.form.DSTextBox","value","dsSearch","DS_HNAME");
            this.addChild(obj.name, obj);
            obj.bind();
            
            // TriggerItem Information

        };
        
        this.loadPreloadList = function()
        {
            this._addPreloadList("fdl","cmm::cmmCodeFind.xfdl");
        };
        
        // User Script
        this.registerScript("DAJ_RTNG_PSNL_RTNG.xfdl", function() {
        this.objApp = this.gfnGetApplication();

        this.form_onload = function(obj,e) {
        	// -- 필수 -------------------//
        	this.gfnFormOnLoad(this);
        	this.gfnFormInfo(this);
        	// ---------------------------//

        	this.fnSetButton();
        	this.fnSetExtendButton();
        	this.fnSetVariable();
        	this.fnSetEvent();
        	this.fnSetParameter();
        	this.fnSetCombo();
        	this.fnInit();
        }

        /************************************************************************
         * 버튼 설정 : 화면(Tab) 전환시 마다 호출
         * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
         ************************************************************************/
        this.fnSetButton = function() {

        }

        /************************************************************************
         * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
         ************************************************************************/
        this.fnSetExtendButton = function() {
        	this.btnSave              = this.gfnFormButtonAdd("btnSave"             , "fnSave");				// 임시저장 버튼
        	this.btnComplate          = this.gfnFormButtonAdd("btnComplate"         , "fnComplate");			// 1차 평가완료 버튼
        	this.btnHistoryGoalEstt   = this.gfnFormButtonAdd("btnHistoryGoalEstt"  , "fnHistoryGoalEstt");		// 업무목표 수립 버튼
        	this.btnHistoryGoalCheck  = this.gfnFormButtonAdd("btnHistoryGoalCheck" , "fnHistoryGoalCheck");	// 업무목표 중간점검 버튼
        	this.btnHistoryGoalSelfDe = this.gfnFormButtonAdd("btnHistoryGoalSelfDe", "fnHistoryGoalSelfDe");	// 업무목표 자기기술 버튼
        }

        /************************************************************************
         * 변수 선언
         ************************************************************************/
        this.fnSetVariable = function() {
        	// 그리드영역
        	this.dxGrid = this.divData.form.objGrid;

        	// 검색영역
        	this.ccfCD_CORP  = this.divSearch.form.ccfCD_CORP;
        	this.ctclYR_RTNG = this.divSearch.form.ctclYR_RTNG;
        	this.ccfID_RTNG  = this.divSearch.form.ccfID_RTNG;
        	this.ccfID_SABUN = this.divSearch.form.ccfID_SABUN;
        };

        /************************************************************************
         * 이벤트 설정
         ************************************************************************/
        this.fnSetEvent = function() {
        	// 그리드 초기화
        	this.gfnGridInit(this.dxGrid, this.dsList, "DA", "DAJ_RTNG_PSNL");
        	this.dxGrid.BeforeUserDataSetParam = "fnGridBeforeUserDataSetParam";
        	this.dxGrid.AfterCDTextChanged     = "fnGridAfterCDTextChanged";

        	// 검색영역
        	this.ccfCD_CORP.BeforeUserDataSetParam  = "fnBeforeUserDataSetParam";	// 법인
        	this.ccfCD_CORP.AfterCDTextChanged      = "fnAfterCDTextChanged";
        	this.ccfID_RTNG.BeforeUserDataSetParam  = "fnBeforeUserDataSetParam";	// 평가기준
        	this.ccfID_RTNG.AfterCDTextChanged      = "fnAfterCDTextChanged";
        	this.ccfID_SABUN.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";	// 성명
        	this.ccfID_SABUN.AfterCDTextChanged     = "fnAfterCDTextChanged";
        }

        /************************************************************************
         * 파라미터 설정
         ************************************************************************/
        this.fnSetParameter = function() {
        	// 조회
        	this.dsSelect = new Dataset();
        	this.dsSelect.addColumn("CD_CORP", "string");
        	this.dsSelect.addColumn("ID_RTNG", "string");
        	this.dsSelect.addColumn("ID_ITVWPRSN", "string");

        	// 저장
        	this.dsSave = new Dataset();
        	this.dsSave.addColumn("CD_CORP", "string");
        	this.dsSave.addColumn("ID_RTNG", "string");
        	this.dsSave.addColumn("ID_CPNYDUTY", "string");
        	this.dsSave.addColumn("NO_RNK", "int");
        	this.dsSave.addColumn("DS_RTNG_BAS", "string");

        	// 1차 평가완료
        	this.dsComplate = new Dataset();
        	this.dsComplate.addColumn("CD_CORP", "string");
        	this.dsComplate.addColumn("ID_RTNG", "string");
        	this.dsComplate.addColumn("SEQ_BGVDPRSN", "int");
        	this.dsComplate.addColumn("ID_USER", "string");

        	// 업무목표 자기기술 히스토리 조회
        	this.dsSelectGoalHistory = new Dataset();
        	this.dsSelectGoalHistory.addColumn("CD_CORP", "string");
        	this.dsSelectGoalHistory.addColumn("ID_RTNG", "string");
        }

        /************************************************************************
         * 콤보 데이터 조회 및 설정
         ************************************************************************/
        this.fnSetCombo = function() {

        }

        /************************************************************************
         * 화면 및 검색영역 초기화
         ************************************************************************/
        this.fnInit = function() {
        	// 법인
        	this.dsSearch.setColumn(0, "CD_CORP",  this.AuthClient.CD_CORP);
        	this.dsSearch.setColumn(0, "DS_CORP",  this.AuthClient.DS_CORP);
        	// 성명
        	this.dsSearch.setColumn(0, "ID_SABUN", this.AuthClient.ID_SABUN);
        	this.dsSearch.setColumn(0, "DS_HNAME", this.AuthClient.DS_HNAME);
        }

        /************************************************************************
         * 버튼 이벤트
         ************************************************************************/
         /*
          *	조회 버튼
          */
        this.fnSelect = function() {
        	if (!this.gfnSearchValidate(this.divSearch, this.dsSearch)) return false;

        	this.gfnGridBeforeSelect(this.dxGrid);

        	this.dsSelect.clearData();
        	this.dsSelect.addRow();
        	this.dsSelect.setColumn(0, "CD_CORP"    , this.dsSearch.getColumn(0, "CD_CORP"));
        	this.dsSelect.setColumn(0, "ID_RTNG"    , this.dsSearch.getColumn(0, "ID_RTNG"));
        	this.dsSelect.setColumn(0, "ID_ITVWPRSN", this.AuthClient.ID_SABUN);

        	this.dsSelectGoalHistory.clearData();
        	this.dsSelectGoalHistory.addRow();
        	this.dsSelectGoalHistory.setColumn(0, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
        	this.dsSelectGoalHistory.setColumn(0, "ID_RTNG", this.dsSearch.getColumn(0, "ID_RTNG"));

        	var strSvcId    = "select";
        	var strSvcType  = "grid";
        	var inProc		= "_dsProc";
        	var inData      = "select=dsSelect select_goal_history=dsSelectGoalHistory";
        	var outData     = "dsList=select0 dsListGoalHistory=select_goal_history0";
        	var strArg      = "";
        	var callBackFnc = "fnCallback";

        	this.gfnTransaction(strSvcId,		// transaction을 구분하기 위한 svc id값
        						strSvcType, 	// transaction을 요청할 구분
        						inProc,			// Procedure 정보 Dataset 이름
        						inData, 		// 입력값으로 보낼 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        						outData, 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
        						callBackFnc);	// 통신방법 정의 [생략가능]
        }

        /*
         * 입력 버튼
         */
        this.fnAdd = function() {
        	var nrow = this.gfnGridAdd(this.dxGrid);
        }

        /*
         * 삭제 버튼
         */
        this.fnDel = function() {
        	this.gfnGridDel(this.dxGrid);
        }

        /*
         * 저장 버튼
         */
        this.fnSave = function() {
        	this.gfnConfirm("인사평가 데이터를 저장하시겠습니까?", function(strId, val) {
        		if (val == false) {
        			return;
        		}

        		// 그리드 필수항목 체크
        		if (!this.gfnGridValidate(this.dxGrid)) return;

        		this.dxGrid.updateToDataset();
        		this.dsSave.clearData();
        		for (var i = 0; i < this.dsList.rowcount; i++) {
        			var flag = this.gfnGetFlag(this.dsList, i);
        			switch(flag) {
        			case "I":
        			case "U":
        			case "D":
        				var nrow = this.dsSave.addRow();
        				this.dsSave.setColumn(nrow, "CD_CORP"    , this.dsSearch.getColumn(0, "CD_CORP"));
        				this.dsSave.setColumn(nrow, "ID_RTNG"    , this.dsSearch.getColumn(0, "ID_RTNG"));
        				this.dsSave.setColumn(nrow, "ID_CPNYDUTY", this.dsList.getColumn(i, "ID_CPNYDUTY"));
        				this.dsSave.setColumn(nrow, "NO_RNK"     , this.dsList.getColumn(i, "NO_RNK"));
        				this.dsSave.setColumn(nrow, "DS_RTNG_BAS", this.dsList.getColumn(i, "DS_RTNG_BAS"));
        				break;
        			}
        		}

        		if (this.dsSave.rowcount == 0) return;

        		var strSvcId    = "save";
        		var strSvcType  = "save";
        		var inProc		= "_dsProc";
        		var inData      = "save=dsSave";
        		var outData     = "";
        		var strArg      = "";
        		var callBackFnc = "fnCallback";

        		this.gfnTransaction(strSvcId,		// transaction을 구분하기 위한 svc id값
        							strSvcType, 	// transaction을 요청할 구분
        							inProc,			// Procedure 정보 Dataset 이름
        							inData, 		// 입력값으로 보낼 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        							outData, 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        							strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
        							callBackFnc);	// 통신방법 정의 [생략가능]
        	});
        }

        /*
         * 엑셀 버튼
         */
        this.fnExcel = function() {
        	this.gfnExcelExport(this.dxGrid);
        }

        /*
         * 출력 버튼
         */
        this.fnPrint = function() {

        }

        /************************************************************************
         * Validate
         ************************************************************************/
        this.fnSelectValidate = function() {
        	return true;
        }

        /************************************************************************
         * 확장버튼 이벤트
         ************************************************************************/

        /************************************************************************
         * 콜백 이벤트
         ************************************************************************/
        /*
         * 기본 콜백
         */
        this.fnCallback = function(svcID, errorCode, errorMsg, strArg) {
        	if (errorCode != 0) {
        		this.gfnAlert(errorMsg);
        		return;
        	}

        	if (svcID == "select") {
        		this.gfnGridAfterSelect(this.dxGrid);

        		this.btnComplate.set_enable(this.dsList.getColumn(0, "STAT_RTNG") != "CPLT");
        	}
        	else if (svcID == "save") {
        		this.FormBtns.Select.click();
        	}
        	// 업무목표 수립 데이터 복사
        // 	else if (svcID == "copy_goal_estt") {
        // 		this.FormBtns.Select.click();
        // 	}
        	// 업무목표 중간점검 데이터 복사
        // 	else if (svcID == "copy_goal_check") {
        // 		this.FormBtns.Select.click();
        // 	}
        }

        /************************************************************************
         * 코드파인드 이벤트
         ************************************************************************/
        this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
        	if (id == "ccfCD_CORP") {
        		dsUserParam.setColumn(nrow, "CD_CORP"  , this.AuthClient.CD_CORP);
        		dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
        		dsUserParam.setColumn(nrow, "ID_USER"  , this.AuthClient.ID_USER);
        	} else if (id == "ccfID_RTNG") {
        		dsUserParam.setColumn(nrow, "CD_CORP"     , this.dsSearch.getColumn(0, "CD_CORP"));
        		dsUserParam.setColumn(nrow, "YR_RTNG"     , "");
        		dsUserParam.setColumn(nrow, "ID_SABUN"    , this.dsSearch.getColumn(0, "ID_SABUN"));
        		dsUserParam.setColumn(nrow, "CD_RTNG_TYPE", "JA13");
        		dsUserParam.setColumn(nrow, "ID_SCREEN"   , "DAJ_RTNG_PSNL_RTNG");
        		dsUserParam.setColumn(nrow, "CD_ROLE"     , this.AuthClient.CD_ROLE);
        	}

        	return true;
        }

        this.fnAfterCDTextChanged = function(id, codeFindData) {
        	if (codeFindData[0] == undefined) {
        		return;
        	}

        	if (id == "ccfID_RTNG") {
        		var TY_PTCP = codeFindData[0]["TY_PTCP"];
        		this.dsSearch.setColumn(0, "TY_PTCP", codeFindData[0]["TY_PTCP"]);
        		this.dsSearch.setColumn(0, "CD_RTNG_ASBLNEXT", codeFindData[0]["CD_RTNG_ASBLNEXT"]);
        		this.dsSearch.setColumn(0, "DS_RTNG_ASBLNEXT", codeFindData[0]["DS_RTNG_ASBLNEXT"]);
        		this.dsSearch.setColumn(0, "ID_CNTN_RTNG", codeFindData[0]["ID_CNTN_RTNG"]);
        		this.dsSearch.setColumn(0, "DS_CNTN_RTNG", codeFindData[0]["DS_CNTN_RTNG"]);
        	}
        }

        /************************************************************************
         * 그리드 이벤트
         ************************************************************************/
        this.fnGridBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
        	return true;
        }

        this.fnGridAfterCDTextChanged = function(id, codeFindData) {

        }

        this.fnGridCellPosChanged = function(obj, e) {
        	this.fnUpdateStatusExtendButton();
        }

        this.fnUpdateStatusExtendButton = function() {
        	this.dxGrid.updateToDataset();
        	for (var i = 0; i < this.dsList.rowcount; i++) {
        		var flag = this.gfnGetFlag(this.dsList, i);
        		if (flag == undefined) {
        			this.btnSave.set_enable(false);
        			this.btnComplate.set_enable(true);
        		}

        		switch (flag) {
        		case "I":
        		case "U":
        		case "D":
        			this.btnSave.set_enable(true);
        			this.btnComplate.set_enable(false);
        			return;
        		}
        	}
        	this.btnSave.set_enable(false);
        	this.btnComplate.set_enable(true);

        	if (this.dsList.getColumn(0, "STAT_RTNG") == "CPLT") {
        		this.btnComplate.set_enable(false);
        		this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "NO_RNK"), "cssclass", "BACK_ReadOnly");
        		this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "NO_RNK"), "edittype", "none");
        		this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "DS_RTNG_BAS"), "cssclass", "BACK_ReadOnly");
        		this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "DS_RTNG_BAS"), "edittype", "none");
        	}

        }

        /************************************************************************
         * 기타 이벤트
         ************************************************************************/
        this.dsSearch_onvaluechanged = function(obj,e) {
        	if (e.oldvalue != e.newvalue) {
        		this.gfnSetFormStatus(this);	// 폼상태 초기화
        		this.gfnGridClear(this.dxGrid);
        	}
        }

        // 업무목표 중간점검 버튼
        this.fnComplate = function() {
        	this.gfnConfirm("인사평가 1차를 완료하시겠습니까?", function(strId, val) {
        		if (val == false) {
        			return;
        		}

        		this.fnComplate_callback();
        	})
        }

        this.fnComplate_callback = function() {
        	this.dxGrid.updateToDataset();
        	this.dsComplate.clearData();
        	var nrow = this.dsComplate.addRow();
        	this.dsComplate.setColumn(nrow, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
        	this.dsComplate.setColumn(nrow, "ID_RTNG", this.dsSearch.getColumn(0, "ID_RTNG"));
        	this.dsComplate.setColumn(nrow, "SEQ_BGVDPRSN", this.dsList.getColumn(0, "SEQ_BGVDPRSN"));
        	this.dsComplate.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);

        	if (this.dsComplate.rowcount == 0) return;

        	var strSvcId    = "complete";
        	var strSvcType  = "save";
        	var inProc		= "_dsProc";
        	var inData      = "complete=dsComplate";
        	var outData     = "";
        	var strArg      = "";
        	var callBackFnc = "fnCallback";

        	this.gfnTransaction(strSvcId,		// transaction을 구분하기 위한 svc id값
        						strSvcType, 	// transaction을 요청할 구분
        						inProc,			// Procedure 정보 Dataset 이름
        						inData, 		// 입력값으로 보낼 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        						outData, 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
        						callBackFnc);	// 통신방법 정의 [생략가능]
        }

        this.fnHistoryGoalEstt = function() {
        	var param = {};
        	param.READ_ONLY = true;
        	param.CD_CORP = this.dsSearch.getColumn(0, "CD_CORP");
        	param.DS_CORP = this.dsSearch.getColumn(0, "DS_CORP");
        	this.dsListGoalHistory.filter("CD_RTNG_TYPE == 'JA10'");
        	param.ID_RTNG = this.dsListGoalHistory.getColumn(0, "ID_RTNG");
        	param.DS_RTNG = this.dsListGoalHistory.getColumn(0, "DS_RTNG");
        	this.dsListGoalHistory.filter("");
        	param.TY_PTCP = 'B';
        	param.ID_SABUN = this.dsList.getColumn(this.dsList.rowposition, "ID_SABUN");
        	param.DS_HNAME = this.dsList.getColumn(this.dsList.rowposition, "DS_HNAME");

        	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DAJ_RTNG_GOAL_ESTT", "", param);
        }

        this.fnHistoryGoalCheck = function() {
        	var param = {};
        	param.READ_ONLY = true;
        	param.CD_CORP = this.dsSearch.getColumn(0, "CD_CORP");
        	param.DS_CORP = this.dsSearch.getColumn(0, "DS_CORP");
        	this.dsListGoalHistory.filter("CD_RTNG_TYPE == 'JA11'");
        	param.ID_RTNG = this.dsListGoalHistory.getColumn(0, "ID_RTNG");
        	param.DS_RTNG = this.dsListGoalHistory.getColumn(0, "DS_RTNG");
        	this.dsListGoalHistory.filter("");
        	param.TY_PTCP = 'B';
        	param.ID_SABUN = this.dsList.getColumn(this.dsList.rowposition, "ID_SABUN");
        	param.DS_HNAME = this.dsList.getColumn(this.dsList.rowposition, "DS_HNAME");

        	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DAJ_RTNG_GOAL_CHCK", "", param);
        }

        this.fnHistoryGoalSelfDe = function() {
        	var param = {};
        	param.READ_ONLY = true;
        	param.CD_CORP = this.dsSearch.getColumn(0, "CD_CORP");
        	param.DS_CORP = this.dsSearch.getColumn(0, "DS_CORP");
        	this.dsListGoalHistory.filter("CD_RTNG_TYPE == 'JA12'");
        	param.ID_RTNG = this.dsListGoalHistory.getColumn(0, "ID_RTNG");
        	param.DS_RTNG = this.dsListGoalHistory.getColumn(0, "DS_RTNG");
        	this.dsListGoalHistory.filter("");
        	param.TY_PTCP = 'B';
        	param.ID_SABUN = this.dsList.getColumn(this.dsList.rowposition, "ID_SABUN");
        	param.DS_HNAME = this.dsList.getColumn(this.dsList.rowposition, "DS_HNAME");

        	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DAJ_RTNG_GOAL_SELF_DESC", "", param);
        }

        });
        
        // Regist UI Components Event
        this.on_initEvent = function()
        {
            this.addEventHandler("onload",this.form_onload,this);
            this.divData.addEventHandler("ondragmove",this.divData_ondragmove,this);
            this.divData.form.objGrid.addEventHandler("oncellposchanged",this.fnGridCellPosChanged,this);
            this.dsList.addEventHandler("onvaluechanged",this.dsList_onvaluechanged,this);
            this.dsSearch.addEventHandler("onvaluechanged",this.dsSearch_onvaluechanged,this);
        };
        this.loadIncludeScript("DAJ_RTNG_PSNL_RTNG.xfdl");
        this.loadPreloadList();
        
        // Remove Reference
        obj = null;
    };
}
)();
