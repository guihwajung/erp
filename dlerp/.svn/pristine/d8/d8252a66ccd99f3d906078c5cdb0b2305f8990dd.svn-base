<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="form" width="1280" height="720" titletext="마감화면" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0" top="0" height="46.0" right="0" cssclass="div_SEARCH_Bg">
          <Layouts>
            <Layout>
              <Static id="staYM_WORK" taborder="0" text="작업년월" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Div id="ctclYM_WORK" taborder="1" left="staYM_WORK:0.0" top="10.0" width="80" height="24.0" url="cmm::cmmCalMM.xfdl" text=""/>
              <Static id="staCD_CORP" taborder="2" text="법인코드" left="ctclYM_WORK:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfCD_CORP" CDTextWidth="50" taborder="3" left="staCD_CORP:0.0" top="10.0" width="200" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DAUPR_CLOSED_SELECT</Col>
          </Row>
          <Row>
            <Col id="SP">DAUPR_CLOSED_UPDATE</Col>
            <Col id="TARGET">update</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="YM_WORK" type="STRING" size="256"/>
          <Column id="CD_CORP" type="STRING" size="256"/>
          <Column id="DS_CORP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="YM_WORK"/>
          </Row>
        </Rows>
      </Dataset>
    </Objects>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();

	// 타화면에서 오픈시 넘어오는 파라미터 처리
	var frame = this.getOwnerFrame();
	if(!this.gfnIsNull(frame.CD_CORP) && !this.gfnIsNull(frame.DS_CORP)) {
		this.ctclYM_WORK.form.TextBox.set_value(frame.YM_SALARY);
	    this.ccfCD_CORP.form.CDTextBox.set_value(frame.CD_CORP);				
 		this.ccfCD_CORP.form.DSTextBox.set_value(frame.DS_CORP);
		this.FormBtns.Select.click();
	}else{
		var today = this.gfnGetDate().substring(0,6);
		this.divSearch.form.ctclYM_WORK.form.TextBox.set_value(today);
		this.divSearch.form.ccfCD_CORP.form.CDTextBox.set_value(this.AuthClient.CD_CORP);
		this.divSearch.form.ccfCD_CORP.form.DSTextBox.set_value(this.AuthClient.DS_CORP);
	}	
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
	// Select, Add, Del, Save, Excel, Print
	// SubSelect, SubAdd, SubDel, SuubSave, SubExcel
// 	this.FormBtns.Add.set_enable(false);
// 	this.FormBtns.Del.set_enable(false);
	this.FormBtns.Reset.set_enable(true);
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btnCloseExecute = this.gfnFormButtonAdd("CloseExecute", "fnCloseExecute");
	this.btnCloseCancle = this.gfnFormButtonAdd("CloseCancle", "fnCloseCancel");
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.tyGubun = 0;
	this.ccfCD_CORP = this.divSearch.form.ccfCD_CORP;
	this.ctclYM_WORK = this.divSearch.form.ctclYM_WORK;
	
	this.dxGrid = this.divData.form.objGrid;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	this.ccfCD_CORP.CodeFindName = "DAX_CFCORP";
	this.ccfCD_CORP.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.ccfCD_CORP.AfterCDTextChanged = "ccfCD_CORP_AfterCDTextChanged";	
	
	this.gfnGridInit(this.dxGrid, this.dsList, "DA", "DAU_CLOSED");
	
	this.dxGrid.set_selecttype("cell");	
	this.dxGrid.addEventHandler("onselectchanged", this.fnGrid_RowCellChanged, this);
}

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("YM_SALARY", "string");
	this.dsSelect.addColumn("CD_CORP", "string");
	
	this.dsUpdate = new Dataset();
	this.dsUpdate.addColumn("TY_GUBUN", "string");
	this.dsUpdate.addColumn("CD_CORP", "string");
	this.dsUpdate.addColumn("YM_SALARY", "string");
	this.dsUpdate.addColumn("TY_SALARY", "string");
	this.dsUpdate.addColumn("SN_SALARY", "int");
	this.dsUpdate.addColumn("DT_SALARY", "string");
	this.dsUpdate.addColumn("ID_UPDATE", "string");
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if(!this.fnValidate()) return;

	this.dsSelect.clearData();
	this.dsSelect.addRow();
	this.dsSelect.setColumn(0, "YM_SALARY", this.ctclYM_WORK.form.TextBox.value);
	this.dsSelect.setColumn(0, "CD_CORP", this.ccfCD_CORP.form.CDTextBox.value);
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// trabsaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	저장 버튼
 */
this.fnSave = function() {
// 그리드 필수항목 체크
	if (!this.gfnGridValidate(this.dxGrid)) return;	  

	this.dxGrid.updateToDataset();
	
	//this.dsInsert.clearData();
	this.dsUpdate.clearData();
	//this.dsDelete.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "I":
				//var nrow = this.dsInsert.addRow();
				
				//break;
	
			case "U":
				var nrow = this.dsUpdate.addRow();

				this.dsUpdate.setColumn(nrow, "TY_GUBUN", 0);
				this.dsUpdate.setColumn(nrow, "CD_CORP", this.dsList.getColumn(i, "CD_CORP"));
				this.dsUpdate.setColumn(nrow, "YM_SALARY", this.dsList.getColumn(i, "YM_SALARY").replace(/-/g, ''));
				this.dsUpdate.setColumn(nrow, "TY_SALARY", this.dsList.getColumn(i, "TY_SALARY"));
				this.dsUpdate.setColumn(nrow, "SN_SALARY", this.dsList.getColumn(i, "SN_SALARY"));
				this.dsUpdate.setColumn(nrow, "DT_SALARY", this.dsList.getColumn(i, "DT_SALARY"));
				this.dsUpdate.setColumn(nrow, "ID_UPDATE", this.dsList.getColumn(i, "ID_UPDATE"));
								
				break;
				
			case "D":
				//var nrow = this.dsDelete.addRow();
				//this.dsDelete.setColumn(nrow, "YM_WORK", this.dsList.getColumn(i, "YM_WORK").replace(/-/g, ''));
				
				//break;
		}
	}
	
	if (this.dsUpdate.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "update=dsUpdate";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/*
 *	초기화 버튼
 */
this.fnReset  = function() {
	this.dsSearch.clearData();
	this.dsSearch.addRow();

	// 타화면에서 오픈시 넘어오는 파라미터 처리
	var frame = this.getOwnerFrame();
	if(!this.gfnIsNull(frame.CD_CORP) && !this.gfnIsNull(frame.DS_CORP)) {
		this.ctclYM_WORK.form.TextBox.set_value(frame.YM_SALARY);
	    this.ccfCD_CORP.form.CDTextBox.set_value(frame.CD_CORP);				
 		this.ccfCD_CORP.form.DSTextBox.set_value(frame.DS_CORP);
		this.FormBtns.Select.click();
	}else{
		var today = this.gfnGetDate().substring(0,6);
		this.divSearch.form.ctclYM_WORK.form.TextBox.set_value(today);
		this.divSearch.form.ccfCD_CORP.form.CDTextBox.set_value(this.AuthClient.CD_CORP);
		this.divSearch.form.ccfCD_CORP.form.DSTextBox.set_value(this.AuthClient.DS_CORP);
	}	
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnValidate = function() {
	if (this.gfnIsNull(this.ccfCD_CORP.form.CDTextBox.value)) {
		this.fnVaidateCallback = function() {
			this.ccfCD_CORP.form.CDTextBox.setFocus();
		}
		
		this.gfnAlert("소속법인을 입력하세요");
		return false;
	}
	
	return true;
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);	
	}
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.gfnAlert("작업이 완료되었습니다.");
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	this.fnSetButton();
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.ccfCD_CORP_AfterCDTextChanged = function(id) {
	if(!this.gfnIsNull(this.ccfCD_CORP.form.CDTextBox.value)) {
		this.objApp.DW_SPACE01 = this.ccfCD_CORP.form.CDTextBox.value;
		this.objApp.DW_SPACE02 = this.ccfCD_CORP.form.DSTextBox.value;
	}
	this.fnSearchInit();
}

this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	if (id == "ccfCD_CORP") {
	//	dsUserParam.setColumn(nrow, "VALUE", this.ccfCD_CORP.form.CDTextBox.value);

	}
	return true;
}

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
  this.fnGrid_RowCellChanged = function(obj:nexacro.Grid,e:nexacro.GridSelectEventInfo)
 {
	var ynClose = this.gfnAllTrim(this.dsList.getColumn(e.row, "YN_CLOSE"));
	if(this.gfnIsNull(ynClose)) ynClose = "N";
	
	if (ynClose == "Y") {
		this.btnCloseExecute.set_enable(false);
		this.btnCloseCancle.set_enable(true);

	} else {
		this.btnCloseExecute.set_enable(true);
		this.btnCloseCancle.set_enable(false);

	}	
};

/************************************************************************
 * 기타 이벤트
 ************************************************************************/
/*
 *	조회 조건 변경시 초기화
 */
this.fnSearchInit = function(obj,e) {
	if(e == null || (e.pretext != e.posttext)) {
		// 폼상태 초기화
		this.gfnSetFormStatus(this);	
		this.gfnGridClear(this.dxGrid);
		this.FormBtns.Select.click();
	}
};

this.fnCloseExecute = function () {
	this.fnClosedUpdate(1);
}

this.fnCloseCancel = function () {
	this.fnClosedUpdate(2);
}

this.fnClosedUpdate = function (tyGubun) {
	// 그리드 필수항목 체크
	if (!this.gfnGridValidate(this.dxGrid)) return;	

	this.dxGrid.updateToDataset();
	
	this.dsUpdate.clearData();
	
	var nrow = this.dsUpdate.addRow();

	var rowIdx = this.dxGrid.getSelectedRows();

	this.dsUpdate.setColumn(nrow, "TY_GUBUN", tyGubun);
	this.dsUpdate.setColumn(nrow, "CD_CORP", this.dsList.getColumn(rowIdx, "CD_CORP"));
	this.dsUpdate.setColumn(nrow, "YM_SALARY", this.dsList.getColumn(rowIdx, "YM_SALARY").replace(/-/g, ''));
	this.dsUpdate.setColumn(nrow, "TY_SALARY", this.dsList.getColumn(rowIdx, "TY_SALARY"));
	this.dsUpdate.setColumn(nrow, "SN_SALARY", this.dsList.getColumn(rowIdx, "SN_SALARY"));
	this.dsUpdate.setColumn(nrow, "DT_SALARY", this.dsList.getColumn(rowIdx, "DT_SALARY"));
	this.dsUpdate.setColumn(nrow, "ID_UPDATE", this.dsList.getColumn(rowIdx, "ID_UPDATE"));
	
	if (this.dsUpdate.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "update=dsUpdate";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);
		this.fnSetButton();
	}
};
]]></Script>
    <Bind>
      <BindItem id="item1" compid="divSearch.form.ctclYM_WORK.form.TextBox" propid="value" datasetid="dsSearch" columnid="YM_WORK"/>
      <BindItem id="item0" compid="divSearch.form.ccfCD_CORP.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_CORP"/>
      <BindItem id="item2" compid="divSearch.form.ccfCD_CORP.form.DSTextBox" propid="value" datasetid="dsSearch" columnid="DS_CORP"/>
    </Bind>
  </Form>
</FDL>
