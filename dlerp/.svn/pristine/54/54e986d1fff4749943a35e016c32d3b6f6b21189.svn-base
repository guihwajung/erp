<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="금회보험료 조회 및 발행" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg" formscrolltype="none">
          <Layouts>
            <Layout>
              <Static id="sta00" taborder="0" text="마감일자" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Calendar id="ctclDT_MAGAM" taborder="1" left="sta00:0.0" top="10.0" width="105" height="24.0" dateformat="yyyy-MM-dd" editformat="yyyyMMdd" autoselect="true"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0"/>
            </Layout>
          </Layouts>
        </Div>
        <Static id="staTY_GUBUN" taborder="2" text="구분" right="710" top="58" width="34" height="25" textDecoration="none" cssclass="zIndex"/>
        <Radio id="crdoTY_GUBUN" taborder="3" top="60" height="20" innerdataset="dsTY_GUBUN" direction="vertical" fittocontents="width" width="164" codecolumn="CD_CODE" datacolumn="DS_CODE" text="산재" index="0" cssclass="zIndex" onitemchanged="crdoTY_GUBUN_onitemchanged" left="staTY_GUBUN:7"/>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	this.dsSearch.setColumn(0, "DT_MAGAM",  this.gfnGetDate());
	this.dxGrid.setFocus(); // 마감일자에 Focus가 되어있기때문에 마감일자에서 Focus out 시킴
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
	// Select, Add, Del, Save, Excel, Print
	// SubSelect, SubAdd, SubDel, SuubSave, SubExcel
	this.FormBtns.Add.set_enable(false);
	this.FormBtns.Del.set_enable(false);
	this.FormBtns.Save.set_enable(false);
	//this.FormBtns.Save.set_enable(false);
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
	
    this.btn1 = this.gfnFormButtonAdd("BTN_MAGAM", "fnMagamYnCheck"); //마감
	this.btn2 = this.gfnFormButtonAdd("BTN_MAGAM_CANCEL", "fnMagamCancelYnCheck"); //마감취소
	this.btn3 = this.gfnFormButtonAdd("BTN_SLIP", "fnSlipYnCheck"); //전표발행
	this.btn4 = this.gfnFormButtonAdd("BTN_SLIP_CANCEL", "fnSlipCancelYnCheck"); //전표발행취소
	this.btn5 = this.gfnFormButtonAdd("BTN_SLIP_SHOW", "fnSlipShow"); //전표조회
	this.btnSapslip= this.gfnFormButtonAdd("btnSapslip", "fnSapslip"); //전표발행(SAP)
	this.btnSapslipCncl= this.gfnFormButtonAdd("btnSapslipCncl", "fnSapslipCncl"); //전표취소(SAP)
	
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.ctclDT_MAGAM = this.divSearch.form.ctclDT_MAGAM;	
	this.staTY_GUBUN = this.staTY_GUBUN;
	this.dxGrid = this.divData.form.objGrid;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {	
	// 그리드 초기화
	this.gfnGridInit(this.dxGrid, this.dsList, "DS", "DSH_INSU_LIST");
	
	// 그리드 코드파인드 설정
	//this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforeUserDataSetParam";
	
	// 그리드 onkeyup 이벤트
	//this.dxGrid.addEventHandler("onkeyup", this.fnGrid_OnKeyUp, this);
};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("DT_MAGAM", "string");
	
	this.dsExec = new Dataset();
	this.dsExec.addColumn("DT_MAGAM", "string");
	this.dsExec.addColumn("CD_SITE", "string");
	this.dsExec.addColumn("DS_SITE", "string");
	this.dsExec.addColumn("AM_JIKWON", "bigdecimal");
	this.dsExec.addColumn("AM_HYENCHE", "bigdecimal");
	this.dsExec.addColumn("AM_ILYONG", "bigdecimal");
	this.dsExec.addColumn("AM_WEIJU", "bigdecimal");
	this.dsExec.addColumn("AM_SANJE_NOIM", "bigdecimal");
	this.dsExec.addColumn("RT_SANJE", "bigdecimal");
	this.dsExec.addColumn("AM_SANJE", "bigdecimal");
	this.dsExec.addColumn("TY_SANJE", "string");
	this.dsExec.addColumn("AM_GOYONG_NOIM", "bigdecimal");
	this.dsExec.addColumn("RT_GOYONG", "bigdecimal");
	this.dsExec.addColumn("AM_GOYONG", "bigdecimal");
	this.dsExec.addColumn("AM_SABAECHK_NOIM", "bigdecimal");
	this.dsExec.addColumn("RT_SABAECHK", "bigdecimal");
	this.dsExec.addColumn("AM_SABAECHK", "bigdecimal");
	this.dsExec.addColumn("TY_GUBUN", "string");
   
	this.dsExec1 = new Dataset();
	this.dsExec1.addColumn("DT_MAGAM", "string");
	this.dsExec1.addColumn("TY_GUBUN", "string");
	
	this.dsExec2 = new Dataset();
	this.dsExec2.addColumn("CD_CORP", "string");
	this.dsExec2.addColumn("YM_WORK", "string");
	this.dsExec2.addColumn("CD_DEPT_BH", "string");
	this.dsExec2.addColumn("DT_ACCOUNT", "string");
	this.dsExec2.addColumn("DT_REQUEST", "string");
	this.dsExec2.addColumn("NO_ERPKEY", "string");
	this.dsExec2.addColumn("ID_USER", "string");
	this.dsExec2.addColumn("TY_GUBUN", "string");
	
	this.dsExec3 = new Dataset();
	this.dsExec3.addColumn("DT_MAGAM", "string");	
	this.dsExec3.addColumn("TY_GUBUN", "string");
		
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;

	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();

	this.dsSelect.setColumn(0, "DT_MAGAM", this.dsSearch.getColumn(0, "DT_MAGAM"));
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	//var nrow = this.gfnGridAdd(this.dxGrid); // top (default), bottom, current
}

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	//this.gfnGridDel(this.dxGrid);
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {	
	var validate = true;
	
	if (this.gfnIsNull(this.dsSearch.getColumn(0,"DT_MAGAM"))) {
		validate = false;
		// Alert후 실행할 처리
		this.fnVaidateCallback = function() {
			this.ctclDT_MAGAM.setFocus();
		}
		this.gfnAlert("마감일자는 반드시 입력 하셔야 합니다.", "fnVaidateCallback");
	}
	
	return validate;
	
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *   콜백 처리
 */

this.fnCallback = function(svcID, errorCode, errorMsg) {
    if (errorCode != 0) {
        this.gfnAlert(errorMsg);
        return;
    }

    if (svcID == "select") {
        this.gfnGridAfterSelect(this.dxGrid);
        this.setBtnUsable();

    } else if (svcID == "exec") { //마감 
	    this.setBtnUsable();
        this.FormBtns.Select.click();

    } else if (svcID == "exec1") { //마감 취소
        this.setBtnUsable();
        this.FormBtns.Select.click();

    } 
		else if (svcID == "exec2") { //전표발행
        this.setBtnUsable();
        this.FormBtns.Select.click();
	}
		else if (svcID == "exec3") { //전표발행 취소
        this.setBtnUsable();
        this.FormBtns.Select.click();
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/

/************************************************************************
 * 기타 이벤트
 ************************************************************************/
//마감 진행여부 확인      
this.fnMagamYnCheck = function(obj: nexacro.Button, e: nexacro.ClickEventInfo) {
    this.gfnConfirm("마감 작업을 수행하시겠습니까?", "fnMagam");
}

//마감
this.fnMagam = function(strId, val){
	if(val == false){
		return false;
	}
        this.dsExec.clearData();

		for(var i=0;i < this.dsList.rowcount;i++){
		
				var nrow = this.dsExec.addRow();
				this.dsExec.setColumn(nrow, "DT_MAGAM", this.dsSearch.getColumn(0, "DT_MAGAM"));
				this.dsExec.setColumn(nrow, "CD_SITE", this.dsList.getColumn(i, "CD_SITE"));
				this.dsExec.setColumn(nrow, "DS_SITE", this.dsList.getColumn(i, "DS_SITE"));
				this.dsExec.setColumn(nrow, "AM_JIKWON", this.dsList.getColumn(i, "AM_JIKWON"));
				this.dsExec.setColumn(nrow, "AM_HYENCHE", this.dsList.getColumn(i, "AM_HYENCHE"));
				this.dsExec.setColumn(nrow, "AM_ILYONG", this.dsList.getColumn(i, "AM_ILYONG"));
				this.dsExec.setColumn(nrow, "AM_WEIJU", this.dsList.getColumn(i, "AM_WEIJU"));
				this.dsExec.setColumn(nrow, "AM_SANJE_NOIM", this.dsList.getColumn(i, "AM_SANJE_NOIM"));
				this.dsExec.setColumn(nrow, "RT_SANJE", this.dsList.getColumn(i, "RT_SANJE"));
				this.dsExec.setColumn(nrow, "AM_SANJE", this.dsList.getColumn(i, "AM_SANJE"));
				this.dsExec.setColumn(nrow, "TY_SANJE", this.dsList.getColumn(i, "TY_SANJE"));
				this.dsExec.setColumn(nrow, "AM_GOYONG_NOIM", this.dsList.getColumn(i, "AM_GOYONG_NOIM"));
				this.dsExec.setColumn(nrow, "RT_GOYONG", this.dsList.getColumn(i, "RT_GOYONG"));
				this.dsExec.setColumn(nrow, "AM_GOYONG", this.dsList.getColumn(i, "AM_GOYONG"));
				this.dsExec.setColumn(nrow, "AM_SABAECHK_NOIM", this.dsList.getColumn(i, "AM_SABAECHK_NOIM"));
				this.dsExec.setColumn(nrow, "RT_SABAECHK", this.dsList.getColumn(i, "RT_SABAECHK"));
				this.dsExec.setColumn(nrow, "AM_SABAECHK", this.dsList.getColumn(i, "AM_SABAECHK"));
				this.dsExec.setColumn(nrow, "TY_GUBUN", this.dsSearch.getColumn(0, "TY_GUBUN"));
	}

		if (this.dsExec.rowcount == 0) return;
	
		var strSvcId    = "exec";
		var strSvcType  = "save";
		var inProc		= "_dsProc";
		var inData      = "exec=dsExec";
		var outData     = "";
		var strArg      = "";
		var callBackFnc = "fnCallback";
		
		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
							strSvcType , 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
							callBackFnc); // 통신방법 정의 [생략가능]
};


				
//마감취소 진행여부 확인      
this.fnMagamCancelYnCheck = function(obj: nexacro.Button, e: nexacro.ClickEventInfo) {
    this.gfnConfirm("마감취소 작업을 수행하시겠습니까?", "fnMagamCancel");
}

//마감취소
this.fnMagamCancel = function(strId, val) {
	  
		this.dsExec1.clearData();
		this.dsExec1.addRow();

		this.dsExec1.setColumn(0, "DT_MAGAM", this.dsSearch.getColumn(0, "DT_MAGAM"));
		this.dsExec1.setColumn(0, "TY_GUBUN", this.dsSearch.getColumn(0, "TY_GUBUN"));

		if (this.dsExec1.rowcount == 0) return;

		var strSvcId = "exec1";
		var strSvcType = "save";
		var inProc = "_dsProc";
		var inData = "exec1=dsExec1";
		var outData = "";
		var strArg = "";
		var callBackFnc = "fnCallback";

		this.gfnTransaction(strSvcId, // transaction을 구분하기 위한 svc id값
			strSvcType, // transaction을 요청할 구분
			inProc, // Procedure 정보 Dataset 이름
			inData, // 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
			outData, // 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
			strArg, // 입력갑스로 보낼 arguments, strFormData="20120607"
			callBackFnc); // 통신방법 정의 [생략가능]
}

//전표발행 진행여부 확인      
this.fnSlipYnCheck = function(obj: nexacro.Button, e: nexacro.ClickEventInfo) {
    this.gfnConfirm("전표발행 작업을 수행하시겠습니까?", "fnSlip");
}

//전표발행
this.fnSlip = function(strId, val) {
	if(val == false){
			return false;
	}  
		this.dsExec2.clearData();
		var nrow = this.dsExec2.addRow();

		this.dsExec2.setColumn(0, "CD_CORP", "01");
		this.dsExec2.setColumn(0, "YM_WORK", this.dsSearch.getColumn(0, "DT_MAGAM")); //작업연월일
		this.dsExec2.setColumn(0, "CD_DEPT_BH", this.AuthClient.CD_DEPT);
		this.dsExec2.setColumn(0, "DT_ACCOUNT", this.divSearch.form.ctclDT_MAGAM.value); //회계일자
		this.dsExec2.setColumn(0, "DT_REQUEST", "");
		//this.dsExec2.setColumn(0, "NO_ERPKEY", this.dsList.getColumn(0, "NO_ERPKEY"));
		this.dsExec2.setColumn(0, "ID_USER", this.AuthClient.ID_USER);
		this.dsExec2.setColumn(0, "TY_GUBUN", this.dsSearch.getColumn(0, "TY_GUBUN"));
		
		if(this.dsSearch.getColumn(0, "TY_GUBUN") == "1") {	 
				 this.dsExec2.setColumn(0, "NO_ERPKEY", this.dsList.getColumn(0, "NO_ERPKEY_SANJE"));		
		  }else if(this.dsSearch.getColumn(0, "TY_GUBUN") == "2"){
				 this.dsExec2.setColumn(0, "NO_ERPKEY", this.dsList.getColumn(0, "NO_ERPKEY_GOYONG"));
		  }else if(this.dsSearch.getColumn(0, "TY_GUBUN") == "3"){
				 this.dsExec2.setColumn(0, "NO_ERPKEY", this.dsList.getColumn(0, "NO_ERPKEY_SABAECHK"));
		 } 

		if (this.dsExec2.rowcount == 0) return;
		trace(this.dsExec2.saveXML());
		var strSvcId = "exec2";
		var strSvcType = "save";
		var inProc = "_dsProc";
		var inData = "exec2=dsExec2";
		var outData = "";
		var strArg = "";
		var callBackFnc = "fnCallback";

		this.gfnTransaction(strSvcId, // transaction을 구분하기 위한 svc id값
			strSvcType, // transaction을 요청할 구분
			inProc, // Procedure 정보 Dataset 이름
			inData, // 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
			outData, // 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
			strArg, // 입력갑스로 보낼 arguments, strFormData="20120607"
			callBackFnc); // 통신방법 정의 [생략가능]
}

//전표취소 진행여부 확인      
this.fnSlipCancelYnCheck = function(obj: nexacro.Button, e: nexacro.ClickEventInfo) {
    this.gfnConfirm("전표발행 취소작업을 수행하시겠습니까?", "fnSlipCancel");
}

//전표취소
this.fnSlipCancel = function(strId, val) {
	  
		this.dsExec3.clearData();
		this.dsExec3.addRow();

		this.dsExec3.setColumn(0, "DT_MAGAM", this.dsSearch.getColumn(0, "DT_MAGAM"));
		this.dsExec3.setColumn(0, "TY_GUBUN", this.dsSearch.getColumn(0, "TY_GUBUN"));

		if (this.dsExec3.rowcount == 0) return;

		var strSvcId = "exec3";
		var strSvcType = "save";
		var inProc = "_dsProc";
		var inData = "exec3=dsExec3";
		var outData = "";
		var strArg = "";
		var callBackFnc = "fnCallback";

		this.gfnTransaction(strSvcId, // transaction을 구분하기 위한 svc id값
			strSvcType, // transaction을 요청할 구분
			inProc, // Procedure 정보 Dataset 이름
			inData, // 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
			outData, // 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
			strArg, // 입력갑스로 보낼 arguments, strFormData="20120607"
			callBackFnc); // 통신방법 정의 [생략가능]
}

this.fnSapslip = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	this.gfnConfirm("전표발행(SAP) 작업을 수행하시겠습니까?", "fnSapslip_callback");
}

this.fnSapslip_callback = function(strID, val)
{
	if(val == true)
	{
		if(this.dsSearch.getColumn(0, "TY_GUBUN") == "1"){
			var no_erpkey = this.dsList.getColumn(0, "NO_ERPKEY_SANJE");
			var cd_trade = this.dsList.getColumn(0, "NO_SLIP_SANJE");			
		}else if(this.dsSearch.getColumn(0, "TY_GUBUN") == "2"){
			var no_erpkey = this.dsList.getColumn(0, "NO_ERPKEY_GOYONG");
			var cd_trade = this.dsList.getColumn(0, "NO_SLIP_GOYONG");			
		}else if(this.dsSearch.getColumn(0, "TY_GUBUN") == "3"){
			var no_erpkey = this.dsList.getColumn(0, "NO_ERPKEY_SABAECHK");
			var cd_trade = this.dsList.getColumn(0, "NO_SLIP_SABAECHK");			
		}
		
		var id_user = this.AuthClient.ID_USER;
		this.gfnSlipIssue(no_erpkey, cd_trade, id_user, "fnSapslipOk_callback");
	}	
}

// gfnSlipIssue 전표발행 성공시 실행할 callback
this.fnSapslipOk_callback = function() {
	this.FormBtns.Select.click();
}


this.fnSapslipCncl = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {

	this.gfnConfirm("전표발행취소(SAP) 작업을 수행하시겠습니까?", "fnSapslipCncl_callback");
}

this.fnSapslipCncl_callback = function(strID, val)
{
	if(val == true)
	{
		if(this.dsSearch.getColumn(0, "TY_GUBUN") == "1"){
			var no_erpkey = this.dsList.getColumn(0, "NO_ERPKEY_SANJE");
			var cd_trade = this.dsList.getColumn(0, "NO_SLIP_SANJE");
			var sap_slip = this.dsList.getColumn(0, "BELNR_SANJE");		// SAP 전표번호
			var sap_slip_year = this.dsList.getColumn(0, "GJAHR_SANJE");	// SAP 전표의 회계연도
		}else if(this.dsSearch.getColumn(0, "TY_GUBUN") == "2"){
			var no_erpkey = this.dsList.getColumn(0, "NO_ERPKEY_GOYONG");
			var cd_trade = this.dsList.getColumn(0, "NO_SLIP_GOYONG");
			var sap_slip = this.dsList.getColumn(0, "BELNR_GOYONG");		// SAP 전표번호
			var sap_slip_year = this.dsList.getColumn(0, "GJAHR_GOYONG");	// SAP 전표의 회계연도
		}else if(this.dsSearch.getColumn(0, "TY_GUBUN") == "3"){
			var no_erpkey = this.dsList.getColumn(0, "NO_ERPKEY_SABAECHK");
			var cd_trade = this.dsList.getColumn(0, "NO_SLIP_SABAECHK");
			var sap_slip = this.dsList.getColumn(0, "BELNR_SABAECHK");			// SAP 전표번호
			var sap_slip_year = this.dsList.getColumn(0, "GJAHR_SABAECHK");	// SAP 전표의 회계연도
		}

		var id_user = this.AuthClient.ID_USER;		
		var sap_comp = "HD00";
		this.gfnSlipCancel(no_erpkey, cd_trade, id_user, sap_comp, sap_slip, sap_slip_year, "fnSlipCancelOk_callback");
	}
	
}


// gfnSlipCancel 전표취소 성공시 실행할 callback
this.fnSlipCancelOk_callback = function() {
	this.FormBtns.Select.click();
}


// 전표조회 버튼 클릭
this.fnSlipShow = function(obj: nexacro.Button, e: nexacro.ClickEventInfo) {

    if (this.dsList.rowcount > 0) {
        if (this.gfnIsNull(this.dsList.getColumn(this.dsList.rowposition, "NO_SLIP_SANJE")) && this.gfnIsNull(this.dsList.getColumn(this.dsList.rowposition, "NO_SLIP_GOYONG")) && this.gfnIsNull(this.dsList.getColumn(this.dsList.rowposition, "NO_SLIP_SABAECHK")  )) {

            this.gfnAlert("발행된 전표가 없습니다.");
        } else {

            this.gfnConfirm("전표를 조회하시겠습니까?", "fnSlipSearch_callback");
        }
    }
}

//전표조회 콜백
this.fnSlipSearch_callback = function(strId, val) {
 if (val == true) {
        var param = {};
        // 
        //param.CD_TRADE = this.dsList.getColumn(0, "NO_SLIP");
		if(this.dsSearch.getColumn(0, "TY_GUBUN") == "1") {
				 param.CD_TRADE = this.dsList.getColumn(this.dsList.rowposition, "NO_SLIP_SANJE");
		  }else if(this.dsSearch.getColumn(0, "TY_GUBUN") == "2"){
				 param.CD_TRADE = this.dsList.getColumn(this.dsList.rowposition, "NO_SLIP_GOYONG");
		  }else if(this.dsSearch.getColumn(0, "TY_GUBUN") == "3"){
				 param.CD_TRADE = this.dsList.getColumn(this.dsList.rowposition, "NO_SLIP_SABAECHK");
		  }
		  
        //전표조회시 팝업창 띄움
        this.gfnFormOpen("DHA", "DHA_ISSUESLIP", "fnDialogCallback", param);	
    }
};



this.setBtnUsable = function() {

    this.btn1.set_enable(false); //마감
    this.btn2.set_enable(false); //마감 취소
    this.btn3.set_enable(false); //전표발행
    this.btn4.set_enable(false); //전표발행 취소
	this.btn5.set_enable(false); // 전표조회
	this.btnSapslip.set_enable(false); // 전표발행(SAP)
	this.btnSapslipCncl.set_enable(false); //전표취소(SAP)

	 var tyGubun = "";
	 
   if(this.dsSearch.getColumn(0, "TY_GUBUN") == "1") {
      tyGubun = this.dsList.getColumn(this.dsList.rowposition, "TY_GUBUN_SANJE");   	  
   }
   else if(this.dsSearch.getColumn(0, "TY_GUBUN") == "2") {
      tyGubun = this.dsList.getColumn(this.dsList.rowposition, "TY_GUBUN_GOYONG"); 
   }
   else if(this.dsSearch.getColumn(0, "TY_GUBUN") == "3") {
      tyGubun = this.dsList.getColumn(this.dsList.rowposition, "TY_GUBUN_SABAECHK"); 
   }

    if (tyGubun == '0') {
        this.btn1.set_enable(true); 
        this.btn2.set_enable(false);
        this.btn3.set_enable(false);
	    this.btn4.set_enable(false);	
	}else if (tyGubun == '1') {
		this.btn1.set_enable(false); 
		this.btn2.set_enable(true); 
		this.btn3.set_enable(true);
		this.btn4.set_enable(false); 
	}else if (tyGubun == '2') {
		this.btn1.set_enable(false); 
		this.btn2.set_enable(false); 
		this.btn3.set_enable(false);
		this.btn4.set_enable(true); 
	}
	
	
	var no_SLIP = "";
	var no_BELNR = "";
	if(this.dsSearch.getColumn(0, "TY_GUBUN") == "1"){
		var no_BELNR = this.dsList.getColumn(0, "BELNR_SANJE");
		var no_SLIP = this.dsList.getColumn(0, "NO_SLIP_SANJE");			
	}else if(this.dsSearch.getColumn(0, "TY_GUBUN") == "2"){
		var no_BELNR = this.dsList.getColumn(0, "BELNR_GOYONG");
		var no_SLIP = this.dsList.getColumn(0, "NO_SLIP_GOYONG");			
	}else if(this.dsSearch.getColumn(0, "TY_GUBUN") == "3"){
		var no_BELNR = this.dsList.getColumn(0, "BELNR_SABAECHK");
		var no_SLIP = this.dsList.getColumn(0, "NO_SLIP_SABAECHK");			
	}
	
	// 전표에 값이 있으면서 SAP전표번호에 값이 없으면 전표발행(SAP) 활성화
	if(!this.gfnIsNull(no_SLIP)){		
		if (this.gfnIsNull(no_BELNR)) {
			this.btnSapslip.set_enable(true);
		}
		this.btn4.set_enable(true);
		this.btn5.set_enable(true);
	}else{
		this.btn4.set_enable(false);
	}
	
	// SAP전표번호에 값이 있을경우 전표취소(SAP) 활성화
	if (!this.gfnIsNull(no_BELNR)) {
	    this.btnSapslipCncl.set_enable(true);
		this.btn4.set_enable(false);
	}
}

/*
this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
	}
};
*/

this.crdoTY_GUBUN_onitemchanged = function(obj:nexacro.Radio,e:nexacro.ItemChangeEventInfo)
{
	   this.setBtnUsable();
	   //this.FormBtns.Select.click();
};
]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DSHPR_INSU_LIST_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">exec</Col>
            <Col id="SP">DSHPR_INSU_LIST_SAVE</Col>
          </Row>
          <Row>
            <Col id="TARGET">exec1</Col>
            <Col id="SP">DSHPR_INSU_LIST_CENCEL</Col>
          </Row>
          <Row>
            <Col id="TARGET">exec2</Col>
            <Col id="SP">DSHPR_INSU_SLIP</Col>
          </Row>
          <Row>
            <Col id="TARGET">exec3</Col>
            <Col id="SP">DSHPR_INSU_SLIP_CANCEL</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="DT_MAGAM" type="STRING" size="256"/>
          <Column id="TY_GUBUN" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="DT_MAGAM"/>
            <Col id="TY_GUBUN">1</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsTY_GUBUN">
        <ColumnInfo>
          <Column id="CD_CODE" type="STRING" size="256"/>
          <Column id="DS_CODE" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="DS_CODE">산재</Col>
            <Col id="CD_CODE">1</Col>
          </Row>
          <Row>
            <Col id="CD_CODE">2</Col>
            <Col id="DS_CODE">고용</Col>
          </Row>
          <Row>
            <Col id="CD_CODE">3</Col>
            <Col id="DS_CODE">사배책</Col>
          </Row>
        </Rows>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ctclDT_MAGAM" propid="value" datasetid="dsSearch" columnid="DT_MAGAM"/>
      <BindItem id="item1" compid="crdoTY_GUBUN" propid="value" datasetid="dsSearch" columnid="TY_GUBUN"/>
    </Bind>
  </Form>
</FDL>
