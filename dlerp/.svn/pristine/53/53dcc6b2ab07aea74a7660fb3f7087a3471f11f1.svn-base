<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="New Form" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg">
          <Layouts>
            <Layout>
              <Static id="sta00" taborder="2" text="거래처" left="0.0" top="10.0" width="79.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Radio id="rdoTYPE_SELECT" taborder="1" left="sta00:0.0" top="10.0" height="24.0" innerdataset="dsTYPE_SELECT" datacolumn="VALUE" codecolumn="CODE" direction="vertical" fittocontents="width" width="90" index="0" text="코드" value="C"/>
              <Edit id="edtCD_VENDOR" taborder="0" left="rdoTYPE_SELECT:0.0" top="10.0" width="140" height="24.0" onchanged="fnSearchInit"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg" ondragmove="divData_ondragmove">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" right="0" bottom="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	this.divSearch.form.rdoTYPE_SELECT.set_index(0);
	//this.FormBtns.Select.click();
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 ************************************************************************/
this.fnSetButton = function() {
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btn1 = this.gfnFormButtonAdd("btnCREATE", "fnCREATE");
	this.btn2 = this.gfnFormButtonAdd("btnCheck", "fnCheck");
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.dxGrid = this.divData.form.objGrid;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {	
	this.gfnGridInit(this.dxGrid, this.dsList, "DQ", "DQD_VENDOR_SAP");
		
}

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("TY_SELECT", "string");
	this.dsSelect.addColumn("DS_SEARCH", "string");
	
	this.dsInsert = new Dataset();
	this.dsInsert.addColumn("IN_STCD2", "string");
	this.dsInsert.addColumn("IN_KTOKK", "string");
	this.dsInsert.addColumn("IN_NAME1", "string");
	this.dsInsert.addColumn("IN_SORTL", "string");
	this.dsInsert.addColumn("IN_ORT01", "string");
	this.dsInsert.addColumn("IN_STRAS", "string");
	this.dsInsert.addColumn("IN_PSTLZ", "string");
	this.dsInsert.addColumn("IN_REGIO", "string");
	this.dsInsert.addColumn("IN_TELF1", "string");
	this.dsInsert.addColumn("IN_TELF2", "string");
	this.dsInsert.addColumn("IN_LFURL", "string");
	this.dsInsert.addColumn("IN_J_1KFREPRE", "string");
	this.dsInsert.addColumn("IN_STCD1", "string");
	this.dsInsert.addColumn("IN_J_1KFTBUS", "string");
	this.dsInsert.addColumn("IN_J_1KFTIND", "string");
	this.dsInsert.addColumn("IN_INTAD", "string");
	this.dsInsert.addColumn("IN_TLFNS", "string");
	this.dsInsert.addColumn("IN_TLFXS", "string");
	this.dsInsert.addColumn("IN_EKGRP", "string");
	this.dsInsert.addColumn("IN_FITYP", "string");
	this.dsInsert.addColumn("IN_AKONT", "string");
	this.dsInsert.addColumn("IN_FDGRV", "string");
	this.dsInsert.addColumn("IN_ZTERM", "string");
	this.dsInsert.addColumn("IN_CJKTW", "string");
	this.dsInsert.addColumn("RTNCD", "string");
	this.dsInsert.addColumn("RTNMSG", "string");
	this.dsInsert.addColumn("RTNCD1", "string");

	this.dsUpdate = new Dataset();
	this.dsUpdate.addColumn("SN_ID", "string");
	this.dsUpdate.addColumn("IN_STCD2", "string");
	this.dsUpdate.addColumn("IN_KTOKK", "string");
	this.dsUpdate.addColumn("IN_NAME1", "string");
	this.dsUpdate.addColumn("IN_SORTL", "string");
	this.dsUpdate.addColumn("IN_ORT01", "string");
	this.dsUpdate.addColumn("IN_STRAS", "string");
	this.dsUpdate.addColumn("IN_PSTLZ", "string");
	this.dsUpdate.addColumn("IN_REGIO", "string");
	this.dsUpdate.addColumn("IN_TELF1", "string");
	this.dsUpdate.addColumn("IN_TELF2", "string");
	this.dsUpdate.addColumn("IN_LFURL", "string");
	this.dsUpdate.addColumn("IN_J_1KFREPRE", "string");
	this.dsUpdate.addColumn("IN_STCD1", "string");
	this.dsUpdate.addColumn("IN_J_1KFTBUS", "string");
	this.dsUpdate.addColumn("IN_J_1KFTIND", "string");
	this.dsUpdate.addColumn("IN_INTAD", "string");
	this.dsUpdate.addColumn("IN_TLFNS", "string");
	this.dsUpdate.addColumn("IN_TLFXS", "string");
	this.dsUpdate.addColumn("IN_EKGRP", "string");
	this.dsUpdate.addColumn("IN_FITYP", "string");
	this.dsUpdate.addColumn("IN_AKONT", "string");
	this.dsUpdate.addColumn("IN_FDGRV", "string");
	this.dsUpdate.addColumn("IN_ZTERM", "string");
	this.dsUpdate.addColumn("IN_CJKTW", "string");
	this.dsUpdate.addColumn("RTNCD", "string");
	this.dsUpdate.addColumn("RTNMSG", "string");
	this.dsUpdate.addColumn("RTNCD1", "string");

	this.dsDelete = new Dataset();
	this.dsDelete.addColumn("SN_ID", "string");
	
	/*
	this.dsExec = new Dataset();
	this.dsExec.addColumn("SN_ID", "string");
	this.dsExec.addColumn("RTNCD", "string");
	this.dsExec.addColumn("RTNMSG", "string");
	this.dsExec.addColumn("RTNCD1", "string");
	*/
	
	this.dsUpdateAp = new Dataset();
	this.dsUpdateAp.addColumn("LIFNR", "string");
	this.dsUpdateAp.addColumn("MANDT", "string");
	this.dsUpdateAp.addColumn("LAND1", "string");
	this.dsUpdateAp.addColumn("NAME1", "string");
	this.dsUpdateAp.addColumn("NAME2", "string");
	this.dsUpdateAp.addColumn("NAME3", "string");
	this.dsUpdateAp.addColumn("NAME4", "string");
	this.dsUpdateAp.addColumn("ORT01", "string");
	this.dsUpdateAp.addColumn("ORT02", "string");
	this.dsUpdateAp.addColumn("PFACH", "string");
	this.dsUpdateAp.addColumn("PSTL2", "string");
	this.dsUpdateAp.addColumn("PSTLZ", "string");
	this.dsUpdateAp.addColumn("REGIO", "string");
	this.dsUpdateAp.addColumn("SORTL", "string");
	this.dsUpdateAp.addColumn("STRAS", "string");
	this.dsUpdateAp.addColumn("ADRNR", "string");
	this.dsUpdateAp.addColumn("MCOD1", "string");
	this.dsUpdateAp.addColumn("MCOD2", "string");
	this.dsUpdateAp.addColumn("MCOD3", "string");
	this.dsUpdateAp.addColumn("ANRED", "string");
	this.dsUpdateAp.addColumn("BAHNS", "string");
	this.dsUpdateAp.addColumn("BBBNR", "string");
	this.dsUpdateAp.addColumn("BBSNR", "string");
	this.dsUpdateAp.addColumn("BEGRU", "string");
	this.dsUpdateAp.addColumn("BRSCH", "string");
	this.dsUpdateAp.addColumn("BUBKZ", "string");
	this.dsUpdateAp.addColumn("DATLT", "string");
	this.dsUpdateAp.addColumn("DTAMS", "string");
	this.dsUpdateAp.addColumn("DTAWS", "string");
	this.dsUpdateAp.addColumn("ERDAT", "string");
	this.dsUpdateAp.addColumn("ERNAM", "string");
	this.dsUpdateAp.addColumn("ESRNR", "string");
	this.dsUpdateAp.addColumn("KONZS", "string");
	this.dsUpdateAp.addColumn("KTOKK", "string");
	this.dsUpdateAp.addColumn("KUNNR", "string");
	this.dsUpdateAp.addColumn("LNRZA", "string");
	this.dsUpdateAp.addColumn("LOEVM", "string");
	this.dsUpdateAp.addColumn("SPERR", "string");
	this.dsUpdateAp.addColumn("SPERM", "string");
	this.dsUpdateAp.addColumn("SPRAS", "string");
	this.dsUpdateAp.addColumn("STCD1", "string");
	this.dsUpdateAp.addColumn("STCD2", "string");
	this.dsUpdateAp.addColumn("STKZA", "string");
	this.dsUpdateAp.addColumn("STKZU", "string");
	this.dsUpdateAp.addColumn("TELBX", "string");
	this.dsUpdateAp.addColumn("TELF1", "string");
	this.dsUpdateAp.addColumn("TELF2", "string");
	this.dsUpdateAp.addColumn("TELFX", "string");
	this.dsUpdateAp.addColumn("TELTX", "string");
	this.dsUpdateAp.addColumn("TELX1", "string");
	this.dsUpdateAp.addColumn("XCPDK", "string");
	this.dsUpdateAp.addColumn("XZEMP", "string");
	this.dsUpdateAp.addColumn("VBUND", "string");
	this.dsUpdateAp.addColumn("FISKN", "string");
	this.dsUpdateAp.addColumn("STCEG", "string");
	this.dsUpdateAp.addColumn("STKZN", "string");
	this.dsUpdateAp.addColumn("SPERQ", "string");
	this.dsUpdateAp.addColumn("GBORT", "string");
	this.dsUpdateAp.addColumn("GBDAT", "string");
	this.dsUpdateAp.addColumn("SEXKZ", "string");
	this.dsUpdateAp.addColumn("KRAUS", "string");
	this.dsUpdateAp.addColumn("REVDB", "string");
	this.dsUpdateAp.addColumn("QSSYS", "string");
	this.dsUpdateAp.addColumn("KTOCK", "string");
	this.dsUpdateAp.addColumn("PFORT", "string");
	this.dsUpdateAp.addColumn("WERKS", "string");
	this.dsUpdateAp.addColumn("LTSNA", "string");
	this.dsUpdateAp.addColumn("WERKR", "string");
	this.dsUpdateAp.addColumn("PLKAL", "string");
	this.dsUpdateAp.addColumn("DUEFL", "string");
	this.dsUpdateAp.addColumn("TXJCD", "string");
	this.dsUpdateAp.addColumn("SPERZ", "string");
	this.dsUpdateAp.addColumn("SCACD", "string");
	this.dsUpdateAp.addColumn("SFRGR", "string");
	this.dsUpdateAp.addColumn("LZONE", "string");
	this.dsUpdateAp.addColumn("XLFZA", "string");
	this.dsUpdateAp.addColumn("DLGRP", "string");
	this.dsUpdateAp.addColumn("FITYP", "string");
	this.dsUpdateAp.addColumn("STCDT", "string");
	this.dsUpdateAp.addColumn("REGSS", "string");
	this.dsUpdateAp.addColumn("ACTSS", "string");
	this.dsUpdateAp.addColumn("STCD3", "string");
	this.dsUpdateAp.addColumn("STCD4", "string");
	this.dsUpdateAp.addColumn("IPISP", "string");
	this.dsUpdateAp.addColumn("TAXBS", "string");
	this.dsUpdateAp.addColumn("PROFS", "string");
	this.dsUpdateAp.addColumn("STGDL", "string");
	this.dsUpdateAp.addColumn("EMNFR", "string");
	this.dsUpdateAp.addColumn("LFURL", "string");
	this.dsUpdateAp.addColumn("J_1KFREPRE", "string");
	this.dsUpdateAp.addColumn("J_1KFTBUS", "string");
	this.dsUpdateAp.addColumn("J_1KFTIND", "string");
	this.dsUpdateAp.addColumn("CONFS", "string");
	this.dsUpdateAp.addColumn("UPDAT", "string");
	this.dsUpdateAp.addColumn("UPTIM", "string");
	this.dsUpdateAp.addColumn("NODEL", "string");
	this.dsUpdateAp.addColumn("QSSYSDAT", "string");
	this.dsUpdateAp.addColumn("PODKZB", "string");
	this.dsUpdateAp.addColumn("FISKU", "string");
	this.dsUpdateAp.addColumn("STENR", "string");
	this.dsUpdateAp.addColumn("CARRIER_CONF", "string");
	this.dsUpdateAp.addColumn("J_SC_CAPITAL", "string");
	this.dsUpdateAp.addColumn("J_SC_CURRENCY", "string");
	this.dsUpdateAp.addColumn("ALC", "string");
	this.dsUpdateAp.addColumn("PMT_OFFICE", "string");
	this.dsUpdateAp.addColumn("PSOFG", "string");
	this.dsUpdateAp.addColumn("PSOIS", "string");
	this.dsUpdateAp.addColumn("PSON1", "string");
	this.dsUpdateAp.addColumn("PSON2", "string");
	this.dsUpdateAp.addColumn("PSON3", "string");
	this.dsUpdateAp.addColumn("PSOVN", "string");
	this.dsUpdateAp.addColumn("PSOTL", "string");
	this.dsUpdateAp.addColumn("PSOHS", "string");
	this.dsUpdateAp.addColumn("PSOST", "string");
	this.dsUpdateAp.addColumn("TRANSPORT_CHAIN", "string");
	this.dsUpdateAp.addColumn("STAGING_TIME", "string");
	this.dsUpdateAp.addColumn("SCHEDULING_TYPE", "string");
	this.dsUpdateAp.addColumn("SUBMI_RELEVANT", "string");
	this.dsUpdateAp.addColumn("ID_USER", "string");
}

/************************************************************************
 * 버튼 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	
	this.dsSelect.setColumn(0, "CD_VENDOR", this.dsSearch.getColumn(0, "CD_VENDOR"));
	this.dsSelect.setColumn(0, "TYPE_SELECT", this.dsSearch.getColumn(0, "TYPE_SELECT"));

	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	this.gfnGridAdd(this.dxGrid);
}

/*
 *	삭제 버튼
 */ 
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}

/*
 *	저장 버튼
 */ 
this.fnSave = function() {


	if (!this.gfnGridValidate(this.dxGrid)) return;

	this.dxGrid.updateToDataset();
	
	this.dsInsert.clearData();
	this.dsUpdate.clearData();
	this.dsDelete.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "I":
				var nrow = this.dsInsert.addRow();			
				this.dsInsert.setColumn(nrow, "IN_STCD2", this.dsList.getColumn(i, "IN_STCD2"));
				this.dsInsert.setColumn(nrow, "IN_KTOKK", this.dsList.getColumn(i, "IN_KTOKK"));
				this.dsInsert.setColumn(nrow, "IN_NAME1", this.dsList.getColumn(i, "IN_NAME1"));
				this.dsInsert.setColumn(nrow, "IN_SORTL", this.dsList.getColumn(i, "IN_SORTL"));
				this.dsInsert.setColumn(nrow, "IN_ORT01", this.dsList.getColumn(i, "IN_ORT01"));
				this.dsInsert.setColumn(nrow, "IN_STRAS", this.dsList.getColumn(i, "IN_STRAS"));
				this.dsInsert.setColumn(nrow, "IN_PSTLZ", this.dsList.getColumn(i, "IN_PSTLZ"));
				this.dsInsert.setColumn(nrow, "IN_REGIO", this.dsList.getColumn(i, "IN_REGIO"));
				this.dsInsert.setColumn(nrow, "IN_TELF1", this.dsList.getColumn(i, "IN_TELF1"));
				this.dsInsert.setColumn(nrow, "IN_TELF2", this.dsList.getColumn(i, "IN_TELF2"));
				this.dsInsert.setColumn(nrow, "IN_LFURL", this.dsList.getColumn(i, "IN_LFURL"));
				this.dsInsert.setColumn(nrow, "IN_J_1KFREPRE", this.dsList.getColumn(i, "IN_J_1KFREPRE"));
				this.dsInsert.setColumn(nrow, "IN_STCD1", this.dsList.getColumn(i, "IN_STCD1"));
				this.dsInsert.setColumn(nrow, "IN_J_1KFTBUS", this.dsList.getColumn(i, "IN_J_1KFTBUS"));
				this.dsInsert.setColumn(nrow, "IN_J_1KFTIND", this.dsList.getColumn(i, "IN_J_1KFTIND"));
				this.dsInsert.setColumn(nrow, "IN_INTAD", this.dsList.getColumn(i, "IN_INTAD"));
				this.dsInsert.setColumn(nrow, "IN_TLFNS", this.dsList.getColumn(i, "IN_TLFNS"));
				this.dsInsert.setColumn(nrow, "IN_TLFXS", this.dsList.getColumn(i, "IN_TLFXS"));
				this.dsInsert.setColumn(nrow, "IN_EKGRP", this.dsList.getColumn(i, "IN_EKGRP"));
				this.dsInsert.setColumn(nrow, "IN_FITYP", this.dsList.getColumn(i, "IN_FITYP"));
				this.dsInsert.setColumn(nrow, "IN_AKONT", this.dsList.getColumn(i, "IN_AKONT"));
				this.dsInsert.setColumn(nrow, "IN_FDGRV", this.dsList.getColumn(i, "IN_FDGRV"));
				this.dsInsert.setColumn(nrow, "IN_ZTERM", this.dsList.getColumn(i, "IN_ZTERM"));
				this.dsInsert.setColumn(nrow, "IN_CJKTW", this.dsList.getColumn(i, "IN_CJKTW"));
				this.dsInsert.setColumn(nrow, "RTNCD", this.dsList.getColumn(i, "RTNCD"));
				this.dsInsert.setColumn(nrow, "RTNMSG", this.dsList.getColumn(i, "RTNMSG"));
				this.dsInsert.setColumn(nrow, "RTNCD1", this.dsList.getColumn(i, "RTNCD1"));
				break;
				
			case "U":
				var nrow = this.dsUpdate.addRow();
				this.dsUpdate.setColumn(nrow, "SN_ID", this.dsList.getColumn(i, "SN_ID"));
				this.dsUpdate.setColumn(nrow, "IN_STCD2", this.dsList.getColumn(i, "IN_STCD2"));
				this.dsUpdate.setColumn(nrow, "IN_KTOKK", this.dsList.getColumn(i, "IN_KTOKK"));
				this.dsUpdate.setColumn(nrow, "IN_NAME1", this.dsList.getColumn(i, "IN_NAME1"));
				this.dsUpdate.setColumn(nrow, "IN_SORTL", this.dsList.getColumn(i, "IN_SORTL"));
				this.dsUpdate.setColumn(nrow, "IN_ORT01", this.dsList.getColumn(i, "IN_ORT01"));
				this.dsUpdate.setColumn(nrow, "IN_STRAS", this.dsList.getColumn(i, "IN_STRAS"));
				this.dsUpdate.setColumn(nrow, "IN_PSTLZ", this.dsList.getColumn(i, "IN_PSTLZ"));
				this.dsUpdate.setColumn(nrow, "IN_REGIO", this.dsList.getColumn(i, "IN_REGIO"));
				this.dsUpdate.setColumn(nrow, "IN_TELF1", this.dsList.getColumn(i, "IN_TELF1"));
				this.dsUpdate.setColumn(nrow, "IN_TELF2", this.dsList.getColumn(i, "IN_TELF2"));
				this.dsUpdate.setColumn(nrow, "IN_LFURL", this.dsList.getColumn(i, "IN_LFURL"));
				this.dsUpdate.setColumn(nrow, "IN_J_1KFREPRE", this.dsList.getColumn(i, "IN_J_1KFREPRE"));
				this.dsUpdate.setColumn(nrow, "IN_STCD1", this.dsList.getColumn(i, "IN_STCD1"));
				this.dsUpdate.setColumn(nrow, "IN_J_1KFTBUS", this.dsList.getColumn(i, "IN_J_1KFTBUS"));
				this.dsUpdate.setColumn(nrow, "IN_J_1KFTIND", this.dsList.getColumn(i, "IN_J_1KFTIND"));
				this.dsUpdate.setColumn(nrow, "IN_INTAD", this.dsList.getColumn(i, "IN_INTAD"));
				this.dsUpdate.setColumn(nrow, "IN_TLFNS", this.dsList.getColumn(i, "IN_TLFNS"));
				this.dsUpdate.setColumn(nrow, "IN_TLFXS", this.dsList.getColumn(i, "IN_TLFXS"));
				this.dsUpdate.setColumn(nrow, "IN_EKGRP", this.dsList.getColumn(i, "IN_EKGRP"));
				this.dsUpdate.setColumn(nrow, "IN_FITYP", this.dsList.getColumn(i, "IN_FITYP"));
				this.dsUpdate.setColumn(nrow, "IN_AKONT", this.dsList.getColumn(i, "IN_AKONT"));
				this.dsUpdate.setColumn(nrow, "IN_FDGRV", this.dsList.getColumn(i, "IN_FDGRV"));
				this.dsUpdate.setColumn(nrow, "IN_ZTERM", this.dsList.getColumn(i, "IN_ZTERM"));
				this.dsUpdate.setColumn(nrow, "IN_CJKTW", this.dsList.getColumn(i, "IN_CJKTW"));
				this.dsUpdate.setColumn(nrow, "RTNCD", this.dsList.getColumn(i, "RTNCD"));
				this.dsUpdate.setColumn(nrow, "RTNMSG", this.dsList.getColumn(i, "RTNMSG"));
				this.dsUpdate.setColumn(nrow, "RTNCD1", this.dsList.getColumn(i, "RTNCD1"));
				break;
				
			case "D":
				var nrow = this.dsDelete.addRow();
				this.dsDelete.setColumn(nrow, "SN_ID", this.dsList.getColumn(i, "SN_ID"));
				break;
		}
	}
	
	if (this.dsInsert.rowcount == 0 && this.dsUpdate.rowcount == 0 && this.dsDelete.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "insert=dsInsert update=dsUpdate delete=dsDelete";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
 	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
 						strSvcType , 	// transaction을 요청할 구분
 						inProc,			// Procedure 정보 Dataset 이름
 						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
 						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
 						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */ 
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}
 
/************************************************************************
 * 서브 버튼 이벤트
 ************************************************************************/


/************************************************************************
 * Validate
 ************************************************************************/

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);	
	}
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	/*
	else if (svcID == "sap") {
		if(this.dsExport.rowcount > 0) {
			this.fnExec();
		}
	}*/
	else if (svcID == "sap1") {
		if(this.dsExport.rowcount > 0) {
			//메세지
			var rtn = this.dsExport.getColumn(0, "RETURN");
			if(!this.gfnIsNull(rtn)) {
				var msg = rtn.substring(1);
				if(rtn.substr(0, 1) == "T") {
					
// 					var msg1 = "회사명 : " + this.dsWALFA1.getColumn(0, "NAME1") +
// 								"\n사업자번호 : " + this.dsWALFA1.getColumn(0, "ADRNR")+
// 								"\n"+msg;
// 								this.gfnAlert(msg1);
					this.fnUpdateAp();
				}
				else if(rtn.substr(0, 1) == "F") {
					this.gfnAlert("업체정보가 없습니다.");
				}
			}
		}
	}
	else if(svcID == "update_ap") {
		if (errorCode == 0) {
			this.gfnAlert("완료");
			//this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
/*	else if (svcID == "exec") {
		this.FormBtns.Select.click();
	}*/
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/


/************************************************************************
 * 기타 이벤트
 ************************************************************************/
 /*
this.fnSap = function() {

	this._dsProcSap.clearData();
	var nrow = this._dsProcSap.addRow();
	this._dsProcSap.setColumn(nrow, "TARGET", "select");
	this._dsProcSap.setColumn(nrow, "SP", "ZVENDOR02_0012");
	
	nrow = this.dsSelectSap.addRow();
	
	// IN 파라미터 셋팅
	this.dsSelectSap.setColumn(nrow, "IN_AKONT", this.dsList.getColumn(this.dsList.rowposition, "IN_AKONT"));
	this.dsSelectSap.setColumn(nrow, "IN_CJKTW", this.dsList.getColumn(this.dsList.rowposition, "IN_CJKTW"));
	this.dsSelectSap.setColumn(nrow, "IN_EKGRP", this.dsList.getColumn(this.dsList.rowposition, "IN_EKGRP"));
	this.dsSelectSap.setColumn(nrow, "IN_FDGRV", this.dsList.getColumn(this.dsList.rowposition, "IN_FDGRV"));
	this.dsSelectSap.setColumn(nrow, "IN_FITYP", this.dsList.getColumn(this.dsList.rowposition, "IN_FITYP"));
	this.dsSelectSap.setColumn(nrow, "IN_INTAD", this.dsList.getColumn(this.dsList.rowposition, "IN_INTAD"));
	this.dsSelectSap.setColumn(nrow, "IN_J_1KFREPRE", this.dsList.getColumn(this.dsList.rowposition, "IN_J_1KFREPRE"));
	this.dsSelectSap.setColumn(nrow, "IN_J_1KFTBUS", this.dsList.getColumn(this.dsList.rowposition, "IN_J_1KFTBUS"));
	this.dsSelectSap.setColumn(nrow, "IN_J_1KFTIND", this.dsList.getColumn(this.dsList.rowposition, "IN_J_1KFTIND"));
	this.dsSelectSap.setColumn(nrow, "IN_KTOKK", this.dsList.getColumn(this.dsList.rowposition, "IN_KTOKK"));
	this.dsSelectSap.setColumn(nrow, "IN_LFURL", this.dsList.getColumn(this.dsList.rowposition, "IN_LFURL"));
	this.dsSelectSap.setColumn(nrow, "IN_NAME1", this.dsList.getColumn(this.dsList.rowposition, "IN_NAME1"));
	this.dsSelectSap.setColumn(nrow, "IN_ORT01", this.dsList.getColumn(this.dsList.rowposition, "IN_ORT01"));
	this.dsSelectSap.setColumn(nrow, "IN_PSTLZ", this.dsList.getColumn(this.dsList.rowposition, "IN_PSTLZ"));
	this.dsSelectSap.setColumn(nrow, "IN_REGIO", this.dsList.getColumn(this.dsList.rowposition, "IN_REGIO"));
	this.dsSelectSap.setColumn(nrow, "IN_SORTL", this.dsList.getColumn(this.dsList.rowposition, "IN_SORTL"));
	this.dsSelectSap.setColumn(nrow, "IN_STCD1", this.dsList.getColumn(this.dsList.rowposition, "IN_STCD1"));
	this.dsSelectSap.setColumn(nrow, "IN_STCD2", this.dsList.getColumn(this.dsList.rowposition, "IN_STCD2"));
	this.dsSelectSap.setColumn(nrow, "IN_STRAS", this.dsList.getColumn(this.dsList.rowposition, "IN_STRAS"));
	this.dsSelectSap.setColumn(nrow, "IN_TELF1", this.dsList.getColumn(this.dsList.rowposition, "IN_TELF1"));
	this.dsSelectSap.setColumn(nrow, "IN_TELF2", this.dsList.getColumn(this.dsList.rowposition, "IN_TELF2"));
	this.dsSelectSap.setColumn(nrow, "IN_TLFNS", this.dsList.getColumn(this.dsList.rowposition, "IN_TLFNS"));
	this.dsSelectSap.setColumn(nrow, "IN_TLFXS", this.dsList.getColumn(this.dsList.rowposition, "IN_TLFXS"));
	this.dsSelectSap.setColumn(nrow, "IN_ZTERM", this.dsList.getColumn(this.dsList.rowposition, "IN_ZTERM"));

	// SAP 호출
	var strSvcId    = "sap";
	var strSvcType  = "sap";
	var inProc		= "_dsProcSap";
	var inData      = "select=dsSelectSap";
	var outData     = "dsExport=export";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

this.fnExec = function() {

	this.dsExec.clearData();
	this.dsExec.addRow();
	
	this.dsExec.setColumn(0, "SN_ID", this.dsList.getColumn(this.dsList.rowposition, "SN_ID"));
	this.dsExec.setColumn(0, "RTNCD", this.dsExport.getColumn(0, "RTNCD"));
	this.dsExec.setColumn(0, "RTNMSG", this.dsExport.getColumn(0, "RTNMSG"));
	this.dsExec.setColumn(0, "RTNCD1", this.dsExport.getColumn(0, "RTNCD1"));
	
	if (this.dsExec.rowcount == 0) return;
	
	var strSvcId    = "exec";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "exec=dsExec";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}


 //SAP거래처생성
this.fnCREATE = function(strId, val) {
	
	this.fnSap();

}
*/


 this.fnCREATE = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {	
	// 선택된 row가 있을 경우에만 팝업을 띄움
	if (!this.gfnGridIsRow(this.dxGrid)) { return false; }
	
	if(this.dsList.getColumn(this.dsList.rowposition, "CHK")== 1 ) {
		this.gfnAlert("이미 생성된 거래처 정보가 있습니다.");
	} 
	else 
	{
		var nRow = this.dsList.rowposition;
		var param = {};
		
		param.SN_ID = this.dsList.getColumn(nRow, "SN_ID");
		param.IN_STCD2 = this.dsList.getColumn(nRow, "IN_STCD2");
		param.IN_NAME1 = this.dsList.getColumn(nRow, "IN_NAME1");
		
		this.gfnFormOpen("DQD", "DQD_VENDOR_SAP_DLG", "fnCREATE_Callback", param, 300, 250);	
	}
}

this.fnCREATE_Callback = function(svcID, value)
{	
	if(value == true) 
	{
		this.FormBtns.Select.click();
	}
}

this.fnSapSub = function() {

	this._dsProcSap.clearData();
	var nrow = this._dsProcSap.addRow();
	this._dsProcSap.setColumn(nrow, "TARGET", "select");
	this._dsProcSap.setColumn(nrow, "SP", "ZSUAS_EDI02");
	
	this.dsSelectSap1 = new Dataset();
	this.dsSelectSap1.addColumn("PLIFNR", "string");	
	
	nrow = this.dsSelectSap1.addRow();
	// IN 파라미터 셋팅
	this.dsSelectSap1.setColumn(nrow, "PLIFNR", this.dsList.getColumn(this.dsList.rowposition, "RTNCD1"));

	// SAP 호출
	var strSvcId    = "sap1";
	var strSvcType  = "sap";
	var inProc		= "_dsProcSap";
	var inData      = "select=dsSelectSap1";
	var outData     = "dsExport=export dsWALFA1=WALFA1";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

this.fnUpdateAp = function()
{
	this.dsUpdateAp.clearData();
	
	var nrow = this.dsUpdateAp.addRow();
	this.dsUpdateAp.setColumn(nrow, "LIFNR", this.dsWALFA1.getColumn(0, "LIFNR"));
	this.dsUpdateAp.setColumn(nrow, "MANDT", this.dsWALFA1.getColumn(0, "MANDT"));
	this.dsUpdateAp.setColumn(nrow, "LAND1", this.dsWALFA1.getColumn(0, "LAND1"));
	this.dsUpdateAp.setColumn(nrow, "NAME1", this.dsWALFA1.getColumn(0, "NAME1"));
	this.dsUpdateAp.setColumn(nrow, "NAME2", this.dsWALFA1.getColumn(0, "NAME2"));
	this.dsUpdateAp.setColumn(nrow, "NAME3", this.dsWALFA1.getColumn(0, "NAME3"));
	this.dsUpdateAp.setColumn(nrow, "NAME4", this.dsWALFA1.getColumn(0, "NAME4"));
	this.dsUpdateAp.setColumn(nrow, "ORT01", this.dsWALFA1.getColumn(0, "ORT01"));
	this.dsUpdateAp.setColumn(nrow, "ORT02", this.dsWALFA1.getColumn(0, "ORT02"));
	this.dsUpdateAp.setColumn(nrow, "PFACH", this.dsWALFA1.getColumn(0, "PFACH"));
	this.dsUpdateAp.setColumn(nrow, "PSTL2", this.dsWALFA1.getColumn(0, "PSTL2"));
	this.dsUpdateAp.setColumn(nrow, "PSTLZ", this.dsWALFA1.getColumn(0, "PSTLZ"));
	this.dsUpdateAp.setColumn(nrow, "REGIO", this.dsWALFA1.getColumn(0, "REGIO"));
	this.dsUpdateAp.setColumn(nrow, "SORTL", this.dsWALFA1.getColumn(0, "SORTL"));
	this.dsUpdateAp.setColumn(nrow, "STRAS", this.dsWALFA1.getColumn(0, "STRAS"));
	this.dsUpdateAp.setColumn(nrow, "ADRNR", this.dsWALFA1.getColumn(0, "ADRNR"));
	this.dsUpdateAp.setColumn(nrow, "MCOD1", this.dsWALFA1.getColumn(0, "MCOD1"));
	this.dsUpdateAp.setColumn(nrow, "MCOD2", this.dsWALFA1.getColumn(0, "MCOD2"));
	this.dsUpdateAp.setColumn(nrow, "MCOD3", this.dsWALFA1.getColumn(0, "MCOD3"));
	this.dsUpdateAp.setColumn(nrow, "ANRED", this.dsWALFA1.getColumn(0, "ANRED"));
	this.dsUpdateAp.setColumn(nrow, "BAHNS", this.dsWALFA1.getColumn(0, "BAHNS"));
	this.dsUpdateAp.setColumn(nrow, "BBBNR", this.dsWALFA1.getColumn(0, "BBBNR"));
	this.dsUpdateAp.setColumn(nrow, "BBSNR", this.dsWALFA1.getColumn(0, "BBSNR"));
	this.dsUpdateAp.setColumn(nrow, "BEGRU", this.dsWALFA1.getColumn(0, "BEGRU"));
	this.dsUpdateAp.setColumn(nrow, "BRSCH", this.dsWALFA1.getColumn(0, "BRSCH"));
	this.dsUpdateAp.setColumn(nrow, "BUBKZ", this.dsWALFA1.getColumn(0, "BUBKZ"));
	this.dsUpdateAp.setColumn(nrow, "DATLT", this.dsWALFA1.getColumn(0, "DATLT"));
	this.dsUpdateAp.setColumn(nrow, "DTAMS", this.dsWALFA1.getColumn(0, "DTAMS"));
	this.dsUpdateAp.setColumn(nrow, "DTAWS", this.dsWALFA1.getColumn(0, "DTAWS"));
	this.dsUpdateAp.setColumn(nrow, "ERDAT", this.dsWALFA1.getColumn(0, "ERDAT"));
	this.dsUpdateAp.setColumn(nrow, "ERNAM", this.dsWALFA1.getColumn(0, "ERNAM"));
	this.dsUpdateAp.setColumn(nrow, "ESRNR", this.dsWALFA1.getColumn(0, "ESRNR"));
	this.dsUpdateAp.setColumn(nrow, "KONZS", this.dsWALFA1.getColumn(0, "KONZS"));
	this.dsUpdateAp.setColumn(nrow, "KTOKK", this.dsWALFA1.getColumn(0, "KTOKK"));
	this.dsUpdateAp.setColumn(nrow, "KUNNR", this.dsWALFA1.getColumn(0, "KUNNR"));
	this.dsUpdateAp.setColumn(nrow, "LNRZA", this.dsWALFA1.getColumn(0, "LNRZA"));
	this.dsUpdateAp.setColumn(nrow, "LOEVM", this.dsWALFA1.getColumn(0, "LOEVM"));
	this.dsUpdateAp.setColumn(nrow, "SPERR", this.dsWALFA1.getColumn(0, "SPERR"));
	this.dsUpdateAp.setColumn(nrow, "SPERM", this.dsWALFA1.getColumn(0, "SPERM"));
	this.dsUpdateAp.setColumn(nrow, "SPRAS", this.dsWALFA1.getColumn(0, "SPRAS"));
	this.dsUpdateAp.setColumn(nrow, "STCD1", this.dsWALFA1.getColumn(0, "STCD1"));
	this.dsUpdateAp.setColumn(nrow, "STCD2", this.dsWALFA1.getColumn(0, "STCD2"));
	this.dsUpdateAp.setColumn(nrow, "STKZA", this.dsWALFA1.getColumn(0, "STKZA"));
	this.dsUpdateAp.setColumn(nrow, "STKZU", this.dsWALFA1.getColumn(0, "STKZU"));
	this.dsUpdateAp.setColumn(nrow, "TELBX", this.dsWALFA1.getColumn(0, "TELBX"));
	this.dsUpdateAp.setColumn(nrow, "TELF1", this.dsWALFA1.getColumn(0, "TELF1"));
	this.dsUpdateAp.setColumn(nrow, "TELF2", this.dsWALFA1.getColumn(0, "TELF2"));
	this.dsUpdateAp.setColumn(nrow, "TELFX", this.dsWALFA1.getColumn(0, "TELFX"));
	this.dsUpdateAp.setColumn(nrow, "TELTX", this.dsWALFA1.getColumn(0, "TELTX"));
	this.dsUpdateAp.setColumn(nrow, "TELX1", this.dsWALFA1.getColumn(0, "TELX1"));
	this.dsUpdateAp.setColumn(nrow, "XCPDK", this.dsWALFA1.getColumn(0, "XCPDK"));
	this.dsUpdateAp.setColumn(nrow, "XZEMP", this.dsWALFA1.getColumn(0, "XZEMP"));
	this.dsUpdateAp.setColumn(nrow, "VBUND", this.dsWALFA1.getColumn(0, "VBUND"));
	this.dsUpdateAp.setColumn(nrow, "FISKN", this.dsWALFA1.getColumn(0, "FISKN"));
	this.dsUpdateAp.setColumn(nrow, "STCEG", this.dsWALFA1.getColumn(0, "STCEG"));
	this.dsUpdateAp.setColumn(nrow, "STKZN", this.dsWALFA1.getColumn(0, "STKZN"));
	this.dsUpdateAp.setColumn(nrow, "SPERQ", this.dsWALFA1.getColumn(0, "SPERQ"));
	this.dsUpdateAp.setColumn(nrow, "GBORT", this.dsWALFA1.getColumn(0, "GBORT"));
	this.dsUpdateAp.setColumn(nrow, "GBDAT", this.dsWALFA1.getColumn(0, "GBDAT"));
	this.dsUpdateAp.setColumn(nrow, "SEXKZ", this.dsWALFA1.getColumn(0, "SEXKZ"));
	this.dsUpdateAp.setColumn(nrow, "KRAUS", this.dsWALFA1.getColumn(0, "KRAUS"));
	this.dsUpdateAp.setColumn(nrow, "REVDB", this.dsWALFA1.getColumn(0, "REVDB"));
	this.dsUpdateAp.setColumn(nrow, "QSSYS", this.dsWALFA1.getColumn(0, "QSSYS"));
	this.dsUpdateAp.setColumn(nrow, "KTOCK", this.dsWALFA1.getColumn(0, "KTOCK"));
	this.dsUpdateAp.setColumn(nrow, "PFORT", this.dsWALFA1.getColumn(0, "PFORT"));
	this.dsUpdateAp.setColumn(nrow, "WERKS", this.dsWALFA1.getColumn(0, "WERKS"));
	this.dsUpdateAp.setColumn(nrow, "LTSNA", this.dsWALFA1.getColumn(0, "LTSNA"));
	this.dsUpdateAp.setColumn(nrow, "WERKR", this.dsWALFA1.getColumn(0, "WERKR"));
	this.dsUpdateAp.setColumn(nrow, "PLKAL", this.dsWALFA1.getColumn(0, "PLKAL"));
	this.dsUpdateAp.setColumn(nrow, "DUEFL", this.dsWALFA1.getColumn(0, "DUEFL"));
	this.dsUpdateAp.setColumn(nrow, "TXJCD", this.dsWALFA1.getColumn(0, "TXJCD"));
	this.dsUpdateAp.setColumn(nrow, "SPERZ", this.dsWALFA1.getColumn(0, "SPERZ"));
	this.dsUpdateAp.setColumn(nrow, "SCACD", this.dsWALFA1.getColumn(0, "SCACD"));
	this.dsUpdateAp.setColumn(nrow, "SFRGR", this.dsWALFA1.getColumn(0, "SFRGR"));
	this.dsUpdateAp.setColumn(nrow, "LZONE", this.dsWALFA1.getColumn(0, "LZONE"));
	this.dsUpdateAp.setColumn(nrow, "XLFZA", this.dsWALFA1.getColumn(0, "XLFZA"));
	this.dsUpdateAp.setColumn(nrow, "DLGRP", this.dsWALFA1.getColumn(0, "DLGRP"));
	this.dsUpdateAp.setColumn(nrow, "FITYP", this.dsWALFA1.getColumn(0, "FITYP"));
	this.dsUpdateAp.setColumn(nrow, "STCDT", this.dsWALFA1.getColumn(0, "STCDT"));
	this.dsUpdateAp.setColumn(nrow, "REGSS", this.dsWALFA1.getColumn(0, "REGSS"));
	this.dsUpdateAp.setColumn(nrow, "ACTSS", this.dsWALFA1.getColumn(0, "ACTSS"));
	this.dsUpdateAp.setColumn(nrow, "STCD3", this.dsWALFA1.getColumn(0, "STCD3"));
	this.dsUpdateAp.setColumn(nrow, "STCD4", this.dsWALFA1.getColumn(0, "STCD4"));
	this.dsUpdateAp.setColumn(nrow, "IPISP", this.dsWALFA1.getColumn(0, "IPISP"));
	this.dsUpdateAp.setColumn(nrow, "TAXBS", this.dsWALFA1.getColumn(0, "TAXBS"));
	this.dsUpdateAp.setColumn(nrow, "PROFS", this.dsWALFA1.getColumn(0, "PROFS"));
	this.dsUpdateAp.setColumn(nrow, "STGDL", this.dsWALFA1.getColumn(0, "STGDL"));
	this.dsUpdateAp.setColumn(nrow, "EMNFR", this.dsWALFA1.getColumn(0, "EMNFR"));
	this.dsUpdateAp.setColumn(nrow, "LFURL", this.dsWALFA1.getColumn(0, "LFURL"));
	this.dsUpdateAp.setColumn(nrow, "J_1KFREPRE", this.dsWALFA1.getColumn(0, "J_1KFREPRE"));
	this.dsUpdateAp.setColumn(nrow, "J_1KFTBUS", this.dsWALFA1.getColumn(0, "J_1KFTBUS"));
	this.dsUpdateAp.setColumn(nrow, "J_1KFTIND", this.dsWALFA1.getColumn(0, "J_1KFTIND"));
	this.dsUpdateAp.setColumn(nrow, "CONFS", this.dsWALFA1.getColumn(0, "CONFS"));
	this.dsUpdateAp.setColumn(nrow, "UPDAT", this.dsWALFA1.getColumn(0, "UPDAT"));
	this.dsUpdateAp.setColumn(nrow, "UPTIM", this.dsWALFA1.getColumn(0, "UPTIM"));
	this.dsUpdateAp.setColumn(nrow, "NODEL", this.dsWALFA1.getColumn(0, "NODEL"));
	this.dsUpdateAp.setColumn(nrow, "QSSYSDAT", this.dsWALFA1.getColumn(0, "QSSYSDAT"));
	this.dsUpdateAp.setColumn(nrow, "PODKZB", this.dsWALFA1.getColumn(0, "PODKZB"));
	this.dsUpdateAp.setColumn(nrow, "FISKU", this.dsWALFA1.getColumn(0, "FISKU"));
	this.dsUpdateAp.setColumn(nrow, "STENR", this.dsWALFA1.getColumn(0, "STENR"));
	this.dsUpdateAp.setColumn(nrow, "CARRIER_CONF", this.dsWALFA1.getColumn(0, "CARRIER_CONF"));
	this.dsUpdateAp.setColumn(nrow, "J_SC_CAPITAL", this.dsWALFA1.getColumn(0, "J_SC_CAPITAL"));
	this.dsUpdateAp.setColumn(nrow, "J_SC_CURRENCY", this.dsWALFA1.getColumn(0, "J_SC_CURRENCY"));
	this.dsUpdateAp.setColumn(nrow, "ALC", this.dsWALFA1.getColumn(0, "ALC"));
	this.dsUpdateAp.setColumn(nrow, "PMT_OFFICE", this.dsWALFA1.getColumn(0, "PMT_OFFICE"));
	this.dsUpdateAp.setColumn(nrow, "PSOFG", this.dsWALFA1.getColumn(0, "PSOFG"));
	this.dsUpdateAp.setColumn(nrow, "PSOIS", this.dsWALFA1.getColumn(0, "PSOIS"));
	this.dsUpdateAp.setColumn(nrow, "PSON1", this.dsWALFA1.getColumn(0, "PSON1"));
	this.dsUpdateAp.setColumn(nrow, "PSON2", this.dsWALFA1.getColumn(0, "PSON2"));
	this.dsUpdateAp.setColumn(nrow, "PSON3", this.dsWALFA1.getColumn(0, "PSON3"));
	this.dsUpdateAp.setColumn(nrow, "PSOVN", this.dsWALFA1.getColumn(0, "PSOVN"));
	this.dsUpdateAp.setColumn(nrow, "PSOTL", this.dsWALFA1.getColumn(0, "PSOTL"));
	this.dsUpdateAp.setColumn(nrow, "PSOHS", this.dsWALFA1.getColumn(0, "PSOHS"));
	this.dsUpdateAp.setColumn(nrow, "PSOST", this.dsWALFA1.getColumn(0, "PSOST"));
	this.dsUpdateAp.setColumn(nrow, "TRANSPORT_CHAIN", this.dsWALFA1.getColumn(0, "TRANSPORT_CHAIN"));
	this.dsUpdateAp.setColumn(nrow, "STAGING_TIME", this.dsWALFA1.getColumn(0, "STAGING_TIME"));
	this.dsUpdateAp.setColumn(nrow, "SCHEDULING_TYPE", this.dsWALFA1.getColumn(0, "SCHEDULING_TYPE"));
	this.dsUpdateAp.setColumn(nrow, "SUBMI_RELEVANT", this.dsWALFA1.getColumn(0, "SUBMI_RELEVANT"));
	this.dsUpdateAp.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);

	if (this.dsUpdateAp.rowcount == 0) return;
		
	var strSvcId    = "update_ap";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "update_ap=dsUpdateAp";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
 	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
 						strSvcType , 	// transaction을 요청할 구분
 						inProc,			// Procedure 정보 Dataset 이름
 						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
 						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
 						callBackFnc); // 통신방법 정의 [생략가능]
}	

//SAP거래처조회
this.fnCheck = function(strId, val) {
	this.fnSapSub();
}


this.fnSearchInit = function(obj,e) {
	if(e == null || (e.pretext != e.posttext)) {
		this.gfnSetFormStatus(this);
		this.gfnGridClear(this.dxGrid);
	}
};

this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
	}
};]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DQDPR_VENDOR_IF_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">insert</Col>
            <Col id="SP">DQDPR_VENDOR_IF_INSERT</Col>
          </Row>
          <Row>
            <Col id="TARGET">update</Col>
            <Col id="SP">DQDPR_VENDOR_IF_UPDATE</Col>
          </Row>
          <Row>
            <Col id="TARGET">delete</Col>
            <Col id="SP">DQDPR_VENDOR_IF_DELETE</Col>
          </Row>
          <Row>
            <Col id="TARGET">update_ap</Col>
            <Col id="SP">DQDPR_VENDOR_AP_IF_UPDATE</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsTYPE_SELECT">
        <ColumnInfo>
          <Column id="CODE" type="STRING" size="256"/>
          <Column id="VALUE" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CODE">C</Col>
            <Col id="VALUE">코드</Col>
          </Row>
          <Row>
            <Col id="CODE">N</Col>
            <Col id="VALUE">명칭</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="TYPE_SELECT" type="STRING" size="256"/>
          <Column id="CD_VENDOR" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TYPE_SELECT">AC</Col>
            <Col id="CD_VENDOR"/>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="_dsProcSap">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="dsFunc"/>
      <Dataset id="dsSelectSap">
        <ColumnInfo>
          <Column id="IN_AKONT" type="STRING" size="256"/>
          <Column id="IN_CJKTW" type="STRING" size="256"/>
          <Column id="IN_EKGRP" type="STRING" size="256"/>
          <Column id="IN_FDGRV" type="STRING" size="256"/>
          <Column id="IN_FITYP" type="STRING" size="256"/>
          <Column id="IN_INTAD" type="STRING" size="256"/>
          <Column id="IN_J_1KFREPRE" type="STRING" size="256"/>
          <Column id="IN_J_1KFTBUS" type="STRING" size="256"/>
          <Column id="IN_J_1KFTIND" type="STRING" size="256"/>
          <Column id="IN_KTOKK" type="STRING" size="256"/>
          <Column id="IN_LFURL" type="STRING" size="256"/>
          <Column id="IN_NAME1" type="STRING" size="256"/>
          <Column id="IN_ORT01" type="STRING" size="256"/>
          <Column id="IN_PSTLZ" type="STRING" size="256"/>
          <Column id="IN_REGIO" type="STRING" size="256"/>
          <Column id="IN_SORTL" type="STRING" size="256"/>
          <Column id="IN_STCD1" type="STRING" size="256"/>
          <Column id="IN_STCD2" type="STRING" size="256"/>
          <Column id="IN_STRAS" type="STRING" size="256"/>
          <Column id="IN_TELF1" type="STRING" size="256"/>
          <Column id="IN_TELF2" type="STRING" size="256"/>
          <Column id="IN_TLFNS" type="STRING" size="256"/>
          <Column id="IN_TLFXS" type="STRING" size="256"/>
          <Column id="IN_ZTERM" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="dsExport"/>
      <Dataset id="dsWALFA1"/>
      <Dataset id="dsUpdateSap"/>
    </Objects>
    <Bind>
      <BindItem id="item1" compid="divSearch.form.rdoTYPE_SELECT" propid="value" datasetid="dsSearch" columnid="TYPE_SELECT"/>
      <BindItem id="item2" compid="divSearch.form.edtCD_VENDOR" propid="value" datasetid="dsSearch" columnid="CD_VENDOR"/>
    </Bind>
  </Form>
</FDL>
