(function()
{
    return function()
    {
        if (!this._is_form)
            return;
        
        var obj = null;
        
        this.on_create = function()
        {
            this.set_name("form");
            this.set_titletext("전표발행");
            if (Form == this.constructor)
            {
                this._setFormPosition(1280,720);
            }
            
            // Object(Dataset, ExcelExportObject) Initialize
            obj = new Dataset("dsList", this);
            obj._setContents("<ColumnInfo><Column id=\"CD_DEPTOFFICER\" type=\"STRING\" size=\"256\"/><Column id=\"DS_DEPTOFFICER\" type=\"STRING\" size=\"256\"/><Column id=\"CD_BIMOK\" type=\"STRING\" size=\"256\"/><Column id=\"CD_SEMOK\" type=\"STRING\" size=\"256\"/><Column id=\"DS_BIMOK\" type=\"STRING\" size=\"256\"/><Column id=\"DS_SEMOK\" type=\"STRING\" size=\"256\"/><Column id=\"NO_REF2\" type=\"STRING\" size=\"256\"/></ColumnInfo>");
            this.addChild(obj.name, obj);


            obj = new Dataset("_dsProc", this);
            obj._setContents("<ColumnInfo><Column id=\"TARGET\" type=\"STRING\" size=\"256\"/><Column id=\"SP\" type=\"STRING\" size=\"256\"/></ColumnInfo><Rows><Row><Col id=\"TARGET\">select</Col><Col id=\"SP\">DHAPR_SLIP_DETAIL</Col></Row><Row><Col id=\"TARGET\">insert</Col><Col id=\"SP\">DHAPR_SLIP_XISSUESLIP</Col></Row><Row><Col id=\"TARGET\">update</Col><Col id=\"SP\">DHAPR_SLIP_XISSUESLIP</Col></Row><Row><Col id=\"TARGET\">delete</Col><Col id=\"SP\">DHAPR_SLIP_XISSUESLIP</Col></Row><Row><Col id=\"TARGET\">slipDelete</Col><Col id=\"SP\">DHAPR_SLIP_CANCEL</Col></Row><Row><Col id=\"TARGET\">selectNewCode</Col><Col id=\"SP\">DHAPR_SLIPNO_XSELECT</Col></Row><Row><Col id=\"TARGET\">combo</Col><Col id=\"SP\">DZXPR_COMBO_SELECT</Col></Row><Row><Col id=\"TARGET\">callDF</Col><Col id=\"SP\">DFLPR_INCOMESLIP_SLIP</Col></Row><Row><Col id=\"TARGET\">fileDelete</Col><Col id=\"SP\">DZZPR_FILEMANAGER_SAVE</Col></Row><Row><Col id=\"TARGET\">fileSelect</Col><Col id=\"SP\">DZZPR_FILEMANAGER_SELECT</Col></Row><Row><Col id=\"TARGET\">combo2</Col><Col id=\"SP\">DZXPR_COMBO_SELECT</Col></Row><Row><Col id=\"TARGET\">selectTax</Col><Col id=\"SP\">DHXPR_TAX_INFO_SELECT</Col></Row><Row><Col id=\"TARGET\">selectDtReq</Col><Col id=\"SP\">DHAPR_SLIP_DT_MIBUL_SELECT</Col></Row><Row><Col id=\"TARGET\">selectDF</Col><Col id=\"SP\">DFLPR_INCOMESLIP_ISSUE_SELECT</Col></Row><Row><Col id=\"TARGET\">selectBudget</Col><Col id=\"SP\">DHAPR_AVAILABLEBUDGET_SELECT</Col></Row><Row><Col id=\"TARGET\">slipPirnt</Col><Col id=\"SP\">DHAPR_SLIP_DETAIL</Col></Row><Row><Col id=\"TARGET\">slipEAppr</Col><Col id=\"SP\">DHAPR_SLIP_EAPPROVAL_SELECT</Col></Row><Row><Col id=\"TARGET\">selectAuthGwAppr</Col><Col id=\"SP\">DHAPR_SLIP_DETAIL_CVS_CHECK</Col></Row><Row><Col id=\"TARGET\">selectCurrExchange</Col><Col id=\"SP\">DHXPR_CURRENCY_EXCHAGE</Col></Row><Row><Col id=\"TARGET\">aprv_execute</Col><Col id=\"SP\">DHAPR_SLIP_DETAIL_APRV_EXECUTE</Col></Row></Rows>");
            this.addChild(obj.name, obj);


            obj = new Dataset("dsListSub", this);
            obj._setContents("");
            this.addChild(obj.name, obj);


            obj = new Dataset("dsSearch", this);
            obj._setContents("<ColumnInfo><Column id=\"CD_CORP\" type=\"STRING\" size=\"256\"/><Column id=\"ACNTUNIT\" type=\"STRING\" size=\"256\"/></ColumnInfo><Rows><Row/></Rows>");
            this.addChild(obj.name, obj);


            obj = new Dataset("dsStatus", this);
            obj._setContents("");
            this.addChild(obj.name, obj);


            obj = new Dataset("dsTY_SLIP", this);
            obj._setContents("");
            this.addChild(obj.name, obj);


            obj = new Dataset("dsNewCode", this);
            obj._setContents("<ColumnInfo><Column id=\"CD_TRADE\" type=\"STRING\" size=\"256\"/></ColumnInfo>");
            this.addChild(obj.name, obj);


            obj = new Dataset("dsReturn", this);
            obj._setContents("");
            this.addChild(obj.name, obj);


            obj = new Dataset("dsFileList", this);
            obj._setContents("");
            this.addChild(obj.name, obj);


            obj = new Dataset("dsCD_APP", this);
            obj._setContents("");
            this.addChild(obj.name, obj);


            obj = new Dataset("dsTax", this);
            obj._setContents("");
            this.addChild(obj.name, obj);


            obj = new Dataset("dsDtReq", this);
            obj._setContents("");
            this.addChild(obj.name, obj);


            obj = new Dataset("dsMngItem", this);
            obj._setContents("<ColumnInfo><Column id=\"TYPE\" type=\"STRING\" size=\"256\"/><Column id=\"CHECK\" type=\"STRING\" size=\"256\"/><Column id=\"TY\" type=\"STRING\" size=\"256\"/><Column id=\"CD\" type=\"STRING\" size=\"256\"/><Column id=\"DS\" type=\"STRING\" size=\"256\"/></ColumnInfo><Rows><Row><Col id=\"TYPE\">TY_CD_DS</Col><Col id=\"CHECK\">TY_ETC1_FLAG</Col><Col id=\"CD\">CD_ETC1</Col><Col id=\"DS\">DS_ETC11</Col><Col id=\"TY\">TY_ETC1</Col></Row><Row><Col id=\"TYPE\">TY_CD_DS</Col><Col id=\"CHECK\">TY_ETC2_FLAG</Col><Col id=\"CD\">CD_ETC2</Col><Col id=\"DS\">DS_ETC21</Col><Col id=\"TY\">TY_ETC2</Col></Row><Row><Col id=\"TYPE\">TY_CD_DS</Col><Col id=\"CHECK\">TY_REFNO_FLAG</Col><Col id=\"TY\">TY_REF</Col><Col id=\"CD\">NO_REF</Col><Col id=\"DS\">DS_REF</Col></Row><Row><Col id=\"TYPE\">TY_CD_DS</Col><Col id=\"CHECK\">TY_REFNO2_FLAG</Col><Col id=\"TY\">TY_REF2</Col><Col id=\"CD\">NO_REF2</Col><Col id=\"DS\">DS_REF2</Col></Row><Row><Col id=\"TYPE\">CD</Col><Col id=\"CHECK\">DS_REFAM1</Col><Col id=\"DS\"/><Col id=\"CD\">AM_REF1</Col><Col id=\"TY\">-</Col></Row><Row><Col id=\"TYPE\">CD</Col><Col id=\"CHECK\">DS_REFAM2</Col><Col id=\"DS\"/><Col id=\"CD\">AM_REF2</Col><Col id=\"TY\">-</Col></Row><Row><Col id=\"TYPE\">CD</Col><Col id=\"CHECK\">DS_REFDT1</Col><Col id=\"DS\"/><Col id=\"CD\">DT_REF1</Col><Col id=\"TY\">-</Col></Row><Row><Col id=\"TYPE\">CD</Col><Col id=\"CHECK\">DS_REFDT2</Col><Col id=\"DS\"/><Col id=\"CD\">DT_REF2</Col><Col id=\"TY\">-</Col></Row><Row><Col id=\"TYPE\">CD</Col><Col id=\"CHECK\">DS_REFRT1</Col><Col id=\"DS\"/><Col id=\"CD\">RT_REF1</Col><Col id=\"TY\">-</Col></Row><Row><Col id=\"TYPE\">CD</Col><Col id=\"CHECK\">DS_REFRT2</Col><Col id=\"DS\"/><Col id=\"CD\">RT_REF2</Col><Col id=\"TY\">-</Col></Row></Rows>");
            this.addChild(obj.name, obj);


            obj = new Dataset("dsListDF", this);
            obj._setContents("<ColumnInfo><Column id=\"DF_INFO0\" type=\"STRING\" size=\"256\"/><Column id=\"DF_INFO1\" type=\"STRING\" size=\"256\"/><Column id=\"DF_INFO2\" type=\"STRING\" size=\"256\"/><Column id=\"DF_INFO3\" type=\"STRING\" size=\"256\"/><Column id=\"DF_INFO4\" type=\"STRING\" size=\"256\"/><Column id=\"DF_INFO5\" type=\"STRING\" size=\"256\"/><Column id=\"DF_INFO6\" type=\"STRING\" size=\"256\"/><Column id=\"DF_INFO7\" type=\"STRING\" size=\"256\"/><Column id=\"DF_INFO8\" type=\"STRING\" size=\"256\"/><Column id=\"DF_INFO9\" type=\"STRING\" size=\"256\"/><Column id=\"DF_INFO10\" type=\"STRING\" size=\"256\"/><Column id=\"DF_INFO11\" type=\"STRING\" size=\"256\"/><Column id=\"DF_INFO12\" type=\"STRING\" size=\"256\"/><Column id=\"DF_INFO13\" type=\"STRING\" size=\"256\"/><Column id=\"DF_INFO14\" type=\"STRING\" size=\"256\"/><Column id=\"DF_INFO15\" type=\"STRING\" size=\"256\"/><Column id=\"DF_INFO16\" type=\"STRING\" size=\"256\"/><Column id=\"DF_INFO17\" type=\"STRING\" size=\"256\"/><Column id=\"DF_INFO18\" type=\"STRING\" size=\"256\"/><Column id=\"DF_INFO19\" type=\"STRING\" size=\"256\"/><Column id=\"DF_INFO20\" type=\"STRING\" size=\"256\"/><Column id=\"DF_INFO21\" type=\"STRING\" size=\"256\"/><Column id=\"DF_INFO22\" type=\"STRING\" size=\"256\"/><Column id=\"DF_INFO23\" type=\"STRING\" size=\"256\"/></ColumnInfo>");
            this.addChild(obj.name, obj);


            obj = new Dataset("dsListBudget", this);
            obj._setContents("<ColumnInfo><Column id=\"AM_DEF\" type=\"STRING\" size=\"256\"/><Column id=\"AM_EXEC\" type=\"STRING\" size=\"256\"/><Column id=\"AM_YR_AVAIL\" type=\"STRING\" size=\"256\"/><Column id=\"AM_DEFMONTH\" type=\"STRING\" size=\"256\"/><Column id=\"AM_EXEMONTH\" type=\"STRING\" size=\"256\"/><Column id=\"AM_MM_AVAIL\" type=\"STRING\" size=\"256\"/><Column id=\"MM_PERIOD\" type=\"STRING\" size=\"256\"/></ColumnInfo>");
            this.addChild(obj.name, obj);


            obj = new Dataset("dsReturnBudget", this);
            obj._setContents("");
            this.addChild(obj.name, obj);


            obj = new Dataset("dsListPrint", this);
            obj._setContents("");
            this.addChild(obj.name, obj);


            obj = new Dataset("dsListSlipEAppr", this);
            obj._setContents("");
            this.addChild(obj.name, obj);


            obj = new Dataset("dsAuthGwApprList", this);
            obj._setContents("");
            this.addChild(obj.name, obj);


            obj = new Dataset("dsCD_A30", this);
            obj._setContents("");
            this.addChild(obj.name, obj);


            obj = new Dataset("dsCurrExchange", this);
            obj._setContents("");
            this.addChild(obj.name, obj);
            
            // UI Components Initialize
            obj = new Div("divSearch","0","10.0",null,"78","0",null,null,null,null,null,this);
            obj.set_taborder("1");
            obj.set_cssclass("div_SEARCH_Bg");
            obj.set_formscrolltype("none");
            this.addChild(obj.name, obj);

            obj = new Static("sta01","0.0","10.0","92.0","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("0");
            obj.set_text("법인코드");
            obj.set_cssclass("sta_WF_SchLabelE");
            this.divSearch.addChild(obj.name, obj);

            obj = new Div("ccfCD_CORP","sta01:0.0","10.0","219","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.getSetter("CDTextWidth").set("70");
            obj.set_taborder("1");
            obj.set_url("cmm::cmmCodeFind.xfdl");
            obj.set_text("");
            this.divSearch.addChild(obj.name, obj);

            obj = new Static("sta03","ccfCD_CORP:0.0","10.0","92.0","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("2");
            obj.set_text("회계일자");
            obj.set_cssclass("sta_WF_SchLabelE");
            this.divSearch.addChild(obj.name, obj);

            obj = new Calendar("calDT_ACCOUNT","sta03:0.0","10.0","105","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("3");
            obj.set_dateformat("yyyy-MM-dd");
            obj.set_editformat("yyyyMMdd");
            obj.set_autoselect("true");
            obj.set_enable("true");
            this.divSearch.addChild(obj.name, obj);

            obj = new Static("sta00","calDT_ACCOUNT:0.0","10.0","92.0","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("4");
            obj.set_text("전표구분");
            obj.set_cssclass("sta_WF_SchLabel");
            this.divSearch.addChild(obj.name, obj);

            obj = new Combo("ccboTY_SLIP","sta00:0.0","10.0","90","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("5");
            obj.set_innerdataset("dsTY_SLIP");
            obj.set_datacolumn("DS_CODE");
            obj.set_codecolumn("CD_CODE");
            obj.set_enable("true");
            obj.set_color("royalblue");
            obj.set_text("");
            obj.set_value("");
            obj.set_index("-1");
            this.divSearch.addChild(obj.name, obj);

            obj = new Static("sta04","0.0","sta01:10.0","92.0","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("8");
            obj.set_text("발행부서");
            obj.set_cssclass("sta_WF_SchLabelE");
            this.divSearch.addChild(obj.name, obj);

            obj = new Div("ccfACNTUNIT","sta04:0","sta01:10","219","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.getSetter("CDTextWidth").set("70");
            obj.set_taborder("9");
            obj.set_url("cmm::cmmCodeFind.xfdl");
            obj.set_text("");
            this.divSearch.addChild(obj.name, obj);

            obj = new Static("sta05","ccfACNTUNIT:0.0","sta01:10.0","92","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("10");
            obj.set_text("작성일");
            obj.set_cssclass("sta_WF_SchLabel");
            this.divSearch.addChild(obj.name, obj);

            obj = new Edit("txtDT_UPDATE","sta05:0.0","sta01:10.0","105","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("11");
            obj.set_readonly("true");
            this.divSearch.addChild(obj.name, obj);

            obj = new Static("sta06","ccboTY_SLIP:0.0","10.0","92.0","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("6");
            obj.set_text("전표번호");
            obj.set_cssclass("sta_WF_SchLabel");
            this.divSearch.addChild(obj.name, obj);

            obj = new Edit("txtCD_TRADE","sta06:0.0","10.0","140","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("7");
            obj.set_color("royalblue");
            obj.set_font("bold 12px/normal \"Dotum\"");
            obj.set_readonly("true");
            obj.set_text("20210420010016");
            this.divSearch.addChild(obj.name, obj);

            obj = new Static("sta07","txtDT_UPDATE:0.0","sta01:10.0","92","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("12");
            obj.set_text("작성자");
            obj.set_cssclass("sta_WF_SchLabel");
            this.divSearch.addChild(obj.name, obj);

            obj = new Edit("txtDS_HNAME","sta07:0.0","sta01:10.0","90","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("13");
            obj.set_readonly("true");
            this.divSearch.addChild(obj.name, obj);

            obj = new Static("staDS_APPR","txtDS_HNAME:0.0","sta01:10.0","92.0","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("14");
            obj.set_text("승인여부");
            obj.set_cssclass("sta_WF_SchLabel");
            this.divSearch.addChild(obj.name, obj);

            obj = new Edit("txtDS_APPR","staDS_APPR:0.0","sta01:10.0","80","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("15");
            obj.set_readonly("true");
            this.divSearch.addChild(obj.name, obj);

            obj = new Static("staDS_AUTOSLIP","txtDS_APPR:0.0","sta01:10.0","105","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("16");
            obj.set_text("자동전표명");
            obj.set_cssclass("sta_WF_SchLabel");
            this.divSearch.addChild(obj.name, obj);

            obj = new Edit("txtDS_AUTOSLIP","staDS_AUTOSLIP:0.0","sta01:10.0","150","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("17");
            obj.set_readonly("true");
            this.divSearch.addChild(obj.name, obj);

            obj = new Static("sta02","txtDS_AUTOSLIP:0.0","sta01:10.0","92.0","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("18");
            obj.set_text("결재상태");
            obj.set_visible("true");
            obj.set_cssclass("sta_WF_SchLabel");
            this.divSearch.addChild(obj.name, obj);

            obj = new Combo("ccboCD_APP","sta02:80","sta01:10","120","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("19");
            obj.set_innerdataset("dsCD_APP");
            obj.set_datacolumn("DS_CODE");
            obj.set_codecolumn("CD_CODE");
            obj.set_enable("true");
            obj.set_color("royalblue");
            obj.set_visible("false");
            obj.set_text("");
            obj.set_value("");
            obj.set_index("-1");
            this.divSearch.addChild(obj.name, obj);

            obj = new CheckBox("chkYN_COLVIEW","txtCD_TRADE:10","10","62","25",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("20");
            obj.set_text("지점");
            this.divSearch.addChild(obj.name, obj);

            obj = new Edit("txtDS_APRV","1212","44","80","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("21");
            obj.set_readonly("true");
            this.divSearch.addChild(obj.name, obj);

            obj = new Div("divData","0","divSearch:10",null,null,"0","0",null,null,null,null,this);
            obj.set_taborder("0");
            obj.set_cssclass("div_DATA_Bg");
            this.addChild(obj.name, obj);

            obj = new Div("divSplitter","0","60%","100.00%","5",null,null,null,null,null,null,this.divData.form);
            obj.set_taborder("1");
            obj.set_cssclass("div_Splitter");
            obj.set_cursor("ns-resize");
            this.divData.addChild(obj.name, obj);

            obj = new Div("divDataTop","0","0",null,null,"0","divSplitter:5",null,null,null,null,this.divData.form);
            obj.set_taborder("2");
            this.divData.addChild(obj.name, obj);

            obj = new Static("staTitle01","0","-5","100.00%","22",null,null,null,null,null,null,this.divData.form.divDataTop.form);
            obj.set_taborder("1");
            obj.set_text("전표정보");
            obj.set_cssclass("sta_TITLE_Bg");
            this.divData.form.divDataTop.addChild(obj.name, obj);

            obj = new Grid("objGrid","0","staTitle01:6",null,null,"0","3",null,null,null,null,this.divData.form.divDataTop.form);
            obj.set_taborder("0");
            obj._setContents("");
            this.divData.form.divDataTop.addChild(obj.name, obj);

            obj = new Button("btnAddRow",null,"0","87","20","0",null,null,null,null,null,this.divData.form.divDataTop.form);
            obj.set_taborder("2");
            obj.set_text("신규 행 추가");
            this.divData.form.divDataTop.addChild(obj.name, obj);

            obj = new MaskEdit("mskAddCnt",null,"0","90","20","92",null,null,null,null,null,this.divData.form.divDataTop.form);
            obj.set_taborder("3");
            obj.set_limitbymask("both");
            obj.set_format("###");
            this.divData.form.divDataTop.addChild(obj.name, obj);

            obj = new Div("divDataBottom","0","divSplitter:7",null,null,"0","0",null,null,null,null,this.divData.form);
            obj.set_taborder("0");
            this.divData.addChild(obj.name, obj);

            obj = new Tab("tabData","0","0",null,null,"0","0",null,null,null,null,this.divData.form.divDataBottom.form);
            obj.set_taborder("0");
            obj.set_tabindex("0");
            this.divData.form.divDataBottom.addChild(obj.name, obj);

            obj = new Tabpage("tab1",this.divData.form.divDataBottom.form.tabData);
            obj.set_text("관리");
            this.divData.form.divDataBottom.form.tabData.addChild(obj.name, obj);

            obj = new Static("staTitle02","0","0",null,"22","0",null,null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab1.form);
            obj.set_taborder("0");
            obj.set_text("관리항목");
            obj.set_cssclass("sta_TITLE_Bg");
            this.divData.form.divDataBottom.form.tabData.tab1.addChild(obj.name, obj);

            obj = new Div("divTotal","0",null,null,"32","0","0",null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab1.form);
            obj.set_taborder("2");
            this.divData.form.divDataBottom.form.tabData.tab1.addChild(obj.name, obj);

            obj = new Static("sta21","0","2","120","30",null,null,null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab1.form.divTotal.form);
            obj.set_taborder("8");
            obj.set_text("차대차액(로컬화)");
            obj.set_cssclass("sta_WF_tablelabel");
            obj.set_textDecoration("none");
            this.divData.form.divDataBottom.form.tabData.tab1.form.divTotal.addChild(obj.name, obj);

            obj = new Static("sta31","sta21:-1","2","130","30",null,null,null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab1.form.divTotal.form);
            obj.set_taborder("6");
            obj.set_cssclass("sta_WF_tablebg");
            this.divData.form.divDataBottom.form.tabData.tab1.form.divTotal.addChild(obj.name, obj);

            obj = new MaskEdit("mskSUM_LOCAL_CRDR","sta21:5","7","115","20",null,null,null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab1.form.divTotal.form);
            obj.set_taborder("7");
            obj.set_enable("false");
            obj.set_format("#,###0.00");
            this.divData.form.divDataBottom.form.tabData.tab1.form.divTotal.addChild(obj.name, obj);

            obj = new Static("sta22","sta31:-1","2","120","30",null,null,null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab1.form.divTotal.form);
            obj.set_taborder("8");
            obj.set_text("차대차액(원화)");
            obj.set_cssclass("sta_WF_tablelabel");
            obj.set_textDecoration("none");
            this.divData.form.divDataBottom.form.tabData.tab1.form.divTotal.addChild(obj.name, obj);

            obj = new Static("sta11","sta22:-1","2","130","30",null,null,null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab1.form.divTotal.form);
            obj.set_taborder("9");
            obj.set_cssclass("sta_WF_tablebg");
            obj.set_text("");
            obj.set_visible("true");
            this.divData.form.divDataBottom.form.tabData.tab1.form.divTotal.addChild(obj.name, obj);

            obj = new MaskEdit("mskSUM_CRDR","sta22:5","7","115","20",null,null,null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab1.form.divTotal.form);
            obj.set_taborder("7");
            obj.set_enable("false");
            obj.set_format("#,###");
            this.divData.form.divDataBottom.form.tabData.tab1.form.divTotal.addChild(obj.name, obj);

            obj = new Static("staDT_MAGAM","sta11:-1","2","95","30",null,null,null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab1.form.divTotal.form);
            obj.set_taborder("11");
            obj.set_text("전표마감일");
            obj.set_cssclass("sta_WF_tablelabel");
            obj.set_textDecoration("none");
            obj.set_visible("true");
            this.divData.form.divDataBottom.form.tabData.tab1.form.divTotal.addChild(obj.name, obj);

            obj = new Static("sta03","staDT_MAGAM:-1","2","95","30",null,null,null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab1.form.divTotal.form);
            obj.set_taborder("0");
            obj.set_cssclass("sta_WF_tablebg");
            this.divData.form.divDataBottom.form.tabData.tab1.form.divTotal.addChild(obj.name, obj);

            obj = new Edit("txtDT_MAGAM","staDT_MAGAM:5","7","80","20",null,null,null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab1.form.divTotal.form);
            obj.set_taborder("10");
            obj.set_maxlength("7");
            obj.set_enable("false");
            obj.set_visible("true");
            obj.set_text("2019-09-02");
            this.divData.form.divDataBottom.form.tabData.tab1.form.divTotal.addChild(obj.name, obj);

            obj = new Static("sta00","sta03:-1","2","95","30",null,null,null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab1.form.divTotal.form);
            obj.set_taborder("12");
            obj.set_text("합계");
            obj.set_cssclass("sta_WF_tablelabel");
            obj.set_textDecoration("none");
            obj.set_visible("false");
            this.divData.form.divDataBottom.form.tabData.tab1.form.divTotal.addChild(obj.name, obj);

            obj = new Static("sta04","sta00:18","7","60","20",null,null,null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab1.form.divTotal.form);
            obj.set_taborder("13");
            obj.set_text("차변");
            obj.set_visible("false");
            this.divData.form.divDataBottom.form.tabData.tab1.form.divTotal.addChild(obj.name, obj);

            obj = new MaskEdit("mskAM_DR","sta04:-26","7","115","20",null,null,null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab1.form.divTotal.form);
            obj.set_taborder("5");
            obj.set_limitbymask("both");
            obj.set_readonly("true");
            obj.set_format("#,###");
            obj.set_background("#aacee2");
            obj.set_visible("false");
            this.divData.form.divDataBottom.form.tabData.tab1.form.divTotal.addChild(obj.name, obj);

            obj = new Static("sta05","mskAM_DR:21","7","60","20",null,null,null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab1.form.divTotal.form);
            obj.set_taborder("4");
            obj.set_text("대변");
            obj.set_visible("false");
            this.divData.form.divDataBottom.form.tabData.tab1.form.divTotal.addChild(obj.name, obj);

            obj = new MaskEdit("mskAM_CR","mskAM_DR:55","7","115","20",null,null,null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab1.form.divTotal.form);
            obj.set_taborder("3");
            obj.set_readonly("true");
            obj.set_limitbymask("both");
            obj.set_format("#,###");
            obj.set_background("#fdf2dc");
            obj.set_visible("false");
            this.divData.form.divDataBottom.form.tabData.tab1.form.divTotal.addChild(obj.name, obj);

            obj = new Static("sta06","mskAM_CR:21","7","60","20",null,null,null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab1.form.divTotal.form);
            obj.set_taborder("2");
            obj.set_text("건수");
            obj.set_visible("false");
            this.divData.form.divDataBottom.form.tabData.tab1.form.divTotal.addChild(obj.name, obj);

            obj = new MaskEdit("mskCOUNT","sta06:-26","7","65","20",null,null,null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab1.form.divTotal.form);
            obj.set_taborder("1");
            obj.set_format("#,###");
            obj.set_limitbymask("both");
            obj.set_readonly("true");
            obj.set_background("yellow");
            obj.set_visible("false");
            this.divData.form.divDataBottom.form.tabData.tab1.form.divTotal.addChild(obj.name, obj);

            obj = new Grid("objGridSub","0","staTitle02:5",null,"150","0","divTotal:4",null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab1.form);
            obj.getSetter("sub").set("true");
            obj.set_taborder("1");
            obj._setContents("");
            this.divData.form.divDataBottom.form.tabData.tab1.addChild(obj.name, obj);

            obj = new Tabpage("tab2",this.divData.form.divDataBottom.form.tabData);
            obj.set_text("예산");
            this.divData.form.divDataBottom.form.tabData.addChild(obj.name, obj);

            obj = new Static("sta00","0","3","100","30",null,null,null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab2.form);
            obj.set_taborder("0");
            obj.set_text("부서");
            obj.set_cssclass("sta_WF_tablelabelE");
            this.divData.form.divDataBottom.form.tabData.tab2.addChild(obj.name, obj);

            obj = new Static("sta01","0","sta00:-1","100","30",null,null,null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab2.form);
            obj.set_taborder("1");
            obj.set_text("비목코드");
            obj.set_cssclass("sta_WF_tablelabelE");
            this.divData.form.divDataBottom.form.tabData.tab2.addChild(obj.name, obj);

            obj = new Static("sta02","0","sta01:-1","100","30",null,null,null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab2.form);
            obj.set_taborder("2");
            obj.set_text("세목코드");
            obj.set_cssclass("sta_WF_tablelabelE");
            this.divData.form.divDataBottom.form.tabData.tab2.addChild(obj.name, obj);

            obj = new Static("sta03","0","sta02:-1","100","30",null,null,null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab2.form);
            obj.set_taborder("3");
            obj.set_cssclass("sta_WF_tablelabelE");
            obj.set_visible("false");
            this.divData.form.divDataBottom.form.tabData.tab2.addChild(obj.name, obj);

            obj = new Static("sta04","0","sta03:-1","100","30",null,null,null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab2.form);
            obj.set_taborder("4");
            obj.set_cssclass("sta_WF_tablelabelE");
            obj.set_visible("false");
            this.divData.form.divDataBottom.form.tabData.tab2.addChild(obj.name, obj);

            obj = new Static("stabg00","sta00:-1","3","307","30",null,null,null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab2.form);
            obj.set_taborder("5");
            obj.set_cssclass("sta_WF_tablebg");
            this.divData.form.divDataBottom.form.tabData.tab2.addChild(obj.name, obj);

            obj = new Static("stabg01","sta01:-1","sta00:-1","307","30",null,null,null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab2.form);
            obj.set_taborder("6");
            obj.set_cssclass("sta_WF_tablebg");
            this.divData.form.divDataBottom.form.tabData.tab2.addChild(obj.name, obj);

            obj = new Static("stabg02","sta02:-1","sta01:-1","307","30",null,null,null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab2.form);
            obj.set_taborder("7");
            obj.set_cssclass("sta_WF_tablebg");
            this.divData.form.divDataBottom.form.tabData.tab2.addChild(obj.name, obj);

            obj = new Static("stabg03","sta03:-1","sta02:-1","307","30",null,null,null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab2.form);
            obj.set_taborder("8");
            obj.set_cssclass("sta_WF_tablebg");
            obj.set_visible("false");
            this.divData.form.divDataBottom.form.tabData.tab2.addChild(obj.name, obj);

            obj = new Static("stabg04","sta04:-1","sta03:-1","307","30",null,null,null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab2.form);
            obj.set_taborder("10");
            obj.set_cssclass("sta_WF_tablebg");
            obj.set_visible("false");
            this.divData.form.divDataBottom.form.tabData.tab2.addChild(obj.name, obj);

            obj = new Div("ccfCD_DEPTOFFICER","sta00:3","7","300","22",null,null,null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab2.form);
            obj.getSetter("CodeFindName").set("DIX_ACNTUNIT_AUTH");
            obj.getSetter("CDTextWidth").set("70");
            obj.set_taborder("9");
            obj.set_url("cmm::cmmCodeFind.xfdl");
            obj.set_text("");
            obj.set_enable("false");
            this.divData.form.divDataBottom.form.tabData.tab2.addChild(obj.name, obj);

            obj = new Div("ccfCD_BIMOK","sta00:3","sta00:3","300","22",null,null,null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab2.form);
            obj.getSetter("CodeFindName").set("DIX_CFBIMOK_DIVERT");
            obj.getSetter("CDTextWidth").set("70");
            obj.set_taborder("11");
            obj.set_url("cmm::cmmCodeFind.xfdl");
            obj.set_text("");
            obj.set_enable("false");
            obj.set_enableevent("true");
            this.divData.form.divDataBottom.form.tabData.tab2.addChild(obj.name, obj);

            obj = new Div("ccfCD_SEMOK","sta00:3","sta01:3","300","22",null,null,null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab2.form);
            obj.getSetter("CodeFindName").set("DIX_CFSEMOK_DIVERT");
            obj.getSetter("CDTextWidth").set("70");
            obj.set_taborder("12");
            obj.set_url("cmm::cmmCodeFind.xfdl");
            obj.set_text("");
            this.divData.form.divDataBottom.form.tabData.tab2.addChild(obj.name, obj);

            obj = new Edit("edtNO_SEMOKSEQ","339","sta03:3","57","24",null,null,null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab2.form);
            obj.set_taborder("13");
            obj.set_visible("false");
            this.divData.form.divDataBottom.form.tabData.tab2.addChild(obj.name, obj);

            obj = new Button("btnBudget","ccfCD_SEMOK:-88","sta02:10","87","20",null,null,null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab2.form);
            obj.set_taborder("14");
            obj.set_text("예산조회");
            obj.set_visible("true");
            this.divData.form.divDataBottom.form.tabData.tab2.addChild(obj.name, obj);

            obj = new Div("divBudget","stabg00:10","3",null,null,"10","5",null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab2.form);
            obj.set_taborder("15");
            this.divData.form.divDataBottom.form.tabData.tab2.addChild(obj.name, obj);

            obj = new Static("sta05","0","0","80","30",null,null,null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab2.form.divBudget.form);
            obj.set_taborder("0");
            obj.set_text("예산현황");
            obj.set_cssclass("sta_WF_tablelabel");
            obj.set_textAlign("center");
            this.divData.form.divDataBottom.form.tabData.tab2.form.divBudget.addChild(obj.name, obj);

            obj = new Static("sta06","0","sta05:-1","80","30",null,null,null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab2.form.divBudget.form);
            obj.set_taborder("1");
            obj.set_text("년");
            obj.set_cssclass("sta_WF_tablelabel");
            obj.set_textAlign("center");
            this.divData.form.divDataBottom.form.tabData.tab2.form.divBudget.addChild(obj.name, obj);

            obj = new Static("sta07","0","sta06:-1","80","30",null,null,null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab2.form.divBudget.form);
            obj.set_taborder("2");
            obj.set_text("기간");
            obj.set_cssclass("sta_WF_tablelabel");
            obj.set_textAlign("center");
            this.divData.form.divDataBottom.form.tabData.tab2.form.divBudget.addChild(obj.name, obj);

            obj = new Static("sta08","sta06:-1","0","150","30",null,null,null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab2.form.divBudget.form);
            obj.set_taborder("3");
            obj.set_text("예산");
            obj.set_cssclass("sta_WF_tablelabel");
            obj.set_textAlign("center");
            this.divData.form.divDataBottom.form.tabData.tab2.form.divBudget.addChild(obj.name, obj);

            obj = new Static("sta09","sta08:-1","0","150","30",null,null,null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab2.form.divBudget.form);
            obj.set_taborder("4");
            obj.set_text("실적");
            obj.set_cssclass("sta_WF_tablelabel");
            obj.set_textAlign("center");
            this.divData.form.divDataBottom.form.tabData.tab2.form.divBudget.addChild(obj.name, obj);

            obj = new Static("sta10","sta09:-1","0","150","30",null,null,null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab2.form.divBudget.form);
            obj.set_taborder("5");
            obj.set_text("가용예산");
            obj.set_cssclass("sta_WF_tablelabel");
            obj.set_textAlign("center");
            this.divData.form.divDataBottom.form.tabData.tab2.form.divBudget.addChild(obj.name, obj);

            obj = new Static("stabg05","7","93","60","28",null,null,null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab2.form.divBudget.form);
            obj.set_taborder("6");
            obj.set_cssclass("sta_WF_tablebg");
            obj.set_visible("false");
            this.divData.form.divDataBottom.form.tabData.tab2.form.divBudget.addChild(obj.name, obj);

            obj = new Static("stabg06","sta05:-1","sta08:-1","150","30",null,null,null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab2.form.divBudget.form);
            obj.set_taborder("9");
            obj.set_cssclass("sta_WF_tablebg");
            this.divData.form.divDataBottom.form.tabData.tab2.form.divBudget.addChild(obj.name, obj);

            obj = new Static("stabg07","sta05:-1","stabg06:-1","150","30",null,null,null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab2.form.divBudget.form);
            obj.set_taborder("10");
            obj.set_cssclass("sta_WF_tablebg");
            this.divData.form.divDataBottom.form.tabData.tab2.form.divBudget.addChild(obj.name, obj);

            obj = new Static("stabg08","stabg06:-1","sta09:-1","150","30",null,null,null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab2.form.divBudget.form);
            obj.set_taborder("8");
            obj.set_cssclass("sta_WF_tablebg");
            this.divData.form.divDataBottom.form.tabData.tab2.form.divBudget.addChild(obj.name, obj);

            obj = new Static("stabg09","stabg07:-1","stabg08:-1","150","30",null,null,null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab2.form.divBudget.form);
            obj.set_taborder("11");
            obj.set_cssclass("sta_WF_tablebg");
            obj.set_text("");
            this.divData.form.divDataBottom.form.tabData.tab2.form.divBudget.addChild(obj.name, obj);

            obj = new Static("stabg10","stabg08:-1","sta10:-1","150","30",null,null,null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab2.form.divBudget.form);
            obj.set_taborder("7");
            obj.set_cssclass("sta_WF_tablebg");
            this.divData.form.divDataBottom.form.tabData.tab2.form.divBudget.addChild(obj.name, obj);

            obj = new Static("stabg11","stabg09:-1","stabg10:-1","150","30",null,null,null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab2.form.divBudget.form);
            obj.set_taborder("12");
            obj.set_cssclass("sta_WF_tablebg");
            this.divData.form.divDataBottom.form.tabData.tab2.form.divBudget.addChild(obj.name, obj);

            obj = new MaskEdit("txtAM_DEF_YEAR","sta05:4","sta08:4","120","20",null,null,null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab2.form.divBudget.form);
            obj.set_taborder("15");
            obj.set_format("#,##0");
            obj.set_readonly("true");
            obj.set_textAlign("right");
            obj.set_enable("true");
            this.divData.form.divDataBottom.form.tabData.tab2.form.divBudget.addChild(obj.name, obj);

            obj = new MaskEdit("txtAM_EXEC_YEAR","sta08:4","sta09:4","120","20",null,null,null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab2.form.divBudget.form);
            obj.set_taborder("16");
            obj.set_format("#,##0");
            obj.set_readonly("true");
            obj.set_textAlign("right");
            this.divData.form.divDataBottom.form.tabData.tab2.form.divBudget.addChild(obj.name, obj);

            obj = new MaskEdit("txtAM_AVAIL_YEAR","sta09:4","sta10:4","120","20",null,null,null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab2.form.divBudget.form);
            obj.set_taborder("17");
            obj.set_format("#,##0");
            obj.set_readonly("true");
            obj.set_textAlign("right");
            this.divData.form.divDataBottom.form.tabData.tab2.form.divBudget.addChild(obj.name, obj);

            obj = new MaskEdit("txtAM_DEF","sta05:4","stabg06:4","120","20",null,null,null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab2.form.divBudget.form);
            obj.set_taborder("18");
            obj.set_format("#,##0");
            obj.set_readonly("true");
            obj.set_textAlign("right");
            this.divData.form.divDataBottom.form.tabData.tab2.form.divBudget.addChild(obj.name, obj);

            obj = new MaskEdit("txtAM_EXEC","sta08:4","stabg08:4","120","20",null,null,null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab2.form.divBudget.form);
            obj.set_taborder("13");
            obj.set_format("#,##0");
            obj.set_readonly("true");
            obj.set_textAlign("right");
            this.divData.form.divDataBottom.form.tabData.tab2.form.divBudget.addChild(obj.name, obj);

            obj = new MaskEdit("txtAM_AVAIL","sta09:4","stabg10:4","120","20",null,null,null,null,null,null,this.divData.form.divDataBottom.form.tabData.tab2.form.divBudget.form);
            obj.set_taborder("14");
            obj.set_format("#,##0");
            obj.set_readonly("true");
            obj.set_textAlign("right");
            this.divData.form.divDataBottom.form.tabData.tab2.form.divBudget.addChild(obj.name, obj);
            // Layout Functions
            //-- Default Layout : this
            obj = new Layout("default","",this._adjust_width,this._adjust_height,this,function(p){});
            obj.set_stepcount("0");
            this.addLayout(obj.name, obj);
            
            // BindItem Information
            obj = new BindItem("item0","divSearch.form.ccfCD_CORP.form.CDTextBox","value","dsSearch","CD_CORP");
            this.addChild(obj.name, obj);
            obj.bind();

            obj = new BindItem("item1","divSearch.form.ccfACNTUNIT.form.CDTextBox","value","dsSearch","ACNTUNIT");
            this.addChild(obj.name, obj);
            obj.bind();

            obj = new BindItem("item2","divData.form.divDataBottom.form.tabData.tab2.form.ccfCD_DEPTOFFICER.form.CDTextBox","value","dsList","CD_DEPTOFFICER");
            this.addChild(obj.name, obj);
            obj.bind();

            obj = new BindItem("item10","divData.form.divDataBottom.form.tabData.tab2.form.ccfCD_DEPTOFFICER.form.DSTextBox","value","dsList","DS_DEPTOFFICER");
            this.addChild(obj.name, obj);
            obj.bind();

            obj = new BindItem("item4","divData.form.divDataBottom.form.tabData.tab2.form.ccfCD_BIMOK.form.CDTextBox","value","dsList","CD_BIMOK");
            this.addChild(obj.name, obj);
            obj.bind();

            obj = new BindItem("item11","divData.form.divDataBottom.form.tabData.tab2.form.ccfCD_BIMOK.form.DSTextBox","value","dsList","DS_BIMOK");
            this.addChild(obj.name, obj);
            obj.bind();

            obj = new BindItem("item5","divData.form.divDataBottom.form.tabData.tab2.form.ccfCD_SEMOK.form.CDTextBox","value","dsList","CD_SEMOK");
            this.addChild(obj.name, obj);
            obj.bind();

            obj = new BindItem("item13","divData.form.divDataBottom.form.tabData.tab2.form.ccfCD_SEMOK.form.DSTextBox","value","dsList","DS_SEMOK");
            this.addChild(obj.name, obj);
            obj.bind();

            obj = new BindItem("item7","divData.form.divDataBottom.form.tabData.tab2.form.divBudget.form.txtAM_DEF_YEAR","value","dsListBudget","AM_DEF_YEAR");
            this.addChild(obj.name, obj);
            obj.bind();

            obj = new BindItem("item8","divData.form.divDataBottom.form.tabData.tab2.form.divBudget.form.txtAM_EXEC_YEAR","value","dsListBudget","AM_EXEC_YEAR");
            this.addChild(obj.name, obj);
            obj.bind();

            obj = new BindItem("item9","divData.form.divDataBottom.form.tabData.tab2.form.divBudget.form.txtAM_AVAIL_YEAR","value","dsListBudget","AM_AVAIL_YEAR");
            this.addChild(obj.name, obj);
            obj.bind();

            obj = new BindItem("item15","divData.form.divDataBottom.form.tabData.tab2.form.divBudget.form.txtAM_DEF","value","dsListBudget","AM_DEF");
            this.addChild(obj.name, obj);
            obj.bind();

            obj = new BindItem("item16","divData.form.divDataBottom.form.tabData.tab2.form.divBudget.form.txtAM_EXEC","value","dsListBudget","AM_EXEC");
            this.addChild(obj.name, obj);
            obj.bind();

            obj = new BindItem("item17","divData.form.divDataBottom.form.tabData.tab2.form.divBudget.form.txtAM_AVAIL","value","dsListBudget","AM_AVAIL");
            this.addChild(obj.name, obj);
            obj.bind();

            obj = new BindItem("item12","divData.form.divDataBottom.form.tabData.tab2.form.edtNO_SEMOKSEQ","value","dsList","NO_REF2");
            this.addChild(obj.name, obj);
            obj.bind();
            
            // TriggerItem Information

        };
        
        this.loadPreloadList = function()
        {
            this._addPreloadList("fdl","cmm::cmmCodeFind.xfdl");
        };
        
        // User Script
        this.registerScript("DHA_ISSUESLIP.xfdl", function() {
        this.objApp = this.gfnGetApplication();

        this.FileManager = {};

        this.gCD_ACNT_VAT_SALE = "21100501";	// 부가세예수금_예수부가가치세
        this.gCD_VATACCOUNT = "11110301";	// 부가세대급금_부가세계정코드

        this.gCOLSIZE_AM_LOCAL_DR = 0;
        this.gCOLSIZE_AM_LOCAL_CR = 0;
        this.gCOLSIZE_AM_DR = 0;
        this.gCOLSIZE_AM_CR = 0;
        this.gCOLSIZE_AM_USD_DR = 0;
        this.gCOLSIZE_AM_USD_CR = 0;
        this.gCOLSIZE_AM_EUR_DR = 0;
        this.gCOLSIZE_AM_EUR_CR = 0;

        this.gCOLSIZE_RT_LOCAL_EXCH = 0;
        this.gCOLSIZE_RT_KRW_EXCH = 0;
        this.gCOLSIZE_RT_USD_EXCH = 0;
        this.gCOLSIZE_RT_EUR_EXCH = 0;
        this.form_onload = function(obj,e)
        {
        	// -- 필수 -------------------//
        	this.gfnFormOnLoad(this);
        	this.gfnFormInfo(this);
        	// ---------------------------//
        	this.V_IUD_FLAG 	= "I";	//등록/수정/삭제 전역변수
        	this.V_CD_TRADE 	= "";	//전표번호 전역변수
        	this.V_CD_AUTOSLIP 	= "";	//자동전표번호
        	this.V_YN_DF 		= "";	//자금 입금내역 전표발행 전역변수
        	this.V_NO_INCONFIRM = "";	//자금 입금확인번호 전역 변수

        	this.fnSetButton();
        	this.fnSetExtendButton();
        	this.fnSetVariable();
        	this.fnSetEvent();
        	this.fnSetParameter();
        	this.fnSetCombo();

        	this.fnSetColSizeVariable();

        	//그리드 헤더 초기화
        	this.fnGridHeaderReset();

        	//trace("@@@ 자금 파라미터 YN_DF :: "+this.getOwnerFrame().YN_DF);
        	//trace("@@@ 전표번호 파라미터 CD_TRADE :: "+this.getOwnerFrame().CD_TRADE);

        	if (this.gfnIsNull(this.getOwnerFrame().CD_TRADE)) {
        		this.ccfCD_CORP.form.DSTextBox.set_value(this.AuthClient.DS_CORP);
        		this.ccfCD_CORP.form.CDTextBox.set_value(this.AuthClient.CD_CORP);
        	}

        // 	if (nexacro.toNumber(this.FormInfo.GR_SEARCH) > 1) {
        // 		this.ccfCD_CORP.form.set_readonly(true);
        // 	}

        // 	if (nexacro.toNumber(this.FormInfo.GR_SEARCH) >= 7) {
        // 		this.ccfACNTUNIT.form.set_readonly(true);
        // 	}

        	// 지점(로컬화, 원화, 환율 행 숨김)
        	//this.divSearch.form.chkYN_COLVIEW.set_value(true);
        	//this.fnSetColSize(false);

        	//항번 색상 처리
        	var colNO_VIEW = this.dxGrid.getBindCellIndex("body", "NO_VIEW");
        	this.dxGrid.setCellProperty("body", colNO_VIEW, "background", "darkgreen");
        	this.dxGrid.setCellProperty("body", colNO_VIEW, "color", "yellow");

        	//입금내역 전표발행(자금)을 통해 들어온경우
        	if(this.getOwnerFrame().YN_DF == "Y"){

        		this.fnDFSelect();

        		//this.fnDFSetting();

        	} else {

        		//다른화면에서 들어왔을 경우
        		if(!this.gfnIsNull(this.getOwnerFrame().CD_TRADE)) {
        			this.V_IUD_FLAG = this.getOwnerFrame().IUD_FLAG;
        			this.V_CD_TRADE = nexacro.replaceAll(this.gfnNvl(this.gfnAllTrim(this.getOwnerFrame().CD_TRADE)),"-","");

        			//trace("@@@ 파라미터 V_IUD_FLAG :: "+this.V_IUD_FLAG);
        			//trace("@@@ 파라미터 V_CD_TRADE :: "+this.V_CD_TRADE);

        			this.txtCD_TRADE.set_value(this.V_CD_TRADE);

        			this.FormBtns.Select.set_enable(true);

        			//this.fnSelect();
        			this.FormBtns.Select.click();

        			this.gfnGridAdd(this.dxGridSub, null, false);
        		}

        		//전표구분 대체전표로 임시 처리
        		this.ccboTY_SLIP.set_value("01");
        		//발행일자 현재일자 셋팅
        		this.calDT_ACCOUNT.set_value(this.gfnGetDate());
        	}

        	//trace("발행부서->" + this.AuthClient.CD_DEPT);
        	this.dsSearch.set_enableevent(false);
        	this.ccfACNTUNIT.form.CDTextBox.set_value(this.AuthClient.CD_DEPT);
        	this.ccfACNTUNIT.form.DSTextBox.set_value(this.AuthClient.DS_DEPT);
        	this.dsSearch.set_enableevent(true);

        	//버튼처리
        	//this.fnSetButtonEnable(this.V_IUD_FLAG);
        	this.fnUpdateStatusExtendButton();

        	// 매입세액불공제 선급부가세 유무(Y일때체크)
        	trace(this.gfnGetConfig("DH" , "YN_PROOF_CHECK"));
        	trace(this.gfnGetConfig("DH" , "CD_VATACCOUNT"));

        	this.gCD_ACNT_VAT_SALE = this.gfnNvl(this.gfnGetConfig("DH" , "CD_ACNT_VAT_SALE"), "21100501");	// 2106050 부가세예수금(매출부가가치세)_예수부가가치세 매출부가가치세
        	this.gCD_VATACCOUNT = this.gfnNvl(this.gfnGetConfig("DH" , "CD_VATACCOUNT"), "11110301");		// 1108150 부가세대급금_부가세계정코드 매입부가가치세

        };

        /************************************************************************
         * 버튼 설정 : 화면(Tab) 전환시 마다 호출
         * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
         ************************************************************************/
        this.fnSetButton = function() {
        	// Select, Add, Del, Save, Excel, Print
        	// SubSelect, SubAdd, SubDel, SuubSave, SubExcel
        	this.FormBtns.Add.set_enable(true);
        	this.FormBtns.Select.set_enable(false);
        }

        /************************************************************************
         * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
         ************************************************************************/
        this.fnSetExtendButton = function() {
        	this.btnTaxView     = this.gfnFormButtonAdd("btnTaxView"   	 , "fnTaxView");		//세금계산서 보기
        	this.btnRequestList = this.gfnFormButtonAdd("btnRequestList" , "fnRequestList");	//출금요청
        	//this.btnApprove     = this.gfnFormButtonAdd("btnApprove"     , "fnApprove");		//전표결제
        	//this.btnDocument   	= this.gfnFormButtonAdd("btnDocument"	 , "fnCheckAuthApproval"); 	 	// 결재문서 fnDocument	(사용안함)
        	//this.btnSchApprove  = this.gfnFormButtonAdd("btnSchApprove"  , "fnSchApprove");		//결제조회
        	this.btnSlipCopy    = this.gfnFormButtonAdd("btnSlipCopy"    , "fnSlipCopy");		//전표복사
        	this.btnSlipCopy2    = this.gfnFormButtonAdd("btnSlipCopy2"    , "fnSlipCopyNew");		//전표복사2

        	this.btnDFPopup     = this.gfnFormButtonAdd("btnDFPopup"     , "fnDFPopup");		//자금집행현황
        	this.btnSlipNew     = this.gfnFormButtonAdd("btnSlipNew"     , "fnSlipNew");  		//새전표
        	this.btnSlipDelete  = this.gfnFormButtonAdd("btnSlipDelete"  , "fnSlipDelete");		//전표삭제
        	this.btnSlipBanje   = this.gfnFormButtonAdd("btnBanje"       , "fnSlipBanje");		//반제전표
        	this.btnBudgetDivert   = this.gfnFormButtonAdd("btnBudgetDivert", "fnBudgetDivert");//예산
        	this.btnSlipModify	= this.gfnFormButtonAdd("btnSlipModify"   , "fnSlipModify");	// 전표순번조정 및 적요수정
        	this.btnAmountWorkComplet= this.gfnFormButtonAdd("btnAmountWorkComplet"   , "fnAmountWorkComplet");	// 기성고조서

         	this.btnAprv     = this.gfnFormButtonAdd("btnAprv"    , "fnAprv");			// 결재상신 버튼
         	this.btnDocQ     = this.gfnFormButtonAdd("btnDocQ"    , "fnAprvDocQ");		// 결재문서조회 버튼
         	this.btnInit     = this.gfnFormButtonAdd("btnInit"    , "fnAprvInit");		// 결재상태초기화 버튼

        	this.btnSlipDelete.set_enable(false);
        	//this.btnSchApprove.set_enable(false);
        	//this.btnApprove.set_enable(false);
        };

        this.fnUpdateStatusExtendButton = function() {
        	var nrow = this.dsList.rowposition;

        	var cdTrade = nexacro.replaceAll(this.gfnTrim(this.gfnNvl(this.txtCD_TRADE.value,"")), "-","");
        	var bEnable = (!this.gfnIsNull(cdTrade)) ? true : false;

        	this.btnAprv.set_enable(bEnable && this.dsList.getColumn(nrow, "BTN_APRV") == "Y");
        	this.btnDocQ.set_enable(bEnable && this.dsList.getColumn(nrow, "BTN_DOC_Q") == "Y");
        	this.btnInit.set_enable(bEnable && this.dsList.getColumn(nrow, "BTN_INIT") == "Y");
        }

        /************************************************************************
         * 변수 선언
         ************************************************************************/
        this.fnSetVariable = function() {
        	this.ccfCD_CORP = this.divSearch.form.ccfCD_CORP;
        	this.calDT_ACCOUNT = this.divSearch.form.calDT_ACCOUNT;
        	this.ccboTY_SLIP = this.divSearch.form.ccboTY_SLIP;
        	this.txtCD_TRADE = this.divSearch.form.txtCD_TRADE;
        	this.ccfACNTUNIT = this.divSearch.form.ccfACNTUNIT;
        	this.txtDT_UPDATE = this.divSearch.form.txtDT_UPDATE;
        	this.txtDS_HNAME = this.divSearch.form.txtDS_HNAME;
        	this.ccboCD_APP = this.divSearch.form.ccboCD_APP;
        	this.txtDS_APPR = this.divSearch.form.txtDS_APPR;
        	this.txtDS_AUTOSLIP = this.divSearch.form.txtDS_AUTOSLIP;
        	this.txtDS_APRV = this.divSearch.form.txtDS_APRV;

        	this.mskAddCnt = this.divData.form.divDataTop.form.mskAddCnt;
        	this.btnAddRow = this.divData.form.divDataTop.form.btnAddRow;

        	this.dxGrid = this.divData.form.divDataTop.form.objGrid;

        	this.tabData = this.divData.form.divDataBottom.form.tabData;

        	this.tabData.set_tabindex(0);

        	// tab 1 관리항목
        	var tab1form = this.divData.form.divDataBottom.form.tabData.tab1.form;
        	this.txtDT_MAGAM = tab1form.divTotal.form.txtDT_MAGAM;
        	this.mskSUM_CRDR = tab1form.divTotal.form.mskSUM_CRDR;
        	this.mskSUM_LOCAL_CRDR = tab1form.divTotal.form.mskSUM_LOCAL_CRDR;

        	this.mskAM_DR = tab1form.divTotal.form.mskAM_DR;
        	this.mskAM_CR = tab1form.divTotal.form.mskAM_CR;
        	this.mskCOUNT = tab1form.divTotal.form.mskCOUNT;
        	//this.dxGridSub = this.divData.form.divDataBottom.form.objGridSub;
        	this.dxGridSub = tab1form.objGridSub;

        	// tab 2 예산
        	var tab2form = this.divData.form.divDataBottom.form.tabData.tab2.form;
         	this.ccfCD_DEPTOFFICER = tab2form.ccfCD_DEPTOFFICER;
         	this.ccfCD_BIMOK = tab2form.ccfCD_BIMOK;
         	this.ccfCD_SEMOK =  tab2form.ccfCD_SEMOK;
        	this.staMM_PERIOD = this.divData.form.divDataBottom.form.tabData.tab2.form.divBudget.form.sta07;

        	this.vFileCnt = 0;

        	this.FileManager = {};
        	this.FileManager.CD_GUBUN = "DH03";
        	//this.FileManager.CD_DIR = [cdDir];
        	this.FileManager.IS_READONLY = false;
        };

        this.fnSetColSizeVariable = function() {
        	var colIdxLcDr = this.dxGrid.getBindCellIndex("body","AM_LOCAL_DR");	// 로컬화
        	var colIdxLcCr = this.dxGrid.getBindCellIndex("body","AM_LOCAL_CR");
        	var colIdxDr = this.dxGrid.getBindCellIndex("body","AM_DR");			// 원화
        	var colIdxCr = this.dxGrid.getBindCellIndex("body","AM_CR");
        	var colIdxUsdDr = this.dxGrid.getBindCellIndex("body","AM_USD_DR");		// 미화
        	var colIdxUsdCr = this.dxGrid.getBindCellIndex("body","AM_USD_CR");
        	var colIdxEurDr = this.dxGrid.getBindCellIndex("body","AM_EUR_DR");		// 유로화
        	var colIdxEurCr = this.dxGrid.getBindCellIndex("body","AM_EUR_CR");

        	var colIdxLcExch = this.dxGrid.getBindCellIndex("body","RT_LOCAL_EXCH");	// 로컬환율
        	var colIdxKrwExch = this.dxGrid.getBindCellIndex("body","RT_KRW_EXCH");		// 원화환율
        	var colIdxUsdExch = this.dxGrid.getBindCellIndex("body","RT_USD_EXCH");		// 미화환율
        	var colIdxEurExch = this.dxGrid.getBindCellIndex("body","RT_EUR_EXCH");		// 유로환율


        	this.gCOLSIZE_AM_LOCAL_DR = this.dxGrid.getFormatColSize( colIdxLcDr );
        	this.gCOLSIZE_AM_LOCAL_CR = this.dxGrid.getFormatColSize( colIdxLcCr );
        	this.gCOLSIZE_AM_DR = this.dxGrid.getFormatColSize( colIdxDr );
        	this.gCOLSIZE_AM_CR = this.dxGrid.getFormatColSize( colIdxCr );
        	this.gCOLSIZE_AM_USD_DR = this.dxGrid.getFormatColSize( colIdxUsdDr );
        	this.gCOLSIZE_AM_USD_CR = this.dxGrid.getFormatColSize( colIdxUsdCr );
        	this.gCOLSIZE_AM_EUR_DR = this.dxGrid.getFormatColSize( colIdxEurDr );
        	this.gCOLSIZE_AM_EUR_CR = this.dxGrid.getFormatColSize( colIdxEurCr );

        	this.gCOLSIZE_RT_LOCAL_EXCH = this.dxGrid.getFormatColSize( colIdxLcExch );
        	this.gCOLSIZE_RT_KRW_EXCH = this.dxGrid.getFormatColSize( colIdxKrwExch );
        	this.gCOLSIZE_RT_USD_EXCH = this.dxGrid.getFormatColSize( colIdxUsdExch );
        	this.gCOLSIZE_RT_EUR_EXCH = this.dxGrid.getFormatColSize( colIdxEurExch );

        }

        /************************************************************************
         * 이벤트 설정
         ************************************************************************/
        this.fnSetEvent = function() {

        	this.ccfCD_CORP.CodeFindName = "DHX_CFCORP";
        	this.ccfCD_CORP.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
        	this.ccfCD_CORP.AfterCDTextChanged = "fnAfterCDTextChanged";

         	this.ccfACNTUNIT.CodeFindName = "DHX_CFACNTUNIT";
         	this.ccfACNTUNIT.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";

        	// 그리드 초기화
        	this.gfnGridInit(this.dxGrid, this.dsList, "DH", "DHA_ISSUESLIP");
        	this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforeUserDataSetParam";
        	this.dxGrid.AfterCDTextChanged     = "fnGrid_AfterCDTextChanged";
        	this.dxGrid.addEventHandler("onselectchanged", this.fnGrid_RowCellChanged, this);
        	this.dxGrid.addEventHandler("oncelldblclick", this.fnGrid_CellDblclick, this);
        	this.dxGrid.addEventHandler("onkeydown", this.fnGrid_onkeydown, this);
        	this.dxGrid.EnterCell = "fnGrid_EnterCell";

        	this.dsList.addEventHandler("oncolumnchanged", this.dsList_ColumnChanged, this);
        	this.dsList.addEventHandler("onrowposchanged", this.dsList_Rowposchanged, this);

        	// BUTTON, BUTTON-IN 처리
        	this.dxGrid.ExpandUp = "fnGrid_ExpandUp";

        	this.gfnGridInit(this.dxGridSub, this.dsListSub, "DH", "DHA_ISSUESLIP1");

        	this.dxGridSub.BeforeUserDataSetParam = "fnGridSub_BeforeUserDataSetParam";
        	this.dxGridSub.AfterCDTextChanged     = "fnGridSub_AfterCDTextChanged";
        	this.dsListSub.addEventHandler("oncolumnchanged", this.dsListSub_ColumnChanged, this);

        	// 예산텝
        	this.ccfCD_DEPTOFFICER.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
        	this.ccfCD_DEPTOFFICER.AfterCDTextChanged = "fnAfterCDTextChanged";
        	this.ccfCD_BIMOK.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";	//DHX_CFBIMOK_DIVERT
        	this.ccfCD_SEMOK.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";

        	// 검색조건 변경 이벤트
        	this.dsSearch.addEventHandler("onvaluechanged", this.dsSearch_Valuechanged, this);

        	// 헤더 클릭 이벤트 삭제(소팅 막기 위해 처리)
        	this.dxGrid.removeEventHandlerLookup("onheadclick", "gfnGrid_onheadclick", this);

        	var colYN_VAT = this.dxGrid.getBindCellIndex("body", "YN_VAT");

        	//tooltiptext
        	this.dxGrid.setCellProperty("body",colYN_VAT,"tooltiptext","bind:DS_TOOLTIP");

        	// 증빙자료 부가세 없을경우 콤보박스 비활성 처리
        	//this.dxGrid.setCellProperty("body", colYN_VAT, "edittype", "expr:!dataset.parent.gfnIsNull(YN_DF) || dataset.parent.gfnIsNull(FLAG_V) || FLAG_V =='D' || !dataset.parent.fnGridReadOnly(rowidx) ? 'none':'combo'");
        	this.dxGrid.setCellProperty("body", colYN_VAT, "edittype", "none");

        	//this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "DS_VENDOR"), "edittype", "none");
        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "DS_DEPT"), "edittype", "none");
        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "DS_ACCOUNT"), "edittype", "none");

        	// 반제 전표 체크CD_SLIP_MI (반제전표 코드가 있을경우 계정코드 수정불가 by cej)

        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "ISSUE_ID"), "expandshow", "expr:!dataset.parent.fnGridReadOnly(rowidx) ?'hide':'show'");		//전자세금계산서(돋보기버튼)
        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "ISSUE_ID"), "edittype", "expr:!dataset.parent.fnGridReadOnly(rowidx) ? 'none':'text'");		//전자세금계산서
        	//this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "DT_ACCOUNT"), "edittype", "expr:!dataset.parent.fnGridReadOnly(rowidx) || !dataset.parent.gfnIsNull(ISSUE_ID) ? 'none':'date'");		//회계일자
        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "DT_ACCOUNT"), "edittype", "expr:!dataset.parent.fnGridReadOnly(rowidx) ? 'none':'date'");		//회계일자
        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "CD_ACCOUNT"), "expandshow", "expr:!dataset.parent.fnGridReadOnly(rowidx) || !dataset.parent.gfnIsNull(CD_SLIP_MI)?'hide':'show'");	//계정코드(돋보기버튼)
        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "CD_ACCOUNT"), "edittype", "expr:!dataset.parent.fnGridReadOnly(rowidx) || !dataset.parent.gfnIsNull(CD_SLIP_MI)? 'none':'text'");		//계정코드
        	//this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "DS_ACCOUNT"), "edittype", "expr:!dataset.parent.fnGridReadOnly(rowidx) ? 'none':'text'");		//계정명칭
        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "DS_REM"), "edittype", "expr:!dataset.parent.fnGridReadOnly(rowidx) ? 'none':'text'");			//적요

        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "CD_LOCAL_CURR"), "edittype", "none");

        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "CD_EXEC_CURR"), "expandshow", "expr:!dataset.parent.fnGridReadOnly(rowidx) || !dataset.parent.gfnIsNull(CD_SLIP_MI)?'hide':'show'");		//통화코드(돋보기버튼)
        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "CD_EXEC_CURR"), "edittype", "expr:!dataset.parent.fnGridReadOnly(rowidx) || !dataset.parent.gfnIsNull(CD_SLIP_MI)? 'none':'text'");		//통화코드

        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "AM_EXEC_DR"), "edittype", "expr:!dataset.parent.fnGridReadOnly(rowidx) || !dataset.parent.gfnIsNull(ISSUE_ID) || !dataset.parent.gfnIsNull(CD_SLIP_MI)? 'none':'mask'");		// 차변_집행화
        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "AM_EXEC_CR"), "edittype", "expr:!dataset.parent.fnGridReadOnly(rowidx) || !dataset.parent.gfnIsNull(ISSUE_ID) || !dataset.parent.gfnIsNull(CD_SLIP_MI)? 'none':'mask'");		// 대변_집행화

        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "RT_LOCAL_EXCH"), "edittype", "none");
        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "RT_KRW_EXCH"), "edittype", "none");
        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "RT_USD_EXCH"), "edittype", "none");
        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "RT_EUR_EXCH"), "edittype", "none");

        	//this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "AM_LOCAL_DR"), "edittype", "none");
        	//this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "AM_USD_DR"), "edittype", "none");
        	//this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "AM_EUR_DR"), "edittype", "none");
        	//this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "AM_DR"), "edittype", "none");	//6.20 원화 KEYIN  가능으로 수정 KDY

        	//this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "AM_LOCAL_CR"), "edittype", "none");
        	//this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "AM_USD_CR"), "edittype", "none");
        	//this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "AM_EUR_CR"), "edittype", "none");
        	//this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "AM_CR"), "edittype", "none");	 //6.20 원화 KEYIN 가능으로 수정 KDY



        // 	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "AM_DR"), "edittype", "expr:!dataset.parent.fnGridReadOnly(rowidx) || !dataset.parent.gfnIsNull(ISSUE_ID) || !dataset.parent.gfnIsNull(CD_SLIP_MI)? 'none':'mask'");			//차변
        // 	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "AM_CR"), "edittype", "expr:!dataset.parent.fnGridReadOnly(rowidx) || !dataset.parent.gfnIsNull(ISSUE_ID) || !dataset.parent.gfnIsNull(CD_SLIP_MI)? 'none':'mask'");			//대변

        	//this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "CD_VENDOR"), "expandshow", "expr:!dataset.parent.fnGridReadOnly(rowidx) || !dataset.parent.gfnIsNull(ISSUE_ID) || !dataset.parent.gfnIsNull(CD_SLIP_MI)?'hide':'show'");		//거래처코드(돋보기버튼)
        	//this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "CD_VENDOR"), "edittype", "expr:!dataset.parent.fnGridReadOnly(rowidx) || !dataset.parent.gfnIsNull(ISSUE_ID) || !dataset.parent.gfnIsNull(CD_SLIP_MI)? 'none':'text'");		//거래처코드

        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "DS_VENDOR"), "expandshow", "expr:!dataset.parent.fnGridReadOnly(rowidx) || !dataset.parent.gfnIsNull(ISSUE_ID) || !dataset.parent.gfnIsNull(CD_SLIP_MI)?'hide':'show'");		//거래처코드(돋보기버튼)
        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "DS_VENDOR"), "edittype", "expr:!dataset.parent.fnGridReadOnly(rowidx) || !dataset.parent.gfnIsNull(ISSUE_ID) || !dataset.parent.gfnIsNull(CD_SLIP_MI)? 'none':'text'");		//거래처코드

        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "CD_DEPT_BE"), "expandshow", "expr:!dataset.parent.fnGridReadOnly(rowidx) || !dataset.parent.gfnIsNull(CD_SLIP_MI) ?'hide':'show'");	//귀속부서(돋보기버튼)
        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "CD_DEPT_BE"), "edittype", "expr:!dataset.parent.fnGridReadOnly(rowidx) || !dataset.parent.gfnIsNull(CD_SLIP_MI) ? 'none':'text'");	//귀속부서
        };

        this.fnGridReadOnly = function (currow)
        {
        	// YN_APPR = 'Y' 수정불가 OR CD_AUTOSLP <> '' 수정불가

        	// 자동전표
        	if(!this.gfnIsNull(this.dsList.getColumn(currow, "CD_AUTOSLIP")) ){
        	   if (!(this.dsList.getColumn(currow, "CD_AUTOSLIP") =="DHA0017" && this.UserInfo.YN_SLIP_OK == "Y")) //취소전표는 전표승인자만 수정가능
        	   {
        	   	 return false;
        	   }
        	}
        	// 승인전표
        	if(this.dsList.getColumn(currow, "YN_APPR") == "Y"){
        		return false;
        	}

        	//01	상신  02	결재중 03	결재완료
        	// 결재상태 결재중, 결재완료
        // 	if(this.dsList.getColumn(currow, "CD_APP") == "01" || this.dsList.getColumn(currow, "CD_APP") == "02" || this.dsList.getColumn(currow, "CD_APP") == "03"){
        // 		return false;
        // 	}

        	// 전자결재상태 ST_APRV 공통코드 DZ - DZ_APRV
        	// 1임시저장	2결재상신	3결재중	4결재완료	5반려	6상신취소	7작성취소
        	if(this.dsList.getColumn(currow, "ST_APRV") == "1" || this.dsList.getColumn(currow, "ST_APRV") == "2" || this.dsList.getColumn(currow, "ST_APRV") == "3" || this.dsList.getColumn(currow, "ST_APRV") == "4"){
         		return false;
         	}

        	// 신규가 아닐경우
        	/*
        	if(this.dsList.getColumn(currow, this.ucFlag) != "I"){
        		if(this.dsList.getColumn(currow, "CD_ACCOUNT") == CD_VATACCOUNT || this.dsList.getColumn(currow, "CD_ACCOUNT") == CD_ACNT_VAT_SALE){	//선급부가세/선수부가세일경우
        			var amVat = nexacro.toNumber(this.dsList.getColumn(currow, "AM_DR"),0) + nexacro.toNumber(this.dsList.getColumn(currow, "AM_CR"),0);
        			if(amVat > 0 || amVat < 0){
        				return false;
        			}
        		}
        	}
        	*/
        	// 전표구분이 대체전표가 아닐경우
        	if(this.ccboTY_SLIP.value != "02"){
        		if(this.dsList.getColumn(currow, "CD_ACCOUNT") == this.gCD_VATACCOUNT || this.dsList.getColumn(currow, "CD_ACCOUNT") == this.gCD_ACNT_VAT_SALE){	//선급부가세/선수부가세일경우
        			var amVat = nexacro.toNumber(this.dsList.getColumn(currow, "AM_DR"),0) + nexacro.toNumber(this.dsList.getColumn(currow, "AM_CR"),0);
        			if(amVat > 0 || amVat < 0){
        				return false;
        			}
        		}
        	}
        	return true;
        };

        /************************************************************************
         * 파라미터 설정
         ************************************************************************/
        this.fnSetParameter = function() {
        	this.dsSelect = new Dataset();
        	this.dsSelect.addColumn("CD_TRADE", "string");

        	this.dsSelectSub = new Dataset();
        	this.dsSelectSub.addColumn("CD_TRADE", "string");

        	this.dsSaveDF = new Dataset();
        	this.dsSaveDF.addColumn("NO_INCONFIRM", "string");
        	this.dsSaveDF.addColumn("NO_SLIP"	  , "string");
        	this.dsSaveDF.addColumn("ID_USER"	  , "string");

        	this.dsSelectNewCode = new Dataset();
        	this.dsSelectNewCode.addColumn("IN_PARAM", "string");
        	this.dsSelectNewCode.addColumn("IN_DT_ACCOUNT", "string");

        	// 등록 데이터셋
         	this.dsSave = new Dataset();
        	this.dsSave.addColumn("S_FLAG", "string");
        	this.dsSave.addColumn("ISSUE_ID", "string");
        	this.dsSave.addColumn("CD_TRADE", "string");
        	this.dsSave.addColumn("CUR_SLIP_NO", "string");
        	this.dsSave.addColumn("NO_VIEW", "BIGDECIMAL");
        	this.dsSave.addColumn("DT_ACCOUNT", "string");
        	this.dsSave.addColumn("CD_DEPT_BH", "string");
        	this.dsSave.addColumn("CD_DEPT_BE", "string");
        	this.dsSave.addColumn("CD_ACCOUNT", "string");
        	this.dsSave.addColumn("SEMOK_CD", "string");
        	this.dsSave.addColumn("SEMOK_DS", "string");
        	this.dsSave.addColumn("TY_CRDR", "string");
        	this.dsSave.addColumn("CD_EXEC_CURR", "string");		// 집행화 화폐단위
        	this.dsSave.addColumn("RT_LOCAL_EXCH", "BIGDECIMAL");	// 로컬화 환율
        	this.dsSave.addColumn("RT_KRW_EXCH", "BIGDECIMAL");		// 원화 환율
        	this.dsSave.addColumn("RT_USD_EXCH", "BIGDECIMAL");		// 미화 환율
        	this.dsSave.addColumn("RT_EUR_EXCH", "BIGDECIMAL");		// 유로화 환율

        	this.dsSave.addColumn("AM_EXEC", "BIGDECIMAL");			// 집행화 금액
        	this.dsSave.addColumn("AM_LOCAL", "BIGDECIMAL");		// 로컬화 금액
        	this.dsSave.addColumn("AM_USD", "BIGDECIMAL");			// 미화 금액
        	this.dsSave.addColumn("AM_EUR", "BIGDECIMAL");			// 유로화 금액

        	this.dsSave.addColumn("AM_ACCOUNT", "BIGDECIMAL");
        	this.dsSave.addColumn("TY_VENDOR", "string");
        	this.dsSave.addColumn("DS_REM", "string");
        	this.dsSave.addColumn("CD_VENDOR", "string");
        	this.dsSave.addColumn("DS_VENDOR", "string");
        	this.dsSave.addColumn("YN_LASTSLIP", "string");
        	this.dsSave.addColumn("YN_APPR", "string");
        	this.dsSave.addColumn("CD_SLIP_MI", "string");
        	this.dsSave.addColumn("YN_COPY", "string");
        	this.dsSave.addColumn("CD_CORP", "string");
        	this.dsSave.addColumn("YN_VAT", "string");
        	this.dsSave.addColumn("FLAG_V", "string");
        	this.dsSave.addColumn("CD_VATDEPT_ACNT", "string");
        	this.dsSave.addColumn("TY_SALEBUY", "string");
        	this.dsSave.addColumn("CD_PROOF", "string");		//증빙코드
        	this.dsSave.addColumn("TY_VATBGJE", "string");		//불공제코드
        	this.dsSave.addColumn("CD_VATACCOUNT", "string");
        	this.dsSave.addColumn("TY_VATVENDOR", "string");
        	this.dsSave.addColumn("CD_VATVENDOR", "string");
        	this.dsSave.addColumn("DS_VATVENDOR", "string");
        	this.dsSave.addColumn("AM_SUPPLY", "BIGDECIMAL");
        	this.dsSave.addColumn("AM_VAT", "BIGDECIMAL");
        	this.dsSave.addColumn("AM_SERVICE", "BIGDECIMAL");
        	this.dsSave.addColumn("NO_CREDIT", "string");
        	this.dsSave.addColumn("DS_VATREM", "string");
        	this.dsSave.addColumn("CK_OMIT", "string");
        	this.dsSave.addColumn("DT_PROOF", "string");
        	this.dsSave.addColumn("TY_ISSUE", "string");

        	this.dsSave.addColumn("TY_ETC1", "string");
        	this.dsSave.addColumn("CD_ETC1", "string");
        	this.dsSave.addColumn("DS_ETC1", "string");
        	this.dsSave.addColumn("TY_ETC2", "string");
        	this.dsSave.addColumn("CD_ETC2", "string");
        	this.dsSave.addColumn("DS_ETC2", "string");
        	this.dsSave.addColumn("TY_REF", "string");
        	this.dsSave.addColumn("NO_REF", "string");
        	this.dsSave.addColumn("DS_REF", "string");
        	this.dsSave.addColumn("TY_REF2", "string");
        	this.dsSave.addColumn("NO_REF2", "string");
        	this.dsSave.addColumn("DS_REF2", "string");
        	this.dsSave.addColumn("AM_REF1", "BIGDECIMAL");
        	this.dsSave.addColumn("AM_REF2", "BIGDECIMAL");
        	this.dsSave.addColumn("DT_REF1", "string");
        	this.dsSave.addColumn("DT_REF2", "string");
        	this.dsSave.addColumn("RT_REF1", "BIGDECIMAL");
        	this.dsSave.addColumn("RT_REF2", "BIGDECIMAL");
        	this.dsSave.addColumn("CD_GONGJONG", "string");
        	this.dsSave.addColumn("DS_GONGJONG", "string");
        	this.dsSave.addColumn("ID_INSERT", "string");
        	this.dsSave.addColumn("TY_CLOSING", "string");
        // 	this.dsSave.addColumn("YN_DEPT", "string");
        // 	this.dsSave.addColumn("CD_DEPTOFFICER", "string");
        // 	this.dsSave.addColumn("CD_PROJECT", "string");
        	this.dsSave.addColumn("CD_BIMOK", "string");
        	this.dsSave.addColumn("CD_SEMOK", "string");
        	this.dsSave.addColumn("YN_BUDGET", "string");
        	this.dsSave.addColumn("YN_BUDGET_CONTROL", "string");
        	this.dsSave.addColumn("YN_BUDGET_CTRL_ACNT", "string");

        	//전표삭제용 데이터셋
        	this.dsSlipDelete = new Dataset();
        	this.dsSlipDelete.addColumn("CD_TRADE", "string");
        	this.dsSlipDelete.addColumn("ID_TRANS", "string");

        	//파일폴더명변경용 데이터셋
        	this.dsRnameList = new Dataset();
        	this.dsRnameList.addColumn("PATH_ORG", "string");
        	this.dsRnameList.addColumn("PATH_NEW", "string");
        	this.dsRnameList.addColumn("SAVE_YN", "string");

        	this.dsFileUpdate = new Dataset();
        	this.dsFileUpdate.addColumn("CD_REF1", "string");
        	this.dsFileUpdate.addColumn("NEW_CD_REF1", "string");

        	this.dsFileSave = new Dataset();	//파일삭제용 데이터셋
        	this.dsFileSave.addColumn("TY_SAVE", "string");
        	this.dsFileSave.addColumn("CD_GUBUN", "string");
        	this.dsFileSave.addColumn("NO_SEQ", "string");
        	this.dsFileSave.addColumn("CD_REF1", "string");

        	this.dsDeleteList = new Dataset();	//파일삭제용 데이터셋
        	this.dsDeleteList.addColumn("filepath", "string");
        	this.dsDeleteList.addColumn("filename", "string");

        	//세금계산서 조회용 데이터셋
        	this.dsSelectTax = new Dataset();
        	this.dsSelectTax.addColumn("ISSUE_ID"  , "string");
        	this.dsSelectTax.addColumn("TY_SALEBUY", "string");

        	this.dsSelectDtReq = new Dataset();
        	this.dsSelectDtReq.addColumn("CD_TRADE", "string");

        	this.dsReportParam = new Dataset();
        	this.dsReportParam.addColumn("DS_CORP", "string");
        	this.dsReportParam.addColumn("DT_ACCOUNT", "string");
        	this.dsReportParam.addColumn("CD_TRADE", "string");
        	this.dsReportParam.addColumn("DS_DEPT_BE", "string");
        	this.dsReportParam.addColumn("DS_DEPT_BH", "string");
        	this.dsReportParam.addColumn("DS_USER", "string");
        	this.dsReportParam.addColumn("AM_DR_SUM", "BIGDECIMAL");
        	this.dsReportParam.addColumn("AM_CR_SUM", "BIGDECIMAL");

        	//입금내역전표발행용 데이터셋
        	this.dsDFSelect = new Dataset();
        	this.dsDFSelect.addColumn("CD_CORP", "string");
        	this.dsDFSelect.addColumn("NO_INCONFIRM", "string");

        	//예산조회
        	this.dsSelectBudget = new Dataset();
        	this.dsSelectBudget.addColumn("YM_ACCOUNT", "string");
        	this.dsSelectBudget.addColumn("DEPTOFFICER", "string");
        	this.dsSelectBudget.addColumn("BIMOK", "string");
        	this.dsSelectBudget.addColumn("SEMOK", "string");

        	this.dsSlipPirnt = new Dataset();
        	this.dsSlipPirnt.addColumn("CD_TRADE", "string");
        // 	this.dsSlipPirnt.addColumn("DS_KEY1", "string");
        // 	this.dsSlipPirnt.addColumn("DS_KEY2", "string");
        // 	this.dsSlipPirnt.addColumn("DS_KEY3", "string");
        // 	this.dsSlipPirnt.addColumn("DS_KEY4", "string");
        // 	this.dsSlipPirnt.addColumn("DS_KEY5", "string");
        // 	this.dsSlipPirnt.addColumn("ID_USER", "string");
        // 	this.dsSlipPirnt.addColumn("RTN_TITLE", "string");
        // 	this.dsSlipPirnt.addColumn("RTN_HTML", "string");


        	this.dsSlipEAppr = new Dataset();
        	this.dsSlipEAppr.addColumn("NO_KEY", "string");

        	//자금 계정이 포함한 전표확인
        	this.dsAuthGwAppr = new Dataset();
        	this.dsAuthGwAppr.addColumn("CD_DEPT_BE", "string");
        	this.dsAuthGwAppr.addColumn("CD_TRADE", "string");

        	// 환율조회
        	this.dsSelectCurrExchange = new Dataset();
        	this.dsSelectCurrExchange.addColumn("TY_GUBUN", "string");
        	this.dsSelectCurrExchange.addColumn("CN_ROW", "int");
        	this.dsSelectCurrExchange.addColumn("VALUE", "string");
        	this.dsSelectCurrExchange.addColumn("MIN_VALUE", "string");
        	this.dsSelectCurrExchange.addColumn("DT_BASE", "string");
        	this.dsSelectCurrExchange.addColumn("CD_LOCAL_CURR", "string");
        	this.dsSelectCurrExchange.addColumn("CD_EXEC_CURR", "string");

        	// 환율조회 실행 확인용
        	this.dsCurrExchangeCnt = new Dataset();
        	this.dsCurrExchangeCnt.addColumn("NO_ROW", "string");

        	// 결재
        	this.dsApproval = new Dataset();
        	this.dsApproval.addColumn("TY_WRK", "string");
        	this.dsApproval.addColumn("CD_CORP", "string");
        	this.dsApproval.addColumn("CD_TRADE", "string");
        	this.dsApproval.addColumn("ID_APRV", "string");
        	this.dsApproval.addColumn("NO_APRV", "int");
        }

        /************************************************************************
        * 컨트롤 이벤트
        ************************************************************************/
        // 조회 버튼
        this.fnSelect = function() {
        	if (!this.fnSelectValidate()) return false;

        	this.gfnGridBeforeSelect(this.dxGrid);

        	this.dsSelect.clearData();
        	this.dsSelect.addRow();
        	this.dsSelect.setColumn(0, "CD_TRADE", this.txtCD_TRADE.value);

        	var strSvcId    = "select";
        	var strSvcType  = "grid";
        	var inProc		= "_dsProc";
        	var inData      = "select=dsSelect";
        	var outData     = "dsList=select0";
        	var strArg      = "";
        	var callBackFnc = "fnCallback";

        	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
        						strSvcType , 	// transaction을 요청할 구분
        						inProc,			// Procedure 정보 Dataset 이름
        						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
        						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
        						callBackFnc); // 통신방법 정의 [생략가능]
        }

        // 입력 버튼
        this.fnAdd = function(type) {
        	if(!this.fnCheckValidate()) return;

        	if(this.dsList.rowcount > 0 && this.gfnIsNull(type)){
        		//	부가세등록계정여부 Y이고 증빙을 입력 안했을경우
        		var rowPos = this.dsList.rowcount -1;
        		if( this.dsList.getColumn(rowPos, "YN_VAT_ACNT") == "Y" && this.dsList.getColumn(rowPos, "YN_VAT") == "N"){
        			var dsAcntVat = this.dsList.getColumn(rowPos, "DS_ACCOUNT");		// 계정명칭
        			this.gfnAlert( dsAcntVat + " 계정은 증빙 필수입니다. 증빙을 입력하세요");
        			return false;
        		}
        	}

        	var nRow = this.gfnGridAdd(this.dxGrid, "bottom", true);

        	this.dsList.set_enableevent(false);

        	this.tabData.set_tabindex(0);

        	var dtAccount = (this.dsList.rowcount == 1) ? (this.calDT_ACCOUNT.value) : this.dsList.getColumn(nRow-1, "DT_ACCOUNT");

         	var cdCorp = this.ccfCD_CORP.form.CDTextBox.value;
         	this.dsList.setColumn(nRow, "CD_CORP"   , cdCorp);							// 법인코드
        	this.dsList.setColumn(nRow, "CD_TRADE"	, this.txtCD_TRADE.value);			// 거래번호
        	//this.dsList.setColumn(nRow, "DT_ACCOUNT", this.calDT_ACCOUNT.value);		// 발행일자
        	this.dsList.setColumn(nRow, "DT_ACCOUNT", dtAccount);		// 발행일자

        	this.dsList.setColumn(nRow, "AM_EXEC_DR", "0");								// 차변집행화
        	this.dsList.setColumn(nRow, "AM_EXEC_CR", "0");								// 대변집행화
        	this.dsList.setColumn(nRow, "AM_DR"		, "0");								// 차변금액
        	this.dsList.setColumn(nRow, "AM_CR"		, "0");								// 대변금액
        	this.dsList.setColumn(nRow, "AM_USD_DR", "0");								// 차변미화
        	this.dsList.setColumn(nRow, "AM_USD_CR", "0");								// 대변미화
        	this.dsList.setColumn(nRow, "AM_EUR_DR", "0");								// 차변유로화
        	this.dsList.setColumn(nRow, "AM_EUR_CR", "0");								// 대변유로화

        	this.dsList.setColumn(nRow, "CD_ACCOUNT", "");										// 계정코드
        	this.dsList.setColumn(nRow, "CD_DEPT_BH", this.ccfACNTUNIT.form.CDTextBox.value);	// 발행부서
         	this.dsList.setColumn(nRow, "TY_CLOSING", this.ccboTY_SLIP.value);					// 전표구분
         	this.dsList.setColumn(nRow, "YN_VAT"  	, "N");										// 부가세여부
        	this.dsList.setColumn(nRow, "DS_REM"  	, "");										// 적요

        // 	this.dsList.setColumn(nRow, "CD_DEPTOFFICER", this.ccfACNTUNIT.form.CDTextBox.value);
        // 	this.dsList.setColumn(nRow, "DS_DEPTOFFICER", this.ccfACNTUNIT.form.DSTextBox.value);


        	//예산
        	//this.dsList.setColumn(nRow, "YN_DEPT"  	, "Y");										// 부서/임원

        	// 20200408 / jkcha / 2번째 줄부터 등록시 바로위의 줄의 데이터를 입력
        	if (nRow > 0) {
        		this.dsList.setColumn(nRow, "CD_VENDOR" , this.dsList.getColumn(nRow-1, "CD_VENDOR")); 	// 거래처코드
        		this.dsList.setColumn(nRow, "DS_VENDOR" , this.dsList.getColumn(nRow-1, "DS_VENDOR"));	// 거래처명
        		this.dsList.setColumn(nRow, "CD_DEPT_BE", this.dsList.getColumn(nRow-1, "CD_DEPT_BE"));	// 귀속부서
        		this.dsList.setColumn(nRow, "DS_DEPT"  	, this.dsList.getColumn(nRow-1, "DS_DEPT"));	// 귀속부서명

        		this.dsList.setColumn(nRow, "CD_DEPTOFFICER", this.dsList.getColumn(nRow-1, "CD_DEPT_BE"));
        		this.dsList.setColumn(nRow, "DS_DEPTOFFICER",  this.dsList.getColumn(nRow-1, "DS_DEPT"));

        		this.dsList.setColumn(nRow, "CD_LOCAL_CURR", this.dsList.getColumn(nRow-1, "CD_LOCAL_CURR"));	// 로컬통화

        		this.dsList.setColumn(nRow, "YN_BUDGET", this.dsList.getColumn(nRow-1, "YN_BUDGET"));	// 예산부서여부
        		this.dsList.setColumn(nRow, "YN_BUDGET_CONTROL" , this.dsList.getColumn(nRow-1, "YN_BUDGET_CONTROL"));	// 예산통제여부

        		//매입귀속부서
        		this.dsList.setColumn(nRow, "CD_DEPT_BUY", this.dsList.getColumn(nRow-1, "CD_DEPT_BUY"));
        		this.dsList.setColumn(nRow, "DS_DEPT_BUY", this.dsList.getColumn(nRow-1, "DS_DEPT_BUY"));

        		// 적요
        		this.dsList.setColumn(nRow, "DS_REM", this.dsList.getColumn(nRow-1, "DS_REM"));

        		//this.dsList.setColumn(nRow, "CD_EXEC_CURR", this.dsList.getColumn(nRow-1, "CD_EXEC_CURR"));	// 집행통화

        		// 로컬환율 조회
        		//this.fnSelectCurrExchange(nRow);
        		//this.dsList.setColumn(nRow, "RT_LOCAL_EXCH", this.dsList.getColumn(nRow-1, "RT_LOCAL_EXCH"));	// 로컬환율
        		//this.dsList.setColumn(nRow, "RT_KRW_EXCH", this.dsList.getColumn(nRow-1, "RT_KRW_EXCH"));		// 원화환율


        		this.dsList.setColumn(nRow, "TY_VENDOR" , this.dsList.getColumn(nRow-1, "TY_VENDOR"));	// 거래처구분
        	}

        	//수정일 경우 전표번호 채번
        	if(this.V_IUD_FLAG == "U"){
        		var cdSlip = this.fnSetCdSlip(this.txtCD_TRADE.value);
        		this.dsList.setColumn(nRow, "CD_SLIP"   , cdSlip);
        		this.dsList.setColumn(nRow, "FILE_DIR"  , cdSlip);

        		this.FormBtns.Select.set_enable(true);
        	} else {
        		this.FormBtns.Select.set_enable(false);
        	}

        	//항번 셋팅
        	this.fnNoViewSetting();

        	this.dsList.set_enableevent(true);

        	if (nRow > 0) {
        		this.dsList.setColumn(nRow, "CD_EXEC_CURR", this.dsList.getColumn(nRow-1, "CD_EXEC_CURR"));	// 집행통화
        	}

        	//하단 관리항목 로우 추가
        	if(this.dsListSub.rowcount == 0){
        		this.gfnGridAdd(this.dxGridSub, null, false);
        	}

        	this.gfnSetEnable(this.btnDFPopup, false);

        	var colISSUE_ID = this.dxGrid.getBindCellIndex("body", "ISSUE_ID");
        	this.dxGrid.setCellPos(colISSUE_ID, nRow);
        	this.dxGrid.showEditor(true);

        	return nRow;
        }

        // 삭제 버튼
        this.fnDel = function() {
        	var rPos = this.dsList.rowposition;

        	//상단 데이터가 증빙데이터일 경우
        	//if(this.gfnGetFlag(this.dsList, (rPos-1)) !="I" && this.dsList.getColumn((rPos-1), "YN_VAT") == "Y"){
        	if(this.dsList.getColumn(rPos, "CD_ACCOUNT") == this.gCD_VATACCOUNT || this.dsList.getColumn(rPos, "CD_ACCOUNT") == this.gCD_ACNT_VAT_SALE){	//선급부가세/선수부가세일경우
        		//if(this.dsList.getColumn((rPos-1), "YN_VAT") == "Y"){
        		//this.dsList.setColumn((rPos-1), "YN_VAT", "N");
        		//this.dsList.setColumn((rPos-1), "FLAG_V", "D");

        		if (this.ccboTY_SLIP.value != "02") {	// 20201117 / jkcha / 결산전표일경우 부가세관련 계정 추가 안함.
        			this.gfnAlert("부가세계정은 삭제할수 없습니다. 증빙팝업에서 삭제처리하세요.");
        			return;
        		}
        	}

        	// 자동전표
        	if(!this.gfnIsNull(this.dsList.getColumn(0, "CD_AUTOSLIP")) ){
        	   if (!(this.dsList.getColumn(0, "CD_AUTOSLIP") =="DHA0017" && this.UserInfo.YN_SLIP_OK == "Y")) //취소전표는 전표승인자만 수정가능
        	   {
        	   	 return false;
        	   }
        		return false;
        	}

        	var rows = this.dxGrid.getSelectedDatasetRows();
        	if(rows.length > 0) {
        		for(var i =0; i < rows.length; i++) {
        			var nrow = rows[i];
        			if(nexacro.toNumber(this.dsList.getColumn(nrow, "FILE_ATTACH_CNT"),0) > 0){
        				this.gfnAlert("첨부파일 먼저 삭제하세요!");
        				return;
        			}
        		}
        	}

        	this.gfnGridDel(this.dxGrid);

        	if(this.dsList.rowcount == 0){
        		this.dsListSub.clearData();

        		this.dsListBudget.clearData();
        		this.tabData.set_enableevent(false) // set
        		this.tabData.set_tabindex(0);
        		this.tabData.set_enableevent(true) // set
        	}

         	var rCnt = this.dsList.rowcount;
         	if(rCnt > 0){
         		this.dxGrid.setCellPos(4, rCnt-1);
         	}

        	//수정일 경우 전표번호 채번
        	if(this.V_IUD_FLAG == "U"){
        		this.FormBtns.Select.set_enable(true);
        	} else {
        		this.FormBtns.Select.set_enable(false);
        	}

        	// 삭제되면서 아래의 관리 항목 변경
        	this.fnEtcGridSetting(this.dsList.rowposition);
        	//항번 셋팅
        	this.fnNoViewSetting();
        	//하단 계산
        	this.fnCalcSlip();
        }

        // 저장 버튼
        this.fnSave = function() {
        	if(this.dsList.rowcount == 0) return;

        	if (!this.gfnGridValidate(this.dxGrid)) return;
        	if (!this.fnDataValidate()) return;

        	this.dxGrid.updateToDataset();

        	//신규 처리
        	if(this.gfnIsNull(this.txtCD_TRADE.value)){
        		//거래번호/전표번호 채번
        		this.fnSelectNewCode();
        	}else{
        		this.fnSave2();
        	}
        }

        // 엑셀 버튼
        this.fnExcel = function() {
        	this.gfnExcelExport(this.dxGrid);
        }

        // 출력 버튼
        this.fnPrint = function() {
        	if (!this.fnSelectValidate()) return false;

        	this.dsSlipPirnt.clearData();
        	this.dsSlipPirnt.addRow();

        	var sNoDoc = this.dsList.getColumn(this.dsList.rowposition, "NO_DOC");	// 전자결재문서번호
        	var sCdTrade = nexacro.replaceAll(this.gfnTrim(this.txtCD_TRADE.value), "-","");
        	//this.dsSlipPirnt.setColumn(0, "DS_KEY1", sCdTrade);
        	//this.dsSlipPirnt.setColumn(0, "ID_USER", this.AuthClient.ID_USER);
        	this.dsSlipPirnt.setColumn(0, "CD_TRADE", sCdTrade);

        	this.dsSlipEAppr.clearData();
        	this.dsSlipEAppr.addRow();
        	this.dsSlipEAppr.setColumn(0, "NO_KEY", sNoDoc);

        	var strSvcId    = "slipPirnt";
        	var strSvcType  = "grid";
        	var inProc		= "_dsProc";
        	var inData      = "slipPirnt=dsSlipPirnt slipEAppr=dsSlipEAppr";
        	var outData     = "dsListPrint=slipPirnt0 dsListSlipEAppr=slipEAppr0";
        	var strArg      = "";
        	var callBackFnc = "fnCallback";

        	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
        						strSvcType , 	// transaction을 요청할 구분
        						inProc,			// Procedure 정보 Dataset 이름
        						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
        						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
        						callBackFnc); // 통신방법 정의 [생략가능]
        	return false;

        }

        // 전표출력
        this.fnSlipPrint = function(obj,e)
        {

        	for(var i = 0;i<this.dsListPrint.rowcount;i++){
        		this.dsListPrint.setColumn(i, "PROOF_URL", "");
        		this.dsListPrint.setColumn(i, "TAX_URL", "");
        		this.dsListPrint.setColumn(i, "CD_VATDEPT_ACNT", "");
        		this.dsListPrint.setColumn(i, "CD_VATACCOUNT", "");

        		this.dsListPrint.setColumn(i, "DT_EAPPROVAL1", this.dsListSlipEAppr.getColumn(0, "DT_APPR"));
        		this.dsListPrint.setColumn(i, "ID_EAPPROVAL1", this.dsListSlipEAppr.getColumn(0, "ID_APPR"));
        		this.dsListPrint.setColumn(i, "DS_HNAME_EAPPROVAL1", this.dsListSlipEAppr.getColumn(0, "DS_HNAME"));
        		this.dsListPrint.setColumn(i, "DS_POSITION1", this.dsListSlipEAppr.getColumn(0, "DS_POSITION"));
        		this.dsListPrint.setColumn(i, "DT_EAPPROVAL2", this.dsListSlipEAppr.getColumn(1, "DT_APPR"));
        		this.dsListPrint.setColumn(i, "ID_EAPPROVAL2", this.dsListSlipEAppr.getColumn(1, "ID_APPR"));
        		this.dsListPrint.setColumn(i, "DS_HNAME_EAPPROVAL2", this.dsListSlipEAppr.getColumn(1, "DS_HNAME"));
        		this.dsListPrint.setColumn(i, "DS_POSITION2", this.dsListSlipEAppr.getColumn(1, "DS_POSITION"));
        		this.dsListPrint.setColumn(i, "DT_EAPPROVAL3", this.dsListSlipEAppr.getColumn(2, "DT_APPR"));
        		this.dsListPrint.setColumn(i, "ID_EAPPROVAL3", this.dsListSlipEAppr.getColumn(2, "ID_APPR"));
        		this.dsListPrint.setColumn(i, "DS_HNAME_EAPPROVAL3", this.dsListSlipEAppr.getColumn(2, "DS_HNAME"));
        		this.dsListPrint.setColumn(i, "DS_POSITION3", this.dsListSlipEAppr.getColumn(2, "DS_POSITION"));
        		this.dsListPrint.setColumn(i, "DT_EAPPROVAL4", this.dsListSlipEAppr.getColumn(3, "DT_APPR"));
        		this.dsListPrint.setColumn(i, "ID_EAPPROVAL4", this.dsListSlipEAppr.getColumn(3, "ID_APPR"));
        		this.dsListPrint.setColumn(i, "DS_HNAME_EAPPROVAL4", this.dsListSlipEAppr.getColumn(3, "DS_HNAME"));
        		this.dsListPrint.setColumn(i, "DS_POSITION4", this.dsListSlipEAppr.getColumn(3, "DS_POSITION"));
        	}

         	var inProc		= "_dsProc";
         	//var inParam 	= "params=dsList";						// 조회SP이외 사용할 정보
        	var inParam 	= "params=dsListPrint";						// 조회SP이외 사용할 정보
        	var inData      = "slipPirnt=dsSlipPirnt";
         	//var inData      = "line1=dsLine1 line2=dsLine2 selectmaster=dsMaster";	//   select=dsSelect
         	var reportpath  = "/dh/dha/DHA_ISSUESLIP_RPT.ozr";

         	gfnOpenReport(this, reportpath, inProc, inParam, inData);
        }

        // 조회 버튼
        this.fnDFSelect = function() {

        	this.V_NO_INCONFIRM = this.getOwnerFrame().NO_INCONFIRM;	// 입금확인번호(NO_INCONFIRM) :

        	this.dsDFSelect.clearData();
        	this.dsDFSelect.addRow();
        	this.dsDFSelect.setColumn(0, "CD_CORP", this.getOwnerFrame().CD_CORP);
        	this.dsDFSelect.setColumn(0, "NO_INCONFIRM", this.V_NO_INCONFIRM);		// 20202020,20202012 ....

        	var strSvcId    = "selectDF";
        	var strSvcType  = "grid";
        	var inProc		= "_dsProc";
        	var inData      = "selectDF=dsDFSelect";
        	var outData     = "dsListDF=selectDF0";
        	var strArg      = "";
        	var callBackFnc = "fnCallback";

        	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
        						strSvcType , 	// transaction을 요청할 구분
        						inProc,			// Procedure 정보 Dataset 이름
        						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을
        						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
        						callBackFnc); // 통신방법 정의 [생략가능]
        }

        /************************************************************************
         * Validate
         ************************************************************************/
        /*
         *	조회 Validate
         */
        this.fnSelectValidate = function() {
        	var validate = true;
        	if (this.gfnIsNull(this.txtCD_TRADE.value)) {
        		validate = false;
        		this.gfnAlert("전표번호가 없습니다.");
        	}
        	return validate;
        };

        /*
         *	예산 조회 Validate
         */
        this.fnSelectBudgetValidate = function() {
        	var nRow = this.dsList.rowposition;
        	//var sYrAcnt = this.calDT_ACCOUNT.value;
        	var sYrAcnt = this.dsList.getColumn(this.dsList.rowposition, "DT_ACCOUNT");
        	if (this.gfnIsNull(sYrAcnt)) {
        		this.gfnAlert("회계년도를 입력하세요.");
        		return false;
        	}

        	if (this.gfnIsNull(this.dsList.getColumn(nRow, "CD_DEPTOFFICER"))) {
        		this.gfnAlert("부서코드 반드시 입력 하셔야 합니다.");
        		this.ccfCD_DEPTOFFICER.form.CDTextBox.setFocus();
        		return false;
        	}

        	if (this.gfnIsNull(this.dsList.getColumn(nRow, "CD_BIMOK"))) {
        		this.gfnAlert("비목코드를 반드시 입력 하셔야 합니다.");
        		this.ccfCD_BIMOK.form.CDTextBox.setFocus();
        		return false;
        	}

        	if (this.gfnIsNull(this.dsList.getColumn(nRow, "CD_SEMOK"))) {
        		this.gfnAlert("세목코드를 반드시 입력 하셔야 합니다.");
        		this.ccfCD_SEMOK.form.CDTextBox.setFocus();
        		return false;
        	}

        	return true;
        };

        /************************************************************************
         * 콜백 이벤트
         ************************************************************************/
        /*
         *	콜백 처리
         */
        this.fnCallback = function(svcID, errorCode, errorMsg, strArg)
        {
        	this.fnUpdateStatusExtendButton();

        	switch(svcID) {
        		case "select" :
        			this.gfnGridAfterSelect(this.dxGrid);

        			//trace("YN_APPR :: "+this.dsList.getColumn(0, "YN_APPR"));
        			//trace("DT_INSERT :: "+this.dsList.getColumn(0, "DT_INSERT"));
        			//trace("DS_INSERT :: "+this.dsList.getColumn(0, "DS_INSERT"));
        			//trace("CD_AUTOSLIP :: "+this.dsList.getColumn(0, "CD_AUTOSLIP"));
        			//trace("TY_CLOSING :: "+this.dsList.getColumn(0, "TY_CLOSING"));
        			//trace("CD_APP :: "+this.dsList.getColumn(0, "CD_APP"));

        			if(this.dsList.rowcount > 0){
        				this.fnCalcSlip();

        				this.dsSearch.set_enableevent(false);

        				trace("다른화면에서 넘어 왔을경우 검색조건 셋팅->" + this.getOwnerFrame().CD_TRADE);

        				//다른화면에서 넘어 왔을경우 검색조건 셋팅
        				if (!this.gfnIsNull(this.getOwnerFrame().CD_TRADE)) {
        					this.ccfCD_CORP.form.CDTextBox.set_value(this.dsList.getColumn(0, "CD_CORP"));
        					this.ccfCD_CORP.form.DSTextBox.set_value(this.dsList.getColumn(0, "DS_CORP"));
        					this.ccfACNTUNIT.form.CDTextBox.set_value(this.dsList.getColumn(0, "CD_DEPT_BH"));
        					this.ccfACNTUNIT.form.DSTextBox.set_value(this.dsList.getColumn(0, "DS_DEPT_BH"));
        					this.calDT_ACCOUNT.set_value(this.dsList.getColumn(0, "DT_ACCOUNT_H"));
        				}
        				this.dsSearch.set_enableevent(true);

        				this.txtDT_UPDATE.set_value(this.dsList.getColumn(0, "DT_INSERT"));
        				this.txtDS_HNAME.set_value(this.dsList.getColumn(0, "DS_INSERT"));
        				this.ccboCD_APP.set_value(this.dsList.getColumn(0, "CD_APP"));
        				this.txtDS_APPR.set_value(this.dsList.getColumn(0, "DS_APPR"));
        				this.txtDS_AUTOSLIP.set_value(this.dsList.getColumn(0, "DS_AUTOSLIP"));
        				this.ccboTY_SLIP.set_value(this.dsList.getColumn(0, "TY_CLOSING"));
        				this.txtDS_APRV.set_value(this.dsList.getColumn(0, ""));

        				//자동전표 여부
        				this.V_CD_AUTOSLIP = this.dsList.getColumn(0, "CD_AUTOSLIP");

        				var vFlag = "";

         				if(!this.gfnIsNull(this.V_CD_AUTOSLIP) && !(this.V_CD_AUTOSLIP =="DHA0017" && this.UserInfo.YN_SLIP_OK == "Y")) { //취소전표는 전표승인자만 수정가능
        					//자동전표일 경우
         					vFlag = "S"; //조회용
         				}else{
        					if(this.dsList.getColumn(0, "YN_APPR") == "Y"){	//승인 전표일경우
        						vFlag = "S"; //조회용
        					}else{
        						//결재중/결재완료
        						//if(this.dsList.getColumn(0, "CD_APP") == "01" || this.dsList.getColumn(0, "CD_APP") == "02"){

        						// 전자결재상태 ST_APRV 공통코드 DZ - DZ_APRV
        						// 1임시저장	2결재상신	3결재중	4결재완료	5반려	6상신취소	7작성취소
        						if(this.dsList.getColumn(0, "ST_APRV") == "1" || this.dsList.getColumn(0, "ST_APRV") == "2" || this.dsList.getColumn(0, "ST_APRV") == "3" || this.dsList.getColumn(0, "ST_APRV") == "4"){
        							vFlag = "S"; //조회용
        						}else{
        							vFlag = "U"; //수정가능
        						}
        					}

        				}
        				//자동 전표가 아니고 승인이 안되어 있을 경우
        	// 			if(this.gfnIsNull(this.V_CD_AUTOSLIP) && this.dsList.getColumn(0, "YN_APPR") != "Y"){
        	// 				vFlag = "U";
        	// 			}else{
        	// 				vFlag = "S";
        	// 				if(this.dsList.getColumn(0, "YN_APPR") == "Y"){
        	// 					vFlag = "A";
        	// 				}
        	// 			}

        				//입금전표일 경우
        				if(this.dsList.getColumn(0, "TY_CLOSING") == "03"){
        					vFlag = "S";
        				}

        				//전역변수에 상태값 담기
        				this.V_IUD_FLAG = vFlag;

        				//trace("### 전표 사용여부 vFlag :: "+vFlag);

        				this.fnSetButtonEnable(vFlag);

        				//파일 조회
        				this.fnFileSelect();

        			}else{
        				this.V_IUD_FLAG = "N";
        			}

        			// 전표결제, 결제조회 버튼 활성화 여부
        			/*
        			if( !this.gfnIsNull(this.dsList.getColumn(this.dsList.rowposition , "NO_DOC")) ){
        				this.btnSchApprove.set_enable(true);
        			} else {
        				this.btnSchApprove.set_enable(false);
        			}
        			*/

        			//trace("전역변수 V_IUD_FLAG >>>> "+this.V_IUD_FLAG);

        			break;
        		case "selectSub" :
        			this.gfnGridAfterSelect(this.dxGridSub);
        			//this.dxGrid.setfocus();
        			break;
        		case "combo" :
        			break;

        		case "selectCurrExchangeAll" :	// 환율조회
        		case "selectCurrExchange" :	// 환율조회
        			var json = this.gfnArgsToJson(strArg);
        			var currentRow = json.crow;

        			trace(currentRow + " 환율조회->" + this.dsCurrExchange.saveXML());

        			this.dsList.setColumn(currentRow, "RT_LOCAL_EXCH", this.dsCurrExchange.getColumn(0, "RT_LOCAL_EXCH"));	// 로컬환율
        			this.dsList.setColumn(currentRow, "RT_KRW_EXCH", this.dsCurrExchange.getColumn(0, "RT_KRW_EXCH"));		// 원화환율
        			this.dsList.setColumn(currentRow, "RT_USD_EXCH", this.dsCurrExchange.getColumn(0, "RT_USD_EXCH"));		// 미화환율
        			this.dsList.setColumn(currentRow, "RT_EUR_EXCH", this.dsCurrExchange.getColumn(0, "RT_EUR_EXCH"));		// 유로화환율

        			if(this.dsCurrExchange.rowcount > 0){
        				// 로컬화, 원화(AM_DR, AM_CR) 계산
        				this.fnSetAmAccouont(currentRow);
        			}else{
        				// 통화, 로컬환율, 원화환율, 집행화, 로컬화, 원화 금액 초기화
        				this.fnSetInitAmAcntCurr(currentRow)
        			}

        			if(svcID == "selectCurrExchangeAll"){
        				// 조회 건수 확인용(동기화)
        				trace(" selectCurrExchangeAll=>" + "전표복사");
        				var nExeRow = this.dsCurrExchangeCnt.addRow();
        				this.dsCurrExchangeCnt.setColumn(nExeRow, "NO_ROW", currentRow)
        				if(this.dsList.rowcount == this.dsCurrExchangeCnt.rowcount){
        					this.fnSave();
        					this.dsCurrExchangeCnt.clearData();
        				}
        			}

        			break;

        		case "newCode" :
        			if (errorCode == 0) {
        				//trace("NEW_CD_TRADE :: "+this.dsNewCode.saveXML());

        				//검색조건 전표번호 셋팅
        				this.txtCD_TRADE.set_value(this.dsNewCode.getColumn(0, "CD_TRADE"));

        				//this.dsRnameList.clearData();

        				this.dsList.set_enableevent(false);
        				for(var i = 0;i<this.dsList.rowcount;i++){
        					if(this.gfnGetFlag(this.dsList, i) == "I"){	//신규 데이터만
        						//전표번호 셋팅
        						var cdSlip = this.fnSetCdSlip(this.dsNewCode.getColumn(0, "CD_TRADE"));
        						this.dsList.setColumn(i, "CD_TRADE", this.dsNewCode.getColumn(0, "CD_TRADE"));
        						this.dsList.setColumn(i, "CD_SLIP" , cdSlip);

        						var fileDir = this.dsList.getColumn(i, "FILE_DIR");

        						if(!this.gfnIsNull(fileDir)){
        							if(fileDir.indexOf("TEMP") > -1){	//임시 업로드한 파일이 있을경우
        								//trace("임시파일이다 등록!!! ");
        								//trace("임시파일이다 등록 fileDir :: "+cdSlip);
        								//trace("임시파일이다 등록 cdSlip :: "+cdSlip);

        								var nRow = this.dsRnameList.addRow();
        								this.dsRnameList.setColumn(nRow, "PATH_ORG", fileDir);
        								this.dsRnameList.setColumn(nRow, "PATH_NEW", cdSlip);
        								this.dsRnameList.setColumn(nRow, "SAVE_YN" , "N");
        							}
        						}
        					}
        				}
        				this.dsList.set_enableevent(true);

        				this.fnSave2();

        				this.dsNewCode.clearData();

        				//this.V_IUD_FLAG = "U";	//전역 플래그 수정으로 변경

        				//this.fnSetButtonEnable(this.V_IUD_FLAG);
        			} else {
        				this.gfnAlert(errorMsg);
        			}
        			break;
        		case "save" :
        			if (errorCode == 0) {

        				if(this.V_IUD_FLAG == "N"){
        					this.V_IUD_FLAG = "U";	//전역 플래그 수정으로 변경
        				}

        				this.fnSetButtonEnable(this.V_IUD_FLAG);


        //				2021.7.27 gfnMoveFile 함수 없어서 일단 주석처리
        // 				// 파일명변경 처리
        // 				if(this.dsRnameList.rowcount > 0) {;
        // 					this.fnFileMove();
        // 				}else{
        // 					this.FormBtns.Select.click();
        // 				}
        				this.FormBtns.Select.click();

        				// 자금 입금내역 전표일 경우 저장 후 프로시저 호출
        				if(this.V_YN_DF == "Y"){
        					this.fnDFProcCall();
        				}
        			} else {
        				this.gfnAlert(errorMsg);
        			}
        			break;
        		case "slipDelete" :
        			if (errorCode == 0) {
        				// 전표번호 초기화
        				this.txtCD_TRADE.set_value("");

        				this.gfnSetFormStatus(this);	// 폼상태 초기화
        				this.gfnGridClear(this.dxGrid);
        				this.gfnGridClear(this.dxGridSub);
        				this.FormBtns.Add.set_enable(true);

        				//this.txtDT_MAGAM.set_value("");
        				this.mskSUM_CRDR.set_value("");
        				this.mskSUM_LOCAL_CRDR.set_value("");

        				this.mskAM_DR.set_value("");
        				this.mskAM_CR.set_value("");
        				this.mskCOUNT.set_value("");

        				this.V_IUD_FLAG = "I";

        				//첨부파일 삭제
        				this.fnFileDelete();

        			} else {
        				this.gfnAlert(errorMsg);
        			}
        			break;
        		case "fileSelect" :
        			//trace("파일 조회 완료!!");
        			break;

        		case "selectTax" :
        			if (errorCode == 0) {
        				if(this.dsTax.rowcount > 0){
        					var issueId   = this.gfnTrim(this.dsList.getColumn(this.dsList.rowposition, "ISSUE_ID"));
        					var url = this.gfnGetConfig("DH" , "TAX_URL");
        					url = url+"TaxView/view.do?";
        					url += "invseq="+this.dsTax.getColumn(0, "INV_SEQ");
        					url += "&status="+this.dsTax.getColumn(0, "STATUS");
        					url += "&type=dtv3"
        					url += "&issueid="+issueId
        					url += "&aspcode=" +this.dsTax.getColumn(0, "ASP_CODE");

        					trace("TAX_URL url->" + url);
        					//http://중계서버IP:7502/TaxView/view.do?invseq=inv_seq&status=상태&type=dtv3&issueid=승인번호&aspcode=00000000
        					window.open(url, "_blank", "width=790,height=570,menubar=no,scrollbars=no,resizable=no,status=no");

        				}else{
        					this.gfnAlert("세금계산서 정보가 없습니다.");
        				}
        			}else{
        				this.gfnAlert(errorMsg);
        			}
        			break;
        		case "selectDtReq" :
        			if (errorCode == 0) {

        				var dtReq = "";
        				if(this.dsDtReq.rowcount > 0){
        					dtReq = this.dsDtReq.getColumn(0, "DT_REQ");
        				}

        				var dtAccount = this.dsList.getColumn(0, "DT_ACCOUNT");
        				dtAccount = dtAccount.substr(0,4)+"-" + dtAccount.substr(4,2) + "-" + dtAccount.substr(6,2);

        				var txtSubject = this.gfnNvl(this.dsList.getColumn(0, "DS_CORP"),"");	//법인명
        				txtSubject += " / "+ (this.gfnIsNull(this.dsList.getColumn(0, "CD_AUTOSLIP")) ? "일반전표" : this.dsList.getColumn(0, "DS_AUTOSLIP"));
        				txtSubject += " / "+ this.gfnNvl(this.dsList.getColumn(0, "DS_INSERT"),"");		//작성자
        				txtSubject += " / "+ this.gfnNvl(this.dsList.getColumn(0, "DS_DEPT_BH"),"");	//발행부서
        				txtSubject += " / "+ this.gfnNvl(dtAccount,"");	                                //회계일자
        				txtSubject += " /자금 : "+ this.gfnNvl(dtReq,"");								//자금요청일
        				txtSubject += " / "+ this.gfnNvl( this.dsList.getColumn(0, "DS_REM"),"");		//대표적요
        				txtSubject += " / "+ nexacro.toNumber(this.dsList.getSum("AM_DR"),0);			//금액

        				var url = this.gfnGetConfig("DZ" , "GW_APROVAL_URL");
        				url = url+"approval/legacy/goFormLink.do?mode=DRAFT&legacyFormID=WF_FORM_ERP_SLIP";
        				url += "&subject="+encodeURI(txtSubject);
        				url += "&dataType=proc";
        				url += "&empno="+this.AuthClient.ID_USER;
        				url += "&P_DS_KEY1="+this.txtCD_TRADE.value;  // 전표번호
        				url += "&P_DS_KEY2=&P_DS_KEY3=&P_DS_KEY4=&P_DS_KEY5=";

        				window.open(url, "_blank", "width=790,height=600,menubar=no,scrollbars=no,resizable=no,status=no");
        			}else{
        				this.gfnAlert(errorMsg);
        			}
        			break;
        		case "selectDF" :
        			if (errorCode == 0) {
        				this.fnDFSetting();
        			} else {
        				this.gfnAlert(errorMsg);
        			}
        			break;

        		case "selectBudget" :	// 예산조회
        			if (errorCode == 0) {
        				var MM_PERIOD = this.dsListBudget.getColumn(0, "MM_PERIOD");
        				var TXT_PERIOD = this.gfnIsNull(MM_PERIOD) ? "" : " (" + MM_PERIOD + ")";
        				this.staMM_PERIOD.set_text( "기간" + TXT_PERIOD );
        			} else {
        				this.gfnAlert(errorMsg);
        			}

        			break;

        		case "slipPirnt" :	// 출력
        			if (errorCode == 0) {
        				if(this.dsListPrint.rowcount > 0){
        					this.fnSlipPrint();
        				}
        			} else {
        				this.gfnAlert(errorMsg);
        			}

        			break;
        		case "selectAuthGwAppr" :	// 자금 계정이 포함한 전표확인(사용안함)
        			if (errorCode == 0) {
        				var ynGw = this.dsAuthGwApprList.getColumn(0,"YN_GW");
        				if(ynGw == "Y"){
        					this.fnDocument();
        				}else{
        					this.gfnAlert("자금 계정이 포함한 전표는 현장에서 전자결재 불가합니다.");
        					return;
        				}
        			} else {
        				this.gfnAlert(errorMsg);
        			}

        			break;

        		case "APRV" :		// 전자결재
        			this.FormBtns.Select.click();
        		case "APRVCNC" :	// 전자결재취소
        			if (errorCode == 0) {
        				this.gfnOpenAppr(function() {
        					this.FormBtns.Select.click();
        				});
        			} else {
        				this.gfnAlert(errorMsg);
        			}

        			break;
        		case "APRVINIT" :	// 결재상태초기화
        			if (errorCode == 0) {
        				this.FormBtns.Select.click();
        			} else {
        				this.gfnAlert(errorMsg);
        			}

        			break;
        	}
        }

        this.fnMsgCallback = function() {
        	this.FormBtns.Select.click();
        }

        /************************************************************************
         * 코드파인드 이벤트
         ************************************************************************/
        this.fnAfterCDTextChanged = function(id, codeFindData) {
        	var arrData = codeFindData;
        	switch(id) {
        		case "ccfCD_CORP":	//법인코드
        			this.ccfACNTUNIT.form.fnCodeFindClear();
        		break;
        		case "ccfCD_DEPTOFFICER":
        			this.ccfCD_SEMOK.form.fnCodeFindClear();
        		break;
        	}
        }

        this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
        	var cdDeptOfficer = this.dsList.getColumn(this.dsList.rowposition, "CD_DEPTOFFICER");
        	var cdBimok = this.dsList.getColumn(this.dsList.rowposition, "CD_BIMOK");
        	var sDtAcnt = this.calDT_ACCOUNT.value;
        	var sYrAcnt = sDtAcnt.substring(0, 4);
        	var idSabun = this.AuthClient.ID_USER;
        	var grSerch = this.FormInfo.GR_SEARCH;

        	switch(id){
        		case "ccfCD_CORP":
        			dsUserParam.setColumn(nrow, "ID_SABUN", this.AuthClient.ID_USER);
        			break;

        		case "ccfACNTUNIT": // 발행부서(검색조건) DHX_CFACNTUNIT
        			var cdCorp = this.ccfCD_CORP.form.CDTextBox.value;
        			if (!this.gfnIsNull(cdCorp)) {
        				dsUserParam.setColumn(nrow, "CD_DEPT_UPPER"	, "");			//상위부서
        				dsUserParam.setColumn(nrow, "YN_SLIPACCEPT"	, "Y");			//전표발행여부
        				dsUserParam.setColumn(nrow, "CD_CORP"		, cdCorp);		//법인코드
        				dsUserParam.setColumn(nrow, "YN_USE"		, "Y");			//사용여부
        				dsUserParam.setColumn(nrow, "GR_DEPT_ACNT"	, "");			//현장/본사여부
        				dsUserParam.setColumn(nrow, "ID_USER"	    , idSabun);
        				dsUserParam.setColumn(nrow, "GR_SEARCH"	    , grSerch);
        				dsUserParam.setColumn(nrow, "CD_DEPT"	    , this.AuthClient.CD_DEPT);
        				dsUserParam.setColumn(nrow, "LEVCD_DEPT_UPPER", this.AuthClient.LEVCD_DEPT_UPPER);

        			} else {
        				this.gfnAlert("법인코드는 필수입력 값입니다.");
        				return false;
        			}
        			break;

        		case "ccfCD_DEPTOFFICER":	// 부서 DIX_ACNTUNIT_AUTH

        			if (this.gfnIsNull(sYrAcnt)) {
        				this.gfnAlert("회계년도를 먼저 입력하세요.");
        				return false;
        			}

        			dsUserParam.setColumn(nrow, "ID_SABUN", idSabun);
        			dsUserParam.setColumn(nrow, "YN_USE", "Y");
        			dsUserParam.setColumn(nrow, "YR_BUDGET", sYrAcnt);
        			dsUserParam.setColumn(nrow, "GR_SEARCH", grSerch);
        			dsUserParam.setColumn(nrow, "CD_DEPT", this.AuthClient.CD_DEPT);
        			dsUserParam.setColumn(nrow, "TY_DEPTGUBUN", "");	// TY_GUBUN : B본사 / H현장 / S수주영업비

        			break;

        		case "ccfCD_BIMOK":	// 비목 DIX_CFBIMOK_DIVERT
        			if (this.gfnIsNull(sYrAcnt)) {
        				this.gfnAlert("회계년도를 먼저 입력하세요.");
        				return false;
        			}

        			if(this.gfnIsNull(cdDeptOfficer)) {
        				this.gfnAlert("부서를 선택하세요.");
        				return false;
        			}

        			dsUserParam.setColumn(nrow, "YR_ACCOUNT", sYrAcnt);
        			dsUserParam.setColumn(nrow, "CD_DEPTOFFICER", cdDeptOfficer);

        			break;

        		case "ccfCD_SEMOK":	// 세목 DIX_CFSEMOK_DIVERT
        			if (this.gfnIsNull(sYrAcnt)) {
        				this.gfnAlert("회계년도를 먼저 입력하세요.");
        				return false;
        			}

        			if(this.gfnIsNull(cdDeptOfficer)) {
        				this.gfnAlert("부서를 선택하세요.");
        				return false;
        			}


        			if(this.gfnIsNull(cdBimok)) {
        				this.gfnAlert("비목을 선택하세요.");
        				return false;
        			}

        			dsUserParam.setColumn(nrow, "YR_ACCOUNT", sYrAcnt);
        			dsUserParam.setColumn(nrow, "CD_DEPTOFFICER", cdDeptOfficer);
        			dsUserParam.setColumn(nrow, "CD_BIMOK", cdBimok);

        			break;

        	}

        	return true;
        };

        this.fnGrid_BeforeUserDataSetParam = function(id, dsUserParam, nrow) {
        	// 그리드에서 코드파인드 id는 그리드셋팅의 코드파인드 식별ID
        	var cdCorp = this.dsList.getColumn(this.dsList.rowposition, "CD_CORP");
        	switch(id) {
        		case "DHX_CFEBILLBUY_ESERO":	//전자세금계산서
        			dsUserParam.setColumn(nrow, "CD_CORP"   , cdCorp);
        			dsUserParam.setColumn(nrow, "TY_SALEBUY", "");	//매입만
        		break;
        		case "DHX_CFACCOUNT":	//계정코드
        			var sMinValue = this.dsList.getColumn(this.dsList.rowposition, "CD_DEPT_BE");
        			dsUserParam.setColumn(nrow, "MIN_VALUE", sMinValue);
        			dsUserParam.setColumn(nrow, "YN_SLIP", "Y");
        		break;
        		case "DHX_CFALLVENDOR_CODEFIND":	//거래처코드
        			dsUserParam.setColumn(nrow, "CD_CORP" , cdCorp);
        			dsUserParam.setColumn(nrow, "MIN_VALUE" , "Y");	// YN_USER
        		break;
        		case "DHX_CFACNTUNIT":	//귀속부서
        			dsUserParam.setColumn(nrow, "CD_DEPT_UPPER"	, "");			//상위부서
        			dsUserParam.setColumn(nrow, "YN_SLIPACCEPT"	, "Y");			//전표발행여부
        			dsUserParam.setColumn(nrow, "CD_CORP"		, cdCorp);		//법인코드
        			dsUserParam.setColumn(nrow, "YN_USE"		, "Y");			//사용여부
        			dsUserParam.setColumn(nrow, "GR_DEPT_ACNT"	, "");			//현장/본사여부
        			dsUserParam.setColumn(nrow, "ID_USER"	    , this.AuthClient.ID_USER);
        			dsUserParam.setColumn(nrow, "GR_SEARCH"	    , this.FormInfo.GR_SEARCH);
        			dsUserParam.setColumn(nrow, "CD_DEPT"	    , this.AuthClient.CD_DEPT);
        			dsUserParam.setColumn(nrow, "LEVCD_DEPT_UPPER", this.AuthClient.LEVCD_DEPT_UPPER);
        		break;

        		case "DHX_CFCURRENCY_EXCHAGE":	//통화환율

        			var sDtBase = this.dsList.getColumn(this.dsList.rowposition, "DT_ACCOUNT");
        			var sCdDept = this.dsList.getColumn(this.dsList.rowposition, "CD_DEPT_BE");
        			var sCdLocalCurr = this.gfnNvl(this.dsList.getColumn(this.dsList.rowposition, "CD_LOCAL_CURR"), "KRW");	// 로컬통화

        			if (this.gfnIsNull(sDtBase)) {
        				this.gfnAlert("회계일자를 먼저 입력하세요.");
        				return false;
        			}

        			if (this.gfnIsNull(sCdDept)) {
        				this.gfnAlert("귀속부서코드를 선택하세요.");
        				return false;
        			}

        			dsUserParam.setColumn(nrow, "DT_BASE", sDtBase);
        			dsUserParam.setColumn(nrow, "CD_LOCAL_CURR", sCdLocalCurr);	// 로컬화폐단위
        			dsUserParam.setColumn(nrow, "CD_EXEC_CURR", "");
        		break;

        // 		case "DHX_CFBIMOK_DIVERT":	//비목
        //
        // 			var cdDeptOfficer = this.dsList.getColumn(this.dsList.rowposition, "CD_DEPTOFFICER");
        // 			var cdBimok = this.dsList.getColumn(this.dsList.rowposition, "CD_BIMOK");

        // 			var sYrAcnt = this.calDT_ACCOUNT.value;
        // 			trace("그리드 비목 YR_ACCOUNT:"  + sYrAcnt.substring(0, 4) +" / cdDeptOfficer:" + cdDeptOfficer + " / cdProject:" + cdProject);
        // 			dsUserParam.setColumn(nrow, "YR_ACCOUNT", sYrAcnt.substring(0, 4));
        // 			dsUserParam.setColumn(nrow, "CD_DEPTOFFICER", cdDeptOfficer);
        // 			dsUserParam.setColumn(nrow, "CD_PROJECT", cdProject);
        // 		break;
        	}

        	return true;
        }

        this.fnGridSub_BeforeUserDataSetParam = function(id, dsUserParam, nrow) {
        	// 그리드에서 코드파인드 id는 그리드셋팅의 코드파인드 식별ID
        	var cdCorp  = this.dsList.getColumn(this.dsList.rowposition, "CD_CORP");
        	var cdVendor  = this.dsList.getColumn(this.dsList.rowposition, "CD_VENDOR");
        	var cdDeptBe  = this.dsList.getColumn(this.dsList.rowposition, "CD_DEPT_BE"); //귀속부서

        	switch(id) {
        		case "DHX_CFETC_CODEFIND1":	//ETC1
        		case "DHX_CFETC_CODEFIND2":	//ETC2
        		case "DHX_CFETC_CODEFIND3":	//REF1
        		case "DHX_CFETC_CODEFIND4":	//REF2
        			var cfDiv = this.gfnRight(id, 1);
        			if(cfDiv == "1"){
        				colTyName = "TY_ETC1";
        			}else if(cfDiv == "2"){
        				colTyName = "TY_ETC2";
        			}else if(cfDiv == "3"){
        				colTyName = "TY_REF";
        			}else{
        				colTyName = "TY_REF2";
        			}

        			var TyVendor  = this.dsListSub.getColumn(this.dsListSub.rowposition, colTyName);

        			if(this.gfnIsNull(cdVendor)){
        				this.gfnAlert("전표정보에 거래처코드를 먼저 선택 하세요");
        				return false;
        			}

        			if(this.gfnIsNull(TyVendor)){
        				this.gfnAlert("구분을 선택 하세요");
        				return false;
        			}

        			dsUserParam.setColumn(nrow, "TY_VENDOR"   , TyVendor);
        			dsUserParam.setColumn(nrow, "CD_VENDOR"   , cdVendor);
        			dsUserParam.setColumn(nrow, "CD_CORP" 	  , cdCorp);
        			break;
        		case "DWX_CFTREESHCOST_01":	//공종코드
        			//dsUserParam.setColumn(nrow, "CD_SITE"	, cdDeptBe);	//현장코드
        			//dsUserParam.setColumn(nrow, "CD_GBIMOK"	, "");		//비목
        			dsUserParam.setColumn(nrow, "CD_SITE"	, cdDeptBe); //귀속부서
        			break;
        		case "DHX_CFACSEMOK":	//세목코드
        			var cdAccount = this.dsList.getColumn(this.dsList.rowposition, "CD_ACCOUNT");
        			var nStart = cdAccount.length -4;
        			var cdBimok = cdAccount.substr( nStart, 4 );
        			dsUserParam.setColumn(nrow, "CD_BIMOK"	, cdBimok);		//비목
        			break;
        	}

        	return true;
        }

        this.fnGrid_AfterCDTextChanged = function(id, codeFindData) {
        	var arrData = codeFindData;
        	var rowPos = this.dsList.rowposition;

        	switch(id) {
        		case "DHX_CFEBILLBUY_ESERO":	//전자세금계산서번호
        			if (arrData.length > 0) {
        				this.dsList.set_enableevent(false);
        				this.dsList.setColumn(rowPos, "DT_ACCOUNT"	, nexacro.replaceAll(this.gfnNvl(arrData[0]["ISSUE_DATE"],""),"-",""));	//회계일자
        				this.dsList.setColumn(rowPos, "CD_VENDOR" 	, arrData[0]["CD_VENDOR"]);		//거래처코드
        				this.dsList.setColumn(rowPos, "DS_VENDOR" 	, arrData[0]["DS_VENDOR"]);		//거래처명
        				this.dsList.setColumn(rowPos, "TY_VENDOR" 	, arrData[0]["TY_VENDOR"]);		//거래처구분
        				this.dsList.setColumn(rowPos, "TY_CRDR"	  	, arrData[0]["TY_CRDR"]);		//차대구분
        				this.dsList.setColumn(rowPos, "TY_SALEBUY"	, arrData[0]["TY_SALEBUY"]);	//거래구분
        				this.dsList.setColumn(rowPos, "AM_SUPPLY"	, arrData[0]["CHARGETOTAL"]);	//공급가액
        				this.dsList.setColumn(rowPos, "AM_VAT"		, arrData[0]["TAXTOTAL"]);		//부가세
        				this.dsList.setColumn(rowPos, "TY_ISSUE"	, "E");							//발행구분(전자발행)
        				this.dsList.setColumn(rowPos, "DS_REM"		, arrData[0]["GOOD_NAME"]);		//적요(품명)
        				this.dsList.setColumn(rowPos, "NO_SJC"		, arrData[0]["NO_SJC"]);		//사업자번호
        				this.dsList.setColumn(rowPos, "DT_PROOF"    , nexacro.replaceAll(this.gfnNvl(arrData[0]["ISSUE_DATE"],""),"-",""));		//부가세 증빙일자

        				this.dsList.setColumn(rowPos, "TY_VATVENDOR", arrData[0]["TY_VENDOR"]);
        				this.dsList.setColumn(rowPos, "CD_VATVENDOR", arrData[0]["CD_VENDOR"]);
        				this.dsList.setColumn(rowPos, "DS_VATVENDOR", arrData[0]["DS_VENDOR"]);

        				var amVat = nexacro.toNumber(arrData[0]["TAXTOTAL"] ,0);
        				var amSupply = nexacro.toNumber(arrData[0]["CHARGETOTAL"] ,0);
        				var dtAccount = nexacro.replaceAll(this.gfnNvl(arrData[0]["ISSUE_DATE"],""),"-","");
        				if (this.dsList.getColumn(rowPos, "CD_PROOF") == "13" ) {
        						amSupply += amVat;
        						amVat = 0;
        					}
        				//trace("TAXTOTAL :: "+arrData[0]["TAXTOTAL"]);

        				if(arrData[0]["TY_SALEBUY"] == "I"){	//매입

        					this.dsList.setColumn(rowPos, "AM_EXEC_DR", amSupply);	//차변
        					this.dsList.setColumn(rowPos, "AM_EXEC_CR", "");	//대변

        					//this.dsList.setColumn(rowPos, "AM_DR", arrData[0]["CHARGETOTAL"]);	//차변
        					//this.dsList.setColumn(rowPos, "AM_CR", "");	//대변
        				}else{
        					this.dsList.setColumn(rowPos, "AM_EXEC_DR", "");	//차변
        					this.dsList.setColumn(rowPos, "AM_EXEC_CR", amSupply);	//대변

        // 					this.dsList.setColumn(rowPos, "AM_DR", "");	//차변
        // 					this.dsList.setColumn(rowPos, "AM_CR", arrData[0]["CHARGETOTAL"]);	//대변
        				}

        				// 부가세 있으면 fnVatDataSet
        				if(amVat != 0){
        					// 참고금액1(선) 공급가액 수정
        					var nextCdAcnt = this.dsList.getColumn(rowPos+1, "CD_ACCOUNT");
        					trace(nextCdAcnt + " 전자 참고금액1 공급가액 수정->" + amSupply);
        					if((nextCdAcnt == this.gCD_ACNT_VAT_SALE || nextCdAcnt == this.gCD_VATACCOUNT)){

        						this.dsList.setColumn(rowPos+1, (arrData[0]["TY_SALEBUY"] == "I" ? "AM_EXEC_DR" : "AM_EXEC_CR") , amVat);
        						this.dsList.setColumn(rowPos+1, "AM_REF1", amSupply);
        						this.dsList.setColumn(rowPos+1, "DT_ACCOUNT", dtAccount);	//회계일자

        						this.dsList.setColumn(rowPos+1, "CD_VENDOR" 	, arrData[0]["CD_VENDOR"]);		//거래처코드
        						this.dsList.setColumn(rowPos+1, "DS_VENDOR" 	, arrData[0]["DS_VENDOR"]);		//거래처명
        						this.dsList.setColumn(rowPos+1, "TY_VENDOR" 	, arrData[0]["TY_VENDOR"]);		//거래처구분
        						this.dsList.setColumn(rowPos+1, "TY_CRDR"	  	, arrData[0]["TY_CRDR"]);		//차대구분
        						this.dsList.setColumn(rowPos+1, "TY_SALEBUY"	, arrData[0]["TY_SALEBUY"]);	//거래구분
        						this.dsList.setColumn(rowPos+1, "DS_REM"		, arrData[0]["GOOD_NAME"]);		//적요(품명)
        						this.dsList.setColumn(rowPos+1, "NO_SJC"		, arrData[0]["NO_SJC"]);		//사업자번호

        						// 로컬환율 조회
        						this.fnSelectCurrExchange(rowPos+1);
        					};
        				}

        				// 로컬환율 조회
        				this.fnSelectCurrExchange(rowPos);

        				this.dsList.set_enableevent(true);

        				var colCD_ACCOUNT = this.dxGrid.getBindCellIndex("body", "CD_ACCOUNT");
        				var colCD_DEPT_BE = this.dxGrid.getBindCellIndex("body", "CD_DEPT_BE");
        				this.dxGrid.setCellPos(colCD_DEPT_BE);
        				this.dxGrid.showEditor(true);
        			}
        			break;
        		case "DHX_CFACCOUNT":	//계정코드
        			//trace("!!!!! TY_ACCOUNT :: "+arrData[0]["TY_ACCOUNT"]);

        			// 자금에서 들어온 경우
        			if(this.dsList.getColumn(rowPos, "YN_DF") == "Y"){
        				//this.fnSetGridEtcData(rowPos);		// 20201106 : 자금에서 들어온 row 는 이벤트를 타지 않도록 처리되어야 함
        			} else {

        				//계정코드 변경시 관리항목 컬럼 초기화
        				this.dsList.set_enableevent(false);
        				this.dsList.setColumn(rowPos, "CD_ETC1", "");
        				this.dsList.setColumn(rowPos, "DS_ETC11", "");
        				this.dsList.setColumn(rowPos, "CD_ETC2", "");
        				this.dsList.setColumn(rowPos, "DS_ETC21", "");
        				this.dsList.setColumn(rowPos, "NO_REF", "");
        				this.dsList.setColumn(rowPos, "DS_REF", "");
        				this.dsList.setColumn(rowPos, "NO_REF2", "");
        				this.dsList.setColumn(rowPos, "DS_REF2", "");
        				this.dsList.setColumn(rowPos, "AM_REF1", "");
        				this.dsList.setColumn(rowPos, "AM_REF2", "");
        				this.dsList.setColumn(rowPos, "DT_REF1", "");
        				this.dsList.setColumn(rowPos, "DT_REF2", "");
        				this.dsList.setColumn(rowPos, "RT_REF1", "");
        				this.dsList.setColumn(rowPos, "RT_REF2", "");

        				// 세목추가
        				//trace("계정바뀌면서 세목이 지워짐....." + this.dsList.getColumn(rowPos, "CD_SEMOK"));
        				//this.dsList.setColumn(rowPos, "CD_SEMOK", "");
        				//this.dsList.setColumn(rowPos, "DS_SEMOK", "");

        // 				var cdAccount = arrData[0]["CD_ACCOUNT"];
        // 				var nStart = cdAccount.length -2;
        // 				var cdBimok = cdAccount.substr( nStart, 2 );
        // 				this.dsList.setColumn(rowPos, "CD_BIMOK", cdBimok);
        				this.dsList.set_enableevent(true);


        				// 20201102 / jkcha / 해당되는 줄 바로위의 계정코드의 관리항목 데이터 복사
        				// (관리항목이 다른 위치에 있더라도 복사가 되도록 처리)
        				var TYPE_1, CHECK_1, TY_1, CD_1, DS_1;
        				var TYPE_2, CHECK_2, TY_2, CD_2, DS_2;

        				if (rowPos > 0) {
        					for(var i = 0 ; i < this.dsMngItem.rowcount ; i++) {
        						var TYPE_1 = this.dsMngItem.getColumn(i, "TYPE");		// 값 유형
        						var CHECK_1 = this.dsMngItem.getColumn(i, "CHECK");		// 비교값
        						var TY_1 = this.dsMngItem.getColumn(i, "TY");			// TY 값
        						var CD_1 = this.dsMngItem.getColumn(i, "CD");			// CD 값
        						var DS_1 = this.dsMngItem.getColumn(i, "DS");			// DS 값

        						for(var j = 0 ; j < this.dsMngItem.rowcount ; j++) {
        							CHECK_2 = this.dsMngItem.getColumn(j, "CHECK");

        							if (this.dsList.getColumn(rowPos, CHECK_1) == this.dsList.getColumn(rowPos - 1, CHECK_2)) {
        								TYPE_2 = this.dsMngItem.getColumn(j, "TYPE");
        								TY_2 = this.dsMngItem.getColumn(j, "TY");
        								CD_2 = this.dsMngItem.getColumn(j, "CD");
        								DS_2 = this.dsMngItem.getColumn(j, "DS");

        								if (TYPE_2 == "TY_CD_DS") {
        									this.dsList.setColumn(rowPos, CD_2 , this.dsList.getColumn(rowPos-1, CD_1));
        									this.dsList.setColumn(rowPos, DS_2 , this.dsList.getColumn(rowPos-1, DS_1));

        								} else {
        									// 추가된로우 위에 DT_REF1값을 추가된로우 AM_REF1 에다가 넣을때 에러남?
        									this.dsList.setColumn(rowPos, CD_2 , this.gfnLeft(this.dsList.getColumn(rowPos-1, CD_1),1000));
        									//this.dsList.setColumn(rowPos, CD_2 , this.dsList.getColumn(rowPos-1, CD_1));
        								}
        								break;
        							}
        						}
        					}
        				}
        			}

        			// 관리항목 그리드 셋팅
        			this.fnEtcGridSetting(rowPos);

        			var amDr = nexacro.toNumber(this.dsList.getColumn(rowPos, "AM_DR"),0);	//차변
        			var amCr = nexacro.toNumber(this.dsList.getColumn(rowPos, "AM_CR"),0);	//대변

        			//if(amDr > 0){	// 차변에 금액이 있을경우 차대구분 차변으로 변경
        			if(amDr != 0){	// 차변에 금액이 있을경우 차대구분 차변으로 변경
        				this.dsList.setColumn(rowPos, "TY_CRDR", "D");
        			}
        			//if(amCr > 0){	// 대변에 금액이 있을경우 차대구분 대변으로 변경
        			if(amCr != 0){	// 대변에 금액이 있을경우 차대구분 대변으로 변경
        				this.dsList.setColumn(rowPos, "TY_CRDR", "C");
        			}

        			// 자금에서 들어온 경우
        			// rowPos 값이 rowposition 마지막 추가 행으로 선택되어있음
        			// 현재 마지막행만 차대구분 변경이 됨
        			// 차대구분 변경 작업을 추가로 해줌 (<-변경필요)
        			if(this.dsList.getColumn(rowPos, "YN_DF") == "Y"){
        				for (var k = 0 ; k < this.dsList.rowcount ; k++) {
        					var amDr = nexacro.toNumber(this.dsList.getColumn(k, "AM_DR"));	//차변
        					if(amDr > 0){	// 차변에 금액이 있을경우 차대구분 차변으로 변경
        						this.dsList.setColumn(k, "TY_CRDR", "D");
        					}
        				}
        			}

        			if (arrData.length > 0) {
        				// 부가세 계정 변경
        				this.dsList.set_enableevent(false);
        				this.dsList.setColumn(rowPos, "CD_VATACCOUNT", arrData[0]["CD_ACCOUNT"] +"|"+ arrData[0]["DS_ACCOUNT"]);
        				this.dsList.set_enableevent(true);
        			}

        			var nAmSupply = this.dsList.getColumn(rowPos-1, "AM_SUPPLY");

        			// 관리항목 공급가액 셋팅
        			if (arrData.length > 0) {
        				var sCdAccountNew = arrData[0]["CD_ACCOUNT"];
        				if(!this.gfnIsNull(nAmSupply) && (sCdAccountNew == this.gCD_ACNT_VAT_SALE || sCdAccountNew == this.gCD_VATACCOUNT)){
        					this.dsList.setColumn(rowPos, "AM_REF1", nAmSupply);
        				};
        			}

        			var ynBudgetCtrlAcnt = (arrData.length > 0) ? arrData[0]["YN_BUDGET_CTRL_ACNT"] : "N";
        			var ynBudget = this.dsList.getColumn(rowPos, "YN_BUDGET");
        			var returnVal = this.fnSetBudgetTabData(ynBudget, ynBudgetCtrlAcnt);

        			if(this.dsList.getColumn(rowPos, "YN_VAT_ADD") != "Y"){
        				// 적요로 강제 포커스 이동
        				//this.dxGrid.set_autoenter( "select" );
        				//this.dxGrid.set_readonly(false) // set
        				var colDS_REM = this.dxGrid.getBindCellIndex("body", "DS_REM");
        				var bSucc = this.dxGrid.setCellPos( colDS_REM );
        				//this.dsList.set_rowposition(rowPos);
        				var bSuccess = this.dxGrid.showEditor( true );

        			}else{
        				this.dsList.set_rowposition((rowPos+1));

        				var colCD_ACCOUNT = this.dxGrid.getBindCellIndex("body", "CD_ACCOUNT");
        				this.dxGrid.setCellPos(colCD_ACCOUNT, (rowPos+1));
        				this.dxGrid.showEditor(true);
        			}

        			// 전표구분을 수정할수 없도록 처리 - 결산전표일때와 아닐경우 처리가 구분됨(1116100, 2102900 금액수정여부)
        			this.ccboTY_SLIP.set_enable(false);

        			break;
        		case "DHX_CFALLVENDOR_CODEFIND":	//거래처

         			//var colCD_DEPT_BE = this.dxGrid.getBindCellIndex("body", "CD_DEPT_BE");
         			//this.dxGrid.setCellPos(colCD_DEPT_BE, rowPos);
        //			this.dxGrid.showEditor(true);

         			var colYN_VAT = this.dxGrid.getBindCellIndex("body", "YN_VAT");
         			this.dxGrid.setCellPos(colYN_VAT, rowPos);

        			if (arrData.length > 0) {
        				//부가세 거래처 변경
        				this.dsList.set_enableevent(false);
        				this.dsList.setColumn(rowPos, "TY_VATVENDOR", arrData[0]["TY_VENDOR"]);
        				this.dsList.setColumn(rowPos, "CD_VATVENDOR", arrData[0]["CD_VENDOR"]);
        				this.dsList.setColumn(rowPos, "DS_VATVENDOR", arrData[0]["DS_VENDOR"]);

        				var tySaleBuy = this.dsList.getColumn(rowPos, "TY_SALEBUY");
        				var fAcnt = this.dsList.findRowExpr("currow == "+(rowPos+1)+" && CD_ACCOUNT == "+(tySaleBuy == "I" ? this.gCD_VATACCOUNT : this.gCD_ACNT_VAT_SALE)+"'");
        				if(fAcnt > -1){
        					this.dsList.setColumn((rowPos+1), "TY_VENDOR" , arrData[0]["TY_VENDOR"]);
        					this.dsList.setColumn((rowPos+1), "CD_VENDOR" , arrData[0]["CD_VENDOR"]);
        					this.dsList.setColumn((rowPos+1), "DS_VENDOR" , arrData[0]["DS_VENDOR"]);

        					if(this.gfnGetFlag(this.dsList, (rowPos+1)) != "I"){
        						this.dsList.setColumn((rowPos+1), this.ucFlag , "U");
        					}
        				}
        				this.dsList.set_enableevent(true);

        				// 거래처계좌
        				if(this.dsListSub.getColumn(0, "TY_REF") == "V" && !this.gfnIsNull(this.dsListSub.getColumn(0, "NO_REF"))){
        					this.dsListSub.setColumn(0, "NO_REF", "");
        					this.dsListSub.setColumn(0, "DS_REF", "");
        				}
        			}

        		break;
        		case "DHX_CFACNTUNIT":	//귀속부서
        			if (arrData.length > 0) {
        				//부가세 귀속부서 변경
        				this.dsList.set_enableevent(false);
        				//this.dsList.setColumn(rowPos, "CD_VATDEPT_ACNT" , arrData[0]["CD_DEPT_ACNT"] +"|"+ arrData[0]["DS_DEPT_ACNT"]);			//부가세 귀속부서
        				this.dsList.setColumn(rowPos, "CD_DEPT_ACNT_BON", arrData[0]["CD_DEPT_ACNT_BON"]);	//본사귀속부서코드
        				this.dsList.setColumn(rowPos, "DS_DEPT_ACNT_BON", arrData[0]["DS_DEPT_ACNT_BON"]);	//본사귀속부서명
        				this.dsList.setColumn(rowPos, "CD_EXEC_CURR", arrData[0]["CD_EXEC_CURR"]);	// 집행통화

        				//trace("@@@@ CD_DEPT_BUY :: "+arrData[0]["CD_DEPT_BUY"]);
        				//trace("@@@@ DS_DEPT_BUY :: "+arrData[0]["DS_DEPT_BUY"]);
        				//trace("@@@@ CD_DEPT_ACNT_BON :: "+arrData[0]["CD_DEPT_ACNT_BON"]);
        				//trace("@@@@ DS_DEPT_ACNT_BON :: "+arrData[0]["DS_DEPT_ACNT_BON"]);

        				var tySaleBuy = this.dsList.getColumn(rowPos, "TY_SALEBUY");
        				var fAcnt = this.dsList.findRowExpr("currow == "+(rowPos+1)+" && CD_ACCOUNT == "+(tySaleBuy == "I" ? this.gCD_VATACCOUNT : this.gCD_ACNT_VAT_SALE)+"'");
        				if(fAcnt > -1){
         					if(this.dsList.getColumn(rowPos, "TY_SALEBUY") == "I"){	//매입일경우
         						if(!this.gfnIsNull(this.dsList.getColumn(rowPos, "CD_DEPT_BUY"))){
        							var cdDeptAcnt = arrData[0]["CD_DEPT_BUY"];
        							var dsDeptAcnt = arrData[0]["DS_DEPT_BUY"];
        						}else{
        							var cdDeptAcnt = arrData[0]["CD_DEPT_ACNT"];
        							var dsDeptAcnt = arrData[0]["DS_DEPT_ACNT"];
        						}
        						this.dsList.setColumn(rowPos, "CD_VATDEPT_ACNT", cdDeptAcnt +"|"+ dsDeptAcnt);	//부가세 발의부서
        // 					}else{
        // 						if(this.dsList.getColumn(rowPos, "CK_BONSA") == "Y"){
        // 							var cdDeptAcnt = arrData[0]["CD_DEPT_ACNT_BON"];
        // 							var dsDeptAcnt = arrData[0]["DS_DEPT_ACNT_BON"];
        // 						}else{
        // 							var cdDeptAcnt = arrData[0]["CD_DEPT_ACNT"];
        // 							var dsDeptAcnt = arrData[0]["DS_DEPT_ACNT"];
        // 						}
        					}

        					this.dsList.setColumn((rowPos+1), "CD_DEPTOFFICER", arrData[0]["CD_DEPT_ACNT"]);
        					this.dsList.setColumn((rowPos+1), "DS_DEPTOFFICER", arrData[0]["DS_DEPT_ACNT"]);

        					this.dsList.setColumn((rowPos+1), "CD_DEPT_BE" , arrData[0]["CD_DEPT_ACNT"]);	//부가세 귀속부서코드
        					this.dsList.setColumn((rowPos+1), "DS_DEPT"    , arrData[0]["DS_DEPT_ACNT"]);	//부가세 귀속부서명
        					this.dsList.setColumn((rowPos+1), "CD_LOCAL_CURR" , arrData[0]["CD_LOCAL_CURR"]);//부가세 로컬통화

        					if(this.gfnGetFlag(this.dsList, (rowPos+1)) != "I"){
        						this.dsList.setColumn((rowPos+1), this.ucFlag , "U");
        					}

        					// 화폐단위 변경시 증빙삭제_부가세 삭제
        					if(arrData[0]["CD_LOCAL_CURR"] != "KRW" && this.dsList.getColumn( rowPos+1, "CD_LOCAL_CURR" ) != arrData[0]["CD_LOCAL_CURR"]){
        						var OrgVal = this.dsList.getColumn( rowPos+1, "CD_LOCAL_CURR" );
        						var ChgVal = arrData[0]["CD_LOCAL_CURR"];
        						trace("화폐단위 변경시 증빙삭제_부가세 삭제!! : 증빙->" + OrgVal + " / " + "바뀐부서->" + ChgVal);
        						this.fnDelVatInfo();
        					}
        				}
        				this.dsList.set_enableevent(true);

        				// 예산
        				this.dsList.setColumn(rowPos, "CD_DEPTOFFICER", arrData[0]["CD_DEPT_ACNT"]);
        				this.dsList.setColumn(rowPos, "DS_DEPTOFFICER", arrData[0]["DS_DEPT_ACNT"]);

        				var ynBudget = arrData[0]["YN_BUDGET"];
        				var ynBudgetCtrlAcnt = this.dsList.getColumn(rowPos, "YN_BUDGET_CTRL_ACNT");
        				this.fnSetBudgetTabData(ynBudget, ynBudgetCtrlAcnt);


        				// 통화, 로컬환율, 원화환율, 집행화, 로컬화, 원화 금액 초기화
        				//this.dsList.setColumn(this.dsList.rowposition, "CD_EXEC_CURR"  , arrData[0]["CD_LOCAL_CURR"]);

        				// 로컬환율 조회
        				this.fnSelectCurrExchange(rowPos);

        				var sIssueId = this.gfnTrim(this.dsList.getColumn(this.dsList.rowposition, "ISSUE_ID"));
        				var sYnVat = this.gfnTrim(this.dsList.getColumn(this.dsList.rowposition, "YN_VAT"));
        				// 전자세금계산서 번호가 있고 증빙을 입력 안했을경우
        				if(!this.gfnIsNull(sIssueId) && sYnVat == "N"){
        					trace("부서 변경! 전자세금계산서 번호가 있고 증빙을 입력 안했을경우");
        					this.fnCallVatPopup();
        					return;
        				}

        				//var colCD_ACCOUNT = this.dxGrid.getBindCellIndex("body", "CD_ACCOUNT");
        				var nCellIdxFocus = this.dxGrid.getBindCellIndex("body", "CD_EXEC_CURR");
        				this.dxGrid.setCellPos(nCellIdxFocus);
        				this.dxGrid.showEditor(true);
        			}
        		break;

        		case "DHX_CFCURRENCY_EXCHAGE":	// 통화
         			//var colYN_VAT = this.dxGrid.getBindCellIndex("body", "YN_VAT");
         			//this.dxGrid.setCellPos(colYN_VAT, rowPos);
        			if (arrData.length > 0) {
        				// 로컬화, 원화 계산
        				this.fnSetAmAccouont(rowPos);

        				//부가세
        				this.dsList.set_enableevent(false);

        				var tySaleBuy = this.dsList.getColumn(rowPos, "TY_SALEBUY");
        				var fAcnt = this.dsList.findRowExpr("currow == "+(rowPos+1)+" && CD_ACCOUNT == "+(tySaleBuy == "I" ? this.gCD_VATACCOUNT : this.gCD_ACNT_VAT_SALE)+"'");
        				if(fAcnt > -1){
        					// 화폐단위 변경시 증빙삭제_부가세 삭제
        					if(arrData[0]["CD_EXEC_CURR"] != "KRW" && this.dsList.getColumn( rowPos+1, "CD_EXEC_CURR" ) != arrData[0]["CD_EXEC_CURR"]){
        						var OrgVal = this.dsList.getColumn( rowPos+1, "CD_EXEC_CURR" );
        						var ChgVal = arrData[0]["CD_EXEC_CURR"];
        						trace("화폐단위 변경시 증빙삭제_부가세 삭제!! : 증빙->" + OrgVal + " / " + "바뀐부서->" + ChgVal);
        						this.fnDelVatInfo();
        					}
        				}
        				this.dsList.set_enableevent(true);

        			}

        		break;
         	}
        	//trace("부가세 계정코드 :: "+this.dsList.getColumn(rowPos, "CD_VATACCOUNT"));
        	//trace("부가세 거래처구분 :: "+this.dsList.getColumn(rowPos, "TY_VATVENDOR"));
        	//trace("부가세 거래처코드 :: "+this.dsList.getColumn(rowPos, "CD_VATVENDOR"));
        	//trace("부가세 거래처명 :: "+this.dsList.getColumn(rowPos, "DS_VATVENDOR"));
        	//trace("부가세 귀속부서 :: "+this.dsList.getColumn(rowPos, "CD_VATDEPT_ACNT"));
        	//trace("부가세 본사귀속부서코드 :: "+this.dsList.getColumn(rowPos, "CD_DEPT_ACNT_BON"));
        	//trace("부가세 본사귀속부서명 :: "+this.dsList.getColumn(rowPos, "DS_DEPT_ACNT_BON"));
        };

        // 셀 수정가능 여부 (반드시 EnterCell에서 처리할것)
        // cell 수정안되는것만 return false 할것
        // 마지막에 return true 해버리면 전체 컬럼 수정가능해져버림
        this.fnGrid_EnterCell = function(obj, row, cell) {
        	var colnm = this.gfnGridGetBindColumnNameByIndex(obj, cell);
        	// 승인건 수정불가처리
        	var YN_APPR = this.dsList.getColumn(row, "YN_APPR");
        	var CD_AUTOSLIP = this.dsList.getColumn(row, "CD_AUTOSLIP");
        	var CD_APP = this.dsList.getColumn(row, "CD_APP");
        	var ST_APRV = this.dsList.getColumn(row, "ST_APRV");
        	var ISSUE_ID = this.dsList.getColumn(row, "ISSUE_ID");
        	var CD_SLIP_MI = this.dsList.getColumn(row, "CD_SLIP_MI");
        	trace(colnm + "  33셀 수정가능 여부 YN_APPR : " + YN_APPR + " / CD_AUTOSLIP : " + CD_AUTOSLIP + " / CD_APP : " + CD_APP);

        	if(colnm == "FILE_ATTACH") {
        		return true;
        	}

        	if(!this.gfnIsNull(CD_AUTOSLIP)){
        		if (!(CD_AUTOSLIP =="DHA0017" && this.UserInfo.YN_SLIP_OK == "Y")) //취소전표는 전표승인자만 수정가능
        	   {
        	   	 return false;
        	   }
        	}

        	if(YN_APPR == "Y"){
        		return false;
        	}

        	//01	상신  02	결재중 03	결재완료
        	// 결재상태 결재중, 결재완료
        // 	if(CD_APP == "01" || CD_APP == "02" || CD_APP == "03"){
        // 		return false;
        // 	}

        	// 전자결재상태ST_APRV 공통코드 DZ - DZ_APRV
        	// 1임시저장	2결재상신	3결재중	4결재완료	5반려	6상신취소	7작성취소
        	if(ST_APRV == "1" || ST_APRV == "2" || ST_APRV == "3" || ST_APRV == "4"){
        		return false;
        	}

        	if(colnm == "YN_VAT"){
        		return false;
        	}

        	//if(colnm == "DS_VENDOR" || colnm == "DS_DEPT" || colnm == "DS_ACCOUNT"){
        	if(colnm == "DS_DEPT" || colnm == "DS_ACCOUNT"){
        		return false;
        	}

        	// 로컬환율, 원화환율, 차변, 차변로컬화, 대변, 대변로컬화
        	//원화 수정 가능으로 수정 06/20 KDY
        	if(colnm == "RT_LOCAL_EXCH" || colnm == "RT_KRW_EXCH" || colnm == "CD_LOCAL_CURR" ){
        	//if(colnm == "RT_LOCAL_EXCH" || colnm == "RT_KRW_EXCH" || colnm == "CD_LOCAL_CURR" || colnm == "AM_DR" || colnm == "AM_CR"){
        	//if(colnm == "RT_LOCAL_EXCH" || colnm == "RT_KRW_EXCH" || colnm == "CD_LOCAL_CURR" || colnm == "AM_DR" || colnm == "AM_LOCAL_DR" || colnm == "AM_CR" || colnm == "AM_LOCAL_CR"){
        		return false;
        	}

        	//if(!this.gfnIsNull(CD_SLIP_MI) && (colnm == "AM_DR" || colnm == "AM_CR" || colnm == "CD_VENDOR" || colnm == "DS_VENDOR")){
        	if(!this.gfnIsNull(CD_SLIP_MI) && (colnm == "AM_EXEC_DR" || colnm == "AM_EXEC_CR" || colnm == "DS_VENDOR"
        									|| colnm == "AM_LOCAL_DR" || colnm == "AM_USD_DR" || colnm == "AM_EUR_DR"
        									|| colnm == "AM_LOCAL_CR" || colnm == "AM_USD_CR" || colnm == "AM_EUR_CR")){
        		return false;
        	}

        	//if(!this.gfnIsNull(ISSUE_ID) && (colnm == "DT_ACCOUNT" || colnm == "AM_DR" || colnm == "AM_CR" || colnm == "CD_VENDOR" || colnm == "DS_VENDOR")){
        	if(!this.gfnIsNull(ISSUE_ID) && (colnm == "AM_EXEC_DR" || colnm == "AM_EXEC_CR" || colnm == "DS_VENDOR"
        									|| colnm == "AM_LOCAL_DR" || colnm == "AM_USD_DR" || colnm == "AM_EUR_DR"
        									|| colnm == "AM_LOCAL_CR" || colnm == "AM_USD_CR" || colnm == "AM_EUR_CR")){
        		return false;
        	}

        	//return true;
        }

        this.fnGridSub_AfterCDTextChanged = function(id, codeFindData) {
        	var arr = codeFindData;
        	var rowPos = this.dsListSub.rowposition;

        	switch(id) {
        		case "DHX_CFETC_CODEFIND1":
        		case "DHX_CFETC_CODEFIND2":
        		case "DHX_CFETC_CODEFIND3":
        		case "DHX_CFETC_CODEFIND4":
        		case "DWX_CFTREESHCOST_01":		// 공종
        		case "DHX_CFACSEMOK":			// 세목
        			//데이터 복사 처리
        			this.fnCopyData(this.dsListSub, rowPos);
        		break;
         	}
        };

        /************************************************************************
         * 그리드 이벤트
         ************************************************************************/
        this.fnGrid_RowCellChanged = function(obj,e)
        {
            if ((obj.oldrow > -1 && obj.oldrow == e.row) || (obj.oldrow == -1 && e.oldrow != e.row)) {
        		//this.FormBtns.SubSelect.click();
        		//관리항목 데이터 셋팅
        		obj.oldrow = -1;
        	}
        };

        //그리드 더블클릭 이벤트
        this.fnGrid_CellDblclick = function(obj,e)
        {
        	var colName = this.gfnGridGetBindColumnNameByIndex(obj, e.cell);

        	if(colName == "YN_VAT"){	//증빙일 경우
        		this.fnCallVatPopup();
        	}
        };

        //그리드 값변경 이벤트
        this.dsList_ColumnChanged = function(obj, e)
        {
        	trace("그리드 값변경 이벤트 " + e.columnid + "/" + e.newvalue)

        	//전자세금계산서번호
        	if(e.columnid == "ISSUE_ID"){
        		if(e.newvalue != e.oldvalue && this.gfnIsNull(e.newvalue)){
        			//obj.setColumn(e.row, "TY_SALEBUY" , "");		// 거래구분 초기화
        			obj.setColumn(e.row, "TY_ISSUE"   , "P");		// 발행구분(일반)
        		}
        	}

        	// 통화
        	if(e.columnid == "CD_EXEC_CURR"){
        		if(this.gfnIsNull(e.newvalue)){


        			// 통화, 로컬환율, 원화환율, 집행화, 로컬화, 원화 금액 초기화
        			this.fnSetInitAmAcntCurr(e.row)
        			/*
        			var initColNm = (e.columnid == "AM_EXEC_DR" ? "_CR" : "_DR");
        			var tyCrdr = (e.columnid == "AM_EXEC_DR" ? "D" : "C");


        			obj.setColumn(e.row, "AM_EXEC_DR", 0);
        			obj.setColumn(e.row, "AM_EXEC_CR", 0);

        			obj.setColumn(e.row, "AM_LOCAL_DR", 0);	// 로컬화
        			obj.setColumn(e.row, "AM_LOCAL_CR", 0);	// 로컬화
        			obj.setColumn(e.row, "AM_DR", 0);		// 원화
        			obj.setColumn(e.row, "AM_CR", 0);		// 원화
        			*/
        			var colCD_EXEC_CURR = this.dxGrid.getBindCellIndex("body", "CD_EXEC_CURR");
        			this.dxGrid.setCellPos(colCD_EXEC_CURR);
        			this.dxGrid.showEditor(true);
        		}
        	}

        	// 집행화금액(차변/대변)
        	if(e.columnid == "AM_EXEC_DR" || e.columnid == "AM_EXEC_CR" ){
        		trace(e.columnid + " 집행화금액 변경되고 ->" + this.dsList.rowposition);

        		//obj.setColumn(e.row, "AM_DR", e.newvalue);
        		// AM_EXEC_DR // 차변집행화
        		// AM_EXEC_CR // 대변집행화
        		//var colIdAm = (e.columnid == "AM_EXEC_DR" ? "AM_EXEC_CR" : "AM_EXEC_DR");
        		var initColNm = (e.columnid == "AM_EXEC_DR" ? "_CR" : "_DR");
        		var tyCrdr = (e.columnid == "AM_EXEC_DR" ? "D" : "C");

        		var sTyCrdrCurrent  = obj.getColumn(e.row, "TY_CRDR");
        		var sCdProof = this.dsList.getColumn(e.row, "CD_PROOF");
        		trace("차대구분:" + sTyCrdrCurrent + "->" + tyCrdr + "\n 증빙:" + sCdProof);

        		if( !this.gfnIsNull(sCdProof) && ((sTyCrdrCurrent=="C" && tyCrdr == "D" ) || (sTyCrdrCurrent=="D" && tyCrdr == "C"))){
        			trace("차변 OR 대변 수정시 증빙지우기");
        			this.dsList.setColumn(e.row, "CD_PROOF", "");
        			this.dsList.setColumn(e.row, "TY_VATBGJE", "");	// 불공제사유 초기화
        		}
        		obj.setColumn(e.row, "AM_EXEC" + initColNm, 0);		// 집행화
        		obj.setColumn(e.row, "AM_LOCAL" + initColNm, 0);	// 로컬화
        		obj.setColumn(e.row, "AM_USD" + initColNm, 0);		// 미화
        		obj.setColumn(e.row, "AM_EUR" + initColNm, 0);		// 유료화
        		obj.setColumn(e.row, "AM" + initColNm, 0);			// 원화
        		obj.setColumn(e.row, "AM_SUPPLY", 0);				// 부가세공급가
        		//obj.setColumn(e.row, "AM_SUPPLY", e.newvalue);	// 부가세공급가
        		obj.setColumn(e.row, "TY_CRDR"  , tyCrdr);			// TY_CRDR

        		var vatRate = nexacro.toNumber(obj.getColumn(e.row, "VAT_RATE") ,0);	//부가세율
        		if(!this.gfnIsNull(obj.getColumn(e.row, "VAT_RATE"))){

        			var amVat = (vatRate == 0 ? 0 : this.fnGetTrunc(nexacro.toNumber(e.newvalue ,0) / vatRate,1));

        			obj.setColumn(e.row, "AM_VAT", amVat);	//부가세

        			if(this.gfnGetFlag(obj, e.row) != "D"){
        				var nextCdAcnt = obj.getColumn((e.row+1), "CD_ACCOUNT");

        				// 참고금액1(선) 공급가액 수정
        				trace("참고금액1(선) 공급가액 수정->" + e.newvalue);
        				if(!this.gfnIsNull(e.newvalue) && (nextCdAcnt == this.gCD_ACNT_VAT_SALE || nextCdAcnt == this.gCD_VATACCOUNT)){
        					obj.setColumn(e.row+1, "AM_REF1", e.newvalue);
        				};

        				if(nextCdAcnt == this.gCD_VATACCOUNT){	//선급부가세일경우
        					obj.setColumn((e.row+1), "AM_EXEC_DR"	, amVat);	//차변
        					obj.setColumn((e.row+1), "AM_EXEC_CR"	, "");		//대변

        					// 로컬화, 원화 계산
        					this.fnSetAmAccouont((e.row+1));

        					if(this.gfnGetFlag(obj, e.row) != "I"){
        						obj.setColumn((e.row+1), this.ucFlag, "U");		//상태값
        					}
        				}
        				if(nextCdAcnt == this.gCD_ACNT_VAT_SALE){	//선수부가세일경우
        					obj.setColumn((e.row+1), "AM_EXEC_DR"	, "");		//차변
        					obj.setColumn((e.row+1), "AM_EXEC_CR"	, amVat);	//대변

        					// 로컬화, 원화 계산
        					this.fnSetAmAccouont((e.row+1));

        					if(this.gfnGetFlag(obj, e.row) != "I"){
        						obj.setColumn((e.row+1), this.ucFlag, "U");		//상태값
        					}
        				}
        			}
        		}

        		// 로컬화, 원화 계산
        		this.fnSetAmAccouont(e.row);

        		//하단 금액 계산
        		this.fnCalcSlip();
        	}

        	if(e.columnid == "AM_DR" || e.columnid == "AM_CR" || e.columnid == "AM_LOCAL_DR" || e.columnid == "AM_LOCAL_CR"){	//차변 OR 대변 수정시
        		//하단 금액 계산
        		this.fnCalcSlip();
        	}
        	/*
        	// 집행화금액 변경식 자동계산됨 READONLY로 변경해서 사용안함 by cej 20230202
        	if(e.columnid == "AM_DR" || e.columnid == "AM_CR"){	//차변 OR 대변 수정시
        		var colIdAm = (e.columnid == "AM_DR" ? "AM_CR" : "AM_DR");
        		var tyCrdr = (e.columnid == "AM_DR" ? "D" : "C");

        		var sTyCrdrCurrent  = obj.getColumn(e.row, "TY_CRDR");
        		var sCdProof = this.dsList.getColumn(e.row, "CD_PROOF");
        		trace("차대구분:" + sTyCrdrCurrent + "->" + tyCrdr + "\n 증빙:" + sCdProof);
        		if( !this.gfnIsNull(sCdProof) && ((sTyCrdrCurrent=="C" && tyCrdr == "D" ) || (sTyCrdrCurrent=="D" && tyCrdr == "C"))){
        			trace("차변 OR 대변 수정시 증빙지우기");
        			this.dsList.setColumn(e.row, "CD_PROOF", "");
        			this.dsList.setColumn(e.row, "TY_VATBGJE", "");	// 불공제사유 초기화
        		}

        		obj.setColumn(e.row, colIdAm     , "0");		//금액
        		obj.setColumn(e.row, "TY_CRDR"  , tyCrdr);		//TY_CRDR
        		obj.setColumn(e.row, "AM_SUPPLY", e.newvalue);	//부가세공급가

        		var vatRate   = nexacro.toNumber(obj.getColumn(e.row, "VAT_RATE") ,0);	//부가세율
        		if(!this.gfnIsNull(obj.getColumn(e.row, "VAT_RATE"))){

        			var amVat = (vatRate == 0 ? 0 : nexacro.floor(nexacro.toNumber(e.newvalue ,0) / vatRate));

        			obj.setColumn(e.row, "AM_VAT", amVat);	//부가세

        			if(this.gfnGetFlag(obj, e.row) != "D"){
        				var nextCdAcnt = obj.getColumn((e.row+1), "CD_ACCOUNT");

        				// 참고금액1(선) 공급가액 수정
        				trace("참고금액1(선) 공급가액 수정->" + e.newvalue);
        				if(!this.gfnIsNull(e.newvalue) && (nextCdAcnt == this.gCD_ACNT_VAT_SALE || nextCdAcnt == this.gCD_VATACCOUNT)){
        					obj.setColumn(e.row+1, "AM_REF1", e.newvalue);
        				};

        				if(nextCdAcnt == this.gCD_VATACCOUNT){	//선급부가세일경우
        					// 20200908 : 증빙자료에서 매입, 세금계산서 불공제건은 금액을  "0" 으로 처리함
        					//if (obj.getColumn(e.row, "TY_SALEBUY") == "I" && obj.getColumn(e.row, "CD_PROOF") == "13") {
        // 						amVat = 0;
        // 					}

        					obj.setColumn((e.row+1), "AM_DR"	, amVat);	//차변
        					obj.setColumn((e.row+1), "AM_CR"	, "");		//대변

        					if(this.gfnGetFlag(obj, e.row) != "I"){
        						obj.setColumn((e.row+1), this.ucFlag, "U");		//상태값
        					}
        				}
        				if(nextCdAcnt == this.gCD_ACNT_VAT_SALE){	//선수부가세일경우
        					obj.setColumn((e.row+1), "AM_DR"	, "");		//차변
        					obj.setColumn((e.row+1), "AM_CR"	, amVat);	//대변
        					if(this.gfnGetFlag(obj, e.row) != "I"){
        						obj.setColumn((e.row+1), this.ucFlag, "U");		//상태값
        					}
        				}
        	// 			if(nextCdAcnt == CD_VATACCOUNT || nextCdAcnt == CD_ACNT_VAT_SALE){	//선급부가세/선수부가세일경우
        	// 				obj.setColumn((e.row+1), e.columnid, amVat);	//부가세
        	// 				obj.setColumn((e.row+1), this.ucFlag, "U");		//상태값
        	// 			}
        			}
        		}

        		//하단 금액 계산
        		this.fnCalcSlip();

        		if(this.fnBjDataCheck(e.row)){
        			//반제전표 코드가 없으면 반제전표 팝업 호출
        			if(this.gfnIsNull(this.gfnTrim(this.dsList.getColumn(e.row, "CD_SLIP_MI")))){
        				//this.dxGrid.removeEventHandler("onkeydown", this._grd_onkeydown, this);
        				//var nIndex = this.dxGrid.findEventHandler("onkeydown", this.fnGrid_onkeydown, this );

        				//trace("@@@ nIndex >>>  "+nIndex);
        				//if(nIndex > -1) this.dxGrid.removeEventHandler("onkeydown", this.fnGrid_onkeydown, this);
        				//반제전표 자동의로 팝업호출
        				//this.btnSlipBanje.click();
        			}
        		}
        		//trace("부가세 공급가 :: "+obj.getColumn(e.row, "AM_SUPPLY"));
        		//trace("부가세 부가세 :: "+obj.getColumn(e.row, "AM_VAT"));
        	}
        	*/
        	//적요
        	if(e.columnid == "DS_REM"){
        		obj.setColumn(e.row, "DS_VATREM" , e.newvalue);		//부가세적요

        		//trace("부가세 적요 :: "+obj.getColumn(e.row, "DS_VATREM"));
        		var tySaleBuy = obj.getColumn(e.row, "TY_SALEBUY");
        		var fAcnt = obj.findRowExpr("currow == "+(e.row+1)+" && CD_ACCOUNT == "+(tySaleBuy == "I" ? this.gCD_VATACCOUNT : this.gCD_ACNT_VAT_SALE)+"'");
        		if(fAcnt > -1){
        			obj.setColumn((e.row+1), e.columnid , e.newvalue);

        			if(this.gfnGetFlag(obj, (e.row+1)) != "I"){
        				obj.setColumn((e.row+1), this.ucFlag , "U");
        			}
        		}
        	}

        	//회계일자
        	if(e.columnid == "DT_ACCOUNT"){

        		var sIssueId = obj.getColumn(e.row, "ISSUE_ID");
        		if(this.gfnIsNull(sIssueId)){
        			// 전자세금계산서번호
        			obj.setColumn(e.row, "DT_PROOF" , e.newvalue);		//부가세 증빙일자
        		}

        		var DS_REM = this.dsList.getColumn(this.dsList.rowposition, "DS_REM");
        		var DT_PROOF = this.dsList.getColumn(this.dsList.rowposition, "DT_PROOF");
        		var DT_ACCOUNT = e.newvalue;
        		if(e.newvalue != e.oldvalue && !this.gfnIsNull(e.newvalue)){
        			var DS_ALERT_MSG = (DT_ACCOUNT.substring(0, 6) != DT_PROOF.substring(0, 6)) ? "[증빙월차이] " : "";
        			trace("증빌일자->" + DT_PROOF + "/ 회계일자->" + DT_ACCOUNT);
        			if(DS_REM.substring(0, 8) == "[증빙월차이] "){
        				DS_REM = DS_REM.substring(8, DS_REM.toString().length);
        			}
        			this.dsList.setColumn(this.dsList.rowposition, "DS_REM", DS_ALERT_MSG + DS_REM);

        			if(e.row == 0){
        				this.dsSearch.set_enableevent(false);
        				this.calDT_ACCOUNT.set_value(e.newvalue);
        				this.dsSearch.set_enableevent(true);
        			}
        		}

        		if(this.gfnIsNull(this.gfnTrim(this.dsList.getColumn(e.row, "CD_SLIP_MI")))){
        			var dtToday = this.gfnGetDate().substr(0,8);
        			trace("e.newvalue->" + e.newvalue + " / dtToday->" + dtToday);
        			if(this.gfnIsNull(e.newvalue) || (e.newvalue > this.gfnGetDate().substr(0,8))){
        				// 통화, 로컬환율, 원화환율, 집행화, 로컬화, 원화 금액 초기화
        				this.fnSetInitAmAcntCurr(this.dsList.rowposition);
        			}else{
        				// 환율조회
        				this.fnSelectCurrExchange(e.row);
        			}
        		}

        		//trace("부가세 증빙일자 :: "+obj.getColumn(e.row, "DT_ACCOUNT"));

        		var tySaleBuy = obj.getColumn(e.row, "TY_SALEBUY");
        		var fAcnt = obj.findRowExpr("currow == "+(e.row+1)+" && CD_ACCOUNT == "+(tySaleBuy == "I" ? this.gCD_VATACCOUNT : this.gCD_ACNT_VAT_SALE)+"'");
        		if(fAcnt > -1){
        			obj.setColumn((e.row+1), e.columnid , e.newvalue);
        			obj.setColumn((e.row+1), "DS_REM", DS_ALERT_MSG + DS_REM);
        			if(this.gfnGetFlag(obj, (e.row+1)) != "I"){
        				obj.setColumn((e.row+1), this.ucFlag , "U");
        			}
        		}
        	}

        	//증빙
        	if(e.columnid == "YN_VAT"){
        		var ynVatOrg = obj.getOrgColumn(e.row, e.columnid);
        		var tySaleBuy = obj.getColumn(e.row, "TY_SALEBUY");	//거래구분
        		var fAcnt = obj.findRowExpr("currow == "+(e.row+1)+" && CD_ACCOUNT == "+(tySaleBuy == "I" ? this.gCD_VATACCOUNT : this.gCD_ACNT_VAT_SALE)+"'");

        		if(e.newvalue == "N" && ynVatOrg == "Y"){
        			if(fAcnt > -1){
        				if(this.gfnGetFlag(obj, e.row) == "I"){
        					obj.deleteRow((e.row+1));
        				}else{
        					this.dsList.setColumn(fAcnt, this.ucFlag, "D");

        					this.dsList.setColumn(e.row, "YN_VAT", "N");
        					this.dsList.setColumn(e.row, "FLAG_V", "D");
        				}
        			}
        		}else{
        			if(fAcnt > -1){
        				if(this.gfnGetFlag(obj, e.row) != "I"){
        					this.dsList.setColumn(fAcnt, this.ucFlag, obj.getOrgColumn(e.row, this.ucFlag));
        					this.dsList.setColumn(e.row, "YN_VAT", ynVatOrg);
        					this.dsList.setColumn(e.row, "FLAG_V", obj.getOrgColumn(e.row, "FLAG_V"));
        				}else{
        					obj.deleteRow((e.row+1));
        				}
        			}
        		}

        	}

        // 	if (e.columnid == "YN_DEPT") {
        //
        // 		var ynBudget = this.dsList.getColumn(e.row, "YN_BUDGET");
        // 		var ynBudgetCtrlAcnt = this.dsList.getColumn(e.row, "YN_BUDGET_CTRL_ACNT");
        // 		if(ynBudget == "Y" && ynBudgetCtrlAcnt == "Y"){
        // 			if (e.newvalue == "Y") {
        // 				var cdDept = this.dsList.getColumn(this.dsList.rowposition, "CD_DEPT_BE");
        // 				this.ccfCD_DEPTOFFICER.form.CDTextBox.set_value(cdDept);
        // 				this.ccfCD_DEPTOFFICER.form.fnCodeFindLoad();
        // 			}
        // 		}
        // 	}

        	if (e.columnid == "CD_BIMOK") {

        // 		this.dsList.set_enableevent(false);
         		var cdBimok = this.dsList.getColumn(this.dsList.rowposition, "CD_BIMOK");
        		if(this.gfnIsNull(e.newvalue)){
        			this.dsList.setColumn(this.dsList.rowposition, "CD_SEMOK", "");
        			this.dsList.setColumn(this.dsList.rowposition, "DS_SEMOK", "");
        		}
        // 		this.dsList.set_enableevent(true);
        	}

        	if (e.columnid == "CD_SEMOK") {

        // 		this.dsList.set_enableevent(false);
         		var cdSemok = this.dsList.getColumn(this.dsList.rowposition, "CD_SEMOK");

        		if(this.gfnIsNull(e.newvalue)){
        			this.dsListBudget.clearData();
        			this.dsList.setColumn(this.dsList.rowposition, "NO_REF2", "");
        			this.staMM_PERIOD.set_text( "기간");
        		}else{
        			this.selectBudget();
        		}

        // 		this.dsListSub.setColumn(this.dsListSub.rowposition, "CD_SEMOK", cdSemok);

        // 		this.dsList.set_enableevent(true);
        	}

        	if (e.columnid == "CD_ACCOUNT" || e.columnid == "CD_DEPT_BE") {
        		if(this.gfnIsNull(e.newvalue)){

        			var ynBudget = this.dsList.getColumn(e.row, "YN_BUDGET");	// 예산부서여부
        			var ynBudgetCtrlAcnt = this.dsList.getColumn(e.row, "YN_BUDGET_CTRL_ACNT");
        			this.fnSetBudgetTabData("N", "N");

        			if (e.columnid == "CD_ACCOUNT"){
        				// 관리항목 그리드 셋팅
        				this.fnEtcGridSetting(e.row);

        				var colDS_REM = this.dxGrid.getBindCellIndex("body", "CD_ACCOUNT");
        				//this.dsList.set_rowposition(rowPos);
        				this.dxGrid.setCellPos(colDS_REM);
        				this.dxGrid.showEditor(true);
        			}

        			if (e.columnid == "CD_DEPT_BE"){
        				// 통화, 로컬환율, 원화환율, 집행화, 로컬화, 원화 금액 초기화
        				this.fnSetInitAmAcntCurr(e.row);

        				this.dsList.setColumn(e.row, "CD_DEPTOFFICER", "");
        				this.dsList.setColumn(e.row, "DS_DEPTOFFICER", "");

        			}
        		}
        	}

        	if(e.columnid == "CD_VENDOR"){
        		if(e.newvalue != e.oldvalue && this.gfnIsNull(e.newvalue)){
        			// 거래처계좌
        			if(this.dsListSub.getColumn(0, "TY_REF") == "V" && !this.gfnIsNull(this.dsListSub.getColumn(0, "NO_REF"))){
        				this.dsListSub.setColumn(0, "NO_REF", "");
        				this.dsListSub.setColumn(0, "DS_REF", "");
        			}
        		}
        	}

        	//데이터가 수정되면 전표복사 비활성
        	this.btnSlipCopy.set_enable(false);
        	this.btnSlipCopy2.set_enable(false);
        }

        this.fnSetBudgetTabData = function(ynBudget, ynBudgetCtrlAcnt){
        	var nRow = this.dsList.rowposition;
        	var flag = this.gfnGetFlag(this.dsList, nRow);
        	var TY_SLIP = this.ccboTY_SLIP.value;	// A09 전표유형 - 02	결산전표
        	// && TY_SLIP != "02"
        	if(ynBudget == "Y" && ynBudgetCtrlAcnt == "Y"){

        		// 예산텝 활성화
        		this.tabData.set_tabindex(1);
        		this.dsListBudget.clearData();

        		if (!this.gfnIsNull(this.dsList.getColumn(nRow, "CD_DEPTOFFICER"))
        				 && !this.gfnIsNull(this.dsList.getColumn(nRow, "CD_BIMOK"))
        				 && !this.gfnIsNull(this.dsList.getColumn(nRow, "CD_SEMOK"))){
        					this.selectBudget();
        		}else{

        			if(flag == "I" || flag == "U"){	// 전표발행화면 신규입력
        				// 계정코드 왼쪽 2자리
        				var cdAccount = this.dsList.getColumn(this.dsList.rowposition, "CD_ACCOUNT");
        				var cdDept = this.dsList.getColumn(this.dsList.rowposition, "CD_DEPT_BE");
        				var dsDept = this.dsList.getColumn(this.dsList.rowposition, "DS_DEPT");
        				var sCdBimok = this.dsList.getColumn(this.dsList.rowposition, "CD_BIMOK");
        				var sDsBimok = this.dsList.getColumn(this.dsList.rowposition, "DS_BIMOK");

        				// 부서
        				//this.ccfCD_DEPTOFFICER.form.CDTextBox.set_value(cdDept);
        // 				this.dsList.setColumn(this.dsList.rowposition, "CD_DEPTOFFICER", cdDept);
        // 				this.dsList.setColumn(this.dsList.rowposition, "DS_DEPTOFFICER", dsDept);
        				//this.ccfCD_DEPTOFFICER.form.fnCodeFindLoad();

        				var nStart = cdAccount.length -2;
        				var cdBimok = cdAccount.substr( nStart, 2 );

        				if(this.gfnIsNull(this.dsList.getColumn(nRow, "CD_SEMOK"))){
        					this.dsList.setColumn(this.dsList.rowposition, "CD_SEMOK", "01");
        					this.ccfCD_SEMOK.form.fnCodeFindLoad();
        					this.selectBudget();
        				}


        				// 비목
        	//			if(this.gfnIsNull(sDsBimok) || (sCdBimok != cdBimok)){
        				//if(this.gfnIsNull(sDsBimok)){
        	// 				//this.ccfCD_BIMOK.form.CDTextBox.set_value(cdBimok);
        	// 				this.dsList.setColumn(this.dsList.rowposition, "CD_BIMOK", cdBimok);
        	// 				this.ccfCD_BIMOK.form.fnCodeFindLoad();
        	// 			}
        			}
        		}

        	}else{
        		this.dsListBudget.clearData();
        		this.tabData.set_enableevent(false) // set
        		this.tabData.set_tabindex(0);
        		this.tabData.set_enableevent(true) // set
        	}
        }

        //관리항목 그리드 값변경 이벤트
        this.dsListSub_ColumnChanged = function(obj, e)
        {
        	var colId = e.columnid;
        	var tyCol = colId.substring(0, 2);

        	if(tyCol == "TY"){
        		var tyMng = colId.substring(colId.indexOf("_")+1, colId.length);
        		if(e.oldvalue != e.newvalue){
        			var colCd = (tyMng.indexOf("REF") > -1 ? "NO_"+tyMng : "CD_"+tyMng);
        			obj.setColumn(e.row, colCd, "");
        			obj.setColumn(e.row, "DS_"+tyMng, "");
        		}
        	}

        	this.fnCopyData(obj, e.row);

        	//데이터가 수정되면 전표복사 비활성
        	this.btnSlipCopy.set_enable(false);
        	this.btnSlipCopy2.set_enable(false);
        }

        //그리드 로우변경 이벤트
        this.dsList_Rowposchanged = function(obj,e)
        {
        	//trace("gfnGetFlag !!! "+this.gfnGetFlag(obj, e.newrow));
        	var nTabindex = this.tabData.tabindex // get
        // 	if(nTabindex > 0){
        // 		this.tabData.set_tabindex(0);
        // 	}
        //
        	// 예산
        	var ynBudgetCtrlAcnt = this.dsList.getColumn(e.newrow, "YN_BUDGET_CTRL_ACNT");
        	var ynBudget = this.dsList.getColumn(e.newrow, "YN_BUDGET");
        	this.fnSetBudgetTabData(ynBudget, ynBudgetCtrlAcnt);

        	this.fnEtcGridSetting(e.newrow);

        	if(this.gfnGetFlag(obj, e.newrow) == "I") {
        		this.gfnSetEnable(this.btnDFPopup, false);
        	} else {
        		//미수/미불구분이 미불(0)일경우
        		if(obj.getColumn(e.newrow, "TY_ACCOUNT") == "0"){
        			this.gfnSetEnable(this.btnDFPopup, true);
        		}else{
        			this.gfnSetEnable(this.btnDFPopup, false);
        		}
        	}

        	// 전표결제, 결제조회 버튼 활성화 여부
        // 	if( !this.gfnIsNull(this.dsList.getColumn(this.dsList.rowposition , "NO_DOC")) ){
        // 		this.btnSchApprove.set_enable(true);
        // 	} else {
        // 		this.btnSchApprove.set_enable(false);
        // 	}
        };

        /************************************************************************
         * 기타 이벤트
         ************************************************************************/
        this.divData_ondragmove = function(obj,e)
        {
        	if(e.userdata == "splitter") {
        		this.divData.form.divSplitter.set_top(e.clienty);
        		this.divData.form.resetScroll();
        	}
        };

        this.divData_divSplitter_ondrag = function(obj,e)
        {
        	e.set_userdata("splitter");
        	return true;
        };

        /************************************************************************
        * 서브 버튼 이벤트
        ************************************************************************/
        this.fnDataValidate = function(){
        	var sExpr = this.ucFlag +" != 'D' && "+ this.ucFlag + " != 'DU'";	//삭제 데이터 제외

        	// 로컬화
        	var amDrLocalSum = nexacro.toNumber(this.dsList.getCaseSum(sExpr, "AM_LOCAL_DR"), 0);
        	var amCrLocalSum = nexacro.toNumber(this.dsList.getCaseSum(sExpr, "AM_LOCAL_CR"), 0);

        	var amDrLocalsumfixed = this.fnGetTrunc(amDrLocalSum,100)  // 소숫점 둘째 자리 절사
        	var amCrLocalSumfixed = this.fnGetTrunc(amCrLocalSum,100)  // 소숫점 둘째 자리 절사
        	trace("amDrLocalSum ->" + amDrLocalsumfixed +" amCrLocalSum ->" + amCrLocalSumfixed);

        //nexacro.floor(amDrLocalSum)
        //Math.floor(n * 100)/100);

        	var cnt = this.dsList.getCaseCount("CHK == 1 && CD_EXEC_CURR == 'KRW' && " + this.ucFlag+" != '#'");

        	if (cnt > 0) {
        		this.gfnAlert("결재상태가 '승인','반려' 상태인 경우는 반려 불가능합니다.");
        		return false;
        	}

        	// 원화
        	var amDrSum = nexacro.toNumber(this.dsList.getCaseSum(sExpr , "AM_DR"),0);	//차변금액 합
        	var amCrSum = nexacro.toNumber(this.dsList.getCaseSum(sExpr , "AM_CR"),0);	//대변금액 합

        	//if(amDrLocalSum != amCrLocalSum){

        	var nKrwRowCnt = this.dsList.getCaseCount("CD_EXEC_CURR == 'KRW' && " + this.ucFlag+" != '#'");
        	trace("krw ->" + cnt+" row->" + this.dsList.rowcount);

        	if(nKrwRowCnt != this.dsList.rowcount){
        	    if(amDrLocalsumfixed != amCrLocalSumfixed){
        		//if(amDrLocalSum.toFixed(2) != amCrLocalSum.toFixed(2)){
        			this.gfnAlert("차대(로컬화) 밸런스가 맞지 않습니다.");
        			return false;
        		}
        	}

        	if(amDrSum.toFixed(2) != amCrSum.toFixed(2)){
        		this.gfnAlert("차대(원화) 밸런스가 맞지 않습니다.");
        		return false;
        	}

        	var dtJigub = this.dsList.getCaseMax("!dataset.parent.gfnIsNull(CD_SLIP_MI) && TY_BOND == '채무'", "DT_JIGUB");

        	//trace("### 최대 지급일은 ??? dtJigub :: "+dtJigub);

        	//var fRow = this.dsList.findRowExpr("!dataset.parent.gfnIsNull(CD_SLIP_MI) && TY_BOND == '채무'");
        	//var dtJigub = this.dsList.getColumn(fRow, "DT_JIGUB");


        	var sMsg = " 필수입력값입니다.\n";
        	var strRowMsg = "", strRowEtcMsg = "", noView = "", strSlipMiChk = "";
        	var cdSlipMiChk = false, chkVat = false, chkAcntVat = false,chkDtJigub = false;
        	var dsAcntVat = "";
        	var chkRow = -1;
        	var tyCrdrAcnt = "", cdAccount = "", dsAccount = "", nAmDR = 0, nAmCr = 0


        	for(var i=0;i<this.dsList.rowcount;i++){
        		tyCrdrAcnt = this.dsList.getColumn(i, "TY_CRDR_ACNT");
        		cdAccount = this.dsList.getColumn(i, "CD_ACCOUNT");
        		dsAccount = this.gfnTrim(this.dsList.getColumn(i, "DS_ACCOUNT"));
        		nAmDR = nexacro.toNumber(this.dsList.getColumn(i, "AM_DR"),0); // 차변
        		nAmCr = nexacro.toNumber(this.dsList.getColumn(i, "AM_CR"),0); // 대변

        		if(!this.gfnIsNull(this.gfnTrim(this.dsList.getColumn(i, "CD_SLIP_MI")))){	//반제 전표 체크(반제전표 코드가 있을경우)
        			cdSlipMiChk = true;

        		}else{
        			if(!this.gfnIsNull(dtJigub)){
        				if(this.gfnGetDiffDate(dtJigub, this.dsList.getColumn(i, "DT_ACCOUNT")) < 0){
        					chkDtJigub = true;
        				}
        			}
        		}
        		if(this.gfnGetFlag(this.dsList, i) != "D"){	//삭제 데이터가 아닌경우
        			//미수미불 구분이 미불이 아닐경우 && 차대구분이 대변일 경우(원래는 차변)
        			//if(nexacro.toNumber(this.dsList.getColumn(i, "TY_ACCOUNT"),0) > 0 ){
        			if(!this.gfnIsNull(this.dsList.getColumn(i, "TY_ACCOUNT"))){

        				// 반제 전표CD_SLIP_MI 가 없고 계정구분TY_ACCOUNT 빈값이 아니고  차or대변TY_CRDR_ACNT 금액AM_DR/AM_CR  이 0인경우
        				if(this.gfnIsNull(this.gfnTrim(this.dsList.getColumn(i, "CD_SLIP_MI")))){
        					//해당 계정의 차대구분에 금액이 없을경우
        					if( (tyCrdrAcnt == "D" && nAmDR == 0) || (tyCrdrAcnt == "C" && nAmCr == 0) ) {
        						strSlipMiChk += (i + 1) + "행: [" + "계정코드(" +cdAccount+ ") ] (" +dsAccount + ")" +  " 반제전표가 입력되지 않았습니다.\n반제전표를 등록하세요."
        					}
        				}
        			}

        			//전자세금계산서 번호가 있고 증빙을 입력 안했을경우
        			if(!this.gfnIsNull(this.dsList.getColumn(i, "ISSUE_ID")) && this.dsList.getColumn(i, "YN_VAT") == "N"){
        				chkVat = true;
        			}

        			//	부가세등록계정여부 Y이고 증빙을 입력 안했을경우
        			if( this.dsList.getColumn(i, "YN_VAT_ACNT") == "Y" && this.dsList.getColumn(i, "YN_VAT") == "N"){
        				chkAcntVat = true;
        				dsAcntVat = this.dsList.getColumn(i, "DS_ACCOUNT");		// 계정명칭
        			}

        			if( this.dsList.getColumn(i, "YN_VAT_ACNT") == "Y" && this.dsList.getColumn(i, "YN_VAT") == "Y"){
        				if( this.gfnIsNull(this.dsList.getColumn(i, "CD_PROOF"))){	// 증빙코드
        					trace(i + " 증빙코드:" + this.dsList.getColumn(i, "CD_PROOF"));
        					chkAcntVat = true;
        					dsAcntVat = this.dsList.getColumn(i, "DS_ACCOUNT");		// 계정명칭
        				}
        			}

        			if(this.gfnIsNull(this.gfnTrim(this.dsList.getColumn(i, "DT_ACCOUNT")))){
        				strRowMsg += (i + 1) + "행: [" + "작성일자" + "]"+sMsg;
        			}

        			if(this.gfnIsNull(this.gfnTrim(this.dsList.getColumn(i, "CD_ACCOUNT")))){
        				strRowMsg += (i + 1) + "행: [" + "계정코드" + "]"+sMsg;
        			}
        			/* 20200529 / 불공제시 부가세금액 0원 처리를 위해 체크 제외시킴
        			if(this.dsList.getColumn(i, "TY_CRDR") == "D"){
        				if(nexacro.toNumber(this.dsList.getColumn(i, "AM_DR"),0) == 0){
        					strRowMsg += (i + 1) + "행: [" + "차변금액" + "]"+sMsg;
        				}
        			}else if(this.dsList.getColumn(i, "TY_CRDR") == "C"){
        				if(nexacro.toNumber(this.dsList.getColumn(i, "AM_CR"),0) == 0){
        					strRowMsg += (i + 1) + "행: [" + "대변금액" + "]"+sMsg;
        				}
        			}
        			*/

        			// 예산부서Y 계정코드 430+비목 코드가 계정코드 예산관리 계정N 아닌경우
        // 			if(!this.gfnIsNull(this.gfnTrim(this.dsList.getColumn(i, "CD_ACCOUNT")))){
        // 				var cd_account3 = this.gfnLeft(this.dsList.getColumn(i, "CD_ACCOUNT"), 4);
        // 					trace(this.dsList.getColumn(i, "YN_BUDGET") + "/" + this.gfnNvl(this.dsList.getColumn(i, "YN_BUDGET_CTRL_ACNT"),"N") + "/" + "계정코드->"+ cd_account3);
        // 				if(this.dsList.getColumn(i, "YN_BUDGET") == "Y" && cd_account3 == "4300" && this.gfnNvl(this.dsList.getColumn(i, "YN_BUDGET_CTRL_ACNT"),"N") == "N"){
        // 					strRowMsg += (i + 1) + "행: [" + "계정코드(" +this.dsList.getColumn(i, "CD_ACCOUNT")+ ") ]"+ "예산 시스템에 실적반영 계정으로 등록되지 않았습니다. 기획팀에 문의하십시요.";
        // 				}
        // 			}

        			if(this.gfnIsNull(this.gfnTrim(this.dsList.getColumn(i, "CD_VENDOR")))){
        				strRowMsg += (i + 1) + "행: [" + "거래처" + "]"+sMsg;
        			}

        			if(this.gfnIsNull(this.gfnTrim(this.dsList.getColumn(i, "CD_DEPT_BE")))){
        				strRowMsg += (i + 1) + "행: [" + "귀속부서" + "]"+sMsg;
        			}

        			noView = this.dxGrid.getCellText(i, this.dxGrid.getBindCellIndex("body", "NO_VIEW"));

        			//*********************** 관리항목 체크 ***************************//
        			if(this.dsList.getColumn(i, "CK_ETC1_MO") == "M"){	//기타1
        				if(this.gfnIsNull(this.dsList.getColumn(i, "CD_ETC1"))){
        					var headTxt = this.dsList.getColumn(i, "DS_ETC1");
        					strRowEtcMsg += "[항번"+ noView + "-관리항목] [" + headTxt + "]"+sMsg;
        				}
        			}

        			if(this.dsList.getColumn(i, "CK_ETC2_MO") == "M"){	//기타2
        				if(this.gfnIsNull(this.dsList.getColumn(i, "CD_ETC2"))){
        					var headTxt = this.dsList.getColumn(i, "DS_ETC2");
        					strRowEtcMsg += "[항번"+ noView + "-관리항목] [" + headTxt + "]"+sMsg;
        				}
        			}

        			if(this.dsList.getColumn(i, "CK_REFNO_MO") == "M"){	//참고번호1
        				if(this.gfnIsNull(this.dsList.getColumn(i, "NO_REF"))){
        					var headTxt = this.dsList.getColumn(i, "DS_REFNO");
        					strRowEtcMsg += "[항번"+ noView + "-관리항목] [" + headTxt + "]"+sMsg;
        				}
        			}

        			if(this.dsList.getColumn(i, "CK_REFNO2_MO") == "M"){	//참고번호2
        				if(this.gfnIsNull(this.dsList.getColumn(i, "NO_REF2"))){
        					var headTxt = this.dsList.getColumn(i, "DS_REFNO2");
        					strRowEtcMsg += "[항번"+ noView + "-관리항목] [" + headTxt + "]"+sMsg;
        				}
        			}

        			if(this.dsList.getColumn(i, "CK_REFAM1_MO") == "M"){	//참고금액1
        				if(this.gfnIsNull(this.dsList.getColumn(i, "AM_REF1"))){
        					var headTxt = this.dsList.getColumn(i, "DS_REFAM1");
        					strRowEtcMsg += "[항번"+ noView + "-관리항목] [" + headTxt + "]"+sMsg;
        				}
        			}

        			if(this.dsList.getColumn(i, "CK_REFAM2_MO") == "M"){	//참고금액2
        				if(this.gfnIsNull(this.dsList.getColumn(i, "AM_REF2"))){
        					var headTxt = this.dsList.getColumn(i, "DS_REFAM2");
        					strRowEtcMsg += "[항번"+ noView + "-관리항목] [" + headTxt + "]"+sMsg;
        				}
        			}

        			if(this.dsList.getColumn(i, "CK_REFDT1_MO") == "M"){	//참고일자1
        				if(this.gfnIsNull(this.dsList.getColumn(i, "DT_REF1"))){
        					var headTxt = this.dsList.getColumn(i, "DS_REFDT1");
        					strRowEtcMsg += "[항번"+ noView + "-관리항목] [" + headTxt + "]"+sMsg;
        				}
        			}

        			if(this.dsList.getColumn(i, "CK_REFDT2_MO") == "M"){	//참고일자2
        				if(this.gfnIsNull(this.dsList.getColumn(i, "DT_REF2"))){
        					var headTxt = this.dsList.getColumn(i, "DS_REFDT2");
        					strRowEtcMsg += "[항번"+ noView + "-관리항목] [" + headTxt + "]"+sMsg;
        				}
        			}

        			if(this.dsList.getColumn(i, "CK_REFRT1_MO") == "M"){	//참고율1
        				if(this.gfnIsNull(this.dsList.getColumn(i, "RT_REF1"))){
        					var headTxt = this.dsList.getColumn(i, "DS_REFRT1");
        					strRowEtcMsg += "[항번"+ noView + "-관리항목] [" + headTxt + "]"+sMsg;
        				}
        			}

        			if(this.dsList.getColumn(i, "CK_REFRT2_MO") == "M"){	//참고율2
        				if(this.gfnIsNull(this.dsList.getColumn(i, "RT_REF2"))){
        					var headTxt = this.dsList.getColumn(i, "DS_REFRT2");
        					strRowEtcMsg += "[항번"+ noView + "-관리항목] [" + headTxt + "]"+sMsg;
        				}
        			}

        			if(this.dsList.getColumn(i, "CK_GONGJONG_MO") == "M"){	//공종코드
        				if(this.gfnIsNull(this.dsList.getColumn(i, "CD_GONGJONG"))){
        					var headTxt = "공종";
        					strRowEtcMsg += "[항번"+ noView + "-관리항목] [" + headTxt + "]"+sMsg;
        				}
        			}

        			if(this.dsList.getColumn(i, "CK_SEMOK_MO") == "M"){	//세목코드
        				if(this.gfnIsNull(this.dsList.getColumn(i, "CD_SEMOK"))){
        					var headTxt = "세목";
        					strRowEtcMsg += "[항번"+ noView + "-관리항목] [" + headTxt + "]"+sMsg;
        				}
        			}
        			// 예산 시작-------------------------------------
        			var ynBudget = this.dsList.getColumn(i, "YN_BUDGET");
        			var ynBudgetCtrlAcnt = this.dsList.getColumn(i, "YN_BUDGET_CTRL_ACNT");
        			var TY_SLIP = this.ccboTY_SLIP.value;	// A09 전표유형 - 02	결산전표
        			// && TY_SLIP != "02"
        			if(ynBudget == "Y" && ynBudgetCtrlAcnt == "Y"){
        				if(this.gfnIsNull(this.gfnTrim(this.dsList.getColumn(i, "CD_DEPTOFFICER")))){
        					strRowMsg += (i + 1) + "행: [" + "임원사번" + "]"+sMsg;
        				}
        				if(this.gfnIsNull(this.gfnTrim(this.dsList.getColumn(i, "CD_BIMOK")))){
        					strRowMsg += (i + 1) + "행: [" + "비목" + "]"+sMsg;
        				}
        				if(this.gfnIsNull(this.gfnTrim(this.dsList.getColumn(i, "CD_SEMOK")))){
        					strRowMsg += (i + 1) + "행: [" + "세목" + "]"+sMsg;
        				}
        			}
        			// 예산 끝-------------------------------------
        		}
        	}

        	// 반제 전표CD_SLIP_MI 가 없고 계정구분TY_ACCOUNT 빈값이 아니고  차or대변TY_CRDR_ACNT 금액AM_DR/AM_CR  이 0인경우
        	if(!this.gfnIsNull(strSlipMiChk)){
        		this.gfnAlert(strSlipMiChk);
        		return false;
        	}

        	//반제전표가 있고 채무 데이터일 경우 지급일자 체크
        	if(cdSlipMiChk == true && chkDtJigub == true){
        		this.gfnAlert("지급일["+dtJigub+"]"+" 회계일자는 지급일자와 같거나 커야합니다.");
        		return false;
        	}

        	if(chkVat){
        		this.gfnAlert("증빙자료가 입력되지 않았습니다.\n증방자료를 등록하세요.");
        		return false;
        	}

        	if(chkAcntVat){
        		this.gfnAlert( dsAcntVat + " 계정은 증빙 필수입니다. 증빙을 입력하세요");
        		return false;
        	}

        	if(!this.gfnIsNull(strRowMsg)){
        		this.gfnAlert(strRowMsg);
        		return false;
        	}

        	if(!this.gfnIsNull(strRowEtcMsg)){
        		this.gfnAlert(strRowEtcMsg);
        		return false;
        	}

        	return true;
        }

        //관리항목 그리드 셋팅
        this.fnEtcGridSetting = function (row)
        {
        	var objGrid = this.dxGridSub;

        	//그리드 헤더 초기화
        	this.fnGridHeaderReset();

        	objGrid.set_enableredraw(false);
        	this.dsListSub.set_enableevent(false);

        	var arrType  = ["ETC1", "ETC2", "REFNO", "REFNO2", "REFAM1", "REFAM2", "REFDT1", "REFDT2", "REFRT1", "REFRT2", "GONGJONG", "SEMOK"];
        	var arrType2 = ["ETC1", "ETC2", "REF"  , "REF2"  , "REF1"  , "REF2"  , "REF1"  , "REF2"  , "REF1"  , "REF2"  , "GONGJONG", "SEMOK"];

        	var topIdx = 2;
        	var ckMoNm = "", tyNm = "", cdNm= "", dsNm = "";
        	for(var i = 0 ; i < arrType.length ; i++){
        		ckMoNm = "CK_" + arrType[i] + "_MO";
        		tyNm   = "TY_" + arrType2[i];
        		cdNm   = (arrType[i].indexOf("REFNO") > -1 ?  "NO_" : "CD_") + arrType2[i];
        		dsNm   = "DS_" + arrType2[i];


        		//trace("관리항목 그리드 셋팅 컬럼->" + ckMoNm + " / 값->" + this.dsList.getColumn(row, ckMoNm));
        		if(!this.gfnIsNull(this.gfnTrim(this.dsList.getColumn(row, ckMoNm)))) {	//값이 있을경우
        			var textLine = "none";
        			var headerText = this.dsList.getColumn(row, "DS_"+arrType[i]);
        			/*
        			if(this.dsList.getColumn(row, ckMoNm) == "M"){	//필수일 경우
        				textLine = "underline";
        			}
        			*/
        			var sType = "", subColIdx = 0;
        			switch(arrType[i]) {
        				case "REFAM1" :
        					sType = "AM";
        					headerText = "참고금액1";
        					subColIdx = 27;
        					break;
        				case "REFAM2" :
        					sType = "AM";
        					headerText = "참고금액2";
        					subColIdx = 28;
        					break;
        				case "REFDT1":
        					sType = "DT";
        					headerText = "참고일1";
        					subColIdx = 29;
        					break;
        				case "REFDT2":
        					sType = "DT";
        					headerText = "참고일2";
        					subColIdx = 30;
        					break;
        				case "REFRT1":
        					sType = "RT";
        					headerText = "참고율1";
        					subColIdx = 31;
        					break;
        				case "REFRT2":
        					sType = "RT";
        					headerText = "참고율2";
        					subColIdx = 32;
        					break;
        				case "GONGJONG":
        					sType = "DS";
        					headerText = "공종";
        					subColIdx = 33;	//31
        					break;
        				case "SEMOK":
        					sType = "DS";
        					headerText = "세목";
        					subColIdx = 35;
        					break;
        			}

        			// 헤더 상단에 필수값일경우 필(필수)/선(선택)을 추가
        			headerText = headerText + (this.dsList.getColumn(row, ckMoNm) == "M" ? " (필)" : " (선)");

        			//헤더 상단 설정
        			objGrid.setCellProperty("head", this.gfnGetHeadCellIndex(objGrid, cdNm), "textDecoration", textLine);
        			objGrid.setCellProperty("head", topIdx, "text", headerText);

        			//헤더 텍스트 값이 있을경우 서브 헤더 텍스트 셋팅

        			if(!this.gfnIsNull(sType)){
        				var colChk = objGrid.getBindCellIndex("body", "CD_"+arrType[i]);
        				var subText = this.dsList.getColumn(row, "DS_"+arrType[i]);

        				objGrid.setCellProperty("head", subColIdx, "text", subText);
        				objGrid.setCellProperty("head", subColIdx, "textDecoration", textLine);

        				if(sType == "DS"){
        					//if(arrType[i] == "GONGJONG"){
        					if(arrType[i].indexOf("GONGJONG") > -1){	//공종일 경우
        						objGrid.setCellProperty("head", subColIdx, "text", "공종코드");
        						objGrid.setCellProperty("head", (subColIdx)+1, "text", "공종명");
        					}
        					if(arrType[i].indexOf("SEMOK") > -1){
        						objGrid.setCellProperty("head", subColIdx, "text", "세목코드");
        						objGrid.setCellProperty("head", (subColIdx)+1, "text", "세목명");
        					}
        				}
        			}

        			//기타/참고번호 서브헤더 텍스트 셋팅
        			if(arrType[i].indexOf("ETC") > -1 || arrType[i].indexOf("REFNO") > -1){
        				objGrid.setCellProperty("head", this.gfnGetHeadCellIndex(objGrid, tyNm), "text", "구분");
        				objGrid.setCellProperty("head", this.gfnGetHeadCellIndex(objGrid, cdNm), "text", "코드");
        				objGrid.setCellProperty("head", this.gfnGetHeadCellIndex(objGrid, dsNm), "text", "명칭");
        			}

        			//사이즈 조정
        			if(arrType[i].indexOf("ETC") > -1 || arrType[i].indexOf("REFNO") > -1){
        				// [관리항목고정값] 코드관리>계정코드관리 화면에서 관리
        				var sEditType = (this.dsList.getColumn(row, "YN_FIX") == "Y") ? "none" : "combo";
        				objGrid.setCellProperty( "body", objGrid.getBindCellIndex("body", tyNm), "edittype", sEditType);

        				objGrid.setFormatColProperty(objGrid.getBindCellIndex("body", tyNm), "size", 90);	//구분
        				objGrid.setFormatColProperty(objGrid.getBindCellIndex("body", cdNm), "size", 100);	//코드
        				objGrid.setFormatColProperty(objGrid.getBindCellIndex("body", dsNm), "size", 110);	//명칭
        			//}else if(arrType[i].indexOf("GONGJONG") > -1){
        			}else if(arrType[i].indexOf("GONGJONG") > -1 || arrType[i].indexOf("SEMOK") > -1){
        				objGrid.setFormatColProperty(objGrid.getBindCellIndex("body", "CD_"+arrType[i]), "size", 90);
        				objGrid.setFormatColProperty(objGrid.getBindCellIndex("body", "DS_"+arrType[i]), "size", 100);
        			}else{
        				objGrid.setFormatColProperty(objGrid.getBindCellIndex("body", sType +"_"+ arrType2[i]), "size", 100);
        			}

        		}// 값이있을경우

        		topIdx++;
        		// trace("--------- END -----------");
        	}


        	if(this.dsList.rowcount > 0){

        		//this.dsListSub.setColumn(0, "TY_ETC1", this.dsList.getColumn(row, "TY_ETC1"));
        		this.dsListSub.setColumn(0, "TY_ETC1",this.gfnNvl(this.dsList.getColumn(row, "TY_ETC1"),this.dsList.getColumn(row, "TY_ETC1_FLAG")));
        		this.dsListSub.setColumn(0, "CD_ETC1", this.dsList.getColumn(row, "CD_ETC1"));
        		this.dsListSub.setColumn(0, "DS_ETC1", this.dsList.getColumn(row, "DS_ETC11"));

        		//this.dsListSub.setColumn(0, "TY_ETC2", this.dsList.getColumn(row, "TY_ETC2"));
        		this.dsListSub.setColumn(0, "TY_ETC2", this.gfnNvl(this.dsList.getColumn(row, "TY_ETC2"),this.dsList.getColumn(row, "TY_ETC2_FLAG")));
        		this.dsListSub.setColumn(0, "CD_ETC2", this.dsList.getColumn(row, "CD_ETC2"));
        		this.dsListSub.setColumn(0, "DS_ETC2", this.dsList.getColumn(row, "DS_ETC21"));

        		//this.dsListSub.setColumn(0, "TY_REF", this.dsList.getColumn(row, "TY_REF"));
        		this.dsListSub.setColumn(0, "TY_REF", this.gfnNvl(this.dsList.getColumn(row, "TY_REF"),this.dsList.getColumn(row, "TY_REFNO_FLAG")));
        		this.dsListSub.setColumn(0, "NO_REF", this.dsList.getColumn(row, "NO_REF"));
        		this.dsListSub.setColumn(0, "DS_REF", this.dsList.getColumn(row, "DS_REF"));

        		//this.dsListSub.setColumn(0, "TY_REF2", this.dsList.getColumn(row, "TY_REF2"));
        		this.dsListSub.setColumn(0, "TY_REF2", this.gfnNvl(this.dsList.getColumn(row, "TY_REF2"),this.dsList.getColumn(row, "TY_REFNO2_FLAG")));
        		this.dsListSub.setColumn(0, "NO_REF2", this.dsList.getColumn(row, "NO_REF2"));
        		this.dsListSub.setColumn(0, "DS_REF2", this.dsList.getColumn(row, "DS_REF2"));
        		this.dsListSub.setColumn(0, "AM_REF1", this.dsList.getColumn(row, "AM_REF1"));
        		this.dsListSub.setColumn(0, "AM_REF2", this.dsList.getColumn(row, "AM_REF2"));
        		this.dsListSub.setColumn(0, "DT_REF1", this.dsList.getColumn(row, "DT_REF1"));
        		this.dsListSub.setColumn(0, "DT_REF2", this.dsList.getColumn(row, "DT_REF2"));
        		this.dsListSub.setColumn(0, "RT_REF1", this.dsList.getColumn(row, "RT_REF1"));
        		this.dsListSub.setColumn(0, "RT_REF2", this.dsList.getColumn(row, "RT_REF2"));

        		this.dsListSub.setColumn(0, "CD_SEMOK", this.dsList.getColumn(row, "CD_SEMOK"));
        		this.dsListSub.setColumn(0, "DS_SEMOK", this.dsList.getColumn(row, "DS_SEMOK"));

        		this.dsListSub.setColumn(0, "CD_GONGJONG", this.dsList.getColumn(row, "CD_GONGJONG"));
        		this.dsListSub.setColumn(0, "DS_GONGJONG", this.dsList.getColumn(row, "DS_GONGJONG"));


        		//this.dsListSub.setColumn(0, "CD_GONGJONG", this.dsList.getColumn(row, "CD_GONGJONG2"));
        		//this.dsListSub.setColumn(0, "DS_GONGJONG", this.dsList.getColumn(row, "DS_GONGJONG2"));
        	}

        	this.dsListSub.set_enableevent(true);
        	objGrid.set_enableredraw(true);

        };

        //그리드 헤더 초기화
        this.fnGridHeaderReset = function ()
        {
        	var cellCnt = this.dxGridSub.getCellCount("head");

        	this.dxGridSub.set_enableredraw(false);
        	for(var i=0;i<cellCnt;i++){
        		if(i > 1){
        			this.dxGridSub.setCellProperty("head", i, "textDecoration", "none");
        			this.dxGridSub.setCellProperty("head", i, "text", "");
        			this.dxGridSub.setFormatColProperty(i, "size", 0);
        		}
        	}
        	this.dxGridSub.set_enableredraw(true);
        };


        //콤보박스 코드 조회
        this.fnSetCombo = function() {

        	this.dsCombo = new Dataset();
        	this.dsCombo.addColumn("CD_SYSTEM", "string");
        	this.dsCombo.addColumn("CD_TYPE", "string");

        	this.dsCombo2 = new Dataset();
        	this.dsCombo2.addColumn("CD_SYSTEM", "string");
        	this.dsCombo2.addColumn("CD_TYPE", "string");

        	this.dsCombo.addRow();
        	this.dsCombo.setColumn(0, "CD_SYSTEM", "DH");
        	this.dsCombo.setColumn(0, "CD_TYPE",  "A09");	// 전표유형

        	this.dsCombo.addRow();
        	this.dsCombo.setColumn(1, "CD_SYSTEM", "DH");
        	this.dsCombo.setColumn(1, "CD_TYPE",  "A30");	// 결재문서 자동전표코드(LegacyFormID)

        	this.dsCombo2.addRow();
        	this.dsCombo2.setColumn(0, "CD_SYSTEM", "DZ");
        	this.dsCombo2.setColumn(0, "CD_TYPE",  "ZG");


        	var strSvcId    = "combo";
        	var strSvcType  = "select";
        	var inProc		= "_dsProc";
        	var inData      = "combo=dsCombo combo2=dsCombo2";
        	var outData     = "dsTY_SLIP=combo0 dsCD_APP=combo20 dsCD_A30=combo1";
        	var strArg      = "";
        	var callBackFnc = "fnCallback";

        	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
        						strSvcType , 	// transaction을 요청할 구분
        						inProc,			// Procedure 정보 Dataset 이름
        						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
        						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
        						callBackFnc); // 통신방법 정의 [생략가능]
        };

        //검색조건 변경 이벤트
        this.dsSearch_Valuechanged = function(obj,e)
        {
        	if(e.oldvalue != e.newvalue) {
        		this.gfnSetFormStatus(this);	// 폼상태 초기화
        		this.gfnGridClear(this.dxGrid);
        		this.gfnGridClear(this.dxGridSub);
        		this.FormBtns.Add.set_enable(true);

        		this.fnCalcSlip();
        	}
        };

        //하단 금액 계산
        this.fnCalcSlip = function ()
        {

        	var sExpr = this.ucFlag +" != 'D' && "+ this.ucFlag + " != 'DU'";	//삭제 데이터 제외

        	// 삭제로우를 제외한 합계

        	// 로컬화
        	var amDrLocalSum = nexacro.toNumber(this.dsList.getCaseSum(sExpr, "AM_LOCAL_DR"), 0);
        	var amCrLocalSum = nexacro.toNumber(this.dsList.getCaseSum(sExpr, "AM_LOCAL_CR"), 0);
        	//this.mskSUM_LOCAL_CRDR.set_value(Math.abs(amDrLocalSum-amCrLocalSum));	//차액
        	this.mskSUM_LOCAL_CRDR.set_value(amDrLocalSum-amCrLocalSum);	//차액

        	// 원화
        	var amDrSum = nexacro.toNumber(this.dsList.getCaseSum(sExpr, "AM_DR"), 0);
        	var amCrSum = nexacro.toNumber(this.dsList.getCaseSum(sExpr, "AM_CR"), 0);
        	var totCnt = nexacro.toNumber(this.dsList.getCaseCount(sExpr), 0);

        	this.mskAM_DR.set_value(amDrSum);				//차변합
        	this.mskAM_CR.set_value(amCrSum);				//대변합
        	//this.mskSUM_CRDR.set_value(Math.abs(amDrSum-amCrSum));	//차액
        	this.mskSUM_CRDR.set_value(amDrSum-amCrSum);	//차액

        	this.mskCOUNT.set_value(totCnt);				//건수
        };

        //새전표
        this.fnSlipNew = function (obj,e)
        {
        	if(!this.fnCheckValidate()) return;

        	this.V_IUD_FLAG = "I";

        	//폼 클리어
        	this.fnClearForm();

        	// 전표구분을 수정할수 있도록 처리 - 결산전표일때와 아닐경우 처리가 구분됨(1116100, 2102900 금액수정여부)
        	this.ccboTY_SLIP.set_enable(true);

        	this.fnAdd("F");

        }

        //폼 클리어
        this.fnClearForm = function ()
        {

        	//전표번호 초기화
        	this.txtCD_TRADE.set_value("");

        	this.gfnSetFormStatus(this);	// 폼상태 초기화
        	this.gfnGridClear(this.dxGrid);
        	this.gfnGridClear(this.dxGridSub);

        	//this.txtDT_MAGAM.set_value("");
        	this.mskSUM_CRDR.set_value("");
        	this.mskSUM_LOCAL_CRDR.set_value("");

        	this.mskAM_DR.set_value("");
        	this.mskAM_CR.set_value("");
        	this.ccboCD_APP.set_value("");
        	this.txtDS_HNAME.set_value("");
        	this.txtDT_UPDATE.set_value("");
        	this.txtDS_APPR.set_value("");
        	this.txtDS_AUTOSLIP.set_value("");


        	this.mskCOUNT.set_value(this.dsList.rowcount);

        	this.btnSlipDelete.set_enable(false);

        	this.btnRequestList.set_enable(false);
        	//this.btnSchApprove.set_enable(false);
        	//this.btnApprove.set_enable(false);
        	this.btnSlipCopy.set_enable(false);
        	this.btnSlipCopy2.set_enable(false);

        	this.dxGrid.info = "N";
        	this.dxGridSub.info = "N";

        	this.FormBtns.Add.set_enable(true);
        	this.FormBtns.Select.set_enable(false);
        };

        //항번 채번
        this.fnNoViewSetting = function ()
        {

        	var noView = 1;
        	//this.dsList.set_enableevent(false);
        	for(var i = 0;i<this.dsList.rowcount;i++){
        		//삭제가 아닌 데이터만
        		if(this.gfnGetFlag(this.dsList, i) != "D"){
        			this.dsList.setColumn(i, "NO_VIEW", noView);
        			noView++;
        		}
        	}
        	//this.dsList.set_enableevent(true);
        };

        //전표번호 셋팅
        this.fnSetCdSlip = function (cdTrade)
        {
        	var nextCdSlip = "";
        	var cdSlip = 0;

         	var maxCdSlip = 0;
         	for(var i = 0;i<this.dsList.rowcount;i++){
        		if(!this.gfnIsNull(this.dsList.getColumn(i, "CD_SLIP"))){
        			cdSlip = nexacro.toNumber(this.gfnRight(this.dsList.getColumn(i, "CD_SLIP"), 5),0);

        			if (maxCdSlip < cdSlip){
        				maxCdSlip = cdSlip;
        			}
        		}
         	}
        	maxCdSlip += 1;

        	nextCdSlip = cdTrade + (maxCdSlip.toString()).padLeft(5, "0");

        	return nextCdSlip;
        };

        //전표번호 채번
        this.fnSelectNewCode = function ()
        {
        	this.dsSelectNewCode.clearData();
        	this.dsSelectNewCode.addRow();

        	this.dsSelectNewCode.setColumn(0, "IN_PARAM"     , this.ccfACNTUNIT.form.CDTextBox.value);
        	//this.dsSelectNewCode.setColumn(0, "IN_DT_ACCOUNT", this.dsList.getColumn(0, "DT_ACCOUNT"));
        	this.dsSelectNewCode.setColumn(0, "IN_DT_ACCOUNT", this.calDT_ACCOUNT.value);

        	var strSvcId    = "newCode";
        	var strSvcType  = "select";
        	var inProc		= "_dsProc";
        	var inData      = "selectNewCode=dsSelectNewCode";
        	var outData     = "dsNewCode=selectNewCode0";
        	var strArg      = "";
        	var callBackFnc = "fnCallback";

        	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
        						strSvcType , 	// transaction을 요청할 구분
        						inProc,			// Procedure 정보 Dataset 이름
        						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
        						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
        						callBackFnc); // 통신방법 정의 [생략가능]
        };

        this.fnSave2 = function ()
        {

        	this.dsSave.clearData();

        	//마지막 전표 항번
        	//var lastCdSlip = this.dsList.getCaseMax(this.ucFlag+" != ''", "CD_SLIP");
        	//var lastNoView = this.dsList.getCaseMax(this.ucFlag+" != ''", "NO_VIEW");
        	var lastRow = this.fnLastRow();	//마지막 등록 수정 삭제 로우

        	//trace("### lastRow :: "+lastRow);

        	var cdSlip = "", curSlipNo = "", noView = 0;

        	for (var i = 0; i < this.dsList.rowcount; i++) {
        		var flag = this.gfnGetFlag(this.dsList, i);

        		switch(flag) {
        			case "I":
        			case "U":
        			case "D":
        				cdSlip = this.dsList.getColumn(i, "CD_SLIP");
        				noView = this.dsList.getColumn(i, "NO_VIEW");
        				if(!this.gfnIsNull(cdSlip)){
        					curSlipNo = cdSlip.substring(cdSlip.length - 5, cdSlip.length);
        				}

        				var nrow = this.dsSave.addRow();
        				this.dsSave.setColumn(nrow, "S_FLAG"		, flag);													//플래그
        				this.dsSave.setColumn(nrow, "CD_TRADE"		, this.dsList.getColumn(i, "CD_TRADE"));					//거래번호
        				this.dsSave.setColumn(nrow, "CUR_SLIP_NO"	, curSlipNo);												//전표번호
        				this.dsSave.setColumn(nrow, "NO_VIEW"		, this.dsList.getColumn(i, "NO_VIEW"));						//전표보이는순번
        				this.dsSave.setColumn(nrow, "DT_ACCOUNT"	, this.dsList.getColumn(i, "DT_ACCOUNT"));					//회계일자
        				this.dsSave.setColumn(nrow, "CD_DEPT_BH"	, this.gfnNvl(this.dsList.getColumn(i, "CD_DEPT_BH"),""));	//발행부서
        				this.dsSave.setColumn(nrow, "CD_DEPT_BE"	, this.dsList.getColumn(i, "CD_DEPT_BE"));					//발의부서(회계부서)
        				this.dsSave.setColumn(nrow, "CD_ACCOUNT"	, this.dsList.getColumn(i, "CD_ACCOUNT"));					//계정코드

        				this.dsSave.setColumn(nrow, "SEMOK_CD", this.dsList.getColumn(i, "CD_SEMOK"));
        				this.dsSave.setColumn(nrow, "SEMOK_DS", this.dsList.getColumn(i, "DS_SEMOK"));

        				//this.dsSave.setColumn(nrow, "SEMOK_CD"		, this.gfnNvl(this.dsList.getColumn(i, "SEMOK_CD"),""));	//세목코드
        				//this.dsSave.setColumn(nrow, "SEMOK_DS"		, this.gfnNvl(this.dsList.getColumn(i, "SEMOK_DS"),""));	//세목명
        				this.dsSave.setColumn(nrow, "TY_CRDR"		, this.dsList.getColumn(i, "TY_CRDR"));						//차대구분

        				var amAccount = 0;
        // 				if(this.dsList.getColumn(i, "TY_CRDR") == "D"){
        // 					amAccount = nexacro.toNumber(this.dsList.getColumn(i, "AM_DR"));
        // 				}else{
        // 					amAccount = nexacro.toNumber(this.dsList.getColumn(i, "AM_CR"));
        // 				}

        				var sCrDrCol = (this.dsList.getColumn(i, "TY_CRDR") == "D" ? "_DR" : "_CR");


        				this.dsSave.setColumn(nrow, "RT_LOCAL_EXCH"	, this.dsList.getColumn(i, "RT_LOCAL_EXCH"));	// 로컬화 환율
        				this.dsSave.setColumn(nrow, "RT_KRW_EXCH"	, this.dsList.getColumn(i, "RT_KRW_EXCH"));		// 원화 환율
        				this.dsSave.setColumn(nrow, "RT_USD_EXCH"	, this.dsList.getColumn(i, "RT_USD_EXCH"));		// 미화 환율
        				this.dsSave.setColumn(nrow, "RT_EUR_EXCH"	, this.dsList.getColumn(i, "RT_EUR_EXCH"));		// 유로화 환율

        				this.dsSave.setColumn(nrow, "CD_EXEC_CURR"	, this.dsList.getColumn(i, "CD_EXEC_CURR"));	// 집행화 화폐단위

        				this.dsSave.setColumn(nrow, "AM_EXEC"		, this.dsList.getColumn(i, "AM_EXEC"+sCrDrCol));	// 집행화 금액
        				this.dsSave.setColumn(nrow, "AM_LOCAL"		, this.dsList.getColumn(i, "AM_LOCAL"+sCrDrCol));	// 로컬화 금액
        				this.dsSave.setColumn(nrow, "AM_ACCOUNT"	, this.dsList.getColumn(i, "AM"+sCrDrCol));			// 회계금액
        				this.dsSave.setColumn(nrow, "AM_USD"		, this.dsList.getColumn(i, "AM_USD"+sCrDrCol));		// 미화금액
        				this.dsSave.setColumn(nrow, "AM_EUR"		, this.dsList.getColumn(i, "AM_EUR"+sCrDrCol));		// 유로화금액

        				//trace("### 저장시 금액 TY_CRDR :: "+this.dsList.getColumn(i, "TY_CRDR"));
        				//trace("### 저장시 금액 amAccount :: "+amAccount);

        				this.dsSave.setColumn(nrow, "DS_REM"		, this.dsList.getColumn(i, "DS_REM"));		//적요
        				this.dsSave.setColumn(nrow, "TY_VENDOR"		, this.dsList.getColumn(i, "TY_VENDOR"));	//거래처종류
        				this.dsSave.setColumn(nrow, "CD_VENDOR"		, this.dsList.getColumn(i, "CD_VENDOR"));	//거래처코드
        				this.dsSave.setColumn(nrow, "DS_VENDOR"		, this.dsList.getColumn(i, "DS_VENDOR"));	//거래처명

        				this.dsSave.setColumn(nrow, "YN_LASTSLIP"	, (i == lastRow ? "Y" : "" ));		//마지막전표여부


        				var yn_appr = "";
        				if(flag == "I"){
        					yn_appr = "N";
        				}else{
        					yn_appr = this.dsList.getColumn(i, "YN_APPR");
        				}
        				this.dsSave.setColumn(nrow, "YN_APPR", yn_appr);	//승인여부
        				this.dsSave.setColumn(nrow, "CD_SLIP_MI", this.gfnNvl(this.dsList.getColumn(i, "CD_SLIP_MI"),""));
        				this.dsSave.setColumn(nrow, "YN_COPY", this.gfnNvl(this.dsList.getColumn(i, "YN_COPY"),""));	//전표복사여부
        				this.dsSave.setColumn(nrow, "CD_CORP", this.dsList.getColumn(i, "CD_CORP"));	//법인코드
        				this.dsSave.setColumn(nrow, "ISSUE_ID"		, this.dsList.getColumn(i, "ISSUE_ID"));					//전자세금계산서번호

        				//부가세항목
        				this.dsSave.setColumn(nrow, "YN_VAT", this.gfnNvl(this.dsList.getColumn(i, "YN_VAT"),""));						//부가여부
        				this.dsSave.setColumn(nrow, "FLAG_V", this.gfnNvl(this.dsList.getColumn(i, "FLAG_V"),""));						//부가세플래그(입력-I, 수정-U, 삭제 D)
        				this.dsSave.setColumn(nrow, "CD_VATDEPT_ACNT", this.gfnNvl(this.dsList.getColumn(i, "CD_VATDEPT_ACNT"),""));	//부가세발의부서
        				this.dsSave.setColumn(nrow, "TY_SALEBUY", this.gfnNvl(this.dsList.getColumn(i, "TY_SALEBUY"),""));				//거래구분/매입/매출
        				this.dsSave.setColumn(nrow, "CD_PROOF", this.gfnNvl(this.dsList.getColumn(i, "CD_PROOF"),""));					//증빙코드
        				this.dsSave.setColumn(nrow, "TY_VATBGJE", this.gfnNvl(this.dsList.getColumn(i, "TY_VATBGJE"),""));				//불공제코드
        				this.dsSave.setColumn(nrow, "CD_VATACCOUNT", this.gfnNvl(this.dsList.getColumn(i, "CD_VATACCOUNT"),""));		//부가세계정
        				this.dsSave.setColumn(nrow, "TY_VATVENDOR", this.gfnNvl(this.dsList.getColumn(i, "TY_VATVENDOR"),""));			//부가세거래처구분
        				this.dsSave.setColumn(nrow, "CD_VATVENDOR", this.gfnNvl(this.dsList.getColumn(i, "CD_VATVENDOR"),""));			//부가세거래처코드
        				this.dsSave.setColumn(nrow, "DS_VATVENDOR", this.gfnNvl(this.dsList.getColumn(i, "DS_VATVENDOR"),""));			//부가세거래처명칭
        				this.dsSave.setColumn(nrow, "AM_SUPPLY", this.gfnNvl(this.dsList.getColumn(i, "AM_SUPPLY"),""));				//공급가
        				this.dsSave.setColumn(nrow, "AM_VAT", this.gfnNvl(this.dsList.getColumn(i, "AM_VAT"),""));						//부가세
        				this.dsSave.setColumn(nrow, "AM_SERVICE", this.gfnNvl(this.dsList.getColumn(i, "AM_SERVICE"),""));				//봉사료
        				this.dsSave.setColumn(nrow, "NO_CREDIT", nexacro.replaceAll(this.gfnNvl(this.dsList.getColumn(i, "NO_CREDIT"),""),"-",""));		//신용카드번호
        				this.dsSave.setColumn(nrow, "DS_VATREM", this.gfnNvl(this.dsList.getColumn(i, "DS_VATREM"),""));				//부가세 적요
        				this.dsSave.setColumn(nrow, "CK_OMIT", this.gfnNvl(this.dsList.getColumn(i, "CK_OMIT"),""));					//누락여부(부가세)

        				this.dsSave.setColumn(nrow, "DT_PROOF", this.gfnNvl(this.dsList.getColumn(i, "DT_PROOF"),""));					//부가세증빙일자
        				this.dsSave.setColumn(nrow, "TY_ISSUE", this.gfnNvl(this.dsList.getColumn(i, "TY_ISSUE"),""));					//세금계산서발행구분

        				//관리항목
        				this.dsSave.setColumn(nrow, "TY_ETC1", this.gfnNvl(this.dsList.getColumn(i, "TY_ETC1"),""));	//기타1종류
        				this.dsSave.setColumn(nrow, "CD_ETC1", this.gfnNvl(this.dsList.getColumn(i, "CD_ETC1"),""));	//기타1코드
        				this.dsSave.setColumn(nrow, "DS_ETC1", this.gfnNvl(this.dsList.getColumn(i, "DS_ETC11"),""));	//기타1명칭
        				this.dsSave.setColumn(nrow, "TY_ETC2", this.gfnNvl(this.dsList.getColumn(i, "TY_ETC2"),""));	//기타2종류
        				this.dsSave.setColumn(nrow, "CD_ETC2", this.gfnNvl(this.dsList.getColumn(i, "CD_ETC2"),""));	//기타2코드
        				this.dsSave.setColumn(nrow, "DS_ETC2", this.gfnNvl(this.dsList.getColumn(i, "DS_ETC21"),""));	//기타2명칭
        				this.dsSave.setColumn(nrow, "TY_REF", this.gfnNvl(this.dsList.getColumn(i, "TY_REF"),""));		//참고번호1종류
        				this.dsSave.setColumn(nrow, "NO_REF", this.gfnNvl(this.dsList.getColumn(i, "NO_REF"),""));		//참고번호1
        				this.dsSave.setColumn(nrow, "DS_REF", this.gfnNvl(this.dsList.getColumn(i, "DS_REF"),""));		//참고번호1명칭
        				this.dsSave.setColumn(nrow, "TY_REF2", this.gfnNvl(this.dsList.getColumn(i, "TY_REF2"),""));	//참고번호2종류
        				this.dsSave.setColumn(nrow, "NO_REF2", this.gfnNvl(this.dsList.getColumn(i, "NO_REF2"),""));	//참고번호2
        				this.dsSave.setColumn(nrow, "DS_REF2", this.gfnNvl(this.dsList.getColumn(i, "DS_REF2"),""));	//참고번호2명칭

        				this.dsSave.setColumn(nrow, "AM_REF1", this.gfnNvl(this.dsList.getColumn(i, "AM_REF1"),""));	//참고금액1
        				this.dsSave.setColumn(nrow, "AM_REF2", this.gfnNvl(this.dsList.getColumn(i, "AM_REF2"),""));	//참고금액2
        				this.dsSave.setColumn(nrow, "DT_REF1", this.gfnNvl(this.dsList.getColumn(i, "DT_REF1"),""));	//참고일자1
        				this.dsSave.setColumn(nrow, "DT_REF2", this.gfnNvl(this.dsList.getColumn(i, "DT_REF2"),""));	//참고일자2
        				this.dsSave.setColumn(nrow, "RT_REF1", this.gfnNvl(this.dsList.getColumn(i, "RT_REF1"),""));	//참고율1
        				this.dsSave.setColumn(nrow, "RT_REF2", this.gfnNvl(this.dsList.getColumn(i, "RT_REF2"),""));	//참고율2
        				this.dsSave.setColumn(nrow, "CD_GONGJONG", this.gfnNvl(this.dsList.getColumn(i, "CD_GONGJONG"),""));	//공종코드
        				this.dsSave.setColumn(nrow, "DS_GONGJONG", this.gfnNvl(this.dsList.getColumn(i, "DS_GONGJONG"),""));	//공종명칭
        				this.dsSave.setColumn(nrow, "ID_INSERT", this.AuthClient.ID_USER);	//입력자사번
        				this.dsSave.setColumn(nrow, "TY_CLOSING", this.gfnNvl(this.dsList.getColumn(i, "TY_CLOSING"),""));	//전표구분

        // 				this.dsSave.setColumn(nrow, "YN_DEPT", this.dsList.getColumn(i, "YN_DEPT"));
        // 				this.dsSave.setColumn(nrow, "CD_DEPTOFFICER", this.dsList.getColumn(i, "CD_DEPTOFFICER"));
        // 				this.dsSave.setColumn(nrow, "CD_PROJECT", this.dsList.getColumn(i, "CD_PROJECT"));
        				this.dsSave.setColumn(nrow, "CD_BIMOK", this.dsList.getColumn(i, "CD_BIMOK"));
        				this.dsSave.setColumn(nrow, "CD_SEMOK", this.dsList.getColumn(i, "CD_SEMOK"));
        				this.dsSave.setColumn(nrow, "YN_BUDGET", this.dsList.getColumn(i, "YN_BUDGET"));
        				this.dsSave.setColumn(nrow, "YN_BUDGET_CONTROL", this.dsList.getColumn(i, "YN_BUDGET_CONTROL"));
        				this.dsSave.setColumn(nrow, "YN_BUDGET_CTRL_ACNT", this.dsList.getColumn(i, "YN_BUDGET_CTRL_ACNT"));
        				break;
        		}
        	}

        	if (this.dsSave.rowcount == 0) return;

        	var strSvcId    = "save";
        	var strSvcType  = "save";
        	var inProc		= "_dsProc";
        	var inData      = "insert=dsSave";
        	var outData     = "";
        	var strArg      = "";
        	var callBackFnc = "fnCallback";

        	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
        						strSvcType , 	// transaction을 요청할 구분
        						inProc,			// Procedure 정보 Dataset 이름
        						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
        						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
        						callBackFnc); // 통신방법 정의 [생략가능]

        };

        this.fnLastRow = function ()
        {
        	var lastRow = -1;
        	for (var i = this.dsList.rowcount - 1; i >= 0; i--){
        		if(!this.gfnIsNull(this.dsList.getColumn(i , this.ucFlag))){
        			lastRow = i;
        			break;
        		}
        	}
        	return lastRow;
        };

        this.fnCopyData = function (objDs, row)
        {
        	var mappingCol = "TY_ETC1=TY_ETC1,CD_ETC1=CD_ETC1,DS_ETC11=DS_ETC1,"
        	    mappingCol+= "TY_ETC2=TY_ETC2,CD_ETC2=CD_ETC2,DS_ETC21=DS_ETC2,"
        		mappingCol+= "TY_REF=TY_REF,NO_REF=NO_REF,DS_REF=DS_REF,"
        		mappingCol+= "TY_REF2=TY_REF2,NO_REF2=NO_REF2,DS_REF2=DS_REF2,"
        		mappingCol+= "AM_REF1=AM_REF1,AM_REF2=AM_REF2,"
        		mappingCol+= "DT_REF1=DT_REF1,DT_REF2=DT_REF2,"
        		mappingCol+= "RT_REF1=RT_REF1,RT_REF2=RT_REF2,"
        		mappingCol+= "CD_GONGJONG=CD_GONGJONG,DS_GONGJONG=DS_GONGJONG,"
        		mappingCol+= "CD_SEMOK=CD_SEMOK,DS_SEMOK=DS_SEMOK";

        	this.dsList.copyRow(this.dsList.rowposition, objDs, row, mappingCol);
        };

        // 넥사크로의 copyRow 는 상황에 따라 문제를 일으킨다. 가급적 사용하지 말아야 함.
        this.fnCopyDataVat = function (sourceRow, targetRow)
        {

        	//trace("fnCopyDataVat  " + "dsList setColumn Row:" + targetRow + " / dsReturn getColumn:" + sourceRow );
        	this.dsList.setColumn(targetRow, "CD_VATDEPT_ACNT"	, this.dsReturn.getColumn(sourceRow, "CD_VATDEPT_ACNT"));
        	this.dsList.setColumn(targetRow, "CD_VATACCOUNT"	, this.dsReturn.getColumn(sourceRow, "CD_VATACCOUNT"));
        	this.dsList.setColumn(targetRow, "TY_SALEBUY"		, this.dsReturn.getColumn(sourceRow, "TY_SALEBUY"));
        	this.dsList.setColumn(targetRow, "CD_PROOF"			, this.dsReturn.getColumn(sourceRow, "CD_PROOF"));
        	this.dsList.setColumn(targetRow, "DS_PROOF"			, this.dsReturn.getColumn(sourceRow, "DS_PROOF"));
        	this.dsList.setColumn(targetRow, "TY_VATBGJE"		, this.dsReturn.getColumn(sourceRow, "TY_VATBGJE"));
        	this.dsList.setColumn(targetRow, "CD_VATVENDOR"		, this.dsReturn.getColumn(sourceRow, "CD_VATVENDOR"));
        	this.dsList.setColumn(targetRow, "DS_VATVENDOR"		, this.dsReturn.getColumn(sourceRow, "DS_VATVENDOR"));
        	this.dsList.setColumn(targetRow, "TY_VATVENDOR"		, this.dsReturn.getColumn(sourceRow, "TY_VATVENDOR"));
        	this.dsList.setColumn(targetRow, "AM_SUPPLY"		, this.dsReturn.getColumn(sourceRow, "AM_SUPPLY"));
        	this.dsList.setColumn(targetRow, "AM_VAT"			, this.dsReturn.getColumn(sourceRow, "AM_VAT"));
        	this.dsList.setColumn(targetRow, "DT_PROOF"			, this.dsReturn.getColumn(sourceRow, "DT_PROOF"));
        	this.dsList.setColumn(targetRow, "NO_CREDIT"		, this.dsReturn.getColumn(sourceRow, "NO_CREDIT"));
        	this.dsList.setColumn(targetRow, "DS_VATREM"		, this.dsReturn.getColumn(sourceRow, "DS_VATREM"));
        	this.dsList.setColumn(targetRow, "CK_OMIT"			, this.dsReturn.getColumn(sourceRow, "CK_OMIT"));
        	this.dsList.setColumn(targetRow, "TY_ISSUE"			, this.dsReturn.getColumn(sourceRow, "TY_ISSUE"));
        	this.dsList.setColumn(targetRow, "NO_VIEW"			, this.dsReturn.getColumn(sourceRow, "NO_VIEW"));
        	this.dsList.setColumn(targetRow, "VAT_RATE"			, this.dsReturn.getColumn(sourceRow, "VAT_RATE"));
        	this.dsList.setColumn(targetRow, "NO_VAT"			, this.dsReturn.getColumn(sourceRow, "NO_VAT"));
        	this.dsList.setColumn(targetRow, "FILE_DIR"			, this.dsReturn.getColumn(sourceRow, "FILE_DIR"));
        };

        //전표취소 처리
        this.fnSlipDelete = function (obj,e)
        {
        	if (this.gfnIsNull(this.gfnTrim(this.txtCD_TRADE.value))) {
        		this.gfnAlert("전표번호는 필수입니다.");
        		this.txtCD_TRADE.setFocus();
        		return;
        	}

        	this.gfnConfirm("전표를 삭제하시겠습니까?", "fnSlipDelete_callback");

        };

        this.fnSlipDelete_callback = function(strId, val)
        {
        	if(val == true) {
        		this.dsSlipDelete.clearData();
        		var nRow = this.dsSlipDelete.addRow();

        		//처리할 데이터 담기
        		this.dsSlipDelete.setColumn(nRow, "CD_TRADE"   , this.txtCD_TRADE.value);
        		this.dsSlipDelete.setColumn(nRow, "ID_TRANS", this.AuthClient.ID_USER);

        		var strSvcId    = "slipDelete";
        		var strSvcType  = "save";
        		var inProc		= "_dsProc";
        		var inData      = "slipDelete=dsSlipDelete";
        		var outData     = "";
        		var strArg      = "";
        		var callBackFnc = "fnCallback";

        		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
        							strSvcType , 	// transaction을 요청할 구분
        							inProc,			// Procedure 정보 Dataset 이름
        							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
        							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        							strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
        							callBackFnc); 	// 통신방법 정의 [생략가능]
        	}
        };

        //버튼처리
        this.fnSetButtonEnable = function (flag)
        {
        	trace(" fnSetButtonEnable $$$$ flag ::: "+flag);

        	this.FormBtns.Excel.set_enable(true);

        	switch(flag) {
        	case "S" :
        		this.FormBtns.Add.set_enable(false);
        		this.FormBtns.Save.set_enable(false);
        		this.FormBtns.Del.set_enable(false);

        		//this.btnRequestList.set_enable(false);
        		this.btnRequestList.set_enable(true);
        		this.btnSlipDelete.set_enable(false);
        		this.btnSlipNew.set_enable(false);
        		this.btnSlipBanje.set_enable(false);
        		//this.btnDFPopup.set_enable(false);
        		this.btnDFPopup.set_enable(true);
        		this.btnSlipCopy.set_enable(true);
        		this.btnSlipCopy2.set_enable(true);
        		//this.dxGrid.info = "Y";
        		this.dxGridSub.info = "Y";

        		this.ccfCD_CORP.set_enable(false);
        		this.calDT_ACCOUNT.set_enable(false);
        		this.ccboTY_SLIP.set_enable(false);
        		this.ccfACNTUNIT.set_enable(false);
        		this.mskAddCnt.set_visible(false);
        		this.btnAddRow.set_visible(false);
        		break;
        	case "I" :
        		this.FormBtns.Add.set_enable(true);
        		this.btnSlipNew.set_enable(true);
        		this.btnRequestList.set_enable(false);
        		this.btnSlipDelete.set_enable(false);
        		this.btnSlipBanje.set_enable(true);
        		this.btnSlipCopy.set_enable(false);
        		this.btnSlipCopy2.set_enable(false);
        		this.btnDFPopup.set_enable(false);
        		this.mskAddCnt.set_visible(true);
        		this.btnAddRow.set_visible(true);

        		//this.dxGrid.info = "N";
        		this.dxGridSub.info = "N";
        		break;
        	case "U" :
        		this.FormBtns.Add.set_enable(true);
        		this.FormBtns.Del.set_enable(true);
        		this.FormBtns.Excel.set_enable(true);
        		this.btnSlipNew.set_enable(true);
        		this.btnSlipDelete.set_enable(true);
        		this.btnSlipBanje.set_enable(true);
        		this.btnSlipCopy.set_enable(true);
        		this.btnSlipCopy2.set_enable(true);
        		this.btnDFPopup.set_enable(false);
        		this.btnRequestList.set_enable(true);

        		this.mskAddCnt.set_visible(true);
        		this.btnAddRow.set_visible(true);

        		//this.dxGrid.info = "N";
        		this.dxGridSub.info = "N";
        		break;
        	case "A" :
        		this.FormBtns.Add.set_enable(false);
        		this.FormBtns.Save.set_enable(false);
        		this.FormBtns.Del.set_enable(false);
        		this.btnRequestList.set_enable(false);
        		this.btnSlipNew.set_enable(true);
        		this.btnSlipDelete.set_enable(false);
        		this.btnSlipBanje.set_enable(false);
        		this.btnSlipCopy.set_enable(true);
        		this.btnSlipCopy2.set_enable(true);
        		this.btnDFPopup.set_enable(false);

        		this.mskAddCnt.set_visible(false);
        		this.btnAddRow.set_visible(false);
        		//this.dxGrid.info = "Y";
        		this.dxGridSub.info = "Y";
        		break;
        	}

        	if(this.getOwnerFrame().YN_DF == "Y"){
        		this.btnSlipCopy.set_enable(false);
        		this.btnSlipCopy2.set_enable(false);
        		this.btnSlipDelete.set_enable(false);
        	}

        	// 전표결제 버튼 활성화 여부
        	var nRow = this.dsList.findRowExpr("CD_APP == '1' || CD_APP == '2'");

        	/*
        	if( !this.gfnIsNull(this.txtCD_TRADE.value) && nRow == -1){
        		this.btnApprove.set_enable(true);
        	} else {
        		this.btnApprove.set_enable(false);
        	}
        	*/
        };

        //그리드 키다운 이벤트
        this.fnGrid_onkeydown = function(obj,e){
        	var colId = this.gfnGridGetBindColumnNameByIndex(obj, obj.getCellPos());

        	trace("### 그리드 키다운 이벤트 keycode :: "+e.keycode);
            trace("FLAG 3 =>" + this.dsList.getColumn(this.dsList.rowposition, this.ucFlag));
        	if(e.keycode == 86){	// paste
        		var fAcnt = this.dsList.findRowExpr("currow == "+(this.dsList.rowposition)+" && (CD_ACCOUNT == '" + this.gCD_VATACCOUNT + "' || CD_ACCOUNT == '" + this.gCD_ACNT_VAT_SALE + "')");
        		if(fAcnt > -1){
        			document.removeEventListener("paste", this._gfnGridPasteCallback);
        		}

        		if(this.dsList.findRowExpr("currow == "+(this.dsList.rowposition)+ " && !dataset.parent.gfnIsNull(CD_SLIP_MI) && nx_flag != '#'") > -1){
        			if (colId == "ISSUE_ID" || colId == "DT_ACCOUNT"|| colId == "DS_REM"){	//차대변 금액
        			}else{
        				document.removeEventListener("paste", this._gfnGridPasteCallback);
        			}
        		}
        	}
         	if(e.keycode == 119){	//F8일경우
        		if (colId == "YN_VAT"){	//증빙
        			this.fnCallVatPopup();	//부가세 팝업 호출
        		}
         	}
         	if(e.keycode == 13){	//엔터일경우
        		if (colId == "AM_DR" || colId == "AM_CR"){	//차대변 금액
        			if(this.fnBjDataCheck(this.dsList.rowposition)){
        				//반제전표 코드가 없으면 반제전표 팝업 호출
        					trace("반제전표 코드가 없으면 반제전표 팝업 호출->" + this.dsList.getColumn(this.dsList.rowposition, "CD_SLIP_MI"));
        				if(this.gfnIsNull(this.gfnTrim(this.dsList.getColumn(this.dsList.rowposition, "CD_SLIP_MI")))){
        					//반제전표 자동의로 팝업호출
        					//this.btnSlipBanje.click();
        				}
        			}
        		}
        		//colId == "YN_DEPT"
        		//if ( colId == "YN_DEPT" || colId == "CD_AUTOSLIP" || colId == "YN_VAT"){	//귀속부서명/증빙
        		if ( colId == "CD_AUTOSLIP" || colId == "YN_VAT"){	//귀속부서명/증빙
        			var sIssueId = this.gfnTrim(this.dsList.getColumn(this.dsList.rowposition, "ISSUE_ID"));
        			var sYnVat = this.gfnTrim(this.dsList.getColumn(this.dsList.rowposition, "YN_VAT"));
        			//전자세금계산서 번호가 있고 증빙을 입력 안했을경우
        			// 부가세등록계정여부 Y이고 증빙을 입력 안했을경우
        			var sYnVatAcnt = this.dsList.getColumn(rowPos, "YN_VAT_ACNT");
        			if((sYnVatAcnt == "Y" || !this.gfnIsNull(sIssueId)) && sYnVat == "N"){
        				this.fnCallVatPopup();
        				return;
        			}

        			this.fnAddData(this.dsList.rowposition, "KEY");
        		}
         	}
        	//Ctrl + 엔터(Enter)일 경우
        	if(e.ctrlkey && e.keycode == 13){
        		var rowPos = this.dsList.rowposition;
        		var flag = this.gfnGetFlag(this.dsList, rowPos);
        		var tRowPos = this.dsList.rowposition -1;

        		obj.removeEventHandler("onkeydown", this._grd_onkeydown, this);

        		var sIssueId = this.gfnTrim(this.dsList.getColumn(rowPos, "ISSUE_ID"));
        		var cellIdx = 0;
        		//if(flag != "D"){
        		if(flag != "D" && this.gfnIsNull(sIssueId)){

        			if (colId == "YN_VAT"){	//증빙
        				this.fnCallVatPopup();	//부가세 팝업 호출
        			}

        			var fAcnt = this.dsList.findRowExpr("currow == "+(rowPos)+" && (CD_ACCOUNT == '" + this.gCD_VATACCOUNT + "' || CD_ACCOUNT == '" + this.gCD_ACNT_VAT_SALE + "')");
        			//trace(" 키다운 fAcnt=>" + fAcnt);
        			//선급부가세/선수부가세가 아닐경우
        			if(fAcnt == -1){
        				if(this.dsList.rowposition > 0 && tRowPos > -1){
        					switch(colId) {
        						case "CD_ACCOUNT" :

        							// 부가세예수금, 부가세대급금일때 계정코드 컨트롤 엔터 사용금지
        							var sCdAccountPre = this.gfnTrim(this.dsList.getColumn(rowPos-1, "CD_ACCOUNT"));
        							if(sCdAccountPre == this.gCD_ACNT_VAT_SALE || sCdAccountPre == this.gCD_VATACCOUNT){
        								break;
        							}

        							this.dsList.set_enableevent(false);
        							this.dsList.setColumn(rowPos, "CD_ACCOUNT", this.dsList.getColumn(tRowPos, "CD_ACCOUNT"));
        							this.dsList.setColumn(rowPos, "DS_ACCOUNT", this.dsList.getColumn(tRowPos, "DS_ACCOUNT"));
        							this.dsList.setColumn(rowPos, "TY_ACCOUNT", this.dsList.getColumn(tRowPos, "TY_ACCOUNT"));
        							this.dsList.setColumn(rowPos, "YN_CONSTCOST", this.dsList.getColumn(tRowPos, "YN_CONSTCOST"));
        							this.dsList.setColumn(rowPos, "CD_SEMOK", this.dsList.getColumn(tRowPos, "CD_SEMOK"));
        							this.dsList.setColumn(rowPos, "DS_SEMOK", this.dsList.getColumn(tRowPos, "DS_SEMOK"));
        							this.dsList.setColumn(rowPos, "TY_CRDR", this.dsList.getColumn(tRowPos, "TY_CRDR"));
        							this.dsList.setColumn(rowPos, "TY_CRDR_ACNT", this.dsList.getColumn(tRowPos, "TY_CRDR_ACNT"));
        							this.dsList.setColumn(rowPos, "YN_BUDGET_CTRL_ACNT", this.dsList.getColumn(tRowPos, "YN_BUDGET_CTRL_ACNT"));
        							this.dsList.setColumn(rowPos, "CD_BIMOK", this.dsList.getColumn(tRowPos, "CD_BIMOK"));
        							this.dsList.setColumn(rowPos, "DS_BIMOK", this.dsList.getColumn(tRowPos, "DS_BIMOK"));

        							this.dsList.setColumn(rowPos, "CK_ETC1_MO", this.dsList.getColumn(tRowPos, "CK_ETC1_MO"));
        							this.dsList.setColumn(rowPos, "DS_ETC1", this.dsList.getColumn(tRowPos, "DS_ETC1"));
        							this.dsList.setColumn(rowPos, "TY_ETC1_FLAG", this.dsList.getColumn(tRowPos, "TY_ETC1_FLAG"));

        							this.dsList.setColumn(rowPos, "CK_ETC2_MO", this.dsList.getColumn(tRowPos, "CK_ETC2_MO"));
        							this.dsList.setColumn(rowPos, "DS_ETC2", this.dsList.getColumn(tRowPos, "DS_ETC2"));
        							this.dsList.setColumn(rowPos, "TY_ETC2_FLAG", this.dsList.getColumn(tRowPos, "TY_ETC2_FLAG"));

        							this.dsList.setColumn(rowPos, "CK_REFNO_MO", this.dsList.getColumn(tRowPos, "CK_REFNO_MO"));
        							this.dsList.setColumn(rowPos, "DS_REFNO", this.dsList.getColumn(tRowPos, "DS_REFNO"));
        							this.dsList.setColumn(rowPos, "TY_REFNO_FLAG", this.dsList.getColumn(tRowPos, "TY_REFNO_FLAG"));

        							this.dsList.setColumn(rowPos, "CK_REFNO2_MO", this.dsList.getColumn(tRowPos, "CK_REFNO2_MO"));
        							this.dsList.setColumn(rowPos, "DS_REFNO2", this.dsList.getColumn(tRowPos, "DS_REFNO2"));
        							this.dsList.setColumn(rowPos, "TY_REFNO2_FLAG", this.dsList.getColumn(tRowPos, "TY_REFNO2_FLAG"));

        							this.dsList.setColumn(rowPos, "CK_REFAM1_MO", this.dsList.getColumn(tRowPos, "CK_REFAM1_MO"));
        							this.dsList.setColumn(rowPos, "DS_REFAM1", this.dsList.getColumn(tRowPos, "DS_REFAM1"));
        							this.dsList.setColumn(rowPos, "CK_REFAM2_MO", this.dsList.getColumn(tRowPos, "CK_REFAM2_MO"));
        							this.dsList.setColumn(rowPos, "DS_REFAM2", this.dsList.getColumn(tRowPos, "DS_REFAM2"));

        							this.dsList.setColumn(rowPos, "CK_REFDT1_MO", this.dsList.getColumn(tRowPos, "CK_REFDT1_MO"));
        							this.dsList.setColumn(rowPos, "DS_REFDT1", this.dsList.getColumn(tRowPos, "DS_REFDT1"));

        							this.dsList.setColumn(rowPos, "CK_REFDT2_MO", this.dsList.getColumn(tRowPos, "CK_REFDT2_MO"));
        							this.dsList.setColumn(rowPos, "DS_REFDT2", this.dsList.getColumn(tRowPos, "DS_REFDT2"));

        							this.dsList.setColumn(rowPos, "CK_REFRT1_MO", this.dsList.getColumn(tRowPos, "CK_REFRT1_MO"));
        							this.dsList.setColumn(rowPos, "DS_REFRT1", this.dsList.getColumn(tRowPos, "DS_REFRT1"));

        							this.dsList.setColumn(rowPos, "CK_REFRT2_MO", this.dsList.getColumn(tRowPos, "CK_REFRT2_MO"));
        							this.dsList.setColumn(rowPos, "DS_REFRT2", this.dsList.getColumn(tRowPos, "DS_REFRT2"));

        							//this.dsList.setColumn(rowPos, "CK_GONGJONG_MO", this.dsList.getColumn(tRowPos, "CK_GONGJONG_MO"));
        							//this.dsList.setColumn(rowPos, "DS_GONGJONG1", this.dsList.getColumn(tRowPos, "DS_GONGJONG1"));
        							this.dsList.setColumn(rowPos, "TY_ETC1", this.dsList.getColumn(tRowPos, "TY_ETC1"));
        							this.dsList.setColumn(rowPos, "TY_ETC2", this.dsList.getColumn(tRowPos, "TY_ETC2"));
        							this.dsList.setColumn(rowPos, "TY_REF", this.dsList.getColumn(tRowPos, "TY_REF"));
        							this.dsList.setColumn(rowPos, "TY_REF2", this.dsList.getColumn(tRowPos, "TY_REF2"));
        							this.dsList.setColumn(rowPos, "YN_VAT_ACNT", this.dsList.getColumn(tRowPos, "YN_VAT_ACNT"));

        							this.fnEtcGridSetting(rowPos);

        							this.dsList.set_enableevent(true);

         							var ynBudgetCtrlAcnt = this.dsList.getColumn(rowPos, "YN_BUDGET_CTRL_ACNT");
         							var ynBudget = this.dsList.getColumn(rowPos, "YN_BUDGET");
         							this.fnSetBudgetTabData(ynBudget, ynBudgetCtrlAcnt);

        							cellIdx = this.dxGrid.getBindCellIndex("body", "DS_REM");
        							this.dxGrid.setCellPos(cellIdx, rowPos);
        							//this.dxGrid.showEditor(true);

        							break;
        						case "CD_VENDOR" :
        						case "DS_VENDOR" :
        							this.dsList.set_enableevent(false);
        							this.dsList.setColumn(rowPos, "CD_VENDOR", this.dsList.getColumn(tRowPos, "CD_VENDOR"));
        							this.dsList.setColumn(rowPos, "DS_VENDOR", this.dsList.getColumn(tRowPos, "DS_VENDOR"));
        							this.dsList.setColumn(rowPos, "TY_VENDOR", this.dsList.getColumn(tRowPos, "TY_VENDOR"));
        							this.dsList.set_enableevent(true);

        							//cellIdx = this.dxGrid.getBindCellIndex("body", "CD_DEPT_BE");
        							//this.dxGrid.setCellPos(cellIdx, rowPos);
        							cellIdx = this.dxGrid.getBindCellIndex("body", "YN_VAT");
        							this.dxGrid.setCellPos(cellIdx, rowPos);
        							break;
        						case "CD_DEPT_BE" :
        							this.dsList.set_enableevent(false);

        							this.dsList.setColumn(rowPos, "CD_DEPT_BE", this.dsList.getColumn(tRowPos, "CD_DEPT_BE"));
        							this.dsList.setColumn(rowPos, "DS_DEPT"   , this.dsList.getColumn(tRowPos, "DS_DEPT"));
        							this.dsList.setColumn(rowPos, "YN_BUDGET", this.dsList.getColumn(tRowPos, "YN_BUDGET"));	// 예산부서여부
        							this.dsList.setColumn(rowPos, "YN_BUDGET_CONTROL" , this.dsList.getColumn(tRowPos, "YN_BUDGET_CONTROL"));	// 예산통제여부
        							this.dsList.setColumn(rowPos, "CD_LOCAL_CURR" , this.dsList.getColumn(tRowPos, "CD_LOCAL_CURR"));	// 로컬통화

        							this.dsList.setColumn(rowPos, "CD_DEPTOFFICER", this.dsList.getColumn(tRowPos, "CD_DEPTOFFICER"));
        							this.dsList.setColumn(rowPos, "DS_DEPTOFFICER", this.dsList.getColumn(tRowPos, "DS_DEPTOFFICER"));

        							//매입귀속부서
        							this.dsList.setColumn(rowPos, "CD_DEPT_BUY", this.dsList.getColumn(tRowPos, "CD_DEPT_BUY"));
        							this.dsList.setColumn(rowPos, "DS_DEPT_BUY", this.dsList.getColumn(tRowPos, "DS_DEPT_BUY"));
        							//본사귀속부서
        							this.dsList.setColumn(rowPos, "CD_DEPT_ACNT_BON", this.dsList.getColumn(tRowPos, "CD_DEPT_ACNT_BON"));
        							this.dsList.setColumn(rowPos, "DS_DEPT_ACNT_BON", this.dsList.getColumn(tRowPos, "DS_DEPT_ACNT_BON"));

        							this.dsList.set_enableevent(true);

        							var ynBudgetCtrlAcnt = this.dsList.getColumn(rowPos, "YN_BUDGET_CTRL_ACNT");
        							var ynBudget = this.dsList.getColumn(rowPos, "YN_BUDGET");
        							this.fnSetBudgetTabData(ynBudget, ynBudgetCtrlAcnt);

        							//cellIdx = this.dxGrid.getBindCellIndex("body", "YN_VAT");
        							//cellIdx = this.dxGrid.getBindCellIndex("body", "CD_ACCOUNT");
        							cellIdx = this.dxGrid.getBindCellIndex("body", "CD_EXEC_CURR");
        							this.dxGrid.setCellPos(cellIdx, rowPos);
        							//this.dxGrid.showEditor(true);
        						break;
        						case "CD_EXEC_CURR" : 	// 집행통화
        							this.dsList.setColumn(rowPos, colId, this.dsList.getColumn(tRowPos, colId));
        							cellIdx = this.dxGrid.getBindCellIndex("body", "CD_ACCOUNT");
        							trace(cellIdx + "/ 집행통화 컨트롤 엔터 포커스 이동?" + this.dsList.getColumn(tRowPos, colId));
        							this.dxGrid.setCellPos(cellIdx, rowPos);
        						break;
        						case "DT_ACCOUNT" :		// 회계일자
        						case "DS_REM" :			// 적요
         						case "AM_EXEC_DR" :		// 차변금액
        						case "AM_EXEC_CR" :		// 대변금액
        // 						case "AM_DR" :			// 차변금액
        // 						case "AM_CR" :			// 대변금액

        							if(colId == "DT_ACCOUNT"){
        								cellIdx = this.dxGrid.getBindCellIndex("body", "CD_ACCOUNT");
        								this.dsList.setColumn(rowPos, colId, this.dsList.getColumn(tRowPos, colId));
        							}else if(colId == "DS_REM"){
        								if(this.dsList.getColumn(rowPos, "TY_CRDR") == "D"){
        									cellIdx = this.dxGrid.getBindCellIndex("body", "AM_DR");
        								}else{
        									cellIdx = this.dxGrid.getBindCellIndex("body", "AM_CR");
        								}
        								this.dsList.setColumn(rowPos, colId, this.dsList.getColumn(tRowPos, colId));
        							}else{
        								// 44000200 기타수익(외환차익),  46000201 금융수익(외환차익)
        								// 45000300 / 기타비용(외환차손), 47000201 금융비용(외환차손)

        								var CD_ACCOUNT = this.dsList.getColumn(rowPos, "CD_ACCOUNT");
        								/*
        								if(CD_ACCOUNT == "44000200" || CD_ACCOUNT == "46000201"
        									|| CD_ACCOUNT == "45000300" || CD_ACCOUNT == "47000201"
        								){
        								*/

        									cellIdx = this.dxGrid.getBindCellIndex("body", "CD_VENDOR");
        									this.dsList.setColumn(rowPos, "TY_CRDR", this.dsList.getColumn(tRowPos, "TY_CRDR"));

        									var totAM_DR = 0, totAM_CR = 0, totAM_DRCR = 0;
        									var totAM_EXEC_DR = 0, totAM_EXEC_CR = 0, totAM_EXEC_DRCR = 0;
        									var totAM_LOCAL_DR = 0, totAM_LOCAL_CR = 0, totAM_LOCAL_DRCR = 0;
        									var totAM_USD_DR = 0, totAM_USD_CR = 0, totAM_USD_DRCR = 0;
        									var totAM_EUR_DR = 0, totAM_EUR_CR = 0, totAM_EUR_DRCR = 0;

        									for(var i=0;i<this.dsList.rowcount;i++){
        										if(this.gfnGetFlag(this.dsList, i) != "D"){
        											if(i != rowPos){
        												totAM_DR += nexacro.toNumber(this.dsList.getColumn(i, "AM_DR"),0);
        												totAM_CR += nexacro.toNumber(this.dsList.getColumn(i, "AM_CR"),0);
        												totAM_DRCR = Math.abs(totAM_DR - totAM_CR);
        												// 차변 - 대변

        												totAM_EXEC_DR += nexacro.toNumber(this.dsList.getColumn(i, "AM_EXEC_DR"),0);
        												totAM_EXEC_CR += nexacro.toNumber(this.dsList.getColumn(i, "AM_EXEC_CR"),0);
        												totAM_EXEC_DRCR = Math.abs(totAM_EXEC_DR - totAM_EXEC_CR);

        												totAM_LOCAL_DR += nexacro.toNumber(this.dsList.getColumn(i, "AM_LOCAL_DR"),0);
        												totAM_LOCAL_CR += nexacro.toNumber(this.dsList.getColumn(i, "AM_LOCAL_CR"),0);
        												totAM_LOCAL_DRCR = Math.abs(totAM_LOCAL_DR - totAM_LOCAL_CR);

        												totAM_USD_DR += nexacro.toNumber(this.dsList.getColumn(i, "AM_USD_DR"),0);
        												totAM_USD_CR += nexacro.toNumber(this.dsList.getColumn(i, "AM_USD_CR"),0);
        												totAM_USD_DRCR = Math.abs(totAM_USD_DR - totAM_USD_CR);

        												totAM_EUR_DR += nexacro.toNumber(this.dsList.getColumn(i, "AM_EUR_DR"),0);
        												totAM_EUR_CR += nexacro.toNumber(this.dsList.getColumn(i, "AM_EUR_CR"),0);
        												totAM_EUR_DRCR = Math.abs(totAM_EUR_DR - totAM_EUR_CR);
        											}
        										}
        									}

        									// 원화차액
        									if(totAM_DR == totAM_CR){
        										//this.dsList.setColumn(rowPos, colId, this.dsList.getColumn(tRowPos, colId));
        									}


        									// 44000200 기타수익(외환차익),  46000201 금융수익(외환차익)
        									// 45000300 / 기타비용(외환차손), 47000201 금융비용(외환차손)
        									if(CD_ACCOUNT == "44000200" || CD_ACCOUNT == "46000201" || CD_ACCOUNT == "45000300" || CD_ACCOUNT == "47000201"){

        										if(totAM_DR > totAM_CR){
        											// 차변 > 대변
        											// 대변에 넣어줌
        											this.dsList.setColumn(rowPos, "TY_CRDR", "C");
        											this.dsList.setColumn(rowPos, "AM_CR", totAM_DRCR);

        											// 로컬화 차액 차변 > 대변
        											var nOperand = (totAM_LOCAL_DR > totAM_LOCAL_CR) ? 1 : -1;
        											this.dsList.setColumn(rowPos, "AM_LOCAL_CR", totAM_LOCAL_DRCR * nOperand);

        											// 미화 차액
        											nOperand = (totAM_USD_DR > totAM_USD_CR) ? 1 : -1;
        											this.dsList.setColumn(rowPos, "AM_USD_CR", totAM_USD_DRCR  * nOperand);

        											// 유로화 차액
        											nOperand = (totAM_EUR_DR > totAM_EUR_CR) ? 1 : -1;
        											this.dsList.setColumn(rowPos, "AM_EUR_CR", totAM_EUR_DRCR * nOperand);


        										}else{
        											// 대변 > 차변
        											// 차변에 넣어줌
        											this.dsList.setColumn(rowPos, "TY_CRDR", "D");
        											this.dsList.setColumn(rowPos, "AM_DR", totAM_DRCR);

        											// 로컬화 차액 차변 < 대변
        											var nOperand = (totAM_LOCAL_DR < totAM_LOCAL_CR) ? 1 : -1;
        											this.dsList.setColumn(rowPos, "AM_LOCAL_DR", totAM_LOCAL_DRCR * nOperand);

        											// 미화 차액
        											nOperand = (totAM_USD_DR < totAM_USD_CR) ? 1 : -1;
        											this.dsList.setColumn(rowPos, "AM_USD_DR", totAM_USD_DRCR  * nOperand);

        											// 유로화 차액
        											nOperand = (totAM_EUR_DR < totAM_EUR_CR) ? 1 : -1;
        											this.dsList.setColumn(rowPos, "AM_EUR_DR", totAM_EUR_DRCR * nOperand);

        										}
        									}else{	// 계정
        										if(totAM_EXEC_DR > totAM_EXEC_CR){
        											// 차변 > 대변
        											// 대변에 넣어줌
        											this.dsList.setColumn(rowPos, "TY_CRDR", "C");
        											this.dsList.setColumn(rowPos, "AM_EXEC_CR", totAM_EXEC_DRCR);
        										}else{
        											// 대변 > 차변
        											// 차변에 넣어줌
        											this.dsList.setColumn(rowPos, "TY_CRDR", "D");
        											this.dsList.setColumn(rowPos, "AM_EXEC_DR", totAM_EXEC_DRCR);
        										}
        										trace("자동계산 : " + rowPos);
        										// 로컬화, 원화(AM_DR, AM_CR) 계산
        										this.fnSetAmAccouont(rowPos);
        									}

        									/*
        									// 로컬화 차액
        									if(totAM_LOCAL_DR == totAM_LOCAL_CR){
        										//this.dsList.setColumn(rowPos, colId, this.dsList.getColumn(tRowPos, colId));
        									}else if(totAM_LOCAL_DR > totAM_LOCAL_CR){
        										this.dsList.setColumn(rowPos, "AM_LOCAL_CR", totAM_LOCAL_DRCR);
        										this.dsList.setColumn(rowPos, "TY_CRDR", "C");
        									}else{
        										this.dsList.setColumn(rowPos, "AM_LOCAL_DR", totAM_LOCAL_DRCR);
        										this.dsList.setColumn(rowPos, "TY_CRDR", "D");
        									}

        									// 미화 차액
        									if(totAM_USD_DR == totAM_USD_CR){
        										//this.dsList.setColumn(rowPos, colId, this.dsList.getColumn(tRowPos, colId));
        									}else if(totAM_USD_DR > totAM_USD_CR){
        										this.dsList.setColumn(rowPos, "AM_USD_CR", totAM_USD_DRCR);
        										this.dsList.setColumn(rowPos, "TY_CRDR", "C");
        									}else{
        										this.dsList.setColumn(rowPos, "AM_USD_DR", totAM_USD_DRCR);
        										this.dsList.setColumn(rowPos, "TY_CRDR", "D");
        									}

        									// 유로화 차액
        									if(totAM_EUR_DR == totAM_EUR_CR){
        										//this.dsList.setColumn(rowPos, colId, this.dsList.getColumn(tRowPos, colId));
        									}else if(totAM_EUR_DR > totAM_EUR_CR){
        										this.dsList.setColumn(rowPos, "AM_EUR_CR", totAM_EUR_DRCR);
        										this.dsList.setColumn(rowPos, "TY_CRDR", "C");
        									}else{
        										this.dsList.setColumn(rowPos, "AM_EUR_DR", totAM_EUR_DRCR);
        										this.dsList.setColumn(rowPos, "TY_CRDR", "D");
        									}
        									*/
        								//} // if(CD_ACCOUNT == "4710011"){
        							}

        // 							if(this.fnBjDataCheck(rowPos)){
        // 								//반제전표 코드가 없으면 반제전표 팝업 호출
        // 								if(this.gfnIsNull(this.gfnTrim(this.dsList.getColumn(rowPos, "CD_SLIP_MI")))){
        // 									//반제전표 자동의로 팝업호출
        // 									//this.btnSlipBanje.click();
        // 								}
        // 							}

        						break;
        					}
        				}
        			}
        		}
        		obj.addEventHandler("onkeydown", this._grd_onkeydown, this);
        	}
        }

        //반제전표
        this.fnSlipBanje = function (obj,e)
        {
        	//if(!this.fnCheckValidate()) return;

        	var param = {};
        	param.CD_CORP    = this.ccfCD_CORP.form.CDTextBox.value;
        	param.DS_CORP    = this.ccfCD_CORP.form.DSTextBox.value;
        	param.CD_DEPT_BH = this.ccfACNTUNIT.form.CDTextBox.value;
        	param.DS_DEPT_BH = this.ccfACNTUNIT.form.DSTextBox.value;
        	param.CD_ACCOUNT = this.dsList.getColumn(this.dsList.rowposition, "CD_ACCOUNT");
        	param.DS_ACCOUNT = this.dsList.getColumn(this.dsList.rowposition, "DS_ACCOUNT");
        	param.GR_SEARCH  = this.FormInfo.GR_SEARCH;

        	var sPopupCallBack = "fnBanjeSlipPopupCallback";
        	this.gfnFormOpenNonAuth(this.FormInfo.CD_MODULE, "DHA_ISSUESLIPMIKYULDLG", sPopupCallBack, param, 1280, 600);
        }

        //반제전표 팝업 콜백(데이터 추가)
        this.fnBanjeSlipPopupAddData = function(val) {
        	this.fnBanjeSlipPopupSetData(val);
        }

        //반제전표 팝업 콜백(확인 버튼)
        this.fnBanjeSlipPopupCallback = function(svcID, val) {
        	this.fnBanjeSlipPopupSetData(val);
        };

        //반제전표 팝업 콜백 데이터 셋팅
        this.fnBanjeSlipPopupSetData = function(val){
        	//var nIndex1 = this.dxGrid.findEventHandler("onkeydown", this._grd_onkeydown, this );
        	//if(nIndex1 == -1) this.dxGrid.addEventHandler("onkeydown", this._grd_onkeydown, this);

        	var nIndex2 = this.dxGrid.findEventHandler("onkeydown", this.fnGrid_onkeydown, this );
        	if(nIndex2 == -1) this.dxGrid.addEventHandler("onkeydown", this.fnGrid_onkeydown, this);
        	var banFlag = "I";

        	this.dsReturn.clearData();

         	if(!this.gfnIsNull(val)) {
        		this.dsReturn.loadXML(val);

        		var rowCnt = this.dsList.rowcount;
        		var rowPos = this.dsList.rowposition;

        		this.dsList.set_enableevent(false);

        		var nRow = 0;
        		trace("반제전표리턴->" + rowPos);
        		//trace("반제전표리턴->" + this.dsReturn.saveXML());

        		for(var i = 0 ; i < this.dsReturn.rowcount ; i++){
        			var cdSlip = this.dsReturn.getColumn(i, "CD_SLIP");	//반제전표의 전표번호
        			var fRow = this.dsList.findRowExpr(this.ucFlag +" == 'I' && CD_SLIP_MI == '"+cdSlip+"'");	//이미 등록한 반제전표가 있을경우 덮어 씌우기

        			trace(" fRow=>" + fRow );
        			if(fRow > -1) {
        				nRow = fRow;
        				//alert("ucFlag :" + this.dsList.getColumn(this.dsList.rowposition, this.ucFlag));
        			} else {
        				if(rowCnt == 0) {
        					//alert("fnBanjeSlipPopupCallback : 1");
        					nRow = this.dsList.addRow();
        					banFlag = "I";
        				} else {
        					//현재 로우가 반제전표를 등록해야할 데이터일 경우
        					if(this.fnBjDataCheck(rowPos)) {
        						if (this.dsList.getColumn(rowPos, this.ucFlag)=="I"){
        							banFlag = "I"
        						} else
        						{	banFlag = "U"
        						}
        						// nRow = rowPos;
        						//alert("ucFlag :" + this.dsList.getColumn(this.dsList.rowposition, this.ucFlag));
        						//trace("banFlag 1  =>" + banFlag);
        						//alert("fnBanjeSlipPopupCallback : 3 : " + banFlag);
        						nRow = rowPos;

        					} else {
        						//alert("fnBanjeSlipPopupCallback : 4");
        						//nRow = this.dsList.addRow();
        						nRow = this.dsList.insertRow(rowPos);
        						banFlag = "I";
        					}
        					rowPos++;
        				}
        			}

        			//trace("nRow :: " + nRow);
        			//}else if((rowPos+1) != rowCnt && rowPos > -1){	//부가세이면 +1
        			//	nRow = this.dsList.insertRow(rowPos);
        			//}

        			this.dsReturn.setColumn(i, "CD_AUTOSLIP", "");
        			// 반제전표 복사
        			var oldcdSlip = this.dsList.getColumn(nRow, "CD_SLIP");;
        			this.dsList.copyRow(nRow, this.dsReturn, i);

        			var vcdSlip  = "";
        			var vcdTrade = "";

        			if(!this.gfnIsNull(this.txtCD_TRADE.value)){
        			    if (banFlag == "I"){
        					vcdSlip = this.fnSetCdSlip(this.txtCD_TRADE.value);
        				} else {
        					vcdSlip = oldcdSlip;
        				}
        				vcdTrade = this.txtCD_TRADE.value;
        			}
        			//trace("vcdSlip=> " + vcdSlip);
        			this.dsList.setColumn(nRow, "CD_SLIP"   	, vcdSlip);
        			this.dsList.setColumn(nRow, "FILE_DIR"  	, vcdSlip);
        			this.dsList.setColumn(nRow, "CD_TRADE"  	, vcdTrade);
        			this.dsList.setColumn(nRow, "DT_ACCOUNT"  	, this.calDT_ACCOUNT.value);
        			this.dsList.setColumn(nRow, "TY_CLOSING"	, this.ccboTY_SLIP.value);						//전표구분
        			this.dsList.setColumn(nRow, "CD_CORP"   	, this.ccfCD_CORP.form.CDTextBox.value);		//법인코드
        			this.dsList.setColumn(nRow, "CD_SLIP_MI"   	, this.dsReturn.getColumn(i, "CD_SLIP"));		//반제전표의 전표번호
        			this.dsList.setColumn(nRow, "CD_DEPT_BH"   	, this.ccfACNTUNIT.form.CDTextBox.value);		//발행부서
        			//this.dsList.setColumn(nRow, "DS_ACCOUNT"   	, this.dsReturn.getColumn(i, "DS_ACCOUNT"));	//반제전표의 계정명

        			//this.dsList.setColumn(nRow, "CD_DEPT_BH"   	, this.ccfACNTUNIT.form.CDTextBox.value);
        			//this.dsList.setColumn(nRow, "CD_DEPT_BE"   	, this.dsReturn.getColumn(i, "CD_DEPT_BE"));
        			//this.dsList.setColumn(nRow, "DS_DEPT"   	, this.dsReturn.getColumn(i, "DS_DEPT"));

        			//this.dsList.setColumn(nRow, "CD_VENDOR"   	, this.dsReturn.getColumn(i, "CD_VENDOR"));
        			//this.dsList.setColumn(nRow, "DS_VENDOR"   	, this.dsReturn.getColumn(i, "DS_VENDOR"));
        			//this.dsList.setColumn(nRow, "DS_REM"   		, this.dsReturn.getColumn(i, "DS_REM"));

        			//this.dsList.set_enableevent(false);
        			this.dsList.setColumn(nRow, "YN_VAT" 		, "N");

        			this.dsList.setColumn(nRow, "YN_APPR"  		, "N");

        			// 차대구분 : 대변(CR) / 차변(DR)
        			var amYy = (this.dsReturn.getColumn(i, "TY_CRDR") == "D") ? "DR" : "CR";
        			//trace("차대구분확인 -> " + amYy);

        			// 반제금액(금번) 금액에 넣기
        			this.dsList.setColumn(nRow, "AM_EXEC_"+amYy, this.dsReturn.getColumn(i, "AM_REMAIN_UNBOUND_EXEC"));		//반제금액_집행화
        			this.dsList.setColumn(nRow, "AM_LOCAL_"+amYy, this.dsReturn.getColumn(i, "AM_REMAIN_UNBOUND_LOCAL"));	//반제금액_로컬화
        			this.dsList.setColumn(nRow, "AM_USD_"+amYy, this.dsReturn.getColumn(i, "AM_REMAIN_UNBOUND_USD"));	    //반제금액_미화
        			this.dsList.setColumn(nRow, "AM_EUR_"+amYy, this.dsReturn.getColumn(i, "AM_REMAIN_UNBOUND_EUR")); 		//반제금액_유로화
        			this.dsList.setColumn(nRow, "AM_"+amYy, this.dsReturn.getColumn(i, "AM_REMAIN_UNBOUND"));				//반제금액_원화
        			//trace("banFlag =>" + banFlag );
        			this.dsList.setColumn(nRow, this.ucFlag , banFlag);
        			//this.fnSetAmAccouont(this.dsList.rowposition);
        	 	}
        		//trace("FLAG 1 =>" + this.dsList.getColumn(this.dsList.rowposition, this.ucFlag));
        		this.dsList.set_enableevent(true);

        		this.gfnSetFormStatus(this, banFlag);

        		//항번 셋팅
        		this.fnNoViewSetting();

        		//하단 관리항목 로우 추가
        		if(this.dsListSub.rowcount == 0){
        			this.gfnGridAdd(this.dxGridSub, null, false);
        		}

        		var colDT_ACCOUNT = this.dxGrid.getBindCellIndex("body", "DT_ACCOUNT");
        		this.dxGrid.setCellPos(colDT_ACCOUNT, nRow);

        		//관리항목 셋팅
        		this.fnEtcGridSetting(nRow);

        		//하단 계산
        		this.fnCalcSlip();

        		//trace("FLAG 2 =>" + this.dsList.getColumn(this.dsList.rowposition, this.ucFlag));
         	}
        }

        // 전표순번조정 및 적요수정
        this.fnSlipModify = function (obj,e)
        {

        	var cdTrade = nexacro.replaceAll(this.gfnTrim(this.gfnNvl(this.txtCD_TRADE.value,"")), "-","");
        	if(this.gfnIsNull(cdTrade)){
        		this.gfnAlert("전표번호를 입력하신 후 처리하세요.");
        		return;
        	}

        	var param = {};
        	param.CD_TRADE = cdTrade;		// 전표번호

        	this.gfnFormOpenNonAuth("DHA", "DHA_SLIPMODIFY", "fnAprvDialogCallback", param, 1280, 500);
        }

        // 기성고조서
        this.fnAmountWorkComplet = function (obj,e)
        {
        	var DS_REF2   = this.gfnTrim(this.dsList.getColumn(this.dsList.rowposition, "DS_REF2"));

        	if(!this.gfnIsNull(DS_REF2)){
        		// ID_FORM=DSB_MAGAM_VENDOR&CD_SITE=12102701&YM_WORK=202112
        		//trace("기성고조서->" + DS_REF2);

        		var divisionRef1 = DS_REF2.split("&");
        		var ID_FORM = divisionRef1[0].split("=");
        		var CD_SITE = divisionRef1[1].split("=");
        		var YM_WORK = divisionRef1[2].split("=");

        		var param = {};
        		param.CD_SITE = CD_SITE[1];
        		param.YM_WORK = YM_WORK[1];

        		this.gfnFormOpenNonAuth("DSB", ID_FORM[1], "", param, 1280, 500);
        	}
        }

        // 예산
        this.fnBudgetDivert = function (obj,e)
        {

        	var sYrAcnt = this.calDT_ACCOUNT.value;
        	if (this.gfnIsNull(sYrAcnt)) {
        		this.gfnAlert("회계년도를 입력하세요.");
        		return false;
        	}

        	var sACNTUNIT = this.ccfACNTUNIT.form.CDTextBox.value;
        	if (this.gfnIsNull(sACNTUNIT)) {
        		this.gfnAlert("발행부서를 입력하세요.");
        		return false;
        	}

        	var param = {};
        	param.YR_ACCOUNT = sYrAcnt.substring(0, 4);
        	param.CD_CORP    = this.ccfCD_CORP.form.CDTextBox.value;
        	param.DS_CORP    = this.ccfCD_CORP.form.DSTextBox.value;
        	param.CD_DEPTOFFICER = this.ccfACNTUNIT.form.CDTextBox.value;
        	param.DS_DEPTOFFICER = this.ccfACNTUNIT.form.DSTextBox.value;
        	//param.CD_ACCOUNT = this.dsList.getColumn(this.dsList.rowposition, "CD_ACCOUNT");
        	//param.DS_ACCOUNT = this.dsList.getColumn(this.dsList.rowposition, "DS_ACCOUNT");
        	param.GR_SEARCH  = this.FormInfo.GR_SEARCH;

        	var sPopupCallBack = "fnBudgetDivertPopupCallback";
        	this.gfnFormOpenNonAuth("DHA", "DHA_DIVERT_SLIP_DLG", sPopupCallBack, param, 1280, 500);
        }

        //예산 팝업 콜백
        this.fnBudgetDivertPopupCallback = function(svcID, val) {
        	this.dsReturnBudget.clearData();

        	// 전자결재상태 ST_APRV 공통코드 DZ - DZ_APRV
        	// 1임시저장	2결재상신	3결재중	4결재완료	5반려	6상신취소	7작성취소
        	if(this.dsList.getColumn(0, "ST_APRV") == "1" || this.dsList.getColumn(0, "ST_APRV") == "2"
        		|| this.dsList.getColumn(0, "ST_APRV") == "3" || this.dsList.getColumn(0, "ST_APRV") == "4"
        		|| this.dsList.getColumn(0, "YN_APPR") == "Y"
        	){
        		return;
        	}

        	if(!this.gfnIsNull(val)) {
        		this.dsReturnBudget.loadXML(val);

        		var rowCnt = this.dsList.rowcount;
        		var rowPos = this.dsList.rowposition;


        		for(var i = 0 ; i < this.dsReturnBudget.rowcount ; i++){
        			//var nRow = this.dsList.addRow();
        			var nRow = this.gfnGridAdd(this.dxGrid, "bottom", true);

        			this.dsList.setColumn(nRow, "DT_ACCOUNT"  	, this.calDT_ACCOUNT.value);
        			this.dsList.setColumn(nRow, "TY_CLOSING"	, this.ccboTY_SLIP.value);						// 전표구분
        			this.dsList.setColumn(nRow, "CD_CORP"   	, this.ccfCD_CORP.form.CDTextBox.value);		// 법인코드

        			this.dsList.setColumn(nRow, "CD_DEPT_BE"   	, this.ccfACNTUNIT.form.CDTextBox.value);
        			this.dsList.setColumn(nRow, "CD_DEPT_BH"	, this.ccfACNTUNIT.form.CDTextBox.value);	//발행부서
        			this.dsList.setColumn(nRow, "DS_DEPT"   	, this.dsReturnBudget.getColumn(0, "DS_DEPTOFFICER"));

        			var CD_BIMOK = this.dsReturnBudget.getColumn(i, "CD_BIMOK");
        			var CD_ACCOUNT = "4300" + CD_BIMOK;
        			this.dsList.setColumn(nRow, "CD_ACCOUNT", CD_ACCOUNT);

        			this.dsList.set_enableevent(false);

        // 				this.dsList.setColumn(nRow, "YN_DEPT", "Y");										// 부서/임원
         				this.dsList.setColumn(nRow, "CD_DEPTOFFICER", this.dsReturnBudget.getColumn(i, "CD_DEPTOFFICER"));
         				this.dsList.setColumn(nRow, "DS_DEPTOFFICER", this.dsReturnBudget.getColumn(i, "DS_DEPTOFFICER"));
        // 				this.dsList.setColumn(nRow, "CD_PROJECT", this.dsReturnBudget.getColumn(i, "CD_PROJECT"));
        // 				this.dsList.setColumn(nRow, "DS_PROJECT", this.dsReturnBudget.getColumn(i, "DS_PROJECT"));
        				this.dsList.setColumn(nRow, "CD_BIMOK", CD_BIMOK);
        				this.dsList.setColumn(nRow, "DS_BIMOK", this.dsReturnBudget.getColumn(i, "DS_BIMOK"));
        				this.dsList.setColumn(nRow, "CD_SEMOK", this.dsReturnBudget.getColumn(i, "CD_SEMOK"));
        				this.dsList.setColumn(nRow, "DS_SEMOK", this.dsReturnBudget.getColumn(i, "DS_SEMOK"));

        				this.dsList.setColumn(nRow, "YN_VAT" 		, "N");
        				this.dsList.setColumn(nRow, "YN_APPR"  		, "N");
        			this.dsList.set_enableevent(true);
        		}

        		this.gfnSetFormStatus(this, "I");

        		//항번 셋팅
        		this.fnNoViewSetting();

        		//하단 관리항목 로우 추가
        		if(this.dsListSub.rowcount == 0){
        			this.gfnGridAdd(this.dxGridSub, null, false);
        		}

        		var colDT_ACCOUNT = this.dxGrid.getBindCellIndex("body", "DT_ACCOUNT");
        		this.dxGrid.setCellPos(colDT_ACCOUNT, nRow);

        		//관리항목 셋팅
        		this.fnEtcGridSetting(nRow);

        		//하단 계산
        		this.fnCalcSlip();
         	}

        };

        //필수값 체크
        this.fnCheckValidate = function()
        {
        	// 자동전표
        	if(!this.gfnIsNull(this.dsList.getColumn(0, "CD_AUTOSLIP"))){
        		return false;
        	}

        	//법인코드 체크
        	if(this.gfnIsNull(this.gfnTrim(this.ccfCD_CORP.form.CDTextBox.value))){
        		this.gfnAlert("법인코드를 입력하세요");
        		this.ccfCD_CORP.form.CDTextBox.setFocus();
        		return false;
        	}

        	//법인코드 체크
        	if(this.gfnIsNull(this.gfnTrim(this.calDT_ACCOUNT.value))){
        		this.gfnAlert("회계일자를 입력하세요");
        		this.calDT_ACCOUNT.setFocus();
        		return false;
        	}

        	//발행부서 체크
        	if(this.gfnIsNull(this.gfnTrim(this.ccfACNTUNIT.form.CDTextBox.value))){
        		this.gfnAlert("발행부서를 입력하세요");
        		this.ccfACNTUNIT.form.CDTextBox.setFocus();
        		return false;
        	}

        	return true;
        };

        //필수값 체크
        this.fnVatCheckValidate = function(row)
        {
        	var colNm = "";
        	//회계일자
        	if(this.gfnIsNull(this.gfnTrim(this.dsList.getColumn(row, "DT_ACCOUNT")))){
        		colNm += "회계일자";
        	}

        	//적요
        	if(this.gfnIsNull(this.gfnTrim(this.dsList.getColumn(row, "DS_REM")))){
        		colNm += (colNm.length > 0 ? ", " : "") +"적요";
        	}

        	//통화
        	if(this.gfnIsNull(this.gfnTrim(this.dsList.getColumn(row, "CD_EXEC_CURR")))){
        		colNm += (colNm.length > 0 ? ", " : "") +"통화";
        	}

        /*
        	var tyCrDr = this.dsList.getColumn(row, "TY_CRDR");
        	//금액
        	if(!this.gfnIsNull(tyCrDr)){
        		if(this.gfnIsNull(this.dsList.getColumn(row, "AM_"+tyCrDr+"R"))){
        			if(tyCrDr == "D"){
        				colNm += (colNm.length > 0 ? ", " : "") + "차변금액";
        			}else{
        				colNm += (colNm.length > 0 ? ", " : "") + "대변금액";
        			}
        		}
        	}
        */

        	//거래처
        	if(this.gfnIsNull(this.gfnTrim(this.dsList.getColumn(row, "CD_VENDOR")))){
        		colNm += (colNm.length > 0 ? ", " : "") + "거래처";
        	}

        	//귀속부서
        	if(this.gfnIsNull(this.gfnTrim(this.dsList.getColumn(row, "CD_DEPT_BE")))){
        		colNm += (colNm.length > 0 ? ", " : "") + "귀속부서";
        	}

        	if(!this.gfnIsNull(colNm)){
        		this.gfnAlert("[미입력 항목] " + colNm);
        		return false;
        	}
        	return true;
        };

        //부가세 팝업 호출
        this.fnCallVatPopup = function ()
        {
        	var rPos = this.dsList.rowposition;

        	trace("부가세 팝업 호출 들어왔당");
        	trace("부가세 계정이닝 ==> YN_VAT_ACNT->"+this.dsList.getColumn(rPos, "YN_VAT_ACNT") + "/ YN_VAT->" + this.dsList.getColumn(rPos, "YN_VAT"));

        	if(this.dsList.getColumn(rPos, "YN_VAT") == "Y" && this.dsList.getColumn(rPos, "YN_VAT_ACNT") == "N"){
        		this.gfnAlert("부가세 계정이 아닙니다.");
        		return;
        	}

        	//부가세 계정일 경우
        	if(this.dsList.getColumn(rPos, "YN_VAT_ACNT") == "Y"){
        		//trace("YN_APPR :: "+this.dsList.getColumn(rPos, "YN_APPR"));
        		//trace("YN_VAT :: "+this.dsList.getColumn(rPos, "YN_VAT"));
        		//trace("TY_SALEBUY :: "+this.dsList.getColumn(rPos, "TY_SALEBUY"));
        		//trace("CD_PROOF :: "+this.dsList.getColumn(rPos, "CD_PROOF"));

        		//승인전표는 부가세 추가 안되게 처리
        		//if(this.dsList.getColumn(rPos, "YN_APPR") == "Y" && this.dsList.getColumn(rPos, "YN_VAT") == "N") return;

        		if(!this.fnVatCheckValidate(rPos)) return;

        		var tyCrdr  = this.dsList.getColumn(rPos, "TY_CRDR");	//차대변구분
        		var dtProof = this.dsList.getColumn(rPos, "DT_PROOF");	//증빙일자
        		if(this.gfnIsNull(dtProof)){
        			dtProof = this.dsList.getColumn(rPos, "DT_ACCOUNT");	//회계일자
        		}

        		var param = {};
        		param.P_IUD_FLAG  	= this.V_IUD_FLAG;	//등록,수정,조회 구분
        		param.P_GUBUN  		= "SLIP";	//팝업구분
        		param.P_CD_SLIP  	= this.dsList.getColumn(rPos, "CD_SLIP")				//전표번호
        		param.P_CD_AUTOSLIP = this.dsList.getColumn(rPos, "CD_AUTOSLIP")			//자동전표번호
        		param.P_YN_VAT  	= this.dsList.getColumn(rPos, "YN_VAT");				//부가세여부
        		param.P_NO_VIEW     = this.dsList.getColumn(rPos, "NO_VIEW");				//항번
        		param.P_YN_APPR     = this.dsList.getColumn(rPos, "YN_APPR");				//승인여부
        		param.P_CD_APP      = this.dsList.getColumn(rPos, "CD_APP");				//결재상태코드 // 구버젼(사용안함)
        		param.P_ST_APRV      = this.dsList.getColumn(rPos, "ST_APRV");				//결재상태코드

        		param.P_NO_VAT      = this.dsList.getColumn(rPos, "NO_VAT");				//부가세번호
        		param.P_ISSUE_ID 	= this.dsList.getColumn(rPos, "ISSUE_ID");				//전자세금계산서번호
        		param.P_FILE_DIR    = this.dsList.getColumn(rPos, "FILE_DIR");				//첨부파일경로
        		param.P_CD_DEPT     = this.dsList.getColumn(rPos, "CD_DEPT_BE");			//귀속부서코드
        		param.P_DS_DEPT     = this.dsList.getColumn(rPos, "DS_DEPT");				//귀속부서명
        		param.CD_DEPT_BUY   = this.dsList.getColumn(rPos, "CD_DEPT_BUY");			//매입귀속부서코드
        		param.DS_DEPT_BUY   = this.dsList.getColumn(rPos, "DS_DEPT_BUY");			//매입귀속부서명
        		param.CD_DEPT_ACNT_BON = this.dsList.getColumn(rPos, "CD_DEPT_ACNT_BON");	//본사귀속부서코드
        		param.DS_DEPT_ACNT_BON = this.dsList.getColumn(rPos, "DS_DEPT_ACNT_BON");	//본사귀속부서명

        		param.CD_EXEC_CURR = this.dsList.getColumn(rPos, "CD_EXEC_CURR");	// 집행통화
        		param.CD_LOCAL_CURR = this.dsList.getColumn(rPos, "CD_LOCAL_CURR");	// 로컬통화


        		//부가세가 발행이 N이고 증빙구분이 없을 경우(처음 부가세 팝업 띄울경우 부가세 팝업에서 확인을 안눌렀을 경우)
        		if(this.dsList.getColumn(rPos, "YN_VAT") == "N" && this.gfnIsNull(this.dsList.getColumn(rPos, "CD_PROOF"))){
        			trace("부가세 처음 등록한다!!!");

        			//전자세금계산서번호가 있을경우
        			if(!this.gfnIsNull(this.dsList.getColumn(rPos, "ISSUE_ID"))){
        				param.TY_SALEBUY 	= this.dsList.getColumn(rPos, "TY_SALEBUY");	//거래구분
        				param.TY_ISSUE 		= this.dsList.getColumn(rPos, "TY_ISSUE");		//발행구분
        				param.AM_SUPPLY 	= this.dsList.getColumn(rPos, "AM_SUPPLY");		//공급가
        				param.AM_VAT 		= this.dsList.getColumn(rPos, "AM_VAT");		//부가세

        				trace("전자세금계산서 부가세->" + nexacro.toNumber(this.dsList.getColumn(rPos, "AM_VAT"),0));
        				var p_cdProof = "11";
        				var p_dsProof = "세금계산서(안분제외)";
        				if(nexacro.toNumber(this.dsList.getColumn(rPos, "AM_VAT"),0) == 0){
        					p_cdProof = "15";
        					p_dsProof = "계산서(면세)";
        				}
        				param.CD_PROOF 		= p_cdProof;			//증빙코드
        				param.DS_PROOF 		= p_dsProof;			//증빙코드명


        			}else{
        				param.TY_SALEBUY 	= "I";		//거래구분
        				param.AM_SUPPLY 	= this.dsList.getColumn(rPos, "AM_"+tyCrdr+"R");	//금액
        			}

        			param.YN_VAT 		= "N";		//부가세여부
        			param.CD_CORP 		= this.dsList.getColumn(rPos, "CD_CORP");			//회사코드

        			if(!this.gfnIsNull(this.dsList.getColumn(rPos, "CD_DEPT_BUY"))){		//매입부서가 있을경우
        				param.CD_DEPT = this.dsList.getColumn(rPos, "CD_DEPT_BUY");			//매입부서코드
        				param.DS_DEPT = this.dsList.getColumn(rPos, "DS_DEPT_BUY");			//매입부서명
        			}else{
        				param.CD_DEPT 		= this.dsList.getColumn(rPos, "CD_DEPT_BE");		//귀속부서코드
        				param.DS_DEPT 		= this.dsList.getColumn(rPos, "DS_DEPT");			//귀속부서명
        			}
        			param.CD_ACCOUNT 	= this.dsList.getColumn(rPos, "CD_ACCOUNT");		//계정코드
        			param.DS_ACCOUNT 	= this.dsList.getColumn(rPos, "DS_ACCOUNT");		//계정명

        			param.TY_VENDOR 	= this.dsList.getColumn(rPos, "TY_VENDOR");			//거래처구분
        			param.CD_VENDOR 	= this.dsList.getColumn(rPos, "CD_VENDOR");			//거래처코드
        			param.DS_VENDOR 	= this.dsList.getColumn(rPos, "DS_VENDOR");			//거래처명
        			param.NO_SJC 	    = this.dsList.getColumn(rPos, "NO_SJC");			//사업자/주민번호
        			param.DS_REM 		= this.dsList.getColumn(rPos, "DS_REM");			//적요
        			param.DT_PROOF 		= dtProof;											//회계일자
        			param.DT_ACCOUNT 	= this.dsList.getColumn(rPos, "DT_ACCOUNT");		//회계일자
        			param.TY_CRDR 		= tyCrdr;											//차대변구분
        		}else  if(this.dsList.getColumn(rPos, "YN_VAT") == "N" && !this.gfnIsNull(this.dsList.getColumn(rPos, "CD_PROOF"))){

        			param.YN_VAT 		= this.dsList.getColumn(rPos, "YN_VAT");			//부가세여부
        			param.CD_CORP 		= this.dsList.getColumn(rPos, "CD_CORP");			//회사코드
        			var cdVatDeptAcnt = this.dsList.getColumn(rPos, "CD_VATDEPT_ACNT").split("|");	//부가세 귀속부서
        			param.CD_DEPT 		= cdVatDeptAcnt[0];		//귀속부서코드
        			param.DS_DEPT 		= cdVatDeptAcnt[1];		//귀속부서명
        			param.TY_SALEBUY 	= this.dsList.getColumn(rPos, "TY_SALEBUY");		//거래구분
        			param.CD_PROOF 		= this.dsList.getColumn(rPos, "CD_PROOF");			//증빙코드
        			param.DS_PROOF 		= this.dsList.getColumn(rPos, "DS_PROOF");			//증빙코드명
        			param.VAT_RATE 		= this.dsList.getColumn(rPos, "VAT_RATE");			//부가세율
        			param.YN_VATBGJE 	= this.dsList.getColumn(rPos, "YN_VATBGJE");		//불공제여부
        			param.TY_VATBGJE 	= this.dsList.getColumn(rPos, "TY_VATBGJE");		//불공제사유

        			var cdAccount = this.dsList.getColumn(rPos, "CD_VATACCOUNT").split("|");

        			param.CD_ACCOUNT 	= cdAccount[0];	//부가세 계정코드
        			param.DS_ACCOUNT 	= cdAccount[1];	//부가세 계정명
        			param.TY_VENDOR 	= this.dsList.getColumn(rPos, "TY_VENDOR");			//거래처구분
        			param.CD_VENDOR 	= this.dsList.getColumn(rPos, "CD_VENDOR");			//거래처코드
        			param.DS_VENDOR 	= this.dsList.getColumn(rPos, "DS_VENDOR");			//거래처명
        			param.NO_SJC 	    = this.dsList.getColumn(rPos, "NO_SJC");			//사업자/주민번호
        			param.AM_SUPPLY 	= this.dsList.getColumn(rPos, "AM_SUPPLY");			//공급가액
        			param.AM_VAT 		= this.dsList.getColumn(rPos, "AM_VAT");			//부가세액
        			param.AM_SERVICE 	= this.dsList.getColumn(rPos, "AM_SERVICE");		//봉사료
        			param.NO_CREDIT 	= this.dsList.getColumn(rPos, "NO_CREDIT");			//카드번호
        			param.DT_PROOF 		= dtProof;	//회계일자
        			param.DT_ACCOUNT 	= this.dsList.getColumn(rPos, "DT_ACCOUNT");		//회계일자
        			param.DS_REM 		= this.dsList.getColumn(rPos, "DS_VATREM");			//적요
        			param.CK_OMIT 		= this.dsList.getColumn(rPos, "CK_OMIT");			//누락여부
        			param.TY_ISSUE 		= this.dsList.getColumn(rPos, "TY_ISSUE");			//발행구분
        			param.TY_CRDR 		= tyCrdr;											//차대변구분
        		}else{
        			trace("부가세 수정이다");
        			param.YN_VAT 		= this.dsList.getColumn(rPos, "YN_VAT");			//부가세여부
        			param.CD_CORP 		= this.dsList.getColumn(rPos, "CD_CORP");			//회사코드

        			var cdVatDeptAcnt = this.dsList.getColumn(rPos, "CD_VATDEPT_ACNT").split("|");	//부가세 귀속부서
        			param.CD_DEPT 		= cdVatDeptAcnt[0];		//귀속부서코드
        			param.DS_DEPT 		= cdVatDeptAcnt[1];		//귀속부서명
        			param.TY_SALEBUY 	= this.dsList.getColumn(rPos, "TY_SALEBUY");		//거래구분
        			param.CD_PROOF 		= this.dsList.getColumn(rPos, "CD_PROOF");			//증빙코드
        			param.DS_PROOF 		= this.dsList.getColumn(rPos, "DS_PROOF");			//증빙코드명
        			param.VAT_RATE 		= this.dsList.getColumn(rPos, "VAT_RATE");			//부가세율
        			param.YN_VATBGJE 	= this.dsList.getColumn(rPos, "YN_VATBGJE");		//불공제여부
        			param.TY_VATBGJE 	= this.dsList.getColumn(rPos, "TY_VATBGJE");		//불공제사유

        			var cdAccount = this.dsList.getColumn(rPos, "CD_VATACCOUNT").split("|");

        			param.CD_ACCOUNT 	= cdAccount[0];	//부가세 계정코드
        			param.DS_ACCOUNT 	= cdAccount[1];	//부가세 계정명
        			param.TY_VENDOR 	= this.dsList.getColumn(rPos, "TY_VATVENDOR");			//거래처구분
        			param.CD_VENDOR 	= this.dsList.getColumn(rPos, "CD_VATVENDOR");			//거래처코드
        			param.DS_VENDOR 	= this.dsList.getColumn(rPos, "DS_VATVENDOR");			//거래처명
        			param.NO_SJC 	    = this.dsList.getColumn(rPos, "NO_SJC_VAT");			//사업자/주민번호
        			param.AM_SUPPLY 	= this.dsList.getColumn(rPos, "AM_SUPPLY");			//공급가액
        			param.AM_VAT 		= this.dsList.getColumn(rPos, "AM_VAT");			//부가세액
        			param.AM_SERVICE 	= this.dsList.getColumn(rPos, "AM_SERVICE");		//봉사료
        			param.NO_CREDIT 	= this.dsList.getColumn(rPos, "NO_CREDIT");			//카드번호
        			param.DT_PROOF 		= dtProof;	//회계일자
        			param.DT_ACCOUNT 	= this.dsList.getColumn(rPos, "DT_ACCOUNT");		//회계일자
        			param.DS_REM 		= this.dsList.getColumn(rPos, "DS_VATREM");			//적요
        			param.CK_OMIT 		= this.dsList.getColumn(rPos, "CK_OMIT");			//누락여부
        			param.TY_ISSUE 		= this.dsList.getColumn(rPos, "TY_ISSUE");			//발행구분
        			param.TY_CRDR 		= tyCrdr;											//차대변구분
        		}

        		var sPopupCallBack = "fnVatRegPopupCallback";
        		this.gfnFormOpenNonAuth(this.FormInfo.CD_MODULE, "DHA_ISSUEVATDLG", sPopupCallBack, param, 550, 650);
        	}
        };

        //부가세 팝업 콜백
        this.fnVatRegPopupCallback = function(svcID, val) {
        	this.dsReturn.clearData();


        	// 매입세액불공제 선급부가세 유무(Y일때체크)
        	var sCdProofChkYn = this.gfnGetConfig("DH" , "YN_PROOF_CHECK");
        	//sCdProofChkYn = "Y";
        	trace(sCdProofChkYn + "부가세 콜백 >>> val :: " + val + "******************************************************************************************" );

         	if(!this.gfnIsNull(val)) {
        		if(val != "DEL"){		//  부가세 신규 또는 수정	****************************************************************************
        			trace("부가세 신규 또는 수정 : if(val != DEL)");
        			this.dsReturn.loadXML(val);

        			var rowCnt = this.dsList.rowcount;
        			var rowPos = this.dsList.rowposition;

        			var amSupply = nexacro.toNumber(this.dsReturn.getColumn(0, "AM_SUPPLY"), 0);	//공급가
        			trace("kdy30: " + amSupply);
        			var amVat = nexacro.toNumber(this.dsReturn.getColumn(0, "AM_VAT"), 0);		//부가세

        			var tyCrdr = this.dsList.getColumn(rowPos, "TY_CRDR");	//차대구분
        			var issueId = this.dsList.getColumn(rowPos, "ISSUE_ID");
        			var amCrDr = nexacro.toNumber(this.dsList.getColumn(rowPos, (tyCrdr == "D" ? "AM_DR" : "AM_CR")), 0);
        			var amExecColId = (tyCrdr == "D" ? "AM_EXEC_DR" : "AM_EXEC_CR");	// 집행화

        			var cdExecCurr = this.dsList.getColumn(rowPos, "CD_EXEC_CURR");	// 집행통화
        			var cdLocalCurr = this.dsList.getColumn(rowPos, "CD_LOCAL_CURR");	// 로컬통화
        			var YnCurrKrw = (cdExecCurr == "KRW") ? "Y" : "N";

        			var tySaleBuy  = this.dsReturn.getColumn(0, "TY_SALEBUY");			//거래구분

        			//부가세 테이블에 데이터가 있는지 여부
        			//trace("this.dsReturn.getColumn(0, NO_VAT) = " + this.dsReturn.getColumn(0, "NO_VAT"));
        			var fRow = this.dsList.findRowExpr("!dataset.parent.gfnIsNull(NO_VAT) && NO_VAT == '" + this.dsReturn.getColumn(0, "NO_VAT") + "'");

        			trace("부가세 번호 체크 fRow >>> " + fRow);

        			if(fRow > -1) {		// 부가세 수정일 경우****************************************************************************
        				trace("    부가세 수정 : fRow = " + fRow);

        				//this.dsList.copyRow(fRow, this.dsReturn, this.dsReturn.rowposition);	//-> 이거 동작하고나면 기존Dataset 에 설정된 값들 이상해짐. copyRow 는 사용자제
        				this.fnCopyDataVat(this.dsReturn.rowposition, fRow);

        				//부가세 계정 로우 찾아서 덮어 씌우기
        				trace(fRow + " tySaleBuy->" + tySaleBuy + " / CD_VATACCOUNT" + this.gCD_VATACCOUNT + " / CD_ACNT_VAT_SALE" + this.gCD_ACNT_VAT_SALE)
        				var fAcnt = this.dsList.findRowExpr("currow == " + (fRow + 1) + " && CD_ACCOUNT == " + (tySaleBuy == "I" ? this.gCD_VATACCOUNT : this.gCD_ACNT_VAT_SALE) + "'");

        				if(fAcnt > -1) {
        					trace("        부가세 계정 있을경우 : fAcnt = "+fAcnt);
        					this.dsList.set_enableevent(false);
        					this.dsList.setColumn(fRow, "YN_VAT", "Y");//부가세여부

        					// 부가세 증빙 : 13 - 세금계산서(불공제)
        					//if( this.dsReturn.getColumn(0, "CD_PROOF") == "13" && !this.gfnIsNull(issueId) ){
        					if( this.dsReturn.getColumn(0, "CD_PROOF") == "13"){
        						trace(rowPos + " / 부가세 증빙 == 13 세금계산서(불공제) 수정 " + tyCrdr);
        						//this.dsList.setColumn(rowPos, (tyCrdr == "D" ? "AM_DR" : "AM_CR") , amVat + amSupply);
        						this.dsList.setColumn(rowPos, (tyCrdr == "D" ? "AM_EXEC_DR" : "AM_EXEC_CR") , amVat + amSupply);
        					}else{
        						trace(rowPos + " / 부가세 증빙 != 13 세금계산서(불공제) 수정 " + tyCrdr);
        						//this.dsList.setColumn(rowPos, (tyCrdr == "D" ? "AM_DR" : "AM_CR") , amSupply);
        						this.dsList.setColumn(rowPos, (tyCrdr == "D" ? "AM_EXEC_DR" : "AM_EXEC_CR") , amSupply);
        					}

        					// 로컬화, 원화 계산
        					this.fnSetAmAccouont(rowPos);

        					this.dsList.set_enableevent(true);
        					this.dsList.setColumn(fRow, "FLAG_V" , "U");	//부가세 플래그(수정)
        					this.dsList.setColumn(fRow, "DS_REM"  , this.dsReturn.getColumn(0, "DS_VATREM"));			// 적요
        					this.dsList.setColumn(fAcnt, "DS_REM" , this.dsReturn.getColumn(0, "DS_VATREM"));			// 적요
        					//this.dsList.setColumn(fRow, "DT_ACCOUNT"  , this.dsReturn.getColumn(0, "DT_PROOF"));		// 회계일자
        					this.dsList.setColumn(fRow, "CD_PROOF", this.dsReturn.getColumn(0, "CD_PROOF"));			// 증빙코드

        					var sTooltip = this.dsReturn.getColumn(0, "TY_ISSUE") + " / " + this.dsReturn.getColumn(0, "DS_PROOF");
        					this.dsList.setColumn(fRow, "DS_TOOLTIP", sTooltip);

        					//trace("화폐단위 한국 YnCurrKrw->" + YnCurrKrw);
        					//trace("부가세가 있을경우 amVat->" + amVat);


        					//부가세가 있을경우
        					if(amVat > 0 || amVat < 0){
        						if(this.dsList.getColumn(fAcnt, this.ucFlag) != "I"){
        							this.dsList.setColumn(fAcnt, this.ucFlag, "U");
        						}

        						if(YnCurrKrw == "Y"){
        							this.dsList.setColumn(fAcnt, (tyCrdr == "D" ? "AM_EXEC_DR" : "AM_EXEC_CR") , amVat);
        							//this.dsList.setColumn(fAcnt, (tyCrdr == "D" ? "AM_LOCAL_DR" : "AM_LOCAL_CR") , amVat);
        							//this.dsList.setColumn(fAcnt, (tyCrdr == "D" ? "AM_DR" : "AM_CR") , amVat);
        						}
        						//this.dsList.setColumn(fRow, "FLAG_V", "U");
        					} else {
        						this.dsList.setColumn(fAcnt, this.ucFlag, "D");
        						//this.dsList.setColumn(fRow, "YN_VAT", "N");
        						//this.dsList.setColumn(fRow, "FLAG_V", "D");
        						this.dsList.setColumn(fRow, "FLAG_V", "U");
        					}

        // 					// 불공제일경우 금액을 0 으로 변경
        // 					if (this.dsReturn.getColumn(0, "CD_PROOF") == "13" || this.dsReturn.getColumn(0, "CD_PROOF") == "19")	{
        // 						//this.dsList.setColumn(fAcnt, "AM_DR", 0);
        // 						//this.dsList.setColumn(fAcnt, "AM_CR", 0);
        // 						//this.dsList.deleteRow(fAcnt);	// 20210604 삭제 안하게 변경
        // 					}

        				} else {
        					trace("        부가세 계정 없을경우 : fAcnt = "+fAcnt);
        					if (this.dsReturn.getColumn(0, "CD_PROOF") == "13" || this.dsReturn.getColumn(0, "CD_PROOF") == "19")	{
        						trace("        부가세 계정 없는 불공제일 경우 : CD_PROOF = "+this.dsReturn.getColumn(0, "CD_PROOF"));
        						this.dsList.setColumn(rowPos, (tyCrdr == "D" ? "AM_EXEC_DR" : "AM_EXEC_CR") , amVat + amSupply);
        					}

        					trace("sCdProofChkYn=>"+ sCdProofChkYn + ", CD_PROOF => "+ this.dsReturn.getColumn(0, "CD_PROOF") );
        					// 20210908 by cej
        					if (sCdProofChkYn == "Y" || ( sCdProofChkYn == "N" && (this.dsReturn.getColumn(0, "CD_PROOF") != "13" && this.dsReturn.getColumn(0, "CD_PROOF") != "19"))){

        						var nRow = this.gfnGridAdd(this.dxGrid, "current_bottom", true);
        						var cdCorp = this.ccfCD_CORP.form.CDTextBox.value;
        						this.dsList.setColumn(nRow, "CD_CORP"   , cdCorp);									//법인코드
        						this.dsList.setColumn(nRow, "CD_DEPT_BH", this.ccfACNTUNIT.form.CDTextBox.value);	//발행부서
        						this.dsList.setColumn(nRow, "TY_CLOSING", this.ccboTY_SLIP.value);					//전표구분

        						//부가세가 있을경우
        						if(amVat > 0 || amVat < 0){
        							if (this.ccboTY_SLIP.value != "02") {	// 20201117 / jkcha / 결산전표일경우 부가세관련 계정 추가 안함.
        								this.fnVatDataSet(fRow, nRow, tySaleBuy);
        							}
        						} else {
        							if(this.gfnGetFlag(this.dsList, nRow) == "I"){
        								this.dsList.deleteRow(nRow);
        							}
        						}
        					}
        				}

        				this.gfnSetFormStatus(this, "U");

        				//항번 셋팅
        				this.fnNoViewSetting();

        				//관리항목 셋팅
        				this.fnEtcGridSetting(fRow);

        				// 참고금액1(선) 공급가액 수정
        				var nextCdAcnt = this.dsList.getColumn(fAcnt, "CD_ACCOUNT");
        				trace(fAcnt + "부가세 팝업 수정 리턴! 참고금액1(선) 공급가액 수정->" + amSupply);
        				if((nextCdAcnt == this.gCD_ACNT_VAT_SALE || nextCdAcnt == this.gCD_VATACCOUNT)){
        					this.dsList.setColumn(fAcnt, "AM_REF1", amSupply);
        				};


        			} else {	// 부가세 신규일 경우****************************************************************************
        				trace(rowPos + "    부가세 신규 >" + fRow);

        				this.dsList.set_enableevent(false);

        				//this.dsList.copyRow(rowPos, this.dsReturn, this.dsReturn.rowposition);
        				this.fnCopyDataVat(this.dsReturn.rowposition, rowPos);

        				this.dsList.setColumn(rowPos, "YN_VAT" 		, "Y");

        				// 부가세 증빙 : 13 - 세금계산서(불공제)
        				//if( this.dsReturn.getColumn(0, "CD_PROOF") == "13" && !this.gfnIsNull(issueId) ){
        				if(YnCurrKrw == "Y"){
        					if( this.dsReturn.getColumn(0, "CD_PROOF") == "13"){
        						trace(rowPos + " / 부가세 증빙 == 13 세금계산서(불공제) 신규 " + tyCrdr);
        						this.dsList.setColumn(rowPos, (tyCrdr == "D" ? "AM_EXEC_DR" : "AM_EXEC_CR") , amVat + amSupply);
        						//this.dsList.setColumn(rowPos, (tyCrdr == "D" ? "AM_LOCAL_DR" : "AM_LOCAL_CR") , amVat + amSupply);
        						//this.dsList.setColumn(rowPos, (tyCrdr == "D" ? "AM_DR" : "AM_CR") , amVat + amSupply);
        					}else{
        						trace(rowPos + " / 부가세 증빙 != 13 세금계산서(불공제) 신규 " + tyCrdr);
        						this.dsList.setColumn(rowPos, (tyCrdr == "D" ? "AM_EXEC_DR" : "AM_EXEC_CR") , amSupply);

        						//trace(tyCrdr + "공급가 변경!?->" + amSupply);

        						//this.dsList.setColumn(rowPos, (tyCrdr == "D" ? "AM_LOCAL_DR" : "AM_LOCAL_CR") , amSupply);
        						//this.dsList.setColumn(rowPos, (tyCrdr == "D" ? "AM_DR" : "AM_CR") , amSupply);
        					}
        					// 로컬화, 원화 계산
        					this.fnSetAmAccouont(rowPos);
        				}

        				this.dsList.set_enableevent(true);

        				this.dsList.setColumn(rowPos, "DS_REM" 		, this.dsReturn.getColumn(0, "DS_VATREM"));		//적요
        				//this.dsList.setColumn(rowPos, "DT_ACCOUNT"  , this.dsReturn.getColumn(0, "DT_PROOF"));		//회계일자
        				this.dsList.setColumn(rowPos, "CD_PROOF"    , this.dsReturn.getColumn(0, "CD_PROOF"));		//증빙코드

        				var sTooltip = this.dsReturn.getColumn(0, "TY_ISSUE") + " / " + this.dsReturn.getColumn(0, "DS_PROOF");
        				this.dsList.setColumn(rowPos, "DS_TOOLTIP", sTooltip);

        // 				if(this.dsList.getColumn(rowPos, "FLAG_V") != "U"){
        // 					this.dsList.setColumn(rowPos, "FLAG_V" , this.V_IUD_FLAG);
        // 				}

        				this.dsList.setColumn(rowPos, "FLAG_V" , "I");


        				//기등록한 부가세 데이터가 있는지 체크
        				//var fRow = this.dsList.findRow("NO_VIEW_VAT", this.dsReturn.getColumn(0, "NO_VIEW"));
        				// 20230517
        				var fRow = this.dsList.findRowExpr("currow == " + (rowPos + 1) + " && CD_ACCOUNT == " + (tySaleBuy == "I" ? this.gCD_VATACCOUNT : this.gCD_ACNT_VAT_SALE) + "'");

        				var nRow = -1;

        				trace("### 리턴  NO_VIEW :: "+this.dsReturn.getColumn(0, "NO_VIEW"));
        				trace("### fRow :: "+fRow);

        				if(fRow == -1){
        					//if (this.ccboTY_SLIP.value != "02") {
        					//if (this.ccboTY_SLIP.value != "02" && this.dsReturn.getColumn(0, "CD_PROOF") != "13" && this.dsReturn.getColumn(0, "CD_PROOF") != "19") {	// 20201117 / jkcha / 결산전표일경우 부가세관련 계정 추가 안함.

        					// 20210908 by cej
        					if (sCdProofChkYn == "Y" || ( sCdProofChkYn == "N" && (this.dsReturn.getColumn(0, "CD_PROOF") != "13" && this.dsReturn.getColumn(0, "CD_PROOF") != "19"))){
        						nRow = this.gfnGridAdd(this.dxGrid, "current_bottom", true);
        					}

        				} else {
        					trace("기 등록된 부가세 삭제 처리->" + fRow);
        					//기 등록된 부가세 삭제 처리

        					var PRE_CD_TRADE = this.dsList.getColumn(fRow, "CD_TRADE");
        					var PRE_CD_SLIP = this.dsList.getColumn(fRow, "CD_SLIP");

        					this.dsList.set_enableevent(false);
        					this.dsList.deleteRow(fRow);
        					this.dsList.set_enableevent(true);

        					//if (this.dsReturn.getColumn(0, "CD_PROOF") != "13" && this.dsReturn.getColumn(0, "CD_PROOF") != "19") {

        					// 20210908 by cej
        					if (sCdProofChkYn == "Y" || ( sCdProofChkYn == "N" && (this.dsReturn.getColumn(0, "CD_PROOF") != "13" && this.dsReturn.getColumn(0, "CD_PROOF") != "19"))){
        						nRow = this.gfnGridAdd(this.dxGrid, "current_bottom", true);
        						if(!this.gfnIsNull(PRE_CD_TRADE)){
        							this.dsList.setColumn(nRow, "CD_TRADE", PRE_CD_TRADE);
        							this.dsList.setColumn(nRow, "CD_SLIP", PRE_CD_SLIP);
        						}
        					}
        				}

        				if (nRow > -1) {
        					var cdCorp = this.ccfCD_CORP.form.CDTextBox.value;
        					this.dsList.setColumn(nRow, "CD_CORP"   , cdCorp);									//법인코드
        					this.dsList.setColumn(nRow, "CD_DEPT_BH", this.ccfACNTUNIT.form.CDTextBox.value);	//발행부서
        					this.dsList.setColumn(nRow, "TY_CLOSING", this.ccboTY_SLIP.value);					//전표구분

        					//부가세가 있을경우
        					trace("부가세가 있을경우->" + amVat);
        					if(amVat > 0 || amVat < 0){
        						if (this.ccboTY_SLIP.value != "02") {	// 20201117 / jkcha / 결산전표일경우 부가세관련 계정 추가 안함.
        							this.fnVatDataSet(rowPos, nRow, tySaleBuy);
        						}
        					} else {
        						if(this.gfnGetFlag(this.dsList, nRow) == "I"){
        							this.dsList.deleteRow(nRow);
        							nRow = rowPos;
        						}
        					}

        					this.gfnSetFormStatus(this, "I");

        					//항번 셋팅
        					this.fnNoViewSetting();

        					//하단 관리항목 로우 추가
        					if(this.dsListSub.rowcount == 0){
        						this.gfnGridAdd(this.dxGridSub, null, false);
        					}
        					//관리항목 셋팅
        					this.fnEtcGridSetting(nRow);
        				} else {
        					nRow = rowPos;
        				}
        			}

        			var colDT_ACCOUNT = this.dxGrid.getBindCellIndex("body", "DT_ACCOUNT");
        			this.dxGrid.setCellPos(colDT_ACCOUNT, nRow);

        			// 로컬화, 원화(AM_DR, AM_CR) 계산
        			this.fnSetAmAccouont(nRow);

        			//하단 계산
        			this.fnCalcSlip();
        			//trace("saveXML :: "+this.dsList.saveXML());

        			trace("결산전표일경우?????" + this.ccboTY_SLIP.value);

        			if (this.ccboTY_SLIP.value != "02") {	// 20220125 결산전표일경우
        				this.fnAddData(nRow);
        			}

        			// 참고금액1(선) 공급가액 수정
        			var nextCdAcnt = this.dsList.getColumn(nRow, "CD_ACCOUNT");
        			trace(nRow + "부가세 팝업 신규 리턴! 참고금액1(선) 공급가액 수정->" + amSupply);
        			if((nextCdAcnt == this.gCD_ACNT_VAT_SALE || nextCdAcnt == this.gCD_VATACCOUNT)){
        				this.dsList.setColumn(nRow, "AM_REF1", amSupply);
        			};

        		} else {				//  증빙삭제(부가세 삭제)	****************************************************************

        			trace("//  증빙삭제(부가세 삭제)	****************************************************************");

        			var rowPos = this.dsList.rowposition;
        			var tySaleBuy = this.dsList.getColumn(rowPos, "TY_SALEBUY");	// 거래구분
        			var fAcnt = this.dsList.findRowExpr("currow == "+(rowPos+1)+" && CD_ACCOUNT == "+(tySaleBuy == "I" ? this.gCD_VATACCOUNT : this.gCD_ACNT_VAT_SALE)+"'");

        			var amSupply = nexacro.toNumber(this.dsReturn.getColumn(0, "AM_SUPPLY"), 0);	//공급가
        			var amVat = nexacro.toNumber(this.dsReturn.getColumn(0, "AM_VAT"), 0);		//부가세
        			var tyCrdr = this.dsList.getColumn(rowPos, "TY_CRDR");	//차대구분
        			var issueId = this.dsList.getColumn(rowPos, "ISSUE_ID");
        			var amCrDr = nexacro.toNumber(this.dsList.getColumn(rowPos, (tyCrdr == "D" ? "AM_DR" : "AM_CR")), 0);

        			this.dsList.set_enableevent(false);
        			this.dsList.setColumn(rowPos, "YN_VAT" 		, "N");	// 부가세여부

        			// 부가세 증빙 : 13 - 세금계산서(불공제)
        			if( this.dsReturn.getColumn(0, "CD_PROOF") == "13" && !this.gfnIsNull(issueId) ){
        				if(YnCurrKrw == "Y"){
        					var tyCrdr = this.dsList.getColumn(rowPos, "TY_CRDR");	//차대구분
        					this.dsList.setColumn(rowPos, (tyCrdr == "D" ? "AM_EXEC_DR" : "AM_EXEC_CR") , amSupply);
        					//this.dsList.setColumn(rowPos, (tyCrdr == "D" ? "AM_LOCAL_DR" : "AM_LOCAL_CR") , amSupply);
        					//this.dsList.setColumn(rowPos, (tyCrdr == "D" ? "AM_DR" : "AM_CR") , amSupply);

        					trace(rowPos + " / 부가세 증빙 == 13 세금계산서(불공제) 삭제 " + tyCrdr);
        				}
        			}

        			this.dsList.set_enableevent(true);

        			if(this.gfnGetFlag(this.dsList, rowPos) == "I") {
        				this.dsList.deleteRow((rowPos+1));
        				this.dsList.setColumn(rowPos, "CD_VATDEPT_ACNT"	, "");		// 부가세 귀속부서
        				this.dsList.setColumn(rowPos, "CD_VATACCOUNT"	, "");		// 부가세계정
        				this.dsList.setColumn(rowPos, "CD_VATVENDOR"	, "");		// 부가세 거래처코드
        				this.dsList.setColumn(rowPos, "DS_VATVENDOR"	, "");		// 부가세 거래처명
        				this.dsList.setColumn(rowPos, "TY_VATVENDOR"	, "");		// 부가세 거래처구분
        				this.dsList.setColumn(rowPos, "CD_PROOF"		, "");		// 증빙코드
        				this.dsList.setColumn(rowPos, "TY_VATBGJE"		, "");		// 불공제사유
        				this.dsList.setColumn(rowPos, "NO_CREDIT"		, "");		// 신용카드번호
        				this.dsList.setColumn(rowPos, "FLAG_V"			, "");

        			} else {
        				if(fAcnt > -1) {
        					this.dsList.setColumn(fAcnt, this.ucFlag, "D");
        				}
        				this.dsList.setColumn(rowPos, "FLAG_V", "D");
        			}

        			var sTooltip = this.dsReturn.getColumn(0, "TY_ISSUE") + " / " + this.dsReturn.getColumn(0, "DS_PROOF");
        			this.dsList.setColumn(rowPos, "DS_TOOLTIP", "");


        // 			}else{
        // 				if(fAcnt > -1){
        // 					if(this.gfnGetFlag(obj, e.row) != "I"){
        // 						this.dsList.setColumn(fAcnt, this.ucFlag, obj.getOrgColumn(e.row, this.ucFlag));
        //
        // 						this.dsList.setColumn(e.row, "YN_VAT", ynVatOrg);
        // 						this.dsList.setColumn(e.row, "FLAG_V", obj.getOrgColumn(e.row, "FLAG_V"));
        // 					}else{
        // 						obj.deleteRow((e.row+1));
        // 					}
        // 				}
        //			}
        		}
        	}
        };

        this.fnVatDataSet = function (rowPos, nRow, tySaleBuy)
        {
        	//trace("fnVatDataSet->" +  " / rowPos : "  + rowPos +  " / nRow : "  + nRow + " / tySaleBuy : " + tySaleBuy );
        	var tyCrdr = this.dsList.getColumn(rowPos, "TY_CRDR");	//차대구분
        	var amVat = nexacro.toNumber(this.dsReturn.getColumn(0, "AM_VAT"), 0);

        	var cdExecCurr = this.dsList.getColumn(rowPos, "CD_EXEC_CURR");	// 집행통화
        	var cdLocalCurr = this.dsList.getColumn(rowPos, "CD_LOCAL_CURR");	// 로컬통화

        	// 20200908 : 증빙자료에서 매입, 세금계산서 불공제건은 금액을  "0" 으로 처리함
        	//if (this.dsReturn.getColumn(0, "TY_SALEBUY") == "I" && this.dsReturn.getColumn(0, "CD_PROOF") == "13") {
        // 		amVat = 0;
        // 	}

        	var cdAccount = "", dsAccount = "";
        	if(tySaleBuy == "I"){		//매입
        		//cdAccount = "1116100";
        		cdAccount = this.gCD_VATACCOUNT;
        		dsAccount = "부가세대급금";		//선급부가세
        		tyCrdr = "D";
        	}else if(tySaleBuy == "O"){		//매출
        		//cdAccount = "2102900";
        		cdAccount = this.gCD_ACNT_VAT_SALE;
        		dsAccount = "부가세예수금";		//선수부가세
        		tyCrdr = "C";
        	}

        	this.dsList.setColumn(nRow, "YN_VAT_ADD" , "Y");
        	this.dsList.setColumn(nRow, "CD_ACCOUNT" , cdAccount);
        	this.dsList.setColumn(nRow, "DS_ACCOUNT" , dsAccount);

        	this.dsList.setColumn(nRow, "CD_BIMOK", this.dsList.getColumn(rowPos, "CD_BIMOK"));
        	this.dsList.setColumn(nRow, "DS_BIMOK", this.dsList.getColumn(rowPos, "DS_BIMOK"));
        	//this.dsList.setColumn(nRow, "YN_BUDGET_CTRL_ACNT", this.dsList.getColumn(rowPos, "YN_BUDGET_CTRL_ACNT"));

        	this.dsList.set_enableevent(false);

        	this.dsList.getColumn(rowPos, "DS_BIMOK")

        	if(cdExecCurr == "KRW"){
        		this.dsList.setColumn(nRow, (tyCrdr == "D" ? "AM_EXEC_DR" : "AM_EXEC_CR") , amVat);
        	}

        	this.dsList.setColumn(nRow, "TY_CRDR" 	  , tyCrdr);
        	//this.dsList.setColumn(nRow, "DT_ACCOUNT"  , this.dsReturn.getColumn(0, "DT_PROOF"));
        	this.dsList.setColumn(nRow, "DT_ACCOUNT"  , this.dsList.getColumn(rowPos, "DT_ACCOUNT"));
        	this.dsList.setColumn(nRow, "CD_VENDOR"   , this.dsList.getColumn(rowPos, "CD_VENDOR"));
        	this.dsList.setColumn(nRow, "DS_VENDOR"   , this.dsList.getColumn(rowPos, "DS_VENDOR"));
        	this.dsList.setColumn(nRow, "TY_VENDOR"   , this.dsList.getColumn(rowPos, "TY_VENDOR"));
        	this.dsList.setColumn(nRow, "CD_DEPT_BE"  , this.dsList.getColumn(rowPos, "CD_DEPT_BE"));

        	this.dsList.setColumn(nRow, "CD_DEPTOFFICER", this.dsList.getColumn(rowPos, "CD_DEPT_BE"));

        	this.dsList.setColumn(nRow, "CD_LOCAL_CURR"  , this.dsList.getColumn(rowPos, "CD_LOCAL_CURR"));	// 로컬통화
        	this.dsList.setColumn(nRow, "CD_EXEC_CURR"  , this.dsList.getColumn(rowPos, "CD_EXEC_CURR"));	// 통화
        	this.dsList.setColumn(nRow, "RT_LOCAL_EXCH"  , this.dsList.getColumn(rowPos, "RT_LOCAL_EXCH"));	// 로컬환율
        	this.dsList.setColumn(nRow, "RT_KRW_EXCH"  , this.dsList.getColumn(rowPos, "RT_KRW_EXCH"));		// 원화환율
        	this.dsList.setColumn(nRow, "RT_USD_EXCH"  , this.dsList.getColumn(rowPos, "RT_USD_EXCH"));		// 미화환율
        	this.dsList.setColumn(nRow, "RT_EUR_EXCH"  , this.dsList.getColumn(rowPos, "RT_EUR_EXCH"));		// 유로화환율

        	this.dsList.setColumn(nRow, "YN_BUDGET"  , this.dsList.getColumn(rowPos, "YN_BUDGET"));
        	this.dsList.setColumn(nRow, "DS_DEPT" 	  , this.dsList.getColumn(rowPos, "DS_DEPT"));
        	this.dsList.setColumn(nRow, "NO_VIEW_VAT" , this.dsList.getColumn(rowPos, "NO_VIEW"));
        	this.dsList.setColumn(nRow, "DS_REM" 	  , this.dsReturn.getColumn(0, "DS_VATREM"));		//적요

        	this.dsList.set_enableevent(false);
        	this.dsList.setColumn(nRow, "YN_VAT" 		, "N");	// 부가세여부
        	this.dsList.set_enableevent(true);

        	//수정일 경우 전표번호 채번
        	if(this.V_IUD_FLAG == "U"){
        		var cdSlip = this.fnSetCdSlip(this.txtCD_TRADE.value);
        		this.dsList.setColumn(nRow, "CD_TRADE"  , this.txtCD_TRADE.value);
        		this.dsList.setColumn(nRow, "CD_SLIP"   , cdSlip);
        	}
        	this.dsList.set_enableevent(true);
        };

        //자금 입금내역 전표발행 셋팅
        this.fnDFSetting = function ()
        {
        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "ISSUE_ID"), "edittype", "expr:YN_DF =='Y' ? 'none':'text'");
        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "ISSUE_ID"), "expandshow", "expr:YN_DF =='Y'? 'hide':'show'");
        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "DT_ACCOUNT"), "edittype", "expr:YN_DF =='Y' ? 'none':'date'");
        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "CD_ACCOUNT"), "edittype", "expr:YN_DF =='Y'? 'none':'text'");
        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "CD_ACCOUNT"), "expandshow", "expr:YN_DF =='Y'? 'hide':'show'");
        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "AM_DR"), "edittype", "expr:YN_DF =='Y'? 'none':'text'");
        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "AM_CR"), "edittype", "expr:YN_DF =='Y'? 'none':'text'");
        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "CD_VENDOR"), "edittype", "expr:YN_DF =='Y'? 'none':'text'");
        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "CD_VENDOR"), "expandshow", "expr:YN_DF =='Y'? 'hide':'show'");
        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "CD_DEPT_BE"), "edittype", "expr:YN_DF =='Y'? 'none':'text'");
        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "CD_DEPT_BE"), "expandshow", "expr:YN_DF =='Y'? 'hide':'show'");

        	var CD_CORP = this.getOwnerFrame().CD_CORP;
        	var DS_CORP = this.getOwnerFrame().DS_CORP;
        	var TY_SLIP = "03";

        	this.V_IUD_FLAG = "I";
        	this.V_YN_DF 	= this.getOwnerFrame().YN_DF;	//자금여부
        	this.ccboTY_SLIP.set_value(TY_SLIP);				//전표구분 : 입금전표

        	//if(!this.gfnIsNull(this.getOwnerFrame().DF_INFO)){

        		//폼 클리어
        		this.fnClearForm();

        		//var arrDF_INFO = this.getOwnerFrame().DF_INFO.split(",");

        		//법인코드
        		this.ccfCD_CORP.form.CDTextBox.set_value(CD_CORP);
        		this.ccfCD_CORP.form.DSTextBox.set_value(DS_CORP);

        		this.calDT_ACCOUNT.set_enable(false);
        		this.ccfCD_CORP.form.set_readonly(true);
        		this.ccfACNTUNIT.form.set_readonly(true);

        		// 입금내역 데이터 바인딩
        		//this.dsList.set_enableevent(false);
        		this.dsList.set_enableevent(false);
        		for (var i = 0 ; i < this.dsListDF.rowcount ; i++) {

        			// 첫번째 일자를 회계일자로 설정
        			if (i == 0) {
        				//검색조건 셋팅
        				this.calDT_ACCOUNT.set_value(this.dsListDF.getColumn(i, "DF_INFO3"));		 // 왜 세팅하는지 모르겠음.
        			}

        			// 로우 추가
        			var row = this.gfnGridAdd(this.dxGrid, "bottom", true);


        			this.dsList.set_enableevent(true);
        			this.dsList.setColumn(row, "CD_ACCOUNT"		, this.dsListDF.getColumn(i, "DF_INFO6"));		// 계정코드(CD_ACCOUNT)  ->
        			this.dsList.set_enableevent(false);

        			// 전표정보
        			this.dsList.setColumn(row, "CD_CORP" 		, CD_CORP);										// 법인코드
        			this.dsList.setColumn(row, "CD_DEPT_BH"		, this.AuthClient.CD_DEPT);						// 발행부서
        			this.dsList.setColumn(row, "TY_CLOSING"		, TY_SLIP);										// 전표구분 : 입금전표
        			this.dsList.setColumn(row, "YN_DF"  		, "Y");
        			this.dsList.setColumn(row, "FLAG_V"  		, "I");
        			this.dsList.setColumn(row, "YN_IMG"  		, "N");
        			this.dsList.setColumn(row, "YN_VAT"   		, "N");
        			this.dsList.setColumn(row, "YN_BANJE"  		, "N");

        			this.dsList.setColumn(row, "YN_BUDGET"  	, this.dsListDF.getColumn(i, "YN_BUDGET"));					// 예산부서여부
        			this.dsList.setColumn(row, "YN_BUDGET_CONTROL"  , this.dsListDF.getColumn(i, "YN_BUDGET_CONTROL"));		// 예산통제여부

        			this.dsList.setColumn(row, "CD_DEPT_BE"  	, this.dsListDF.getColumn(i, "DF_INFO1"));		// 귀속부서
        			this.dsList.setColumn(row, "DS_DEPT"  	  	, this.dsListDF.getColumn(i, "DF_INFO2"));		// 귀속부서명

        			this.dsList.setColumn(row, "DT_ACCOUNT"  	, this.dsListDF.getColumn(i, "DF_INFO3"));		// 회계일자
        			this.dsList.setColumn(row, "AM_DR"    		, nexacro.toNumber(this.dsListDF.getColumn(i, "DF_INFO4")));				// 차변금액


        			this.dsList.setColumn(row, "CD_LOCAL_CURR"  , this.dsListDF.getColumn(i, "CD_LOCAL_CURR"));		// 로컬통화(귀속부서)
        			this.dsList.setColumn(row, "CD_EXEC_CURR"  	, this.dsListDF.getColumn(i, "CD_EXEC_CURR"));		// 집행통화
        			this.dsList.setColumn(row, "AM_EXEC_DR"  	  , nexacro.toNumber(this.dsListDF.getColumn(i, "AM_EXEC")));	// 차변 집행화

        			// 로컬환율 조회
        			this.fnSelectCurrExchange(i);

        			this.dsList.setColumn(row, "AM_CR"  		, 0);											// 대변금액
        			this.dsList.setColumn(row, "DS_REM"  		, this.dsListDF.getColumn(i, "DF_INFO5"));		// 적요
        			this.dsList.setColumn(row, "TY_VENDOR"  	, this.dsListDF.getColumn(i, "DF_INFO7"));		// 거래처구분
        			this.dsList.setColumn(row, "CD_VENDOR"  	, this.dsListDF.getColumn(i, "DF_INFO8"));		// 거래처코드
        			this.dsList.setColumn(row, "DS_VENDOR"  	, this.dsListDF.getColumn(i, "DF_INFO9"));		// 거래처명
        			this.dsList.setColumn(row, "TY_CRDR"  		, "D");											// 차대구분
        			this.dsList.setColumn(row, "CD_SLIP_MI"  	, this.dsListDF.getColumn(i, "DF_INFO24"));		// 반제전표번호

        			this.dsList.setColumn(row, "TY_ETC1"  		, this.dsListDF.getColumn(i, "DF_INFO10"));
        			this.dsList.setColumn(row, "CD_ETC1"  		, this.dsListDF.getColumn(i, "DF_INFO11"));
        			this.dsList.setColumn(row, "DS_ETC11"  		, this.dsListDF.getColumn(i, "DF_INFO12"));
        			this.dsList.setColumn(row, "TY_ETC2"  		, this.dsListDF.getColumn(i, "DF_INFO13"));
        			this.dsList.setColumn(row, "CD_ETC2"  		, this.dsListDF.getColumn(i, "DF_INFO14"));
        			this.dsList.setColumn(row, "DS_ETC21"  		, this.dsListDF.getColumn(i, "DF_INFO15"));

        			this.dsList.setColumn(row, "TY_REF"  		, this.dsListDF.getColumn(i, "DF_INFO16"));
        			this.dsList.setColumn(row, "NO_REF"  		, this.dsListDF.getColumn(i, "DF_INFO17"));
        			this.dsList.setColumn(row, "DS_REF"  		, this.dsListDF.getColumn(i, "DF_INFO18"));

        			//alert("this.dsListDF.getColumn("+i+", DF_INFO17)) = " + this.dsListDF.getColumn(i, "DF_INFO17"));

        			this.dsList.setColumn(row, "TY_REF2"  		, this.dsListDF.getColumn(i, "DF_INFO19"));
        			this.dsList.setColumn(row, "NO_REF2"  		, this.dsListDF.getColumn(i, "DF_INFO20"));
        			this.dsList.setColumn(row, "DS_REF2"  		, this.dsListDF.getColumn(i, "DF_INFO21"));

        			this.dsList.setColumn(row, "DT_REF1"  		, this.dsListDF.getColumn(i, "DF_INFO22"));
        			this.dsList.setColumn(row, "DT_REF2"  		, this.dsListDF.getColumn(i, "DF_INFO23"));

        			/********************************************************************************************/
        		}
        		this.dsList.set_enableevent(true);

        		// 두번째로우 추가
        		/*
        		row = this.gfnGridAdd(this.dxGrid, "bottom", true);
        		this.dsList.set_enableevent(false);
        		//this.dsList.setColumn(row, "DT_ACCOUNT"		, this.gfnGetDate());
        		this.dsList.setColumn(row, "DT_ACCOUNT"		, this.dsListDF.getColumn(0, "DF_INFO3"));
        		this.dsList.setColumn(row, "CD_DEPT_BE"		, this.AuthClient.CD_DEPT);
        		this.dsList.setColumn(row, "CD_DEPT_BH"		, this.AuthClient.CD_DEPT);
        		this.dsList.setColumn(row, "DS_DEPT"		, this.AuthClient.DS_DEPT);
        		this.dsList.setColumn(row, "CD_CORP"		, this.getOwnerFrame().CD_CORP);
        		this.dsList.setColumn(row, "TY_CLOSING"		, TY_SLIP);								// 전표구분
        		this.dsList.setColumn(row, "YN_VAT"			, "N");
        		this.dsList.setColumn(row, "YN_DF"			, "N");
        		*/

        		// 항번 셋팅
        		this.fnNoViewSetting();

        		this.dsList.set_enableevent(true);

        		//하단 관리항목 로우 추가
        		if(this.dsListSub.rowcount == 0){
        			this.gfnGridAdd(this.dxGridSub, null, false);
        		}

        		//하단 금액 계산
        		this.fnCalcSlip();
        	//}
        };

        //자금 관리항목 데이터 셋팅
        //this.fnSetGridEtcData = function (row)
        //{
        	//if(!this.gfnIsNull(this.getOwnerFrame().DF_INFO)) {
        		/*
        		var arrDF_INFO = this.getOwnerFrame().DF_INFO.split(",");
        		//관리항목
        		this.dsList.setColumn(row, "TY_ETC1"  	, this.dsListDF.getColumn(row, "DF_INFO10"));
        		this.dsList.setColumn(row, "CD_ETC1"  	, this.dsListDF.getColumn(row, "DF_INFO11"));
        		this.dsList.setColumn(row, "DS_ETC11"  	, this.dsListDF.getColumn(row, "DF_INFO12"));
        		this.dsList.setColumn(row, "TY_ETC2"  	, this.dsListDF.getColumn(row, "DF_INFO13"));
        		this.dsList.setColumn(row, "CD_ETC2"  	, this.dsListDF.getColumn(row, "DF_INFO14"));
        		this.dsList.setColumn(row, "DS_ETC21"  	, this.dsListDF.getColumn(row, "DF_INFO15"));

        		this.dsList.setColumn(row, "TY_REF"  	, this.dsListDF.getColumn(row, "DF_INFO16"));
        		this.dsList.setColumn(row, "NO_REF"  	, this.dsListDF.getColumn(row, "DF_INFO17"));
        		this.dsList.setColumn(row, "DS_REF"  	, this.dsListDF.getColumn(row, "DF_INFO18"));

        		this.dsList.setColumn(row, "TY_REF2"  	, this.dsListDF.getColumn(row, "DF_INFO19"));
        		this.dsList.setColumn(row, "NO_REF2"  	, this.dsListDF.getColumn(row, "DF_INFO20"));
        		this.dsList.setColumn(row, "DS_REF2"  	, this.dsListDF.getColumn(row, "DF_INFO21"));

        		this.dsList.setColumn(0, "DT_REF1"  	, this.dsListDF.getColumn(row, "DF_INFO22"));
        		this.dsList.setColumn(0, "DT_REF2"  	, this.dsListDF.getColumn(row, "DF_INFO23"));
        		*/
        	//}
        //}


        //자금 프로시저 호출
        this.fnDFProcCall = function ()
        {
        	this.dsSaveDF.clearData();

        	var nRow = this.dsSaveDF.addRow();
        	this.dsSaveDF.setColumn(nRow, "NO_INCONFIRM", this.V_NO_INCONFIRM);		//입금확인번호
        	this.dsSaveDF.setColumn(nRow, "NO_SLIP"	    , this.txtCD_TRADE.value);	//전표번호
        	this.dsSaveDF.setColumn(nRow, "ID_USER"	    , this.AuthClient.ID_USER);	//사용자ID

        	var strSvcId    = "callDF";
        	var strSvcType  = "save";
        	var inProc		= "_dsProc";
        	var inData      = "callDF=dsSaveDF";
        	var outData     = "";
        	var strArg      = "";
        	var callBackFnc = "fnCallback";

        	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
        						strSvcType , 	// transaction을 요청할 구분
        						inProc,			// Procedure 정보 Dataset 이름
        						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
        						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
        						callBackFnc); // 통신방법 정의 [생략가능]
        };

        //반제 데이터 체크
        this.fnBjDataCheck = function (rowPos)
        {

        	//trace("### fnBjDataCheck rowPos :: "+rowPos);

        	var bjChk = false;

        	var tyAccount  = this.dsList.getColumn(rowPos, "TY_ACCOUNT");				// 미수미불구분
        	var tyCrdrAcnt = this.dsList.getColumn(rowPos, "TY_CRDR_ACNT");				// 계정의 차대구분
        	var amDr = nexacro.toNumber(this.dsList.getColumn(rowPos , "AM_DR"),0);		// 차변금액
        	var amCr = nexacro.toNumber(this.dsList.getColumn(rowPos , "AM_CR"),0);		// 대변금액

        	if(!this.gfnIsNull(tyAccount)) {	//미수미불구분이 있을경우
        	//if(tyAccount > 0){	//미수미불구분이 미불(0)이 아닐경우
        		//해당 계정의 차대구분에 금액이 없을경우
        		//trace("### 반제 데이터 체크 fnBjDataCheck !!! ");
        		if (tyCrdrAcnt == "D") {	//차변
        			if (amDr == 0) {
        				bjChk = true;
        			}
        		} else if (tyCrdrAcnt == "C") {	//대변
        			if (amCr == 0) {
        				bjChk = true;
        			}
        		}
        	}
        	trace("### 반제 데이터 체크!!! 값 fnBjDataCheck bjChk  => "+ bjChk+ " , tyCrdrAcnt= " + tyCrdrAcnt+ " , amDr = " + amDr );
        	return bjChk;
        };

        //자금집행현황 팝업
        this.fnDFPopup = function (obj,e)
        {
         	var param = {};
         	param.CD_SLIP = this.gfnTrim(this.dsList.getColumn(this.dsList.rowposition, "CD_SLIP"));
         	this.gfnFormOpenNonAuth(this.FormInfo.CD_MODULE, "DHA_ISSUESLIPDFDLG", "fnSlipDFPopupCallback", param, 630, 450);
        };

        //전표복사 팝업
        this.fnSlipCopy = function (obj,e)
        {
         	var param = {};
         	param.CD_SLIP = this.gfnTrim(this.dsList.getColumn(this.dsList.rowposition, "CD_SLIP"));
         	this.gfnFormOpenNonAuth(this.FormInfo.CD_MODULE, "DHA_ISSUESLIPCOPYDLG", "fnSlipCopyPopupCallback", param, 350, 190);
        };


        //전표복사 팝업
        this.fnSlipCopyNew = function (obj,e)
        {
         	var param = {};
         	param.CD_SLIP = this.gfnTrim(this.dsList.getColumn(this.dsList.rowposition, "CD_SLIP"));
         	this.gfnFormOpenNonAuth(this.FormInfo.CD_MODULE, "DHA_ISSUESLIPCOPYDLG", "fnSlipCopyNewPopupCallback", param, 350, 190);
        };

        //전표복사 팝업 콜백
        this.fnSlipCopyNewPopupCallback = function(svcID, val) {

         	if(!this.gfnIsNull(val)) {

        		// 조회 건수 확인용(동기화)
        		this.dsCurrExchangeCnt.clearData();

        		this.V_IUD_FLAG = "I";

        		//this.dxGrid.info = "N";
        		this.dxGridSub.info = "N";

        		this.dsList.set_enableevent(false);
        		var dtReq2 = this.gfnAddDate(val, 1);

        		trace(" this.ccboTY_SLIP=>" + this.ccboTY_SLIP.value);
        		this.dsSearch.removeEventHandler("onvaluechanged", this.dsSearch_Valuechanged, this);

        		this.ccboTY_SLIP.set_value("01");  //전표복사로 발행한 전표는 모두 대체 전표로 기본처리
        		this.ccfACNTUNIT.form.CDTextBox.set_value(this.AuthClient.CD_DEPT);	//발행부서는 로그인 부서로 처리
        	    this.ccfACNTUNIT.form.DSTextBox.set_value(this.AuthClient.DS_DEPT); //발행부서는 로그인 부서로 처리

        		for(var i=0;i<this.dsList.rowcount;i++){
        			this.dsList.setColumn(i, this.ucFlag   , "I");		//상태값(신규)
        			this.dsList.setColumn(i, "CD_TRADE"    , "");		//전표번호
        			this.dsList.setColumn(i, "CD_SLIP"     , "");		//전표번호
        			this.dsList.setColumn(i, "ISSUE_ID"    , "");		//전자세금계산서번호

        			this.dsList.setColumn(i, "DT_ACCOUNT"  , val);		//회계일자
        			this.dsList.setColumn(i, "DT_PROOF"    , val);		//부가세 증빙일자
        			this.dsList.setColumn(i, "YN_APPR"     , "N");		//승인여부
        			this.dsList.setColumn(i, "CD_DEPT_BH"  , this.AuthClient.CD_DEPT);	//발행부서
        			this.dsList.setColumn(i, "FILE_ATTACH" , "");		//전표번호
        			this.dsList.setColumn(i, "CD_AUTOSLIP" , "");		//자동전표번호
        			this.dsList.setColumn(i, "CD_APP"      , "");		//결재상태(구버젼 사용안함)
        			this.dsList.setColumn(i, "ST_APRV"     , "");		//결재상태
        			this.dsList.setColumn(i, "NO_VAT"      , "");
        			this.dsList.setColumn(i, "DT_REF2"     , dtReq2);
        			this.dsList.setColumn(i, "TY_CLOSING"  , "01");     //전표복사로 발행한 전표는 모두 대체 전표로 기본처리
        			this.dsList.setColumn(i, "CD_SLIP_MI"  , "");
        			this.fnSelectCurrExchange(i);

        			var flag = "";
        			if(this.dsList.getColumn(i, "YN_VAT") == "Y"){
        				flag = "I";
        			}
        			this.dsList.setColumn(i, "FLAG_V" , flag);

        		}

        		this.calDT_ACCOUNT.set_value(val);
        		this.txtCD_TRADE.set_value("");
        		this.ccboCD_APP.set_value("");
        		this.txtDS_HNAME.set_value("");
        		this.txtDT_UPDATE.set_value("");
        		this.txtDS_APPR.set_value("");
        		this.txtDS_AUTOSLIP.set_value("");

        		this.dsList.set_enableevent(true);

        		this.gfnSetFormStatus(this, "U");

        		this.fnSetButtonEnable("I");

        		//this.btnApprove.set_enable(false);
        		//this.btnSchApprove.set_enable(false);
        		this.FormBtns.Select.set_enable(false);
        		this.btnSlipCopy.set_enable(false);
        		this.btnSlipCopy2.set_enable(false);

        		this.dsSearch.addEventHandler("onvaluechanged", this.dsSearch_Valuechanged, this);

        		// 환율 조회 하고 나서 콜백에서 진행함 20230517
        		//this.fnSave();
        	}
        };

        //전표복사 팝업 콜백
        this.fnSlipCopyPopupCallback = function(svcID, val) {

         	if(!this.gfnIsNull(val)) {

        		// 조회 건수 확인용(동기화)
        		this.dsCurrExchangeCnt.clearData();

        		this.V_IUD_FLAG = "I";

        		//this.dxGrid.info = "N";
        		this.dxGridSub.info = "N";

        		this.dsList.set_enableevent(false);
        		var dtReq2 = this.gfnAddDate(val, 1);

        		trace(" this.ccboTY_SLIP=>" + this.ccboTY_SLIP.value);
        		this.ccboTY_SLIP.set_value("01");  //전표복사로 발행한 전표는 모두 대체 전표로 기본처리

        		for(var i=0;i<this.dsList.rowcount;i++){
        			this.dsList.setColumn(i, this.ucFlag   , "I");		//상태값(신규)
        			this.dsList.setColumn(i, "CD_TRADE"    , "");		//전표번호
        			this.dsList.setColumn(i, "CD_SLIP"     , "");		//전표번호
        			this.dsList.setColumn(i, "ISSUE_ID"    , "");		//전자세금계산서번호

        			this.dsList.setColumn(i, "DT_ACCOUNT"  , val);		//회계일자
        			this.dsList.setColumn(i, "DT_PROOF"    , val);		//부가세 증빙일자
        			this.dsList.setColumn(i, "YN_APPR"     , "N");		//승인여부
        			this.dsList.setColumn(i, "CD_DEPT_BH"  , this.AuthClient.CD_DEPT);	//발행부서
        			this.dsList.setColumn(i, "FILE_ATTACH" , "");		//전표번호
        			this.dsList.setColumn(i, "CD_AUTOSLIP" , "");		//자동전표번호
        			this.dsList.setColumn(i, "CD_APP"      , "");		//결재상태(구버젼 사용안함)
        			this.dsList.setColumn(i, "ST_APRV"     , "");		//결재상태
        			this.dsList.setColumn(i, "NO_VAT"      , "");
        			this.dsList.setColumn(i, "DT_REF2"     , dtReq2);
        			this.dsList.setColumn(i, "TY_CLOSING"  , "01");  //전표복사로 발행한 전표는 모두 대체 전표로 기본처리

        			this.fnSelectCurrExchange(i, "selectCurrExchangeAll");

        			var flag = "";
        			if(this.dsList.getColumn(i, "YN_VAT") == "Y"){
        				flag = "I";
        			}
        			this.dsList.setColumn(i, "FLAG_V" , flag);

        		}

        		this.calDT_ACCOUNT.set_value(val);
        		this.txtCD_TRADE.set_value("");
        		this.ccboCD_APP.set_value("");
        		this.txtDS_HNAME.set_value("");
        		this.txtDT_UPDATE.set_value("");
        		this.txtDS_APPR.set_value("");
        		this.txtDS_AUTOSLIP.set_value("");

        		this.dsList.set_enableevent(true);

        		this.gfnSetFormStatus(this, "U");

        		this.fnSetButtonEnable("I");

        		//this.btnApprove.set_enable(false);
        		//this.btnSchApprove.set_enable(false);
        		this.FormBtns.Select.set_enable(false);
        		this.btnSlipCopy.set_enable(false);
        		this.btnSlipCopy2.set_enable(false);

        		// 환율 조회 하고 나서 콜백에서 진행함 20230517
        		//this.fnSave();
        	}
        };

        /************************************************************************
         * 전자결재
         ************************************************************************/
        // 결재상신 버튼
        this.fnAprv = function(obj, e) {

        	if (!this.gfnGridIsRow(this.dxGrid)) return;

        	var cdTrade = nexacro.replaceAll(this.gfnTrim(this.gfnNvl(this.txtCD_TRADE.value,"")), "-","");
        	if(this.gfnIsNull(cdTrade)){
        		this.gfnAlert("전표번호를 입력하신 후 처리하세요.");
        		return;
        	}

        	this.gfnConfirm(this.fnAprvMsg(obj), function(strId, isOk) {
        		if(isOk == false) return;
        		var initParam = {
        			CD_CORP: this.dsSearch.getColumn(0, "CD_CORP"),
        			ID_AP_TYPE: "DHA01",
        			TY_WRK: "APRV",
        			ID_APRV: this.AuthClient.ID_SABUN,
        			TT_DOC: "전표발행 결재 (" + cdTrade + ")",
        			CD_CORP_SUFFIX : this.gfnGetConfig("DZ" , "CD_CORP_SUFFIX"),
        		}
        		this.gfnAprv(initParam, "fnAprvCallback", "APRV");
        	});
        }

        // 결재문서조회 버튼
        this.fnAprvDocQ = function(obj, e) {
        	var cd_corp = this.dsList.getColumn(this.dsList.rowposition, "CD_CORP");
        	var no_aprv = this.dsList.getColumn(this.dsList.rowposition, "NO_APRV");
        	var no_doc = this.dsList.getColumn(this.dsList.rowposition, "NO_DOC");
        	if(this.gfnIsNull(no_aprv) || this.gfnIsNull(no_doc)){
        		return;
        	}

        	var oParams = {
        		CD_CORP: cd_corp,
        		NO_APRV: no_aprv,
        	}
        	this.gfnAprvDoc(oParams, this.fnAprvDocQCallback);
        }

        this.fnAprvDocQCallback = function() {
        	console.log('fnAprvDocQCallback');
        	//alert('fnAprvDocQCallback');
        }

        // 결재상태초기화 버튼
        this.fnAprvInit = function(obj, e) {
        	if (!this.gfnGridIsRow(this.dxGrid)) return;

        	//this.gfnConfirm(this.fnAprvMsg(obj), "fnAprvCallback", "APRVINIT");
        	this.gfnConfirm(this.fnAprvMsg(obj), function(strId, isOk) {
        		if (isOk == false) {
        			return;
        		}
        		this.fnAprvCallback("APRVINIT", isOk);
        	});
        }

        this.fnAprvMsg = function(obj) {

        	var CD_TRADE = nexacro.replaceAll(this.gfnTrim(this.gfnNvl(this.txtCD_TRADE.value,"")), "-","");
        	var CD_CORP = this.dsSearch.getColumn(0, "CD_CORP");
        	var DS_CORP = this.dsSearch.getColumn(0, "DS_CORP");
        	var msg =  CD_TRADE +" 전표의\n";
        	msg += "" + obj.text + " 하시겠습니까?";

        	return msg;
        }

        // 결재상신 버튼 콜백
        // 취소결재상신 버튼 콜백
        // 결재상태초기화 버튼 콜백
        this.fnAprvCallback = function(strId, val) {

        	this.dsApproval.clearData();
        	this.dsApproval.addRow();

         	var cdTrade  = this.gfnTrim(this.txtCD_TRADE.value);
        	this.dsApproval.setColumn(0, "TY_WRK",  strId);
        	this.dsApproval.setColumn(0, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
        	this.dsApproval.setColumn(0, "CD_TRADE", cdTrade);
        	this.dsApproval.setColumn(0, "ID_APRV", this.AuthClient.ID_SABUN);
        	if (strId == "APRV") {
        		this.dsApproval.setColumn(0, "NO_APRV", this.dsAprvOut.getColumn(0, "NO_APRV"));
        	} else {
        		this.dsApproval.setColumn(0, "NO_APRV", this.dsList.getColumn(0, "NO_APRV"));
        	}

        	var strSvcId    = strId;
        	var strSvcType  = "save";
        	var inProc		= "_dsProc";
        	var inData      = "aprv_execute=dsApproval";
        	var outData     = "";
        	var strArg      = "";
        	var callBackFnc = "fnCallback";

        	this.gfnTransaction(strSvcId,		// transaction을 구분하기 위한 svc id값
        						strSvcType, 	// transaction을 요청할 구분
        						inProc,			// Procedure 정보 Dataset 이름
        						inData, 		// 입력값으로 보낼 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        						outData, 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
        						callBackFnc);	// 통신방법 정의 [생략가능]
        }


        // 전표결제 버튼 클릭
        this.fnApprove = function (obj,e)
        {
        	var cdTrade  = this.gfnTrim(this.txtCD_TRADE.value);
        	if(this.gfnIsNull(cdTrade)){
        		this.gfnAlert("전표번호는 필수입니다.");
        		return;
        	}

        	this.dsSelectDtReq.clearData();
        	var nRow = this.dsSelectDtReq.addRow();

        	this.dsSelectDtReq.setColumn(nRow, "CD_TRADE", cdTrade);

        	var strSvcId    = "selectDtReq";
        	var strSvcType  = "select";
        	var inProc		= "_dsProc";
        	var inData      = "selectDtReq=dsSelectDtReq";
        	var outData     = "dsDtReq=selectDtReq0";
        	var strArg      = "";
        	var callBackFnc = "fnCallback";

        	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
        						strSvcType , 	// transaction을 요청할 구분
        						inProc,			// Procedure 정보 Dataset 이름
        						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
        						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
        						callBackFnc); // 통신방법 정의 [생략가능]
        };


        // 결재문서
        //this.fnDocument = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
        this.fnDocument = function()
        {
        	//if(!this.gfnGridIsRow(this.dxGrid)) return;

        	var param = {};
        	var nRow = 0; // this.dsList.rowposition
        	var rem = this.dsList.getColumn(nRow, "DS_REM");
        	var cdTrade = nexacro.replaceAll(this.gfnTrim(this.gfnNvl(this.txtCD_TRADE.value,"")), "-","");
        	if(this.gfnIsNull(cdTrade)){
        		this.gfnAlert("전표번호를 입력하신 후 처리하세요.");
        		return;
        	}
        /*
        //	param.V1 = '20210304011111100001';		// 전표번호
        	param.V1 = cdTrade;		// 전표번호
        // 	param.V2 = "";
        // 	param.V3 = "";
        // 	param.V4 = "";
        	param.ID_AP = this.dsList.getColumn(nRow, "NO_DOC");	// 전자결재문서번호
        	param.DS_ETITLE = rem;

        	//this.gfnFormOpen("DHA", "DHA_ISSUESLIP_APP", "fnAprvDialogCallback", param, 1200, 700);
        */

        	var NO_DOC = this.dsList.getColumn(this.dsList.rowposition, "NO_DOC");	// 전자결재문서번호
        	var CD_AUTOSLIP = this.dsList.getColumn(this.dsList.rowposition, "CD_AUTOSLIP");	// 자동전표
        	//var YN_CD_AUTOSLIP = (this.gfnIsNull(CD_AUTOSLIP)) ? "Y" : "N";
        	var YN_RELATED = this.gfnNvl(this.dsList.getColumn(this.dsList.rowposition, "YN_RELATED"),"N");
        	var CD_DEPT = this.dsList.getColumn(this.dsList.rowposition, "CD_DEPT_BE");	// 귀속부서가 재무회계팀(J20003)
        	var Pyn = (CD_DEPT == "J20003") ? "N" : YN_RELATED;
        	var isView = (this.AuthClient.CD_DEPT == "J20003" || this.AuthClient.CD_DEPT == "J20004") ? "Y" : "N";	// 재무회계팀(J20003), 복합금융팀(J20004)
        	var ID_USER = (this.AuthClient.ID_USER == "ERP1") ? "8300103" : this.AuthClient.ID_USER;
        	var TY_CLOSING = this.dsList.getColumn(this.dsList.rowposition, "TY_CLOSING");	// 전표유형
        	//var sLegacyFormID = (CD_AUTOSLIP == "DFB0001" || CD_AUTOSLIP == "DFL0001" || (TY_CLOSING == "03" && this.AuthClient.CD_DEPT == "J20004")) ? "DSMEC_SLIP_DETAIL_DEPOSITS" : "DSMEC_SLIP_DETAIL";
        	// DFB0001 미지급반제 OR DFL0001 예금간대체
        	// J20004 복합금융팀 AND 03 입금전표
        	var sLegacyFormID = "DSMEC_SLIP_DETAIL";
        	//|| CD_AUTOSLIP == "DFG0001"

        	// 공통코드 A30 결재문서 동전표코드(LegacyFormID)
        	this.dsCD_A30.filter("CD_CODE == '"+CD_AUTOSLIP+"'");
        	var nAutoSlipCnt = this.dsCD_A30.rowcount;
        	this.dsCD_A30.filter("");

        	if((TY_CLOSING == "03" && this.AuthClient.CD_DEPT == "J20004") || nAutoSlipCnt > 0)
        	{
        		sLegacyFormID = "DSMEC_SLIP_DETAIL_DEPOSITS";
        	}

        	//sLegacyFormID= "DSMEC_SLIP_DETAIL";

        	// 그룹웨어전자결재URL
        	var url = this.gfnGetConfig("DZ" , "GW_APROVAL_URL");
        	if(this.gfnIsNull(NO_DOC)){
        		// 전자결재문서 상신
        		url = url+"approval/legacy/goFormLink.do?legacyFormID=" + sLegacyFormID;
        		url += "&mode=DRAFT";
        		url += "&ID_USER=" + ID_USER;
        		url += "&pYn="+ "Y";
        		url += "&DS_KEY1=" + cdTrade;  // 전표번호
        		url += "&DS_KEY2=&DS_KEY3=&DS_KEY4=&DS_KEY5=";

        	}else{
        		// 전자결재문서 조회
        		url = url+"approval/legacy/goFormLink.do?";
        		url +="mode=complete";
        		//url += "&isView="+ isView;
        		url += "&isView="+ "Y";
        		url +="&ID_USER=" + ID_USER;
        		url +="&fiid=" + NO_DOC;
        	}

        	trace("전자결재->" + url);

        	var new_window = window.open(url,"_blank", "width=1386,height=1000,menubar=no,scrollbars=no,resizable=no,status=no");
        	new_window.onbeforeunload = this.fnAprvDialogCallback();

        	/*
        	http://dev.gw.dsmec.co.kr/approval/legacy/goFormLink.do?legacyFormID=DSMEC_SLIP_DETAIL&mode=DRAFT&ID_USER=9200295&DS_KEY1=20211005010009&DS_KEY2=&DS_KEY3=&DS_KEY4=&DS_KEY5=
        	*/
        }

         this.fnAprvDialogCallback = function(svcID, value) {
        	// 리턴값
        	//if(value){
        		// 결재완료, 결재취소, 결재상신 후에는 재조회를 한다
        		this.FormBtns.Select.click();
        	//}
        };

        // 전자결재 - 자금 계정이 포함한 전표확인(사용안함)
        this.fnCheckAuthApproval = function(obj,e){

        	if(!this.gfnGridIsRow(this.dxGrid)) return;

        	var cdTrade = nexacro.replaceAll(this.gfnTrim(this.gfnNvl(this.txtCD_TRADE.value,"")), "-","");
        	if(this.gfnIsNull(cdTrade)){
        		this.gfnAlert("전표번호를 입력하신 후 처리하세요.");
        		return;
        	}

        	this.dsAuthGwAppr.clearData();
        	var nrow = this.dsAuthGwAppr.addRow();

        	this.dsAuthGwAppr.setColumn(nrow, "CD_DEPT_BE", this.AuthClient.CD_DEPT);
        	this.dsAuthGwAppr.setColumn(nrow,"CD_TRADE", cdTrade);

        	var strSvcId    = "selectAuthGwAppr";
        	var strSvcType  = "grid";
        	var inProc		= "_dsProc";
        	var inData      = "selectAuthGwAppr=dsAuthGwAppr";
        	var outData     = "dsAuthGwApprList=selectAuthGwAppr0";
        	var strArg      = "";
        	var callBackFnc = "fnCallback";

        	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
        						strSvcType , 	// transaction을 요청할 구분
        						inProc,			// Procedure 정보 Dataset 이름
        						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
        						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
        						callBackFnc); // 통신방법 정의 [생략가능]

        }


        // 결제조회 버튼 클릭
        this.fnSchApprove = function (obj,e)
        {
        	//if(!this.gfnGridIsRow(this.dxGrid)) return;

        	var url = this.gfnGetConfig("DZ" , "GW_APROVAL_URL");
        	url = url+"approval/approval_Form.do?";
        	if(this.gfnIsNull(this.dsList.getColumn(0 , "NO_DOC"))){
        		this.gfnAlert("결재 정보가 존재하지 않습니다.");
        		return;
        	}
        	url +="forminstanceID="+this.dsList.getColumn(0 , "NO_DOC");
        	url +="&processID="+this.dsList.getColumn(0 , "DS_DOC");

        	window.open(url, "_blank", "width=790,height=1000,menubar=no,scrollbars=no,resizable=no,status=no");
        };

        // 파일이동
        this.fnFileMove = function() {
        	//trace("$$$$$ fnFileMove 들어옴!!!");

        	if(this.dsRnameList.rowcount == 0) return;

        	//trace("$$$$$ dsRnameList saveXML :: "+this.dsRnameList.saveXML());

        	for (var i = 0; i < this.dsRnameList.rowcount; i++) {
        		var fileManager = {};
        		fileManager.CD_GUBUN = "DH03";
        		fileManager.CD_DIR = [ this.dsRnameList.getColumn(i, "PATH_ORG") ];
        		fileManager.MV_DIR = [ this.dsRnameList.getColumn(i, "PATH_NEW") ];
        		// CD_DIR 만 지정시 CD_DIR 배열 순대로 키1,키2,키3 까지 자동지정
        		// 저장되는 디렉토리와 키값이 다른경우 CD_REF 추가로 사용
        		fileManager.CD_REF = [ this.dsRnameList.getColumn(i, "PATH_ORG") ];
        		fileManager.MV_REF = [ this.dsRnameList.getColumn(i, "PATH_NEW") ];

        		fileManager.IS_DELETE = true;

        		this.gfnMoveFile(fileManager, "fnFileMoveCallback");
        	}
        };


        this.fnFileMoveCallback = function(svcID, errorCode, errorMsg) {
        	//trace("&&& File Move End!!!!");

        	if (errorCode == 0) {
        		this.vFileCnt++;
        	} else {
        		this.gfnAlert(errorMsg);
        		return;
        	}

        	//trace("&&& 콜백 this.vFileCnt :: "+this.vFileCnt);

        	//전체건 처리 되었을 경우 데이터셋 클리어
        	if(this.dsRnameList.rowcount == this.vFileCnt){
        		this.dsRnameList.clearData();
        		this.vFileCnt = 0;
        		//trace("$$$ 파일 데이터셋 클리어!!!!");
        		this.FormBtns.Select.click();
        	}
        };

        this.fnFileDelete = function() {
        	this.dsDeleteList.clearData();

        	for( var i=0; i<this.dsFileList.rowcount;i++)
        	{
        		var nrow = this.dsDeleteList.addRow();
        		this.dsDeleteList.setColumn(nrow, "filepath", this.dsFileList.getColumn(i, "DS_PATH"));
        		this.dsDeleteList.setColumn(nrow, "filename", this.dsFileList.getColumn(i, "NM_FILE"));
        	}

        	var strSvcId    = "deletefile";
        	var strSvcType  = "file/deleteFile";
        	var inProc		= "";
        	var inData      = "input=dsDeleteList";
        	var outData     = "";
        	var strArg      = "";
        	var callBackFnc = "fnDeleteCallback";

        	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
        						strSvcType , 	// transaction을 요청할 구분
        						inProc,			// Procedure 정보 Dataset 이름
        						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
        						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
        						callBackFnc); // 통신방법 정의 [생략가능]
        };

        this.fnDeleteCallback = function(svcID, errorCode, errorMsg) {
        	if(svcID == "deletefile") {
        		if (errorCode == 0) {
        			this.fnFileDataDelete();
        		} else {
        			this.gfnAlert(errorMsg);
        		}
        	}
        	else if(svcID == "fileDelete") {

        	}
        }

        this.fnFileDataDelete = function() {

        	this.dsFileSave.clearData();

        	for(var i=0;i<this.dsFileList.rowcount;i++){
        		var nrow = this.dsFileSave.addRow();

        // 		var dsPath = this.dsFileList.getColumn(i, "DS_PATH");
        // 		var cdRef1 = dsPath.substring(dsPath.lastIndexOf("\\")+1, dsPath.length);

        		this.dsFileSave.setColumn(nrow, "TY_SAVE" , "D");
        		this.dsFileSave.setColumn(nrow, "NO_SEQ"  , "0");
        		this.dsFileSave.setColumn(nrow, "CD_GUBUN", "DH03");
        		this.dsFileSave.setColumn(nrow, "CD_REF1" , this.dsFileList.getColumn(i, "CD_REF1"));
        	}

        	if (this.dsFileSave.rowcount == 0) return;

        	var strSvcId    = "fileDelete";
        	var strSvcType  = "save";
        	var inProc		= "_dsProc";
        	var inData      = "fileDelete=dsFileSave";
        	var outData     = "";
        	var strArg      = "";
        	var callBackFnc = "fnDeleteCallback";

        	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
        						strSvcType , 	// transaction을 요청할 구분
        						inProc,			// Procedure 정보 Dataset 이름
        						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
        						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
        						callBackFnc); // 통신방법 정의 [생략가능]
        };

        //파일 조회
        this.fnFileSelect = function ()
        {
        	this.dsFileSelect = new Dataset();
        	this.dsFileSelect.addColumn("CD_GUBUN", "string");
        	this.dsFileSelect.addColumn("CD_REF1", "string");

        	this.dsFileSelect.clearData();
        	this.dsFileSelect.addRow();
        	this.dsFileSelect.setColumn(0, "CD_GUBUN", "DH03");     // 첨부파일 구분
        	this.dsFileSelect.setColumn(0, "CD_REF1", this.txtCD_TRADE.value + "%");		//파일경로 구분

        	var strSvcId    = "fileSelect";
        	var strSvcType  = "select";
        	var inProc		= "_dsProc";
        	var inData      = "fileSelect=dsFileSelect";
        	var outData     = "dsFileList=fileSelect0";
        	var strArg      = "";
        	var callBackFnc = "fnCallback";

        	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
        						strSvcType , 	// trabsaction을 요청할 구분
        						inProc,			// Procedure 정보 Dataset 이름
        						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
        						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
        						callBackFnc); // 통신방법 정의 [생략가능]
        };

        this.fnAddData = function (rowPos, type)
        {
        	var sExpr = this.ucFlag +" != 'D' && "+ this.ucFlag + " != 'DU'";	//삭제 데이터 제외
        	var amDrSum = nexacro.toNumber(this.dsList.getCaseSum(sExpr , "AM_DR"),0);	//차변금액 합
        	var amCrSum = nexacro.toNumber(this.dsList.getCaseSum(sExpr , "AM_CR"),0);	//대변금액 합
        	if(amDrSum != amCrSum){
        		//이미 추가된 로우가 있을경우
        		var fRow = this.dsList.findRowAs(this.ucFlag, "I", (rowPos+1));
        		trace("이미 추가된 로우가 있을경우->" + fRow);

        		if(fRow > -1){
        			return;
        		}

        		var nRow = this.fnAdd("F");	//추가
        		var tRowPos = nRow -1;
        		this.dsList.set_enableevent(false);
        		this.dsList.setColumn(nRow, "DT_ACCOUNT" , this.dsList.getColumn(tRowPos, "DT_ACCOUNT"));	//회계일자
        		this.dsList.setColumn(nRow, "DS_REM" 	 , this.dsList.getColumn(tRowPos, "DS_REM"));		//적요
        		this.dsList.setColumn(nRow, "CD_VENDOR"  , this.dsList.getColumn(tRowPos, "CD_VENDOR"));	//거래처코드
        		this.dsList.setColumn(nRow, "DS_VENDOR"  , this.dsList.getColumn(tRowPos, "DS_VENDOR"));	//거래처명
        		this.dsList.setColumn(nRow, "TY_VENDOR"  , this.dsList.getColumn(tRowPos, "TY_VENDOR"));	//거래처구분
        		this.dsList.setColumn(nRow, "CD_DEPT_BE" , this.dsList.getColumn(tRowPos, "CD_DEPT_BE"));	//귀속부서코드
        		this.dsList.setColumn(nRow, "DS_DEPT"    , this.dsList.getColumn(tRowPos, "DS_DEPT"));		//귀속부서명

        		this.dsList.setColumn(nRow, "CD_DEPTOFFICER", this.dsList.getColumn(tRowPos, "CD_DEPT_BE"));
        		this.dsList.setColumn(nRow, "DS_DEPTOFFICER", this.dsList.getColumn(tRowPos, "DS_DEPT"));

        		this.dsList.setColumn(nRow, "CD_LOCAL_CURR"   	, this.dsList.getColumn(tRowPos, "CD_LOCAL_CURR"));
        		this.dsList.setColumn(nRow, "YN_BUDGET"    		, this.dsList.getColumn(tRowPos, "YN_BUDGET"));
        		this.dsList.setColumn(nRow, "YN_BUDGET_CONTROL" , this.dsList.getColumn(tRowPos, "YN_BUDGET_CONTROL"));

        		//매입귀속부서
        		this.dsList.setColumn(nRow, "CD_DEPT_BUY", this.dsList.getColumn(tRowPos, "CD_DEPT_BUY"));
        		this.dsList.setColumn(nRow, "DS_DEPT_BUY", this.dsList.getColumn(tRowPos, "DS_DEPT_BUY"));

        		//본사귀속부서
        		this.dsList.setColumn(nRow, "CD_DEPT_ACNT_BON", this.dsList.getColumn(tRowPos, "CD_DEPT_ACNT_BON"));
        		this.dsList.setColumn(nRow, "DS_DEPT_ACNT_BON", this.dsList.getColumn(tRowPos, "DS_DEPT_ACNT_BON"));


        		// 집행통화
        		this.dsList.setColumn(nRow, "CD_EXEC_CURR"    , this.dsList.getColumn(tRowPos, "CD_EXEC_CURR"));
        		this.fnSelectCurrExchange(nRow);
        		//this.dsList.setColumn(nRow, "RT_LOCAL_EXCH"    , this.dsList.getColumn(tRowPos, "RT_LOCAL_EXCH"));	// 로컬환율
        		//this.dsList.setColumn(nRow, "RT_KRW_EXCH"    , this.dsList.getColumn(tRowPos, "RT_KRW_EXCH"));		// 원화환율

        		this.dsList.set_enableevent(true);

        		this.dsList.set_rowposition(nRow);

        		var colIdx = this.dxGrid.getBindCellIndex("body", "CD_ACCOUNT");
        		if(type == "KEY"){
        			colIdx = this.dxGrid.getBindCellIndex("body", "DT_ACCOUNT");
        		}
        		this.dxGrid.setCellPos(colIdx, nRow);
        		this.dxGrid.showEditor(true);
        	}
        };

        this.fnGrid_ExpandUp = function(obj, e) {

        	//삭제데이터, 결재완료 데이터일 경우 리턴
        	//if(this.gfnGetFlag(this.dsList, e.row) == "D" || this.dsList.getColumn(e.row, "CD_APP") == "2"){
        	if(this.gfnGetFlag(this.dsList, e.row) == "D"){
        		return;
        	}

        	var colnm = this.gfnGridGetBindColumnNameByIndex(obj, e.cell);

        	if(colnm == "FILE_ATTACH") {

        		if(this.gfnGetFlag(this.dsList, e.row) == "I"){
        			this.gfnAlert("저장 후 파일첨부 진행하세요");
        			return;
        		}

        		var CD_AUTOSLIP = this.dsList.getColumn(e.row, "CD_AUTOSLIP");

        		switch(CD_AUTOSLIP) {
        			case "DHA0101": 	// PMS_사업관리비-체재비
        			case "DHA0102":		// PMS_사업관리비-법인카드
        			case "DHA0103":		// PMS_사업관리비-세금계산서
        			case "DHA0104":		// PMS_출장비
        			case "DHA0105":		// PMS_사업관리비-사업경비
        			case "DHA0106":		// PMS_개인경비
        			case "DHA0107":		// PMS_매입계산서
        			case "DHA0108":		// PMS_매출계산서
        			case "DHA0109":		// PMS_공통경비
        			case "DHA0110":		// PMS_일반경비
        				var Parm = { CD_TRADE: this.dsList.getColumn(e.row, "CD_TRADE"), CD_SLIP: this.dsList.getColumn(e.row, "CD_SLIP") };
        				var Option = {
        						//popuptype:"modeless",
        						title:"증빙자료",
        						width:"600",
        						height:"400"
        					};
        				this.gfnOpenPopup("modelesspopup1", "dha::DHA_ISSUESLIP_PMS_PROOF.xfdl", Parm, null, Option);
        				break;
        			default:
        				var cdDir = "";
        				if (this.gfnGetFlag(this.dsList, e.row) == "I") {
        					if(this.gfnIsNull(this.dsList.getColumn(e.row, "FILE_DIR"))) {
        						cdDir = "TEMP_" + this.gfnGetDate("milli");
        					} else {
        						cdDir = this.dsList.getColumn(e.row, "FILE_DIR");
        					}
        					this.FileManager.CD_DIR = [cdDir];
        				} else {
        					var sProofUrl = this.dsList.getColumn(e.row, "PROOF_URL");
        					trace("sProofUrl->" + sProofUrl);
        					if(!this.gfnIsNull(sProofUrl)){
        						var sCdgubun = this.dsList.getColumn(e.row, "CD_GUBUN");
        						var sCdRef1 = this.dsList.getColumn(e.row, "CD_REF1");
        						var sCdRef2 = this.dsList.getColumn(e.row, "CD_REF2");
        						var sCdRef3 = this.dsList.getColumn(e.row, "CD_REF3");
        						var sCdRef4 = this.dsList.getColumn(e.row, "CD_REF4");
        						var sCdRef5 = this.dsList.getColumn(e.row, "CD_REF5");

        						var arr_cd_dir = [];
        						if(!this.gfnIsNull(sCdRef1)){arr_cd_dir.push(sCdRef1);}
        						if(!this.gfnIsNull(sCdRef2)){arr_cd_dir.push(sCdRef2);}
        						if(!this.gfnIsNull(sCdRef3)){arr_cd_dir.push(sCdRef3);}
        						if(!this.gfnIsNull(sCdRef4)){arr_cd_dir.push(sCdRef4);}
        						if(!this.gfnIsNull(sCdRef5)){arr_cd_dir.push(sCdRef5);}

        						this.FileManager.CD_GUBUN = sCdgubun;
        						//this.FileManager.CD_DIR = [sCdRef1,sCdRef2,sCdRef3,sCdRef4,sCdRef5];
        						this.FileManager.CD_DIR = arr_cd_dir;
        					}else{
        						this.FileManager.CD_GUBUN = "DH03";
        						this.FileManager.CD_DIR = [this.dsList.getColumn(e.row, "CD_SLIP")];
        					}
        				}

        				//trace("## 첨부파일 cdDir :: "+cdDir);
        				//trace("## 첨부파일 수정가능? :: "+ this.fnSetFileReadOnly(e.row));

        				//CD_APP : 03	결재완료
        				//this.FileManager.IS_READONLY = (this.dsList.getColumn(e.row, "CD_APP") == "03" ? true : false );		// 2022.07.13 주석처리
        				if(this.AuthClient.CD_ROLE == "R19") {		// 2022.07.13 yuhw [135152] 회계팀일 경우 결재완료 상황에도 파일 수정 가능하도록 수정
        					this.FileManager.IS_READONLY = false;
        				}else{
        					// 전자결재상태 ST_APRV 공통코드 DZ - DZ_APRV
        					// 1임시저장	2결재상신	3결재중	4결재완료	5반려	6상신취소	7작성취소
        					this.FileManager.IS_READONLY = (this.dsList.getColumn(e.row, "ST_APRV") == "4" ? true : false );
        					//this.FileManager.IS_READONLY = (this.dsList.getColumn(e.row, "CD_APP") == "03" ? true : false );
        				}

        				//this.FileManager.IS_READONLY = ( !this.gfnIsNull(CD_AUTOSLIP) || this.dsList.getColumn(e.row, "CD_APP") == "03") ? true : false;
        				//this.FileManager.IS_READONLY = false;
        				//this.FileManager.IS_READONLY = this.fnSetFileReadOnly(e.row);

        				this.gfnFileManager(this.FileManager, "fnFileCallback");
        				break;
        		}
        	}
        };

        // 파일 READONLY 설정 Y면 수정불가능
        this.fnSetFileReadOnly = function(row){
        	var YN_APPR = this.dsList.getColumn(row, "YN_APPR");
        	var CD_AUTOSLIP = this.dsList.getColumn(row, "CD_AUTOSLIP");
        	var CD_APP = this.dsList.getColumn(row, "CD_APP");		// 결재상태(구버젼 사용안함)
        	var ST_APRV = this.dsList.getColumn(row, "ST_APRV");	// 결재상태

        	//trace("  셀 수정가능 여부 YN_APPR : " + YN_APPR + " / CD_AUTOSLIP : " + CD_AUTOSLIP + " / CD_APP : " + CD_APP);

        // 	if(!this.gfnIsNull(CD_AUTOSLIP)){
        // 		return true;
        // 	}

        	if(YN_APPR == "Y"){
        		return true;
        	}

        	// 01	상신  02	결재중 03	결재완료
        	// 결재상태 결재중, 결재완료
        // 	if(CD_APP == "01" || CD_APP == "02" || CD_APP == "03"){
        // 		return true;
        // 	}

        	// 전자결재상태 ST_APRV 공통코드 DZ - DZ_APRV
        	// 1임시저장	2결재상신	3결재중	4결재완료	5반려	6상신취소	7작성취소
         	if(ST_APRV == "1" || ST_APRV == "2" || ST_APRV == "3" || ST_APRV == "4"){
         		return true;
         	}

        	return false;
        }

        this.fnFileCallback = function(strID, val) {
        	// val.IsChange : 변경여부, val.Cnt : 파일개수

        	//trace("## val :: " + val);

        	// 파일개수를 다시 셋팅
        	this.dsList.set_enableevent(false);

        	if (val.Cnt == 0) {
        		this.dsList.setColumn(this.dsList.rowposition, "FILE_DIR", "");
        	} else {
        		if(this.gfnIsNull(this.dsList.getColumn(this.dsList.rowposition, "CD_SLIP"))){
        			this.dsList.setColumn(this.dsList.rowposition, "FILE_DIR", this.FileManager.CD_DIR);
        		}
        	}

        	trace("## 첨부파일 건수 :: " + val.Cnt);
        	//trace("## FILE_DIR :: " + this.dsList.getColumn(this.dsList.rowposition, "FILE_DIR"));

        	if(val.IsChange){
        		this.dsList.setColumn(this.dsList.rowposition, "FILE_ATTACH", "첨부(" + val.Cnt + ")");
        		this.dsList.setColumn(this.dsList.rowposition, "FILE_ATTACH_CNT", val.Cnt);
        	}

        	this.dsList.set_enableevent(true);
        };

        //자금신청 이동
        this.fnRequestList = function (obj,e)
        {
         	var param = {};
         	param.CD_CORP = this.ccfCD_CORP.form.CDTextBox.value;
        	param.DS_CORP = this.ccfCD_CORP.form.DSTextBox.value;
        	param.CD_DEPTOPER = this.dsList.getColumn(0, "CD_DEPT_BH");
        	param.DS_DEPTOPER = this.dsList.getColumn(0, "DS_DEPT_BH");
        	param.CD_TRADE = this.dsList.getColumn(0, "CD_TRADE");
        	param.DT_REQ_FROM = this.dsList.getMin("DT_ACCOUNT");
        	param.DT_REQ_TO = this.dsList.getMax("DT_ACCOUNT");

         	this.gfnFormOpen("DFB", "DFB_REQUESTLIST", "fnSlipDFCallback", param);
        };

        //세금계산서 보기
        this.fnTaxView = function (obj,e)
        {

        	var issueId   = this.gfnTrim(this.dsList.getColumn(this.dsList.rowposition, "ISSUE_ID"));
        	var tySalebuy = this.dsList.getColumn(this.dsList.rowposition, "TY_SALEBUY");
        	if(this.gfnIsNull(issueId)){
        		this.gfnAlert("전자세금계산서번호는 필수입니다.");
        		return;
        	}

        	//세금계산서 정보 조회
        	this.fnSelectTax(issueId, tySalebuy);
        };

        //세금계산서 정보 조회
        this.fnSelectTax = function (issueId, tySalebuy)
        {
        	this.dsSelectTax.clearData();
        	var nRow = this.dsSelectTax.addRow();

        	this.dsSelectTax.setColumn(nRow, "ISSUE_ID"  , issueId);		//세금계산서번호
        	this.dsSelectTax.setColumn(nRow, "TY_SALEBUY", tySalebuy);		//매입/매출구분

        	var strSvcId    = "selectTax";
        	var strSvcType  = "select";
        	var inProc		= "_dsProc";
        	var inData      = "selectTax=dsSelectTax";
        	var outData     = "dsTax=selectTax0";
        	var strArg      = "";
        	var callBackFnc = "fnCallback";

        	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
        						strSvcType , 	// transaction을 요청할 구분
        						inProc,			// Procedure 정보 Dataset 이름
        						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
        						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
        						callBackFnc); // 통신방법 정의 [생략가능]
        };

        // 예산
        this.selectBudget = function (){
        	this.dsSelectBudget.clearData();
        	var nRow = this.dsSelectBudget.addRow();

        	var sYrAcnt = this.dsList.getColumn(this.dsList.rowposition, "DT_ACCOUNT");
        	this.dsSelectBudget.setColumn(nRow, "YM_ACCOUNT", sYrAcnt.substring(0, 6));
        	this.dsSelectBudget.setColumn(nRow, "DEPTOFFICER", this.dsList.getColumn(this.dsList.rowposition, "CD_DEPTOFFICER"));
        	this.dsSelectBudget.setColumn(nRow, "BIMOK", this.dsList.getColumn(this.dsList.rowposition, "CD_BIMOK"));
        	this.dsSelectBudget.setColumn(nRow, "SEMOK", this.dsList.getColumn(this.dsList.rowposition, "CD_SEMOK"));

        	var strSvcId    = "selectBudget";
        	var strSvcType  = "select";
        	var inProc		= "_dsProc";
        	var inData      = "selectBudget=dsSelectBudget";
        	var outData     = "dsListBudget=selectBudget0";
        	var strArg      = "";
        	var callBackFnc = "fnCallback";

        	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
        						strSvcType , 	// transaction을 요청할 구분
        						inProc,			// Procedure 정보 Dataset 이름
        						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
        						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
        						callBackFnc); // 통신방법 정의 [생략가능]
        };

        this.divData_divDataTop_btnAddRow_onclick = function(obj,e)
        {
        	if(!this.fnCheckValidate()) return;

        	var addCnt = nexacro.toNumber(this.mskAddCnt.value,0);
        	if(addCnt == 0){
        		this.gfnAlert("추가할 갯수를 입력하세요.");
        		this.mskAddCnt.setFocus();
        		return;
        	}

        	if(this.dsList.rowcount > 0){
        		//	부가세등록계정여부 Y이고 증빙을 입력 안했을경우
        		var rowPos = this.dsList.rowcount -1;
        		if( this.dsList.getColumn(rowPos, "YN_VAT_ACNT") == "Y" && this.dsList.getColumn(rowPos, "YN_VAT") == "N"){
        			var dsAcntVat = this.dsList.getColumn(rowPos, "DS_ACCOUNT");		// 계정명칭
        			this.gfnAlert( dsAcntVat + " 계정은 증빙 필수입니다. 증빙을 입력하세요");
        			return false;
        		}
        	}

        	var cdCorp = this.ccfCD_CORP.form.CDTextBox.value;
        	this.dsList.set_enableevent(false);

        	for(var i=0;i<addCnt;i++){
        		var nRow = this.dsList.addRow();
        		this.dsList.setColumn(nRow, "CD_CORP"   , cdCorp);						//법인코드
        		this.dsList.setColumn(nRow, "CD_TRADE"	, this.txtCD_TRADE.value);		//거래번호
        		this.dsList.setColumn(nRow, "DT_ACCOUNT", this.calDT_ACCOUNT.value);	//발행일자
        		this.dsList.setColumn(nRow, "AM_DR"		, "0");							//차변금액
        		this.dsList.setColumn(nRow, "AM_CR"		, "0");							//대변금액
        		this.dsList.setColumn(nRow, "AM_EXEC_DR", "0");							// 차변집행화
        		this.dsList.setColumn(nRow, "AM_EXEC_CR", "0");							// 대변집행화
        		this.dsList.setColumn(nRow, "CD_ACCOUNT", "");							//계정코드
        		this.dsList.setColumn(nRow, "CD_DEPT_BH", this.ccfACNTUNIT.form.CDTextBox.value);	//발행부서
        		this.dsList.setColumn(nRow, "TY_CLOSING", this.ccboTY_SLIP.value);		//전표구분
        		this.dsList.setColumn(nRow, "YN_VAT"  	, "N");							//부가세여부
        		this.dsList.setColumn(nRow, "DS_REM"  	, "");							// 적요

        		this.dsList.setColumn(nRow, this.ucFlag, "I");

        		//수정일 경우 전표번호 채번
        		if(this.V_IUD_FLAG == "U"){
        			var cdSlip = this.fnSetCdSlip(this.txtCD_TRADE.value);
        			this.dsList.setColumn(nRow, "CD_SLIP"   , cdSlip);
        			this.dsList.setColumn(nRow, "FILE_DIR"  , cdSlip);
        		}

        		//항번 셋팅
        		this.fnNoViewSetting();
        	}

        	this.dsList.set_enableevent(true);

        	if(this.V_IUD_FLAG == "U"){
        		this.FormBtns.Select.set_enable(true);
        	}else{
        		this.FormBtns.Select.set_enable(false);
        	}

        	//하단 관리항목 로우 추가
        	if(this.dsListSub.rowcount == 0){
        		this.gfnGridAdd(this.dxGridSub, null, false);
        	}

        	this.gfnSetFormStatus(this, "I");

        	this.gfnSetEnable(this.btnDFPopup, false);
        };

        // 예산조회
        this.divData_divDataBottom_tabData_tab2_btnBudget_onclick = function(obj,e)
        {
        	if (!this.fnSelectBudgetValidate()) return false;

        	this.selectBudget();

        };

        this.divData_divDataBottom_tabData_canchange = function(obj,e)
        {
        	var ynBudget = this.dsList.getColumn(this.dsList.rowposition, "YN_BUDGET");
        	var ynBudgetCtrlAcnt = this.dsList.getColumn(this.dsList.rowposition, "YN_BUDGET_CTRL_ACNT");
        	var TY_SLIP = this.ccboTY_SLIP.value;	// A09 전표유형 - 02	결산전표
        	// && TY_SLIP != "02"
        	var bBudgetTab = (this.gfnNvl(ynBudget,"N") == "Y" && this.gfnNvl(ynBudgetCtrlAcnt,"N") == "Y" ) ? true : false;
        	//trace("tabData_canchange ->"+ e.postindex + " \n  ynBudget->" + this.gfnNvl(ynBudget,"N") + " ynBudgetCtrlAcnt->" + this.gfnNvl(ynBudgetCtrlAcnt,"N"));
        	//if(e.preindex == 0 && e.postindex == 1 && (this.gfnNvl(ynBudget,"N") == "N" || this.gfnNvl(ynBudgetCtrlAcnt,"N") == "N")){
        	if(e.preindex == 0 && e.postindex == 1 && bBudgetTab == false){
         		return false;
         	}
        	return true;
        };

        this.divData_divDataBottom_tabData_onchanged = function(obj,e)
        {
        	var nRow = this.dsList.rowposition;
        	var ynBudget = this.dsList.getColumn(nRow, "YN_BUDGET");
        	var ynBudgetCtrlAcnt = this.dsList.getColumn(nRow, "YN_BUDGET_CTRL_ACNT");
        	var TY_SLIP = this.ccboTY_SLIP.value;	// A09 전표유형 - 02	결산전표
        	// && TY_SLIP != "02"
        	var bBudgetTab = (this.gfnNvl(ynBudget,"N") == "Y" && this.gfnNvl(ynBudgetCtrlAcnt,"N") == "Y" ) ? true : false;
        	//if(e.preindex == 0 && e.postindex == 1 && (this.gfnNvl(ynBudget,"N") == "Y" || this.gfnNvl(ynBudgetCtrlAcnt,"N") == "Y")){
        	if(e.preindex == 0 && e.postindex == 1 && bBudgetTab == true){
        		if (!this.gfnIsNull(this.dsList.getColumn(nRow, "CD_DEPTOFFICER"))
        		 && !this.gfnIsNull(this.dsList.getColumn(nRow, "CD_BIMOK"))
        		 && !this.gfnIsNull(this.dsList.getColumn(nRow, "CD_SEMOK"))){
        			this.selectBudget();
        		}
        	}
        };

        this.divSearch_ccboTY_SLIP_onitemchanged = function(obj,e)
        {
        	if(e.preindex == e.postindex) return;

        	this.dsList.set_enableevent(false);
        	for(var i = 0;i<this.dsList.rowcount;i++){
        		this.dsList.setColumn(i, "TY_CLOSING" , e.postvalue);
        	}
        	this.dsList.set_enableevent(true);
        };

        // 로컬환율 조회
        this.fnSelectCurrExchange = function(nRow, svcId){
        	var DT_ACCOUNT = this.dsList.getColumn(nRow, "DT_ACCOUNT");
        	var CD_LOCAL_CURR = this.dsList.getColumn(nRow, "CD_LOCAL_CURR");
        	var CD_EXEC_CURR = this.dsList.getColumn(nRow, "CD_EXEC_CURR");

        	if( this.gfnIsNull(DT_ACCOUNT) || this.gfnIsNull(CD_LOCAL_CURR) || this.gfnIsNull(CD_EXEC_CURR)){
        		return;
        	}
        	// trace("fnSelectCurrExchange DT_ACCOUNT=>" + DT_ACCOUNT);
        	this.dsSelectCurrExchange.clearData();
        	this.dsSelectCurrExchange.addRow();

        	this.dsSelectCurrExchange.setColumn(0, "TY_GUBUN", "1");
        	this.dsSelectCurrExchange.setColumn(0, "CN_ROW", 0);
        	this.dsSelectCurrExchange.setColumn(0, "VALUE", "");
        	this.dsSelectCurrExchange.setColumn(0, "MIN_VALUE", "");
        	this.dsSelectCurrExchange.setColumn(0, "DT_BASE", this.dsList.getColumn(nRow, "DT_ACCOUNT"));
        	this.dsSelectCurrExchange.setColumn(0, "CD_LOCAL_CURR", this.dsList.getColumn(nRow, "CD_LOCAL_CURR"));
        	this.dsSelectCurrExchange.setColumn(0, "CD_EXEC_CURR", this.dsList.getColumn(nRow, "CD_EXEC_CURR"));

        	//var strSvcId    = "selectCurrExchange";
        	var strSvcId	 = this.gfnIsNull(svcId) ? "selectCurrExchange" : "selectCurrExchangeAll";
        	var strSvcType  = "select";
        	var inProc		= "_dsProc";
        	var inData      = "selectCurrExchange=dsSelectCurrExchange";
        	var outData     = "dsCurrExchange=selectCurrExchange0";
        	//var strArg      = "";
        	var strArg      = "crow=" + nRow;
        	var callBackFnc = "fnCallback";

        	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
        						strSvcType , 	// transaction을 요청할 구분
        						inProc,			// Procedure 정보 Dataset 이름
        						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
        						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
        						callBackFnc); 	// 통신방법 정의 [생략가능]
        };

        // 로컬화, 원화(AM_DR, AM_CR) 계산
        this.fnSetAmAccouont = function(nRow){
        	var nRow = this.gfnNvl(nRow, this.dsList.rowposition);

        	var tyCrdr = this.dsList.getColumn(nRow, "TY_CRDR");
        	//var tyCrdr = this.dsList.getColumn(this.dsList.rowposition, "TY_CRDR");
        	var sCrDrCol = (tyCrdr == "D" ? "_DR" : "_CR");

        	var sCdLocalCurr = this.dsList.getColumn(nRow, "CD_LOCAL_CURR");	// 로컬통화단위
        	var sCdExecCurr = this.dsList.getColumn(nRow, "CD_EXEC_CURR");		// 집행통화단위

        	var nAmExec = nexacro.toNumber(this.dsList.getColumn(nRow, "AM_EXEC" + sCrDrCol),0);	// 집행화
        // 	trace("공급가kdy2:" + nAmExec);
        // 	trace(" sCrDrCol=>" + sCrDrCol );
        //     trace(" TY_CRDR =>" + this.dsList.getColumn(nRow, "TY_CRDR"));

        	var rtLocalExch = nexacro.toNumber(this.dsList.getColumn(nRow, "RT_LOCAL_EXCH"));	// 로컬환율
        	var rtKrwExch = nexacro.toNumber(this.dsList.getColumn(nRow, "RT_KRW_EXCH"));		// 원화환율
        	var rtUsdExch = nexacro.toNumber(this.dsList.getColumn(nRow, "RT_USD_EXCH"));		// 미화환율
        	var rtEurExch = nexacro.toNumber(this.dsList.getColumn(nRow, "RT_EUR_EXCH"));		// 유로화환율

        	var nAmLocal = 0;
        	var nAmAccount = 0;
        	var nAmUsd = 0;
        	var nAmEur = 0;

        	trace(tyCrdr + " : fnSetAmAccouont " + "로컬화, 원화 계산 시작!!!! : " + nAmExec);

        	// 로컬화, 원화 계산
        	if(!this.gfnIsNull(sCdExecCurr) && !this.gfnIsNull(nAmExec)){

        		//var bKrw = (sCdLocalCurr == "KRW" && sCdExecCurr == "KRW") ? true : false;
        		var bKrw = (sCdExecCurr == "KRW") ? true : false;

        		// ① 로컬화 : 집행화 * 로컬환율
        		trace("① 로컬화 : " + "집행화(" +nAmExec+ ") * " + "로컬환율(" +rtLocalExch+ ")" );
        		//nAmLocal = nAmExec * rtLocalExch;
        		nAmLocal = (bKrw == false) ? nAmExec * rtLocalExch : nAmExec / rtLocalExch ;

        		// ② 원화 : 집행화 * 원화환율
        		trace("② 원화 : " + "집행화(" +nAmExec+ ") * " + "원화환율(" +rtKrwExch+ ")" );
        		//nAmAccount = nAmExec * rtKrwExch;
        		nAmAccount = (bKrw == false) ? nAmExec * rtKrwExch : nAmExec / rtKrwExch;

        		// ③ 미화 : 집행화 * 미화환율
        		trace("③ 미화 : " + "집행화(" +nAmExec+ ") * " + "미화환율(" +rtUsdExch+ ")" );
        		//nAmUsd = nAmExec * rtUsdExch;
        		nAmUsd = (bKrw == false) ? nAmExec * rtUsdExch : nAmExec / rtUsdExch;

        		// ④ 유로화 : 집행화 * 유로화환율
        		trace("④ 유로화 : " + "집행화(" +nAmExec+ ") * " + "유로화환율(" +rtEurExch+ ")" );
        		//nAmEur = nAmExec * rtEurExch;
        		nAmEur = (bKrw == false) ? nAmExec * rtEurExch : nAmExec / rtEurExch;
        	}

        	/*
        		CD_EXEC_CURR	통화
        		RT_LOCAL_EXCH	로컬환율
        		RT_KRW_EXCH		원화환율(코드파인더)

        		AM_EXEC_DR		차변_집행화(입력)
        		AM_LOCAL_DR		차변_로컬화(계산)
        		AM_DR			차변_원화(계산)
        	*/
        	//nexacro.round(, 0) 소수점 첫째자리
        	this.dsList.set_enableevent(false);

        	this.dsList.setColumn(nRow, "AM_LOCAL"+ sCrDrCol, nAmLocal);				// 로컬화
        	this.dsList.setColumn(nRow, "AM_USD"+ sCrDrCol, nAmUsd);					// 미화
        	this.dsList.setColumn(nRow, "AM_EUR"+ sCrDrCol, nAmEur);					// 유로화
        	this.dsList.setColumn(nRow, "AM"+ sCrDrCol, this.fnGetTrunc(nAmAccount,1));	// 원화(소수점절삭)
        	//this.dsList.setColumn(nRow, "AM"+ sCrDrCol, nexacro.floor(nAmAccount));	// 원화(소수점절삭)
        // 	trace(" nAmUsd =>" + nAmUsd );
        // 	trace(" AM_USD =>" +this.dsList.getColumn(nRow, "AM_USD"+ sCrDrCol ));

        	if (this.dsList.getColumn(nRow, "CD_PROOF") != "13") {
        		trace("공급가액 nAmAccount=>" + this.fnGetTrunc(nAmAccount,1));
        		this.dsList.setColumn(nRow, "AM_SUPPLY", this.fnGetTrunc(nAmAccount,1));		// 공급가액
        		//this.dsList.setColumn(nRow, "AM_SUPPLY", nexacro.floor(nAmAccount));		    // 부가세
        	}

        	this.dsList.set_enableevent(true);

        	//하단 금액 계산
        	this.fnCalcSlip();
        }

        // 통화, 로컬환율, 원화환율, 집행화, 로컬화, 원화 금액 초기화
        this.fnSetInitAmAcntCurr = function(nRow){
        	trace("통화, 로컬환율, 원화환율, 집행화, 로컬화, 원화 금액 초기화");

        	var nRow = this.gfnNvl(nRow, this.dsList.rowposition);

        	this.dsList.setColumn(nRow, "CD_EXEC_CURR"  , "");
        	this.dsList.setColumn(nRow, "RT_LOCAL_EXCH"  , 0);
        	this.dsList.setColumn(nRow, "RT_KRW_EXCH"  , 0);
        	this.dsList.setColumn(nRow, "RT_USD_EXCH"  , 0);
        	this.dsList.setColumn(nRow, "RT_EUR_EXCH"  , 0);

        	// 전자세금계산서번호
        	var sIssueId = this.dsList.getColumn(nRow, "ISSUE_ID");
        	if(this.gfnIsNull(sIssueId)){
        		this.dsList.setColumn(nRow, "AM_EXEC_DR"  , 0);
        		this.dsList.setColumn(nRow, "AM_EXEC_CR"  , 0);
        	}

        	this.dsList.setColumn(nRow, "AM_LOCAL_DR"  , 0);
        	this.dsList.setColumn(nRow, "AM_LOCAL_CR"  , 0);

        	this.dsList.setColumn(nRow, "AM_USD_DR"  , 0);
        	this.dsList.setColumn(nRow, "AM_USD_CR"  , 0);

        	this.dsList.setColumn(nRow, "AM_EUR_DR"  , 0);
        	this.dsList.setColumn(nRow, "AM_EUR_CR"  , 0);

        	this.dsList.setColumn(nRow, "AM_DR"  , 0);
        	this.dsList.setColumn(nRow, "AM_CR"  , 0);

        	this.dsList.setColumn(nRow, "AM_SUPPLY"  , 0);
        }

        this.fnSetColSize = function(bView){
        	var colIdxLcDr = this.dxGrid.getBindCellIndex("body","AM_LOCAL_DR");	// 로컬화
        	var colIdxLcCr = this.dxGrid.getBindCellIndex("body","AM_LOCAL_CR");
        	var colIdxDr = this.dxGrid.getBindCellIndex("body","AM_DR");			// 원화
        	var colIdxCr = this.dxGrid.getBindCellIndex("body","AM_CR");
        	var colIdxUsdDr = this.dxGrid.getBindCellIndex("body","AM_USD_DR");		// 미화
        	var colIdxUsdCr = this.dxGrid.getBindCellIndex("body","AM_USD_CR");
        	var colIdxEurDr = this.dxGrid.getBindCellIndex("body","AM_EUR_DR");		// 유로화
        	var colIdxEurCr = this.dxGrid.getBindCellIndex("body","AM_EUR_CR");

        	var colIdxLcExch = this.dxGrid.getBindCellIndex("body","RT_LOCAL_EXCH");	// 로컬환율
        	var colIdxKrwExch = this.dxGrid.getBindCellIndex("body","RT_KRW_EXCH");		// 원화환율
        	var colIdxUsdExch = this.dxGrid.getBindCellIndex("body","RT_USD_EXCH");		// 미화환율
        	var colIdxEurExch = this.dxGrid.getBindCellIndex("body","RT_EUR_EXCH");		// 유로환율


        	if(bView){
        		this.dxGrid.setFormatColProperty(colIdxLcDr, "size", this.gCOLSIZE_AM_LOCAL_DR);
        		this.dxGrid.setFormatColProperty(colIdxLcCr ,"size", this.gCOLSIZE_AM_LOCAL_CR);
        		this.dxGrid.setFormatColProperty(colIdxDr ,"size", this.gCOLSIZE_AM_DR);
        		this.dxGrid.setFormatColProperty(colIdxCr ,"size", this.gCOLSIZE_AM_CR);
        		this.dxGrid.setFormatColProperty(colIdxUsdDr ,"size", this.gCOLSIZE_AM_USD_DR);
        		this.dxGrid.setFormatColProperty(colIdxUsdCr ,"size", this.gCOLSIZE_AM_USD_CR);
        		this.dxGrid.setFormatColProperty(colIdxEurDr ,"size", this.gCOLSIZE_AM_EUR_DR);
        		this.dxGrid.setFormatColProperty(colIdxEurCr ,"size", this.gCOLSIZE_AM_EUR_CR);

        		this.dxGrid.setFormatColProperty(colIdxLcExch ,"size", this.gCOLSIZE_RT_LOCAL_EXCH);
        		this.dxGrid.setFormatColProperty(colIdxKrwExch ,"size", this.gCOLSIZE_RT_KRW_EXCH);
        		this.dxGrid.setFormatColProperty(colIdxUsdExch ,"size", this.gCOLSIZE_RT_USD_EXCH);
        		this.dxGrid.setFormatColProperty(colIdxEurExch ,"size", this.gCOLSIZE_RT_EUR_EXCH);

        	}else{
        		this.dxGrid.setFormatColProperty(colIdxLcDr, "size", 0);
        		this.dxGrid.setFormatColProperty(colIdxLcCr ,"size", 0);
        		this.dxGrid.setFormatColProperty(colIdxDr ,"size", 0);
        		this.dxGrid.setFormatColProperty(colIdxCr ,"size", 0);
        		this.dxGrid.setFormatColProperty(colIdxUsdDr ,"size", 0);
        		this.dxGrid.setFormatColProperty(colIdxUsdCr ,"size", 0);
        		this.dxGrid.setFormatColProperty(colIdxEurDr ,"size", 0);
        		this.dxGrid.setFormatColProperty(colIdxEurCr ,"size", 0);

        		this.dxGrid.setFormatColProperty(colIdxLcExch ,"size", 0);
        		this.dxGrid.setFormatColProperty(colIdxKrwExch ,"size", 0);
        		this.dxGrid.setFormatColProperty(colIdxUsdExch ,"size", 0);
        		this.dxGrid.setFormatColProperty(colIdxEurExch ,"size", 0);

        	}
        }

        this.divSearch_chkYN_COLVIEW_onchanged = function(obj,e)
        {
        	this.fnSetColSize(!e.postvalue);
        };

        this.fnDelVatInfo = function(){
        	trace("화폐단위 변경시 증빙삭제_부가세 삭제 시작");
        	this.dsReturn.clearData();

        	var rowPos = this.dsList.rowposition;
        	var tySaleBuy = this.dsList.getColumn(rowPos, "TY_SALEBUY");	// 거래구분
        	var fAcnt = this.dsList.findRowExpr("currow == "+(rowPos+1)+" && CD_ACCOUNT == "+(tySaleBuy == "I" ? this.gCD_VATACCOUNT : this.gCD_ACNT_VAT_SALE)+"'");

        	var amSupply = nexacro.toNumber(this.dsReturn.getColumn(0, "AM_SUPPLY"), 0);	//공급가
        	var amVat = nexacro.toNumber(this.dsReturn.getColumn(0, "AM_VAT"), 0);			//부가세
        	var tyCrdr = this.dsList.getColumn(rowPos, "TY_CRDR");	//차대구분
        	var issueId = this.dsList.getColumn(rowPos, "ISSUE_ID");
        	var amCrDr = nexacro.toNumber(this.dsList.getColumn(rowPos, (tyCrdr == "D" ? "AM_DR" : "AM_CR")), 0);

        	this.dsList.set_enableevent(false);
        	this.dsList.setColumn(rowPos, "YN_VAT" 		, "N");	// 부가세여부

        	// 부가세 증빙 : 13 - 세금계산서(불공제)
        	if( this.dsReturn.getColumn(0, "CD_PROOF") == "13" && !this.gfnIsNull(issueId) ){
        		var tyCrdr = this.dsList.getColumn(rowPos, "TY_CRDR");	//차대구분
        		this.dsList.setColumn(rowPos, (tyCrdr == "D" ? "AM_EXEC_DR" : "AM_EXEC_CR") , amSupply);
        		trace(rowPos + " / 부가세 증빙 == 13 세금계산서(불공제) 삭제 " + tyCrdr);
        	}

        	this.dsList.set_enableevent(true);

        	if(this.gfnGetFlag(this.dsList, rowPos) == "I") {
        		this.dsList.deleteRow((rowPos+1));
        		this.dsList.setColumn(rowPos, "CD_VATDEPT_ACNT"	, "");		// 부가세 귀속부서
        		this.dsList.setColumn(rowPos, "CD_VATACCOUNT"	, "");		// 부가세계정
        		this.dsList.setColumn(rowPos, "CD_VATVENDOR"	, "");		// 부가세 거래처코드
        		this.dsList.setColumn(rowPos, "DS_VATVENDOR"	, "");		// 부가세 거래처명
        		this.dsList.setColumn(rowPos, "TY_VATVENDOR"	, "");		// 부가세 거래처구분
        		this.dsList.setColumn(rowPos, "CD_PROOF"		, "");		// 증빙코드
        		this.dsList.setColumn(rowPos, "TY_VATBGJE"		, "");		// 불공제사유
        		this.dsList.setColumn(rowPos, "NO_CREDIT"		, "");		// 신용카드번호
        		this.dsList.setColumn(rowPos, "FLAG_V"			, "");

        	} else {
        		if(fAcnt > -1) {
        			this.dsList.setColumn(fAcnt, this.ucFlag, "D");
        		}
        		this.dsList.setColumn(rowPos, "FLAG_V", "D");
        	}

        	var sTooltip = this.dsReturn.getColumn(0, "TY_ISSUE") + " / " + this.dsReturn.getColumn(0, "DS_PROOF");
        	this.dsList.setColumn(rowPos, "DS_TOOLTIP", "");
        }

        // 원단위 절사
        this.fnGetTrunc = function(amVal, vCnt){
        	var returnVal = this.gfnNvl(amVal, 0);
        	if(returnVal > 0){
        		returnVal = Math.floor(amVal/vCnt) * vCnt;
        	}else{
        		returnVal = Math.ceil(amVal/vCnt) * vCnt;
        	}
        	return returnVal;
        }
        });
        
        // Regist UI Components Event
        this.on_initEvent = function()
        {
            this.addEventHandler("onload",this.form_onload,this);
            this.divSearch.form.ccboTY_SLIP.addEventHandler("onitemchanged",this.divSearch_ccboTY_SLIP_onitemchanged,this);
            this.divSearch.form.txtDT_UPDATE.addEventHandler("onkeydown",this.divSearch_txtSEARCH_onkeydown,this);
            this.divSearch.form.txtCD_TRADE.addEventHandler("onkeydown",this.divSearch_txtSEARCH_onkeydown,this);
            this.divSearch.form.chkYN_COLVIEW.addEventHandler("onchanged",this.divSearch_chkYN_COLVIEW_onchanged,this);
            this.divData.addEventHandler("ondragmove",this.divData_ondragmove,this);
            this.divData.form.divSplitter.addEventHandler("ondrag",this.divData_divSplitter_ondrag,this);
            this.divData.form.divDataTop.form.btnAddRow.addEventHandler("onclick",this.divData_divDataTop_btnAddRow_onclick,this);
            this.divData.form.divDataBottom.form.tabData.addEventHandler("canchange",this.divData_divDataBottom_tabData_canchange,this);
            this.divData.form.divDataBottom.form.tabData.addEventHandler("onchanged",this.divData_divDataBottom_tabData_onchanged,this);
            this.divData.form.divDataBottom.form.tabData.tab2.form.btnBudget.addEventHandler("onclick",this.divData_divDataBottom_tabData_tab2_btnBudget_onclick,this);
            this.divData.form.divDataBottom.form.tabData.tab2.form.divBudget.form.sta05.addEventHandler("onclick",this.divData_divDataBottom_tabData_tab2_divBudget_sta05_onclick,this);
        };
        this.loadIncludeScript("DHA_ISSUESLIP.xfdl");
        this.loadPreloadList();
        
        // Remove Reference
        obj = null;
    };
}
)();
