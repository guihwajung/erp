<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="인력계획" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0" top="0" height="46.0" right="0" cssclass="div_SEARCH_Bg" formscrolltype="none">
          <Layouts>
            <Layout>
              <Static id="staCD_CORP" taborder="5" text="법인" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfCD_CORP" CodeFindName="DAX_CFCORP_CODEFIND" CDTextWidth="30" taborder="1" left="staCD_CORP:0.0" top="10.0" width="180" height="24.0" url="cmm::cmmCodeFind.xfdl" text=""/>
              <Static id="staYY_BASE" taborder="0" text="년도" left="ccfCD_CORP:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ctclYY_BASE" taborder="2" left="staYY_BASE:0.0" top="10.0" width="60" height="24.0" url="cmm::cmmCalYY.xfdl"/>
              <Static id="staMM_BASE" taborder="7" text="월" left="ctclYY_BASE:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Combo id="cboMM_BASE" taborder="3" left="staMM_BASE:0.0" top="10.0" width="80" height="24.0" innerdataset="dsMM_BASE" datacolumn="DS_CODE" codecolumn="CD_CODE" index="1" value="" onvaluechanged="dsSearch_onvaluechanged"/>
              <Static id="staCD_DEPT" taborder="6" text="부서코드" left="cboMM_BASE:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Div id="ccfCD_DEPT" CodeFindName="DAX_CFDEPT" CDTextWidth="80" taborder="4" left="staCD_DEPT:0.0" top="10.0" width="250" height="24.0" url="cmm::cmmCodeFind.xfdl" text=""/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	var toDay = this.gfnGetDate().substr(0,4);
	this.dsSearch.setColumn(0, "CD_CORP", this.AuthClient.CD_CORP);	
	this.dsSearch.setColumn(0, "YY_BASE", toDay);	
	this.dsSearch.setColumn(0, "MM_BASE", "%");
	this.divSearch.form.ccfCD_CORP.form.DSTextBox.set_value(this.AuthClient.DS_CORP);
};

/************************************************************************
* 버튼 설정 : 화면(Tab) 전환시 마다 호출
* 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
************************************************************************/
this.fnSetButton = function() {
}

/************************************************************************
* 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
************************************************************************/
this.fnSetExtendButton = function() {
	this.btnExcelUpload = this.gfnFormButtonAdd("btnExcelUpload", "fnExcelUpload"); 	//엑셀업로드
};

/************************************************************************
* 변수 선언
************************************************************************/
this.fnSetVariable = function() {	
	this.ccfCD_CORP = this.divSearch.form.ccfCD_CORP;
	this.ctclYY_BASE = this.divSearch.form.ctclYY_BASE	
	this.cboMM_BASE = this.divSearch.form.cboMM_BASE;
	this.ccfCD_DEPT = this.divSearch.form.ccfCD_DEPT;
	this.dxGrid = this.divData.form.objGrid;
};

/************************************************************************
* 이벤트 설정
************************************************************************/
this.fnSetEvent = function() {
	// 그리드 초기화
	this.gfnGridInit(this.dxGrid, this.dsList, "DA", "DAA_EISPLAN");
	
	this.ccfCD_CORP.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.ccfCD_CORP.AfterCDTextChanged = "fnAfterCDTextChanged";	
	this.ccfCD_DEPT.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.ccfCD_DEPT.AfterCDTextChanged = "fnAfterCDTextChanged";	
	
	this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforeUserDataSetParam";
	//this.dxGrid.AfterCDTextChanged = "fnGrid_AfterCDTextChanged";
};

/************************************************************************
* 파라미터 설정
************************************************************************/
this.fnSetParameter = function() {
	
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_CORP", "string");
	this.dsSelect.addColumn("YY_BASE", "string");
	this.dsSelect.addColumn("MM_BASE", "string");
	this.dsSelect.addColumn("CD_DEPT", "string");
	this.dsSelect.addColumn("GR_SEARCH", "string");
	this.dsSelect.addColumn("TY_AUTH", "string");
	this.dsSelect.addColumn("GR_DEPT", "string");
	this.dsSelect.addColumn("ID_USER", "string");
	
	this.dsSave = new Dataset();
	this.dsSave.addColumn("TY_SAVE", "string");
	this.dsSave.addColumn("NO_SEQ", "int");
	this.dsSave.addColumn("YM_BASE", "string");
	this.dsSave.addColumn("CD_CORP", "string");
	this.dsSave.addColumn("CD_DEPT", "string");
	this.dsSave.addColumn("NO_OFFICER", "int");
	this.dsSave.addColumn("NO_REGULAR", "int");
	this.dsSave.addColumn("NO_CONTRACT", "int");
	this.dsSave.addColumn("DS_REMARK", "string");
	this.dsSave.addColumn("GR_SEARCH", "string");
	this.dsSave.addColumn("TY_AUTH", "string");
	this.dsSave.addColumn("GR_DEPT", "string");
	this.dsSave.addColumn("ID_USER", "string");
}

/************************************************************************
* 컨트롤 이벤트
************************************************************************/
/*
*	조회 버튼
*/
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);
	this.dsSelect.clearData();
	this.dsSelect.addRow();	
	this.dsSelect.setColumn(0, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
	this.dsSelect.setColumn(0, "YY_BASE", this.dsSearch.getColumn(0, "YY_BASE"));
	this.dsSelect.setColumn(0, "MM_BASE", this.dsSearch.getColumn(0, "MM_BASE"));
	this.dsSelect.setColumn(0, "CD_DEPT", this.dsSearch.getColumn(0, "CD_DEPT"));	
	this.dsSelect.setColumn(0, "GR_SEARCH", this.FormInfo.GR_SEARCH);
	this.dsSelect.setColumn(0, "TY_AUTH", this.FormInfo.TY_AUTH);
	this.dsSelect.setColumn(0, "GR_DEPT", this.AuthClient.CD_DEPT);
	this.dsSelect.setColumn(0, "ID_USER", this.AuthClient.ID_USER);
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
		strSvcType , 	// transaction을 요청할 구분
		inProc,			// Procedure 정보 Dataset 이름
		inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
		outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
		strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
		callBackFnc); // 통신방법 정의 [생략가능]
}

/*
*	입력 버튼
*/
this.fnAdd = function() {
	var nrow = this.gfnGridAdd(this.dxGrid);
	this.dsList.setColumn(nrow, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
}

/*
*	삭제 버튼
*/
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}

/*
*	저장 버튼
*/
this.fnSave = function() {
	// 그리드 필수항목 체크
	if (!this.gfnGridValidate(this.dxGrid)) return;
	this.dxGrid.updateToDataset();
	this.dsSave.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
		case "I":
		case "U":
		case "D":
			var nrow = this.dsSave.addRow();				
			this.dsSave.setColumn(nrow, "TY_SAVE", flag);
			this.dsSave.setColumn(nrow, "NO_SEQ", this.dsList.getColumn(i, "NO_SEQ"));
			this.dsSave.setColumn(nrow, "YM_BASE", this.dsList.getColumn(i, "YM_BASE").replace("-",""));
			this.dsSave.setColumn(nrow, "CD_CORP", this.dsList.getColumn(i, "CD_CORP"));
			this.dsSave.setColumn(nrow, "CD_DEPT", this.dsList.getColumn(i, "CD_DEPT"));
			this.dsSave.setColumn(nrow, "NO_OFFICER", this.dsList.getColumn(i, "NO_OFFICER"));
			this.dsSave.setColumn(nrow, "NO_REGULAR", this.dsList.getColumn(i, "NO_REGULAR"));
			this.dsSave.setColumn(nrow, "NO_CONTRACT", this.dsList.getColumn(i, "NO_CONTRACT"));
			this.dsSave.setColumn(nrow, "DS_REMARK", this.dsList.getColumn(i, "DS_REMARK"));
			this.dsSave.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
			this.dsSave.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
			this.dsSave.setColumn(nrow, "TY_AUTH", this.FormInfo.TY_AUTH);
			this.dsSave.setColumn(nrow, "GR_CORP", this.AuthClient.CD_CORP);
			break;
		}
	}
	if (this.dsSave.rowcount == 0) return;
	
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "save=dsSave";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
		strSvcType , 	// transaction을 요청할 구분
		inProc,			// Procedure 정보 Dataset 이름
		inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
		outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
		strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
		callBackFnc); // 통신방법 정의 [생략가능]
}

/*
*	엑셀 버튼
*/
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
*	출력 버튼
*/
this.fnPrint = function() {
}


/************************************************************************
* Validate
************************************************************************/
/*
*	조회 Validate
*/
this.fnSelectValidate = function() {
	var validate = true;
	if (this.gfnIsNull(this.dsSearch.getColumn(0,"CD_CORP"))) {
		validate = false;
		// Alert후 실행할 처리
		this.fnVaidateCallback = function() {
			this.ccfCD_CORP.form.CDTextBox.setFocus();
		}
		this.gfnAlert("법인을 입력하세요.", "fnVaidateCallback");
	}	
	else if (this.gfnIsNull(this.dsSearch.getColumn(0,"YY_BASE"))) {
		validate = false;
		// Alert후 실행할 처리
		this.fnVaidateCallback = function() {
			this.ctclYY_BASE.form.TextBox.setFocus();
		}
		this.gfnAlert("년도를 입력하세요.", "fnVaidateCallback");
	}
	else if (this.gfnIsNull(this.dsSearch.getColumn(0,"MM_BASE"))) {
		validate = false;
		// Alert후 실행할 처리
		this.fnVaidateCallback = function() {
			this.cboMM_BASE.setFocus();
		}
		this.gfnAlert("월을 입력하세요.", "fnVaidateCallback");
	}
	return validate;
};

/************************************************************************
* 콜백 이벤트
************************************************************************/
/*
*	콜백 처리
*/
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);	
	}
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
}

/************************************************************************
* 코드파인드 이벤트
************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	if(id == "ccfCD_CORP") { 
		dsUserParam.setColumn(nrow, "CD_CORP", this.AuthClient.CD_CORP);
		dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
		dsUserParam.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
	}else if(id == "ccfCD_DEPT") { 
		if(this.gfnIsNull(this.dsSearch.getColumn(0, "CD_CORP"))){
			this.gfnAlert("법인을 먼저 선택하세요.");
			return false;
		}
		dsUserParam.setColumn(nrow, "YN_CURRENT", "N");
		dsUserParam.setColumn(nrow, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
		dsUserParam.setColumn(nrow, "CD_DEPT", this.AuthClient.CD_DEPT);
		dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
	}
	return true;
};

this.fnAfterCDTextChanged = function(id, codeFindData) {
	// 코드,명칭 외 추가 컬럼 처리
	var arr = codeFindData; //this.ccfCD_DEPT_ORG.form.SelectedData; 둘다 사용가능
	if(id == "ccfCD_CORP") { 
		this.ccfID_SABUN.form.fnCodeFindClear();
	}
}

/************************************************************************
* 그리드 이벤트
************************************************************************/
this.fnGrid_BeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	// 법인
	if(id == "DAX_CFCORP_CODEFIND") {
		dsUserParam.setColumn(nrow, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
		dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
		dsUserParam.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
	}
	// 부서코드
	if(id == "DAX_CFDEPT") {
		dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
		dsUserParam.setColumn(nrow, "CD_DEPT", this.AuthClient.CD_DEPT);
		dsUserParam.setColumn(nrow, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
		dsUserParam.setColumn(nrow, "YN_CURRENT", "N");
	}
	return true;
};

/************************************************************************
* 기타 이벤트
************************************************************************/
this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
	}
};


this.fnExcelUpload = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	this.gfnExcelImport("dsList","Sheet1","A3","fnExcelImportCallback","import",this);
};

this.fnExcelImportCallback = function(sImportId, dsOut, dsSheet) {
// 엑셀 양식과 그리드 컬럼이 그대로 일치 하는경우 아래와 같이 처리.
	// 아닌경우는 이부분 주석처리
	for (var i=0; i< this.dsList.getColCount(); i++)
	{
		sColumnId = "Column"+i;
		var sColumnNm = this.gfnGridGetBindColumnNameByIndex(this.dxGrid, i);
		if (sColumnNm != "" && sColumnId != sColumnNm)
		{
			dsOut.updateColID(sColumnId, sColumnNm);
		}
	}
	// 양식이 일치하고 엑셀내역을 기존데이터에 Insert하지 않고
	// 엑셀내역 그대로 그리드 반영할 시 copyData
	//this.dsList.copyData(dsOut);

	this.dsList.set_enableevent(false);
	for (var i=0; i<dsOut.rowcount; i++) {
		var nrow = this.dsList.addRow();
		this.dsList.setColumn(nrow, this.ucFlag, "I");

		// 양식이 일치하는 경우 copyRow
		this.dsList.copyRow(nrow, dsOut, i);

		// 양식과 일치하지 않는 경우 아래와 같이 컬럼별로 처리.
		//this.dsList.setColumn(nrow, "DT_REG", dsOut.getColumn(i, "DT_REG").replace(/-/g, ''));
	}
	this.dsList.set_enableevent(true);

	this.gfnSetFormStatus(this, "I");

};
]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DAAPR_EISPLAN_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">save</Col>
            <Col id="SP">DAAPR_EISPLAN_SAVE</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsMM_BASE">
        <ColumnInfo>
          <Column id="CD_CODE" type="STRING" size="256"/>
          <Column id="DS_CODE" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CD_CODE">%</Col>
            <Col id="DS_CODE">전체</Col>
          </Row>
          <Row>
            <Col id="CD_CODE">01</Col>
            <Col id="DS_CODE">1월</Col>
          </Row>
          <Row>
            <Col id="CD_CODE">02</Col>
            <Col id="DS_CODE">2월</Col>
          </Row>
          <Row>
            <Col id="CD_CODE">03</Col>
            <Col id="DS_CODE">3월</Col>
          </Row>
          <Row>
            <Col id="CD_CODE">04</Col>
            <Col id="DS_CODE">4월</Col>
          </Row>
          <Row>
            <Col id="CD_CODE">05</Col>
            <Col id="DS_CODE">5월</Col>
          </Row>
          <Row>
            <Col id="CD_CODE">06</Col>
            <Col id="DS_CODE">6월</Col>
          </Row>
          <Row>
            <Col id="CD_CODE">07</Col>
            <Col id="DS_CODE">7월</Col>
          </Row>
          <Row>
            <Col id="CD_CODE">08</Col>
            <Col id="DS_CODE">8월</Col>
          </Row>
          <Row>
            <Col id="CD_CODE">09</Col>
            <Col id="DS_CODE">9월</Col>
          </Row>
          <Row>
            <Col id="CD_CODE">10</Col>
            <Col id="DS_CODE">10월</Col>
          </Row>
          <Row>
            <Col id="CD_CODE">11</Col>
            <Col id="DS_CODE">11월</Col>
          </Row>
          <Row>
            <Col id="CD_CODE">12</Col>
            <Col id="DS_CODE">12월</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_CORP" type="STRING" size="256"/>
          <Column id="YY_BASE" type="STRING" size="256"/>
          <Column id="MM_BASE" type="STRING" size="256"/>
          <Column id="CD_DEPT" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CD_CORP"/>
            <Col id="YY_BASE"/>
            <Col id="MM_BASE"/>
            <Col id="CD_DEPT"/>
          </Row>
        </Rows>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfCD_CORP.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_CORP"/>
      <BindItem id="item1" compid="divSearch.form.ctclYY_BASE.form.TextBox" propid="value" datasetid="dsSearch" columnid="YY_BASE"/>
      <BindItem id="item2" compid="divSearch.form.cboMM_BASE" propid="value" datasetid="dsSearch" columnid="MM_BASE"/>
      <BindItem id="item3" compid="divSearch.form.ccfCD_DEPT.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_DEPT"/>
    </Bind>
  </Form>
</FDL>
