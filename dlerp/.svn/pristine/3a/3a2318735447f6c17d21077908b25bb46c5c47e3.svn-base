<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="고시단가관리" onload="DWA_SILHENG_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg">
          <Layouts>
            <Layout>
              <Static id="staYM_WORK" taborder="2" text="기준년월" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ctclYM_WORK" taborder="3" left="staYM_WORK:0.0" top="10.0" width="80" height="24.0" url="cmm::cmmCalMM.xfdl"/>
              <Static id="sta00" taborder="1" text="단가계약" left="ctclYM_WORK:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfIns" CDTextWidth="70" taborder="0" left="sta00:0.0" top="10.0" width="200" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
              <Static id="sta01" taborder="4" text="거래처" left="ccfIns:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Div id="ccfVendor" CDTextWidth="70" taborder="5" left="sta01:0.0" top="10.0" width="200" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DMAPR_INSDANGA_PUBLIC_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">save</Col>
            <Col id="SP">DMAPR_INSDANGA_PUBLIC_SAVE</Col>
          </Row>
          <Row>
            <Col id="TARGET">save1</Col>
            <Col id="SP">DMAPR_INSDANGA_PUBLIC_COPY</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_INS" type="STRING" size="256"/>
          <Column id="YM_WORK" type="STRING" size="256"/>
          <Column id="CD_VENDOR" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="YY_WORK"/>
            <Col id="YM_WORK"/>
            <Col id="DT_WORK"/>
            <Col id="CD_INS"/>
            <Col id="CD_VENDOR"/>
          </Row>
        </Rows>
      </Dataset>
    </Objects>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.DWA_SILHENG_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();	
	
	
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
	// Select, Add, Del, Save, Excel, Print
	// SubSelect, SubAdd, SubDel, SuubSave, SubExcel
// 	this.FormBtns.Add.set_enable(false);
// 	this.FormBtns.Del.set_enable(false);
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btn1 = this.gfnFormButtonAdd("btnCreate", "fnCreate");
	this.btn2 = this.gfnFormButtonAdd("btnSiteCond", "fnSiteCond");
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.ccfIns = this.divSearch.form.ccfIns;
	this.ccfVendor = this.divSearch.form.ccfVendor;
	this.dxGrid = this.divData.form.objGrid;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	this.ccfIns.CodeFindName = "DMX_CFINS";
	this.ccfVendor.CodeFindName = "DMX_CFVENDOR_COMMON";
	
	this.gfnGridInit(this.dxGrid, this.dsList, "DM", "DMA_INSDANGA_PUBLIC");
}

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_VENDOR", "string");
	this.dsSelect.addColumn("CD_ITEM", "string");
	this.dsSelect.addColumn("TY_GUBUN", "string");
	this.dsSelect.addColumn("YM_WORK", "string");

	this.dsSave = new Dataset();
	this.dsSave.addColumn("TY_SAVE", "string");
	this.dsSave.addColumn("CD_VENDOR", "string");
	this.dsSave.addColumn("CD_ITEM", "string");
	this.dsSave.addColumn("DT_APPLY", "string");
	this.dsSave.addColumn("UP_OLD", "bigdecimal");
	this.dsSave.addColumn("UP_ITEM", "bigdecimal");
	this.dsSave.addColumn("UP_OVERSEA", "bigdecimal");
	this.dsSave.addColumn("RM_BIGO", "string");
	this.dsSave.addColumn("YN_FIXDANGA", "string");
	this.dsSave.addColumn("ID_USER", "string");
	this.dsSave.addColumn("TY_GUBUN", "string");
	this.dsSave.addColumn("YM_WORK", "string");
	
	this.dsSave1 = new Dataset();
	this.dsSave1.addColumn("YM_WORK", "string");
	this.dsSave1.addColumn("TY_GUBUN", "string");
	this.dsSave1.addColumn("ID_INSERT", "string");
	
	var dt = new Date();
	
	this.divSearch.form.ctclYM_WORK.form.TextBox.set_value(dt.getFullYear().toString()+this.inZero((dt.getMonth() + 1),2));
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if(!this.fnValidate()) return;

	this.dsSelect.clearData();
	this.dsSelect.addRow();

	this.dsSelect.setColumn(0, "YM_WORK", this.divSearch.form.ctclYM_WORK.form.TextBox.value);
	this.dsSelect.setColumn(0, "CD_VENDOR", this.ccfVendor.form.CDTextBox.value);
	this.dsSelect.setColumn(0, "TY_GUBUN", this.ccfIns.form.CDTextBox.value);
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// trabsaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
};

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	this.gfnGridAdd(this.dxGrid);
}

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}

/*
 *	저장 버튼
 */
this.fnSave = function() {
	if (!this.gfnGridValidate(this.dxGrid)) return;
	
	this.dxGrid.updateToDataset();
	
	this.dsSave.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		
		if(flag == "I" || flag == "U" || flag == "D") {
		
				var nrow = this.dsSave.addRow();
				
				this.dsSave.setColumn(nrow, "TY_SAVE", flag);
				this.dsSave.setColumn(nrow, "CD_VENDOR", this.dsList.getColumn(i, "CD_VENDOR"));
				this.dsSave.setColumn(nrow, "CD_ITEM", this.dsList.getColumn(i, "CD_ITEM"));
				this.dsSave.setColumn(nrow, "DT_APPLY", this.dsList.getColumn(i, "DT_APPLY"));
				this.dsSave.setColumn(nrow, "UP_OLD", this.dsList.getColumn(i, "UP_OLD"));
				this.dsSave.setColumn(nrow, "UP_ITEM", this.dsList.getColumn(i, "UP_ITEM"));
				this.dsSave.setColumn(nrow, "UP_OVERSEA", this.dsList.getColumn(i, "UP_OVERSEA"));
				this.dsSave.setColumn(nrow, "RM_BIGO", this.dsList.getColumn(i, "RM_BIGO"));
				this.dsSave.setColumn(nrow, "YN_FIXDANGA", this.dsList.getColumn(i, "YN_FIXDANGA"));
				this.dsSave.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
				this.dsSave.setColumn(nrow, "TY_GUBUN", this.ccfIns.form.CDTextBox.value);
				this.dsSave.setColumn(nrow, "YM_WORK", this.divSearch.form.ctclYM_WORK.form.TextBox.value);
		}
	}

	if (this.dsSave.rowcount == 0) return;

	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "save=dsSave";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnValidate = function() {
	if (this.gfnIsNull(this.divSearch.form.ctclYM_WORK.form.TextBox.value.replace(/\s+$/, ""))){
		this.fnVaidateCallback = function() {
			this.divSearch.form.ctclYM_WORK.form.TextBox.setFocus();
		}
		this.gfnAlert("기준년월을 입력하십시오.");
		return false;
	}
	if (this.gfnIsNull(this.ccfIns.form.CDTextBox.value)) {
		this.fnVaidateCallback = function() {
			this.ccfIns.form.CDTextBox.setFocus();
		}
		this.gfnAlert("단가계약 입력하십시오.");
		return false;
	}
	
	return true;
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);
	}else if(svcID == "save"){
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "create") {
		if(errorCode == 0) {
			this.fnCallbackCreate_callback = function()
			{
				this.FormBtns.Select.click();
			}
			
			this.gfnAlert("계약품목생성을 정상처리하였습니다.", "fnCallbackCreate_callback");
		}
		else 
		{
			this.gfnAlert(errorMsg);
		}
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/

this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	return true;
}
 
/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
 
/************************************************************************
 * 기타 이벤트
 ************************************************************************/
/*
 *	조회 조건 변경시 초기화
 */
this.fnSearchInit = function(obj,e) {
	if(e == null || (e.pretext != e.posttext)) {
		// 폼상태 초기화
		this.gfnSetFormStatus(this);	
		this.gfnGridClear(this.dxGrid);
	}
};

this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
	}
};

this.fnCreate = function(obj:nexacro.Button, e:nexacro.ClickEventInfo){
	if(!this.fnValidate()) return;

	this.gfnConfirm("계약품목을 생성하시겠습니까?", "fnCreate_callback");
};


this.fnCreate_callback = function(strId, val){
	if(val == true)
	{
		this.dsSave1.clearData();
		this.dsSave1.addRow();

		this.dsSave1.setColumn(0, "YM_WORK", this.dsSearch.getColumn(0, "YM_WORK"));
		this.dsSave1.setColumn(0, "TY_GUBUN", this.dsSearch.getColumn(0, "CD_INS"));
		this.dsSave1.setColumn(0, "ID_INSERT", this.AuthClient.ID_USER);

		var strSvcId    = "create";
		var strSvcType  = "save";
		var inProc		= "_dsProc";
		var inData      = "save1=dsSave1";
		var outData     = "";
		var strArg      = "";
		var callBackFnc = "fnCallback";

		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
							strSvcType , 	// trabsaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
							callBackFnc); // 통신방법 정의 [생략가능]
	}
}


this.fnSiteCond = function(obj:nexacro.Button, e:nexacro.ClickEventInfo){
	if(!this.fnValidate()) return;

	var param = {};
	
	param.CD_INS = this.ccfIns.form.CDTextBox.value;
	param.DS_INS = this.ccfIns.form.DSTextBox.value;
	param.YM_WORK = this.divSearch.form.ctclYM_WORK.form.TextBox.value;
	
	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DMA_INSSITE", "", param);
};

this.inZero = function(p1,p2){
var zero ="";
for(var i=0; i<p2;i++) zero +="0";
return zero.toString().concat(p1).match(new RegExp("\\d{"+p2+"}$"));
};]]></Script>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfIns.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_INS"/>
      <BindItem id="item1" compid="divSearch.form.ctclYM_WORK.form.TextBox" propid="value" datasetid="dsSearch" columnid="YM_WORK"/>
      <BindItem id="item2" compid="divSearch.form.ccfVendor.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_VENDOR"/>
    </Bind>
  </Form>
</FDL>
