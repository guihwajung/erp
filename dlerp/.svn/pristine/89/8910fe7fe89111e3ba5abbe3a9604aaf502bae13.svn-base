<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="930" height="700" titletext="New Form" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divData" taborder="0" left="0" top="0" bottom="10" right="0" cssclass="div_DATA_Bg" text="">
          <Layouts>
            <Layout>
              <Combo id="cboTY_GUBUN" taborder="0" text="cbo00" left="10" top="10" height="24" innerdataset="dsTY_GUBUN" codecolumn="CD_CODE" datacolumn="DS_TITLE" onitemchanged="divData_cbo00_onitemchanged" right="10"/>
              <WebBrowser id="webMESSAGE_BODY" taborder="3" left="10" top="cboTY_GUBUN:5" right="10" bottom="35"/>
              <Button id="btnCancel" taborder="2" text="취소" top="webMESSAGE_BODY:10" height="22" onclick="divData_btnCancel_onclick" right="10" width="81"/>
              <Button id="btnSend" taborder="1" text="발송" top="webMESSAGE_BODY:10" onclick="divData_btnSend_onclick" right="btnCancel:5" width="80" height="22"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	if(!this.gfnIsNull(this.getOwnerFrame().CD_GUBUN))
	{
		this.dsSearch.setColumn(0, "CD_GUBUN", this.getOwnerFrame().CD_GUBUN);		
	}
	if(!this.gfnIsNull(this.getOwnerFrame().PARAM1))
	{
		this.dsSearch.setColumn(0, "PARAM1", this.getOwnerFrame().PARAM1);		
	}
	if(!this.gfnIsNull(this.getOwnerFrame().PARAM2))
	{
		this.dsSearch.setColumn(0, "PARAM2", this.getOwnerFrame().PARAM2);		
	}
	if(!this.gfnIsNull(this.getOwnerFrame().PARAM3))
	{
		this.dsSearch.setColumn(0, "PARAM3", this.getOwnerFrame().PARAM3);		
	}
	if(!this.gfnIsNull(this.getOwnerFrame().PARAM4))
	{
		this.dsSearch.setColumn(0, "PARAM4", this.getOwnerFrame().PARAM4);		
	}
	if(!this.gfnIsNull(this.getOwnerFrame().PARAM5))
	{
		this.dsSearch.setColumn(0, "PARAM5", this.getOwnerFrame().PARAM5);		
	}
	if(!this.gfnIsNull(this.getOwnerFrame().PARAM6))
	{
		this.dsSearch.setColumn(0, "PARAM6", this.getOwnerFrame().PARAM6);		
	}

	this.fnSetCombo();
	
};

/************************************************************************
 * 버튼 설정 
 * 서브버튼 사용 처리. 공통 및 확장버튼 버튼관리화면에서 셋팅.
 ************************************************************************/
this.fnSetButton = function() {
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {

};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {	
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {

	this.dsCombo = new Dataset();
	this.dsCombo.addColumn("CD_GUBUN", "string");
	
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_GUBUN", "string");
	this.dsSelect.addColumn("CD_CODE", "string");
	this.dsSelect.addColumn("PARAM1", "string");
	this.dsSelect.addColumn("PARAM2", "string");
	this.dsSelect.addColumn("PARAM3", "string");
	this.dsSelect.addColumn("PARAM4", "string");
	this.dsSelect.addColumn("PARAM5", "string");
	this.dsSelect.addColumn("PARAM6", "string");

	this.dsSend = new Dataset();
	this.dsSend.addColumn("CD_GUBUN", "string");
	this.dsSend.addColumn("CD_CODE", "string");
	this.dsSend.addColumn("PARAM1", "string");
	this.dsSend.addColumn("PARAM2", "string");
	this.dsSend.addColumn("PARAM3", "string");
	this.dsSend.addColumn("PARAM4", "string");
	this.dsSend.addColumn("PARAM5", "string");
	this.dsSend.addColumn("PARAM6", "string");
	
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 this.fnSelect = function()
 {
	this.dsSelect.clearData();
	var nrow = this.dsSelect.addRow();
	
	this.dsSelect.setColumn(nrow, "CD_GUBUN", this.dsSearch.getColumn(0, "CD_GUBUN"));
	this.dsSelect.setColumn(nrow, "CD_CODE", this.dsSearch.getColumn(0, "CD_CODE"));
	this.dsSelect.setColumn(nrow, "PARAM1", this.dsSearch.getColumn(0, "PARAM1"));
	this.dsSelect.setColumn(nrow, "PARAM2", this.dsSearch.getColumn(0, "PARAM2"));
	this.dsSelect.setColumn(nrow, "PARAM3", this.dsSearch.getColumn(0, "PARAM3"));
	this.dsSelect.setColumn(nrow, "PARAM4", this.dsSearch.getColumn(0, "PARAM4"));
	this.dsSelect.setColumn(nrow, "PARAM5", this.dsSearch.getColumn(0, "PARAM5"));
	this.dsSelect.setColumn(nrow, "PARAM6", this.dsSearch.getColumn(0, "PARAM6"));
	
	var strSvcId    = "select";
	var strSvcType  = "select";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
 }

this.fnSend = function()
{
	this.dsSend.clearData();
	var nrow = this.dsSend.addRow();
	
	this.dsSend.setColumn(nrow, "CD_GUBUN", this.dsSearch.getColumn(0, "CD_GUBUN"));
	this.dsSend.setColumn(nrow, "CD_CODE", this.dsSearch.getColumn(0, "CD_CODE"));
	this.dsSend.setColumn(nrow, "PARAM1", this.dsSearch.getColumn(0, "PARAM1"));
	this.dsSend.setColumn(nrow, "PARAM2", this.dsSearch.getColumn(0, "PARAM2"));
	this.dsSend.setColumn(nrow, "PARAM3", this.dsSearch.getColumn(0, "PARAM3"));
	this.dsSend.setColumn(nrow, "PARAM4", this.dsSearch.getColumn(0, "PARAM4"));
	this.dsSend.setColumn(nrow, "PARAM5", this.dsSearch.getColumn(0, "PARAM5"));
	this.dsSend.setColumn(nrow, "PARAM6", this.dsSearch.getColumn(0, "PARAM6"));	
	
	var strSvcId    = "send";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "send=dsSend";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}
/************************************************************************
 * Validate
 ************************************************************************/

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "send") {
		if(errorCode == 0)
		{
			// this.close()가 작동하지 않았고, 
			// 부모의 callback 함수로 데이터를 넘겨주기 위해 작성되었습니다.
			this.fnCallback_callback = function()
			{
				this.getParentContext().close(true);
			}
			
			this.gfnAlert("메일 발송이 정상처리되었습니다.", "fnCallback_callback");
		}else
		{
			this.gfnAlert(errorMsg);
		}
	}else if(svcID == "select") {
		if(this.dsList.rowcount > 0)
		{
			var htmlVal = "";
			if(!this.gfnIsNull(this.dsSearch.getColumn(0, "CD_CODE"))){
				htmlVal = this.dsList.getColumn(0, "DS_HTML");
			}
			
			var vHtml = this.divData.form.webMESSAGE_BODY.getProperty("document").getProperty("body");
			vHtml.setProperty("innerHTML", htmlVal);	
			
			//this.divData.form.webMESSAGE_BODY.set_value(html);
		}
	}else if(svcID == "combo") {
		this.dsTY_GUBUN.insertRow(0);
		this.dsTY_GUBUN.setColumn(0, "CD_CODE", "");
		this.dsTY_GUBUN.setColumn(0, "DS_TITLE", "=== 메일 유형 목록 ===");
		if(this.dsTY_GUBUN.rowcount == 2) {
			this.divData.form.cboTY_GUBUN.set_index(1);
			this.fnSelect();
		} else {
			this.divData.form.cboTY_GUBUN.set_index(0);
		}
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
 
/************************************************************************
 * 기타 이벤트
 ************************************************************************/
 
this.fnSetCombo = function()
{
	this.dsCombo.clearData();
	this.dsCombo.addRow();
	this.dsCombo.setColumn(0, "CD_GUBUN", this.dsSearch.getColumn(0, "CD_GUBUN"));
	
	var strSvcId    = "combo";
	var strSvcType  = "select";
	var inProc		= "_dsProc";
	var inData      = "combo=dsCombo";
	var outData     = "dsTY_GUBUN=combo0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}


this.divData_cbo00_onitemchanged = function(obj:nexacro.Combo,e:nexacro.ItemChangeEventInfo)
{
	this.fnSelect();
};

this.divData_btnSend_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	if(this.gfnIsNull(this.dsSearch.getColumn(0, "CD_CODE"))) {
		this.gfnAlert("메일 유형 목록을 선택하세요.");
		return false;
	}
	this.fnSend();
};

// 취소 버튼 클릭
this.divData_btnCancel_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	// this.close()가 작동하지 않았고, 
	// 부모의 callback 함수로 데이터를 넘겨주기 위해 작성되었습니다.
	this.getParentContext().close(false);
};
]]></Script>
    <Objects>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">combo</Col>
            <Col id="SP">DZZPR_COM_MAIL_LIST_SELECT</Col>
          </Row>
          <Row>
            <Col id="SP">DZZPR_COM_MAIL_HTML_SELECT_HD</Col>
            <Col id="TARGET">select</Col>
          </Row>
          <Row>
            <Col id="TARGET">send</Col>
            <Col id="SP">DZZPR_COM_MAIL_SEND</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsTY_GUBUN"/>
      <Dataset id="dsSearch">
        <ColumnInfo>
          <Column id="CD_GUBUN" type="STRING" size="256"/>
          <Column id="CD_CODE" type="STRING" size="256"/>
          <Column id="PARAM1" type="STRING" size="256"/>
          <Column id="PARAM2" type="STRING" size="256"/>
          <Column id="PARAM3" type="STRING" size="256"/>
          <Column id="PARAM4" type="STRING" size="256"/>
          <Column id="PARAM5" type="STRING" size="256"/>
          <Column id="PARAM6" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
      <Dataset id="dsList"/>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divData.form.cboTY_GUBUN" propid="value" datasetid="dsSearch" columnid="CD_CODE"/>
    </Bind>
  </Form>
</FDL>
