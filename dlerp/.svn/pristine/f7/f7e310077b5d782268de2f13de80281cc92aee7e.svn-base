<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="DAM_CARUSE" width="1280" height="720" titletext="일별차량운행일지" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0" top="0" height="46.0" right="0" cssclass="div_SEARCH_Bg">
          <Layouts>
            <Layout>
              <Static id="staCD_CORP" taborder="1" text="법인코드" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfCD_CORP" CDTextWidth="30" taborder="2" left="staCD_CORP:0.0" top="10.0" width="250" height="24.0" url="cmm::cmmCodeFind.xfdl" text="" CodeFindName="DAX_CFCORP_CODEFIND"/>
              <Static id="staCD_CAR" taborder="3" text="차량코드" left="ccfCD_CORP:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Div id="ccfCD_CAR" CDTextWidth="80" taborder="4" left="staCD_CAR:0.0" top="10.0" width="250" height="24.0" url="cmm::cmmCodeFind.xfdl" text="" CodeFindName="DHX_CAR"/>
              <Static id="staDT_FROM" taborder="5" text="운행일" left="ccfCD_CAR:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Calendar id="ctclDT_FROM" taborder="6" left="staDT_FROM:0.0" top="10.0" height="24.0" dateformat="yyyy-MM-dd" editformat="yyyyMMdd" autoselect="true" width="105"/>
              <Static id="staDT_TO" taborder="7" text="~" left="ctclDT_FROM:0.0" top="10.0" width="30.0" height="24.0" cssclass="sta_WF_AC"/>
              <Calendar id="ctclDT_TO" taborder="8" left="staDT_TO:0.0" top="10.0" width="105" height="24.0" dateformat="yyyy-MM-dd" editformat="yyyyMMdd" autoselect="true"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Objects>
      <Dataset id="dsList" cancolumnchange="dsList_cancolumnchange" onvaluechanged="dsList_onvaluechanged"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DAMPR_CARUSE_SELECT</Col>
          </Row>
          <Row>
            <Col id="SP">DAMPR_CARUSE_KMAFTER_SELECT</Col>
            <Col id="TARGET">selectCar</Col>
          </Row>
          <Row>
            <Col id="TARGET">save</Col>
            <Col id="SP">DAMPR_CARUSE_SAVE</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_CORP" type="STRING" size="256"/>
          <Column id="CD_CAR" type="STRING" size="256"/>
          <Column id="DT_FROM" type="STRING" size="256"/>
          <Column id="DT_TO" type="STRING" size="256"/>
          <Column id="DS_CORP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CD_CORP"/>
            <Col id="CD_CAR"/>
            <Col id="DT_FROM"/>
            <Col id="DT_TO"/>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsCar"/>
    </Objects>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();	
	
	//적용년도 셋팅
	var today = this.gfnGetDate();
	this.divSearch.form.ctclDT_FROM.set_value(today.substring(0,4)+"0101");
	this.divSearch.form.ctclDT_TO.set_value(today);

	this.ccfCD_CORP.form.CDTextBox.set_value(this.AuthClient.CD_CORP);	
	this.ccfCD_CORP.form.DSTextBox.set_value(this.AuthClient.DS_CORP);		
	
	if(this.FormInfo.GR_SEARCH == 1){
		this.dxGrid.setCellProperty("body",this.dxGrid.getBindCellIndex("body","KM_BEFORE"),"edittype","text");	
	}else{
		this.dxGrid.setCellProperty("body",this.dxGrid.getBindCellIndex("body","KM_BEFORE"),"edittype","none");	
	}	
	
	this.FormBtns.Select.click(); 
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {

}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btnDhaCarreg = this.gfnFormButtonAdd("CarReg", "fnCarReg"); //차량등록
	this.btnRunDiaryPrint = this.gfnFormButtonAdd("RunDiaryPrint", "fnRunDiaryPrint");//운행기록부출력
};



/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.ccfCD_CORP = this.divSearch.form.ccfCD_CORP;
	this.ccfCD_CAR = this.divSearch.form.ccfCD_CAR;
		
	this.dxGrid = this.divData.form.objGrid;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	this.ccfCD_CORP.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.ccfCD_CORP.AfterCDTextChanged = "fnAfterCDTextChanged";	
	this.ccfCD_CAR.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.ccfCD_CAR.AfterCDTextChanged = "fnAfterCDTextChanged";
	
	this.gfnGridInit(this.dxGrid, this.dsList, "DA", "DAM_CARUSE");
	
	this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforeUserDataSetParam";
	this.dxGrid.AfterCDTextChanged = "fnGrid_AfterCDTextChanged";
}

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
 
this.fnSetParameter = function() {

	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_CORP", "string");
	this.dsSelect.addColumn("CD_CAR", "string");
	this.dsSelect.addColumn("DT_FROM", "string");
	this.dsSelect.addColumn("DT_TO", "string");
	this.dsSelect.addColumn("GR_SEARCH", "string");
	this.dsSelect.addColumn("GR_DEPT", "string");
	this.dsSelect.addColumn("ID_USER", "string");
		
	this.dsSave = new Dataset();
	this.dsSave.addColumn("TY_SAVE", "string");
	this.dsSave.addColumn("NO_SEQ", "int");
	this.dsSave.addColumn("CD_CORP", "string");
	this.dsSave.addColumn("CD_CAR", "string");
	this.dsSave.addColumn("DT_USE", "string");
	this.dsSave.addColumn("ID_SABUN", "string");
	this.dsSave.addColumn("DS_HNAME", "string");
	this.dsSave.addColumn("CD_DEPT", "string");
	this.dsSave.addColumn("KM_BEFORE", "int");
	this.dsSave.addColumn("KM_AFTER", "int");
	this.dsSave.addColumn("KM_DRIVE", "int");
	this.dsSave.addColumn("KM_WORKING", "int");
	this.dsSave.addColumn("KM_BUSINESS", "int");
	this.dsSave.addColumn("DS_DRIVE", "string");
	this.dsSave.addColumn("AM_CAR_FUEL", "bigdecimal");
	this.dsSave.addColumn("ID_INSERT", "string");
	this.dsSave.addColumn("GR_SEARCH", "string");
	this.dsSave.addColumn("TY_AUTH", "string");
	this.dsSave.addColumn("GR_DEPT", "string");
	
	this.dsSelectCar = new Dataset();
	this.dsSelectCar.addColumn("CD_CORP", "string");
	this.dsSelectCar.addColumn("CD_CAR", "string");	
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
//입력시 주행전 거리 조회
this.fnGetKmBef = function(arr,sCD_CORP){

	this.dsSelectCar.clearData();
	this.dsSelectCar.addRow();
	this.dsSelectCar.setColumn(0, "CD_CORP", sCD_CORP);
	this.dsSelectCar.setColumn(0, "CD_CAR", arr[0]["CD_CAR"]);
		
	var strSvcId    = "selectCar";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "selectCar=dsSelectCar";
	var outData     = "dsCar=selectCar0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// trabsaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc,
						false); // 통신방법 정의 [생략가능]
							
	this.dsList.setColumn(this.dsList.rowposition, "KM_BEFORE", this.dsCar.getColumn(0, "KM_AFTER"));
}; 
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if(!this.fnSelectValidate()) return;
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	this.dsSelect.setColumn(0, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
	this.dsSelect.setColumn(0, "CD_CAR", this.dsSearch.getColumn(0, "CD_CAR"));
	this.dsSelect.setColumn(0, "DT_FROM", this.dsSearch.getColumn(0, "DT_FROM"));
	this.dsSelect.setColumn(0, "DT_TO", this.dsSearch.getColumn(0, "DT_TO"));
	this.dsSelect.setColumn(0, "GR_SEARCH", this.FormInfo.GR_SEARCH);
	this.dsSelect.setColumn(0, "GR_DEPT", this.AuthClient.CD_DEPT);
	this.dsSelect.setColumn(0, "ID_USER", this.AuthClient.ID_USER);
		
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// trabsaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
};

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	if (this.gfnIsNull(this.ccfCD_CORP.form.CDTextBox.value)) {
		this.fnValidCallback = function() {
			this.ccfCD_CORP.form.CDTextBox.setFocus();
		}
		this.gfnAlert("법인코드를 입력하세요.", "fnValidCallback");
		return false;
	}
	
	var nrow = this.gfnGridAdd(this.dxGrid);
	
	//법인 차량 운행일
	
	//조회값 설정
	//법인
	this.dsList.setColumn(nrow, "CD_CORP", this.ccfCD_CORP.form.CDTextBox.value);
	this.dsList.setColumn(nrow, "DS_CORP", this.ccfCD_CORP.form.DSTextBox.value);
	
	//차량
	this.dsList.setColumn(nrow, "CD_CAR", this.gfnNvl(this.ccfCD_CAR.form.CDTextBox.value,""));
	this.dsList.setColumn(nrow, "NO_CAR", this.gfnNvl(this.ccfCD_CAR.form.DSTextBox.value,""));
	
	//운행일
	this.dsList.setColumn(nrow, "DT_USE", this.gfnGetDate());
};

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
};

/*
 *	저장 버튼
 */
this.fnSave = function() {
	// 그리드 필수항목 체크
	if (!this.gfnGridValidate(this.dxGrid)) return;

	this.dxGrid.updateToDataset();
	this.dsSave.clearData();

	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "I":
			case "U":
			case "D":
				var nrow = this.dsSave.addRow();
				this.dsSave.setColumn(nrow, "TY_SAVE", flag);
				this.dsSave.setColumn(nrow, "NO_SEQ", (flag == "I" ? 0 : this.dsList.getColumn(i, "SEQ")));
				this.dsSave.setColumn(nrow, "CD_CORP", this.dsList.getColumn(i, "CD_CORP"));
				this.dsSave.setColumn(nrow, "CD_CAR", this.dsList.getColumn(i, "CD_CAR"));
				this.dsSave.setColumn(nrow, "DT_USE", this.dsList.getColumn(i, "DT_USE"));
				this.dsSave.setColumn(nrow, "ID_SABUN", this.dsList.getColumn(i, "ID_SABUN"));
				this.dsSave.setColumn(nrow, "DS_HNAME", this.dsList.getColumn(i, "DS_HNAME"));
				this.dsSave.setColumn(nrow, "CD_DEPT", this.dsList.getColumn(i, "CD_DEPT"));
				this.dsSave.setColumn(nrow, "KM_BEFORE", this.dsList.getColumn(i, "KM_BEFORE"));
				this.dsSave.setColumn(nrow, "KM_AFTER", this.dsList.getColumn(i, "KM_AFTER"));
				this.dsSave.setColumn(nrow, "KM_DRIVE", this.dsList.getColumn(i, "KM_DRIVE"));
				this.dsSave.setColumn(nrow, "KM_WORKING", this.dsList.getColumn(i, "KM_WORKING"));
				this.dsSave.setColumn(nrow, "KM_BUSINESS", this.dsList.getColumn(i, "KM_BUSINESS"));
				this.dsSave.setColumn(nrow, "DS_DRIVE", this.dsList.getColumn(i, "DS_DRIVE"));
				this.dsSave.setColumn(nrow, "AM_CAR_FUEL", this.dsList.getColumn(i, "AM_CAR_FUEL"));
				this.dsSave.setColumn(nrow, "ID_INSERT", this.AuthClient.ID_USER);
				this.dsSave.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
				this.dsSave.setColumn(nrow, "TY_AUTH", this.FormInfo.TY_AUTH);
				this.dsSave.setColumn(nrow, "GR_DEPT", this.AuthClient.CD_DEPT);
				break;
		}
	}

	if (this.dsSave.rowcount == 0) return;

	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "save=dsSave";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";

	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
};

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
};

/*
 *	출력 버튼
 */
this.fnPrint = function() {
};


/************************************************************************
 * 서브 버튼 이벤트
 ************************************************************************/

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {
	if (this.gfnIsNull(this.ccfCD_CORP.form.CDTextBox.value)) {
		this.fnVaidateCallback = function() {
			this.ccfCD_CORP.form.CDTextBox.setFocus();
		}
		this.gfnAlert("법인코드를 입력하세요.");
		return false;
	}
	
 	return true;
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);
		
	} else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
};

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	if (id == "ccfCD_CORP") {
		dsUserParam.setColumn(nrow, "CD_CORP", this.AuthClient.CD_CORP);
		dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
		dsUserParam.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
	}
 	else if (id == "ccfCD_CAR") {
		if (this.gfnIsNull(this.ccfCD_CORP.form.CDTextBox.value)) {
			this.gfnAlert("법인을 먼저 입력하세요.");
			return false;
		}	
		dsUserParam.setColumn(nrow, "CD_CORP", this.ccfCD_CORP.form.CDTextBox.value);
	}
	
	return true;
}
this.fnAfterCDTextChanged = function(id, codeFindData) {
	var arr = codeFindData;
	
	if (id == "ccfCD_CORP") {
		this.ccfCD_CAR.form.fnCodeFindClear();
	}else if(id == "ccfCD_CAR"){
		;
	}
};
 
/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
this.fnGrid_BeforeUserDataSetParam = function(id, dsUserParam, nrow){

	if(id == "DHX_CAR"){
		if(this.gfnIsNull(this.ccfCD_CORP.form.CDTextBox.value)) {		
 			this.ccfCD_CORP.form.CDTextBox.setFocus();
 			this.gfnAlert("법인을 먼저 선택하시기 바랍니다.");
 			return false;
 		}	
		dsUserParam.setColumn(nrow, "CD_CORP", this.ccfCD_CORP.form.CDTextBox.value);

	} else if(id == "DAX_CFBASEINFO_ALL"){
		if(this.gfnIsNull(this.ccfCD_CORP.form.CDTextBox.value)) {		
 			this.ccfCD_CORP.form.CDTextBox.setFocus();
 			this.gfnAlert("법인을 먼저 선택하시기 바랍니다.");
 			return false;
 		}
		
		dsUserParam.setColumn(nrow, "CD_CORP", this.ccfCD_CORP.form.CDTextBox.value);
		dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
		dsUserParam.setColumn(nrow, "CD_DEPT", this.AuthClient.CD_DEPT);
		dsUserParam.setColumn(nrow, "YN_CORP", "N");
		dsUserParam.setColumn(nrow, "TY_RETIRE", "%");   // 재직구분
		
	} else if(id == "DAX_CFDEPT") {
		if(this.gfnIsNull(this.ccfCD_CORP.form.CDTextBox.value)) {		
 			this.ccfCD_CORP.form.CDTextBox.setFocus();
 			this.gfnAlert("법인을 먼저 선택하시기 바랍니다.");
 			return false;
 		}
		
		dsUserParam.setColumn(nrow, "GR_SEARCH",  this.FormInfo.GR_SEARCH);	// 사용자 권한
		dsUserParam.setColumn(nrow, "CD_DEPT",  this.AuthClient.CD_DEPT);	// 로그인부서
		dsUserParam.setColumn(nrow, "CD_CORP",  this.ccfCD_CORP.form.CDTextBox.value);	// 조회조건에 있는 소속법인
		dsUserParam.setColumn(nrow, "YN_CURRENT",  "Y");
	}
		
	return true;
};

this.fnGrid_AfterCDTextChanged = function(id, codeFindData) {
	var arr = codeFindData;
		
	if(id == "DHX_CAR"){
		this.fnGetKmBef(arr, this.dsList.getColumn(this.dsList.rowposition, "CD_CORP"));
	}
	else if(id == "DAX_CFBASEINFO_ALL") {
		var arr = codeFindData;
		if(arr.length > 0) {
			var sCD_DEPT = arr[0]["CD_DEPT"];
			var sDS_DEPT = arr[0]["DS_DEPT"];
			this.dsList.setColumn(this.dsList.rowposition, "CD_DEPT", sCD_DEPT);
			this.dsList.setColumn(this.dsList.rowposition, "DS_DEPT", sDS_DEPT);
		}
	}	
	else if(id == "DAX_CFDEPT"){
	}
};

		
/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.fnCarReg = function () {
 	var param = {};
	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DAM_CAR", "", param);
};

this.fnRunDiaryPrint = function(){
	//if (!this.gfnGridIsRow(this.dxGrid)) { return false; }
	
	var param = {};
	param.CD_CORP = this.ccfCD_CORP.form.CDTextBox.value;
	param.DS_CORP = this.ccfCD_CORP.form.DSTextBox.value;
	param.CD_CAR = this.ccfCD_CAR.form.CDTextBox.value;
	param.DS_CAR = this.ccfCD_CAR.form.DSTextBox.value;
	param.DT_FROM = this.divSearch.form.ctclDT_FROM.value;
	param.DT_TO = this.divSearch.form.ctclDT_TO.value;
	trace("param", param);
	
	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DAM_CARUSE_PRT_DLG", "fnRunDiaryPrintCallback", param);	
}

this.fnRunDiaryPrintCallback = function(){
}

this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo){
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
	}
};

//주행거리 체크
this.dsList_cancolumnchange = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo){
	if(e.columnid == "KM_BEFORE" || e.columnid == "KM_AFTER") {	//주행거리
		var kmBefore = this.dsList.getColumn(e.row, "KM_BEFORE");
		var kmAfter = this.dsList.getColumn(e.row, "KM_AFTER");
		var nDrvKm =  0;

		if(e.columnid == "KM_BEFORE"){
			kmBefore = e.newvalue;
			
		}else if (e.columnid == "KM_AFTER"){
			kmAfter = e.newvalue;
		}
		
		nDrvKm =  kmAfter - kmBefore;
			
		if(nDrvKm < 0 ){			
			this.gfnAlert("입력값이 잘못되었습니다.");
			return false;
		}
	}else if(e.columnid == "KM_WORKING"){		//출퇴근
		//주행거리 체크
		var nDrvKm =  this.dsList.getColumn(e.row, "KM_DRIVE");
		
		if(this.gfnIsNull(nDrvKm) || nDrvKm == 0){
			this.gfnAlert("주행거리가 없습니다.");
			return false;
		}else if( nDrvKm < e.newvalue){
			this.gfnAlert("출퇴근 거리가 주행거리보다 클수 없습니다.");
			return false;
		}
		
		// 업무용 거리 계산
		var kmWorking = e.newvalue;
		var kmBusiness = nDrvKm - kmWorking;
		
		this.dsList.set_enableevent(false);
		this.dsList.setColumn(e.row, "KM_BUSINESS", kmBusiness);
		this.dsList.set_enableevent(true);
		
	}else if(e.columnid == "KM_BUSINESS"){	//업무용
		//주행거리 체크
		var nDrvKm =  this.dsList.getColumn(e.row, "KM_DRIVE");
		
		if(this.gfnIsNull(nDrvKm) || nDrvKm == 0){
			this.gfnAlert("주행거리가 없습니다.");
			return false;
		}else if( nDrvKm < e.newvalue){
			this.gfnAlert("업무용 거리가 주행거리보다 클수 없습니다.");
			return false;
		}	
		
		// 출퇴근용 거리 계산
		var kmBusiness = e.newvalue;
		var kmWorking = nDrvKm - kmBusiness;
	
		this.dsList.set_enableevent(false);
		this.dsList.setColumn(e.row, "KM_WORKING", kmWorking);
		this.dsList.set_enableevent(true);
		
	}else if(e.columnid == "KM_DRIVE"){
		this.dsList.set_enableevent(false);
		this.dsList.setColumn(e.row, "KM_WORKING", 0);
		this.dsList.setColumn(e.row, "KM_BUSINESS", 0);
		this.dsList.set_enableevent(true);
	}
	
	return true;
};

//주행거리 계산
this.dsList_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo){
	if(e.columnid == "KM_BEFORE" || e.columnid == "KM_AFTER"){
		var kmBefore = this.gfnIsNull(this.dsList.getColumn(e.row, "KM_BEFORE"))==true?0:this.dsList.getColumn(e.row, "KM_BEFORE");
		var kmAfter = this.dsList.getColumn(e.row, "KM_AFTER");
		var nDrvKm =  kmAfter - kmBefore;
		
		this.dsList.setColumn(e.row, "KM_DRIVE", nDrvKm);
	}

};

]]></Script>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfCD_CORP.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_CORP"/>
      <BindItem id="item1" compid="divSearch.form.ccfCD_CAR.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_CAR"/>
      <BindItem id="item2" compid="divSearch.form.ctclDT_FROM" propid="value" datasetid="dsSearch" columnid="DT_FROM"/>
      <BindItem id="item3" compid="divSearch.form.ctclDT_TO" propid="value" datasetid="dsSearch" columnid="DT_TO"/>
    </Bind>
  </Form>
</FDL>
