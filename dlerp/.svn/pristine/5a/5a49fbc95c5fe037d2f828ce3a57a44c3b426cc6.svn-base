<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="450" height="360" maxwidth="450" maxheight="360" titletext="불명자료 반제처리" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divData" taborder="1" left="0" top="0" bottom="0" right="0" cssclass="div_DATA_Bg" text="">
          <Layouts>
            <Layout>
              <Static id="staTITLE" taborder="0" text="하자내용변경" left="0" top="20" width="100.00%" height="30" cssclass="sta_TITLE_Bg" textAlign="left"/>
              <TextArea id="txtMsg" taborder="0" left="5" top="staTITLE:10" wordWrap="char" visible="true" right="5" value="" height="140"/>
              <Button id="btnOK" taborder="19" text="확인" left="142" top="txtMsg:20" width="60" height="27" onclick="btnOK_onclick"/>
              <Button id="btnCANCLE" taborder="21" text="취소" left="btnOK:30" top="txtMsg:20" width="60" height="27" onclick="btnCANCLE_onclick"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//

	this.fnSetVariable();
	this.fnSetEvent(); 
	this.fnSetParameter();

	this.dsList.setColumn(0, "CD_SITE", this.getOwnerFrame().CD_SITE);
	this.dsList.setColumn(0, "CD_JOB", this.getOwnerFrame().CD_JOB);
	this.dsList.setColumn(0, "RM_NY", this.getOwnerFrame().RM_NY);
};

/************************************************************************
 * 변수 선언  
 ************************************************************************/
this.fnSetVariable = function() {

};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {

};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	this.dsUpdate = new Dataset();
	this.dsUpdate.addColumn("CD_SITE", "string");
	this.dsUpdate.addColumn("CD_JOB", "string");
	this.dsUpdate.addColumn("RM_NY", "string");
}

/************************************************************************
 * Validate
 ************************************************************************/
this.fnSelectValidation = function() {
	
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
this.fnCallback = function(svcID, errorCode, errorMsg) {
	if(svcID == "save"){
		if (errorCode == 0) {
			this.fnCallback_callback = function()
			{
				this.getParentContext().close(true);
			}
			this.gfnAlert("변경되었습니다.", "fnCallback_callback");
		}
		else {
			this.gfnAlert(errorMsg);
		}
 	}
}

/************************************************************************
 * 기타 이벤트
 ************************************************************************/
// 확인버튼 클릭.
this.btnOK_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	if(this.gfnIsNull(this.dsList.getColumn(0, "RM_NY")))
	{
		this.gfnAlert("하자내용을 입력하세요.");
		return;
	}

	this.dsUpdate.clearData();
	
	var nrow = this.dsUpdate.addRow();
	this.dsUpdate.setColumn(nrow, "CD_SITE", this.dsList.getColumn(0, "CD_SITE"));
	this.dsUpdate.setColumn(nrow, "CD_JOB", this.dsList.getColumn(0, "CD_JOB"));
	this.dsUpdate.setColumn(nrow, "RM_NY", this.dsList.getColumn(0, "RM_NY"));			

	if (this.dsUpdate.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "update=dsUpdate";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
};

// 취소버튼 클릭.
this.btnCANCLE_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	this.getParentContext().close(false);
};
]]></Script>
    <Objects>
      <Dataset id="dsList" onvaluechanged="dsList_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_SITE" type="STRING" size="256"/>
          <Column id="CD_JOB" type="STRING" size="256"/>
          <Column id="RM_NY" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">update</Col>
            <Col id="SP">DBSPR_RMNY_UPDATE</Col>
          </Row>
        </Rows>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divData.form.txtMsg" propid="value" datasetid="dsList" columnid="RM_NY"/>
    </Bind>
  </Form>
</FDL>
