(function()
{
    return function()
    {
        if (!this._is_form)
            return;
        
        var obj = null;
        
        this.on_create = function()
        {
            this.set_name("form");
            this.set_titletext("예산신청");
            if (Form == this.constructor)
            {
                this._setFormPosition(1280,720);
            }
            
            // Object(Dataset, ExcelExportObject) Initialize
            obj = new Dataset("dsList", this);
            obj._setContents("");
            this.addChild(obj.name, obj);


            obj = new Dataset("_dsProc", this);
            obj._setContents("<ColumnInfo><Column id=\"TARGET\" type=\"STRING\" size=\"256\"/><Column id=\"SP\" type=\"STRING\" size=\"256\"/></ColumnInfo><Rows><Row><Col id=\"TARGET\">select</Col><Col id=\"SP\">DIQPR_SILJUK_PROSPECT_SELECT</Col></Row><Row><Col id=\"TARGET\">insert</Col><Col id=\"SP\">DIQPR_SILJUK_PROSPECT_INSERT</Col></Row><Row><Col id=\"TARGET\">update</Col><Col id=\"SP\">DIQPR_SILJUK_PROSPECT_UPDATE</Col></Row><Row><Col id=\"TARGET\">delete</Col><Col id=\"SP\">DIQPR_SILJUK_PROSPECT_DELETE</Col></Row><Row><Col id=\"TARGET\">select_excel</Col><Col id=\"SP\">DIQPR_SILJUK_PROSPECT_SELECT</Col></Row><Row><Col id=\"TARGET\">create</Col><Col id=\"SP\">DIQPR_SILJUK_PROSPECT_CREATE</Col></Row></Rows>");
            this.addChild(obj.name, obj);


            obj = new Dataset("dsSearch", this);
            obj._setContents("<ColumnInfo><Column id=\"YM_BUDGET\" type=\"STRING\" size=\"256\"/><Column id=\"CD_DEPT\" type=\"STRING\" size=\"256\"/></ColumnInfo><Rows><Row/></Rows>");
            this.addChild(obj.name, obj);
            
            // UI Components Initialize
            obj = new Div("divSearch","0","10",null,"46","0",null,null,null,null,null,this);
            obj.set_taborder("0");
            obj.set_cssclass("div_SEARCH_Bg");
            obj.set_formscrolltype("none");
            this.addChild(obj.name, obj);

            obj = new Static("staYM_BUDGET","0","10.0","92","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.set_text("전망년월");
            obj.set_taborder("0");
            obj.set_cssclass("sta_WF_SchLabelE");
            this.divSearch.addChild(obj.name, obj);

            obj = new Div("ctclYM_BUDGET","staYM_BUDGET:0","10.0","78","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("1");
            obj.set_url("cmm::cmmCalMM.xfdl");
            this.divSearch.addChild(obj.name, obj);

            obj = new Static("staCD_DEPT","ctclYM_BUDGET:0","10.0","92","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.set_text("귀속부서");
            obj.set_taborder("2");
            obj.set_cssclass("sta_WF_SchLabel");
            this.divSearch.addChild(obj.name, obj);

            obj = new Div("ccfCD_DEPT","staCD_DEPT:0.0","10.0","250","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.getSetter("CodeFindName").set("DIX_ACNTUNIT_01");
            obj.getSetter("CDTextWidth").set("80");
            obj.set_url("cmm::cmmCodeFind.xfdl");
            obj.set_taborder("3");
            this.divSearch.addChild(obj.name, obj);

            obj = new Div("divData","0","divSearch:10",null,null,"0","0",null,null,null,null,this);
            obj.set_taborder("0");
            obj.set_cssclass("div_DATA_Bg");
            this.addChild(obj.name, obj);

            obj = new Grid("objGrid","0","0",null,null,"0","0",null,null,null,null,this.divData.form);
            obj.set_taborder("0");
            obj.set_cellsizingtype("both");
            obj._setContents("");
            this.divData.addChild(obj.name, obj);
            // Layout Functions
            //-- Default Layout : this
            obj = new Layout("default","",this._adjust_width,this._adjust_height,this,function(p){});
            this.addLayout(obj.name, obj);
            
            // BindItem Information
            obj = new BindItem("item3","divSearch.form.ccfCD_DEPT.form.CDTextBox","value","dsSearch","CD_DEPT");
            this.addChild(obj.name, obj);
            obj.bind();

            obj = new BindItem("item1","divSearch.form.ctclYM_BUDGET.form.TextBox","value","dsSearch","YM_BUDGET");
            this.addChild(obj.name, obj);
            obj.bind();
            
            // TriggerItem Information

        };
        
        this.loadPreloadList = function()
        {
            this._addPreloadList("fdl","cmm::cmmCalMM.xfdl");
            this._addPreloadList("fdl","cmm::cmmCodeFind.xfdl");
        };
        
        // User Script
        this.registerScript("DIQ_SILJUK_PROSPECT.xfdl", function() {
        this.objApp = this.gfnGetApplication();

        this.form_onload = function(obj,e)
        {
        	// -- 필수 -------------------//
        	this.gfnFormOnLoad(this);
        	this.gfnFormInfo(this);
        	// ---------------------------//

        	this.fnSetButton();
        	this.fnSetExtendButton();
        	this.fnSetVariable();
        	this.fnSetEvent();
        	this.fnSetParameter();

        	this.dsSearch.setColumn(0, "YM_BUDGET", this.gfnAddMonth(this.gfnGetDate(),-1).substr(0,6));
        	var year = this.gfnGetDate().substr(0,4);
        };
        /************************************************************************
         * 버튼 설정 : 화면(Tab) 전환시 마다 호출
         * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
         ************************************************************************/
        this.fnSetButton = function() {
        }

        /************************************************************************
         * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
         ************************************************************************/
        this.fnSetExtendButton = function() {
            this.btnCreate = this.gfnFormButtonAdd("btnCreate", "fnCreateProspect");
         	this.btnExcelD = this.gfnFormButtonAdd("btnExcelD", "fnbtnExcelD");
         	this.btnExcelU = this.gfnFormButtonAdd("btnExcelU", "fnbtnExcelU");
        };

        /************************************************************************
         * 변수 선언
         ************************************************************************/
        this.fnSetVariable = function() {
        	this.ctclYM_BUDGET = this.divSearch.form.ctclYM_BUDGET;
        	this.ccfCD_DEPT = this.divSearch.form.ccfCD_DEPT;

        	this.dxGrid = this.divData.form.objGrid;
        	//this.dxGrid_Excel = this.divData.form.objGridExcel;
        };

        /************************************************************************
         * 이벤트 설정
         ************************************************************************/
        this.fnSetEvent = function() {
        	// 그리드 초기화
        	this.gfnGridInit(this.dxGrid, this.dsList, "DI", "DIQ_SILJUK_PROSPECT");

        	//코드파인드
        	this.ccfCD_DEPT.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
        	this.ccfCD_DEPT.AfterCDTextChanged = "codefind_AfterCDTextChanged";

        	// 셀 수정가능 여부
        	this.dxGrid.EnterCell = "fnGrid_EnterCell";

        	// 셀 변경 후 이벤트

        	// 그리드 코드파인드 설정
        	this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforeUserDataSetParam";

        	//this.dsList.addEventHandler("oncolumnchanged", this.dsList_ColumnChanged, this);

        	// BUTTON, BUTTON-IN 처리
        	this.dxGrid.ExpandUp = "fnGrid_ExpandUp";
        	this.dxGrid.EnterCell = "fnGridEnterCell";

        	var colDsRem = this.dxGrid.getBindCellIndex("body", "DS_REM");
        	var colDsAccount = this.dxGrid.getBindCellIndex("body", "DS_ACCOUNT");
        	this.dxGrid.setCellProperty("body",colDsAccount,"tooltiptext","bind:DS_ACCOUNT");
        	this.dxGrid.setCellProperty("body",colDsRem,"tooltiptext","bind:DS_REM");
        };

        /************************************************************************
         * 파라미터 설정
         ************************************************************************/
        this.fnSetParameter = function() {
        	// SELECT
        	this.dsSelect = new Dataset();
        	this.dsSelect.addColumn("YM_BUDGET", "string");
        	this.dsSelect.addColumn("CD_DEPT", "string");

        	// INSERT
        	this.dsInsert = new Dataset();
        	this.dsInsert.addColumn("YM_BUDGET", "string");
        	this.dsInsert.addColumn("CD_DEPT", "string");
        	this.dsInsert.addColumn("CD_ACCOUNT", "string");
        	this.dsInsert.addColumn("CD_ACTIVE", "string");
        	this.dsInsert.addColumn("AM_BUDGET","bigdecimal");
        	this.dsInsert.addColumn("AM_JAN","bigdecimal");
        	this.dsInsert.addColumn("AM_FEB","bigdecimal");
        	this.dsInsert.addColumn("AM_MAR","bigdecimal");
        	this.dsInsert.addColumn("AM_APR","bigdecimal");
        	this.dsInsert.addColumn("AM_MAY","bigdecimal");
        	this.dsInsert.addColumn("AM_JUN","bigdecimal");
        	this.dsInsert.addColumn("AM_JUL","bigdecimal");
        	this.dsInsert.addColumn("AM_AUG","bigdecimal");
        	this.dsInsert.addColumn("AM_SEP","bigdecimal");
        	this.dsInsert.addColumn("AM_OCT","bigdecimal");
        	this.dsInsert.addColumn("AM_NOV","bigdecimal");
        	this.dsInsert.addColumn("AM_DEC","bigdecimal");
        	this.dsInsert.addColumn("DS_REM","string");
        	this.dsInsert.addColumn("ID_INSERT","string");
        	//this.dsInsert.addColumn("DS_ACTIVE", "string");


        	// UPDATE
        	this.dsUpdate = new Dataset();
        	this.dsUpdate.addColumn("YM_BUDGET", "string");
        	this.dsUpdate.addColumn("CD_DEPT", "string");
        	this.dsUpdate.addColumn("CD_ACCOUNT", "string");
        	this.dsUpdate.addColumn("CD_ACTIVE", "string");
        	this.dsUpdate.addColumn("AM_BUDGET","bigdecimal");
        	this.dsUpdate.addColumn("AM_JAN","bigdecimal");
        	this.dsUpdate.addColumn("AM_FEB","bigdecimal");
        	this.dsUpdate.addColumn("AM_MAR","bigdecimal");
        	this.dsUpdate.addColumn("AM_APR","bigdecimal");
        	this.dsUpdate.addColumn("AM_MAY","bigdecimal");
        	this.dsUpdate.addColumn("AM_JUN","bigdecimal");
        	this.dsUpdate.addColumn("AM_JUL","bigdecimal");
        	this.dsUpdate.addColumn("AM_AUG","bigdecimal");
        	this.dsUpdate.addColumn("AM_SEP","bigdecimal");
        	this.dsUpdate.addColumn("AM_OCT","bigdecimal");
        	this.dsUpdate.addColumn("AM_NOV","bigdecimal");
        	this.dsUpdate.addColumn("AM_DEC","bigdecimal");
        	this.dsUpdate.addColumn("DS_REM","string");
        	this.dsUpdate.addColumn("ID_UPDATE","string");

        	// DELETE
        	this.dsDelete = new Dataset();
        	this.dsDelete.addColumn("YM_BUDGET", "string");
        	this.dsDelete.addColumn("CD_DEPT", "string");
        	this.dsDelete.addColumn("CD_ACCOUNT", "string");
        	this.dsDelete.addColumn("CD_ACTIVE", "string");

        	// EXEC
        	this.dsCreateExec = new Dataset();
        	this.dsCreateExec.addColumn("YM_BUDGET", "string");	// 전망년월
        	this.dsCreateExec.addColumn("CD_DEPT", "string");	// 부서코드
        	this.dsCreateExec.addColumn("ID_USER", "string");	// 부서코드
        }

        /************************************************************************
         * 컨트롤 이벤트
         ************************************************************************/
         /*
          *	조회 버튼
          */
        this.fnSelect = function() {
        	if (!this.fnSelectValidate()) return false;

        	this.gfnGridBeforeSelect(this.dxGrid);

        	this.dsSelect.clearData();
        	this.dsSelect.addRow();

        	this.dsSelect.setColumn(0, "YM_BUDGET", this.dsSearch.getColumn(0, "YM_BUDGET"));
        	this.dsSelect.setColumn(0, "CD_DEPT", this.dsSearch.getColumn(0, "CD_DEPT"));

        	var strSvcId    = "select";
        	var strSvcType  = "grid";
        	var inProc		= "_dsProc";
        	var inData      = "select=dsSelect";
        	var outData     = "dsList=select0";
        	var strArg      = "";
        	var callBackFnc = "fnCallback";

        	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
        						strSvcType , 	// transaction을 요청할 구분
        						inProc,			// Procedure 정보 Dataset 이름
        						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
        						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
        						callBackFnc); 	// 통신방법 정의 [생략가능]
        }

        /*
         *	입력 버튼
         */
        this.fnAdd = function() {
        	var nrow = this.gfnGridAdd(this.dxGrid); // top (default), bottom, current
        }

        /*
         *	삭제 버튼
         */
        this.fnDel = function() {
        	this.gfnGridDel(this.dxGrid);
        }

        /*
         *	저장 버튼
         */
        this.fnSave = function() {
        	// 그리드 필수항목 체크
        	if (!this.gfnGridValidate(this.dxGrid)) return;

        	this.dxGrid.updateToDataset();

        	this.dsInsert.clearData();
        	this.dsUpdate.clearData();
        	this.dsDelete.clearData();

        	for (var i = 0; i < this.dsList.rowcount; i++) {
        		var flag = this.gfnGetFlag(this.dsList, i);
        		switch(flag) {
        			case "I":
        				var nrow = this.dsInsert.addRow();
         				this.dsInsert.setColumn(nrow, "YM_BUDGET", this.dsSearch.getColumn(0, "YM_BUDGET"));
         				this.dsInsert.setColumn(nrow, "CD_DEPT", this.dsList.getColumn(i, "CD_DEPT"));
        				this.dsInsert.setColumn(nrow, "CD_ACCOUNT", this.dsList.getColumn(i, "CD_ACCOUNT"));
        				this.dsInsert.setColumn(nrow, "CD_ACTIVE", this.dsList.getColumn(i, "CD_ACTIVE"));

        				this.dsInsert.setColumn(nrow, "AM_BUDGET", this.dsList.getColumn(i, "AM_PROSPECT")); // 전망합계
        				this.dsInsert.setColumn(nrow, "AM_JAN", this.dsList.getColumn(i, "AM_01"));
        				this.dsInsert.setColumn(nrow, "AM_FEB", this.dsList.getColumn(i, "AM_02"));
        				this.dsInsert.setColumn(nrow, "AM_MAR", this.dsList.getColumn(i, "AM_03"));

        				this.dsInsert.setColumn(nrow, "AM_APR", this.dsList.getColumn(i, "AM_04"));
        				this.dsInsert.setColumn(nrow, "AM_MAY", this.dsList.getColumn(i, "AM_05"));
        				this.dsInsert.setColumn(nrow, "AM_JUN", this.dsList.getColumn(i, "AM_06"));
        				this.dsInsert.setColumn(nrow, "AM_JUL", this.dsList.getColumn(i, "AM_07"));
        				this.dsInsert.setColumn(nrow, "AM_AUG", this.dsList.getColumn(i, "AM_08"));

        				this.dsInsert.setColumn(nrow, "AM_SEP", this.dsList.getColumn(i, "AM_09"));
        				this.dsInsert.setColumn(nrow, "AM_OCT", this.dsList.getColumn(i, "AM_10"));
        				this.dsInsert.setColumn(nrow, "AM_NOV", this.dsList.getColumn(i, "AM_11"));
        				this.dsInsert.setColumn(nrow, "AM_DEC", this.dsList.getColumn(i, "AM_12"));
        				this.dsInsert.setColumn(nrow, "DS_REM", this.dsList.getColumn(i, "DS_REM"));
         				this.dsInsert.setColumn(nrow, "ID_INSERT", this.AuthClient.ID_USER);

        				break;

        			case "U":
        				var nrow = this.dsUpdate.addRow();
        				this.dsUpdate.setColumn(nrow, "YM_BUDGET", this.dsSearch.getColumn(0, "YM_BUDGET"));
         				this.dsUpdate.setColumn(nrow, "CD_DEPT", this.dsList.getColumn(i, "CD_DEPT"));
        				this.dsUpdate.setColumn(nrow, "CD_ACCOUNT", this.dsList.getColumn(i, "CD_ACCOUNT"));
        				this.dsUpdate.setColumn(nrow, "CD_ACTIVE", this.dsList.getColumn(i, "CD_ACTIVE"));

        				this.dsUpdate.setColumn(nrow, "AM_BUDGET", this.dsList.getColumn(i, "AM_PROSPECT")); // 전망합계
        				this.dsUpdate.setColumn(nrow, "AM_JAN", this.dsList.getColumn(i, "AM_01"));
        				this.dsUpdate.setColumn(nrow, "AM_FEB", this.dsList.getColumn(i, "AM_02"));
        				this.dsUpdate.setColumn(nrow, "AM_MAR", this.dsList.getColumn(i, "AM_03"));

        				this.dsUpdate.setColumn(nrow, "AM_APR", this.dsList.getColumn(i, "AM_04"));
        				this.dsUpdate.setColumn(nrow, "AM_MAY", this.dsList.getColumn(i, "AM_05"));
        				this.dsUpdate.setColumn(nrow, "AM_JUN", this.dsList.getColumn(i, "AM_06"));
        				this.dsUpdate.setColumn(nrow, "AM_JUL", this.dsList.getColumn(i, "AM_07"));
        				this.dsUpdate.setColumn(nrow, "AM_AUG", this.dsList.getColumn(i, "AM_08"));

        				this.dsUpdate.setColumn(nrow, "AM_SEP", this.dsList.getColumn(i, "AM_09"));
        				this.dsUpdate.setColumn(nrow, "AM_OCT", this.dsList.getColumn(i, "AM_10"));
        				this.dsUpdate.setColumn(nrow, "AM_NOV", this.dsList.getColumn(i, "AM_11"));
        				this.dsUpdate.setColumn(nrow, "AM_DEC", this.dsList.getColumn(i, "AM_12"));
        				this.dsUpdate.setColumn(nrow, "DS_REM", this.dsList.getColumn(i, "DS_REM"));
         				this.dsUpdate.setColumn(nrow, "ID_UPDATE", this.AuthClient.ID_USER);

        				break;

        			case "D":
        				var nrow = this.dsDelete.addRow();
        				this.dsDelete.setColumn(nrow, "YM_BUDGET", this.dsSearch.getColumn(0, "YM_BUDGET"));
         				this.dsDelete.setColumn(nrow, "CD_DEPT", this.dsList.getColumn(i, "CD_DEPT"));
        				this.dsDelete.setColumn(nrow, "CD_ACCOUNT", this.dsList.getColumn(i, "CD_ACCOUNT"));
        				this.dsDelete.setColumn(nrow, "CD_ACTIVE", this.dsList.getColumn(i, "CD_ACTIVE"));
        				this.dsDelete.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
        				break;
        		}
        	}

        	if (this.dsInsert.rowcount == 0 && this.dsUpdate.rowcount == 0 && this.dsDelete.rowcount == 0) return;

        	var strSvcId    = "save";
        	var strSvcType  = "save";
        	var inProc		= "_dsProc";
        	var inData      = "insert=dsInsert update=dsUpdate delete=dsDelete";
        	var outData     = "";
        	var strArg      = "";
        	var callBackFnc = "fnCallback";

        	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
        						strSvcType , 	// transaction을 요청할 구분
        						inProc,			// Procedure 정보 Dataset 이름
        						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
        						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
        						callBackFnc); 	// 통신방법 정의 [생략가능]
        }


        /*
         *	엑셀 버튼
         */
        this.fnExcel = function() {
        	this.gfnExcelExport(this.dxGrid);
        }

        /*
         *	출력 버튼
         */
        this.fnPrint = function() {
        }


        this.fnSelect_Excel = function() {

        	this.dsSelect.clearData();
        	this.dsSelect.addRow();

        	this.dsSelect.setColumn(0, "YM_BUDGET", this.dsSearch.getColumn(0, "YM_BUDGET"));
        	this.dsSelect.setColumn(0, "CD_DEPT", this.dsSearch.getColumn(0, "CD_DEPT"));

        	var strSvcId    = "selectEX";
        	var strSvcType  = "grid";
        	var inProc		= "_dsProc";
        	var inData      = "select_excel=dsSelect";
        	var outData     = "dsListExcel=select_excel0";
        	var strArg      = "";
        	var callBackFnc = "fnCallback";

        	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
        						strSvcType , 	// transaction을 요청할 구분
        						inProc,			// Procedure 정보 Dataset 이름
        						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
        						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
        						callBackFnc); 	// 통신방법 정의 [생략가능]
        }

        /************************************************************************
         * Validate
         ************************************************************************/
        /*
         *	조회 Validate
         */
        this.fnSelectValidate = function() {
        	var validate = true;

        	if (this.gfnIsNull(this.dsSearch.getColumn(0,"YM_BUDGET"))) {
        		validate = false;
        		// Alert후 실행할 처리
        		this.fnVaidateCallback = function() {
        			this.ctclYM_BUDGET.setFocus();
        		}
        		this.gfnAlert("전망년월를 입력하세요.", "fnVaidateCallback");
        	}

        	return validate;
        };

        /************************************************************************
         * 콜백 이벤트
         ************************************************************************/
        /*
         *	콜백 처리
         */
        //this.fnCallback = function(svcID, errorCode, errorMsg)
        this.fnCallback = function(svcID, errorCode, errorMsg, strArg)
        {
        	if (svcID == "select") {
        		this.gfnGridAfterSelect(this.dxGrid);
        		var year = this.dsSearch.getColumn(0, "YM_BUDGET").substr(0,4);

        		var list = [];
        		for (var i = 0; i < this.dsList.rowcount; i++) {
        		    var max = 0;
        			var item = this.dsList.getColumn(i, "DS_REM");
        			var line = (this.gfnIsNull(item) == false) ? item.split("\n").length : 0 ;
        			if (line > max) {
        				max = line;
        			}
        			list.push(max);
        		}

        // 		this.fnSetCellProperty()
        // 		this.fnColor();
        	}
        	else if(svcID == "selectEX") {
        		this.gfnExcelExport(this.dxGrid);
        	}
        	else if(svcID == "save") {
        		if (errorCode == 0) {
        			this.FormBtns.Select.click();
        		} else {
        			this.gfnAlert(errorMsg);
        		}
        	}
        	else if(svcID == "create") {
        		if (errorCode == 0) {

        			this.gfnAlert("생성작업이 완료되었습니다.");

        			this.FormBtns.Select.click();
        		} else {
        			this.gfnAlert(errorMsg);
        		}
        	}
        	else if(svcID == "exec") {
        		if (errorCode == 0) {
        			//alert("callback");
        			this.fnExec1_callback = function(){
        				this.FormBtns.Select.click();
        			}

        			var json = this.gfnArgsToJson(strArg);
        			var strArg = json.gubun;

        			var msg = "";

        			msg = (strArg == "Y") ? "마감 ":"마감취소 ";
        			msg += "정상 처리되었습니다.";

        			this.gfnAlert(msg);
        			this.FormBtns.Select.click();
        		} else {
        			this.gfnAlert(errorMsg);
        		}
        	}
        }

        /*
         *	엑셀업로드 Callback
         */
        this.fnExcelImportCallback = function(sImportId, dsOut, dsSheet) {

        	//this.dsList.clearData();
        	this.gfnGridAfterSelect(this.dxGrid);
        		if (dsOut.rowcount == 0)  {
        		this.gfnAlert("엑셀파일에 내용이 없습니다.");
        		return false;
        	}


        	this.gfnGridClear(this.dxGrid);
        	this.dsList.set_enableevent(false);
        	for (var i=1; i< dsOut.rowcount; i++) {
        		if (this.gfnIsNull(dsOut.getColumnNF(i, "Column0")) && this.gfnIsNull(dsOut.getColumnNF(i, "Column4"))) { continue; }
        		var nrow = this.dsList.addRow();
        		this.dsList.setColumn(nrow, this.ucFlag, "U");


        		// 양식과 일치하지 않는 경우 아래와 같이 컬럼별로 처리.
        		this.dsList.setColumn(nrow, "CD_DEPT", dsOut.getColumnNF(i, "Column0"));
        		this.dsList.setColumn(nrow, "DS_DEPT", dsOut.getColumnNF(i, "Column1"));
        		this.dsList.setColumn(nrow, "CD_ACCOUNT", dsOut.getColumnNF(i, "Column4"));
        		this.dsList.setColumn(nrow, "DS_ACCOUNT", dsOut.getColumnNF(i, "Column5"));
        		this.dsList.setColumn(nrow, "CD_ACTIVE", dsOut.getColumnNF(i, "Column6"));
        		this.dsList.setColumn(nrow, "DS_ACTIVE", dsOut.getColumnNF(i, "Column7"));
        		this.dsList.setColumn(nrow, "AM_PROSPECT", dsOut.getColumnNF(i, "Column11"));
        		this.dsList.setColumn(nrow, "AM_01", dsOut.getColumnNF(i, "Column12"));
        		this.dsList.setColumn(nrow, "AM_02", dsOut.getColumnNF(i, "Column13"));
        		this.dsList.setColumn(nrow, "AM_03", dsOut.getColumnNF(i, "Column14"));
        		this.dsList.setColumn(nrow, "AM_04", dsOut.getColumnNF(i, "Column15"));
        		this.dsList.setColumn(nrow, "AM_05", dsOut.getColumnNF(i, "Column16"));
        		this.dsList.setColumn(nrow, "AM_06", dsOut.getColumnNF(i, "Column17"));
        		this.dsList.setColumn(nrow, "AM_07", dsOut.getColumnNF(i, "Column18"));
        		this.dsList.setColumn(nrow, "AM_08", dsOut.getColumnNF(i, "Column19"));
        		this.dsList.setColumn(nrow, "AM_09", dsOut.getColumnNF(i, "Column20"));
        		this.dsList.setColumn(nrow, "AM_10", dsOut.getColumnNF(i, "Column21"));
        		this.dsList.setColumn(nrow, "AM_11", dsOut.getColumnNF(i, "Column22"));
        		this.dsList.setColumn(nrow, "AM_12", dsOut.getColumnNF(i, "Column23"));
        		this.dsList.setColumn(nrow, "DS_REM", dsOut.getColumnNF(i, "Column24"));

        		//this.dsList.setColumn(nrow, "AM_PROSPECT", dsOut.getColumnNF(i, "Column"));
        	}

        	this.dsList.set_enableevent(true);
        	this.gfnSetFormStatus(this, "U");

        	this.fnSetButton();
        }

        /************************************************************************
         * 코드파인드 이벤트
         ************************************************************************/
        this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
        	if (id == "ccfCD_DEPT") {

        		dsUserParam.setColumn(nrow, "YR_BUDGET", this.dsSearch.getColumn(0, "YM_BUDGET").substr(0,4));
        	}
        	return true;
        }

        this.codefind_AfterCDTextChanged = function(id) {
        	//this.fnSearchInit();
        }

        this.fnGrid_BeforeUserDataSetParam = function(id, dsUserParam, nrow) {

        	// 그리드에서 코드파인드 id는 그리드셋팅의 코드파인드 식별ID
        	if (id == "DIX_ACNTUNIT_01") {
        		dsUserParam.setColumn(nrow, "YR_BUDGET", this.dsSearch.getColumn(0, "YM_BUDGET").substr(0,4));
        	}

        	else if (id == "DIX_CFBIMOK_BUDGET") {
        		if (this.gfnIsNull(this.dsSearch.getColumn(0, "YM_BUDGET"))) {
        			this.gfnAlert("전망년월를 먼저 입력하세요.");
        			return false;
        		}

        		dsUserParam.setColumn(nrow, "YR_ACCOUNT", this.dsSearch.getColumn(0, "YM_BUDGET").substr(0,4));
        	}

        	else if (id == "DIX_CFSEMOK_BUDGET") {
        		if (this.gfnIsNull(this.dsSearch.getColumn(0, "YM_BUDGET"))) {
        			this.gfnAlert("전망년월를 먼저 입력하세요.");
        			return false;
        		}
        		if (this.gfnIsNull(this.dsList.getColumn(this.dsList.rowposition, "CD_ACCOUNT"))) {
        			this.gfnAlert("비목코드를 먼저 입력하세요.");
        			return false;
        		}
        		dsUserParam.setColumn(nrow, "YR_ACCOUNT", this.dsSearch.getColumn(0, "YM_BUDGET").substr(0,4));
        		dsUserParam.setColumn(nrow, "CD_BIMOK", this.dsList.getColumn(this.dsList.rowposition, "CD_ACCOUNT"));
        	}

        	return true;
        }

        // 셀 수정가능 여부 (반드시 EnterCell에서 처리할것)
        // cell 수정안되는것만 return false 할것
        // 마지막에 return true 해버리면 전체 컬럼 수정가능해져버림

        // this.fnGrid_EnterCell = function(obj:nexacro.Grid, row, cell) {
        // 	var colnm = this.gfnGridGetBindColumnNameByIndex(obj, cell);
        // 	var ymMagam = this.dsSearch.getColumn(0, "YM_BUDGET");
        // 	var mmMagam = String(ymMagam).substr(4,2);
        //
        // 	if (nexacro.toNumber(colnm.substr(3,2)))
        // 	{
        // 		if(colnm.substr(3,2) >= mmMagam) {
        // 			return true;
        // 		} else
        // 		{ return false;}
        // 	}
        //
        // 	// 공통 > Setting > 그리드정보 에서 셋팅한 내용대로
        //
        // 	var nGrdSpcRow = this.dsGridSpec.findRow( "DS_FIELD", colnm);
        // 	var YN_READONLY = this.dsGridSpec.getColumn(nGrdSpcRow, "YN_READONLY");
        //
        // 	var rowFlag = this.gfnGetFlag(this.dsList, row);
        //
        // 	if(YN_READONLY == "N") return true;
        // 	if(YN_READONLY == "U" && rowFlag == "I"){	// flag 가 입력일때만 입력가능
        // 		return true;
        // 	}
        // 	return false;
        //
        // }
        this.fnGridEnterCell = function(obj, row, cell) {
        	var colnm = this.gfnGridGetBindColumnNameByIndex(this.dxGrid, cell);

        	//this.fnSetCellProperty();
        }
        /************************************************************************
         * 기타 이벤트
         ************************************************************************/
        this.dsSearch_onvaluechanged = function(obj,e)
        {
        	if(e.oldvalue != e.newvalue) {
        		this.gfnSetFormStatus(this);	// 폼상태 초기화
        		this.gfnGridClear(this.dxGrid);
        		//this.fnBtnEnableEventAll(false);
        		if(e.columnid == "YM_BUDGET"){
        			this.fnSetHeadTitle();
        		}
        	}
        };

        this.fnSetHeadTitle = function(){
         	var ymBudget = this.dsSearch.getColumn(0, "YM_BUDGET");

         	if(!this.gfnIsNull(ymBudget)){
         		var thisYr = ymBudget.substr(0,4);
         		var preMon = this.gfnAddMonth((ymBudget+"01"), -1);

        		var headTitle = thisYr+"년";

        		var headTitle2 = String(preMon).substr(4,2) + "월 누계실적";
        		var headTitle3 = thisYr+"년 합계";
         	}

            this.dxGrid.set_enableredraw(false);
         	this.dxGrid.setCellProperty("head", 12, "text", headTitle2);
        	this.dxGrid.setCellProperty("head", 15, "text", headTitle);
        	this.dxGrid.setCellProperty("head", 14, "text", headTitle3);

        	this.dxGrid.set_enableredraw(true);
        }

        this.fnSetCellProperty = function(){
            var mmBudget = this.dsSearch.getColumn(0, "YM_BUDGET").substr(4,2);

        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "AM_01"), "edittype", "expr: 1 < "+ mmBudget +" && nx_flag != '#' ? 'none' : 'text'");
        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "AM_02"), "edittype", "expr: 2 < "+ mmBudget +" && nx_flag != '#' ? 'none' : 'text'");
        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "AM_03"), "edittype", "expr: 3 < "+ mmBudget +" && nx_flag != '#' ? 'none' : 'text'");
        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "AM_04"), "edittype", "expr: 4 < "+ mmBudget +" && nx_flag != '#' ? 'none' : 'text'");
        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "AM_05"), "edittype", "expr: 5 < "+ mmBudget +" && nx_flag != '#' ? 'none' : 'text'");
        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "AM_06"), "edittype", "expr: 6 < "+ mmBudget +" && nx_flag != '#' ? 'none' : 'text'");
        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "AM_07"), "edittype", "expr: 7 < "+ mmBudget +" && nx_flag != '#' ? 'none' : 'text'");
        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "AM_08"), "edittype", "expr: 8 < "+ mmBudget +" && nx_flag != '#' ? 'none' : 'text'");
        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "AM_09"), "edittype", "expr: 9 < "+ mmBudget +" && nx_flag != '#' ? 'none' : 'text'");
        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "AM_10"), "edittype", "expr: 10 < "+ mmBudget +" && nx_flag != '#' ? 'none' : 'text'");
        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "AM_11"), "edittype", "expr: 11 < "+ mmBudget +" && nx_flag != '#' ? 'none' : 'text'");
        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "AM_12"), "edittype", "expr: 12 < "+ mmBudget +" && nx_flag != '#' ? 'none' : 'text'");

        }

        this.fnColor = function() {
            var mmBudget = this.dsSearch.getColumn(0, "YM_BUDGET").substr(4,2);
            this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "AM_01"), "cssclass", "expr:dataset.getRowLevel(currow) == 1 ? 'subtotal': nx_flag == '#' ? 'filter' : '01' < "+ mmBudget +"  ? 'BACK_ReadOnly' : ''");
        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "AM_02"), "cssclass", "expr:dataset.getRowLevel(currow) == 1 ? 'subtotal': nx_flag == '#' ? 'filter' : '02' < "+ mmBudget +"  ? 'BACK_ReadOnly' : ''");
        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "AM_03"), "cssclass", "expr:dataset.getRowLevel(currow) == 1 ? 'subtotal': nx_flag == '#' ? 'filter' : '03' < "+ mmBudget +"  ? 'BACK_ReadOnly' : ''");
        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "AM_04"), "cssclass", "expr:dataset.getRowLevel(currow) == 1 ? 'subtotal': nx_flag == '#' ? 'filter' : '04' < "+ mmBudget +"  ? 'BACK_ReadOnly' : ''");
        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "AM_05"), "cssclass", "expr:dataset.getRowLevel(currow) == 1 ? 'subtotal': nx_flag == '#' ? 'filter' : '05' < "+ mmBudget +"  ? 'BACK_ReadOnly' : ''");
        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "AM_06"), "cssclass", "expr:dataset.getRowLevel(currow) == 1 ? 'subtotal': nx_flag == '#' ? 'filter' : '06' < "+ mmBudget +"  ? 'BACK_ReadOnly' : ''");
        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "AM_07"), "cssclass", "expr:dataset.getRowLevel(currow) == 1 ? 'subtotal': nx_flag == '#' ? 'filter' : '07' < "+ mmBudget +"  ? 'BACK_ReadOnly' : ''");
        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "AM_08"), "cssclass", "expr:dataset.getRowLevel(currow) == 1 ? 'subtotal': nx_flag == '#' ? 'filter' : '08' < "+ mmBudget +"  ? 'BACK_ReadOnly' : ''");
        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "AM_09"), "cssclass", "expr:dataset.getRowLevel(currow) == 1 ? 'subtotal': nx_flag == '#' ? 'filter' : '09' < "+ mmBudget +"  ? 'BACK_ReadOnly' : ''");
        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "AM_10"), "cssclass", "expr:dataset.getRowLevel(currow) == 1 ? 'subtotal': nx_flag == '#' ? 'filter' : '10' < "+ mmBudget +"  ? 'BACK_ReadOnly' : ''");
        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "AM_11"), "cssclass", "expr:dataset.getRowLevel(currow) == 1 ? 'subtotal': nx_flag == '#' ? 'filter' : '11' < "+ mmBudget +"  ? 'BACK_ReadOnly' : ''");
        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "AM_12"), "cssclass", "expr:dataset.getRowLevel(currow) == 1 ? 'subtotal': nx_flag == '#' ? 'filter' : '12' < "+ mmBudget +"  ? 'BACK_ReadOnly' : ''");

        }

        this.fnCreateProspect = function(obj,e) {

        	this.gfnConfirm("해당년월의 전망자료를 삭제 후 재생성합니다. 전망자료 생성 하시겠습니까?", "fnCreate", "Create");
        };


        this.fnCreate = function (strId, val)
        {
        	if(val == true) {
        		this.fnCreateExec();
        	}
        };

        this.fnCreateExec = function() {
        	// alert(tyWrk);
        	this.dsCreateExec.clearData();

        	this.dsCreateExec.addRow();

        	var nRow = this.dsList.rowposition;

        	this.dsCreateExec.setColumn(0, "YM_BUDGET", this.dsSearch.getColumn(0, "YM_BUDGET"));
        	this.dsCreateExec.setColumn(0, "CD_DEPT", this.dsSearch.getColumn(0, "CD_DEPT"));
        	this.dsCreateExec.setColumn(0, "ID_USER", this.AuthClient.ID_USER);

        	if (this.dsCreateExec.rowcount == 0) return;

        	var strSvcId    = "create";
        	var strSvcType  = "save";
        	var inProc		= "_dsProc";
        	var inData      = "create=dsCreateExec";
        	var outData     = "";
        	var strArg      = "create=create";
        	var callBackFnc = "fnCallback";

        	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
        						strSvcType , 	// transaction을 요청할 구분
        						inProc,			// Procedure 정보 Dataset 이름
        						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
        						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
        						callBackFnc);   // 통신방법 정의 [생략가능]
        }

        this.fnbtnExcelD = function(obj,e) {
        	this.fnSelect_Excel();
        }

        this.fnbtnExcelU = function(obj,e) {
        	// this.gfnExcelImport("적용할Dataset명","sheet명","데이터시작좌표","콜백함수명","구분ID",현재폼);
        	this.gfnExcelImport("dsList","sheet1","A2","fnExcelImportCallback","import",this);

        }
        this.dsList_onvaluechanged = function(obj,e) {
        	if(e.oldvalue != e.newvalue && obj.getColumn(e.row, "nx_flag") != "#") {
        		var nrow = this.dsList.rowposition;

        		if(e.columnid == "AM_01") {
        			var am_jan = nexacro.toNumber(e.newvalue, 0);
        			var am_feb = this.gfnNvl(this.dsList.getColumn(nrow, "AM_02"), 0);
        			var am_mar = this.gfnNvl(this.dsList.getColumn(nrow, "AM_03"), 0);
        			var am_apr = this.gfnNvl(this.dsList.getColumn(nrow, "AM_04"), 0);
        			var am_may = this.gfnNvl(this.dsList.getColumn(nrow, "AM_05"), 0);
        			var am_jun = this.gfnNvl(this.dsList.getColumn(nrow, "AM_06"), 0);
        			var am_jul = this.gfnNvl(this.dsList.getColumn(nrow, "AM_07"), 0);
        			var am_aug = this.gfnNvl(this.dsList.getColumn(nrow, "AM_08"), 0);
        			var am_sep = this.gfnNvl(this.dsList.getColumn(nrow, "AM_09"), 0);
        			var am_oct = this.gfnNvl(this.dsList.getColumn(nrow, "AM_10"), 0);
        			var am_nov = this.gfnNvl(this.dsList.getColumn(nrow, "AM_11"), 0);
        			var am_dec = this.gfnNvl(this.dsList.getColumn(nrow, "AM_12"), 0);

        			this.dsList.setColumn(e.row, "AM_PROSPECT", am_jan + am_feb + am_mar + am_apr + am_may + am_jun + am_jul + am_aug + am_sep + am_oct + am_nov + am_dec);

        		}else if(e.columnid == "AM_02") {
        			var am_jan = this.gfnNvl(this.dsList.getColumn(nrow, "AM_01"), 0);
        			var am_feb = nexacro.toNumber(e.newvalue, 0);
        			var am_mar = this.gfnNvl(this.dsList.getColumn(nrow, "AM_03"), 0);
        			var am_apr = this.gfnNvl(this.dsList.getColumn(nrow, "AM_04"), 0);
        			var am_may = this.gfnNvl(this.dsList.getColumn(nrow, "AM_05"), 0);
        			var am_jun = this.gfnNvl(this.dsList.getColumn(nrow, "AM_06"), 0);
        			var am_jul = this.gfnNvl(this.dsList.getColumn(nrow, "AM_07"), 0);
        			var am_aug = this.gfnNvl(this.dsList.getColumn(nrow, "AM_08"), 0);
        			var am_sep = this.gfnNvl(this.dsList.getColumn(nrow, "AM_09"), 0);
        			var am_oct = this.gfnNvl(this.dsList.getColumn(nrow, "AM_10"), 0);
        			var am_nov = this.gfnNvl(this.dsList.getColumn(nrow, "AM_11"), 0);
        			var am_dec = this.gfnNvl(this.dsList.getColumn(nrow, "AM_12"), 0);

        			this.dsList.setColumn(e.row, "AM_PROSPECT", am_jan + am_feb + am_mar + am_apr + am_may + am_jun + am_jul + am_aug + am_sep + am_oct + am_nov + am_dec);

        		}else if(e.columnid == "AM_03") {
        			var am_jan = this.gfnNvl(this.dsList.getColumn(nrow, "AM_01"), 0);
        			var am_feb = this.gfnNvl(this.dsList.getColumn(nrow, "AM_02"), 0);
        			var am_mar = nexacro.toNumber(e.newvalue, 0);
        			var am_apr = this.gfnNvl(this.dsList.getColumn(nrow, "AM_04"), 0);
        			var am_may = this.gfnNvl(this.dsList.getColumn(nrow, "AM_05"), 0);
        			var am_jun = this.gfnNvl(this.dsList.getColumn(nrow, "AM_06"), 0);
        			var am_jul = this.gfnNvl(this.dsList.getColumn(nrow, "AM_07"), 0);
        			var am_aug = this.gfnNvl(this.dsList.getColumn(nrow, "AM_08"), 0);
        			var am_sep = this.gfnNvl(this.dsList.getColumn(nrow, "AM_09"), 0);
        			var am_oct = this.gfnNvl(this.dsList.getColumn(nrow, "AM_10"), 0);
        			var am_nov = this.gfnNvl(this.dsList.getColumn(nrow, "AM_11"), 0);
        			var am_dec = this.gfnNvl(this.dsList.getColumn(nrow, "AM_12"), 0);

        			this.dsList.setColumn(e.row, "AM_PROSPECT", am_jan + am_feb + am_mar + am_apr + am_may + am_jun + am_jul + am_aug + am_sep + am_oct + am_nov + am_dec);

        		}else if(e.columnid == "AM_04") {
        			var am_jan = this.gfnNvl(this.dsList.getColumn(nrow, "AM_01"), 0);
        			var am_feb = this.gfnNvl(this.dsList.getColumn(nrow, "AM_02"), 0);
        			var am_mar = this.gfnNvl(this.dsList.getColumn(nrow, "AM_03"), 0);
        			var am_apr = nexacro.toNumber(e.newvalue, 0);
        			var am_may = this.gfnNvl(this.dsList.getColumn(nrow, "AM_05"), 0);
        			var am_jun = this.gfnNvl(this.dsList.getColumn(nrow, "AM_06"), 0);
        			var am_jul = this.gfnNvl(this.dsList.getColumn(nrow, "AM_07"), 0);
        			var am_aug = this.gfnNvl(this.dsList.getColumn(nrow, "AM_08"), 0);
        			var am_sep = this.gfnNvl(this.dsList.getColumn(nrow, "AM_09"), 0);
        			var am_oct = this.gfnNvl(this.dsList.getColumn(nrow, "AM_10"), 0);
        			var am_nov = this.gfnNvl(this.dsList.getColumn(nrow, "AM_11"), 0);
        			var am_dec = this.gfnNvl(this.dsList.getColumn(nrow, "AM_12"), 0);

        			this.dsList.setColumn(e.row, "AM_PROSPECT", am_jan + am_feb + am_mar + am_apr + am_may + am_jun + am_jul + am_aug + am_sep + am_oct + am_nov + am_dec);

        		}else if(e.columnid == "AM_05") {
        			var am_jan = this.gfnNvl(this.dsList.getColumn(nrow, "AM_01"), 0);
        			var am_feb = this.gfnNvl(this.dsList.getColumn(nrow, "AM_02"), 0);
        			var am_mar = this.gfnNvl(this.dsList.getColumn(nrow, "AM_03"), 0);
        			var am_apr = this.gfnNvl(this.dsList.getColumn(nrow, "AM_04"), 0);
        			var am_may = nexacro.toNumber(e.newvalue, 0);
        			var am_jun = this.gfnNvl(this.dsList.getColumn(nrow, "AM_06"), 0);
        			var am_jul = this.gfnNvl(this.dsList.getColumn(nrow, "AM_07"), 0);
        			var am_aug = this.gfnNvl(this.dsList.getColumn(nrow, "AM_08"), 0);
        			var am_sep = this.gfnNvl(this.dsList.getColumn(nrow, "AM_09"), 0);
        			var am_oct = this.gfnNvl(this.dsList.getColumn(nrow, "AM_10"), 0);
        			var am_nov = this.gfnNvl(this.dsList.getColumn(nrow, "AM_11"), 0);
        			var am_dec = this.gfnNvl(this.dsList.getColumn(nrow, "AM_12"), 0);


        			this.dsList.setColumn(e.row, "AM_PROSPECT", am_jan + am_feb + am_mar + am_apr + am_may + am_jun + am_jul + am_aug + am_sep + am_oct + am_nov + am_dec);

        		}else if(e.columnid == "AM_06") {

        			var am_jan = this.gfnNvl(this.dsList.getColumn(nrow, "AM_01"), 0);
        			var am_feb = this.gfnNvl(this.dsList.getColumn(nrow, "AM_02"), 0);
        			var am_mar = this.gfnNvl(this.dsList.getColumn(nrow, "AM_03"), 0);
        			var am_apr = this.gfnNvl(this.dsList.getColumn(nrow, "AM_04"), 0);
        			var am_may = this.gfnNvl(this.dsList.getColumn(nrow, "AM_05"), 0);
        			var am_jun = nexacro.toNumber(e.newvalue, 0);
        			var am_jul = this.gfnNvl(this.dsList.getColumn(nrow, "AM_07"), 0);
        			var am_aug = this.gfnNvl(this.dsList.getColumn(nrow, "AM_08"), 0);
        			var am_sep = this.gfnNvl(this.dsList.getColumn(nrow, "AM_09"), 0);
        			var am_oct = this.gfnNvl(this.dsList.getColumn(nrow, "AM_10"), 0);
        			var am_nov = this.gfnNvl(this.dsList.getColumn(nrow, "AM_11"), 0);
        			var am_dec = this.gfnNvl(this.dsList.getColumn(nrow, "AM_12"), 0);

        			this.dsList.setColumn(e.row, "AM_PROSPECT", am_jan + am_feb + am_mar + am_apr + am_may + am_jun + am_jul + am_aug + am_sep + am_oct + am_nov + am_dec);

        		}else if(e.columnid == "AM_07") {
        			var am_jan = this.gfnNvl(this.dsList.getColumn(nrow, "AM_01"), 0);
        			var am_feb = this.gfnNvl(this.dsList.getColumn(nrow, "AM_02"), 0);
        			var am_mar = this.gfnNvl(this.dsList.getColumn(nrow, "AM_03"), 0);
        			var am_apr = this.gfnNvl(this.dsList.getColumn(nrow, "AM_04"), 0);
        			var am_may = this.gfnNvl(this.dsList.getColumn(nrow, "AM_05"), 0);
        			var am_jun = this.gfnNvl(this.dsList.getColumn(nrow, "AM_06"), 0);
        			var am_jul = nexacro.toNumber(e.newvalue, 0);
        			var am_aug = this.gfnNvl(this.dsList.getColumn(nrow, "AM_08"), 0);
        			var am_sep = this.gfnNvl(this.dsList.getColumn(nrow, "AM_09"), 0);
        			var am_oct = this.gfnNvl(this.dsList.getColumn(nrow, "AM_10"), 0);
        			var am_nov = this.gfnNvl(this.dsList.getColumn(nrow, "AM_11"), 0);
        			var am_dec = this.gfnNvl(this.dsList.getColumn(nrow, "AM_12"), 0);

        			this.dsList.setColumn(e.row, "AM_PROSPECT", am_jan + am_feb + am_mar + am_apr + am_may + am_jun + am_jul + am_aug + am_sep + am_oct + am_nov + am_dec);

        		}else if(e.columnid == "AM_08") {
        			var am_jan = this.gfnNvl(this.dsList.getColumn(nrow, "AM_01"), 0);
        			var am_feb = this.gfnNvl(this.dsList.getColumn(nrow, "AM_02"), 0);
        			var am_mar = this.gfnNvl(this.dsList.getColumn(nrow, "AM_03"), 0);
        			var am_apr = this.gfnNvl(this.dsList.getColumn(nrow, "AM_04"), 0);
        			var am_may = this.gfnNvl(this.dsList.getColumn(nrow, "AM_05"), 0);
        			var am_jun = this.gfnNvl(this.dsList.getColumn(nrow, "AM_06"), 0);
        			var am_jul = this.gfnNvl(this.dsList.getColumn(nrow, "AM_07"), 0);
        			var am_aug = nexacro.toNumber(e.newvalue, 0);
        			var am_sep = this.gfnNvl(this.dsList.getColumn(nrow, "AM_09"), 0);
        			var am_oct = this.gfnNvl(this.dsList.getColumn(nrow, "AM_10"), 0);
        			var am_nov = this.gfnNvl(this.dsList.getColumn(nrow, "AM_11"), 0);
        			var am_dec = this.gfnNvl(this.dsList.getColumn(nrow, "AM_12"), 0);

        			this.dsList.setColumn(e.row, "AM_PROSPECT", am_jan + am_feb + am_mar + am_apr + am_may + am_jun + am_jul + am_aug + am_sep + am_oct + am_nov + am_dec);

        		}else if(e.columnid == "AM_09") {
        			var am_jan = this.gfnNvl(this.dsList.getColumn(nrow, "AM_01"), 0);
        			var am_feb = this.gfnNvl(this.dsList.getColumn(nrow, "AM_02"), 0);
        			var am_mar = this.gfnNvl(this.dsList.getColumn(nrow, "AM_03"), 0);
        			var am_apr = this.gfnNvl(this.dsList.getColumn(nrow, "AM_04"), 0);
        			var am_may = this.gfnNvl(this.dsList.getColumn(nrow, "AM_05"), 0);
        			var am_jun = this.gfnNvl(this.dsList.getColumn(nrow, "AM_06"), 0);
        			var am_jul = this.gfnNvl(this.dsList.getColumn(nrow, "AM_07"), 0);
        			var am_aug = this.gfnNvl(this.dsList.getColumn(nrow, "AM_08"), 0);
        			var am_sep = nexacro.toNumber(e.newvalue, 0);
        			var am_oct = this.gfnNvl(this.dsList.getColumn(nrow, "AM_10"), 0);
        			var am_nov = this.gfnNvl(this.dsList.getColumn(nrow, "AM_11"), 0);
        			var am_dec = this.gfnNvl(this.dsList.getColumn(nrow, "AM_12"), 0);

        			this.dsList.setColumn(e.row, "AM_PROSPECT", am_jan + am_feb + am_mar + am_apr + am_may + am_jun + am_jul + am_aug + am_sep + am_oct + am_nov + am_dec);

        		}else if(e.columnid == "AM_10") {
        			var am_jan = this.gfnNvl(this.dsList.getColumn(nrow, "AM_01"), 0);
        			var am_feb = this.gfnNvl(this.dsList.getColumn(nrow, "AM_02"), 0);
        			var am_mar = this.gfnNvl(this.dsList.getColumn(nrow, "AM_03"), 0);
        			var am_apr = this.gfnNvl(this.dsList.getColumn(nrow, "AM_04"), 0);
        			var am_may = this.gfnNvl(this.dsList.getColumn(nrow, "AM_05"), 0);
        			var am_jun = this.gfnNvl(this.dsList.getColumn(nrow, "AM_06"), 0);
        			var am_jul = this.gfnNvl(this.dsList.getColumn(nrow, "AM_07"), 0);
        			var am_aug = this.gfnNvl(this.dsList.getColumn(nrow, "AM_08"), 0);
        			var am_sep = this.gfnNvl(this.dsList.getColumn(nrow, "AM_09"), 0);
        			var am_oct = nexacro.toNumber(e.newvalue, 0);
        			var am_nov = this.gfnNvl(this.dsList.getColumn(nrow, "AM_11"), 0);
        			var am_dec = this.gfnNvl(this.dsList.getColumn(nrow, "AM_12"), 0);

        			this.dsList.setColumn(e.row, "AM_PROSPECT", am_jan + am_feb + am_mar + am_apr + am_may + am_jun + am_jul + am_aug + am_sep + am_oct + am_nov + am_dec);
        		}else if(e.columnid == "AM_11") {
        			var am_jan = this.gfnNvl(this.dsList.getColumn(nrow, "AM_01"), 0);
        			var am_feb = this.gfnNvl(this.dsList.getColumn(nrow, "AM_02"), 0);
        			var am_mar = this.gfnNvl(this.dsList.getColumn(nrow, "AM_03"), 0);
        			var am_apr = this.gfnNvl(this.dsList.getColumn(nrow, "AM_04"), 0);
        			var am_may = this.gfnNvl(this.dsList.getColumn(nrow, "AM_05"), 0);
        			var am_jun = this.gfnNvl(this.dsList.getColumn(nrow, "AM_06"), 0);
        			var am_jul = this.gfnNvl(this.dsList.getColumn(nrow, "AM_07"), 0);
        			var am_aug = this.gfnNvl(this.dsList.getColumn(nrow, "AM_08"), 0);
        			var am_sep = this.gfnNvl(this.dsList.getColumn(nrow, "AM_09"), 0);
        			var am_oct = this.gfnNvl(this.dsList.getColumn(nrow, "AM_10"), 0);
        			var am_nov = nexacro.toNumber(e.newvalue, 0);
        			var am_dec = this.gfnNvl(this.dsList.getColumn(nrow, "AM_12"), 0);

        			this.dsList.setColumn(e.row, "AM_PROSPECT", am_jan + am_feb + am_mar + am_apr + am_may + am_jun + am_jul + am_aug + am_sep + am_oct + am_nov + am_dec);
        		}else if(e.columnid == "AM_12") {
        			var am_jan = this.gfnNvl(this.dsList.getColumn(nrow, "AM_01"), 0);
        			var am_feb = this.gfnNvl(this.dsList.getColumn(nrow, "AM_02"), 0);
        			var am_mar = this.gfnNvl(this.dsList.getColumn(nrow, "AM_03"), 0);
        			var am_apr = this.gfnNvl(this.dsList.getColumn(nrow, "AM_04"), 0);
        			var am_may = this.gfnNvl(this.dsList.getColumn(nrow, "AM_05"), 0);
        			var am_jun = this.gfnNvl(this.dsList.getColumn(nrow, "AM_06"), 0);
        			var am_jul = this.gfnNvl(this.dsList.getColumn(nrow, "AM_07"), 0);
        			var am_aug = this.gfnNvl(this.dsList.getColumn(nrow, "AM_08"), 0);
        			var am_sep = this.gfnNvl(this.dsList.getColumn(nrow, "AM_09"), 0);
        			var am_oct = this.gfnNvl(this.dsList.getColumn(nrow, "AM_10"), 0);
        			var am_nov = this.gfnNvl(this.dsList.getColumn(nrow, "AM_11"), 0);
        			var am_dec = nexacro.toNumber(e.newvalue, 0);

        			this.dsList.setColumn(e.row, "AM_PROSPECT", am_jan + am_feb + am_mar + am_apr + am_may + am_jun + am_jul + am_aug + am_sep + am_oct + am_nov + am_dec);
        		}
        	}
        }

        });
        
        // Regist UI Components Event
        this.on_initEvent = function()
        {
            this.addEventHandler("onload",this.form_onload,this);
            this.dsList.addEventHandler("onvaluechanged",this.dsList_onvaluechanged,this);
            this.dsSearch.addEventHandler("onvaluechanged",this.dsSearch_onvaluechanged,this);
        };
        this.loadIncludeScript("DIQ_SILJUK_PROSPECT.xfdl");
        this.loadPreloadList();
        
        // Remove Reference
        obj = null;
    };
}
)();
