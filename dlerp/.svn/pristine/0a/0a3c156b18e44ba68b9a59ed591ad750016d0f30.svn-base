<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="form" width="1280" height="720" titletext="보증등록" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0" top="0" height="46.0" right="0" cssclass="div_SEARCH_Bg">
          <Layouts>
            <Layout>
              <Static id="staCD_CORP" taborder="0" text="법인" left="0" top="10.0" width="66" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfCD_CORP" CDTextWidth="50" taborder="1" left="staCD_CORP:0.0" top="10.0" width="200" height="24.0" url="cmm::cmmCodeFind.xfdl" CodeFindName="DAX_CFCORP" BeforeUserDataSetParam="fnBeforeUserDataSetParam" AfterCDTextChanged="fnAfterCDTextChanged"/>
              <Static id="staID_SABUN" taborder="2" text="성명" left="ccfCD_CORP:0.0" top="10.0" width="66" height="24.0" usedecorate="false" cssclass="sta_WF_SchLabel"/>
              <Div id="ccfID_SABUN" CodeFindName="DAX_CFBASEINFO_ALL" CDTextWidth="90" taborder="3" left="staID_SABUN:0.0" top="10.0" width="200" height="24.0" url="cmm::cmmCodeFind.xfdl" onvaluechanged="dsSearch_onvaluechanged"/>
              <Edit id="txtID_PERSON" taborder="4" left="ccfID_SABUN:10" top="10.0" width="150" height="24.0" visible="false" enable="false"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0" oncellclick="divData_objGrid_oncellclick"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Objects>
      <Dataset id="dsList" onvaluechanged="dsList_onvaluechanged"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DAAPR_PRIZE_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">save</Col>
            <Col id="SP">DAAPR_PRIZE_SAVE</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_CORP" type="STRING" size="256"/>
          <Column id="DS_CORP" type="STRING" size="256"/>
          <Column id="ID_SABUN" type="STRING" size="256"/>
          <Column id="DS_HNAME" type="STRING" size="256"/>
          <Column id="ID_PERSON" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CD_CORP"/>
          </Row>
        </Rows>
      </Dataset>
    </Objects>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);
	this.gfnFormInfo(this);
	// ---------------------------//

	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();

	// 법인코드 및 법인명 기본세팅
	this.ccfCD_CORP.form.CDTextBox.set_value(this.AuthClient.CD_CORP);
    this.ccfCD_CORP.form.DSTextBox.set_value(this.AuthClient.DS_CORP);
	
	this.FormBtns.Select.click();

};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
	// Select, Add, Del, Save, Excel, Print
	// SubSelect, SubAdd, SubDel, SuubSave, SubExcel
	// this.FormBtns.Add.set_enable(false);
	// this.FormBtns.Del.set_enable(false);
	this.FormBtns.Reset.set_enable(true);
};

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btnFormButton = this.gfnFormButtonAdd("ExcelUpload", "fnExcelUpload", "엑셀 업로드");
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.ccfCD_CORP = this.divSearch.form.ccfCD_CORP; 			// 법인코드
	this.ccfID_SABUN = this.divSearch.form.ccfID_SABUN;			// 사번
	this.txtID_PERSON = this.divSearch.form.txtID_PERSON;

	this.dxGrid = this.divData.form.objGrid;

	this.grSearch = this.FormInfo.GR_SEARCH;					// 권한
	this.cdGroup = this.AuthClient.CD_GROUP;					// 그룹코드
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {

	this.gfnGridInit(this.dxGrid, this.dsList, "DA", "DAA_PRIZE");
	
	// 조회조건
	this.ccfCD_CORP.AfterCDTextChanged = "fnAfterCDTextChanged";
	this.ccfID_SABUN.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.ccfID_SABUN.AfterCDTextChanged = "fnAfterCDTextChanged";

	//그리드 코드파인드
	this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforeUserDataSetParam";
	this.dxGrid.AfterCDTextChanged = "fnGrid_AfterCDTextChanged";

};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	// sp의 input 파라미터
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("ID_PERSON", "string");  //PERSON ID
	this.dsSelect.addColumn("CD_CORP", "string");   //법인
	this.dsSelect.addColumn("ID_SABUN", "string");

	this.dsSave = new Dataset();
	this.dsSave.addColumn("TY_SAVE", "string");
	this.dsSave.addColumn("ID_PERSON", "bigdecimal");
	this.dsSave.addColumn("NO_SEQ", "bigdecimal");
	this.dsSave.addColumn("CD_CORP", "string");
	this.dsSave.addColumn("ID_SABUN", "string");
	this.dsSave.addColumn("CD_DEPT", "string");
	this.dsSave.addColumn("NO_PRIZE", "string");
	this.dsSave.addColumn("TY_INOUT", "string");
	this.dsSave.addColumn("DT_PRIZE", "string");
	this.dsSave.addColumn("DS_PRIZE", "string");
	this.dsSave.addColumn("DS_REASON", "string");
	this.dsSave.addColumn("DS_ORGAN", "string");
	this.dsSave.addColumn("AM_PRIZE", "bigdecimal");
	this.dsSave.addColumn("DS_REMARK", "string");
	this.dsSave.addColumn("ID_INSERT", "string");
};

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {

	if (!this.fnSelectValidate()) return false;

	this.gfnGridBeforeSelect(this.dxGrid);

	this.dsSelect.clearData();
	this.dsSelect.addRow();
	
	this.dsSelect.setColumn(0, "ID_PERSON", this.dsSearch.getColumn(0, "ID_PERSON"));
	this.dsSelect.setColumn(0, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
	this.dsSelect.setColumn(0, "ID_SABUN", this.dsSearch.getColumn(0, "ID_SABUN"));

	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";

	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// trabsaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 	    // 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); 	// 통신방법 정의 [생략가능]
};

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	//this.gfnGridAdd(this.dxGrid);
	var nrow = this.gfnGridAdd(this.dxGrid,"Top");
	this.dsList.setColumn(nrow, "CD_CORP"   , this.dsSearch.getColumn(0, "CD_CORP"));
	this.dsList.setColumn(nrow, "DS_CORP"   , this.dsSearch.getColumn(0, "DS_CORP"));
	
	this.dsList.setColumn(nrow, "ID_SABUN"   , this.dsSearch.getColumn(0, "ID_SABUN"));
	this.dsList.setColumn(nrow, "DS_HNAME"   , this.dsSearch.getColumn(0, "DS_HNAME"));
};

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
};

/*
 *	저장 버튼
 */
this.fnSave = function() {
	// 그리드 필수항목 체크
	if (!this.gfnGridValidate(this.dxGrid)) return;

	this.dxGrid.updateToDataset();

	this.dsSave.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "I":
			case "U":
			case "D":
				var nrow = this.dsSave.addRow();

				this.dsSave.setColumn(nrow, "TY_SAVE", flag);
				this.dsSave.setColumn(nrow, "ID_PERSON", this.dsList.getColumn(i, "ID_PERSON"));
				this.dsSave.setColumn(nrow, "NO_SEQ", this.dsList.getColumn(i, "NO_SEQ"));
				this.dsSave.setColumn(nrow, "CD_CORP", this.dsList.getColumn(i, "CD_CORP"));
				this.dsSave.setColumn(nrow, "ID_SABUN", this.dsList.getColumn(i, "ID_SABUN"));
				this.dsSave.setColumn(nrow, "CD_DEPT", this.dsList.getColumn(i, "CD_DEPT"));
				this.dsSave.setColumn(nrow, "NO_PRIZE", this.dsList.getColumn(i, "NO_PRIZE"));
				this.dsSave.setColumn(nrow, "TY_INOUT", this.dsList.getColumn(i, "TY_INOUT"));
				this.dsSave.setColumn(nrow, "DT_PRIZE", this.dsList.getColumn(i, "DT_PRIZE"));
				this.dsSave.setColumn(nrow, "DS_PRIZE", this.dsList.getColumn(i, "DS_PRIZE"));
				this.dsSave.setColumn(nrow, "DS_REASON", this.dsList.getColumn(i, "DS_REASON"));
				this.dsSave.setColumn(nrow, "DS_ORGAN", this.dsList.getColumn(i, "DS_ORGAN"));
				this.dsSave.setColumn(nrow, "AM_PRIZE", this.dsList.getColumn(i, "AM_PRIZE"));
				this.dsSave.setColumn(nrow, "DS_REMARK", this.dsList.getColumn(i, "DS_REMARK"));
				this.dsSave.setColumn(nrow, "ID_INSERT", this.AuthClient.ID_USER);		
				break;			
		}
	}

	if (this.dsSave.rowcount == 0) return;

	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "save=dsSave";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";

	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); 	// 통신방법 정의 [생략가능]
};

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
	
// 	if(this.dxGrid.yn_filter == "Y") {
// 		this.dsList.set_enableevent(false);
// 		this.dsList.deleteRow(0);
// 		this.dsList.set_enableevent(true);
// 	}
// 
// 	this.gfnGridInit(this.dxGrid, this.dsList, "DA", "DAA_PRIZE_EXCEL");
// 	
// 	this.gfnExcelExport(this.dxGrid);
// 
// 	this.gfnGridInit(this.dxGrid, this.dsList, "DA", "DAA_PRIZE");
	
};

/*
 *	출력 버튼
 */
this.fnPrint = function() {
};

/*
 *	Reset 버튼
 */
this.fnReset = function() {

	this.ccfCD_CORP.form.CDTextBox.set_value("");
	this.ccfCD_CORP.form.DSTextBox.set_value("");
	this.ccfID_SABUN.form.DSTextBox.set_value('');
	this.ccfID_SABUN.form.CDTextBox.set_value('');
	
	this.fnSearchInit();
};
/************************************************************************
 * Validate
 ************************************************************************/
this.fnSelectValidate = function() {

 	if (this.gfnIsNull(this.ccfCD_CORP.form.CDTextBox.value)) {
 		this.fnVaidateCallback = function() {
 			this.ccfCD_CORP.form.CDTextBox.setFocus();
 		}
 		this.gfnAlert("법인코드를 입력하세요.", "fnVaidateCallback");
 		return false;
 	}

	return true;
};
/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);
		this.fnSetButton();
	}
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
};

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	if (id == "ccfCD_CORP") { // 법인코드
		dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
		dsUserParam.setColumn(nrow, "CD_DEPT", this.AuthClient.CD_DEPT);
	}
	else if(id == "ccfID_SABUN"){ //사원정보
		if(this.gfnIsNull(this.ccfCD_CORP.form.CDTextBox.value)){
			this.fnAlertAfter = function(){
				this.ccfCD_CORP.form.CDTextBox.setFocus();
			}
			this.gfnAlert("소속법인을 선택하세요", "fnAlertAfter");
			return;
		}
		
		dsUserParam.setColumn(nrow, "CD_CORP", this.ccfCD_CORP.form.CDTextBox.value);
		dsUserParam.setColumn(nrow, "GR_SEARCH",this.FormInfo.GR_SEARCH);
		dsUserParam.setColumn(nrow, "CD_DEPT", this.AuthClient.CD_DEPT);
		dsUserParam.setColumn(nrow, "YN_CORP", "N");	// 법인무관(Y: 법인에 관계없이 직원검색 N:조건의 법인의 임직원만 검색)
		dsUserParam.setColumn(nrow, "TY_RETIRE", "");	// 01 재직 02 휴직 04 퇴직 % :전체		
	}
 	return true;
};

this.fnAfterCDTextChanged = function(id, codeFindData) {
	this.fnSearchInit();
	if(id == "ccfCD_CORP") {
		this.ccfID_SABUN.form.fnCodeFindClear();
		this.txtID_PERSON.set_value("");
	} else if (id == "ccfID_SABUN") {
		var arr = codeFindData;
		if(arr.length > 0) {
			this.txtID_PERSON.set_value(arr[0]["ID_PERSON"]);
			this.ccfCD_CORP.form.CDTextBox.set_value(arr[0]["CD_CORP"]);
			this.ccfCD_CORP.form.DSTextBox.set_value(arr[0]["DS_CORP"]);
			
			this.FormBtns.Select.click();
		}else{
			this.txtID_PERSON.set_value("");
		}
	}
};
//그리드 코드 파인드
this.fnGrid_BeforeUserDataSetParam = function(id, dsUserParam, nrow){

	switch(id) {
		case "DAX_CFCORP":
			dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
			dsUserParam.setColumn(nrow, "CD_DEPT", this.AuthClient.CD_DEPT);
			break;
		case "DAX_CFBASEINFO_ALL":
			dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
			dsUserParam.setColumn(nrow, "CD_CORP", this.AuthClient.CD_CORP);			
			dsUserParam.setColumn(nrow, "CD_DEPT", "%");
			dsUserParam.setColumn(nrow, "YN_CORP", "Y");
			dsUserParam.setColumn(nrow, "TY_RETIRE", "%");	// 재직구분
			break;

		default:
	}

	return true;
};

this.fnGrid_AfterCDTextChanged = function(id, codeFindData) {

	//그리드 Rowposition
	var arr = codeFindData;

	switch(id) {
		case "DAX_CFCORP":
			this.dsList.setColumn(this.dsList.rowposition, "CD_DEPT", "");
			this.dsList.setColumn(this.dsList.rowposition, "DS_DEPT", "");
			this.dsList.setColumn(this.dsList.rowposition, "ID_SABUN", "");
			this.dsList.setColumn(this.dsList.rowposition, "DS_HNAME", "");
			break;
		case "DAX_CFBASEINFO_ALL":
 			this.dsList.setColumn(this.dsList.rowposition, "CD_CORP", arr[0]["CD_CORP"]);
 			this.dsList.setColumn(this.dsList.rowposition, "DS_CORP", arr[0]["DS_CORP"]);
			break;
		default:
	}

};

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/

 /************************************************************************
 * 확장버튼 이벤트
 ************************************************************************/

/************************************************************************
 * 기타 이벤트
 ************************************************************************/
/*
 *	조회 조건 변경시 초기화
 */
this.fnSearchInit = function(obj,e) {
	if(e == null || (e.pretext != e.posttext)) {
		// 폼상태 초기화
		this.gfnSetFormStatus(this);
		this.gfnGridClear(this.dxGrid);
	}
};

/*
 *	엑셀업로드
 */
this.fnExcelUpload = function() {
	// this.gfnExcelImport("적용할Dataset명","sheet명","데이터시작좌표","콜백함수명","구분ID",현재폼);
	// sheet명 없으면 첫번째 sheet
	this.gfnExcelImport("dsList","Sheet1","A2","fnExcelImportCallback","import",this);
};

this.fnExcelImportCallback = function(sImportId, dsOut, dsSheet) {
   // 다중 시트 처리시 양식의 해당 시트여부를 체크하고자 할땐 dsSheet 시트명 체크
//    if (dsSheet.rowcount > 1) {
//       trace(dsSheet.getColumn(1, "sheetname"));
//    }

   // 엑셀 양식과 그리드 컬럼이 그대로 일치 하는경우 아래와 같이 처리.
   // 아닌경우는 이부분 주석처리
//    for (var i=0; i< this.dsList.getColCount(); i++)
//    {
//       sColumnId = "Column"+i;
//       var sColumnNm = this.gfnGridGetBindColumnNameByIndex(this.dxGrid, i);
//       if (sColumnNm != "" && sColumnId != sColumnNm)
//       {
//          dsOut.updateColID(sColumnId, sColumnNm);
//       }
//    }

	// 양식이 일치하고 엑셀내역을 기존데이터에 Insert하지 않고
	// 엑셀내역 그대로 그리드 반영할 시 copyData
	//this.dsList.copyData(dsOut);

	//Import 된 사번 검증하기 위해
	//this.dsList.set_enableevent(false);
	
	
	//var cd_corp = this.ccfCD_CORP.form.CDTextBox.value;
	var cd_corp = this.dsSearch.getColumn(0, "CD_CORP");
	var ds_corp = this.dsSearch.getColumn(0, "DS_CORP");
	
	for (var i=0; i<dsOut.rowcount; i++) {
		var nrow = this.dsList.addRow();
		this.dsList.setColumn(nrow, this.ucFlag, "I");

		for (var j=0; j< dsOut.colcount; j++) {
			if (!this.gfnIsNull(dsOut.getColumn(i,j)) ){
				dsOut.setColumn(i,j,nexacro.trim(dsOut.getColumn(i,j)));
				var strColID = dsOut.getColID( j );
				//날짜 형식 수정
				if ( strColID == "Column5"){
					dsOut.setColumn(i,j,dsOut.getColumn(i,j).replace(/[^0-9]/g,''));
				}
			}
		}
		// 양식이 일치하는 경우 copyRow
		//this.dsList.copyRow(nrow, dsOut, i);

	// 조회 조건에 있는 법인명으로 셋팅....
		
   // 양식과 일치하지 않는 경우 아래와 같이 컬럼별로 처리.
   
	//this.dsList.setColumn(nrow, "CD_CORP", dsOut.getColumn(i, "Column0"));
	//this.dsList.setColumn(nrow, "DS_CORP", dsOut.getColumn(i, "Column1"));
   this.dsList.setColumn(nrow, "CD_CORP", cd_corp);
   this.dsList.setColumn(nrow, "DS_CORP", ds_corp);   
   this.dsList.setColumn(nrow, "ID_SABUN", dsOut.getColumn(i, "Column0"));
   this.dsList.setColumn(nrow, "DS_HNAME", dsOut.getColumn(i, "Column1"));
   this.dsList.setColumn(nrow, "CD_DEPT", dsOut.getColumn(i, "Column2"));
   this.dsList.setColumn(nrow, "DS_DEPT", dsOut.getColumn(i, "Column3"));
	if (dsOut.getColumn(i, "Column4") == "사내") {
		this.dsList.setColumn(nrow, "TY_INOUT", "I");		// 사내(I)사외(O)구분
	} else {
		this.dsList.setColumn(nrow, "TY_INOUT", "O");		// 사내(I)사외(O)구분
	}
   this.dsList.setColumn(nrow, "DT_PRIZE", dsOut.getColumn(i, "Column5"));		// 포상일자
   this.dsList.setColumn(nrow, "NO_PRIZE", dsOut.getColumn(i, "Column6"));		// 포상번호   
   this.dsList.setColumn(nrow, "DS_PRIZE", dsOut.getColumn(i, "Column7"));		// 포상명
   this.dsList.setColumn(nrow, "DS_REASON", dsOut.getColumn(i, "Column8"));	// 포상요약
   this.dsList.setColumn(nrow, "DS_ORGAN", dsOut.getColumn(i, "Column9"));		// 포상기관
   this.dsList.setColumn(nrow, "AM_PRIZE", dsOut.getColumn(i, "Column10"));		// 포상금액
   this.dsList.setColumn(nrow, "DS_REMARK", dsOut.getColumn(i, "Column11"));	// 비고

   }
   //Import 된 사번 검증하기 위해
   //this.dsList.set_enableevent(true);
   this.gfnSetFormStatus(this, "I");
};

this.dsList_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	this.fnSetButton();
};
]]></Script>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfCD_CORP.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_CORP"/>
      <BindItem id="item1" compid="divSearch.form.ccfCD_CORP.form.DSTextBox" propid="value" datasetid="dsSearch" columnid="DS_CORP"/>
      <BindItem id="item2" compid="divSearch.form.ccfID_SABUN.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="ID_SABUN"/>
      <BindItem id="item3" compid="divSearch.form.ccfID_SABUN.form.DSTextBox" propid="value" datasetid="dsSearch" columnid="DS_HNAME"/>
      <BindItem id="item4" compid="divSearch.form.txtID_PERSON" propid="value" datasetid="dsSearch" columnid="ID_PERSON"/>
    </Bind>
  </Form>
</FDL>
