<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1400" height="720" titletext="분양수익금관리" onload="form_onload">
    <Layouts>
      <Layout stepcount="0">
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg">
          <Layouts>
            <Layout>
              <Static id="staCD_CORP" taborder="0" text="법인코드" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfCD_CORP" CodeFindName="DHX_CFCORP" CDTextWidth="50" taborder="1" left="staCD_CORP:0.0" top="10.0" width="278" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
              <Static id="sta00" taborder="0" text="회계년월" left="ccfCD_CORP:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ctclYM_ACCOUNT" taborder="1" left="sta00:0.0" top="10.0" width="80" height="24.0" url="cmm::cmmCalMM.xfdl"/>
              <Static id="sta01" taborder="3" text="결산기준" left="ctclYM_ACCOUNT:0.0" top="10.0" width="92.0" height="24.0" visible="false" cssclass="sta_WF_SchLabelE"/>
              <Combo id="ccboTY_IFRS" taborder="3" left="sta01:0.0" top="10.0" width="100" height="24.0" innerdataset="dsTY_IFRS" datacolumn="DS_CODE" codecolumn="CD_CODE" value="" onitemchanged="fnSearchInit" index="0" visible="false"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg" text="">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" right="0" bottom="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	this.dsSearch.setColumn(0, "CD_CORP", this.AuthClient.CD_CORP); 
	this.dsSearch.setColumn(0, "DS_CORP", this.AuthClient.DS_CORP);

	this.dsSearch.setColumn(0, "YM_ACCOUNT", this.gfnGetDate().substr(0, 6));
	this.dsSearch.setColumn(0, "TY_IFRS", "A");
};

this.fnSetButton = function() {
}

this.fnSetExtendButton = function() {
	this.btnDataCreate = this.gfnFormButtonAdd("DataCreate", "fnDataCreate");
	this.btnIssueSlip = this.gfnFormButtonAdd("IssueSlip", "fnIssueSlip");
	this.btnCancelSlip = this.gfnFormButtonAdd("CancelSlip", "fnCancelSlip");
	this.btnViewSlip = this.gfnFormButtonAdd("ViewSlip", "fnViewSlip");
	
	this.btnDataCreate.set_enable(false);
	this.btnIssueSlip.set_enable(false);
	this.btnCancelSlip.set_enable(false);
	this.btnViewSlip.set_enable(false);
};

this.fnSetVariable = function() {
	this.dxGrid = this.divData.form.objGrid;

	this.ccfCD_CORP = this.divSearch.form.ccfCD_CORP;
	this.ctclYM_ACCOUNT = this.divSearch.form.ctclYM_ACCOUNT;
	this.ccboTY_IFRS = this.divSearch.form.ccboTY_IFRS;
};

this.fnSetEvent = function() {
	this.gfnGridInit(this.dxGrid, this.dsList, "DH", "DHM_PROGBUN");

	this.ccfCD_CORP.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";

}

this.fnSetParameter = function() {
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_DEPT_ACNT", "string");
	this.dsSelect.addColumn("YM_ACCOUNT", "string");
	this.dsSelect.addColumn("TY_IFRS", "string");
	this.dsSelect.addColumn("CD_CORP", "string");

	this.dsInsert = new Dataset();
	this.dsInsert.addColumn("CD_CORP", "string");
	this.dsInsert.addColumn("YM_ACCOUNT", "string");
	this.dsInsert.addColumn("TY_IFRS", "string");
	this.dsInsert.addColumn("ID_TRANS", "string");
	
	this.dsIssueSlip = new Dataset();
	this.dsIssueSlip.addColumn("CD_CORP", "string");
	this.dsIssueSlip.addColumn("CD_DEPT_ACNT", "string");
	this.dsIssueSlip.addColumn("TY_GUBUN", "string");
	this.dsIssueSlip.addColumn("YM_ACCOUNT", "string");
	this.dsIssueSlip.addColumn("ID_TRANS", "string");

	this.dsCancelSlip = new Dataset();
	this.dsCancelSlip.addColumn("CD_DEPT_ACNT", "string");
	this.dsCancelSlip.addColumn("TY_GUBUN", "string");
	this.dsCancelSlip.addColumn("YM_ACCOUNT", "string");
	this.dsCancelSlip.addColumn("CD_TRADE", "string");
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
this.fnSelect = function() {
	if (!this.fnSelectValidation()) return;
	
	this.gfnGridBeforeSelect(this.dxGrid);

	this.dsSelect.clearData();
	this.dsSelect.addRow();
	this.dsSelect.setColumn(0, "CD_DEPT_ACNT", this.AuthClient.CD_CORP);
	this.dsSelect.setColumn(0, "YM_ACCOUNT", this.dsSearch.getColumn(0, "YM_ACCOUNT"));
	this.dsSelect.setColumn(0, "TY_IFRS", this.dsSearch.getColumn(0, "TY_IFRS"));
	this.dsSelect.setColumn(0, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
		
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect"; 
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

this.fnAdd = function() {
}

this.fnDel = function() {
}

this.fnSave = function() {
}

this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

this.fnPrint = function() {

}

/************************************************************************
 * Validate
 ************************************************************************/
this.fnSelectValidation = function() {
	var validate = true;
	
	if (this.gfnIsNull(this.dsSearch.getColumn(0, "CD_CORP"))) {
		this.fnVaidateCallback = function() {
			this.ccfCD_CORP.form.CDTextBox.setFocus();
		}
		this.gfnAlert("법인코드는 반드시 입력 하셔야 합니다.", "fnVaidateCallback");
		validate = false;
	}
	
	if (this.gfnIsNull(this.dsSearch.getColumn(0, "YM_ACCOUNT"))) {
		this.fnVaidateCallback = function() {
			this.ctclYM_ACCOUNT.form.TextBox.setFocus();
		}
		this.gfnAlert("회계년월은 반드시 입력 하셔야 합니다.", "fnVaidateCallback");
		validate = false;
	}
	return validate;
}

this.fnSaveValidate = function() {
	if (this.gfnIsNull(this.dsSearch.getColumn(0, "YM_ACCOUNT"))) {
		this.fnVaidateCallback = function() {
			this.ctclYM_ACCOUNT.form.TextBox.setFocus();
		}
		this.gfnAlert("회계년월은 반드시 입력 하셔야 합니다.", "fnVaidateCallback");
		return false;
	}
	
	return true;
}

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
this.fnCallback = function(svcID, errorCode, errorMsg) {
	if(svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);

		if (this.dsList.rowcount == 0) {
			this.btnDataCreate.set_enable(true);
			this.btnIssueSlip.set_enable(false);
			this.btnCancelSlip.set_enable(false);
			this.btnViewSlip.set_enable(false);
		}
		else {
			if (this.gfnIsNull(this.dsList.getColumn(0, "CD_TRADE_ADD"))) {
				this.btnDataCreate.set_enable(true);
				if (this.dsSearch.getColumn(0, "TY_IFRS") == "A") {
					this.btnIssueSlip.set_enable(true);
					this.btnCancelSlip.set_enable(false);
					this.btnViewSlip.set_enable(false);
				}
				else {
					this.btnIssueSlip.set_enable(false);
					this.btnCancelSlip.set_enable(false);
					this.btnViewSlip.set_enable(false);
				}
			}
			else {
				this.btnDataCreate.set_enable(false);
				if (this.dsSearch.getColumn(0, "TY_IFRS") == "A") {
					this.btnIssueSlip.set_enable(false);
					this.btnCancelSlip.set_enable(true);
					this.btnViewSlip.set_enable(true);
				}
				else {
					this.btnIssueSlip.set_enable(false);
					this.btnCancelSlip.set_enable(false);
					this.btnViewSlip.set_enable(false);
				}
			}
		}
			
	}
	else if(svcID == "create") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		}
		else {
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "issueslip") {
		if (errorCode == 0) {
			this.fnIssueslipCallback = function() {
				this.FormBtns.Select.click();
			}
			this.gfnAlert("전표가 발행되었습니다.", "fnIssueslipCallback");
		}
		else {
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "cancelslip") {
		if (errorCode == 0) {
			this.fnCancelslipCallback = function() {
				this.FormBtns.Select.click();
			}
			this.gfnAlert("전표가 취소되었습니다.", "fnCancelslipCallback");
		}
		else {
			this.gfnAlert(errorMsg);
		}
	}
}
 
/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	var sCdCorp = this.dsSearch.getColumn(0, "CD_CORP");
	switch(id) {
		case "ccfCD_CORP":
			dsUserParam.setColumn(nrow, "ID_SABUN", this.AuthClient.ID_USER);
			break;
	}
	return true;
};
/************************************************************************
 * 그리드 이벤트
 ************************************************************************/

/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo) {
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);
	}
};

this.fnDataCreate = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	if (!this.fnSaveValidate()) return;
	
	this.dsInsert.clearData();
	var nrow = this.dsInsert.addRow();
	this.dsInsert.setColumn(nrow, "CD_CORP", this.AuthClient.CD_CORP);
	this.dsInsert.setColumn(nrow, "YM_ACCOUNT", this.dsSearch.getColumn(0, "YM_ACCOUNT"));
	this.dsInsert.setColumn(nrow, "TY_IFRS", this.dsSearch.getColumn(0, "TY_IFRS"));
	this.dsInsert.setColumn(nrow, "ID_TRANS", this.AuthClient.ID_USER);

	var strSvcId    = "create";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "insert=dsInsert";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
};

this.fnIssueSlip = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {

	var chkCnt =  this.dsList.getCaseCount("CHK == 1");
	if(chkCnt == 0) {
		this.gfnAlert("전표발행 대상 행을 선택하세요.");
		return;
	}

// 	var bSlipInsert = false;
// 	for (var i = 0; i < this.dsList.rowcount; i++) {
// 		if(this.dsList.getColumn(i, "CHK") == 1) {		
// 			if (!this.gfnIsNull(this.dsList.getColumn(i, "AM_ADDICOME"))) {
// 				if (nexacro.toNumber(this.dsList.getColumn(i, "AM_ADDICOME")) != 0) {
// 					bSlipInsert = true;
// 					break;
// 				}
// 			}
// 		}
// 	}
// 	
// 	if (!bSlipInsert) {
// 		this.gfnAlert("추가계상할 금액이 없습니다.");
// 		return;
// 	}
	
	this.gfnConfirm("전표를 발행하시겠습니까?", "fnIssueSlip_callback");
}

this.fnIssueSlip_callback = function(strId, val)  {
	if (!val) return;
	
	this.dsIssueSlip.clearData();
	
	this.dsList.filter("CHK == 1");
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var nrow = this.dsIssueSlip.addRow();
		this.dsIssueSlip.setColumn(nrow, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
		this.dsIssueSlip.setColumn(nrow, "CD_DEPT_ACNT", this.dsList.getColumn(i, "CD_DEPT_ACNT"));
		this.dsIssueSlip.setColumn(nrow, "TY_GUBUN", this.dsList.getColumn(i, "TY_GUBUN"));
		this.dsIssueSlip.setColumn(nrow, "YM_ACCOUNT", this.dsSearch.getColumn(0, "YM_ACCOUNT"));
		this.dsIssueSlip.setColumn(nrow, "ID_TRANS", this.AuthClient.ID_USER);
	}
	
	this.dsList.filter("");
	
	if (this.dsIssueSlip.rowcount == 0) return;
	
	var strSvcId    = "issueslip";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "issueslip=dsIssueSlip";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

this.fnCancelSlip = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	if (!this.gfnGridIsRow(this.dxGrid)) return;

	if(this.dsList.getCaseCount("CHK == '1' && "+this.ucFlag+" != '#'") == 0){
		this.gfnAlert("체크된 항목이 없습니다.");
		return;
	}
	
	if(this.dsList.findRowExpr("CHK == 1 && dataset.parent.gfnIsNull(CD_TRADE_ADD) && nx_flag != '#'") > -1){
		this.gfnAlert("전표발행되지않은 항목이 체크되어 있습니다.");
		return;
	}

// 	if (this.gfnIsNull(this.dsList.getColumn(this.dsList.rowposition, "CD_TRADE_ADD"))) {
// 		this.gfnAlert("발행된 전표가 존재하지 않습니다.");
// 		return;
// 	}

	this.gfnConfirm("전표를 취소하시겠습니까?", "fnCancelSlip_callback");
}

this.fnCancelSlip_callback = function(strId, val)  {
	if (!val) return;
	
	this.dsCancelSlip.clearData();
	
	this.dsList.filter("CHK == 1");
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		if (!this.gfnIsNull(this.dsList.getColumn(i, "CD_TRADE_ADD"))) {
			var nrow = this.dsCancelSlip.addRow();
			this.dsCancelSlip.setColumn(nrow, "CD_DEPT_ACNT", this.dsList.getColumn(i, "CD_DEPT_ACNT"));
			this.dsCancelSlip.setColumn(nrow, "TY_GUBUN", this.dsList.getColumn(i, "TY_GUBUN"));
			this.dsCancelSlip.setColumn(nrow, "YM_ACCOUNT", this.dsSearch.getColumn(0, "YM_ACCOUNT"));
			this.dsCancelSlip.setColumn(nrow, "CD_TRADE", this.dsList.getColumn(this.dsList.rowposition, "CD_TRADE"));
		}
	}
	
	this.dsList.filter("");
	
	
	if (this.dsCancelSlip.rowcount == 0) return;
	
	
	var strSvcId    = "cancelslip";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "cancelslip=dsCancelSlip";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

this.fnViewSlip = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	if (!this.gfnGridIsRow(this.dxGrid)) return;
	
	if (this.gfnIsNull(this.dsList.getColumn(this.dsList.rowposition, "CD_TRADE_ADD"))) return;
	
	var param = {};
	param.IUD_FLAG = "S";
	param.CD_TRADE = this.dsList.getColumn(this.dsList.rowposition, "CD_TRADE_ADD");
	param.strYN_JUNDO_START = "";
	
	this.gfnFormOpen("DHA", "DHA_ISSUESLIP", "", param);
}
]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DHMPR_PROGBUN_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">insert</Col>
            <Col id="SP">DHMPR_PROGBUN_WOOMI_INSERT</Col>
          </Row>
          <Row>
            <Col id="SP">DHMPR_PROGBUN_AUTOSLIP_INSERT</Col>
            <Col id="TARGET">issueslip</Col>
          </Row>
          <Row>
            <Col id="SP">DHMPR_PROGBUN_AUTOSLIP_DELETE</Col>
            <Col id="TARGET">cancelslip</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="YM_ACCOUNT" type="STRING" size="256"/>
          <Column id="TY_IFRS" type="STRING" size="256"/>
          <Column id="CD_CORP" type="STRING" size="256"/>
          <Column id="DS_CORP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="YM_ACCOUNT"/>
            <Col id="TY_IFRS"/>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsTY_IFRS">
        <ColumnInfo>
          <Column id="CD_CODE" type="STRING" size="256"/>
          <Column id="DS_CODE" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="DS_CODE">K-GAPP</Col>
            <Col id="CD_CODE">A</Col>
          </Row>
          <Row>
            <Col id="DS_CODE">K-IFRS</Col>
            <Col id="CD_CODE">B</Col>
          </Row>
        </Rows>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ctclYM_ACCOUNT.form.TextBox" propid="value" datasetid="dsSearch" columnid="YM_ACCOUNT"/>
      <BindItem id="item1" compid="divSearch.form.ccboTY_IFRS" propid="value" datasetid="dsSearch" columnid="TY_IFRS"/>
      <BindItem id="item2" compid="divSearch.form.ccfCD_CORP.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_CORP"/>
      <BindItem id="item3" compid="divSearch.form.ccfCD_CORP.form.DSTextBox" propid="value" datasetid="dsSearch" columnid="DS_CORP"/>
    </Bind>
  </Form>
</FDL>
