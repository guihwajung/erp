<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="960" height="300" maxwidth="960" maxheight="300" titletext="점검전 사진" onload="form_onload">
    <Layouts>
      <Layout>
        <ImageViewer id="imgPicAfter1" taborder="0" left="5" top="40" stretch="fixaspectratio" right="488" bottom="40" onload="imgPicAfter1_onload"/>
        <Button id="btnUpload" taborder="1" text="업로드" left="27.92%" width="80" height="20" uWord="popup.cancel" onclick="fnUpload" top="10"/>
        <Button id="btnDownload" taborder="2" text="다운로드" left="btnUpload:24" width="80" height="20" uWord="popup.cancel" onclick="btnPicImgDown_onclick" top="10"/>
        <Button id="btnClose" taborder="3" text="닫기" left="436" width="80" height="20" uWord="popup.cancel" top="270" onclick="btnClose_onclick"/>
        <ImageViewer id="imgPicAfter2" taborder="4" left="485" top="40" stretch="fixaspectratio" right="8" bottom="40" onload="imgPicAfter2_onload"/>
        <Button id="btnUpload2" taborder="5" text="업로드" left="78.02%" width="80" height="20" uWord="popup.cancel" top="10" onclick="fnUpload2"/>
        <Button id="btnDownload2" taborder="6" text="다운로드" left="btnUpload2:25" width="80" height="20" uWord="popup.cancel" onclick="btnPicImgDown2_onclick" top="10"/>
        <Static id="image1" taborder="7" text="이미지1" left="14" top="9" width="130" height="24"/>
        <Static id="image2" taborder="8" text="이미지2" left="494" top="9" width="130" height="24"/>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[/************************************************************************************************
 * FORM 변수 선언 영역
 ***********************************************************************************************/
 this.filepath = "/DB/WORK/BEFORE/";
 this.fileConfig = {};
 this.fileuploads = {};
/***********************************************************************************************
* FORM EVENT 영역(onload)
/***********************************************************************************************/
this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	this.gfnFormOnLoad(this); //초기화[필수]
	
	this.fnSetParameter();
	
	this.dsSearch.setColumn(0, "CD_SITE", this.getOwnerFrame().CD_SITE);
	this.dsSearch.setColumn(0, "CD_JOB", this.getOwnerFrame().CD_JOB);
	
	// 파일설정
	this.fileConfig = this.gfnGetFileConfig();
	this.fileConfig.allowTypes = ["jpg","jpeg","gif","png"]; // 넥사브라우저 전용, 웹은 적용불가
	this.FileUpTransfer00.clearFileList();
	
	this.filepath = "/DB/WORK/BEFORE/" + this.dsSearch.getColumn(0, "CD_SITE") + "/" + this.dsSearch.getColumn(0, "CD_JOB");
	
	this.imgPicAfter1.set_image(null);
	this.imgPicAfter2.set_image(null);
	if( !this.gfnIsNull(this.dsSearch.getColumn(0, "CD_SITE")) && !this.gfnIsNull(this.dsSearch.getColumn(0, "CD_JOB"))) {
		this.fnImgSelect();
	}
};

/************************************************************************
 * 변수 선언
 ************************************************************************/

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	
};
/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_SITE", "string");
	this.dsSelect.addColumn("CD_JOB", "string");

	this.dsUpdate = new Dataset();
	this.dsUpdate.addColumn("CD_SITE", "string");
	this.dsUpdate.addColumn("CD_JOB", "string");
	this.dsUpdate.addColumn("PIC_IMAGENM", "string");
	this.dsUpdate.addColumn("PIC_IMAGENM2", "string");
};

/************************************************************************
 * Validate
 ************************************************************************/

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnImgSelect = function() {
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	this.dsSelect.setColumn(0, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
	this.dsSelect.setColumn(0, "CD_JOB", this.dsSearch.getColumn(0, "CD_JOB"));
	this.dsSelect.setColumn(0, "PIC_BEFORENM", this.dsList.getColumn(0, "PIC_BEFORENM"));
	this.dsSelect.setColumn(0, "PIC_BEFORENM2", this.dsList.getColumn(0, "PIC_BEFORENM2"));

	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect"; 
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
};

/**
* @ 취소버튼이벤트
*/
this.btnCancle_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	this.close();
	//this.getParentContext().close(false);
};
/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (errorCode != 0) {
		this.gfnAlert(errorMsg);
		return;
	}
	
	if (svcID == "select") {
		trace(this.dsList.saveXML());
		if(this.dsList.rowcount > 0){
			if(!this.gfnIsNull(this.dsList.getColumn(0, "PIC_BEFORENM")) || !this.gfnIsNull(this.dsList.getColumn(0, "PIC_BEFORENM2")))
			{
				this.fnImageView();
				this.fnImageView2();				
			}
		}
	}
	else if (svcID == "imagefile")
	{
		this.imgPicAfter1.set_image(this.dsImageFile.getColumn(0, "filereturn"));
	}
	else if (svcID == "imagefile2")
	{
		this.imgPicAfter2.set_image(this.dsImageFile01.getColumn(0, "filereturn"));
	}
	else if(svcID == "save")
	{
		this.fnImgSelect();
	}
}

/*
 * 이미지 파일 다운로드 버튼 클릭
 */ 
this.btnPicImgDown_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	if( !this.gfnIsNull( this.dsList.getColumn(0,"PIC_BEFORENM") ) ){
		this.fnDownload(this.filepath, this.dsList.getColumn(0,"PIC_BEFORENM"));
	}	
};

this.btnPicImgDown2_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	if( !this.gfnIsNull( this.dsList.getColumn(0,"PIC_BEFORENM2") ) ){
		this.fnDownload(this.filepath, this.dsList.getColumn(0,"PIC_BEFORENM2"));
	}	
};

/*
 * 이미지 파일 다운로드
 */
this.fnDownload = function(strFilePath, strFileName) {
	
	this.fileConfig.downloadUrl = "/file/downloadFile.do";
	var encodeFileName = encodeURIComponent(strFileName);
		
	var surl = this.fileConfig.host+ this.fileConfig.downloadUrl; // + encodeFileName;
	
	this.FileDownTransfer00.set_url(surl);
	
	this.FileDownTransfer00.setPostData("path", strFilePath);
	this.FileDownTransfer00.setPostData("fileName", encodeFileName);
	if( system.navigatorname =="nexacro"){
		this.FileDownTransfer00.set_downloadfilename(strFileName);
	}
	this.FileDownTransfer00.download();
};

this.fnUpload = function()
{
	this.fdg00.open('FileOpen', FileDialog.LOAD);
}

this.fnUpload2 = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	this.fdg01.open('FileOpen', FileDialog.LOAD);
};

this.fdg00_onclose = function(obj:nexacro.FileDialog,e:nexacro.FileDialogEventInfo)
{
	this.addFileList(obj, e.virtualfiles);
};

this.fdg01_onclose = function(obj:nexacro.FileDialog,e:nexacro.FileDialogEventInfo)
{
	this.addFileList2(obj, e.virtualfiles);
};

this.addFileList = function(obj, filelist)
{
	this.FileList = filelist;
	if(filelist.length > 0) {
		var vFile;
		for (var i = 0; i < filelist.length; i++)
		{
			vFile = filelist[i];
			vFile.row = obj.row;
			vFile.addEventHandler("onsuccess", this.FileList_onsuccess, this);
			vFile.addEventHandler("onerror", this.FileList_onerror , this);
			
			vFile.open(null, 1);
		}
	}
}

this.addFileList2 = function(obj, filelist)
{
	this.FileList = filelist;
	if(filelist.length > 0) {
		var vFile;
		for (var i = 0; i < filelist.length; i++)
		{
			vFile = filelist[i];
			vFile.row = obj.row;
			vFile.addEventHandler("onsuccess", this.FileList_onsuccess2, this);
			vFile.addEventHandler("onerror", this.FileList_onerror2, this);
			
			vFile.open(null, 1);
		}
	}
}

this.FileList_onsuccess = function(obj:nexacro.VirtualFile, e:nexacro.VirtualFileEventInfo)
{
	switch (e.reason)
	{
		case 1:
			obj.getFileSize();
			break;
		case 9:
			this.FileUpTransfer00.addFile(obj.filename, obj);
			if(this.FileUpTransfer00.filelist.length > 0) {
				this._waitCursor(true);
				var sUploadUrl = this.fileConfig.host + this.fileConfig.uploadUrl;
				this.FileUpTransfer00.setPostData("path", this.filepath);
				this.FileUpTransfer00.upload(sUploadUrl);
			}
			break;
	}
}

this.FileList_onsuccess2 = function(obj:nexacro.VirtualFile, e:nexacro.VirtualFileEventInfo)
{
	switch (e.reason)
	{
		case 1:
			obj.getFileSize();
			break;
		case 9:
			this.FileUpTransfer01.addFile(obj.filename, obj);
			if(this.FileUpTransfer01.filelist.length > 0) {
				this._waitCursor(true);
				var sUploadUrl = this.fileConfig.host + this.fileConfig.uploadUrl;
				this.FileUpTransfer01.setPostData("path", this.filepath);
				this.FileUpTransfer01.upload(sUploadUrl);
			}
			break;
	}
}

this.FileList_onerror = function(obj:nexacro.VirtualFile, e:nexacro.VirtualFileErrorEventInfo)
{
	trace("errortype: "+e.errortype);
	trace("errormsg: "+e.errormsg);
	trace("statuscode: "+e.statuscode);
}

this.FileUpTransfer00_onprogress = function(obj:nexacro.FileUploadTransfer,e:nexacro.FileUploadTransferProgressEventInfo)
{
	trace("FileUpTransfer00_onprogress: " + e.loaded+"/"+e.total);
};

this.FileUpTransfer01_onprogress = function(obj:nexacro.FileUploadTransfer,e:nexacro.FileUploadTransferProgressEventInfo)
{
	trace("FileUpTransfer01_onprogress: " + e.loaded+"/"+e.total);
};

this.FileUpTransfer00_onsuccess = function(obj:nexacro.FileUploadTransfer,e:nexacro.FileUploadTransferEventinfo)
{
	this._waitCursor(false);
	trace("FileUpTransfer00_onsuccess: " + e.code + "/" + e.message);
	if(e.code == 0) {
		if(e.datasets.length > 0) {
			for(var i = 0; i < e.datasets[0].rowcount; i++) {
				if(this.dsList.rowcount == 0)
				{
					this.dsList.addRow();
				}
				this.dsList.setColumn(0, "PIC_BEFORENM", obj.filelist[i].filename);
				
			}
			obj.filelist.clear();
			this.fnSaveProc();
		}
	}
};

this.FileUpTransfer01_onsuccess = function(obj:nexacro.FileUploadTransfer,e:nexacro.FileUploadTransferEventinfo)
{
	this._waitCursor(false);
	trace("FileUpTransfer01_onsuccess: " + e.code + "/" + e.message);
	if(e.code == 0) {
		if(e.datasets.length > 0) {
			for(var i = 0; i < e.datasets[0].rowcount; i++) {
				if(this.dsList.rowcount == 0)
				{
					this.dsList.addRow();
				}
				this.dsList.setColumn(0, "PIC_BEFORENM2", obj.filelist[i].filename);
				
			}
			obj.filelist.clear();
			this.fnSaveProc();
		}
	}
};

this.FileUpTransfer00_onerror = function(obj:nexacro.FileUploadTransfer,e:nexacro.FileUploadTransferErrorEventInfo)
{
	this._waitCursor(false);
	if(e.errormsg.indexOf("maxsize") > -1) {
		this.gfnAlert("첨부파일 허용용량("+ this.gfnCutFileSize(nexacro.toNumber(e.errormsg.split(':')[1])) + ")을 초과할 수 없습니다.");
	} else {
		this.gfnAlert(e.errormsg);
	}
};

this.FileUpTransfer01_onerror = function(obj:nexacro.FileUploadTransfer,e:nexacro.FileUploadTransferErrorEventInfo)
{
	this._waitCursor(false);
	if(e.errormsg.indexOf("maxsize") > -1) {
		this.gfnAlert("첨부파일 허용용량("+ this.gfnCutFileSize(nexacro.toNumber(e.errormsg.split(':')[1])) + ")을 초과할 수 없습니다.");
	} else {
		this.gfnAlert(e.errormsg);
	}
};

this.fnSaveProc = function()
{
	this.dsUpdate.clearData();
	var nrow = this.dsUpdate.addRow();

	this.dsUpdate.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
	this.dsUpdate.setColumn(nrow, "CD_JOB", this.dsSearch.getColumn(0, "CD_JOB"));
	this.dsUpdate.setColumn(nrow, "PIC_IMAGENM", this.dsList.getColumn(0, "PIC_BEFORENM"));
	this.dsUpdate.setColumn(nrow, "PIC_IMAGENM2", this.dsList.getColumn(0, "PIC_BEFORENM2"));

	if(this.dsUpdate.getColumn(0, "PIC_IMAGENM") == this.dsUpdate.getColumn(0, "PIC_IMAGENM2")) {
		this.gfnAlert("동일한 파일명으로 등록할 수 없습니다.");
		return false;
	}
	
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "update=dsUpdate";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}


this.fnImageView = function() {

	this.dsImageFile.clearData();
	this.dsImageFile.addRow();
	
	this.dsImageFile.setColumn(0, "filepath", this.filepath);
	this.dsImageFile.setColumn(0, "filename", this.dsList.getColumn(0, "PIC_BEFORENM"));
	
	// 서버 이미지파일 base64 로 받아오기
	var strSvcId    = "imagefile";
	var strSvcType  = "file/imageFile";
	var inProc		= "";
	var inData      = "input=dsImageFile";
	var outData     = "dsImageFile=input";
	var strArg      = "";
	var callBackFnc = "fnCallback";

	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc,
						false); 		// 통신방법 정의 [생략가능]
};

this.fnImageView2 = function() {

	this.dsImageFile01.clearData();
	this.dsImageFile01.addRow();
	
	this.dsImageFile01.setColumn(0, "filepath", this.filepath);
	this.dsImageFile01.setColumn(0, "filename", this.dsList.getColumn(0, "PIC_BEFORENM2"));

	// 서버 이미지파일 base64 로 받아오기
	var strSvcId    = "imagefile2";
	var strSvcType  = "file/imageFile";
	var inProc		= "";
	var inData      = "input=dsImageFile01";
	var outData     = "dsImageFile01=input";
	var strArg      = "";
	var callBackFnc = "fnCallback";

	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc,
						false); 		// 통신방법 정의 [생략가능]
};

this.btnClose_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	this.getParentContext().close(false);
};
]]></Script>
    <Objects>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DBSPR_BEFOREWORKENDPIC_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">update</Col>
            <Col id="SP">DBSPR_IPSUASPIC_UPDATE</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsList" onvaluechanged="dsList_onvaluechanged">
        <ColumnInfo>
          <Column id="PIC_BEFORENM" type="STRING" size="256"/>
          <Column id="PIC_BEFORENM2" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="dsImageFile">
        <ColumnInfo>
          <Column id="filepath" type="STRING" size="256"/>
          <Column id="filename" type="STRING" size="256"/>
          <Column id="filename2" type="STRING" size="256"/>
          <Column id="filereturn" type="STRING" size="10000"/>
          <Column id="filereturn2" type="STRING" size="10000"/>
        </ColumnInfo>
      </Dataset>
      <FileDownTransfer id="FileDownTransfer00"/>
      <FileUpTransfer id="FileUpTransfer00" onprogress="FileUpTransfer00_onprogress" onsuccess="FileUpTransfer00_onsuccess" onerror="FileUpTransfer00_onerror"/>
      <Dataset id="dsSearch">
        <ColumnInfo>
          <Column id="CD_SITE" type="STRING" size="256"/>
          <Column id="TY_SEARCH" type="STRING" size="256"/>
          <Column id="CD_JOB" type="STRING" size="256"/>
          <Column id="TY_GBN" type="STRING" size="256"/>
          <Column id="TY_UMGB" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
      <FileDialog id="fdg00" onclose="fdg00_onclose"/>
      <FileDialog id="fdg01" onclose="fdg01_onclose"/>
      <FileUpTransfer id="FileUpTransfer01" onprogress="FileUpTransfer01_onprogress" onsuccess="FileUpTransfer01_onsuccess" onerror="FileUpTransfer01_onerror"/>
      <Dataset id="dsImageFile01">
        <ColumnInfo>
          <Column id="filepath" type="STRING" size="256"/>
          <Column id="filename" type="STRING" size="256"/>
          <Column id="filename2" type="STRING" size="256"/>
          <Column id="filereturn" type="STRING" size="10000"/>
          <Column id="filereturn2" type="STRING" size="10000"/>
        </ColumnInfo>
      </Dataset>
    </Objects>
  </Form>
</FDL>
