<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="form" width="1280" height="720" titletext="New Form" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0" top="0" height="46.0" right="0" cssclass="div_SEARCH_Bg">
          <Layouts>
            <Layout>
              <Static id="staCD_CORP" taborder="0" text="법인" left="0" top="10.0" width="66" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfCD_CORP" CodeFindName="DAX_CFCORP_CODEFIND" CDTextWidth="50" taborder="1" left="staCD_CORP:0.0" top="10.0" width="250" height="24.0" url="cmm::cmmCodeFind.xfdl" text=""/>
              <Static id="staID_SABUN_APL" taborder="2" text="신청자" left="ccfCD_CORP:0" top="10.0" width="79" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Div id="ccfID_SABUN_APL" CodeFindName="DAX_CFBASEINFO_ALL" CDTextWidth="90" taborder="3" left="staID_SABUN_APL:0.0" top="10.0" width="250" height="24.0" url="cmm::cmmCodeFind.xfdl" text=""/>
              <Static id="staDT_BZTP" taborder="4" text="출장일" left="ccfID_SABUN_APL:0.0" top="10.0" width="79" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Calendar id="ctclDT_BZTP_FROM" taborder="1" left="staDT_BZTP:10" top="10" width="105" height="24" dateformat="yyyy-MM-dd" editformat="yyyyMMdd" autoselect="true" value=""/>
              <Static id="staDT_BUSINESS_range" taborder="1" text="~" left="ctclDT_BZTP_FROM:10" top="10" width="10" height="20"/>
              <Calendar id="ctclDT_BZTP_TO" taborder="1" left="staDT_BUSINESS_range:10" top="10" width="105" height="24" dateformat="yyyy-MM-dd" editformat="yyyyMMdd" autoselect="true" value=""/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0" oncellposchanged="fnGridCellPosChanged"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo) {
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);
	this.gfnFormInfo(this);
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
    this.fnSetCombo();
	this.fnInit();
}

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 ************************************************************************/
this.fnSetButton = function() {
	
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btnRule   = this.gfnFormButtonAdd("btnRule"  , "fnRule");		// 출장규정 버튼
	this.btnPlan   = this.gfnFormButtonAdd("btnPlan"  , "fnPlan");		// 출장계획서 버튼
	this.btnReport = this.gfnFormButtonAdd("btnReport", "fnReport");	// 출장보고서 작성 버튼
	this.btnAprv   = this.gfnFormButtonAdd("btnAprv"  , "fnAprv");		// 결재상신 버튼
	this.btnDocQ   = this.gfnFormButtonAdd("btnDocQ"  , "fnAprvDocQ");	// 결재문서조회 버튼
	this.btnInit   = this.gfnFormButtonAdd("btnInit"  , "fnAprvInit");	// 결재상태초기화 버튼
}

this.fnUpdateStatusExtendButton = function() {
	var nrow = this.dsList.rowposition;
	
 	this.btnAprv.set_enable(this.dsList.getColumn(nrow, "BTN_APRV") == "Y");
 	this.btnDocQ.set_enable(this.dsList.getColumn(nrow, "BTN_DOC_Q") == "Y");
 	this.btnInit.set_enable(this.dsList.getColumn(nrow, "BTN_INIT") == "Y");
}

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	// 그리드영역
	this.dxGrid = this.divData.form.objGrid;
	this.dxGrid.AfterEdit = "fnGridAfterEdit";
	
	// 검색영역
	this.ccfCD_CORP       = this.divSearch.form.ccfCD_CORP;			// 법인
	this.ccfID_SABUN_APL  = this.divSearch.form.ccfID_SABUN_APL;	// 신청자
	this.ctclDT_BZTP_FROM = this.divSearch.form.ctclDT_BZTP_FROM;	// 출장일(FROM)
	this.ctclDT_BZTP_TO   = this.divSearch.form.ctclDT_BZTP_TO;		// 출장일(TO)
}

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {	
	// 그리드영역
	this.gfnGridInit(this.dxGrid, this.dsList, "DA", "DAB_BZTP_P");
	this.dxGrid.BeforeUserDataSetParam = "fnGridBeforeUserDataSetParam";
	this.dxGrid.AfterCDTextChanged     = "fnGridAfterCDTextChanged";
	
	// 검색영역
	this.ccfCD_CORP.BeforeUserDataSetParam      = "fnBeforeUserDataSetParam";
	this.ccfCD_CORP.AfterCDTextChanged          = "fnAfterCDTextChanged";
	this.ccfID_SABUN_APL.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.ccfID_SABUN_APL.AfterCDTextChanged     = "fnAfterCDTextChanged";
}

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	// 출장계획서 조회
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_CORP", "string");
	this.dsSelect.addColumn("ID_SABUN_APL", "string");
	this.dsSelect.addColumn("DT_BZTP_FROM", "string");
	this.dsSelect.addColumn("DT_BZTP_TO", "string");
	this.dsSelect.addColumn("TY_BZTP", "string");
	
	// 출장계획서 저장
	this.dsSave = new Dataset();
	this.dsSave.addColumn("TY_WRK", "string");
	this.dsSave.addColumn("CD_CORP", "string");
	this.dsSave.addColumn("SN_BZTPSEQ", "string");
	this.dsSave.addColumn("ID_PERSON_BZTP", "int");
	this.dsSave.addColumn("ID_SABUN_BZTP", "string");
	this.dsSave.addColumn("DT_WRITE", "string");
	this.dsSave.addColumn("ID_SABUN_APL", "string");
	this.dsSave.addColumn("CD_POSITION_BZTP", "string");
	this.dsSave.addColumn("CD_EMPTYPE_BZTP", "string");
	this.dsSave.addColumn("CD_DEPT_BZTP", "string");
	this.dsSave.addColumn("CD_AREA_BZTP", "string");
	this.dsSave.addColumn("DS_BZTP", "string");
	this.dsSave.addColumn("CD_STDMNEY", "string");
	this.dsSave.addColumn("DT_CUR_BASE", "string");
	this.dsSave.addColumn("AM_STDEXRT", "bigdecimal");
	this.dsSave.addColumn("DT_BZTP_FROM", "string");
	this.dsSave.addColumn("DT_BZTP_TO", "string");
	this.dsSave.addColumn("AM_ADVPGLD", "bigdecimal");
	this.dsSave.addColumn("CD_DEPT_ANCT", "string");
	
	// 전자결재
	this.dsApproval = new Dataset();
	this.dsApproval.addColumn("TY_WRK", "string");
	this.dsApproval.addColumn("CD_CORP", "string");
	this.dsApproval.addColumn("SN_BZTPSEQ", "string");
	this.dsApproval.addColumn("TY_BZTP", "string");
	this.dsApproval.addColumn("ID_APRV", "string");
	this.dsApproval.addColumn("NO_APRV", "int");
	
	// 기준환율(USD)
	this.dsSelectCurrency = new Dataset();
	this.dsSelectCurrency.addColumn("TY_GUBUN", "string");
	this.dsSelectCurrency.addColumn("CN_ROW", "int");
	this.dsSelectCurrency.addColumn("VALUE", "string");
	this.dsSelectCurrency.addColumn("MIN_VALUE", "string");
	this.dsSelectCurrency.addColumn("DT_BASE", "string");
	this.dsSelectCurrency.addColumn("CD_LOCAL_CURR", "string");
	this.dsSelectCurrency.addColumn("CD_EXEC_CURR", "string");
	
	// 직원정보
	this.dsSelectEmp = new Dataset();
	this.dsSelectEmp.addColumn("TY_GUBUN", "string");
	this.dsSelectEmp.addColumn("CN_ROW", "int");
	this.dsSelectEmp.addColumn("VALUE", "string");
	this.dsSelectEmp.addColumn("MIN_VALUE", "string");
	this.dsSelectEmp.addColumn("CD_CORP", "string");
	this.dsSelectEmp.addColumn("GR_SEARCH", "string");
	this.dsSelectEmp.addColumn("CD_DEPT", "string");
	this.dsSelectEmp.addColumn("YN_CORP", "string");
	this.dsSelectEmp.addColumn("TY_RETIRE", "string");
}

/************************************************************************
 * 콤보 데이터 조회 및 설정
 ************************************************************************/
this.fnSetCombo = function() {
	
}

/************************************************************************
 * 화면 및 검색영역 초기화
 ************************************************************************/
this.fnInit = function() {
	this.dsSearch.setColumn(0, "CD_CORP",      this.AuthClient.CD_CORP);	// 법인
	this.dsSearch.setColumn(0, "DS_CORP",      this.AuthClient.DS_CORP);
	this.dsSearch.setColumn(0, "ID_SABUN_APL", this.AuthClient.ID_SABUN);	// 신청자
	this.dsSearch.setColumn(0, "DS_HANME_APL", this.AuthClient.DS_HNAME);
	// 출장일
	this.dsSearch.setColumn(0, "DT_BZTP_FROM", this.gfnAddMonth(this.gfnGetDate().substr(0, 8), -1));
	this.dsSearch.setColumn(0, "DT_BZTP_TO",   this.gfnAddMonth(this.gfnGetDate().substr(0, 8), 2));
	
	// 확장버튼 상태 변경
	this.fnUpdateStatusExtendButton();
	
	// 조회여부
	if (this.getOwnerFrame().SELECT) {
		this.FormBtns.Select.click();
	}
	
	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "AM_STDEXRT"), "cssclass", "expr:(dataset.getColumn(currow, 'CD_AREA_BZTP') == 'A22' || dataset.getColumn(currow, 'CD_AREA_BZTP') == 'B22' || dataset.getColumn(currow, 'CD_AREA_BZTP') == 'C22' || dataset.getColumn(currow, 'BTN_APRV') == 'N') ? 'BACK_ReadOnly' : ''");
	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "AM_STDEXRT"), "edittype", "expr:(dataset.getColumn(currow, 'CD_AREA_BZTP') == 'A22' || dataset.getColumn(currow, 'CD_AREA_BZTP') == 'B22' || dataset.getColumn(currow, 'CD_AREA_BZTP') == 'C22') ? 'none' : 'text'");
	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "AM_STDEXRT"), "cssclass", "expr:dataset.getColumn(currow, 'YN_RPTXSTCYN') == 'Y' ? 'BACK_ReadOnly' : ''");
	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "AM_STDEXRT"), "edittype", "expr:dataset.getColumn(currow, 'YN_RPTXSTCYN') == 'Y' ? 'none' : 'text'");
	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "DT_CUR_BASE"), "cssclass", "expr:dataset.getColumn(currow, 'YN_RPTXSTCYN') == 'Y' ? 'BACK_ReadOnly' : ''");
	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "DT_CUR_BASE"), "edittype", "expr:dataset.getColumn(currow, 'YN_RPTXSTCYN') == 'Y' ? 'none' : 'date'");
	
	if (this.FormInfo.GR_SEARCH == "9") {
		this.ccfCD_CORP.set_enable(false);
		this.ccfID_SABUN_APL.form.set_readonly(false);
		this.ccfID_SABUN_APL.form.set_enable(false);
		
		var CD_MODULEGROUP_Q = this.gfnGetConfig("DZ", "CD_MODULEGROUP_Q").split("|");
		if (CD_MODULEGROUP_Q.includes(this.FormInfo.ID_GROUP)) {
			this.ccfID_SABUN_APL.form.set_enable(true);
		}
		this.fnSelectEmp();
	}
}

/************************************************************************
 * 버튼 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.gfnSearchValidate(this.divSearch, this.dsSearch)) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	this.dsSelect.setColumn(0, "CD_CORP",      this.dsSearch.getColumn(0, "CD_CORP"));
	this.dsSelect.setColumn(0, "ID_SABUN_APL", this.dsSearch.getColumn(0, "ID_SABUN_APL"));
	this.dsSelect.setColumn(0, "DT_BZTP_FROM", this.dsSearch.getColumn(0, "DT_BZTP_FROM"));
	this.dsSelect.setColumn(0, "DT_BZTP_TO",   this.dsSearch.getColumn(0, "DT_BZTP_TO"));
	this.dsSelect.setColumn(0, "TY_BZTP",      "P");
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction(strSvcId,		// transaction을 구분하기 위한 svc id값
						strSvcType, 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData, 		// 입력값으로 보낼 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						outData, 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc);	// 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	if (this.gfnIsNull(this.dsSearch.getColumn(0, "CD_CORP"))) {
		this.fnValidCallback = function() {
			this.ccfCD_CORP.form.CDTextBox.setFocus();
		}
		this.gfnAlert("법인을 입력하세요.", "fnValidCallback");
		return false;
	}
	
	var TODAY = this.gfnGetDate().substr(0, 8);
	var nrow = this.gfnGridAdd(this.dxGrid);
	this.dsList.setColumn(nrow, "CD_CORP",      this.AuthClient.CD_CORP);	// 법인
	this.dsList.setColumn(nrow, "DS_CORP",      this.AuthClient.DS_CORP);
	this.dsList.setColumn(nrow, "TY_BZTP",      "P");						// 유형
	this.dsList.setColumn(nrow, "DT_WRITE",     TODAY);						// 작성일자
	this.dsList.setColumn(nrow, "ID_SABUN_APL", this.AuthClient.ID_SABUN);	// 신청자
	this.dsList.setColumn(nrow, "DS_HANME_APL", this.AuthClient.DS_HNAME);
	
	this.fnSetCurrency(TODAY);
	this.fnBztpPerson();
}

this.fnBztpPerson = function() {
	if (this.FormInfo.GR_SEARCH == "9") {
		this.dsEmp.filter("CD_DEPT == '" + this.AuthClient.CD_DEPT + "'");
		this.dsList.setColumn(this.dsList.rowposition, "ID_SABUN_BZTP", this.dsEmp.getColumn(0, "ID_SABUN"));
 		this.dsList.setColumn(this.dsList.rowposition, "DS_HNAME_BZTP", this.dsEmp.getColumn(0, "DS_HNAME"));
		this.dsEmp.filter("");
	}
}

/*
 *	삭제 버튼
 */ 
this.fnDel = function() {
	var ST_APRV = this.dxGrid.getCellValue(this.dxGrid.currentrow, this.dxGrid.getBindCellIndex("body", "ST_APRV"));
	if (ST_APRV == undefined || ST_APRV == 5) {
		this.gfnGridDel(this.dxGrid);
	} else {
		this.gfnAlert("전자결재 미상신이거나 반려 상태인\n출장계획서만 삭제할 수 있습니다.");
	}
}

/*
 *	저장 버튼
 */ 
this.fnSave = function() {
	var msg = "1. 신규 출장계획서의 출장자는 변경할 수 없습니다.\n" +
			  "   변경이 필요할 경우 삭제 후 재입력해야 합니다.\n" +
			  "2. 출장계획서를 삭제하면 모든 데이터가 삭제됩니다.\n" +
			  "\n" +
			  "저장하시겠습니까?";
	this.gfnConfirm(msg, function(strId, val) {
		if (val == false) {
			return;
		}
		
		if (!this.gfnGridValidate(this.dxGrid)) return;

		this.dxGrid.updateToDataset();
		this.dsSave.clearData();

		for (var i = 0; i < this.dsList.rowcount; i++) {
			var flag = this.gfnGetFlag(this.dsList, i);
			switch(flag) {
			case "I":
			case "U":
			case "D":
				var nrow = this.dsSave.addRow();
				var AM_STDEXRT = this.dsList.getColumn(i, "AM_STDEXRT");
				var CD_AREA_BZTP = this.dsList.getColumn(i, "CD_AREA_BZTP");
				if (CD_AREA_BZTP == "A22" || CD_AREA_BZTP == "B22" || CD_AREA_BZTP == "C22") {
					AM_STDEXRT = 0;
				}
				
				this.dsSave.setColumn(nrow, "TY_WRK"          , flag);
				this.dsSave.setColumn(nrow, "CD_CORP"         , this.dsList.getColumn(i, "CD_CORP"));
				this.dsSave.setColumn(nrow, "SN_BZTPSEQ"      , this.dsList.getColumn(i, "SN_BZTPSEQ"));
				this.dsSave.setColumn(nrow, "ID_PERSON_BZTP"  , this.dsList.getColumn(i, "ID_PERSON_BZTP"));
				this.dsSave.setColumn(nrow, "ID_SABUN_BZTP"   , this.dsList.getColumn(i, "ID_SABUN_BZTP"));
				this.dsSave.setColumn(nrow, "DT_WRITE"        , this.dsList.getColumn(i, "DT_WRITE"));
				this.dsSave.setColumn(nrow, "ID_SABUN_APL"    , this.dsList.getColumn(i, "ID_SABUN_APL"));
				this.dsSave.setColumn(nrow, "CD_POSITION_BZTP", this.dsList.getColumn(i, "CD_POSITION_BZTP"));
				this.dsSave.setColumn(nrow, "CD_EMPTYPE_BZTP" , this.dsList.getColumn(i, "CD_EMPTYPE_BZTP"));
				this.dsSave.setColumn(nrow, "CD_DEPT_BZTP"    , this.dsList.getColumn(i, "CD_DEPT_BZTP"));
				this.dsSave.setColumn(nrow, "CD_AREA_BZTP"    , this.dsList.getColumn(i, "CD_AREA_BZTP"));
				this.dsSave.setColumn(nrow, "DS_BZTP"         , this.dsList.getColumn(i, "DS_BZTP"));
				this.dsSave.setColumn(nrow, "CD_STDMNEY"      , this.dsList.getColumn(i, "CD_STDMNEY"));
				this.dsSave.setColumn(nrow, "DT_CUR_BASE"     , this.dsList.getColumn(i, "DT_CUR_BASE"));
				this.dsSave.setColumn(nrow, "AM_STDEXRT"      , AM_STDEXRT);
				this.dsSave.setColumn(nrow, "DT_BZTP_FROM"    , this.dsList.getColumn(i, "DT_BZTP_FROM"));
				this.dsSave.setColumn(nrow, "DT_BZTP_TO"      , this.dsList.getColumn(i, "DT_BZTP_TO"));
				this.dsSave.setColumn(nrow, "AM_ADVPGLD"      , this.dsList.getColumn(i, "AM_ADVPGLD"));
				this.dsSave.setColumn(nrow, "CD_DEPT_ANCT"    , this.dsList.getColumn(i, "CD_DEPT_ANCT"));
				break;
			}
		}
		
		if (this.dsSave.rowcount == 0) return;
			
		var strSvcId    = "save";
		var strSvcType  = "save";
		var inProc		= "_dsProc";
		var inData      = "save=dsSave";
		var outData     = "";
		var strArg      = "";
		var callBackFnc = "fnCallback";
		
		this.gfnTransaction(strSvcId,		// transaction을 구분하기 위한 svc id값
							strSvcType, 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData, 		// 입력값으로 보낼 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							outData, 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
							callBackFnc);	// 통신방법 정의 [생략가능]
	});
}

/*
 *	엑셀 버튼
 */ 
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
	return true;
}

/************************************************************************
 * Validate
 ************************************************************************/
this.fnSelectValidate = function() {
	return true;
}

/************************************************************************
 * 확장버튼 이벤트
 ************************************************************************/
// 출장규정 버튼
this.fnRule = function() {
	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DAB_BZTP_RULE_DLG");
}

// 출장계획서 버튼
this.fnPlan = function() {
	var nrow = this.dsList.rowposition;
	
	var param = {};
 	param.CD_CORP         = this.dsList.getColumn(nrow, "CD_CORP");				// 법인
 	param.DS_CORP         = this.dsList.getColumn(nrow, "DS_CORP");
 	param.SN_BZTPSEQ      = this.dsList.getColumn(nrow, "SN_BZTPSEQ");			// 출장순번
 	param.TY_BZTP         = "P";												// 유형
 	param.ID_SABUN_APL    = this.dsList.getColumn(nrow, "ID_SABUN_APL");		// 신청자
 	param.DS_HANME_APL    = this.dsList.getColumn(nrow, "DS_HANME_APL");
 	param.DT_BZTP_FROM    = this.dsList.getColumn(nrow, "DT_BZTP_FROM");		// 출장일(FROM)
 	param.DT_BZTP_TO      = this.dsList.getColumn(nrow, "DT_BZTP_TO");			// 출장일(TO)
 	param.CD_AREA_BZTP    = this.dsList.getColumn(nrow, "CD_AREA_BZTP");		// 출장지역
 	param.DS_AREA_BZTP    = this.dsList.getColumn(nrow, "DS_AREA_BZTP");
 	param.ID_SABUN_BZTP   = this.dsList.getColumn(nrow, "ID_SABUN_BZTP");		// 출장자
 	param.DS_HNAME_BZTP   = this.dsList.getColumn(nrow, "DS_HNAME_BZTP");
 	param.CD_EMPTYPE_BZTP = this.dsList.getColumn(nrow, "CD_EMPTYPE_BZTP");		// 출장직급
 	param.DS_EMPTYPE_BZTP = this.dsList.getColumn(nrow, "DS_EMPTYPE_BZTP");
 	param.DT_WRITE        = this.dsList.getColumn(nrow, "DT_WRITE");			// 작성일
 	param.AM_STDEXRT      = this.dsList.getColumn(nrow, "AM_STDEXRT");			// 기준환율
	param.AM_ADVPGLD      = this.dsList.getColumn(nrow, "AM_ADVPGLD");			// 가불금
	param.READ_ONLY       = this.dsList.getColumn(nrow, "BTN_APRV") == "N";
	
	var CD_AREA_BZTP = this.dsList.getColumn(nrow, "CD_AREA_BZTP");
	if (CD_AREA_BZTP == "A22" || CD_AREA_BZTP == "B22" || CD_AREA_BZTP == "C22") {
		this.gfnFormOpen(this.FormInfo.CD_MODULE, "DAB_BZTP_PLAN_DOMESTIC_DLG", "fnPlanCallback", param);
	} else {
		this.gfnFormOpen(this.FormInfo.CD_MODULE, "DAB_BZTP_PLAN_OVERSEAS_DLG", "fnPlanCallback", param);
	}
}

this.fnPlanCallback = function() {
	this.FormBtns.Select.click();
}

// 출장보고서 작성 버튼
this.fnReport = function() {
	var nrow = this.dsList.rowposition;
	
	this.dsList.filter("CHK == 1 && ST_APRV == '4'");
	var param = {
		items: new Array(),
		SELECT: true,
	}
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var item = {}
		item.CD_CORP       = this.dsList.getColumn(i, "CD_CORP");			// 법인
		item.DS_CORP       = this.dsList.getColumn(i, "DS_CORP");
		item.SN_BZTPSEQ    = this.dsList.getColumn(i, "SN_BZTPSEQ");		// 출장순번
		item.ID_SABUN_BZTP = this.dsList.getColumn(i, "ID_SABUN_BZTP");		// 출장자
		item.ID_SABUN_APL  = this.dsList.getColumn(i, "ID_SABUN_APL");		// 신청자
		item.DT_WRITE      = this.dsList.getColumn(i, "DT_WRITE");			// 작성일자
		
		param.items.push(item);
	}
	this.dsList.filter("");
	
	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DAB_BZTP_RPT", "fnReportCallback", param);
}

this.fnReportCallback = function() {
	this.FormBtns.Select.click();
}

// 결재상신 버튼
this.fnAprv = function(obj:nexacro.Button, e:nexacro.ClickEventInfo) {
	if (!this.gfnGridIsRow(this.dxGrid)) return;
	
	this.dsList.filter("CHK == 1");
	if (this.dsList.rowcount == 0) {
		this.gfnAlert("출장계획서 " + obj.text + " 대상을 선택하십시오.");
		this.dsList.filter("");
		return;
	}
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		if (this.dsList.getColumn(i, "YN_RPTXSTCYN") == "N") {
			this.gfnAlert("비용계획을 작성한 출장계획서만 전자결재가 가능합니다.");
			this.dsList.filter("");
			return;
		}
	}
	
	if (this.dsList.rowcount > 0) {
		var DT_WRITE = this.dsList.getColumn(0, "DT_WRITE");
		for (var i = 1; i < this.dsList.rowcount; i++) {
			if (DT_WRITE != this.dsList.getColumn(i, "DT_WRITE")) {
				this.gfnAlert("동일한 작성일자만 전자결재가 가능합니다.");
				this.dsList.filter("");
				return;
			}
		}
		
		var AM_STDEXRT = parseFloat(this.dsList.getColumn(0, "AM_STDEXRT"));
		for (var i = 1; i < this.dsList.rowcount; i++) {
			if (AM_STDEXRT != this.dsList.getColumn(i, "AM_STDEXRT")) {
				this.gfnAlert("동일한 기준환율만 전자결재가 가능합니다.");
				this.dsList.filter("");
				return;
			}
		}
		
		var DT_BZTP_FROM = this.dsList.getColumn(0, "DT_BZTP_FROM");
		for (var i = 1; i < this.dsList.rowcount; i++) {
			if (DT_BZTP_FROM != this.dsList.getColumn(i, "DT_BZTP_FROM")) {
				this.gfnAlert("동일한 출장기간만 전자결재가 가능합니다.");
				this.dsList.filter("");
				return;
			}
		}
		
		var DT_BZTP_TO = this.dsList.getColumn(0, "DT_BZTP_TO");
		for (var i = 1; i < this.dsList.rowcount; i++) {
			if (DT_BZTP_TO != this.dsList.getColumn(i, "DT_BZTP_TO")) {
				this.gfnAlert("동일한 출장기간만 전자결재가 가능합니다.");
				this.dsList.filter("");
				return;
			}
		}
		
		var DS_AREA_BZTP = this.dsList.getColumn(0, "DS_AREA_BZTP");
		for (var i = 1; i < this.dsList.rowcount; i++) {
			if (DS_AREA_BZTP != this.dsList.getColumn(i, "DS_AREA_BZTP")) {
				this.gfnAlert("동일한 출장지역만 전자결재가 가능합니다.");
				this.dsList.filter("");
				return;
			}
		}
		
		for (var i = 0; i < this.dsList.rowcount; i++) {
			if (this.dsList.getColumn(i, "YN_RPTXSTCYN") == "N") {
				this.gfnAlert("출장계획서가 작성된 상태만 전자결재가 가능합니다.");
				this.dsList.filter("");
				return;
			}
		}
	}
	
	var lowestPositionRow = 0;
	var CD_POSITION_BZTP = this.dsList.getColumn(0, "CD_POSITION_BZTP");
	for (var i = 1; i < this.dsList.rowcount; i++) {
		var tmp = this.dsList.getColumn(i, "CD_POSITION_BZTP");
		if (parseInt(CD_POSITION_BZTP) > parseInt(tmp)) {
			CD_POSITION_BZTP = tmp;
			lowestPositionRow = i;
		}
	}
	var person = this.dsList.getColumn(lowestPositionRow, "DS_HNAME_BZTP") + " " + this.dsList.getColumn(lowestPositionRow, "DS_POSITION_BZTP");
	if (this.dsList.rowcount > 1) {
		person = person + " 외 " + (this.dsList.rowcount - 1) + "명";
	}
	var locale = this.dsList.getColumn(lowestPositionRow, "CD_STDMNEY") == "KRW" ? "[국내] " : "[해외] ";
	
	var msg = locale + "출장계획서(" + person + ")에 대하여\n" + obj.text + "하시겠습니까?";
	for (var i = 0; i < this.dsList.rowcount; i++) {
		msg += "\n    " + this.dsList.getColumn(i, "DS_HNAME_BZTP") + " [" + this.dsList.getColumn(i, "ID_SABUN_BZTP") + "]"
	}
	this.dsList.filter("");
	
	this.gfnConfirm(msg, function(strId, isOk) {
		if (isOk == false) {
			return;
		}
		
		this.dsList.filter("CHK == 1");
		var DS_BZTP = "";
		for (var i = 0; i < this.dsList.rowcount; i++) {
			// 1. (신청자 = 출장자)의 출장명
			if (this.dsList.getColumn(i, "ID_SABUN_APL") == this.dsList.getColumn(i, "ID_SABUN_BZTP")) {
				DS_BZTP = this.dsList.getColumn(i, "DS_BZTP");
				break;
			}
			
			// 2. 임원의 출장명
			if (this.dsList.getColumn(i, "CD_EMPTYPE_BZTP") == "A" || this.dsList.getColumn(i, "CD_EMPTYPE_BZTP") == "B") {
				DS_BZTP = this.dsList.getColumn(i, "DS_BZTP");
				break;
			}
			
			// 3. 제일 긴 출장명
			if (DS_BZTP.length < this.gfnNvl(this.dsList.getColumn(i, "DS_BZTP"), "").length) {
				DS_BZTP = this.dsList.getColumn(i, "DS_BZTP");
			}
		}
		this.dsList.filter("");
		
		var initParam = {
			CD_CORP: this.dsSearch.getColumn(0, "CD_CORP"),
			ID_AP_TYPE: locale === "[해외] " ? "DAB02" : "DAB05",
			TY_WRK: "APRV",
			ID_APRV: this.AuthClient.ID_SABUN,
			TT_DOC: DS_BZTP, // locale + "출장계획서 (" + person + ")",
			CD_CORP_SUFFIX: this.gfnGetConfig("DZ" , "CD_CORP_SUFFIX"),
		}
		this.gfnAprv(initParam, "fnAprvCallback", "APRV");
	});
}

// 결재문서조회 버튼
this.fnAprvDocQ = function(obj:nexacro.Button, e:nexacro.ClickEventInfo) {
	var oParams = {
		CD_CORP: this.dsList.getColumn(this.dsList.rowposition, "CD_CORP"),
		NO_APRV: this.dsList.getColumn(this.dsList.rowposition, "NO_APRV"),
	}
	this.gfnAprvDoc(oParams, this.fnAprvDocQCallback);
}

// 결재상태초기화 버튼
this.fnAprvInit = function(obj:nexacro.Button, e:nexacro.ClickEventInfo) {
	this.dsList.filter("CHK == 1");
	if (this.dsList.rowcount == 0) {
		this.gfnAlert("출장보고서 " + obj.text + " 대상을 선택하십시오.");
		this.dsList.filter("");
	}
	this.dsList.filter("");
	
	if (!this.gfnGridIsRow(this.dxGrid)) return;
	
	var msg = "출장계획서에 대하여 " + obj.text + "하시겠습니까?\n";
	this.gfnConfirm(msg, "fnAprvCallback", "APRVINIT");
}

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg) {
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);
	} else if (svcID == "selectCurrency") {
		this.dsList.setColumn(this.dsList.rowposition, "DT_CUR_BASE", this.dsCurrency.getColumn(0, "DT_LATEST"));
		this.dsList.setColumn(this.dsList.rowposition, "AM_STDEXRT", this.dsCurrency.getColumn(0, "RT_LOCAL_EXCH"));
	} else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	} else if (svcID == "APRV") {
		this.gfnOpenAppr(function() {
			this.FormBtns.Select.click();
		});
	} else if (svcID == "APRVINIT") {
		this.FormBtns.Select.click();
	}
}

// 결재상신 버튼 콜백
// 결재상태초기화 버튼 콜백
this.fnAprvCallback = function(strId, val) {
	this.dsApproval.clearData();
	this.dsApproval.addRow();
	
	this.dsList.filter("CHK == 1");
	this.dsApproval.setColumn(0, "TY_WRK",  strId);
	this.dsApproval.setColumn(0, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
	var SN_BZTPSEQ = new Array();
	for (var i  = 0; i < this.dsList.rowcount; i++) {
		SN_BZTPSEQ.push(this.dsList.getColumn(i, "SN_BZTPSEQ"));
	}
	this.dsApproval.setColumn(0, "SN_BZTPSEQ", SN_BZTPSEQ.join(","));
	this.dsApproval.setColumn(0, "TY_BZTP", "P");
	this.dsApproval.setColumn(0, "ID_APRV", this.AuthClient.ID_SABUN);
	if (strId == "APRV") {
		this.dsApproval.setColumn(0, "NO_APRV", this.dsAprvOut.getColumn(0, "NO_APRV"));
	} else {
		this.dsApproval.setColumn(0, "NO_APRV", this.dsList.getColumn(this.dsList.rowposition, "NO_APRV"));
	}
	this.dsList.filter("");
		
	var strSvcId    = strId;
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "aprv_execute=dsApproval";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction(strSvcId,		// transaction을 구분하기 위한 svc id값
						strSvcType, 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData, 		// 입력값으로 보낼 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						outData, 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc);	// 통신방법 정의 [생략가능]
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
 	if (id == "ccfCD_CORP") {
		// 법인코드
		dsUserParam.setColumn(nrow, "CD_CORP",   this.AuthClient.CD_CORP);
		dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
		dsUserParam.setColumn(nrow, "ID_USER",   this.AuthClient.ID_USER); 
	} else if(id == "ccfID_SABUN_APL") {
		// 사번
		if (this.gfnIsNull(this.dsSearch.getColumn(0, "CD_CORP"))) {
			this.fnValidCallback = function() {
				this.ccfCD_CORP.form.CDTextBox.setFocus();
			}
			this.gfnAlert("법인코드를 입력하세요.", "fnValidCallback");
			return false;
		}
		var CD_MODULEGROUP_Q = this.gfnGetConfig("DZ", "CD_MODULEGROUP_Q").split("|");
		dsUserParam.setColumn(nrow, "CD_CORP",   this.dsSearch.getColumn(0, "CD_CORP"));
		dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
		dsUserParam.setColumn(nrow, "CD_DEPT",   CD_MODULEGROUP_Q.includes(this.FormInfo.ID_GROUP) ? "" : this.AuthClient.CD_DEPT);
		dsUserParam.setColumn(nrow, "YN_CORP",   "N"); //법인무관(Y: 법인에 관계없이 직원검색 N:조건의 법인의 임직원만 검색)
		dsUserParam.setColumn(nrow, "TY_RETIRE", "%");	// 01 재직 02 휴직 04 퇴직 % :전체
 	}
		
 	return true;
}

this.fnAfterCDTextChanged = function(id, codeFindData) {
	var arr = codeFindData;
	if (id == "ccfCD_CORP") {
		this.ccfID_SABUN.form.fnCodeFindClear();
	} else if(id == "ccfID_SABUN_APL") {
		
 	}
}

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
this.fnGridBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	switch (id) {
	// 출장자
	case "DAX_CFBASEINFO_FULL":
		dsUserParam.setColumn(nrow, "CD_CORP",   this.dsSearch.getColumn(0, "CD_CORP"));
		dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
		//dsUserParam.setColumn(nrow, "CD_DEPT",   this.dsList.getColumn(this.dsList.rowposition, "CD_DEPT_BZTP"));
		dsUserParam.setColumn(nrow, "YN_CORP",   "N"); 	//법인무관(Y: 법인에 관계없이 직원검색 N:조건의 법인의 임직원만 검색)
		dsUserParam.setColumn(nrow, "TY_RETIRE", "01");	// 01 재직 02 휴직 04 퇴직 % :전체
		break;
	
	// 직급
	case "DAX_CFCOMMONCODE_ED":
		dsUserParam.setColumn(nrow, "CD_PREFIX", "ED");
		break;
		
	// 출장직급
	case "DAX_CFCOMMONCODE_EA":
		dsUserParam.setColumn(nrow, "CD_PREFIX", "EA");
		break;
	
	// 출장자부서
	case "DAX_CFDEPT":
		//dsUserParam.setColumn(nrow, "GR_SEARCH",  this.FormInfo.GR_SEARCH);
		//dsUserParam.setColumn(nrow, "CD_DEPT",    this.AuthClient.CD_DEPT);
		dsUserParam.setColumn(nrow, "CD_CORP",    this.dsSearch.getColumn(0, "CD_CORP"));
		dsUserParam.setColumn(nrow, "YN_CURRENT", "Y");
		break;
	
	// 출장지역
	case "DAX_CFBZ_AREA":
		var CD_EMPTYPE_BZTP = this.dsList.getColumn(this.dsList.rowposition, "CD_EMPTYPE_BZTP");
		if (CD_EMPTYPE_BZTP == undefined || CD_EMPTYPE_BZTP == "") {
			this.gfnAlert("출장직급 입력은 필수입니다.");
			return false;
		}
		dsUserParam.setColumn(nrow, "CD_PREFIX",  "B5");
		dsUserParam.setColumn(nrow, "CD_EMPTYPE", this.dsList.getColumn(this.dsList.rowposition, "CD_EMPTYPE_BZTP"));
		break;
 	}
	
	return true;
}

this.fnGridAfterCDTextChanged = function(id, codeFindData) {
	switch (id) {
	case "DAX_CFBASEINFO_FULL":
		this.dsList.setColumn(this.dsList.rowposition, "ID_PERSON_BZTP",   codeFindData[0]["ID_PERSON"]);
		this.dsList.setColumn(this.dsList.rowposition, "CD_POSITION_BZTP", codeFindData[0]["CD_POSITION"]);
		this.dsList.setColumn(this.dsList.rowposition, "DS_POSITION_BZTP", codeFindData[0]["DS_POSITION"]);
		this.dsList.setColumn(this.dsList.rowposition, "CD_EMPTYPE_BZTP",  codeFindData[0]["CD_POSITION_BZTP"]);
		this.dsList.setColumn(this.dsList.rowposition, "DS_EMPTYPE_BZTP",  codeFindData[0]["DS_POSITION_BZTP"]);
		this.dsList.setColumn(this.dsList.rowposition, "CD_DEPT_BZTP",     codeFindData[0]["CD_DEPT"]);
		this.dsList.setColumn(this.dsList.rowposition, "DS_DEPT_BZTP",     codeFindData[0]["DS_DEPT"]);
		this.dsList.setColumn(this.dsList.rowposition, "CD_AREA_BZTP",     "");
		this.dsList.setColumn(this.dsList.rowposition, "DS_AREA_BZTP",     "");
		break;
		
	case "DAX_CFCOMMONCODE_ED":
		this.dsList.setColumn(this.dsList.rowposition, "CD_EMPTYPE_BZTP", "");
		this.dsList.setColumn(this.dsList.rowposition, "DS_EMPTYPE_BZTP", "");
		this.dsList.setColumn(this.dsList.rowposition, "CD_AREA_BZTP",    "");
		this.dsList.setColumn(this.dsList.rowposition, "DS_AREA_BZTP",    "");
		break;
		
	case "DAX_CFBZ_AREA":
 		var CD_CODE = codeFindData[0]["CD_CODE"];
 		if (CD_CODE == "A22" || CD_CODE == "B22" || CD_CODE == "C22") {
			this.dsList.setColumn(this.dsList.rowposition, "AM_STDEXRT", 0.001);
			this.dsList.setColumn(this.dsList.rowposition, "CD_STDMNEY", "KRW");
 		} else {
			this.dsList.setColumn(this.dsList.rowposition, "CD_STDMNEY", "USD");
		}
		break;
	}
}

this.fnGridCellPosChanged = function(obj:nexacro.Grid, e:nexacro.GridSelectEventInfo) {
	this.fnUpdateStatusExtendButton();
}

this.fnGridAfterEdit = function(obj, e) {
	if (e.columnid == "AM_STDEXRT") {
		if (this.dsList.getColumn(e.row, "YN_RPTXSTCYN") == "Y") {
			this.gfnAlert("변경된 환율을 적용하기 위해서 저장한 후\n출장계획서의 금액을 확인하고 저장을 해야 합니다.");
		}
	}
	else if (e.columnid == "DT_BZTP_FROM" || e.columnid == "DT_BZTP_TO") {
		if (this.dsList.getColumn(this.dsList.rowposition, "DT_BZTP_FROM") > this.dsList.getColumn(this.dsList.rowposition, "DT_BZTP_TO")) {
			this.dsList.setColumn(this.dsList.rowposition, e.columnid, e.oldvalue);
			this.gfnAlert("출장기간(TO)은 출장기간(FROM)보다 앞설 수 없습니다.");
		}
	}
	else if (e.columnid == "DT_WRITE") {
		this.fnSetCurrency(e.newvalue);
	}
}

/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo){
	if(e.oldvalue != e.newvalue){
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);
	}
}

// 코드파인더 설정
this.fnSetCodeFinder = function(obj, value) {
	obj.form.CDTextBox.set_value(value);
	obj.form.fnCodeFindLoad();
}

this.fnSetCurrency = function(TODAY) {
	var YESTERDAY = this.gfnAddDate(TODAY, -1);
	
	this.dsSelectCurrency.clearData();
	this.dsSelectCurrency.addRow();
	this.dsSelectCurrency.setColumn(0, "TY_GUBUN",      "1");
	this.dsSelectCurrency.setColumn(0, "CN_ROW",        1000000);
	this.dsSelectCurrency.setColumn(0, "VALUE",         "");
	this.dsSelectCurrency.setColumn(0, "MIN_VALUE",     "");
	this.dsSelectCurrency.setColumn(0, "DT_BASE",       YESTERDAY);
	this.dsSelectCurrency.setColumn(0, "CD_LOCAL_CURR", "USD");
	this.dsSelectCurrency.setColumn(0, "CD_EXEC_CURR",  "KRW");
	
	var strSvcId    = "selectCurrency";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select_currency=dsSelectCurrency";
	var outData     = "dsCurrency=select_currency0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction(strSvcId,		// transaction을 구분하기 위한 svc id값
						strSvcType, 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData, 		// 입력값으로 보낼 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						outData, 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc);	// 통신방법 정의 [생략가능]
}

this.fnSelectEmp = function() {
	this.dsSelectEmp.clearData();
	this.dsSelectEmp.addRow();	
	this.dsSelectEmp.setColumn(0, "TY_GUBUN" , "1");
	this.dsSelectEmp.setColumn(0, "CN_ROW"   , 50);
	this.dsSelectEmp.setColumn(0, "VALUE"    , this.AuthClient.ID_SABUN);
	this.dsSelectEmp.setColumn(0, "MIN_VALUE", "");
	this.dsSelectEmp.setColumn(0, "CD_CORP"  , this.AuthClient.CD_CORP);
	this.dsSelectEmp.setColumn(0, "GR_SEARCH", this.FormInfo.GR_SEARCH);
	this.dsSelectEmp.setColumn(0, "CD_DEPT"  , "");
	this.dsSelectEmp.setColumn(0, "YN_CORP"  , "N");
	this.dsSelectEmp.setColumn(0, "TY_RETIRE", "%");
	
	var strSvcId    = "selectEmp";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select_emp=dsSelectEmp";
	var outData     = "dsEmp=select_emp0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction(strSvcId,		// transaction을 구분하기 위한 svc id값
						strSvcType, 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData, 		// 입력값으로 보낼 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						outData, 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc);	// 통신방법 정의 [생략가능]
}]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="dsCurrency"/>
      <Dataset id="dsEmp"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DABPR_BZTP_PLAN_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">save</Col>
            <Col id="SP">DABPR_BZTP_PLAN_SAVE</Col>
          </Row>
          <Row>
            <Col id="TARGET">aprv_execute</Col>
            <Col id="SP">DABPR_BZTP_PLAN_APRV_EXECUTE</Col>
          </Row>
          <Row>
            <Col id="TARGET">select_currency</Col>
            <Col id="SP">DHXPR_CURRENCY_EXCHAGE_BUY</Col>
          </Row>
          <Row>
            <Col id="TARGET">select_emp</Col>
            <Col id="SP">DAXPR_BASEINFO_CODEFIND_FULL</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_CORP" type="STRING" size="256"/>
          <Column id="DS_CORP" type="STRING" size="256"/>
          <Column id="ID_SABUN_APL" type="STRING" size="256"/>
          <Column id="DS_HANME_APL" type="STRING" size="256"/>
          <Column id="DT_BZTP_FROM" type="STRING" size="256"/>
          <Column id="DT_BZTP_TO" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfCD_CORP.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_CORP"/>
      <BindItem id="item1" compid="divSearch.form.ccfCD_CORP.form.DSTextBox" propid="value" datasetid="dsSearch" columnid="DS_CORP"/>
      <BindItem id="item2" compid="divSearch.form.ccfID_SABUN_APL.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="ID_SABUN_APL"/>
      <BindItem id="item3" compid="divSearch.form.ccfID_SABUN_APL.form.DSTextBox" propid="value" datasetid="dsSearch" columnid="DS_HANME_APL"/>
      <BindItem id="item4" compid="divSearch.form.ctclDT_BZTP_FROM" propid="value" datasetid="dsSearch" columnid="DT_BZTP_FROM"/>
      <BindItem id="item5" compid="divSearch.form.ctclDT_BZTP_TO" propid="value" datasetid="dsSearch" columnid="DT_BZTP_TO"/>
    </Bind>
  </Form>
</FDL>
