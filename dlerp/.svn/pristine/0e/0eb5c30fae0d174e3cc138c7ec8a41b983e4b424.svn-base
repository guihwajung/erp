(function()
{
    return function()
    {
        if (!this._is_form)
            return;
        
        var obj = null;
        
        this.on_create = function()
        {
            this.set_name("form");
            this.set_titletext("과세표준명세, 면세수입금액(팝업)");
            this.getSetter("maxwidth").set("630");
            this.getSetter("maxheight").set("580");
            if (Form == this.constructor)
            {
                this._setFormPosition(630,580);
            }
            
            // Object(Dataset, ExcelExportObject) Initialize
            obj = new Dataset("dsResult", this);
            obj._setContents("");
            this.addChild(obj.name, obj);


            obj = new Dataset("dsList", this);
            obj._setContents("");
            this.addChild(obj.name, obj);


            obj = new Dataset("dsList2", this);
            obj._setContents("");
            this.addChild(obj.name, obj);


            obj = new Dataset("_dsProc", this);
            obj._setContents("<ColumnInfo><Column id=\"TARGET\" type=\"STRING\" size=\"256\"/><Column id=\"SP\" type=\"STRING\" size=\"256\"/></ColumnInfo><Rows><Row><Col id=\"TARGET\">select</Col><Col id=\"SP\">DHVPR_VATMANAGESUB_SELECT</Col></Row><Row><Col id=\"TARGET\">update</Col><Col id=\"SP\">DHVPR_VATMANAGESUB_UPDATE</Col></Row></Rows>");
            this.addChild(obj.name, obj);
            
            // UI Components Initialize
            obj = new Static("staTitle","0","10",null,"22","0",null,null,null,null,null,this);
            obj.set_taborder("2");
            obj.set_text("과세표준명세, 면세수입금액");
            obj.set_cssclass("sta_TITLE_Bg");
            this.addChild(obj.name, obj);

            obj = new Div("divData","0","40",null,null,"0","50",null,null,null,null,this);
            obj.set_taborder("1");
            obj.set_cssclass("div_DATA_Bg");
            this.addChild(obj.name, obj);

            obj = new Static("staTitle00","10","10",null,"22","0",null,null,null,null,null,this.divData.form);
            obj.set_taborder("4");
            obj.set_text("과세표준명세");
            this.divData.addChild(obj.name, obj);

            obj = new Grid("objGrid","0","staTitle00:5",null,"185","0",null,null,null,null,null,this.divData.form);
            obj.set_taborder("0");
            obj._setContents("");
            this.divData.addChild(obj.name, obj);

            obj = new Static("staTitle01","10","objGrid:10",null,"22","0",null,null,null,null,null,this.divData.form);
            obj.set_taborder("4");
            obj.set_text("면세수익금액");
            this.divData.addChild(obj.name, obj);

            obj = new Grid("objGrid2","0","staTitle01:5",null,"155","0",null,null,null,null,null,this.divData.form);
            obj.set_taborder("2");
            obj._setContents("");
            this.divData.addChild(obj.name, obj);

            obj = new Button("btnConf","221",null,"69","27",null,"10",null,null,null,null,this);
            obj.set_taborder("3");
            obj.set_text("수정");
            this.addChild(obj.name, obj);

            obj = new Button("btnCancel","301",null,"69","27",null,"10",null,null,null,null,this);
            obj.set_taborder("0");
            obj.set_text("닫기");
            this.addChild(obj.name, obj);
            // Layout Functions
            //-- Default Layout : this
            obj = new Layout("default","",this._adjust_width,this._adjust_height,this,function(p){});
            this.addLayout(obj.name, obj);
            
            // BindItem Information

            
            // TriggerItem Information

        };
        
        this.loadPreloadList = function()
        {

        };
        
        // User Script
        this.registerScript("DHV_VATMANAGESUBDLG.xfdl", function() {
        this.objApp = this.gfnGetApplication();

        this.form_onload = function(obj,e)
        {
        	// -- 필수 -------------------//
        	this.gfnFormOnLoad(this);
        	this.gfnFormInfo(this);
        	// ---------------------------//

        	this.fnSetButton();
        	this.fnSetExtendButton();
        	this.fnSetVariable();
        	this.fnSetEvent();
        	this.fnSetParameter();

        	//조회처리
        	this.fnSelect();
        	trace(" YN_CLOSE =>" + this.getOwnerFrame().YN_CLOSE);
        };

        /************************************************************************
         * 버튼 설정 : 화면(Tab) 전환시 마다 호출
         * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
         ************************************************************************/
        this.fnSetButton = function() {

        }

        /************************************************************************
         * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
         ************************************************************************/
        this.fnSetExtendButton = function() {

        };

        /************************************************************************
         * 변수 선언
         ************************************************************************/
        this.fnSetVariable = function() {
        	this.dxGrid = this.divData.form.objGrid;
        	this.dxGrid2 = this.divData.form.objGrid2;
        };

        /************************************************************************
         * 이벤트 설정
         ************************************************************************/
        this.fnSetEvent = function() {
        	this.gfnGridInit(this.dxGrid, this.dsList, "DH", "DHV_VATMANAGESUBDLG");
        	this.gfnGridInit(this.dxGrid2, this.dsList2, "DH", "DHV_VATMANAGESUBDLG2");

        	this.dxGrid.AfterEdit = "fnGrid_AfterEdit";
        	this.dxGrid2.AfterEdit = "fnGrid2_AfterEdit";

        	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "AM_SUPPLY"), "edittype", "expr:CD_CODE =='30'? 'none':'text'");
        	this.dxGrid2.setCellProperty("body", this.dxGrid2.getBindCellIndex("body", "AM_SUPPLY"), "edittype", "expr:CD_CODE =='69'? 'none':'text'");
        };

        /************************************************************************
         * 파라미터 설정
         ************************************************************************/
        this.fnSetParameter = function() {
        	this.dsSelect = new Dataset();
        	this.dsSelect.addColumn("CD_SELFACNT", "string");
        	this.dsSelect.addColumn("YR_TAX", "string");
        	this.dsSelect.addColumn("NO_TAX", "string");

        	this.dsUpdate = new Dataset();
        	this.dsUpdate.addColumn("CD_SELFACNT", "string");
        	this.dsUpdate.addColumn("YR_TAX", "string");
        	this.dsUpdate.addColumn("NO_TAX", "string");
        	this.dsUpdate.addColumn("CD_GUBUN", "string");
        	this.dsUpdate.addColumn("DS_UPTAE", "string");
        	this.dsUpdate.addColumn("DS_UPJONG", "string");
        	this.dsUpdate.addColumn("CD_UPJONG", "string");
        	this.dsUpdate.addColumn("AM_SUPPLY", "bigdecimal");
        }

        /************************************************************************
         * 컨트롤 이벤트
         ************************************************************************/
         /*
          *	조회 버튼
          */
        this.fnSelect = function() {
        	this.gfnGridBeforeSelect(this.dxGrid);

        	this.dsList.clearData();
        	this.dsList2.clearData();

        	this.dsSelect.clearData();
        	this.dsSelect.addRow();
        	this.dsSelect.setColumn(0, "CD_SELFACNT", this.getOwnerFrame().CD_SELFACNT);
        	this.dsSelect.setColumn(0, "YR_TAX", this.getOwnerFrame().YR_TAX);
        	this.dsSelect.setColumn(0, "NO_TAX", this.getOwnerFrame().NO_TAX);

        	var strSvcId    = "select";
        	var strSvcType  = "grid";
        	var inProc		= "_dsProc";
        	var inData      = "select=dsSelect";
        	var outData     = "dsResult=select0";
        	var strArg      = "";
        	var callBackFnc = "fnCallback";

        	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
        						strSvcType , 	// trabsaction을 요청할 구분
        						inProc,			// Procedure 정보 Dataset 이름
        						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
        						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
        						callBackFnc); // 통신방법 정의 [생략가능]

        }

         /*
         *	저장 버튼
         */
        this.fnSave = function() {
        	if (!this.gfnGridValidate(this.dxGrid)) return;
        	if (!this.gfnGridValidate(this.dxGrid2)) return;
        	trace(" YN_CLOSE =>" + this.getOwnerFrame().YN_CLOSE);
        	if (this.getOwnerFrame().YN_CLOSE == "Y") {
        		this.gfnAlert("마감자료는 수정할 수 없습니다. 마감취소 후 작업하세요.", "");
        	}

        	this.dxGrid.updateToDataset();
        	this.dxGrid2.updateToDataset();

        	this.dsUpdate.clearData();

        	//과세표준명세
        	for (var i = 0; i < this.dsList.rowcount; i++) {
        		var flag = this.gfnGetFlag(this.dsList, i);

        		switch(flag) {
        			case "U":
        				var nrow = this.dsUpdate.addRow();
        				this.dsUpdate.setColumn(nrow, "CD_SELFACNT", this.getOwnerFrame().CD_SELFACNT);
        				this.dsUpdate.setColumn(nrow, "YR_TAX", this.getOwnerFrame().YR_TAX);
        				this.dsUpdate.setColumn(nrow, "NO_TAX", this.getOwnerFrame().NO_TAX);
        				this.dsUpdate.setColumn(nrow, "CD_GUBUN", this.dsList.getColumn(i, "CD_CODE"));
        				this.dsUpdate.setColumn(nrow, "DS_UPTAE", this.dsList.getColumn(i, "DS_UPTAE"));
        				this.dsUpdate.setColumn(nrow, "DS_UPJONG", this.dsList.getColumn(i, "DS_UPJONG"));
        				this.dsUpdate.setColumn(nrow, "CD_UPJONG", this.dsList.getColumn(i, "CD_UPJONG"));
        				this.dsUpdate.setColumn(nrow, "AM_SUPPLY", this.dsList.getColumn(i, "AM_SUPPLY"));
        				break;
        		}
        	}

        	//면세수입금액
        	for (var i = 0; i < this.dsList2.rowcount; i++) {
        		var flag = this.gfnGetFlag(this.dsList2, i);

        		switch(flag) {
        			case "U":
        				var nrow = this.dsUpdate.addRow();
        				this.dsUpdate.setColumn(nrow, "CD_SELFACNT", this.getOwnerFrame().CD_SELFACNT);
        				this.dsUpdate.setColumn(nrow, "YR_TAX", this.getOwnerFrame().YR_TAX);
        				this.dsUpdate.setColumn(nrow, "NO_TAX", this.getOwnerFrame().NO_TAX);
        				this.dsUpdate.setColumn(nrow, "CD_GUBUN", this.dsList2.getColumn(i, "CD_CODE"));
        				this.dsUpdate.setColumn(nrow, "DS_UPTAE", this.dsList2.getColumn(i, "DS_UPTAE"));
        				this.dsUpdate.setColumn(nrow, "DS_UPJONG", this.dsList2.getColumn(i, "DS_UPJONG"));
        				this.dsUpdate.setColumn(nrow, "CD_UPJONG", this.dsList2.getColumn(i, "CD_UPJONG"));
        				this.dsUpdate.setColumn(nrow, "AM_SUPPLY", this.dsList2.getColumn(i, "AM_SUPPLY"));
        				break;
        		}
        	}

        	if (this.dsUpdate.rowcount == 0) return;

        	var strSvcId    = "save";
        	var strSvcType  = "save";
        	var inProc		= "_dsProc";
        	var inData      = "update=dsUpdate";
        	var outData     = "";
        	var strArg      = "";
        	var callBackFnc = "fnCallback";

        	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
        						strSvcType , 	// transaction을 요청할 구분
        						inProc,			// Procedure 정보 Dataset 이름
        						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
        						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
        						callBackFnc); // 통신방법 정의 [생략가능]
        }

        /************************************************************************
         * Validate
         ************************************************************************/

        /************************************************************************
         * 콜백 이벤트
         ************************************************************************/
        /*
         *	콜백 처리
        */
        this.fnCallback = function(svcID, errorCode, errorMsg)
        {
        	if (svcID == "select") {
        		this.gfnGridAfterSelect(this.dxGrid);
        		this.gfnGridAfterSelect(this.dxGrid2);

        		this.dsResult.addColumn(this.ucFlag, "string");
        		this.dsList.copyData(this.dsResult);
        		this.dsList2.copyData(this.dsResult);

        		for (var i=this.dsList.rowcount-1; i>=0; i--) {
        			if (i > 4)
        				this.dsList.deleteRow(i);
        		}

        		for (var i=this.dsList2.rowcount-1; i>=0; i--) {
        			if (i < 5)
        				this.dsList2.deleteRow(i);
        		}

        // 		this.dsList.clearData();
        // 		this.dsList2.clearData();
        //
        // 		var nRow = -1;
        // 		for (var i=0; i<=4; i++) {
        // 			nRow = this.dsList.addRow();
        // 			this.dsList.copyRow(nRow, this.dsResult, i);
        // 		}
        //
        // 		for (var i=6; i<=9; i++) {
        // 			nRow = this.dsList.addRow();
        // 			this.dsList.copyRow(nRow, this.dsResult, i);
        // 		}
        		if (this.getOwnerFrame().YN_CLOSE == "Y") {
        			this.btnConf.set_enable(false);
        		}
        	}

        	if (svcID == "save"){
        		if (errorCode == 0) {
        			this.fnExecute_callback = function() {
        				this.fnSelect();
        			}
        			this.gfnAlert("과세표준명세정보가 수정되었습니다.", "fnExecute_callback");
        		} else {
        			this.gfnAlert(errorMsg);
        		}
        	}

        }

        /************************************************************************
         * 코드파인드 이벤트
         ************************************************************************/

        /************************************************************************
         * 그리드 이벤트
         ************************************************************************/
        this.fnGrid_AfterEdit = function(obj,e) {
        	if (e.columnid == "AM_SUPPLY") {
        		if (e.oldvalue != e.newvalue) {
        			var amSum = this.dsList.getSum("AM_SUPPLY", 0, this.dsList.rowcount-1);
        			this.dsList.setColumn(this.dsList.rowcount-1, "AM_SUPPLY", amSum);

        			this.dsList.setColumn(e.row, this.ucFlag, "U");
        			this.dsList.setColumn(this.dsList.rowcount-1, this.ucFlag, "U");
        			this.gfnSetFormStatus(this, "U");

        		}
        	}
        }

        this.fnGrid2_AfterEdit = function(obj,e) {
        	if (e.columnid == "AM_SUPPLY") {
        		if (e.oldvalue != e.newvalue) {
        			var amSum = this.dsList2.getSum("AM_SUPPLY", 0, this.dsList2.rowcount-1);
        			this.dsList2.setColumn(this.dsList2.rowcount-1, "AM_SUPPLY", amSum);

        			this.dsList2.setColumn(e.row, this.ucFlag, "U");
        			this.dsList2.setColumn(this.dsList2.rowcount-1, this.ucFlag, "U");
        			this.gfnSetFormStatus(this, "U");
        		}
        	}
        }

        /************************************************************************
         * 기타 이벤트
         ************************************************************************/
        //취소버튼 클릭
        this.btnCancel_onclick = function(obj,e)
        {
        	this.getParentContext().close(false);
        };

        this.btnConf_onclick = function(obj,e)
        {
        	if (this.dsList.rowcount == 0 && this.dsList2.rowcount == 0)
        		return;

        	this.fnSave();
        };

        });
        
        // Regist UI Components Event
        this.on_initEvent = function()
        {
            this.addEventHandler("onload",this.form_onload,this);
            this.btnConf.addEventHandler("onclick",this.btnConf_onclick,this);
            this.btnCancel.addEventHandler("onclick",this.btnCancel_onclick,this);
        };
        this.loadIncludeScript("DHV_VATMANAGESUBDLG.xfdl");
        this.loadPreloadList();
        
        // Remove Reference
        obj = null;
    };
}
)();
