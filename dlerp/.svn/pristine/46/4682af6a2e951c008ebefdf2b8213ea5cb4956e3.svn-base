(function()
{
    return function()
    {
        if (!this._is_form)
            return;
        
        var obj = null;
        
        this.on_create = function()
        {
            this.set_name("form");
            this.set_titletext("재무만기현황");
            if (Form == this.constructor)
            {
                this._setFormPosition(1280,720);
            }
            
            // Object(Dataset, ExcelExportObject) Initialize
            obj = new Dataset("dsList", this);
            obj._setContents("");
            this.addChild(obj.name, obj);


            obj = new Dataset("_dsProc", this);
            obj._setContents("<ColumnInfo><Column id=\"TARGET\" type=\"STRING\" size=\"256\"/><Column id=\"SP\" type=\"STRING\" size=\"256\"/></ColumnInfo><Rows><Row><Col id=\"TARGET\">select</Col><Col id=\"SP\">DFBPR_FINANCE_QUERY_REPORT</Col></Row></Rows>");
            this.addChild(obj.name, obj);


            obj = new Dataset("dsSearch", this);
            obj._setContents("<ColumnInfo><Column id=\"CD_CORP\" type=\"STRING\" size=\"256\"/><Column id=\"YM_PLAN\" type=\"STRING\" size=\"256\"/></ColumnInfo><Rows><Row/></Rows>");
            this.addChild(obj.name, obj);


            obj = new Dataset("dsList2", this);
            obj._setContents("");
            this.addChild(obj.name, obj);


            obj = new Dataset("dsResult", this);
            obj._setContents("");
            this.addChild(obj.name, obj);
            
            // UI Components Initialize
            obj = new Div("divSearch","0.0","10.0",null,"46.0","0",null,null,null,null,null,this);
            obj.set_taborder("0");
            obj.set_cssclass("div_SEARCH_Bg");
            this.addChild(obj.name, obj);

            obj = new Static("staCD_CORP","0.0","10.0","92.0","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("2");
            obj.set_text("법인코드");
            obj.set_textDecoration("none");
            obj.set_cssclass("sta_WF_SchLabel");
            this.divSearch.addChild(obj.name, obj);

            obj = new Div("cfCD_CORP","staCD_CORP:0.0","10.0","269","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.getSetter("CDTextWidth").set("70");
            obj.set_taborder("0");
            obj.set_url("cmm::cmmCodeFind.xfdl");
            obj.set_text("");
            this.divSearch.addChild(obj.name, obj);

            obj = new Static("sta01","cfCD_CORP:0.0","10.0","92.0","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("3");
            obj.set_text("조회년월");
            obj.set_cssclass("sta_WF_SchLabelE");
            this.divSearch.addChild(obj.name, obj);

            obj = new Div("caYM_PLAN","sta01:0.0","10.0","90","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("1");
            obj.set_url("cmm::cmmCalMM.xfdl");
            this.divSearch.addChild(obj.name, obj);

            obj = new Div("divData","0","divSearch:10",null,null,"0","0",null,null,null,null,this);
            obj.set_taborder("1");
            obj.set_cssclass("div_DATA_Bg");
            this.addChild(obj.name, obj);

            obj = new Div("divSplitter","0","66.42%","99.77%","5",null,null,null,null,null,null,this.divData.form);
            obj.set_taborder("2");
            obj.set_cursor("ns-resize");
            obj.set_cssclass("div_Splitter");
            this.divData.addChild(obj.name, obj);

            obj = new Div("divDataTop","0","0",null,null,"0","divSplitter:5",null,null,null,null,this.divData.form);
            obj.set_taborder("1");
            this.divData.addChild(obj.name, obj);

            obj = new Grid("objGrid","0","0",null,null,"0","2",null,null,null,null,this.divData.form.divDataTop.form);
            obj.set_taborder("1");
            obj._setContents("");
            this.divData.form.divDataTop.addChild(obj.name, obj);

            obj = new Div("divDataBottom","0","divSplitter:5",null,null,"0","0",null,null,null,null,this.divData.form);
            obj.set_taborder("1");
            this.divData.addChild(obj.name, obj);

            obj = new Static("staDtl","0","0",null,"22","240",null,null,null,null,null,this.divData.form.divDataBottom.form);
            obj.set_taborder("0");
            obj.set_text("상세정보");
            obj.set_cssclass("sta_TITLE_Bg");
            this.divData.form.divDataBottom.addChild(obj.name, obj);

            obj = new Grid("objGrid2","0","20",null,null,"0","0",null,null,null,null,this.divData.form.divDataBottom.form);
            obj.set_taborder("1");
            obj._setContents("");
            this.divData.form.divDataBottom.addChild(obj.name, obj);

            obj = new Button("btnDetail",null,"0","80","20","0",null,null,null,null,null,this.divData.form.divDataBottom.form);
            obj.set_taborder("2");
            obj.set_text("상세정보");
            this.divData.form.divDataBottom.addChild(obj.name, obj);
            // Layout Functions
            //-- Default Layout : this
            obj = new Layout("default","",this._adjust_width,this._adjust_height,this,function(p){});
            this.addLayout(obj.name, obj);
            
            // BindItem Information
            obj = new BindItem("item0","divSearch.form.cfCD_CORP.form.CDTextBox","value","dsSearch","CD_CORP");
            this.addChild(obj.name, obj);
            obj.bind();

            obj = new BindItem("item3","divSearch.form.caYM_PLAN.form.TextBox","value","dsSearch","YM_PLAN");
            this.addChild(obj.name, obj);
            obj.bind();
            
            // TriggerItem Information

        };
        
        this.loadPreloadList = function()
        {
            this._addPreloadList("fdl","cmm::cmmCodeFind.xfdl");
            this._addPreloadList("fdl","cmm::cmmCalMM.xfdl");
        };
        
        // User Script
        this.registerScript("DFB_FINANCE_QUERY.xfdl", function() {
        this.objApp = this.gfnGetApplication();

        var strFlag = "";  //M : grdCalendar, D : grdData
        this.nShift = 0;
        this.form_onload = function(obj,e)
        {
        	// -- 필수 -------------------//
        	this.gfnFormOnLoad(this);
        	this.gfnFormInfo(this);
        	// ---------------------------//

        	this.fnSetButton();
        	this.fnSetExtendButton();
        	this.fnSetVariable();
        	this.fnSetEvent();
        	this.fnSetParameter();
        	this.fnSetCombo();
        };

        /************************************************************************
         * 버튼 설정 : 화면(Tab) 전환시 마다 호출
         ************************************************************************/
        this.fnSetButton = function() {
        	// 입력,저장,삭제 버튼 비활성화 처리
        //  	this.FormBtns.Add.set_enable(false);
        //  	this.FormBtns.Save.set_enable(false);
        //  	this.FormBtns.Del.set_enable(false);
        };

        /************************************************************************
         * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
         ************************************************************************/
        this.fnSetExtendButton = function() {
            this.btnCurrentMonth = this.gfnFormButtonAdd("btnCurrentMonth", "fnCurrentMonth");
        	this.btnBeforeMonth = this.gfnFormButtonAdd("btnBeforeMonth", "fnBeforeMonth");
        	this.btnAfterMonth = this.gfnFormButtonAdd("btnAfterMonth", "fnAfterMonth");
        	this.btnBeforeYear = this.gfnFormButtonAdd("btnBeforeYear", "fnBeforeYear");
        	this.btnAfterYear = this.gfnFormButtonAdd("btnAfterYear", "fnAfterYear");
        };

        /************************************************************************
         * 변수 선언
         ************************************************************************/
        this.fnSetVariable = function() {

        	// 조회조건
        	this.cfCD_CORP = this.divSearch.form.cfCD_CORP;	// 법인코드
        	//this.calDT_FROM = this.divSearch.form.calDT_FROM;	// 조회일자(from)
        	//this.calDT_TO = this.divSearch.form.calDT_TO;		// 조회일자(to)
        	this.caYM_PLAN = this.divSearch.form.caYM_PLAN;		// 조회일자(to)
        	this.staDtl = this.divData.form.divDataBottom.form.staDtl;


        	this.dxGrid = this.divData.form.divDataTop.form.objGrid;		// 그리드
        	this.dxGrid2 = this.divData.form.divDataBottom.form.objGrid2;	// 그리드
        	this.grSearch = this.FormInfo.GR_SEARCH;						// 권한?
        	this.cdGroup = this.gfnIsNull(this.AuthClient.CD_GROUP) ? "" : this.AuthClient.CD_GROUP;			// 그룹코드

        	//trace("20191201 :: " + this.gfnGetWeek("20191201"));
        	//trace("20191231 :: " + this.gfnGetWeek("20191231"));
        	//trace("20191201 111 :: " + this.fnGetWeek("20191201"));
        	//trace("20191231 222 :: " + this.fnGetWeek("20191231"));

        }

        /************************************************************************
         * 이벤트 설정
         ************************************************************************/
        this.fnSetEvent = function() {

        	this.cfCD_CORP.CodeFindName = "DZX_CFCORP";	// 법인코드
        	this.cfCD_CORP.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
        	this.cfCD_CORP.AfterCDTextChanged = "fnAfterCDTextChanged";

        	// 그리드 초기화
        	this.gfnGridInit(this.dxGrid, this.dsList, "DF", "DFB_FINANCE_QUERY2");
        	this.gfnGridInit(this.dxGrid2, this.dsList2, "DF", "DFB_FINANCE_QUERY");
        	this.dxGrid.selecttype = "cell";

        	// 법인코드세션
        	if (this.gfnIsNull(this.cfCD_CORP.form.CDTextBox.value)) {
        		this.cfCD_CORP.form.DSTextBox.set_value(this.AuthClient.DS_CORP);
        		this.cfCD_CORP.form.CDTextBox.set_value(this.AuthClient.CD_CORP);
        	}

        	var vToday = this.gfnGetDate().substr(0,6);
        	this.caYM_PLAN.form.TextBox.set_value(vToday);

        	//this.calDT_FROM.set_value(this.gfnGetFirstDate(vToday));
        	//this.calDT_TO.set_value(this.gfnGetLastDate(vToday));

        	// 권한체크 - 해당부서내역만 조회가능
        	if (nexacro.toNumber(this.grSearch) >= 2) {
        		this.cfCD_CORP.set_enable(false);
        	}

        	// 권한체크
        	// 법인코드(1)
        	if (nexacro.toNumber(this.grSearch) > 1) {
        		this.divSearch.form.sta04.set_textDecoration("underline");
        	}

        	// 법인코드 포커스추가
        	this.cfCD_CORP.form.CDTextBox.setFocus();
        }

        /************************************************************************
         * 파라미터 설정
         ************************************************************************/
        this.fnSetParameter = function() {

        	this.dsSelect = new Dataset();
        	this.dsSelect.addColumn("DT_FROM", "string");
        	this.dsSelect.addColumn("DT_TO", "string");
        	this.dsSelect.addColumn("CD_CORP", "string");
        }

        /************************************************************************
         * 컨트롤 이벤트
         ************************************************************************/
         /*
          *	조회 버튼
          */
        this.fnSelect = function() {
        	if (!this.fnSelectValidate()) return false;

        	this.gfnGridBeforeSelect(this.dxGrid);

        	this.dsSelect.clearData();
        	this.dsSelect.addRow();
        	this.dsSelect.setColumn(0, "DT_FROM", this.gfnGetFirstDate(this.dsSearch.getColumn(0, "YM_PLAN")));
        	this.dsSelect.setColumn(0, "DT_TO", this.gfnGetLastDate(this.dsSearch.getColumn(0, "YM_PLAN")));
        	this.dsSelect.setColumn(0, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));

        	var strSvcId    = "select";
        	var strSvcType  = "grid";
        	var inProc		= "_dsProc";
        	var inData      = "select=dsSelect";
        	var outData     = "dsResult=select0 dsList2=select0";
        	var strArg      = "";
        	var callBackFnc = "fnCallback";

        	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
        						strSvcType , 	// transaction을 요청할 구분
        						inProc,			// Procedure 정보 Dataset 이름
        						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
        						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
        						callBackFnc); 	// 통신방법 정의 [생략가능]
        }

        /*
         *	입력 버튼
         */
        this.fnAdd = function() {

        }

        /*
         *	삭제 버튼
         */
        this.fnDel = function() {
        }

        /*
         *	저장 버튼
         */
        this.fnSave = function(svcId) {

        }


        /*
         *	엑셀 버튼
         */
        this.fnExcel = function() {
        	this.gfnExcelExport(this.dxGrid);
        }

        /*
         *	출력 버튼
         */
        this.fnPrint = function() {
        }

        /************************************************************************
         * Validate
         ************************************************************************/
        /*
         *	조회 Validate
         */
        this.fnSelectValidate = function() {

        	if (nexacro.toNumber(this.grSearch) > 1) {
        		if (this.gfnIsNull(this.dsSearch.getColumn(0, "CD_CORP"))) {
        			this.gfnAlert("법인코드를 입력 하세요.");
        			this.cfCD_CORP.form.CDTextBox.setFocus();
        			return false;
        		}
        	}
        // 	if (this.gfnIsNull(this.dsSearch.getColumn(0, "CD_CORP"))) {
        // 		this.gfnAlert("법인코드를 입력 하세요.");
        // 		this.cfCD_CORP.form.CDTextBox.setFocus();
        // 		return false;
        // 	}

        	if (this.gfnIsNull(this.dsSearch.getColumn(0, "YM_PLAN"))) {
        		this.gfnAlert("조회년월을 입력 하세요.");
        		this.caYM_PLAN.form.TextBox.setFocus();
        		return false;
        	}
        	return true;
        };


        /************************************************************************
         * 콜백 이벤트
         ************************************************************************/
        /*
         *	콜백 처리
         */
        this.fnCallback = function(svcID, errorCode, errorMsg)
        {
        	if (svcID == "select") {
        		//this.gfnGridAfterSelect(this.dxGrid);

        		this.tnDataBindToCalendar();

        	}
        }

        this.tnDataBindToCalendar = function() {
        	this.dsList.clearData();
        	//this.dsList2.clearData();

        	this.dsList.set_enableevent(false);
        	//this.dsList2.set_enableevent(false);

        	var nowDate = this.gfnGetDate();												//오늘날짜 (비교해서 과거, 미래, 오늘 배경색 넣음)
        	var selDate1 = this.gfnGetFirstDate(this.dsSearch.getColumn(0, "YM_PLAN"));		//선택된 월의 첫째일
        	var selDate2 = this.gfnGetLastDate(this.dsSearch.getColumn(0, "YM_PLAN"));		//선택된 월의 마지막일

        // 	var week1 = this.fnGetWeek(selDate1);
        // 	var week2 = this.fnGetWeek(selDate2);

        	var countOfWeeks = 5; // week2 - week1 + 1;
        	var firstStartPoint = this.gfnGetDay(selDate1);		//해당월 1일자 요일 계산 Sun->0 Sat->6
        	if ((firstStartPoint == 6 && selDate2.substr(6) >=30) || (firstStartPoint == 5 && selDate2.substr(6) ==31)){
        		countOfWeeks += 1 ;
        	}
        // 	trace("selDate1 :: " + this.fnGetWeek(selDate1) + ', '+ firstStartPoint);
        // 	trace("selDate2 :: " + selDate2.substr(6));
        	trace("countOfWeeks :: " + countOfWeeks);

        	for (var i=0; i <= countOfWeeks - 1; i++) {
        		var nRow = this.dsList.addRow();
        		this.dxGrid.setFormatRowProperty(nRow+1, "size", 80);
        	}

        	var dayOfExe = 0;  	// 일자
        	var rowCount = 0;  	// 일자에 해당되는 Row
        	var colCount = 0;	// 일자에 해당되는 Col

        	var context = "";	// 추가될 내역

        	var i = 0;
        	for (var i = 1; i <= selDate2.substring(6); i++) {
        		rowCount = nexacro.floor((i + firstStartPoint - 1) / 7);
        		colCount = ((i + firstStartPoint-1) % 7);

        // 		trace(selDate2.substring(6) + ', '+ i);
        // 		trace("rowCount :: " + rowCount);
        // 		trace("colCount :: " + colCount);

        		this.dsList.setColumn(rowCount, colCount+2, i);
        		this.dsList.setColumn(rowCount, colCount+7+2, this.gfnAddDate(selDate1, (i-1)));
        	}
        // 	 trace("this.dsList.saveXML() :: " + this.dsList.saveXML());
        //
        // 	 trace("this.dsResult.rowcount :: " + this.dsResult.rowcount);
        	if (this.dsResult.rowcount == 0) {
        		this.dxGrid.updateToDataset();
        		for (var i=0; i < this.dsList.rowcount; i++) {
        			this.dsList.setColumn(i, this.ucFlag, "");
        		}
        		this.dsList.set_enableevent(true);
        		this.staDtl.set_text("상세정보");
        		this.gfnSetFormStatus(this, "Q");	// 폼상태 초기화
        		this.fnSetDate(); // 셀선택
        		return false;
        	}

        	// trace("this.dsResult.saveXML() :: " + this.dsResult.saveXML());
        	for (i = 0; i < this.dsResult.rowcount; i++) {
        		dayOfExe = this.dsResult.getColumn(i, "DT_JIGEUB").substring(6);
        		rowCount = nexacro.floor((nexacro.toNumber(dayOfExe) + firstStartPoint - 1) / 7);   	//일자에 해당되는 Row
        		colCount = (nexacro.toNumber(dayOfExe) + firstStartPoint - 1) % 7;      				//일자에 해당되는 Col

        		var lineCount = nexacro.floor(80 / 20);	//한날짜의 Line수 계산  4줄

        		var grdText = [];
        		grdText = (this.gfnIsNull(this.dsList.getColumn(rowCount, colCount+2)) ? "" : this.dsList.getColumn(rowCount, colCount+2).split("\n"));
        		grdText = this.dsList.getColumn(rowCount, colCount+2).split("\n");
        // 		trace("grdText[dslist getColumn] :: " + grdText);
        // 		trace("grdText.length :: " + grdText.length);
        		Context = "";

        		if (grdText.length == lineCount ) {
        			this.dsList.setColumn(rowCount, colCount+2, (this.dsList.getColumn(rowCount, colCount+2).toString() + "r").replace(grdText[grdText.length - 1] + "r", ""));	//같은내용이 여러건 있을 경우로 인해 "r"을붙여서 마지막줄 삭제
        // 			 trace("rowCount, colCount+2 ::: " + this.dsList.getColumn(rowCount, colCount+2).toString() + "r");
        // 			 trace("grdText ::: " + grdText[grdText.length - 1].substring(0, 1));

        			if (grdText[grdText.length - 1].substring(0, 1) == "[") {
        				context = "      ...... 외 2 건";
        			} else {
        				if (!this.gfnIsNull(this.gfnTrim(grdText[grdText.length - 1].substring(0, 1)))) {
        					var cnt = nexacro.toNumber(grdText[grdText.Length - 1].substring(15).Split('건')[0].toString().trim()) ;
        					Context = "      ...... 외 " + Cnt.ToString() + " 건";
        				}
        			}
        		} else {
        			context = "\r\n" + "[" + this.dsResult.getColumn(i, "TY_PLANSILJUK") + "]" + this.dsResult.getColumn(i, "NM_GUBUN1") + "(" + this.dsResult.getColumn(i, "TY_INOUT") + ")";
        		}
        		//trace(" context=>" + this.dsList.getColumn(rowCount, colCount+2) +', '+  context);
        		this.dsList.setColumn(rowCount, colCount+2, (this.dsList.getColumn(rowCount, colCount+2) + context).replace(/\n$/gm, ''));

        		// trace("==============================================");
        	}

        	for (var i = 1; i <= selDate2.substring(6); i++) {
        		rowCount = nexacro.floor((i + firstStartPoint - 1) / 7);
        		colCount = ((i + firstStartPoint-1) % 7);

        // 		trace(selDate2.substring(6));
        // 		trace("rowCount :: " + rowCount);
        // 		trace("colCount :: " + colCount);

        		//var strFlag = this.dsList.getColumn(rowCount, colCount+2).trim();
        		var strFlag = i < 10 ? ("0"+i).toString() : i;
        		var	currDt = this.dsSearch.getColumn(0, "YM_PLAN").toString() + strFlag;
        // 		trace("strFlag :: " + strFlag);
        // 		trace("strFlag2 :: " + this.dsSearch.getColumn(0, "YM_PLAN").toString() + strFlag);
        // 		trace("currDt :: " + currDt);
        		var nCnt = this.dsResult.getCaseCount("DT_JIGEUB == " + currDt.trim());
        // 		trace("nCnt ::: " + nCnt);
        //
        //  		trace("col context::: " + this.dsList.getColumn(rowCount, colCount+2, i).replace(" 2 ", " " + nCnt + " "));
        // 		trace(" context=>" + this.dsList.getColumn(rowCount, colCount+2, i) + ',' + nCnt );
        		this.dsList.setColumn(rowCount, colCount+2, this.dsList.getColumn(rowCount, colCount+2, i).replace(" 2 ", " " + (nCnt-2) + " "));
        		this.dsList.setColumn(rowCount, colCount+7+2, this.gfnAddDate(selDate1, (i-1)));
        	}

        	//this.gfnGridColumnColor(this.dxGrid, "SUN", "BACK_GangJo", "SUN != ''");


        	this.dxGrid.updateToDataset();
        	for (var i=0; i < this.dsList.rowcount; i++) {
        		this.dsList.setColumn(i, this.ucFlag, "");
        	}
        	//trace("this.dsList.saveXML() :: " + this.dsList.saveXML());

            this.dsList.set_enableevent(true);
        	//this.dsList2.set_enableevent(true);
        	this.gfnSetFormStatus(this, "Q");	// 폼상태 초기화
         	//현재 일 선택
        	this.fnSetDate();
        }

        this.fnDataDisplay = function() {

        }

        this.fnSetDate = function ()
        {
        	var	currDt = this.dsSearch.getColumn(0, "YM_PLAN").toString();
        	var vToday = this.gfnGetDate().substr(0,6);
        	trace(" fnSetDate=>" + vToday);
        	if (currDt == vToday) // 조회월이 현재월일 경우에만 선택
        	{
        		var vDay = this.gfnGetDate().substr(6,2);  //현재일
        		var nRow = this.dsList.findRowExpr("SUN == '"+ vDay + "' || MON == '"+ vDay + "' || TUE == '"+ vDay+ "' || WED == '"+ vDay+ "' || THU == '"+ vDay+ "' || FRI == '"+ vDay+ "' || SAT == '"+ vDay +"' ");
        		var firstStartP = this.gfnGetDay(this.gfnGetFirstDate(currDt));

        		var vRow = nexacro.floor(( nexacro.toNumber(vDay) + firstStartP - 1) / 7);
        		var vCol = ((nexacro.toNumber(vDay)  + firstStartP-1) % 7) + 1;
        		trace(" nRow=>" + vRow);
        		trace(" vCol=>" + vCol);

        		this.dxGrid.selectCell(vRow, vCol);
        		this.fnCellEnter(vRow, vCol);
        	} else{
        		trace(" fnSetDate2 =>");
        		//this.dxGrid.selecttype = "cell";
        		this.dxGrid.selectCell(0, 0);
        		this.dsList2.set_enableevent(false);
        		this.dsList2.filter("");
        		this.staDtl.set_text("[" + this.dsSearch.getColumn(0, "YM_PLAN").substring(0,4) + "-" + this.dsSearch.getColumn(0, "YM_PLAN").substring(4,6)+ "] 상세정보");
        		this.dxGrid2.updateToDataset();
        		this.dsList2.set_enableevent(true);
        	}

        };

        /************************************************************************
         * 코드파인드 이벤트
         ************************************************************************/
        this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
        	return true;
        }

        this.fnAfterCDTextChanged = function(id, codeFindData) {
        }


        /************************************************************************
         * 그리드 이벤트
         ************************************************************************/

        /************************************************************************
         * 기타 이벤트
         ************************************************************************/
        /*
         *	조회 조건 변경시 초기화
         */
        this.fnSearchInit = function(obj,e) {
        	if(e == null || (e.pretext != e.posttext)) {
        		this.gfnSetFormStatus(this);
        		this.gfnGridClear(this.dxGrid);
        		this.gfnGridClear(this.dxGrid2);
        		this.staDtl.set_text("상세정보");
        		this.dsResult.filter("");
        	}
        };

        // 공통코드콤보
        this.fnSetCombo = function() {
        };


        this.dsSearch_onvaluechanged = function(obj,e)
        {
        	if(e.oldvalue != e.newvalue) {
        		this.gfnSetFormStatus(this);	// 폼상태 초기화
        		this.gfnGridClear(this.dxGrid);
        		this.gfnGridClear(this.dxGrid2);

        		this.staDtl.set_text("상세정보");
        		this.dsResult.filter("");
        		//this.dxGrid2.set_binddataset("dsList2");
        	}
        };

        this.divData_divDataTop_objGrid_oncellclick = function(obj,e)
        {

        	this.fnCellEnter(e.row, e.cell);

        };

        this.fnCellEnter = function(nrow , ncell) {

        	var colnm = this.gfnGridGetBindColumnNameByIndex(this.dxGrid, ncell);

        	if (this.gfnIsNull(this.gfnTrim(this.dsList.getColumn(nrow, colnm)))) { return; }
        	if ((this.gfnTrim( this.dsList.getColumn(nrow, colnm) ).split("\n"))[0].trim().length == 0 )  {return;}

        	strFlag = this.dsList.getColumn(nrow, colnm).trim().split('\n')[0].trim();
        	strFlag = (strFlag.length == 1 ? "0" + strFlag : strFlag);

        	this.staDtl.set_text("[" + this.dsSearch.getColumn(0, "YM_PLAN").substring(0,4) + "-" + this.dsSearch.getColumn(0, "YM_PLAN").substring(4,6) + "-" + strFlag + "] 상세정보");

        	var sGubun = [];
        	sGubun = this.dsList.getColumn(nrow, colnm).trim().split('\n');
        	if (sGubun.Length == 1) return;

        	var currDate = this.dsSearch.getColumn(0, "YM_PLAN").toString() + strFlag;

        	trace(" currDate=>" + currDate);
        	this.dsList2.set_enableevent(false);
        	this.dsList2.filter("DT_JIGEUB == " + currDate);
        	//this.dxGrid2.updateToDataset();
            this.dsList2.set_enableevent(true);
        }

        this.divData_divDataBottom_objGrid2_oncelldblclick = function(obj,e)
        {
        	this.fnPopupOpen(e.row);
        };

        this.divData_divDataBottom_btnDetail_onclick = function(obj,e)
        {
        	this.fnPopupOpen(this.dsList2.rowposition);
        };

        this.fnPopupOpen = function(row) {
        	//if (!this.gfnGridIsRow(this.dxGrid2)) { return false; }

        	var nmGubun = this.dsList2.getColumn(row, "NM_GUBUN1");
        	var param = {};
        	param.OWNER_ID = "DFB_FINANCE_QUERY";
        	var module = "";
        	var popId = "";
        	trace(" nmGubun=>" + nmGubun);
        	switch(nmGubun) {
        	case "차입금":
        			/*법인코드, 관리번호*/
        			param.CD_CORP = this.cfCD_CORP.form.CDTextBox.value;
        			param.DS_CORP = this.cfCD_CORP.form.DSTextBox.value;
        			param.NO_CHAIP = this.dsList2.getColumn(row, "KEY1");
        			param.DT_FROM = this.dsList2.getColumn(row, "DT_JIGEUB");
        			param.DT_TO = this.dsList2.getColumn(row, "DT_JIGEUB");
        			module = "DFC";
        			popId = "DFC_CHAIP_PLAN";
        		break;
        	case "예적금":
        			/*법인코드, 관리번호*/
        			param.CD_CORP = this.cfCD_CORP.form.CDTextBox.value;
        			param.DS_CORP = this.cfCD_CORP.form.DSTextBox.value;
        			param.CD_YEJUKUM = this.dsList2.getColumn(row, "KEY1");
        			param.DT_FROM = this.dsList2.getColumn(row, "DT_JIGEUB");
        			param.DT_TO = this.dsList2.getColumn(row, "DT_JIGEUB");
        			module = "DFF";
        			popId = "DFF_PLANSILJUK";
        		break;
        	case "어음":
        			/*법인코드, 기간*/
        			param.CD_CORP = this.cfCD_CORP.form.CDTextBox.value;
        			param.DS_CORP = this.cfCD_CORP.form.DSTextBox.value;
        			param.DT_FROM = this.dsList2.getColumn(row, "DT_JIGEUB");
        			param.DT_TO = this.dsList2.getColumn(row, "DT_JIGEUB");
        			param.TY_NOTES = this.dsList2.getColumn(row, "TY_INOUT");
        			module = "DFD";
        			popId = "DFD_NOTES_CONDITION";
        		break;
        	case "유가증권":
        			/*법인코드, 관리번호*/
        			param.CD_CORP = this.cfCD_CORP.form.CDTextBox.value;
        			param.DS_CORP = this.cfCD_CORP.form.DSTextBox.value;
        			param.NO_YUGA = this.dsList2.getColumn(row, "KEY1");
        			param.DT_FROM = this.dsList2.getColumn(row, "DT_JIGEUB");
        			param.DT_TO = this.dsList2.getColumn(row, "DT_JIGEUB");
        			module = "DFE";
        			popId = "DFE_YUGA_PLAN";
        		break;
        	case "대여금":
        			/*법인코드, 관리번호*/
        			param.CD_CORP = this.cfCD_CORP.form.CDTextBox.value;
        			param.DS_CORP = this.cfCD_CORP.form.DSTextBox.value;
        			param.NO_LOAN = this.dsList2.getColumn(row, "KEY1");
        			param.DT_FROM = this.dsList2.getColumn(row, "DT_JIGEUB");
        			param.DT_TO = this.dsList2.getColumn(row, "DT_JIGEUB");
        			module = "DFH";
        			popId = "DFG_LOAN_PLAN";
        		break;
        	case "원화집행":
        			/*법인코드, 관리번호*/
        			param.CD_CORP = this.cfCD_CORP.form.CDTextBox.value;
        			param.DS_CORP = this.cfCD_CORP.form.DSTextBox.value;
        			param.DT_REQ_FR = this.dsList2.getColumn(row, "DT_JIGEUB");
        			param.DT_REQ_TO = this.dsList2.getColumn(row, "DT_JIGEUB");

        			module = "DFB";
        			popId = "DFB_REQUESTASSIGN_EXECTRAN";
        		break;
        	case "외화집행":
        			/*법인코드, 관리번호*/
        			param.CD_CORP = this.cfCD_CORP.form.CDTextBox.value;
        			param.DS_CORP = this.cfCD_CORP.form.DSTextBox.value;
        			param.DT_REQ_FR = this.dsList2.getColumn(row, "DT_JIGEUB");
        			param.DT_REQ_TO = this.dsList2.getColumn(row, "DT_JIGEUB");

        			module = "DFB";
        			popId = "DFB_REQUESTASSIGN_EXECTRAN_FRGN";
        		break;
        	default:
        	}

        	this.gfnFormOpen(module, popId, "", param);
        }

        this.fnGetWeek = function (strDate) {
        	var totalDays = 0;
        		now = this.gfnStrToDate(strDate);
        		years=now.getYear();
        	var days = new Array(12);
        		days[0] = 31;
        		days[2] = 31;
        		days[3] = 30;
        		days[4] = 31;
        		days[5] = 30;
        		days[6] = 31;
        		days[7] = 31;
        		days[8] = 30;
        		days[9] = 31;
        		days[10] = 30;
        		days[11] = 31;

        	if (Math.round(now.getYear()/4) == now.getYear()/4) {
        		days[1] = 29
        		}
        		else{
        		days[1] = 28
        	}

        	if (now.getMonth() == 0) {
        		totalDays = totalDays + now.getDate();
        	}
        	else{

        		var curMonth = now.getMonth();
        		for (var count = 1; count <= curMonth; count++) {
        			totalDays = totalDays + days[count - 1];
        		}
        			totalDays = totalDays + now.getDate();
        		}

        	var agt=navigator.userAgent.toLowerCase();
        		if ((agt.indexOf("msie") != -1) && (agt.indexOf("opera") == -1)) {
        	var firstday=new Date("01/01/"+String(now.getYear())).getDay();
        	}
        	else {
        	var firstday=new Date("01/01/"+String(1900+now.getYear())).getDay();
        	}
        	var diff=7-firstday+1;
        	var week = Math.round((totalDays+diff-firstday)/7);
        	return years + (week.toString()).padLeft(2,"0");

        }


        this.dsResult_onload = function(obj,e)
        {
        // 	trace("obj.rowcount 1111111 :: " + obj.rowcount);
        // 	trace("e.reason :: " + e.reason);
        // 	trace("obj.rowcount 2222222 :: " + obj.rowcount);
        //
        // 	if (e.reason == 0) {
        // 		this.tnDataBindToCalendar();
        // 	}
        };


        this.divData_divSplitter_ondrag = function(obj,e)
        {
        	e.set_userdata("splitter");
        	return true;
        };


        this.divData_ondragmove = function(obj,e)
        {
            //trace(" divData_ondragmove=>" + e.userdata);
        	if(e.userdata == "splitter") {
        		this.divData.form.divSplitter.set_top(e.clienty);
        		this.divData.form.resetScroll();
        	}
        }

        this.fnCurrentMonth = function ()
        {
        	var curMonth = this.gfnGetDate().substr(0,6);

        	this.dsSearch.setColumn(0, "YM_PLAN", curMonth);

        	this.FormBtns.Select.click();
        };

        // 한달 전으로
        this.fnBeforeMonth = function()
        {
        	var curMonth = this.dsSearch.getColumn(0, "YM_PLAN");
        	var beforeMonth = this.gfnAddMonth(curMonth + "01", -1).substr(0,6);

        	this.dsSearch.setColumn(0, "YM_PLAN", beforeMonth);

        	this.FormBtns.Select.click();
        }
        // 한달 후로
        this.fnAfterMonth = function()
        {
        	var curMonth = this.dsSearch.getColumn(0, "YM_PLAN");
        	var AfterMonth = this.gfnAddMonth(curMonth + "01", 1).substr(0,6);

        	this.dsSearch.setColumn(0, "YM_PLAN", AfterMonth);
        	this.FormBtns.Select.click();

        }

        // 일년 전으로
        this.fnBeforeYear = function()
        {
        	var curMonth = this.dsSearch.getColumn(0, "YM_PLAN");
        	var beforeMonth = this.gfnAddMonth(curMonth + "01", -12).substr(0,6);

        	this.dsSearch.setColumn(0, "YM_PLAN", beforeMonth);

        	this.FormBtns.Select.click();
        }
        // 일년 후로
        this.fnAfterYear = function()
        {
        	var curMonth = this.dsSearch.getColumn(0, "YM_PLAN");
        	var AfterMonth = this.gfnAddMonth(curMonth + "01", 12).substr(0,6);

        	this.dsSearch.setColumn(0, "YM_PLAN", AfterMonth);
        	this.FormBtns.Select.click();

        }
        });
        
        // Regist UI Components Event
        this.on_initEvent = function()
        {
            this.addEventHandler("onload",this.form_onload,this);
            this.divData.addEventHandler("ondragmove",this.divData_ondragmove,this);
            this.divData.form.divSplitter.addEventHandler("ondrag",this.divData_divSplitter_ondrag,this);
            this.divData.form.divSplitter.addEventHandler("ondragmove",this.divData_divSplitter_ondragmove,this);
            this.divData.form.divDataTop.form.objGrid.addEventHandler("oncellclick",this.divData_divDataTop_objGrid_oncellclick,this);
            this.divData.form.divDataBottom.form.objGrid2.addEventHandler("oncelldblclick",this.divData_divDataBottom_objGrid2_oncelldblclick,this);
            this.divData.form.divDataBottom.form.btnDetail.addEventHandler("onclick",this.divData_divDataBottom_btnDetail_onclick,this);
            this.dsSearch.addEventHandler("onvaluechanged",this.dsSearch_onvaluechanged,this);
            this.dsResult.addEventHandler("onload",this.dsResult_onload,this);
        };
        this.loadIncludeScript("DFB_FINANCE_QUERY.xfdl");
        this.loadPreloadList();
        
        // Remove Reference
        obj = null;
    };
}
)();
