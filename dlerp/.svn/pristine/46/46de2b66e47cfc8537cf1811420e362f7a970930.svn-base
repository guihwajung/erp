<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="기준정보" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0" top="0" height="46" right="0" cssclass="div_SEARCH_Bg" formscrolltype="none">
          <Layouts>
            <Layout>
              <Static id="staDT_YYYY" taborder="0" text="기준년도" left="0" top="10" width="92" height="24" cssclass="sta_WF_SchLabelE"/>
              <Div id="ctclDT_YYYY" taborder="1" left="staDT_YYYY:0" top="10" width="80" height="24" url="cmm::cmmCalYY.xfdl"/>
              <Combo id="cboCD_GBN" taborder="0" left="ctclDT_YYYY:20" top="10" width="120" height="24" innerdataset="dsCD_GBN" codecolumn="CODE" datacolumn="VALUE" index="0" text="ISO" value="ISO"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:20" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0" autofittype="col"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	this.dsSearch.setColumn(0, "DT_YYYY", this.gfnGetDate().substr(0,4));
	
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
	// Select, Add, Del, Save, Excel, Print
	// SubSelect, SubAdd, SubDel, SuubSave, SubExcel
	//this.FormBtns.Select.set_enable(false);
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btnDataCpy = this.gfnFormButtonAdd("btnDataCpy", "fnDataCpy");
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.ctclDT_YYYY = this.divSearch.form.ctclDT_YYYY;
	this.dxGrid = this.divData.form.objGrid;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {	
	
	// 그리드 초기화
	this.gfnGridInit(this.dxGrid, this.dsList, "DZ", "DZM_STANDARD");

	// 셀 수정가능 여부
	//this.dxGrid.EnterCell = "fnGrid_EnterCell";
	
	// 셀 변경 후 이벤트
	//this.dxGrid.AfterEdit = "fnGrid_AfterEdit";
	
	// 그리드 코드파인드 설정
	//this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforeUserDataSetParam";
	
	// 전체체크박스 체크/해제 이벤트
	//this.dxGrid.AfterAllCheck = "fnGrid_AfterAllCheck";
	
	// BUTTON, BUTTON-IN 처리
	//this.dxGrid.ExpandUp = "fnGrid_ExpandUp";
	
};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {

	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("DT_YYYY", "string");
	this.dsSelect.addColumn("CD_GBN", "string");

	this.dsSave = new Dataset();
	this.dsSave.addColumn("DT_YYYY", "string");
	this.dsSave.addColumn("CD_GBN", "string");
	this.dsSave.addColumn("CD_LV1", "string");
	this.dsSave.addColumn("DS_LV1", "string");
	this.dsSave.addColumn("CD_LV2", "string");
	this.dsSave.addColumn("DS_LV2", "string");
	this.dsSave.addColumn("CD_LV3", "string");
	this.dsSave.addColumn("DS_LV3", "string");
	this.dsSave.addColumn("CD_LV4", "string");
	this.dsSave.addColumn("DS_LV4", "string");
	this.dsSave.addColumn("CD_LV5", "string");
	this.dsSave.addColumn("DS_LV5", "string");
	this.dsSave.addColumn("YN_ITEM", "string");
	this.dsSave.addColumn("ID_USER", "string");
	this.dsSave.addColumn("WEIGHT", "string");
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;

	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	
	this.dsSelect.setColumn(0, "DT_YYYY", this.dsSearch.getColumn(0, "DT_YYYY"));
 	this.dsSelect.setColumn(0, "CD_GBN", this.divSearch.form.cboCD_GBN.value);
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}
/*
  *	이전데이터조회 버튼
  */
this.fnSelectBe = function() {
	if (!this.fnSelectValidate()) return false;

	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	
	this.dsSelect.setColumn(0, "DT_YYYY", this.dsSearch.getColumn(0, "DT_YYYY")-1);
 	this.dsSelect.setColumn(0, "CD_GBN", this.divSearch.form.cboCD_GBN.value);
	
	var strSvcId    = "selectBe";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	var nrow = this.gfnGridAdd(this.dxGrid); // top (default), bottom, current
	
	this.dsList.set_enableevent(false);
	this.dsList.setColumn(nrow, "YN_ITEM", "Y");
	this.dsList.set_enableevent(true);			
}

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}

/*
 *	저장 버튼
 */
this.fnSave = function() {
	// 그리드 필수항목 체크``
	if (!this.gfnGridValidate(this.dxGrid)) return;	
	
	this.dxGrid.updateToDataset();
	
	this.dsSave.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "I":
			case "U":
			case "D":
				var nrow = this.dsSave.addRow();
				this.dsSave.setColumn(nrow, "DT_YYYY", this.dsSearch.getColumn(0, "DT_YYYY"));
				this.dsSave.setColumn(nrow, "CD_GBN", this.divSearch.form.cboCD_GBN.value);
				this.dsSave.setColumn(nrow, "CD_LV1", this.dsList.getColumn(i, "CD_LV1"));
				this.dsSave.setColumn(nrow, "DS_LV1", this.dsList.getColumn(i, "DS_LV1"));
				this.dsSave.setColumn(nrow, "CD_LV2", this.dsList.getColumn(i, "CD_LV2"));
				this.dsSave.setColumn(nrow, "DS_LV2", this.dsList.getColumn(i, "DS_LV2"));
				this.dsSave.setColumn(nrow, "CD_LV3", this.dsList.getColumn(i, "CD_LV3"));
				this.dsSave.setColumn(nrow, "DS_LV3", this.dsList.getColumn(i, "DS_LV3"));
				this.dsSave.setColumn(nrow, "CD_LV4", this.dsList.getColumn(i, "CD_LV4"));
				this.dsSave.setColumn(nrow, "DS_LV4", this.dsList.getColumn(i, "DS_LV4"));
				this.dsSave.setColumn(nrow, "CD_LV5", this.dsList.getColumn(i, "CD_LV5"));
				this.dsSave.setColumn(nrow, "DS_LV5", this.dsList.getColumn(i, "DS_LV5"));
				this.dsSave.setColumn(nrow, "YN_ITEM", this.dsList.getColumn(i, "YN_ITEM"));
				this.dsSave.setColumn(nrow, "WEIGHT", this.dsList.getColumn(i, "WEIGHT"));
				this.dsSave.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
				break;						
		}
	}
	
	if (this.dsSave.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "save=dsSave";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}


/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {	
	var validate = true;
	
	if (this.gfnIsNull(this.dsSearch.getColumn(0,"DT_YYYY"))&&this.gfnIsNull(this.dsSearch.getColumn(0,"CD_GBN"))) {
		validate = false;
		this.gfnAlert("필수값은 반드시 입력 하셔야 합니다.");
	}
	
	return validate;
	
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);	
	}else if (svcID == "selectBe") {
		// 지난달 조회된 데이터는 입력 상태로 만들어서 저장가능한게 한다.
		if(this.dsList.rowcount > 0){
			for (var i = 0; i < this.dsList.rowcount; i++) {
			this.dsList.setColumn(i, this.ucFlag, "I");
			}	
			this.gfnSetFormStatus(this, "I");	// 폼상태 업데이트
		}		
	}	
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}	
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
//코드파인드의 파라미터 값을 넘겨줄때 사용하는 함수
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	
	if (id == "ccfCD_SITE") {
		
		dsUserParam.setColumn(nrow, "CD_CORP", "A101");
	}	
	
	return true;
}
/************************************************************************
 * 그리드 이벤트
 ************************************************************************/

/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
	}
};
this.fnDataCpy = function(id, dsUserParam, nrow) {
	this.gfnConfirm("전년도 자료를 불러 오시겠습니까?", "fnDataCpy_callback");
}

// 지난달 자료 조회
this.fnDataCpy_callback = function(strID, val) {
   if(val == true) {
      this.fnSelectBe();
   }
}]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DZMPR_STANDARD_CODE_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">save</Col>
            <Col id="SP">DZMPR_STANDARD_CODE_SAVE</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="DT_YYYY" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="DT_YYYY"/>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsCD_GBN">
        <ColumnInfo>
          <Column id="CODE" type="STRING" size="256"/>
          <Column id="VALUE" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CODE">01</Col>
            <Col id="VALUE">건축</Col>
          </Row>
          <Row>
            <Col id="CODE">02</Col>
            <Col id="VALUE">설비</Col>
          </Row>
          <Row>
            <Col id="CODE">03</Col>
            <Col id="VALUE">전기</Col>
          </Row>
          <Row>
            <Col id="CODE">04</Col>
            <Col id="VALUE">토목</Col>
          </Row>
          <Row>
            <Col id="CODE">05</Col>
            <Col id="VALUE">조경</Col>
          </Row>
          <Row>
            <Col id="CODE">06</Col>
            <Col id="VALUE">ISO</Col>
          </Row>
        </Rows>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ctclDT_YYYY.form.TextBox" propid="value" datasetid="dsSearch" columnid="DT_YYYY"/>
    </Bind>
  </Form>
</FDL>
