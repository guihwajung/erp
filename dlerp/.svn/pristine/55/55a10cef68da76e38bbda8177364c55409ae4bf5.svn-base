<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="form" width="1280" height="720" titletext="평가진행현황" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="1" left="0" top="0" height="46.0" right="0" cssclass="div_SEARCH_Bg" text="">
          <Layouts>
            <Layout>
              <Static id="staCD_CORP" taborder="2" text="법인" left="0" top="10.0" width="66" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfCD_CORP" CDTextWidth="50" taborder="3" left="staCD_CORP:0.0" top="10.0" width="250" height="24.0" url="cmm::cmmCodeFind.xfdl" text="" CodeFindName="DAX_CFCORP_CODEFIND"/>
              <Static id="staYR_RTNG" taborder="0" text="년도" left="ccfCD_CORP:0.0" top="10.0" width="66" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfYR_RTNG" CDTextWidth="70" taborder="4" left="staYR_RTNG:0.0" top="10.0" width="60" height="24.0" url="cmm::cmmCalYY.xfdl" text=""/>
              <Static id="staID_RTNG" taborder="1" text="평가회차" left="ccfYR_RTNG:0.0" top="10.0" width="92" height="24.0" rtl="false" cssclass="sta_WF_SchLabel"/>
              <Div id="ccfID_RTNG" CDTextWidth="100" taborder="3" left="staID_RTNG:0.0" top="10.0" width="350" height="24.0" url="cmm::cmmCodeFind.xfdl" text="" CodeFindName="DAX_CFRTNG_STD"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg" ondragmove="divData_ondragmove">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0" autofittype="col" oncellposchanged="fnGridCellPosChanged"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo) {
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);
	this.gfnFormInfo(this);
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	this.fnSetCombo();
	this.fnInit();
}

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출 
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리 
 ************************************************************************/
this.fnSetButton = function() { 
	
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btnGoalEstt     = this.gfnFormButtonAdd("btnGoalEstt"    , "fnGoalEstt");		// 업무목표 - 업무목표수립(중간점검) 생성 버튼
	this.btnGoalCheck    = this.gfnFormButtonAdd("btnGoalCheck"   , "fnGoalCheck");		// 업무목표 - 중간점검 생성 버튼
	this.btnGoalSelfDesc = this.gfnFormButtonAdd("btnGoalSelfDesc", "fnGoalSelfDesc");	// 업무목표 - 자기기술 생성 버튼
	this.btnPsnlRtng     = this.gfnFormButtonAdd("btnPsnlRtng"    , "fnPsnlRtng");		// 인사평가 - 인사평가 생성 버튼
	this.btnPoolMagam    	= this.gfnFormButtonAdd("btnPoolMagam"   	, "fnPoolMagam");		// 마감기능 - 동료Pool마감 버튼
	this.btnPoolMagamCnc 	= this.gfnFormButtonAdd("btnPoolMagamCnc"	, "fnPoolMagamCnc");	// 마감기능 - 동료Pool마감 취소 버튼
	this.btnUploadMagam  	= this.gfnFormButtonAdd("btnUploadMagam" 	, "fnUploadMagam");		// 마감기능 - 평가결과업로드마감 버튼
	this.btnUploadMagamCnc  = this.gfnFormButtonAdd("btnUploadMagamCnc" , "fnUploadMagamCnc");	// 마감기능 - 평가결과업로드마감 취소 버튼
	this.btnFdbkMagam    	= this.gfnFormButtonAdd("btnFdbkMagam"   	, "fnFdbkMagam");		// 마감기능 - 평가피드백마감 버튼
	this.btnFdbkMagamCnc    = this.gfnFormButtonAdd("btnFdbkMagamCnc"   , "fnFdbkMagamCnc");	// 마감기능 - 평가피드백마감 취소 버튼
}

this.fnUpdateStatusExtendButton = function() {
	var nrow = this.dsList.rowposition;
	var CD_RTNG_TYPE = this.dsList.getColumn(nrow, "CD_RTNG_TYPE");
	var YN_POOLMAGAM = this.dsList.getColumn(nrow, "YN_POOLMAGAM");
	var YN_EXCLMAGAM = this.dsList.getColumn(nrow, "YN_EXCLMAGAM");
	var YN_FDBKMAGAM = this.dsList.getColumn(nrow, "YN_FDBKMAGAM");
	
	this.btnGoalEstt.set_enable(CD_RTNG_TYPE == "JA10");
 	this.btnGoalCheck.set_enable(CD_RTNG_TYPE == "JA10");
 	this.btnGoalSelfDesc.set_enable(CD_RTNG_TYPE == "JA10" || CD_RTNG_TYPE == "JA11");
 	this.btnPsnlRtng.set_enable(CD_RTNG_TYPE == "JA12");
	
	this.btnPoolMagam.set_enable(CD_RTNG_TYPE == "JA01" && YN_POOLMAGAM == "N");
	this.btnPoolMagamCnc.set_enable(CD_RTNG_TYPE == "JA01" && YN_POOLMAGAM == "Y");
	
	this.btnUploadMagam.set_enable(CD_RTNG_TYPE == "JA13" && YN_EXCLMAGAM == "N");
	this.btnUploadMagamCnc.set_enable(CD_RTNG_TYPE == "JA13" && YN_EXCLMAGAM == "Y" && YN_FDBKMAGAM == "N");
	
	this.btnFdbkMagam.set_enable(CD_RTNG_TYPE == "JA13" && YN_EXCLMAGAM == "Y" && YN_FDBKMAGAM == "N");
	this.btnFdbkMagamCnc.set_enable(CD_RTNG_TYPE == "JA13" && YN_FDBKMAGAM == "Y");
}

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	// 그리드영역
	this.dxGrid = this.divData.form.objGrid;
	
	// 검색영역
	this.ccfCD_CORP = this.divSearch.form.ccfCD_CORP;
	this.ccfYR_RTNG = this.divSearch.form.ccfYR_RTNG;
	this.ccfID_RTNG = this.divSearch.form.ccfID_RTNG;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {	
	// 그리드 초기화
	this.gfnGridInit(this.dxGrid, this.dsList, "DA", "DAJ_RTNG_STD");
	this.dxGrid.BeforeUserDataSetParam = "fnGridBeforeUserDataSetParam";
	this.dxGrid.AfterCDTextChanged     = "fnGridAfterCDTextChanged";
	
	// 검색영역
	this.ccfCD_CORP.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";	// 법인
	this.ccfCD_CORP.AfterCDTextChanged     = "fnAfterCDTextChanged";
	this.ccfID_RTNG.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";	// 평가기준
	this.ccfID_RTNG.AfterCDTextChanged     = "fnAfterCDTextChanged";
}

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	// 조회
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_CORP", "string");
	this.dsSelect.addColumn("YR_RTNG", "string");
	this.dsSelect.addColumn("ID_RTNG", "string");
	
	// 저장
	this.dsSave = new Dataset();
	this.dsSave.addColumn("TY_WRK", "string");
	this.dsSave.addColumn("CD_CORP", "string");
	this.dsSave.addColumn("ID_RTNG", "string");
	this.dsSave.addColumn("DS_RTNG", "string");
	this.dsSave.addColumn("YR_RTNG", "string");
	this.dsSave.addColumn("CD_RTNG_TYPE", "string");
	this.dsSave.addColumn("CD_RTNG_ASBLNEXT", "string");
	this.dsSave.addColumn("TMSQ_RTNG", "string");
	this.dsSave.addColumn("DT_RTNG_BEGN", "string");
	this.dsSave.addColumn("DT_RTNG_END", "string");
	this.dsSave.addColumn("DT_RTNG_STD", "string");
	this.dsSave.addColumn("DT_EGAC_STD", "string");
	this.dsSave.addColumn("DT_RTCP_STD", "string");
	this.dsSave.addColumn("RMK", "string");
	this.dsSave.addColumn("STAT", "string");
	this.dsSave.addColumn("ID_USER", "string");
	this.dsSave.addColumn("CD_MAGAM", "string");
	
	// 업무목표수립(중간점검) 데이터 복사
	this.dsCopyGoalEstablishAgain = new Dataset();
	this.dsCopyGoalEstablishAgain.addColumn("CD_CORP", "string");
	this.dsCopyGoalEstablishAgain.addColumn("ID_RTNG", "string");
	this.dsCopyGoalEstablishAgain.addColumn("ID_USER", "string");
	
	// 중간점검(업무목표수립) 데이터 복사
	this.dsCopyGoalEstablish = new Dataset();
	this.dsCopyGoalEstablish.addColumn("CD_CORP", "string");
	this.dsCopyGoalEstablish.addColumn("ID_RTNG", "string");
	this.dsCopyGoalEstablish.addColumn("ID_USER", "string");
	
	// 자기기술(업무목표 중간점검) 데이터 복사
	this.dsCopyGoalCheck = new Dataset();
	this.dsCopyGoalCheck.addColumn("CD_CORP", "string");
	this.dsCopyGoalCheck.addColumn("ID_RTNG", "string");
	this.dsCopyGoalCheck.addColumn("ID_USER", "string");
	
	// 인사평가(업무목표 자기기술) 데이터 복사
	this.dsCopyGoalSelfDesc = new Dataset();
	this.dsCopyGoalSelfDesc.addColumn("CD_CORP", "string");
	this.dsCopyGoalSelfDesc.addColumn("ID_RTNG", "string");
	this.dsCopyGoalSelfDesc.addColumn("ID_USER", "string");
	
	// 마감기능
	this.dsMagam = new Dataset();
	this.dsMagam.addColumn("TY_GUBUN", "string");
	this.dsMagam.addColumn("CD_CORP", "string");
	this.dsMagam.addColumn("ID_RTNG", "string");
	this.dsMagam.addColumn("CD_RTNG_TYPE", "string");
	this.dsMagam.addColumn("TY_MAGAM", "string");
	this.dsMagam.addColumn("ID_USER", "string");
}

/************************************************************************
 * 콤보 데이터 조회 및 설정
 ************************************************************************/
this.fnSetCombo = function() {
	
}

/************************************************************************
 * 화면 및 검색영역 초기화
 ************************************************************************/
this.fnInit = function() {
	// 법인
	this.dsSearch.setColumn(0, "CD_CORP", this.AuthClient.CD_CORP);
	this.dsSearch.setColumn(0, "DS_CORP", this.AuthClient.DS_CORP);
	
	var today = this.gfnGetDate();
	this.dsSearch.setColumn(0, "YR_RTNG", today.substr(0, 4));
	
	// 확장버튼 상태 변경
	this.fnUpdateStatusExtendButton();
}

/************************************************************************
 * 버튼 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.gfnSearchValidate(this.divSearch, this.dsSearch)) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);

	this.dsSelect.clearData();
	this.dsSelect.addRow();
	this.dsSelect.setColumn(0, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
	this.dsSelect.setColumn(0, "YR_RTNG", this.dsSearch.getColumn(0, "YR_RTNG"));
	this.dsSelect.setColumn(0, "ID_RTNG", this.dsSearch.getColumn(0, "ID_RTNG"));

	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction(strSvcId,		// transaction을 구분하기 위한 svc id값
						strSvcType, 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData, 		// 입력값으로 보낼 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						outData, 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc);	// 통신방법 정의 [생략가능]
}

/*
 * 입력 버튼
 */
this.fnAdd = function() {
	var nrow = this.gfnGridAdd(this.dxGrid); // top (default), bottom, current
	this.dsList.setColumn(nrow, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
	this.dsList.setColumn(nrow, "DS_CORP", this.dsSearch.getColumn(0, "DS_CORP"));
	this.dsList.setColumn(nrow, "YR_RTNG", this.dsSearch.getColumn(0, "YR_RTNG"));
	this.dsList.setColumn(nrow, "CD_RTNG_ASBLNEXT", "Q");
}

/*
 * 삭제 버튼
 */
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}

/*
 * 저장 버튼
 */
this.fnSave = function() {
	var msg = "";
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "I":
// 				if (this.dsList.getColumn(i, "CD_RTNG_TYPE") == "JA13" 	// 인사평가
// 				 && this.dsList.getColumn(i, "YN_PSNL") == "N"			// 보직자1차평가 완료여부
// 				 && this.dsList.getColumn(i, "CD_MAGAM") == "RREU") 	// 평가결과업로드 마감 체크				 
// 				{
// 					msg += "보직자1차평가가 미완료 상태입니다.\n\n평가결과업로드 마감을 계속하시겠습니까?" 
// 				}
				if (this.dsList.getColumn(i, "CD_RTNG_TYPE") == "JA13" 	// 인사평가
				 && this.dsList.getColumn(i, "YN_EXCL") == "N"			// 평가결과 엑셀업로드 완료여부
				 && this.dsList.getColumn(i, "YN_EXCLMAGAM") == "N"	 		
				 && this.dsList.getColumn(i, "CD_MAGAM") == "RREU")		// 평가결과업로드 마감 체크
				{
					msg += "평가결과 엑셀업로드가 미완료 상태입니다.\n\n평가결과업로드 마감을 계속하시겠습니까?" 
				}
				if (this.dsList.getColumn(i, "CD_RTNG_TYPE") == "JA13" 	// 인사평가
				 && this.dsList.getColumn(i, "YN_FDBK") == "N"			// 평가결과 피드백 완료여부
				 && this.dsList.getColumn(i, "YN_FDBKMAGAM") == "N"	 	
				 && this.dsList.getColumn(i, "CD_MAGAM") == "FDBK") 	// 평가피드백완료 마감 체크				 
				{
					msg += "평가결과 피드백이 미완료 상태입니다.\n\n평가피드백완료 마감을 계속하시겠습니까?" 
				}
				break;
			case "U":
// 				if (this.dsList.getColumn(i, "CD_RTNG_TYPE") == "JA13" 	// 인사평가
// 				 && this.dsList.getColumn(i, "YN_PSNL") == "N"			// 보직자1차평가 완료여부
// 				 && this.dsList.getColumn(i, "CD_MAGAM") == "RREU") 	// 평가결과업로드 마감 체크				 
// 				{
// 					msg += "보직자1차평가가 미완료 상태입니다.\n\n평가결과업로드 마감을 계속하시겠습니까?" 
// 				}
				if (this.dsList.getColumn(i, "CD_RTNG_TYPE") == "JA13" 	// 인사평가
				 && this.dsList.getColumn(i, "YN_EXCL") == "N"			// 평가결과 엑셀업로드 완료여부
				 && this.dsList.getColumn(i, "YN_EXCLMAGAM") == "N"	 	
				 && this.dsList.getColumn(i, "CD_MAGAM") == "RREU") 	// 평가결과업로드 마감 체크				 
				{
					msg += "평가결과 엑셀업로드가 미완료 상태입니다.\n\n평가결과업로드 마감을 계속하시겠습니까?" 
				}
				if (this.dsList.getColumn(i, "CD_RTNG_TYPE") == "JA13" 	// 인사평가
				 && this.dsList.getColumn(i, "YN_FDBK") == "N"			// 평가결과 피드백 완료여부
				 && this.dsList.getColumn(i, "YN_FDBKMAGAM") == "N"	 	
				 && this.dsList.getColumn(i, "CD_MAGAM") == "FDBK") 	// 평가피드백완료 마감 체크				 
				{
					msg += "평가결과 피드백이 미완료 상태입니다.\n\n평가피드백완료 마감을 계속하시겠습니까?" 
				}
				break;
			case "D":
				msg += "진행중인 평가의 모든 데이터가 삭제될 수 있습니다.\n계속하시겠습니까?" 
				break;
		}	
	}
	
	if (msg == "")
	{
		this.fnSaveCallback();
	}
	else
	{
		this.gfnConfirm(msg, function(strId, val) {
			if (val == false) {
				return;
			}
			this.fnSaveCallback();
		});
	}	
}

this.fnSaveCallback = function() {	
	// 그리드 필수항목 체크
	if (!this.gfnGridValidate(this.dxGrid)) return;	

	this.dxGrid.updateToDataset();
	this.dsSave.clearData();
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
		case "I":
		case "U":
		case "D":
			var nrow = this.dsSave.addRow();
			this.dsSave.setColumn(nrow, "TY_WRK"          , flag);
			this.dsSave.setColumn(nrow, "CD_CORP"         , this.dsList.getColumn(i, "CD_CORP"));
			this.dsSave.setColumn(nrow, "ID_RTNG"         , this.dsList.getColumn(i, "ID_RTNG"));
			this.dsSave.setColumn(nrow, "DS_RTNG"         , this.dsList.getColumn(i, "DS_RTNG"));
			this.dsSave.setColumn(nrow, "YR_RTNG"         , this.dsList.getColumn(i, "YR_RTNG"));
			this.dsSave.setColumn(nrow, "CD_RTNG_TYPE"    , this.dsList.getColumn(i, "CD_RTNG_TYPE"));
			this.dsSave.setColumn(nrow, "CD_RTNG_ASBLNEXT", this.dsList.getColumn(i, "CD_RTNG_ASBLNEXT"));
			this.dsSave.setColumn(nrow, "TMSQ_RTNG"       , this.dsList.getColumn(i, "TMSQ_RTNG"));
			this.dsSave.setColumn(nrow, "DT_RTNG_BEGN"    , this.dsList.getColumn(i, "DT_RTNG_BEGN"));
			this.dsSave.setColumn(nrow, "DT_RTNG_END"     , this.dsList.getColumn(i, "DT_RTNG_END"));
			this.dsSave.setColumn(nrow, "DT_RTNG_STD"     , this.dsList.getColumn(i, "DT_RTNG_STD"));
			this.dsSave.setColumn(nrow, "DT_EGAC_STD"     , this.dsList.getColumn(i, "DT_EGAC_STD"));
			this.dsSave.setColumn(nrow, "DT_RTCP_STD"     , this.dsList.getColumn(i, "DT_RTCP_STD"));
			this.dsSave.setColumn(nrow, "RMK"             , this.dsList.getColumn(i, "RMK"));
			this.dsSave.setColumn(nrow, "STAT"            , this.dsList.getColumn(i, "STAT"));
			this.dsSave.setColumn(nrow, "ID_USER"         , this.AuthClient.ID_USER);
			this.dsSave.setColumn(nrow, "CD_MAGAM"        , this.dsList.getColumn(i, "CD_MAGAM"));
			break;
		}
	}
		
	if (this.dsSave.rowcount == 0) return;

	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "save=dsSave";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";

	this.gfnTransaction(strSvcId,		// transaction을 구분하기 위한 svc id값
						strSvcType, 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData, 		// 입력값으로 보낼 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						outData, 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc);	// 통신방법 정의 [생략가능]
}
/*
 * 엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 * 출력 버튼
 */
this.fnPrint = function() {
	
}

/************************************************************************
 * Validate
 ************************************************************************/
this.fnSelectValidate = function() {
	return true;
}

/************************************************************************
 * 확장버튼 이벤트
 ************************************************************************/

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 * 기본 콜백
 */
this.fnCallback = function(svcID, errorCode, errorMsg, strArg) {
	if (errorCode != 0) {
		this.gfnAlert(errorMsg);
		return;
	}
	
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);
	}
	else if (svcID == "save") {
		this.FormBtns.Select.click();
	}
	// 업무목표 (중간점검) 데이터 복사
	else if (svcID == "copy_goal_estt_again") {
		this.FormBtns.Select.click();
	}
	// 업무목표 수립 데이터 복사
	else if (svcID == "copy_goal_estt") {
		this.FormBtns.Select.click();
	}
	// 업무목표 중간점검 데이터 복사
	else if (svcID == "copy_goal_check") {
		this.FormBtns.Select.click();
	}
	// 업무목표 자기기술 데이터 복사
	else if (svcID == "copy_goal_self_desc") {
		this.FormBtns.Select.click();
	}
	// 마감기능
	else if (svcID == "magam") {
		this.FormBtns.Select.click();
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	if (id == "ccfCD_CORP") {
		dsUserParam.setColumn(nrow, "CD_CORP"  , this.AuthClient.CD_CORP);
		dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
		dsUserParam.setColumn(nrow, "ID_USER"  , this.AuthClient.ID_USER);
	} else if (id == "ccfID_RTNG") {
		dsUserParam.setColumn(nrow, "CD_CORP"     , this.dsSearch.getColumn(0, "CD_CORP"));
		dsUserParam.setColumn(nrow, "YR_RTNG"     , this.dsSearch.getColumn(0, "YR_RTNG"));
		dsUserParam.setColumn(nrow, "CD_RTNG_TYPE", "JA");
		dsUserParam.setColumn(nrow, "CD_ROLE"     , this.AuthClient.CD_ROLE);
	}
	
	return true;
}

this.fnAfterCDTextChanged = function(id, codeFindData) {
	if (codeFindData[0] == undefined) {
		return;
	}
	
	if (id == "ccfID_RTNG") {
		this.dsSearch.setColumn(0, "CD_RTNG_TYPE"    , codeFindData[0]["CD_RTNG_TYPE"]);
		this.dsSearch.setColumn(0, "DS_RTNG_TYPE"    , codeFindData[0]["DS_RTNG_TYPE"]);
		this.dsSearch.setColumn(0, "DT_RTNG_BEGN"    , codeFindData[0]["DT_RTNG_BEGN"]);
		this.dsSearch.setColumn(0, "DT_RTNG_END"     , codeFindData[0]["DT_RTNG_END"]);
		this.dsSearch.setColumn(0, "DT_RTNG_STD"     , codeFindData[0]["DT_RTNG_STD"]);
		this.dsSearch.setColumn(0, "CD_RTNG_ASBLNEXT", codeFindData[0]["CD_RTNG_ASBLNEXT"]);
		this.dsSearch.setColumn(0, "DS_RTNG_ASBLNEXT", codeFindData[0]["DS_RTNG_ASBLNEXT"]);
	}
}

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
this.fnGridBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	return true;
}

this.fnGridAfterCDTextChanged = function(id, codeFindData) {
	
}

this.fnGridCellPosChanged = function(obj:nexacro.Grid, e:nexacro.GridSelectEventInfo) {
	this.fnUpdateStatusExtendButton();
}

/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo) {
	if (e.oldvalue != e.newvalue) {
		if (e.columnid == "YR_RTNG") {
			this.dsSearch.setColumn(0,"ID_RTNG","");
			this.dsSearch.setColumn(0,"DS_RTNG","");
			this.dsSearch.setColumn(0,"CD_RTNG_TYPE","");
			this.dsSearch.setColumn(0,"DS_RTNG_TYPE","");
			this.dsSearch.setColumn(0,"DT_RTNG_BEGN","");
			this.dsSearch.setColumn(0,"DT_RTNG_END","");
			this.dsSearch.setColumn(0,"DT_RTNG_STD","");
			this.dsSearch.setColumn(0,"CD_RTNG_ASBLNEXT","");
			this.dsSearch.setColumn(0,"DS_RTNG_ASBLNEXT","");
		}
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
	}
}

// 업무목표수립(중간점검) 생성 버튼
this.fnGoalEstt = function() {
	this.gfnConfirm("업무목표수립(중간점검) 기초 데이터를 생성하시겠습니까?", function(strId, val) {
		if (val == false) {
			return; 
		}
		
		this.fnGoalEstt_callback();
	})
}

this.fnGoalEstt_callback = function() {
	this.dxGrid.updateToDataset();
	this.dsCopyGoalEstablish.clearData();
	var nrow = this.dsCopyGoalEstablish.addRow();
	this.dsCopyGoalEstablish.setColumn(nrow, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
	this.dsCopyGoalEstablish.setColumn(nrow, "ID_RTNG", this.dsList.getColumn(this.dsList.rowposition, "ID_RTNG"));
	this.dsCopyGoalEstablish.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
		
	if (this.dsCopyGoalEstablish.rowcount == 0) return;

	var strSvcId    = "copy_goal_estt_again";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "copy_goal_estt_again=dsCopyGoalEstablish";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";

	this.gfnTransaction(strSvcId,		// transaction을 구분하기 위한 svc id값
						strSvcType, 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData, 		// 입력값으로 보낼 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						outData, 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc);	// 통신방법 정의 [생략가능]
}

// 업무목표 중간점검 생성 버튼
this.fnGoalCheck = function() {
	this.gfnConfirm("업무목표 중간점검 기초 데이터를 생성하시겠습니까?", function(strId, val) {
		if (val == false) {
			return; 
		}
		
		this.fnGoalCheck_callback();
	})
}

this.fnGoalCheck_callback = function() {
	this.dxGrid.updateToDataset();
	this.dsCopyGoalEstablish.clearData();
	var nrow = this.dsCopyGoalEstablish.addRow();
	this.dsCopyGoalEstablish.setColumn(nrow, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
	this.dsCopyGoalEstablish.setColumn(nrow, "ID_RTNG", this.dsList.getColumn(this.dsList.rowposition, "ID_RTNG"));
	this.dsCopyGoalEstablish.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
		
	if (this.dsCopyGoalEstablish.rowcount == 0) return;

	var strSvcId    = "copy_goal_estt";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "copy_goal_estt=dsCopyGoalEstablish";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";

	this.gfnTransaction(strSvcId,		// transaction을 구분하기 위한 svc id값
						strSvcType, 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData, 		// 입력값으로 보낼 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						outData, 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc);	// 통신방법 정의 [생략가능]
}

// 업무목표 자기기술 생성 버튼
this.fnGoalSelfDesc = function() {
	this.gfnConfirm("업무목표 자기기술 기초 데이터를 생성하시겠습니까?", function(strId, val) {
		if (val == false) {
			return; 
		}
		
		this.fnGoalSelfDesc_callback();
	})
}

this.fnGoalSelfDesc_callback = function() {
	this.dxGrid.updateToDataset();
	this.dsCopyGoalCheck.clearData();
	var nrow = this.dsCopyGoalCheck.addRow();
	this.dsCopyGoalCheck.setColumn(nrow, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
	this.dsCopyGoalCheck.setColumn(nrow, "ID_RTNG", this.dsList.getColumn(this.dsList.rowposition, "ID_RTNG"));
	this.dsCopyGoalCheck.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
	
	if (this.dsCopyGoalCheck.rowcount == 0) return;

	var strSvcId    = "copy_goal_check";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "copy_goal_check=dsCopyGoalCheck";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";

	this.gfnTransaction(strSvcId,		// transaction을 구분하기 위한 svc id값
						strSvcType, 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData, 		// 입력값으로 보낼 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						outData, 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc);	// 통신방법 정의 [생략가능]
}

this.fnPsnlRtng = function() {
	this.gfnConfirm("인사평가 기초 데이터를 생성하시겠습니까?", function(strId, val) {
		if (val == false) {
			return; 
		}
		
		this.fnPsnlRtng_callback();
	})
}

this.fnPsnlRtng_callback = function() {
	this.dxGrid.updateToDataset();
	this.dsCopyGoalSelfDesc.clearData();
	var nrow = this.dsCopyGoalSelfDesc.addRow();
	this.dsCopyGoalSelfDesc.setColumn(nrow, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
	this.dsCopyGoalSelfDesc.setColumn(nrow, "ID_RTNG", this.dsList.getColumn(this.dsList.rowposition, "ID_RTNG"));
	this.dsCopyGoalSelfDesc.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);

	if (this.dsCopyGoalSelfDesc.rowcount == 0) return;

	var strSvcId    = "copy_goal_self_desc";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "copy_goal_self_desc=dsCopyGoalSelfDesc";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";

	this.gfnTransaction(strSvcId,		// transaction을 구분하기 위한 svc id값
						strSvcType, 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData, 		// 입력값으로 보낼 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						outData, 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc);	// 통신방법 정의 [생략가능]
}

this.fnPoolMagam = function() {
	this.gfnConfirm("동료Pool마감을 하시겠습니까?", function(strId, val) {
		if (val == false) {
			return; 
		}
		
		this.fnPoolMagam_callback("Y");
	})
}

this.fnPoolMagamCnc = function() {
	this.gfnConfirm("동료Pool마감을 취소하시겠습니까?", function(strId, val) {
		if (val == false) {
			return; 
		}
		
		this.fnPoolMagam_callback("N");
	})
}

this.fnPoolMagam_callback = function(tyGubun) {
	this.dxGrid.updateToDataset();
	this.dsMagam.clearData();
	var nrow = this.dsMagam.addRow();
	this.dsMagam.setColumn(nrow, "TY_GUBUN", tyGubun);
	this.dsMagam.setColumn(nrow, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
	this.dsMagam.setColumn(nrow, "ID_RTNG", this.dsList.getColumn(this.dsList.rowposition, "ID_RTNG"));
	this.dsMagam.setColumn(nrow, "CD_RTNG_TYPE", this.dsList.getColumn(this.dsList.rowposition, "CD_RTNG_TYPE"));
	this.dsMagam.setColumn(nrow, "TY_MAGAM", "RMCP");
	this.dsMagam.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);

	if (this.dsMagam.rowcount == 0) return;

	var strSvcId    = "magam";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "magam=dsMagam";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";

	this.gfnTransaction(strSvcId,		// transaction을 구분하기 위한 svc id값
						strSvcType, 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData, 		// 입력값으로 보낼 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						outData, 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc);	// 통신방법 정의 [생략가능]
}

this.fnUploadMagam = function() {
	
	var msg = "";
	if (this.dsList.getColumn(this.dsList.rowposition, "CD_RTNG_TYPE") == "JA13" 	// 인사평가
	 && this.dsList.getColumn(this.dsList.rowposition, "YN_EXCL") == "N"			// 평가결과 엑셀업로드 완료여부
	 && this.dsList.getColumn(this.dsList.rowposition, "YN_EXCLMAGAM") == "N") 	// 평가결과업로드 마감 체크				 
	{
		msg += "평가결과 엑셀업로드가 미완료 상태입니다.\n\n평가결과업로드 마감을 계속하시겠습니까?" 
	} else {
		msg += "평가피드백완료 마감을 하시겠습니까?" 
	}	
	
	this.gfnConfirm(msg, function(strId, val) {
		if (val == false) {
			return;
		}
		this.fnUploadMagam_callback("Y");
	});
}

this.fnUploadMagamCnc = function() {
	this.gfnConfirm("평가결과엑셀업로드 마감을 취소하시겠습니까?", function(strId, val) {
		if (val == false) {
			return; 
		}
		
		this.fnUploadMagam_callback("N");
	})
}

this.fnUploadMagam_callback = function(tyGubun) {
	this.dxGrid.updateToDataset();
	this.dsMagam.clearData();
	var nrow = this.dsMagam.addRow();
	this.dsMagam.setColumn(nrow, "TY_GUBUN", tyGubun);
	this.dsMagam.setColumn(nrow, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
	this.dsMagam.setColumn(nrow, "ID_RTNG", this.dsList.getColumn(this.dsList.rowposition, "ID_RTNG"));
	this.dsMagam.setColumn(nrow, "CD_RTNG_TYPE", this.dsList.getColumn(this.dsList.rowposition, "CD_RTNG_TYPE"));
	this.dsMagam.setColumn(nrow, "TY_MAGAM", "RREU");
	this.dsMagam.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);

	if (this.dsMagam.rowcount == 0) return;

	var strSvcId    = "magam";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "magam=dsMagam";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";

	this.gfnTransaction(strSvcId,		// transaction을 구분하기 위한 svc id값
						strSvcType, 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData, 		// 입력값으로 보낼 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						outData, 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc);	// 통신방법 정의 [생략가능]
}

this.fnFdbkMagam = function() {
	
	var msg = "";
	if (this.dsList.getColumn(this.dsList.rowposition, "CD_RTNG_TYPE") == "JA13" 	// 인사평가
	 && this.dsList.getColumn(this.dsList.rowposition, "YN_FDBK") == "N"			// 평가결과 피드백 완료여부
	 && this.dsList.getColumn(this.dsList.rowposition, "YN_FDBKMAGAM") == "N") 	// 평가피드백완료 마감 체크				 
	{
		msg += "평가결과 피드백이 미완료 상태입니다.\n\n평가피드백완료 마감을 계속하시겠습니까?" 
	} else {
		msg += "평가피드백완료 마감을 하시겠습니까?" 
	}	
	
	this.gfnConfirm(msg, function(strId, val) {
		if (val == false) {
			return;
		}
		this.fnFdbkMagam_callback("Y");
	});
}

this.fnFdbkMagamCnc = function() {
	this.gfnConfirm("평가피드백완료 마감을 취소하시겠습니까?", function(strId, val) {
		if (val == false) {
			return; 
		}
		
		this.fnFdbkMagam_callback("N");
	})
}

this.fnFdbkMagam_callback = function(tyGubun) {
	this.dxGrid.updateToDataset();
	this.dsMagam.clearData();
	var nrow = this.dsMagam.addRow();
	this.dsMagam.setColumn(nrow, "TY_GUBUN", tyGubun);
	this.dsMagam.setColumn(nrow, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
	this.dsMagam.setColumn(nrow, "ID_RTNG", this.dsList.getColumn(this.dsList.rowposition, "ID_RTNG"));
	this.dsMagam.setColumn(nrow, "CD_RTNG_TYPE", this.dsList.getColumn(this.dsList.rowposition, "CD_RTNG_TYPE"));
	this.dsMagam.setColumn(nrow, "TY_MAGAM", "FDBK");
	this.dsMagam.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);

	if (this.dsMagam.rowcount == 0) return;

	var strSvcId    = "magam";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "magam=dsMagam";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";

	this.gfnTransaction(strSvcId,		// transaction을 구분하기 위한 svc id값
						strSvcType, 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData, 		// 입력값으로 보낼 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						outData, 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc);	// 통신방법 정의 [생략가능]
}
]]></Script>
    <Objects>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DAJPR_RTNG_STD_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">save</Col>
            <Col id="SP">DAJPR_RTNG_STD_SAVE</Col>
          </Row>
          <Row>
            <Col id="TARGET">copy_goal_estt_again</Col>
            <Col id="SP">DAJPR_RTNG_GOAL_ESTT_CREATE</Col>
          </Row>
          <Row>
            <Col id="TARGET">copy_goal_estt</Col>
            <Col id="SP">DAJPR_RTNG_GOAL_CHCK_CREATE</Col>
          </Row>
          <Row>
            <Col id="TARGET">copy_goal_check</Col>
            <Col id="SP">DAJPR_RTNG_GOAL_SELF_DS_CREATE</Col>
          </Row>
          <Row>
            <Col id="TARGET">copy_goal_self_desc</Col>
            <Col id="SP">DAJPR_RTNG_PSNL_RTNG_CREATE</Col>
          </Row>
          <Row>
            <Col id="TARGET">magam</Col>
            <Col id="SP">DAJPR_RTNG_STD_MAGAM</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_CORP" type="STRING" size="256"/>
          <Column id="DS_CORP" type="STRING" size="256"/>
          <Column id="YR_RTNG" type="STRING" size="256"/>
          <Column id="ID_RTNG" type="STRING" size="256"/>
          <Column id="DS_RTNG" type="STRING" size="256"/>
          <Column id="CD_RTNG_TYPE" type="STRING" size="256"/>
          <Column id="DS_RTNG_TYPE" type="STRING" size="256"/>
          <Column id="DT_RTNG_BEGN" type="STRING" size="256"/>
          <Column id="DT_RTNG_END" type="STRING" size="256"/>
          <Column id="DT_RTNG_STD" type="STRING" size="256"/>
          <Column id="CD_RTNG_ASBLNEXT" type="STRING" size="256"/>
          <Column id="DS_RTNG_ASBLNEXT" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CD_CORP"/>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsList" onvaluechanged="dsList_onvaluechanged"/>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfCD_CORP.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_CORP"/>
      <BindItem id="item1" compid="divSearch.form.ccfCD_CORP.form.DSTextBox" propid="value" datasetid="dsSearch" columnid="DS_CORP"/>
      <BindItem id="item2" compid="divSearch.form.ccfYR_RTNG.form.TextBox" propid="value" datasetid="dsSearch" columnid="YR_RTNG"/>
      <BindItem id="item3" compid="divSearch.form.ccfID_RTNG.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="ID_RTNG"/>
      <BindItem id="item4" compid="divSearch.form.ccfID_RTNG.form.DSTextBox" propid="value" datasetid="dsSearch" columnid="DS_RTNG"/>
    </Bind>
  </Form>
</FDL>
