<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="New Form" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg" text="">
          <Layouts>
            <Layout>
              <Static id="sta00" taborder="0" text="CBS 코드" left="0.0" top="10.0" width="118.0" height="24.0" textDecoration="none" cssclass="sta_WF_SchLabel"/>
              <Div id="ccfCD_CBS" CDTextWidth="70" taborder="1" left="sta00:0.0" top="10.0" width="300" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg" ondragmove="divData_ondragmove">
          <Layouts>
            <Layout>
              <Div id="divSplitter" taborder="0" left="35%" top="0" width="5" height="100%" background="skyblue" cursor="ew-resize" ondrag="divData_divSplitter_ondrag"/>
              <Div id="divDataLeft" taborder="0" left="0" top="0" bottom="0" right="divSplitter:5">
                <Layouts>
                  <Layout>
                    <Static id="sta01" taborder="0" text="CBS 메뉴" left="0" top="0" width="100%" height="22" cssclass="sta_TITLE_Bg"/>
                    <Grid id="objGrid" taborder="0" left="0" top="sta01:5" bottom="0" right="0"/>
                  </Layout>
                </Layouts>
              </Div>
              <Div id="divDataRight" taborder="0" left="divSplitter:5" top="0" bottom="0" right="0">
                <Layouts>
                  <Layout>
                    <Static id="sta02" taborder="0" text="CBS ITEM" left="0" top="0" width="100%" height="22" cssclass="sta_TITLE_Bg"/>
                    <Grid id="objGridSub" taborder="0" left="0" top="sta02:5" bottom="0" right="0"/>
                  </Layout>
                </Layouts>
              </Div>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	// 화면 오픈시 조회함
	this.FormBtns.Select.click();
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 ************************************************************************/
this.fnSetButton = function() {
	// 서브 버튼 사용(2개 그리드 중간에 있는 파란선) 상단에 공통 셋트가 하나더 생긴다
	//this.gfnUseSubBtn(true, this.divData, this.divData.form.divSplitter); // divSplitter sync
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btn1 = this.gfnFormButtonAdd("btnDam", "fnDam");
 
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.ccfCD_CBS = this.divSearch.form.ccfCD_CBS;
	this.dxGrid = this.divData.form.divDataLeft.form.objGrid;
	this.dxGridSub = this.divData.form.divDataRight.form.objGridSub;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {	
	this.ccfCD_CBS.CodeFindName = "DQX_CBSMENU";
	
	this.gfnGridInit(this.dxGrid, this.dsList, "DQ", "DQB_CBSITEM_TREE", "DS_CBS", "TREE_LEVEL");	
	this.dxGrid.set_selecttype("cell");	
	this.dxGrid.addEventHandler("onselectchanged", this.fnGrid_RowCellChanged, this);
	this.dsList.addEventHandler("canrowposchange", this.dsList_canrowposchange, this);
		
	this.gfnGridInit(this.dxGridSub, this.dsListSub, "DQ", "DQB_CBSITEM_DAM");
	//this.dxGridSub.BeforeUserDataSetParam = "fnGridSub_BeforeUserDataSetParam";
}

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {

	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_LV1", "string");
	
	this.dsSelectSub = new Dataset();
	this.dsSelectSub.addColumn("CD_CBS", "string");
	
	this.dsInsertSub = new Dataset();
	this.dsInsertSub.addColumn("CD_CBS", "string");
	this.dsInsertSub.addColumn("CD_ITEM", "string");
	this.dsInsertSub.addColumn("DS_CBS", "string");
	this.dsInsertSub.addColumn("SZ_CBS", "string");
	this.dsInsertSub.addColumn("UT_CBS", "string");
	this.dsInsertSub.addColumn("SN_NO", "string");
	this.dsInsertSub.addColumn("CD_ITEMREG", "string");
	this.dsInsertSub.addColumn("ID_UPDATE", "string");
	this.dsInsertSub.addColumn("ID_DAM1", "string");
	this.dsInsertSub.addColumn("ID_DAM2", "string");

	this.dsUpdateSub = new Dataset();
	this.dsUpdateSub.addColumn("SN_ITEM", "string");
	this.dsUpdateSub.addColumn("CD_CBS", "string");
	this.dsUpdateSub.addColumn("CD_ITEM", "string");
	this.dsUpdateSub.addColumn("DS_CBS", "string");
	this.dsUpdateSub.addColumn("SZ_CBS", "string");
	this.dsUpdateSub.addColumn("UT_CBS", "string");
	this.dsUpdateSub.addColumn("ID_UPDATE", "string");
	this.dsUpdateSub.addColumn("ID_DAM1", "string");
	this.dsUpdateSub.addColumn("ID_DAM2", "string");

	
	this.dsDeleteSub = new Dataset();	
	this.dsDeleteSub.addColumn("CD_CBS", "string");
	this.dsDeleteSub.addColumn("CD_ITEM", "string");	
}

/************************************************************************
 * 버튼 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	this.gfnGridBeforeSelect(this.dxGrid);
	this.dsSelect.clearData();
	this.dsSelect.addRow();	
		
	this.dsSelect.setColumn(0, "CD_LV1", this.dsSearch.getColumn(0, "CD_LV1"));

	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	if(this.dsList.getColumn(this.dsList.rowposition, "CNT") < 1) {
		this.gfnAlert("자리수 항목값이 0 이하일 경우에는 신규입력 할수 없습니다.");
		return;
	}
		
	var nrow = this.gfnGridAdd(this.dxGridSub);
	
	this.dsListSub.set_enableevent(false);
	this.dsListSub.setColumn(nrow, "CD_ITEMREG", this.dsList.getColumn(this.dsList.rowposition, "ITEMREG"));	
	this.dsListSub.set_enableevent(true);	
}

/*
 *	삭제 버튼
 */ 
this.fnDel = function() {
	this.gfnGridDel(this.dxGridSub);
}

/*
 *	저장 버튼
 */ 
this.fnSave = function() {
	if (!this.gfnGridValidate(this.dxGridSub)) return;	

	this.dxGridSub.updateToDataset();
			
	this.dsInsertSub.clearData();
	this.dsUpdateSub.clearData();
	this.dsDeleteSub.clearData();
	
	var cd_cbs = this.dsList.getColumn(this.dsList.rowposition, "CD_CBS");
	var cnt = this.dsList.getColumn(this.dsList.rowposition, "CNT");
	
	for (var i = 0; i < this.dsListSub.rowcount; i++) {
		if(cnt != this.dsListSub.getColumn(i, "CD_ITEM").length){
			this.gfnAlert("ITEM코드 항목 값의 자리수는 [" + cnt + "]자리수로 해야합니다.");
			return;
		}
		
		var flag = this.gfnGetFlag(this.dsListSub, i);
		switch(flag) {
			case "I":								
				var nrow = this.dsInsertSub.addRow();
				this.dsInsertSub.setColumn(nrow, "CD_CBS", cd_cbs);
				this.dsInsertSub.setColumn(nrow, "CD_ITEM", this.dsListSub.getColumn(i, "CD_ITEM"));
				this.dsInsertSub.setColumn(nrow, "DS_CBS", this.dsListSub.getColumn(i, "DS_CBS"));
				this.dsInsertSub.setColumn(nrow, "SZ_CBS", this.dsListSub.getColumn(i, "SZ_CBS"));
				this.dsInsertSub.setColumn(nrow, "UT_CBS", this.dsListSub.getColumn(i, "UT_CBS"));
				this.dsInsertSub.setColumn(nrow, "SN_NO", this.dsListSub.getColumn(i, "SN_NO"));
				this.dsInsertSub.setColumn(nrow, "CD_ITEMREG", this.dsListSub.getColumn(i, "CD_ITEMREG"));
				this.dsInsertSub.setColumn(nrow, "ID_UPDATE", this.AuthClient.ID_USER);
				this.dsInsertSub.setColumn(nrow, "ID_DAM1", this.dsListSub.getColumn(i, "ID_DAM1"));
				this.dsInsertSub.setColumn(nrow, "ID_DAM2", this.dsListSub.getColumn(i, "ID_DAM2"));
				break;
				
			case "U":
				var nrow = this.dsUpdateSub.addRow();
				this.dsUpdateSub.setColumn(nrow, "SN_ITEM", this.dsListSub.getColumn(i, "SN_ITEM"));
				this.dsUpdateSub.setColumn(nrow, "CD_CBS", cd_cbs);
				this.dsUpdateSub.setColumn(nrow, "CD_ITEM", this.dsListSub.getColumn(i, "CD_ITEM"));
				this.dsUpdateSub.setColumn(nrow, "DS_CBS", this.dsListSub.getColumn(i, "DS_CBS"));
				this.dsUpdateSub.setColumn(nrow, "SZ_CBS", this.dsListSub.getColumn(i, "SZ_CBS"));
				this.dsUpdateSub.setColumn(nrow, "UT_CBS", this.dsListSub.getColumn(i, "UT_CBS"));
				this.dsUpdateSub.setColumn(nrow, "ID_UPDATE", this.AuthClient.ID_USER);
				this.dsUpdateSub.setColumn(nrow, "ID_DAM1", this.dsListSub.getColumn(i, "ID_DAM1"));
				this.dsUpdateSub.setColumn(nrow, "ID_DAM2", this.dsListSub.getColumn(i, "ID_DAM2"));
				break;
				
			case "D":
				var nrow = this.dsDeleteSub.addRow();
				this.dsDeleteSub.setColumn(nrow, "CD_ITEM", this.dsListSub.getColumn(i, "CD_ITEM"));
				this.dsDeleteSub.setColumn(nrow, "CD_CBS", cd_cbs);
				break;

		}
	}
	
	if (this.dsInsertSub.rowcount == 0 && this.dsUpdateSub.rowcount == 0 && this.dsDeleteSub.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "d_insert=dsInsertSub d_update=dsUpdateSub d_delete=dsDeleteSub";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
	
}

/*
 *	엑셀 버튼
 */ 
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}
 
/************************************************************************
 * 서브 버튼 이벤트
 ************************************************************************/
// 디테일 그리드 조회
this.fnSelectSub = function() {
	
	if (this.dxGrid.rowcount == 0 || this.dxGrid.currentrow < 0) return;
	
	// 왼쪽 그리드의 자리수 컬럼이 0 이면 조회하지 않는다
	if (this.dsList.getColumn(this.dsList.rowposition, "CNT") < 1) {
		this.dsListSub.clearData();
		return;
	}
	
	this.gfnGridBeforeSelect(this.dxGridSub);
	
	// 디테일 데이터셋 데이터 삭제
	this.dsListSub.clearData();
	
	// 디테일 파마리터 데이터셋 셋팅
	this.dsSelectSub.clearData();
	this.dsSelectSub.addRow();
	
	this.dsSelectSub.setColumn(0, "CD_CBS", this.dsList.getColumn(this.dsList.rowposition, "CD_CBS"));	

	var strSvcId    = "detail";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "d_select=dsSelectSub";
	var outData     = "dsListSub=d_select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}



this.fnExcelSub = function() {
	this.gfnExcelExport(this.dxGridSub);
}

/************************************************************************
 * Validate
 ************************************************************************/

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);	
	}
	else if (svcID == "detail") {
		this.gfnGridAfterSelect(this.dxGridSub);	
	}
	else if(svcID == "save") {
		if (errorCode == 0) {		
			// 저장 후에 메인 select가 실행된게 아니라 sub select가 실행된거라서 화면form상태가 수정상태로 남아있다. 그래서 조회(Q)상태로 초기화시키고 조회함
			this.gfnSetFormStatus(this, "Q");	// 이부분 처리하지 않으면 저장후에 바로 화면 닫을때 변경된 데이터있다고 메시지 나옴
			this.FormBtns.SubSelect.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
this.fnGrid_RowCellChanged = function(obj:nexacro.Grid,e:nexacro.GridSelectEventInfo)
{
    if ((obj.oldrow > -1 && obj.oldrow == e.row)
		|| (obj.oldrow == -1 && e.oldrow != e.row)) {
		// 마스터 그리드 클릭 이벤트(디테일 그리드 조회)
		this.FormBtns.SubSelect.click();
		obj.oldrow = -1;
	}
};

this.dsList_canrowposchange = function(obj:nexacro.NormalDataset,e:nexacro.DSRowPosChangeEventInfo) {
	var can_rowchange = true;
	for (var i = 0; i < this.dsListSub.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsListSub, i);
		if (flag == "I" || flag == "U" || flag == "D") {
			can_rowchange = false;
			break;
		}
	}
	if(!can_rowchange) {
		this._row = e.newrow;
		this.gfnConfirm("변경된 데이터가 있습니다.\r\n계속 진행하시겠습니까?", "dsList_canrowposchange_callback");
	}
	return can_rowchange;
}

this.dsList_canrowposchange_callback = function(strId, val) 
{
	if(val == true) {
		this.dsList.set_enableevent(false);
		this.dsList.set_rowposition(this._row);
		this.dsList.set_enableevent(true);
	}	
}



/************************************************************************
 * 기타 이벤트
 ************************************************************************/
 
 this.fnDam = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	
	var param = {};

	// 화면 오픈. 
	// CD_MODULE은 보통 같은 모듈에서 호출하는 경우가 많으니 this.FormInfo.CD_MODULE 사용
	// 타 모듈 화면 호출시 지정할것.
	this.gfnFormOpenNonAuth("DQB", "DQB_CBSITEM_DAM_DLG", "fnDam_Callback", param,  410, 280);
}

this.fnDam_Callback = function(svcID, value)
{	
	if(value == true) 
	{
		this.FormBtns.Select.click();
	}
}


this.fnSearchInit = function(obj,e) {
	if(e == null || (e.pretext != e.posttext)) {
		this.gfnSetFormStatus(this);
		this.gfnGridClear(this.dxGrid);
		this.gfnGridClear(this.dxGridSub);
	}
}

this.divData_ondragmove = function(obj:nexacro.Div,e:nexacro.DragEventInfo)
{
   if(e.userdata == "splitter") {
      this.divData.form.divSplitter.set_left(e.clientx);
      this.divData.form.resetScroll();
   }
};

this.divData_divSplitter_ondrag = function(obj:nexacro.Div,e:nexacro.DragEventInfo)
{
   e.set_userdata("splitter");
   return true;
};
this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue){
	this.gfnGridClear(this.dxGrid);
	this.gfnGridClear(this.dxGridSub);
	}
};
]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DQBPR_CBSMENU_TREE_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">d_select</Col>
            <Col id="SP">DQBPR_CBSITEM_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">d_insert</Col>
            <Col id="SP">DQBPR_CBSITEM_INSERT</Col>
          </Row>
          <Row>
            <Col id="TARGET">d_update</Col>
            <Col id="SP">DQBPR_CBSITEM_UPDATE</Col>
          </Row>
          <Row>
            <Col id="TARGET">d_delete</Col>
            <Col id="SP">DQBPR_CBSITEM_DELETE</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsListSub"/>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_LV1" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CD_LV1"/>
          </Row>
        </Rows>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfCD_CBS.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_LV1"/>
    </Bind>
  </Form>
</FDL>
