<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="form" width="1280" height="720" titletext="평가진행현황" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="1" left="0" top="0" height="46.0" right="0" cssclass="div_SEARCH_Bg" text="">
          <Layouts>
            <Layout>
              <Static id="staCD_CORP" taborder="2" text="법인" left="0" top="10.0" width="66" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfCD_CORP" CDTextWidth="50" taborder="3" left="staCD_CORP:0.0" top="10.0" width="250" height="24.0" url="cmm::cmmCodeFind.xfdl" text="" CodeFindName="DAX_CFCORP_CODEFIND" enable="false"/>
              <Static id="staID_RTNG" taborder="1" text="평가회차" left="ccfCD_CORP:0.0" top="10.0" width="92" height="24.0" rtl="false" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfID_RTNG" CDTextWidth="100" taborder="3" left="staID_RTNG:0.0" top="10.0" width="350" height="24.0" url="cmm::cmmCodeFind.xfdl" text="" CodeFindName="DAX_CFRTNG_STD"/>
              <Edit id="edtCD_RTNG_ASBLNEXT" taborder="6" left="ccfID_RTNG:5" top="10.0" width="80" height="24" readonly="false" enable="false"/>
              <Static id="staID_SABUN_APL" taborder="2" text="성명" left="edtCD_RTNG_ASBLNEXT:0" top="10.0" width="79" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Div id="ccfID_SABUN" CodeFindName="DAX_CFBASEINFO_ALL" CDTextWidth="90" taborder="3" left="staID_SABUN_APL:0.0" top="10.0" width="250" height="24.0" url="cmm::cmmCodeFind.xfdl" text="" enable="false"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg" ondragmove="divData_ondragmove">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0" autofittype="col" oncellposchanged="fnGridCellPosChanged"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo) {
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);
	this.gfnFormInfo(this);
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	this.fnSetCombo();
	this.fnInit();
}

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출 
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
	
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btnSave              = this.gfnFormButtonAdd("btnSave"             , "fnSave");				// 임시저장 버튼
	this.btnComplate          = this.gfnFormButtonAdd("btnComplate"         , "fnComplate");			// 1차 평가완료 버튼
	this.btnHistoryGoalEstt   = this.gfnFormButtonAdd("btnHistoryGoalEstt"  , "fnHistoryGoalEstt");		// 업무목표 수립 버튼
	this.btnHistoryGoalCheck  = this.gfnFormButtonAdd("btnHistoryGoalCheck" , "fnHistoryGoalCheck");	// 업무목표 중간점검 버튼
	this.btnHistoryGoalSelfDe = this.gfnFormButtonAdd("btnHistoryGoalSelfDe", "fnHistoryGoalSelfDe");	// 업무목표 자기기술 버튼
}

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	// 그리드영역
	this.dxGrid = this.divData.form.objGrid;
	
	// 검색영역
	this.ccfCD_CORP  = this.divSearch.form.ccfCD_CORP;
	this.ctclYR_RTNG = this.divSearch.form.ctclYR_RTNG;
	this.ccfID_RTNG  = this.divSearch.form.ccfID_RTNG;
	this.ccfID_SABUN = this.divSearch.form.ccfID_SABUN;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {	
	// 그리드 초기화
	this.gfnGridInit(this.dxGrid, this.dsList, "DA", "DAJ_RTNG_PSNL");
	this.dxGrid.BeforeUserDataSetParam = "fnGridBeforeUserDataSetParam";
	this.dxGrid.AfterCDTextChanged     = "fnGridAfterCDTextChanged";
	this.dxGrid.EnterCell = "fnGridEnterCell";
	
	// 검색영역
	this.ccfCD_CORP.BeforeUserDataSetParam  = "fnBeforeUserDataSetParam";	// 법인
	this.ccfCD_CORP.AfterCDTextChanged      = "fnAfterCDTextChanged";
	this.ccfID_RTNG.BeforeUserDataSetParam  = "fnBeforeUserDataSetParam";	// 평가기준
	this.ccfID_RTNG.AfterCDTextChanged      = "fnAfterCDTextChanged";
	this.ccfID_SABUN.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";	// 성명
	this.ccfID_SABUN.AfterCDTextChanged     = "fnAfterCDTextChanged";
		
	this.dxGrid.setFormatRowProperty(1, "size", 58);
	//this.dxGrid.set_autosizingtype( "row" );	//row none
}

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	// 조회
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_CORP", "string");
	this.dsSelect.addColumn("ID_RTNG", "string");
	this.dsSelect.addColumn("ID_ITVWPRSN", "string");
	
	// 저장
	this.dsSave = new Dataset();
	this.dsSave.addColumn("CD_CORP", "string");
	this.dsSave.addColumn("ID_RTNG", "string");
	this.dsSave.addColumn("SEQ_BGVDPRSN", "int");
	this.dsSave.addColumn("ID_CPNYDUTY", "string");
	this.dsSave.addColumn("NO_RNK", "int");
	this.dsSave.addColumn("DS_RTNG_BAS", "string");
	this.dsSave.addColumn("ID_USER", "string");
	
	// 1차 평가완료
	this.dsComplate = new Dataset();
	this.dsComplate.addColumn("CD_CORP", "string");
	this.dsComplate.addColumn("ID_RTNG", "string");
	this.dsComplate.addColumn("SEQ_BGVDPRSN", "int");
	this.dsComplate.addColumn("ID_USER", "string");
	
	// 업무목표 자기기술 히스토리 조회
	this.dsSelectGoalHistory = new Dataset();
	this.dsSelectGoalHistory.addColumn("CD_CORP", "string");
	this.dsSelectGoalHistory.addColumn("ID_RTNG", "string");
	
	// 평가회차 조회
	this.dsSelectRtngStd = new Dataset();	
	this.dsSelectRtngStd.addColumn("TY_GUBUN", "string");
	this.dsSelectRtngStd.addColumn("CN_ROW", "int");
	this.dsSelectRtngStd.addColumn("VALUE", "string");
	this.dsSelectRtngStd.addColumn("MIN_VALUE", "string");
	this.dsSelectRtngStd.addColumn("CD_CORP", "string");
	this.dsSelectRtngStd.addColumn("YR_RTNG", "string");
	this.dsSelectRtngStd.addColumn("ID_SABUN", "string");
	this.dsSelectRtngStd.addColumn("CD_RTNG_TYPE", "string");
	this.dsSelectRtngStd.addColumn("ID_SCREEN", "string");
	this.dsSelectRtngStd.addColumn("CD_ROLE", "string");
}

/************************************************************************
 * 콤보 데이터 조회 및 설정
 ************************************************************************/
this.fnSetCombo = function() {
	
}

/************************************************************************
 * 화면 및 검색영역 초기화
 ************************************************************************/
this.fnInit = function() {
	// 법인
	this.dsSearch.setColumn(0, "CD_CORP",  this.AuthClient.CD_CORP);
	this.dsSearch.setColumn(0, "DS_CORP",  this.AuthClient.DS_CORP);
	// 성명
	this.dsSearch.setColumn(0, "ID_SABUN", this.AuthClient.ID_SABUN);
	this.dsSearch.setColumn(0, "DS_HNAME", this.AuthClient.DS_HNAME);
	
	this.checkTarget();
}

/************************************************************************
 * 버튼 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.gfnSearchValidate(this.divSearch, this.dsSearch)) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);

	this.dsSelect.clearData();
	this.dsSelect.addRow();
	this.dsSelect.setColumn(0, "CD_CORP"    , this.dsSearch.getColumn(0, "CD_CORP"));
	this.dsSelect.setColumn(0, "ID_RTNG"    , this.dsSearch.getColumn(0, "ID_RTNG"));
	this.dsSelect.setColumn(0, "ID_ITVWPRSN", this.AuthClient.ID_SABUN);

	this.dsSelectGoalHistory.clearData();
	this.dsSelectGoalHistory.addRow();
	this.dsSelectGoalHistory.setColumn(0, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
	this.dsSelectGoalHistory.setColumn(0, "ID_RTNG", this.dsSearch.getColumn(0, "ID_RTNG"));
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect select_goal_history=dsSelectGoalHistory";
	var outData     = "dsList=select0 dsListGoalHistory=select_goal_history0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction(strSvcId,		// transaction을 구분하기 위한 svc id값
						strSvcType, 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData, 		// 입력값으로 보낼 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						outData, 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc);	// 통신방법 정의 [생략가능]
}

/*
 * 입력 버튼
 */
this.fnAdd = function() {
	var nrow = this.gfnGridAdd(this.dxGrid);
}

/*
 * 삭제 버튼
 */
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}

/*
 * 저장 버튼
 */
this.fnSave = function() {
	// 그리드 필수항목 체크
	if (!this.gfnGridValidate(this.dxGrid)) return;	
	
	this.gfnConfirm("인사평가 데이터를 저장하시겠습니까?", function(strId, val) {
		if (val == false) {
			return;
		}		

		this.dxGrid.updateToDataset();
		this.dsSave.clearData();
		for (var i = 0; i < this.dsList.rowcount; i++) {
			var flag = this.gfnGetFlag(this.dsList, i);
			switch(flag) {
			case "I":
			case "U":
			case "D":
				var nrow = this.dsSave.addRow();
				this.dsSave.setColumn(nrow, "CD_CORP"    , this.dsSearch.getColumn(0, "CD_CORP"));
				this.dsSave.setColumn(nrow, "ID_RTNG"    , this.dsSearch.getColumn(0, "ID_RTNG"));
				this.dsSave.setColumn(nrow, "SEQ_BGVDPRSN", this.dsList.getColumn(i, "SEQ_BGVDPRSN"));
				this.dsSave.setColumn(nrow, "ID_CPNYDUTY", this.dsList.getColumn(i, "ID_SABUN"));
				this.dsSave.setColumn(nrow, "NO_RNK"     , this.dsList.getColumn(i, "NO_RNK"));
				this.dsSave.setColumn(nrow, "DS_RTNG_BAS", this.dsList.getColumn(i, "DS_RTNG_BAS"));
				this.dsSave.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
				break;
			}
		}
			
		if (this.dsSave.rowcount == 0) return;

		var strSvcId    = "save";
		var strSvcType  = "save";
		var inProc		= "_dsProc";
		var inData      = "save=dsSave";
		var outData     = "";
		var strArg      = "";
		var callBackFnc = "fnCallback";

		this.gfnTransaction(strSvcId,		// transaction을 구분하기 위한 svc id값
							strSvcType, 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData, 		// 입력값으로 보낼 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							outData, 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
							callBackFnc);	// 통신방법 정의 [생략가능]
	});
}

/*
 * 엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 * 출력 버튼
 */
this.fnPrint = function() {
	
}

/************************************************************************
 * Validate
 ************************************************************************/
this.fnSelectValidate = function() {
	return true;
}

/************************************************************************
 * 확장버튼 이벤트
 ************************************************************************/

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 * 기본 콜백
 */
this.fnCallback = function(svcID, errorCode, errorMsg, strArg) {
	if (errorCode != 0) {
		this.gfnAlert(errorMsg);
		return;
	}
	
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);	
		this.fnUpdateStatusExtendButton();
		this.dxGrid.set_autosizingtype("row");		
		//this.btnComplate.set_enable(this.dsList.getColumn(0, "STAT_RTNG") != "CPLT");
		for (var i = 0; i < this.dsList.rowcount; i++) {
			var rowSize = this.dxGrid.getRealRowSize(i);
			if(rowSize < 58){
				rowSize = 58;
				this.dxGrid.setRealRowSize(i, rowSize);				
			}
		}
	}
	else if (svcID == "save") {
		this.FormBtns.Select.click();
	}
	else if (svcID == "complete") {
		this.FormBtns.Select.click();
		//this.fnUpdateStatusExtendButton();
	}
	// 평가대상자 존재 여부에 따른 화면 제어
	else if (svcID == "select_rtng_std") {
		
// 		var ds_param = this.FormInfo.DS_PARAM;
// 		var seq = 0;
// 
// 		if(this.FormInfo.DS_PARAM == "B") seq = 0;	// 피평가자
// 		if(this.FormInfo.DS_PARAM == "R") seq = 1;	// 평가자

		if (this.dsListRtngStd.rowcount == 1) {
			this.dsSearch.setColumn(0, "ID_RTNG", this.dsListRtngStd.getColumn(0, "CD_RTNG"));
			this.dsSearch.setColumn(0, "DS_RTNG", this.dsListRtngStd.getColumn(0, "DS_RTNG"));
			this.dsSearch.setColumn(0, "TY_PTCP", this.dsListRtngStd.getColumn(0, "TY_PTCP"));
			this.dsSearch.setColumn(0, "CD_RTNG_ASBLNEXT", this.dsListRtngStd.getColumn(0, "CD_RTNG_ASBLNEXT"));
			this.dsSearch.setColumn(0, "DS_RTNG_ASBLNEXT", this.dsListRtngStd.getColumn(0, "DS_RTNG_ASBLNEXT"));
			this.FormBtns.Select.click();
		}
	}
	// 업무목표 수립 데이터 복사
// 	else if (svcID == "copy_goal_estt") {
// 		this.FormBtns.Select.click();
// 	}
	// 업무목표 중간점검 데이터 복사
// 	else if (svcID == "copy_goal_check") {
// 		this.FormBtns.Select.click();
// 	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	if (id == "ccfCD_CORP") {
		dsUserParam.setColumn(nrow, "CD_CORP"  , this.AuthClient.CD_CORP);
		dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
		dsUserParam.setColumn(nrow, "ID_USER"  , this.AuthClient.ID_USER);
	} else if (id == "ccfID_RTNG") {
		dsUserParam.setColumn(nrow, "CD_CORP"     , this.dsSearch.getColumn(0, "CD_CORP"));
		dsUserParam.setColumn(nrow, "YR_RTNG"     , "");
		dsUserParam.setColumn(nrow, "ID_SABUN"    , this.dsSearch.getColumn(0, "ID_SABUN"));
		dsUserParam.setColumn(nrow, "CD_RTNG_TYPE", "JA13");
		dsUserParam.setColumn(nrow, "ID_SCREEN"   , "DAJ_RTNG_PSNL_RTNG");
		dsUserParam.setColumn(nrow, "CD_ROLE"     , this.AuthClient.CD_ROLE);
	}
	
	return true;
}

this.fnAfterCDTextChanged = function(id, codeFindData) {
	if (codeFindData[0] == undefined) {
		return;
	}
	
	if (id == "ccfID_RTNG") {
		var TY_PTCP = codeFindData[0]["TY_PTCP"];
		this.dsSearch.setColumn(0, "TY_PTCP", codeFindData[0]["TY_PTCP"]);
		this.dsSearch.setColumn(0, "CD_RTNG_ASBLNEXT", codeFindData[0]["CD_RTNG_ASBLNEXT"]);
		this.dsSearch.setColumn(0, "DS_RTNG_ASBLNEXT", codeFindData[0]["DS_RTNG_ASBLNEXT"]);
		this.dsSearch.setColumn(0, "ID_CNTN_RTNG", codeFindData[0]["ID_CNTN_RTNG"]);
		this.dsSearch.setColumn(0, "DS_CNTN_RTNG", codeFindData[0]["DS_CNTN_RTNG"]);
	}
}

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
this.fnGridBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	return true;
}

this.fnGridAfterCDTextChanged = function(id, codeFindData) {
	
}

this.fnGridCellPosChanged = function(obj:nexacro.Grid, e:nexacro.GridSelectEventInfo) {
	//this.fnUpdateStatusExtendButton();
}

this.fnGridEnterCell = function(obj:nexacro.Grid, row, cell) {
	var colnm = this.gfnGridGetBindColumnNameByIndex(this.dxGrid, cell);
	
	//this.fnEnableButton();
	var list = ['NO_RNK', 'DS_RTNG_BAS'];
	if (list.indexOf(colnm) != -1 )
	{
		trace('fnGridEnterCell');
		this.fnUpdateStatusExtendButton(colnm, row);
	}else
	{	
		return false;
	} 
}

this.fnUpdateStatusExtendButton = function(colnm, nrow) {	
	this.dxGrid.updateToDataset();
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		if (flag == undefined) {
			this.btnSave.set_enable(false);
			this.btnComplate.set_enable(true);
		}
		
		switch (flag) {
		case "I":
		case "U":
		case "D":
			this.btnSave.set_enable(true);
			this.btnComplate.set_enable(false);
			return;
		}
	}
	this.btnSave.set_enable(false);
	this.btnComplate.set_enable(true);
	
	if (this.dsList.getColumn(nrow, "STAT_RTNG") == "CPLT") {
		this.btnComplate.set_enable(false);
// 		var list = ['DS_UP_DEPT', 'DS_DEPT', 'ID_SABUN', 'DS_HNAME', 'DS_DUTY', 'DS_POSITION'];
// 		for (var i = 0; i < list.length; i++) {
// 			this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", list[i]), "cssclass", "BACK_ReadOnly");
// 			this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", list[i]), "edittype", "none");
// 		}
		this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "NO_RNK"), "cssclass", "BACK_ReadOnly");
		this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "NO_RNK"), "edittype", "none");		
		this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "DS_RTNG_BAS"), "cssclass", "BACK_ReadOnly");
		this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "DS_RTNG_BAS"), "edittype", "none");
		this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "DS_RTNG_BAS"), "expandshow", "show");	//"show"
		
		this.dsList.set_enableevent(false);
		this.dsList.setColumn(nrow, "MULTILINE_READONLY", "Y");
		this.dsList.setColumn(nrow, "MULTILINE_EXCLUDE_COLUMNS", "");
// 		for (var i = 0; i < this.dsList.rowcount; i++) {
// 			this.dsList.setColumn(i, "MULTILINE_READONLY", "Y");
// 			this.dsList.setColumn(i, "MULTILINE_EXCLUDE_COLUMNS", "");
// 		}
		this.dsList.set_enableevent(true);
	} else {		
// 		var list = ['DS_UP_DEPT', 'DS_DEPT', 'ID_SABUN', 'DS_HNAME', 'DS_DUTY', 'DS_POSITION'];
// 		for (var i = 0; i < list.length; i++) {
// 			this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", list[i]), "cssclass", "BACK_ReadOnly");
// 			this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", list[i]), "edittype", "none");
// 		}
		this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "NO_RNK"), "cssclass", "");
		this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "NO_RNK"), "edittype", "text");
		this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "DS_RTNG_BAS"), "cssclass", "");
		this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "DS_RTNG_BAS"), "edittype", "text");
		this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "DS_RTNG_BAS"), "expandshow", "show");	//"show"
		
		this.dsList.set_enableevent(false);
		this.dsList.setColumn(nrow, "MULTILINE_READONLY", "Y");
		this.dsList.setColumn(nrow, "MULTILINE_EXCLUDE_COLUMNS", "DS_RTNG_BAS");
// 		for (var i = 0; i < this.dsList.rowcount; i++) {
// 			this.dsList.setColumn(i, "MULTILINE_READONLY", "Y");
// 			this.dsList.setColumn(i, "MULTILINE_EXCLUDE_COLUMNS", "DS_RTNG_BAS");
// 		}
		this.dsList.set_enableevent(true);
	}
	
}

/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo) {
	if (e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
	}
}

// 
this.fnComplate = function() {
	var cnt = 0;
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch (flag) {
		case "I":
		case "U":
		case "D":
			cnt++;
			break;
		}
	}
	
	if (cnt > 0) {
		this.gfnAlert("저장되지 않은 평가가 존재합니다");
		return;
	}

	var chk1 = false;
	var target1 = "";
	for (var i = 0; i < this.dsList.rowcount; i++) {		
		if (this.dsList.getColumn(i, "NO_RNK") == "" || this.dsList.getColumn(i, "DS_RTNG_BAS") == "")
		{
			cnt += 1;
			target1 += (cnt == 1 ? '' : ((cnt == 5 || cnt == 9 || cnt == 13 || cnt == 17) ? ', \n' : ', ')) + this.dsList.getColumn(i, "DS_HNAME") + ' ' + this.dsList.getColumn(i, "DS_POSITION");
			chk1 = true;
		}
	}
	
	if (chk1 == true)
	{
		this.gfnAlert(target1 + "의 \n순위 및 평가근거가 등록되지 않아 평가완료를 할 수 없습니다.");	
		return; 	
	}
	else
	{
		this.gfnConfirm("인사평가 1차를 완료하시겠습니까?", function(strId, val) {
			if (val == false) {
				return; 
			}
			
			this.fnComplate_callback();
		})
	}
}

this.fnComplate_callback = function() {
	
	this.dxGrid.updateToDataset();
	this.dsComplate.clearData();
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var nrow = this.dsComplate.addRow();
		this.dsComplate.setColumn(nrow, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
		this.dsComplate.setColumn(nrow, "ID_RTNG", this.dsSearch.getColumn(0, "ID_RTNG"));
		this.dsComplate.setColumn(nrow, "SEQ_BGVDPRSN", this.dsList.getColumn(i, "SEQ_BGVDPRSN"));
		this.dsComplate.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
	}		
	if (this.dsComplate.rowcount == 0) return;

	var strSvcId    = "complete";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "complete=dsComplate";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";

	this.gfnTransaction(strSvcId,		// transaction을 구분하기 위한 svc id값
						strSvcType, 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData, 		// 입력값으로 보낼 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						outData, 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc);	// 통신방법 정의 [생략가능]
}

this.fnHistoryGoalEstt = function() {
	var param = {};
	param.READ_ONLY = true;
	param.CD_CORP = this.dsSearch.getColumn(0, "CD_CORP");
	param.DS_CORP = this.dsSearch.getColumn(0, "DS_CORP");
	this.dsListGoalHistory.filter("CD_RTNG_TYPE == 'JA10'");
	param.ID_RTNG = this.dsListGoalHistory.getColumn(0, "ID_RTNG");
	param.DS_RTNG = this.dsListGoalHistory.getColumn(0, "DS_RTNG");
	this.dsListGoalHistory.filter("");
	param.TY_PTCP = 'B';
	param.ID_SABUN = this.dsList.getColumn(this.dsList.rowposition, "ID_SABUN");
	param.DS_HNAME = this.dsList.getColumn(this.dsList.rowposition, "DS_HNAME");
	
	if (param.ID_RTNG == "" || param.ID_RTNG == undefined) {
		this.gfnAlert("업무목표 수립이 완료되지 않았습니다.");
		return;		
	}
	
	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DAJ_RTNG_GOAL_ESTT", "", param);
}

this.fnHistoryGoalCheck = function() {
	var param = {};
	param.READ_ONLY = true;
	param.CD_CORP = this.dsSearch.getColumn(0, "CD_CORP");
	param.DS_CORP = this.dsSearch.getColumn(0, "DS_CORP");
	this.dsListGoalHistory.filter("CD_RTNG_TYPE == 'JA11'");
	param.ID_RTNG = this.dsListGoalHistory.getColumn(0, "ID_RTNG");
	param.DS_RTNG = this.dsListGoalHistory.getColumn(0, "DS_RTNG");
	this.dsListGoalHistory.filter("");
	param.TY_PTCP = 'B';
	param.ID_SABUN = this.dsList.getColumn(this.dsList.rowposition, "ID_SABUN");
	param.DS_HNAME = this.dsList.getColumn(this.dsList.rowposition, "DS_HNAME");
	
	if (param.ID_RTNG == "" || param.ID_RTNG == undefined) {
		this.gfnAlert("업무목표 중간점검이 완료되지 않았습니다.");
		return;		
	}
	
	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DAJ_RTNG_GOAL_CHCK", "", param);
}

this.fnHistoryGoalSelfDe = function() {
	var param = {};
	param.READ_ONLY = true;
	param.CD_CORP = this.dsSearch.getColumn(0, "CD_CORP");
	param.DS_CORP = this.dsSearch.getColumn(0, "DS_CORP");
	this.dsListGoalHistory.filter("CD_RTNG_TYPE == 'JA12'");
	param.ID_RTNG = this.dsListGoalHistory.getColumn(0, "ID_RTNG");
	param.DS_RTNG = this.dsListGoalHistory.getColumn(0, "DS_RTNG");
	this.dsListGoalHistory.filter("");
	param.TY_PTCP = 'B';
	param.ID_SABUN = this.dsList.getColumn(this.dsList.rowposition, "ID_SABUN");
	param.DS_HNAME = this.dsList.getColumn(this.dsList.rowposition, "DS_HNAME");
	
	if (param.ID_RTNG == "" || param.ID_RTNG == undefined) {
		this.gfnAlert("성과 자기기술이 완료되지 않았습니다.");
		return;		
	}
	
	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DAJ_RTNG_GOAL_SELF_DESC", "", param);
}

this.checkTarget = function() {	
	this.dsSelectRtngStd.clearData();
	this.dsSelectRtngStd.addRow();
	this.dsSelectRtngStd.setColumn(0, "TY_GUBUN" , "1");
	this.dsSelectRtngStd.setColumn(0, "CN_ROW" , 1000000);
	this.dsSelectRtngStd.setColumn(0, "VALUE" , "");
	this.dsSelectRtngStd.setColumn(0, "MIN_VALUE" , "");
	this.dsSelectRtngStd.setColumn(0, "CD_CORP" , this.dsSearch.getColumn(0, "CD_CORP"));
	this.dsSelectRtngStd.setColumn(0, "YR_RTNG" , "");
	this.dsSelectRtngStd.setColumn(0, "ID_SABUN", this.dsSearch.getColumn(0, "ID_SABUN"));
	this.dsSelectRtngStd.setColumn(0, "CD_RTNG_TYPE", "JA13");
	this.dsSelectRtngStd.setColumn(0, "ID_SCREEN", "DAJ_RTNG_PSNL_RTNG");
	this.dsSelectRtngStd.setColumn(0, "CD_ROLE", this.AuthClient.CD_ROLE);
	
	var strSvcId    = "select_rtng_std";
	var strSvcType  = "select";
	var inProc		= "_dsProc";
	var inData      = "select_rtng_std=dsSelectRtngStd";
	var outData     = "dsListRtngStd=select_rtng_std0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction(strSvcId,		// transaction을 구분하기 위한 svc id값
						strSvcType, 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData, 		// 입력값으로 보낼 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						outData, 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc);	// 통신방법 정의 [생략가능]
}
]]></Script>
    <Objects>
      <Dataset id="dsList" onvaluechanged="dsList_onvaluechanged"/>
      <Dataset id="dsListGoalHistory"/>
      <Dataset id="dsListRtngStd"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DAJPR_RTNG_PSNL_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">save</Col>
            <Col id="SP">DAJPR_RTNG_PSNL_SAVE</Col>
          </Row>
          <Row>
            <Col id="TARGET">complete</Col>
            <Col id="SP">DAJPR_RTNG_PSNL_RTNG_COMPLETE</Col>
          </Row>
          <Row>
            <Col id="TARGET">select_goal_history</Col>
            <Col id="SP">DAJPR_RTNG_GOAL_HISTORY_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">select_rtng_std</Col>
            <Col id="SP">DAXPR_RTNG_STD_CODEFIND</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_CORP" type="STRING" size="256"/>
          <Column id="DS_CORP" type="STRING" size="256"/>
          <Column id="ID_RTNG" type="STRING" size="256"/>
          <Column id="DS_RTNG" type="STRING" size="256"/>
          <Column id="TY_PTCP" type="STRING" size="256"/>
          <Column id="ID_SABUN" type="STRING" size="256"/>
          <Column id="DS_HNAME" type="STRING" size="256"/>
          <Column id="ID_PERSON" type="STRING" size="256"/>
          <Column id="CD_RTNG_ASBLNEXT" type="STRING" size="256"/>
          <Column id="DS_RTNG_ASBLNEXT" type="STRING" size="256"/>
          <Column id="ID_CNTN_RTNG" type="STRING" size="256"/>
          <Column id="DS_CNTN_RTNG" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CD_CORP"/>
          </Row>
        </Rows>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfCD_CORP.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_CORP"/>
      <BindItem id="item1" compid="divSearch.form.ccfCD_CORP.form.DSTextBox" propid="value" datasetid="dsSearch" columnid="DS_CORP"/>
      <BindItem id="item2" compid="divSearch.form.ccfID_RTNG.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="ID_RTNG"/>
      <BindItem id="item3" compid="divSearch.form.ccfID_RTNG.form.DSTextBox" propid="value" datasetid="dsSearch" columnid="DS_RTNG"/>
      <BindItem id="item4" compid="divSearch.form.ccfID_SABUN.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="ID_SABUN"/>
      <BindItem id="item5" compid="divSearch.form.ccfID_SABUN.form.DSTextBox" propid="value" datasetid="dsSearch" columnid="DS_HNAME"/>
    </Bind>
  </Form>
</FDL>
