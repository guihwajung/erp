<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="손익계산서" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg" formscrolltype="none" text="">
          <Layouts>
            <Layout>
              <Static id="staCD_CORP" taborder="4" text="법인코드" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfCD_CORP" CDTextWidth="50" taborder="0" left="staCD_CORP:0.0" top="10.0" width="230" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
              <Static id="staNO_ID" taborder="5" text="회계년월" left="ccfCD_CORP:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ctclYM_WORK" taborder="1" left="staNO_ID:0.0" top="10.0" width="90" height="24.0" url="cmm::cmmCalMM.xfdl"/>
              <Radio id="rdoTY_DT" taborder="3" left="ctclYM_WORK:0.0" top="10.0" width="104" height="24.0" direction="vertical" codecolumn="codecolumn" datacolumn="datacolumn" innerdataset="innerdataset">
                <Dataset id="innerdataset">
                  <ColumnInfo>
                    <Column id="codecolumn" size="256"/>
                    <Column id="datacolumn" size="256"/>
                  </ColumnInfo>
                  <Rows>
                    <Row>
                      <Col id="codecolumn">1</Col>
                      <Col id="datacolumn">월</Col>
                    </Row>
                    <Row>
                      <Col id="codecolumn">2</Col>
                      <Col id="datacolumn">누계</Col>
                    </Row>
                  </Rows>
                </Dataset>
              </Radio>
              <Radio id="rdoTY_SITE" taborder="2" left="rdoTY_DT:0.0" top="10.0" width="204" height="24.0" direction="vertical" codecolumn="codecolumn" datacolumn="datacolumn" innerdataset="innerdataset">
                <Dataset id="innerdataset">
                  <ColumnInfo>
                    <Column id="codecolumn" size="256"/>
                    <Column id="datacolumn" size="256"/>
                  </ColumnInfo>
                  <Rows>
                    <Row>
                      <Col id="codecolumn">D</Col>
                      <Col id="datacolumn">사업장별</Col>
                    </Row>
                    <Row>
                      <Col id="codecolumn">G</Col>
                      <Col id="datacolumn">사업장그룹별</Col>
                    </Row>
                  </Rows>
                </Dataset>
              </Radio>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	this.ccfCD_CORP.form.CDTextBox.set_value(this.AuthClient.CD_CORP);
	this.ccfCD_CORP.form.DSTextBox.set_value(this.AuthClient.DS_CORP);

	var today = this.gfnGetDate().substring(0,6);
    this.ctclYM_WORK.form.TextBox.set_value(today);
	this.rdoTY_SITE.set_index(0);
	this.rdoTY_DT.set_index(0);
	
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
	// Select, Add, Del, Save, Excel, Print
	// SubSelect, SubAdd, SubDel, SuubSave, SubExcel
	//this.FormBtns.Select.set_enable(false);
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {

};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.ccfCD_CORP = this.divSearch.form.ccfCD_CORP;
	this.ctclYM_WORK = this.divSearch.form.ctclYM_WORK;
	this.rdoTY_SITE = this.divSearch.form.rdoTY_SITE;
	this.rdoTY_DT = this.divSearch.form.rdoTY_DT;
	this.dxGrid = this.divData.form.objGrid;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	this.ccfCD_CORP.CodeFindName = "DHX_CFCORP";
	this.ccfCD_CORP.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.ccfCD_CORP.AfterCDTextChanged = "codefind_AfterCDTextChanged";
		
	// 그리드 초기화
	this.gfnGridInit(this.dxGrid, this.dsList, "DH", "DHE_SITE_PL");
	
	//헤더 클릭 이벤트 삭제(소팅 막기 위해 처리)
	this.dxGrid.removeEventHandlerLookup("onheadclick", "gfnGrid_onheadclick", this);
	
};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {

	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_CORP", "string");
	this.dsSelect.addColumn("DT_WORK", "string");
	this.dsSelect.addColumn("TY_DT"   , "string");

}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();

	this.dsSelect.setColumn(0, "CD_CORP" , this.ccfCD_CORP.form.CDTextBox.value);
	this.dsSelect.setColumn(0, "DT_WORK" , this.ctclYM_WORK.form.TextBox.value);
	this.dsSelect.setColumn(0, "TY_DT"   , this.rdoTY_DT.value);
	
	var sType = "";
	if(this.rdoTY_SITE.value == "G"){
		sType = this.rdoTY_SITE.value;
	}
	
	var strSvcId    = "header";
	var strSvcType  = "select";
	var inProc		= "_dsProc";
	var inData      = "selectHeader"+sType+"=dsSelect";
	var outData     = "dsHeader=selectHeader"+sType+"0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
					strSvcType , 	// transaction을 요청할 구분
					inProc,			// Procedure 정보 Dataset 이름
					inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
					outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
					strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
					callBackFnc); // 통신방법 정의 [생략가능]
}


//데이터 조회 처리
this.fnDataSelect = function()
{
	var sType = "";
	if(this.rdoTY_SITE.value == "G"){
		sType = this.rdoTY_SITE.value;
	}

	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select"+sType+"=dsSelect";
	var outData     = "dsList=select"+sType+"0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
};	

/*
 *	입력 버튼
 */
this.fnAdd = function() {
}

/*
 *	삭제 버튼
 */
this.fnDel = function() {
}

/*
 *	저장 버튼
 */
this.fnSave = function() {
	
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {

}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {
	if(this.gfnIsNull(this.ccfCD_CORP.form.CDTextBox.text)) {
		this.gfnAlert("법인코드를 입력하세요.");
		this.ccfCD_CORP.form.CDTextBox.setFocus();
		return false;
	}

	if(this.gfnIsNull(this.ctclYM_WORK.form.TextBox.value)) {
		this.gfnAlert("회계년월을 입력하세요.");
		this.ctclYM_WORK.form.TextBox.setFocus();
		return false;
	}

	return true;
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "header") {
		//그리드 데이터 셋팅 작업
		this.fnGridDataSetting();
		
		//데이터 조회 처리
		this.fnDataSelect();
	}
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);	
		
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.codefind_AfterCDTextChanged = function(id, codefindData) {
	var arrData = codefindData;
	
	switch(id) {
		case "ccfCD_CORP":	//법인

			break;
	}
}

this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
		
	if(id == "ccfCD_CORP") { 
		dsUserParam.setColumn(nrow, "ID_SABUN", this.AuthClient.ID_USER);
	}
	
	return true;
};



/************************************************************************
 * 그리드 이벤트
 ************************************************************************/


/************************************************************************
 * 기타 이벤트
 ************************************************************************/
/*
 *	조회 조건 변경시 초기화
 */

this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
	}
};

this.fnGridSubSum = function (currow, colId)
{	
	var row001 = this.dsList.findRow("CD_CODE", "001");	//순매출액
	var row140 = this.dsList.findRow("CD_CODE", "140");	//매출원가
	var row223 = this.dsList.findRow("CD_CODE", "223");	//판매비와 관리비
	var row462 = this.dsList.findRow("CD_CODE", "462");	//영업외수익
	var row523 = this.dsList.findRow("CD_CODE", "523");	//영업외비용
	var row590 = this.dsList.findRow("CD_CODE", "590");	//계속사업손익법인세비용
	var row585 = this.dsList.findRow("CD_CODE", "585");	//중단사업손익(법인세효과 차감후)
	
	var sum = 0;
	if(this.dsList.getColumn(currow, "CD_CODE") == "222"){	//매출 총이익
		//(순매출액(001) - 매출원가(140))
		sum = nexacro.toNumber(this.dsList.getColumn(row001, colId),0) - nexacro.toNumber(this.dsList.getColumn(row140, colId),0);
	}else if(this.dsList.getColumn(currow, "CD_CODE") == "461"){	//영업이익
		//(순매출액(001) - 매출원가(140) - 판매비와 관리비(223))
		sum = nexacro.toNumber(this.dsList.getColumn(row001, colId),0) - nexacro.toNumber(this.dsList.getColumn(row140, colId),0);
		sum = sum - nexacro.toNumber(this.dsList.getColumn(row223, colId),0);		
	}else if(this.dsList.getColumn(currow, "CD_CODE") == "575"){	//법인세비용차감전계손사업손익
		//(순매출액(001) - 매출원가(140) - 판매비와 관리비(223) + 영업외수익(462) - 영업외비용(523))
		sum = nexacro.toNumber(this.dsList.getColumn(row001, colId),0) - nexacro.toNumber(this.dsList.getColumn(row140, colId),0) - nexacro.toNumber(this.dsList.getColumn(row223, colId),0);		
		sum = sum + nexacro.toNumber(this.dsList.getColumn(row462, colId),0) - nexacro.toNumber(this.dsList.getColumn(row523, colId),0);		
	}else if(this.dsList.getColumn(currow, "CD_CODE") == "576"){	//계속사업손익
		//(순매출액(001) - 매출원가(140) - 판매비와 관리비(223) + 영업외수익(462) - 영업외비용(523) - 계속사업손익법인세비용(590))
		sum = nexacro.toNumber(this.dsList.getColumn(row001, colId),0) - nexacro.toNumber(this.dsList.getColumn(row140, colId),0) - nexacro.toNumber(this.dsList.getColumn(row223, colId),0);
		sum = sum + nexacro.toNumber(this.dsList.getColumn(row462, colId),0);
		sum = sum - nexacro.toNumber(this.dsList.getColumn(row523, colId),0) - nexacro.toNumber(this.dsList.getColumn(row590, colId),0);
	}else if(this.dsList.getColumn(currow, "CD_CODE") == "596"){	//당기순이익
		//(순매출액(001) - 매출원가(140) - 판매비와 관리비(223) + 영업외수익(462) - 영업외비용(523) - 계속사업손익법인세비용(590) + 중단사업손익(법인세효과 차감후)(585))
		sum = nexacro.toNumber(this.dsList.getColumn(row001, colId),0) - nexacro.toNumber(this.dsList.getColumn(row140, colId),0) - nexacro.toNumber(this.dsList.getColumn(row223, colId),0);
		sum = sum + nexacro.toNumber(this.dsList.getColumn(row462, colId),0);
		sum = sum - nexacro.toNumber(this.dsList.getColumn(row523, colId),0) - nexacro.toNumber(this.dsList.getColumn(row590, colId),0);
		sum = sum + nexacro.toNumber(this.dsList.getColumn(row585, colId),0);
	}else{	//해당 케이스가 아닐경우 자기자신의값
		sum = nexacro.toNumber(this.dsList.getColumn(currow, colId));
	}

	return sum;
};

//그리드 셋팅
this.fnGridDataSetting = function ()
{
	var startCol = this.dxGrid.getBindCellIndex("body", "RM_BIGO");	// 시작 인덱스

	this.dxGrid.set_enableredraw(false);
	this.dsList.set_enableevent(false);

	var colCnt = this.dxGrid.getCellCount("body");
	
	//그리드 컬럼 삭제 처리(초기화용)
	var delCnt = 0, delIdx = 0;
	for(var i=0;i<colCnt;i++){
		if(i > startCol){
			delIdx = ((colCnt-1)-delCnt);
			this.dxGrid.deleteContentsCol("body", delIdx, false);

			delCnt++;
		}
	}
	
	var cellIndex = startCol + 1;
	//헤더 컬럼 데이터 
	for(var h=0;h<this.dsHeader.rowcount;h++){
		// 컬럼 추가(데이터셋)
		this.dsList.addColumn(this.dsHeader.getColumn(h, "CD_DEPT_ACNT"), "BIGDECIMAL");
		
		//그리드 컬럼 추가
		this.dxGrid.appendContentsCol("body");
		
		this.dxGrid.setCellProperty("head", cellIndex, "text", this.dsHeader.getColumn(h, "DS_DEPT_ACNT"));
		this.dxGrid.setCellProperty("body", cellIndex, "text", "bind:"+this.dsHeader.getColumn(h, "CD_DEPT_ACNT"));	//바인딩 처리
		this.dxGrid.setCellProperty("body", cellIndex, "expr", "expr:comp.parent.parent.parent.fnGridSubSum(rowidx, '"+this.dsHeader.getColumn(h, "CD_DEPT_ACNT")+"')");
 		this.dxGrid.setCellProperty("body", cellIndex, "displaytype", "mask");
 		this.dxGrid.setCellProperty("body", cellIndex, "maskeditformat", "#,###");
		
		//CSS 처리
		//this.dxGrid.setCellProperty("body", cellIndex, "cssclass", "expr:comp.parent.parent.parent.parent.parent.parent.fnSetGridCss(rowidx)");
		
		this.dxGrid.setFormatColProperty(cellIndex, "size", 120); 		//컬럼 사이즈
		
		cellIndex++;
	}

	this.dsList.set_enableevent(true);
	this.dxGrid.set_enableredraw(true);
	
	//trace("saveXML :: "+this.dsList.saveXML());
};]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DHFPR_PL_DEPT_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">selectHeader</Col>
            <Col id="SP">DHFPR_PL_DEPT_HEADER_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">selectG</Col>
            <Col id="SP">DHFPR_PL_GROUP_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">selectHeaderG</Col>
            <Col id="SP">DHFPR_PL_GROUP_HEADER_SELECT</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_CORP" type="STRING" size="256"/>
          <Column id="YM_WORK" type="STRING" size="256"/>
          <Column id="TY_DT" type="STRING" size="256"/>
          <Column id="TY_SITE" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
      <Dataset id="dsHeader" oncolumnchanged="dsList_oncolumnchanged"/>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfCD_CORP.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_CORP"/>
      <BindItem id="item3" compid="divSearch.form.ctclYM_WORK.form.TextBox" propid="value" datasetid="dsSearch" columnid="YM_WORK"/>
      <BindItem id="item5" compid="divSearch.form.rdoTY_DT" propid="value" datasetid="dsSearch" columnid="TY_DT"/>
      <BindItem id="item1" compid="divSearch.form.rdoTY_SITE" propid="value" datasetid="dsSearch" columnid="TY_SITE"/>
    </Bind>
  </Form>
</FDL>
