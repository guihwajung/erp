(function()
{
    return function()
    {
        if (!this._is_form)
            return;
        
        var obj = null;
        
        this.on_create = function()
        {
            this.set_name("form");
            this.set_titletext("연차 수당관리");
            if (Form == this.constructor)
            {
                this._setFormPosition(1280,720);
            }
            
            // Object(Dataset, ExcelExportObject) Initialize
            obj = new Dataset("dsList", this);
            obj._setContents("");
            this.addChild(obj.name, obj);


            obj = new Dataset("_dsProc", this);
            obj._setContents("<ColumnInfo><Column id=\"TARGET\" type=\"STRING\" size=\"256\"/><Column id=\"SP\" type=\"STRING\" size=\"256\"/></ColumnInfo><Rows><Row><Col id=\"TARGET\">select</Col><Col id=\"SP\">DACPR_MGTVACA_PAY_SELECT</Col></Row><Row><Col id=\"SP\">DACPR_MGTVACA_PAY_SAVE</Col><Col id=\"TARGET\">save</Col></Row></Rows>");
            this.addChild(obj.name, obj);


            obj = new Dataset("dsSearch", this);
            obj._setContents("<ColumnInfo><Column id=\"CD_CORP\" type=\"STRING\" size=\"256\"/><Column id=\"YY_BASE\" type=\"STRING\" size=\"256\"/><Column id=\"ID_SABUN\" type=\"STRING\" size=\"256\"/><Column id=\"TY_GUBUN\" type=\"STRING\" size=\"256\"/></ColumnInfo><Rows><Row><Col id=\"CD_CORP\"/><Col id=\"YY_BASE\"/></Row></Rows>");
            this.addChild(obj.name, obj);


            obj = new Dataset("dsTY_GUBUN", this);
            obj._setContents("<ColumnInfo><Column id=\"CODE\" type=\"STRING\" size=\"256\"/><Column id=\"VALUE\" type=\"STRING\" size=\"256\"/></ColumnInfo><Rows><Row><Col id=\"CODE\">%</Col><Col id=\"VALUE\">전체</Col></Row><Row><Col id=\"CODE\">G</Col><Col id=\"VALUE\">계속근무</Col></Row><Row><Col id=\"CODE\">T</Col><Col id=\"VALUE\">퇴직</Col></Row></Rows>");
            this.addChild(obj.name, obj);
            
            // UI Components Initialize
            obj = new Div("divSearch","0","0",null,"46.0","0",null,null,null,null,null,this);
            obj.set_taborder("0");
            obj.set_cssclass("div_SEARCH_Bg");
            this.addChild(obj.name, obj);

            obj = new Static("staYY_BASE","0.0","10.0","92.0","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("0");
            obj.set_text("대상년도");
            obj.set_cssclass("sta_WF_SchLabelE");
            this.divSearch.addChild(obj.name, obj);

            obj = new Div("ctclYY_BASE","staYY_BASE:0.0","10.0","90","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("1");
            obj.set_url("cmm::cmmCalYY.xfdl");
            this.divSearch.addChild(obj.name, obj);

            obj = new Static("staCD_CORP","ctclYY_BASE:0.0","10.0","92.0","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("2");
            obj.set_text("법인");
            obj.set_cssclass("sta_WF_SchLabel");
            this.divSearch.addChild(obj.name, obj);

            obj = new Div("ccfCD_CORP","staCD_CORP:0.0","10.0","180","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.getSetter("CDTextWidth").set("30");
            obj.set_taborder("3");
            obj.set_url("cmm::cmmCodeFind.xfdl");
            obj.set_text("");
            this.divSearch.addChild(obj.name, obj);

            obj = new Static("staID_SABUN","ccfCD_CORP:0.0","10.0","92.0","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("4");
            obj.set_text("성명");
            obj.set_cssclass("sta_WF_SchLabel");
            this.divSearch.addChild(obj.name, obj);

            obj = new Div("ccfID_SABUN","staID_SABUN:0.0","10.0","180","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.getSetter("CDTextWidth").set("50");
            obj.set_taborder("5");
            obj.set_url("cmm::cmmCodeFind.xfdl");
            obj.set_text("");
            this.divSearch.addChild(obj.name, obj);

            obj = new Static("staTY_GUBUN","ccfID_SABUN:0.0","10.0","92.0","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("6");
            obj.set_text("작업구분");
            obj.set_rtl("false");
            obj.set_cssclass("sta_WF_SchLabel");
            this.divSearch.addChild(obj.name, obj);

            obj = new Combo("cboTY_GUBUN","staTY_GUBUN:0.0","10.0","80","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("7");
            obj.set_innerdataset("dsTY_GUBUN");
            obj.set_datacolumn("VALUE");
            obj.set_codecolumn("CODE");
            obj.set_text("전체");
            obj.set_value("%");
            obj.set_index("0");
            this.divSearch.addChild(obj.name, obj);

            obj = new Div("divData","0","divSearch:10",null,null,"0","0",null,null,null,null,this);
            obj.set_taborder("0");
            obj.set_cssclass("div_DATA_Bg");
            this.addChild(obj.name, obj);

            obj = new Grid("objGrid","0","0",null,null,"0","0",null,null,null,null,this.divData.form);
            obj.set_taborder("0");
            obj._setContents("");
            this.divData.addChild(obj.name, obj);
            // Layout Functions
            //-- Default Layout : this
            obj = new Layout("default","",this._adjust_width,this._adjust_height,this,function(p){});
            this.addLayout(obj.name, obj);
            
            // BindItem Information
            obj = new BindItem("item0","divSearch.form.ccfCD_CORP.form.CDTextBox","value","dsSearch","CD_CORP");
            this.addChild(obj.name, obj);
            obj.bind();

            obj = new BindItem("item1","divSearch.form.ctclYY_BASE.form.TextBox","value","dsSearch","YY_BASE");
            this.addChild(obj.name, obj);
            obj.bind();

            obj = new BindItem("item2","divSearch.form.ccfID_SABUN.form.CDTextBox","value","dsSearch","ID_SABUN");
            this.addChild(obj.name, obj);
            obj.bind();

            obj = new BindItem("item3","divSearch.form.cboTY_GUBUN","value","dsSearch","TY_GUBUN");
            this.addChild(obj.name, obj);
            obj.bind();
            
            // TriggerItem Information

        };
        
        this.loadPreloadList = function()
        {
            this._addPreloadList("fdl","cmm::cmmCalYY.xfdl");
            this._addPreloadList("fdl","cmm::cmmCodeFind.xfdl");
        };
        
        // User Script
        this.registerScript("DAC_MGTVACATION_PAY.xfdl", function() {
        this.objApp = this.gfnGetApplication();

        this.form_onload = function(obj,e)
        {
        	// -- 필수 -------------------//
        	this.gfnFormOnLoad(this);
        	this.gfnFormInfo(this);
        	// ---------------------------//

        	this.fnSetButton();
        	this.fnSetExtendButton();
        	this.fnSetVariable();
        	this.fnSetEvent();
        	this.fnSetParameter();

        	//기준년월 셋팅
        	var today = this.gfnGetDate().substring(0,4);
        	this.divSearch.form.ctclYY_BASE.form.TextBox.set_value(today);

        	//법인 셋팅
        	//this.divSearch.form.ccfCD_CORP.form.CDTextBox.set_value(this.AuthClient.CD_CORP);
        	//this.divSearch.form.ccfCD_CORP.form.DSTextBox.set_value(this.AuthClient.DS_CORP);

        	//작업구분
        	this.divSearch.form.cboTY_GUBUN.set_value('%');

        	//조회
        	this.FormBtns.Select.click();
        };

        /************************************************************************
         * 버튼 설정 : 화면(Tab) 전환시 마다 호출
         * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
         ************************************************************************/
        this.fnSetButton = function() {
        	this.FormBtns.Reset.set_enable(true);
        }

        /************************************************************************
         * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
         ************************************************************************/
        this.fnSetExtendButton = function() {
        	this.btn1 = this.gfnFormButtonAdd("FormButton1", "fnPersonCreate","대상자생성");
        	this.btn2 = this.gfnFormButtonAdd("FormButton2", "fnSalaryApply","급여적용");
        	this.btn3 = this.gfnFormButtonAdd("FormButton3", "fnRetiredAnnualPay","퇴직자연차수당");
        };

        /************************************************************************
         * 변수 선언
         ************************************************************************/
        this.fnSetVariable = function() {
        	this.ctclYY_BASE = this.divSearch.form.ctclYY_BASE;
        	this.ccfCD_CORP = this.divSearch.form.ccfCD_CORP;
        	this.ccfID_SABUN = this.divSearch.form.ccfID_SABUN;
        	this.cboTY_GUBUN = this.divSearch.form.cboTY_GUBUN;

        	this.dxGrid = this.divData.form.objGrid;

        	this.grSearch = this.FormInfo.GR_SEARCH;					          // 권한
        	this.cdGroup = this.AuthClient.CD_GROUP;					          // 그룹코드
        };

        /************************************************************************
         * 이벤트 설정
         ************************************************************************/
        this.fnSetEvent = function() {
        	//법인
        	this.ccfCD_CORP.CodeFindName = "DAX_CFCORP";
        	this.ccfCD_CORP.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
        	this.ccfCD_CORP.AfterCDTextChanged = "fnAfterCDTextChanged";

        	//성명
        	this.ccfID_SABUN.CodeFindName = "DAX_CFBASEINFO_ALL";
        	this.ccfID_SABUN.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
        	this.ccfID_SABUN.AfterCDTextChanged = "fnAfterCDTextChanged";

        	//그리드
        	this.gfnGridInit(this.dxGrid, this.dsList, "DA", "DAC_MGTVACATION_PAY");
        	//그리드 이벤트
        	this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforeUserDataSetParam";
        	this.dxGrid.EnterCell = "fnGrid_EnterCell";
        	this.dxGrid.AfterEdit = "fnGrid_AfterEdit";

        //	var today = this.gfnGetDate().substring(0,6);
        // 	this.divSearch.form.ctclYY_BASE.form.TextBox.set_value(today);
        // 	this.dsSearch.setColumn(0, "YY_BASE", today);

        }

        /************************************************************************
         * 파라미터 설정
         ************************************************************************/
        this.fnSetParameter = function() {

        	//조회
        	this.dsSelect = new Dataset();
        	this.dsSelect.addColumn("YY_BASE", "string");
        	this.dsSelect.addColumn("CD_CORP", "string");
        	this.dsSelect.addColumn("ID_SABUN", "string");
        	this.dsSelect.addColumn("TY_GUBUN", "string");

        	//저장
        	this.dsSave = new Dataset();
        	this.dsSave.addColumn("TY_SAVE", "string");
        	this.dsSave.addColumn("ID_PERSON", "bigdecimal");
        	this.dsSave.addColumn("TY_GUBUN", "string");
        	this.dsSave.addColumn("CD_CORP", "string");
        	this.dsSave.addColumn("CD_DEPT", "string");
        	this.dsSave.addColumn("ID_SABUN", "string");
        	this.dsSave.addColumn("YY_BASE", "string");
        	this.dsSave.addColumn("DT_BASE", "string");
        	this.dsSave.addColumn("QN_TOTAL", "bigdecimal");
        	this.dsSave.addColumn("QN_USEVACA", "bigdecimal");
        	this.dsSave.addColumn("QN_REMAIN", "bigdecimal");
        	this.dsSave.addColumn("QN_YEARLYPAY", "bigdecimal");
        	this.dsSave.addColumn("AM_AVERAGEPAY", "bigdecimal");
        	this.dsSave.addColumn("AM_YEARLYPAY", "bigdecimal");
        	this.dsSave.addColumn("DT_YEARLYPAY", "string");
        	this.dsSave.addColumn("DS_REMARK", "string");
        	this.dsSave.addColumn("ID_INSERT", "string");
        	this.dsSave.addColumn("QN_TOTAL_RET", "bigdecimal");
        	this.dsSave.addColumn("QN_USEVACA_RET", "bigdecimal");
        	this.dsSave.addColumn("QN_REMAIN_RET", "bigdecimal");
        	this.dsSave.addColumn("YN_TARGET", "string");

        };

        /************************************************************************
         * 컨트롤 이벤트
         ************************************************************************/
         /*
          *	조회 버튼
          */
        this.fnSelect = function() {
        	if(!this.fnValidate()) return;

        	this.dsSelect.clearData();
        	this.dsSelect.addRow();
        	this.dsSelect.setColumn(0, "YY_BASE", this.ctclYY_BASE.form.TextBox.value);
        	this.dsSelect.setColumn(0, "CD_CORP", this.ccfCD_CORP.form.CDTextBox.value);
        	this.dsSelect.setColumn(0, "ID_SABUN", this.ccfID_SABUN.form.CDTextBox.value);
        	this.dsSelect.setColumn(0, "TY_GUBUN", this.cboTY_GUBUN.value);

        	var strSvcId    = "select";
        	var strSvcType  = "grid";
        	var inProc		= "_dsProc";
        	var inData      = "select=dsSelect";
        	var outData     = "dsList=select0";
        	var strArg      = "";
        	var callBackFnc = "fnCallback";

        	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
        						strSvcType , 	// trabsaction을 요청할 구분
        						inProc,			// Procedure 정보 Dataset 이름
        						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
        						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
        						callBackFnc); // 통신방법 정의 [생략가능]
        }

        /*
         *	입력 버튼
         */
        this.fnAdd = function() {
        	var nrow = this.gfnGridAdd(this.dxGrid);
        	var tyGubun = this.cboTY_GUBUN.value;
        	if(tyGubun != '%' && tyGubun != ''){
        		this.dsList.setColumn(nrow, "TY_GUBUN", this.cboTY_GUBUN.value);
        	}else{
        		this.dsList.setColumn(nrow, "TY_GUBUN", "G");
        	}
        	this.dsList.setColumn(nrow, "YY_BASE", this.ctclYY_BASE.form.TextBox.value);
        }

        /*
         *	삭제 버튼
         */
        this.fnDel = function() {
        	this.gfnGridDel(this.dxGrid);
        }

        /*
         *	저장 버튼
         */
        this.fnSave = function() {
        // 그리드 필수항목 체크
        	if (!this.gfnGridValidate(this.dxGrid)) return;

        	this.dxGrid.updateToDataset();

        	this.dsSave.clearData();

        	for (var i = 0; i < this.dsList.rowcount; i++) {
        		var flag = this.gfnGetFlag(this.dsList, i);

        		switch(flag) {
        			case "I":
        			case "U":
        			case "D":
        				var nrow = this.dsSave.addRow();

        				this.dsSave.setColumn(nrow, "TY_SAVE", flag);
        				this.dsSave.setColumn(nrow, "ID_PERSON", this.dsList.getColumn(i, "ID_PERSON"));
        				this.dsSave.setColumn(nrow, "TY_GUBUN", this.dsList.getColumn(i, "TY_GUBUN"));
        				this.dsSave.setColumn(nrow, "CD_CORP", this.dsList.getColumn(i, "CD_CORP"));
        				this.dsSave.setColumn(nrow, "CD_DEPT", this.dsList.getColumn(i, "CD_DEPT"));
        				this.dsSave.setColumn(nrow, "ID_SABUN", this.dsList.getColumn(i, "ID_SABUN"));
        				this.dsSave.setColumn(nrow, "YY_BASE", this.dsList.getColumn(i, "YY_BASE"));
        				this.dsSave.setColumn(nrow, "DT_BASE", this.dsList.getColumn(i, "DT_BASE"));
        				this.dsSave.setColumn(nrow, "QN_TOTAL", this.dsList.getColumn(i, "QN_TOTAL"));
        				this.dsSave.setColumn(nrow, "QN_USEVACA", this.dsList.getColumn(i, "QN_USEVACA"));
        				this.dsSave.setColumn(nrow, "QN_REMAIN", this.dsList.getColumn(i, "QN_REMAIN"));
        				this.dsSave.setColumn(nrow, "QN_YEARLYPAY", this.dsList.getColumn(i, "QN_YEARLYPAY"));
        				this.dsSave.setColumn(nrow, "AM_AVERAGEPAY", this.dsList.getColumn(i, "AM_AVERAGEPAY"));
        				this.dsSave.setColumn(nrow, "AM_YEARLYPAY", this.dsList.getColumn(i, "AM_YEARLYPAY"));
        				this.dsSave.setColumn(nrow, "DT_YEARLYPAY", this.dsList.getColumn(i, "DT_YEARLYPAY"));
        				this.dsSave.setColumn(nrow, "DS_REMARK", this.dsList.getColumn(i, "DS_REMARK"));
        				this.dsSave.setColumn(nrow, "ID_INSERT", this.AuthClient.ID_USER);
        				this.dsSave.setColumn(nrow, "QN_TOTAL_RET", this.dsList.getColumn(i, "QN_TOTAL_RET"));
        				this.dsSave.setColumn(nrow, "QN_USEVACA_RET", this.dsList.getColumn(i, "QN_USEVACA_RET"));
        				this.dsSave.setColumn(nrow, "QN_REMAIN_RET", this.dsList.getColumn(i, "QN_REMAIN_RET"));
        				this.dsSave.setColumn(nrow, "YN_TARGET", this.dsList.getColumn(i, "YN_TARGET"));

        				break;

        			default:

        		}
        	}

        	if (this.dsSave.rowcount == 0) return;

        	var strSvcId    = "save";
        	var strSvcType  = "save";
        	var inProc		= "_dsProc";
        	var inData      = "save=dsSave";
        	var outData     = "";
        	var strArg      = "";
        	var callBackFnc = "fnCallback";

        	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
        						strSvcType , 	// transaction을 요청할 구분
        						inProc,			// Procedure 정보 Dataset 이름
        						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
        						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
        						callBackFnc); // 통신방법 정의 [생략가능]
        }

        /*
         *	엑셀 버튼
         */
        this.fnExcel = function() {
        	this.gfnExcelExport(this.dxGrid);
        }

        /*
         *	출력 버튼
         */
        this.fnPrint = function() {
        }

        /*
         *	초기화 버튼
         */
        this.fnReset = function() {
        	this.dsSearch.clearData();
        	this.dsSearch.addRow();

         	this.ccfCD_CORP.form.DSTextBox.set_value("");
         	this.ccfID_SABUN.form.DSTextBox.set_value("");
         	this.cboTY_GUBUN.set_index(0);
        }

        /************************************************************************
         * Validate
         ************************************************************************/
        /*
         *	조회 Validate
         */
        this.fnValidate = function() {

        // 	if (this.gfnIsNull(this.ccfCD_CORP.form.CDTextBox.value)) {
        // 		this.ccfCD_CORP.form.CDTextBox.setFocus();
        // 		this.gfnAlert("법인코드를 입력하세요.");
        // 		return false;
        // 	}

        	if (this.gfnIsNull(this.ctclYY_BASE.form.TextBox.value)) {
        		this.ctclYY_BASE.form.TextBox.setFocus();
        		this.gfnAlert("대상년도를 입력하세요.");
        		return false;
        	}

        	return true;
        };

        /************************************************************************
         * 콜백 이벤트
         ************************************************************************/
        /*
         *	콜백 처리
         */
        this.fnCallback = function(svcID, errorCode, errorMsg)
        {
        	this.FormBtns.Reset.set_enable(true);

        	if (svcID == "select") {
        		this.gfnGridAfterSelect(this.dxGrid);
        	}
        	else if(svcID == "save") {
        		if (errorCode == 0) {
        			this.gfnAlert("작업이 완료되었습니다.");
        			this.FormBtns.Select.click();
        		} else {
        			this.gfnAlert(errorMsg);
        		}
        	}
        }

        /************************************************************************
         * 코드파인드 이벤트
         ************************************************************************/
        this.fnAfterCDTextChanged = function(id) {
        	this.fnSearchInit();
        }

        this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
        	trace("코드파인드_식별id:" + id);
        	switch(id) {
        		case "ccfCD_CORP":	//법인
        			//(this.ccfCD_CORP.CodeFindName = "DAX_CFCORP2" 일경우) 아래 파라미터 사용
        			//dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
        			//dsUserParam.setColumn(nrow, "CD_DEPT", this.AuthClient.CD_DEPT);
        			break;

        		case "ccfID_SABUN":
        			dsUserParam.setColumn(nrow, "CD_CORP", this.gfnIsNull(this.gfnTrim(this.ccfCD_CORP.form.CDTextBox.value)) ? "%" : this.gfnTrim(this.ccfCD_CORP.form.CDTextBox.value));
        			dsUserParam.setColumn(nrow, "GR_SEARCH",this.FormInfo.GR_SEARCH);
        			dsUserParam.setColumn(nrow, "CD_DEPT", this.AuthClient.CD_DEPT);
        			dsUserParam.setColumn(nrow, "TY_RETIRE", "%");
        			dsUserParam.setColumn(nrow, "YN_CORP", "N");
        			break;

        		default:
        	}
        	return true;
        }

        /************************************************************************
         * 그리드 이벤트
         ************************************************************************/
        this.fnGrid_BeforeUserDataSetParam = function(id, dsUserParam, nrow){
        	trace('grid_코드파인드_식별id: ' + id);

        	switch(id) {
        		case "ID_SABUN":     // DAX_CFBASEINFO
        			if(this.dsList.getColumn(this.dsList.rowposition, "TY_GUBUN") == "G") {	//계속근무
        				dsUserParam.setColumn(nrow, "CD_CORP", "%");
        				dsUserParam.setColumn(nrow, "GR_SEARCH",this.FormInfo.GR_SEARCH);
        				dsUserParam.setColumn(nrow, "CD_DEPT", this.AuthClient.CD_DEPT);
        				dsUserParam.setColumn(nrow, "TY_RETIRE", "%");
        				dsUserParam.setColumn(nrow, "YN_CORP", "N");
        			}else if(this.dsList.getColumn(this.dsList.rowposition, "TY_GUBUN") == "T"){
        				dsUserParam.setColumn(nrow, "CD_CORP", "%");
        				dsUserParam.setColumn(nrow, "GR_SEARCH",this.FormInfo.GR_SEARCH);
        				dsUserParam.setColumn(nrow, "CD_DEPT", this.AuthClient.CD_DEPT);
        				dsUserParam.setColumn(nrow, "TY_RETIRE", "04");
        				dsUserParam.setColumn(nrow, "YN_CORP", "N");
        			}else{
        				dsUserParam.setColumn(nrow, "CD_CORP", "%");
        				dsUserParam.setColumn(nrow, "GR_SEARCH",this.FormInfo.GR_SEARCH);
        				dsUserParam.setColumn(nrow, "CD_DEPT", this.AuthClient.CD_DEPT);
        				dsUserParam.setColumn(nrow, "TY_RETIRE", "%");
        				dsUserParam.setColumn(nrow, "YN_CORP", "N");
        			}
        		break;

        		case "CD_POSITION":	//직위
        			 dsUserParam.setColumn(nrow, "CD_PREFIX", 'ED'); // 직위
        		break;

        		default:
        	}

        	return true;
        };


         // 셀 수정가능 여부 (반드시 EnterCell에서 처리할것)
        this.fnGrid_EnterCell = function(obj, row, cell) {
        	var colnm = this.gfnGridGetBindColumnNameByIndex(obj, cell);
        	var rowFlag = this.gfnGetFlag(this.dsList, row);
        	trace(rowFlag);
        	if (rowFlag != "#" && rowFlag != "I"  && (this.dsList.getColumn(row, "YN_CLOSE") == "Y")) { // 마감했으면
        		if(colnm == "YN_TARGET"){
        			return false;
        		}
        	}


        	// 공통 > Setting > 그리드정보 에서 셋팅한 내용대로
        	nGrdSpcRow = this.dsGridSpec.findRow( "DS_FIELD", colnm);
        	//if(this.dsGridSpec.getColumn(nGrdSpcRow, "YN_READONLY") == "Y" || (rowFlag != "#" && rowFlag != "I"  && this.dsGridSpec.getColumn(nGrdSpcRow, "YN_READONLY") == "U")){
        	if(this.dsGridSpec.getColumn(nGrdSpcRow, "YN_READONLY") == "Y"){
        		return false;
        	}

        	if(rowFlag != "#" && rowFlag != "I"){
        		if(colnm == "ID_SABUN" || colum == "YY_BASE"){
        			return false;
        		}
        	}

        	return true;
        }

        this.fnGrid_AfterEdit = function(obj,e) {
        	if(e.columnid == "QN_YEARLYPAY" || e.columnid == "AM_AVERAGEPAY") { // 수당연차 또는 통상임금 변경 시
        		this.dsList.setColumn(e.row, "AM_YEARLYPAY", 0); // 연차수당 = 0
        	}
        }
        /************************************************************************
         * 기타 이벤트
         ************************************************************************/
        /*
         *	조회 조건 변경시 초기화
         */
        this.fnSearchInit = function(obj,e) {

        	if(e == null || e.pretext != e.posttext) {
        		// 폼상태 초기화
        		this.gfnSetFormStatus(this);
        		this.gfnGridClear(this.dxGrid);
        	}
        };

        this.dsSearch_onvaluechanged = function(obj,e)
        {
        	if(e.oldvalue != e.newvalue) {
        		this.gfnSetFormStatus(this);	// 폼상태 초기화
        		this.gfnGridClear(this.dxGrid);
        	}
        };

        // 대상자생성
        this.fnPersonCreate = function(obj,e) {
        	//if(!this.gfnGridIsRow(this.dxGrid)) return;
        	var param = {};
        	param.YY_BASE = this.ctclYY_BASE.form.TextBox.value;
        	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DAC_MGTVACATION_PAY_DLG1", "fnPopupCallback", param, 320, 340);
        }

        // 급여적용
        this.fnSalaryApply = function(obj,e) {
        	// TODO 대상자생성 기능 추가
        	//if(!this.gfnGridIsRow(this.dxGrid)) return;
        	var param = {};
        	param.YY_BASE = this.ctclYY_BASE.form.TextBox.value;
        	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DAC_MGTVACATION_PAY_DLG2", "fnPopupCallback", param, 330, 290);
        }

        // 퇴직자연차수당
        this.fnRetiredAnnualPay = function(obj,e) {
        	//if(!this.gfnGridIsRow(this.dxGrid)) return;
        	var param = {};
        	param.YY_BASE = this.ctclYY_BASE.form.TextBox.value;
        	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DAC_MGTVACATION_PAY_DLG3", "fnPopupCallback", param, 330, 260);
        }

        this.fnPopupCallback = function (svcID, val)
        {
        	if(val){
        		if(svcID.indexOf("DAC_MGTVACATION_PAY_DLG1") > -1){
        			this.fnAlertCallback = function() {
        				this.FormBtns.Select.click();
        			}
        			this.gfnAlert("작업이 완료 되었습니다.","fnAlertCallback");
        		}else{

        			this.FormBtns.Select.click();
        		}
        	}
        };
        });
        
        // Regist UI Components Event
        this.on_initEvent = function()
        {
            this.addEventHandler("onload",this.form_onload,this);
            this.divSearch.form.cboTY_GUBUN.addEventHandler("onitemchanged",this.fnSearchInit,this);
            this.dsSearch.addEventHandler("onvaluechanged",this.dsSearch_onvaluechanged,this);
        };
        this.loadIncludeScript("DAC_MGTVACATION_PAY.xfdl");
        this.loadPreloadList();
        
        // Remove Reference
        obj = null;
    };
}
)();
