<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="form" width="1280" height="720" titletext="연차 수당관리" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" left="0" top="0" height="78" right="0" cssclass="div_SEARCH_Bg" formscrolltype="none" text="" taborder="0">
          <Layouts>
            <Layout>
              <Static id="staYY_BASE" text="생성기준년도" left="0" top="10" width="118" height="25" taborder="6" cssclass="sta_WF_SchLabelE"/>
              <Div id="ctclYY_BASE" taborder="0" left="staYY_BASE:0" top="10" width="66" height="25" url="cmm::cmmCalYY.xfdl" enableevent="true" text="2019"/>
              <Static id="staCD_CORP" taborder="8" text="법인" left="0" top="42" width="118" height="25" onclick="Common_onclick" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfCD_CORP" CodeFindName="DAX_CFCORP" CDTextWidth="50" FitToContents="true" taborder="3" left="staCD_CORP:0" top="42" width="200" height="25" url="cmm::cmmCodeFind.xfdl"/>
              <Static id="staTY_GUBUN" taborder="7" text="작업구분" left="ctclYY_BASE:134" top="10" width="92" height="25" onclick="Common_onclick" cssclass="sta_WF_SchLabel"/>
              <Combo id="ccboTY_GUBUN" taborder="1" text="전체" left="staTY_GUBUN:0" top="10" width="90" height="25" innerdataset="dsTY_GUBUN" codecolumn="CODE" datacolumn="VALUE" index="0" value="%"/>
              <Static id="staCD_DEPT" taborder="9" text="부서" left="ccfCD_CORP:0" top="42" width="92" height="25" onclick="Common_onclick" cssclass="sta_WF_SchLabel"/>
              <Div id="ccfCD_DEPT" CodeFindName="DAX_CFDEPT" CDTextWidth="80" FitToContents="true" taborder="4" left="staCD_DEPT:0" top="42" width="250" height="25" url="cmm::cmmCodeFind.xfdl"/>
              <Static id="staSABUN" text="사번" left="ccfCD_DEPT:0" top="42" width="66" height="25" taborder="10" cssclass="sta_WF_SchLabel"/>
              <Div id="ccfID_SABUN" CodeFindName="DAX_CFBASEINFO_ALL" CDTextWidth="90" FitToContents="true" taborder="5" left="staSABUN:0" top="42" width="200" height="25" url="cmm::cmmCodeFind.xfdl"/>
              <Radio id="crdoSN_GUBUN" taborder="2" left="ccboTY_GUBUN:15" top="10" width="156" height="26" direction="vertical" fittocontents="width" innerdataset="innerdataset" codecolumn="codecolumn" datacolumn="datacolumn" visible="false">
                <Dataset id="innerdataset">
                  <ColumnInfo>
                    <Column id="codecolumn" size="256"/>
                    <Column id="datacolumn" size="256"/>
                  </ColumnInfo>
                  <Rows>
                    <Row>
                      <Col id="codecolumn">1</Col>
                      <Col id="datacolumn">1차</Col>
                    </Row>
                    <Row>
                      <Col id="codecolumn">2</Col>
                      <Col id="datacolumn">2차</Col>
                    </Row>
                    <Row>
                      <Col id="codecolumn">3</Col>
                      <Col id="datacolumn">3차</Col>
                    </Row>
                  </Rows>
                </Dataset>
              </Radio>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="1" left="0" top="divSearch:20" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0" oncelldblclick="fnGrid_oncelldblclick"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Objects>
      <Dataset id="dsSearch">
        <ColumnInfo>
          <Column id="YY_BASE" type="STRING" size="256"/>
          <Column id="TY_GUBUN" type="STRING" size="256"/>
          <Column id="SN_GUBUN" type="STRING" size="256"/>
          <Column id="CD_CORP" type="STRING" size="256"/>
          <Column id="DS_CORP" type="STRING" size="256"/>
          <Column id="CD_DEPT" type="STRING" size="256"/>
          <Column id="DS_DEPT" type="STRING" size="256"/>
          <Column id="ID_SABUN" type="STRING" size="256"/>
          <Column id="DS_HNAME" type="STRING" size="256"/>
          <Column id="ID_PERSON" type="INT" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="YY_BASE"/>
            <Col id="TY_GUBUN"/>
            <Col id="CD_CORP"/>
            <Col id="DS_CORP"/>
            <Col id="CD_DEPT"/>
            <Col id="DS_DEPT"/>
            <Col id="ID_SABUN"/>
            <Col id="DS_HNAME"/>
            <Col id="ID_PERSON"/>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DACPR_MGTVACA_PAY_SELECT</Col>
          </Row>
          <Row>
            <Col id="SP">DACPR_MGTVACA_PAY_SAVE</Col>
            <Col id="TARGET">save</Col>
          </Row>
          <Row>
            <Col id="TARGET">aprv_execute</Col>
            <Col id="SP">DACPR_MGTVACATION_PAY_APRV_EXECUTE</Col>
          </Row>
          <Row>
            <Col id="TARGET">slipDelete</Col>
            <Col id="SP">DACPR_MGTVACA_PAY_AUTOSLIP_CANCEL</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsTY_GUBUN">
        <ColumnInfo>
          <Column id="CODE" type="STRING" size="256"/>
          <Column id="VALUE" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CODE">%</Col>
            <Col id="VALUE">전체</Col>
          </Row>
          <Row>
            <Col id="CODE">G</Col>
            <Col id="VALUE">재직자</Col>
          </Row>
          <Row>
            <Col id="CODE">T</Col>
            <Col id="VALUE">퇴직자</Col>
          </Row>
        </Rows>
      </Dataset>
    </Objects>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();	
	this.fnSetExtendButtonEnable(false);
	this.fnSetInit();
};   

/************************************************************************
 * 버튼 설정   
 * 서브버튼 사용 처리. 공통 및 확장버튼 버튼관리화면에서 셋팅.
 ************************************************************************/
this.fnSetButton = function() {
};

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
	// 대상자생성
	this.btnPersonCreate 	= this.gfnFormButtonAdd("PersonCreate", "fnPersonCreate");  // 대상자생성		
	// 연차품의
	this.btnAprv 			= this.gfnFormButtonAdd("btnAprv"   , "fnAprv");			// 결재상신 버튼
	this.btnAprvCnc			= this.gfnFormButtonAdd("btnAprvCnc", "fnAprvCnc");			// 지급품의 취소 버튼
	this.btnDocQ    		= this.gfnFormButtonAdd("btnDocQ"   , "fnAprvDocQ");		// 결재문서조회 버튼
	this.btnInit    		= this.gfnFormButtonAdd("btnInit"   , "fnAprvInit");		// 결재상태초기화 버튼
	// 자동전표
	this.btnSlip			= this.gfnFormButtonAdd("btnSlip"	, "fnExtBtnEvent");		// 전표발행
	this.btnSlipCnc			= this.gfnFormButtonAdd("btnSlipCnc", "fnExtBtnEvent");		// 전표취소
	this.btnSlipQ			= this.gfnFormButtonAdd("btnSlipQ"	, "fnExtBtnEvent");		// 전표조회
	// 급여적용
	this.btnSalaryApply   	= this.gfnFormButtonAdd("SalaryApply"  , "fnSalaryApply");	 // 급여적용
	this.btnSalaryApply_C 	= this.gfnFormButtonAdd("SalaryApply_C", "fnSalaryApply");	 // 적용취소
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.ctclYY_BASE = this.divSearch.form.ctclYY_BASE;
	this.ccboTY_GUBUN = this.divSearch.form.ccboTY_GUBUN; 
	this.crdoSN_GUBUN = this.divSearch.form.crdoSN_GUBUN; 
	this.ccfCD_CORP = this.divSearch.form.ccfCD_CORP;
	this.ccfCD_DEPT = this.divSearch.form.ccfCD_DEPT;
	this.ccfID_SABUN = this.divSearch.form.ccfID_SABUN;
	
	this.dxGrid = this.divData.form.objGrid;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {	
	
	//그리드
	this.gfnGridInit(this.dxGrid, this.dsList, "DA", "DAC_MGTVACATION_PAY");
	this.selGrid = 1;
	//그리드 이벤트
	this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforeUserDataSetParam";
	this.dxGrid.EnterCell = "fnGrid_EnterCell";
	this.dxGrid.AfterEdit = "fnGrid_AfterEdit";
	this.dxGrid.setFormatRowProperty(0, "size", 38);
	this.dxGrid.setFormatRowProperty(1, "size", 38);
	
	this.dsList.addEventHandler("onrowposchanged", this.dsList_Rowposchanged, this);
	
	//법인
	this.ccfCD_CORP.AfterCDTextChanged = "fnAfterCDTextChanged";
	//부서
	this.ccfCD_DEPT.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.ccfCD_DEPT.AfterCDTextChanged = "fnAfterCDTextChanged";
	//성명	
	this.ccfID_SABUN.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.ccfID_SABUN.AfterCDTextChanged = "fnAfterCDTextChanged";
	
	this.bSelect = false;
	this.dsSearch.addEventHandler("onvaluechanged", this.dsSearch_onvaluechanged, this);
	
};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	
	//조회
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("YY_BASE" , "string");
	this.dsSelect.addColumn("TY_GUBUN", "string");
	this.dsSelect.addColumn("SN_GUBUN", "int");
	this.dsSelect.addColumn("CD_CORP" , "string");
	this.dsSelect.addColumn("CD_DEPT" , "string");
	this.dsSelect.addColumn("ID_SABUN", "string");

	//저장
	this.dsSave = new Dataset();
	this.dsSave.addColumn("TY_WRK"          , "string");
	this.dsSave.addColumn("TY_GUBUN"        , "string");
	this.dsSave.addColumn("SN_GUBUN"        , "int");
	this.dsSave.addColumn("CD_CORP"         , "string");
	this.dsSave.addColumn("CD_DEPT"         , "string");
	this.dsSave.addColumn("ID_PERSON"       , "int");
	this.dsSave.addColumn("ID_SABUN"        , "string");
	this.dsSave.addColumn("YY_BASE"         , "string");
	this.dsSave.addColumn("AM_AVERAGEPAY"   , "bigdecimal");
	this.dsSave.addColumn("QN_PAY"          , "bigdecimal");
	this.dsSave.addColumn("AM_PAY"          , "bigdecimal");
	this.dsSave.addColumn("QN_PAY_RETIRE"   , "bigdecimal");
	this.dsSave.addColumn("AM_PAY_RETIRE"   , "bigdecimal");
	this.dsSave.addColumn("QN_TOTAL"        , "bigdecimal");
	this.dsSave.addColumn("QN_USEVACA"      , "bigdecimal");
	this.dsSave.addColumn("QN_REMAIN"       , "bigdecimal");
	this.dsSave.addColumn("QN_YEARLYPAY"    , "bigdecimal");
	this.dsSave.addColumn("AM_YEARLYPAY"    , "bigdecimal");
	this.dsSave.addColumn("QN_TOTAL_IPSA"    , "bigdecimal");
	this.dsSave.addColumn("QN_USEVACA_IPSA"  , "bigdecimal");
	this.dsSave.addColumn("QN_REMAIN_IPSA"   , "bigdecimal");
	this.dsSave.addColumn("QN_YEARLYPAY_IPSA", "bigdecimal");
	this.dsSave.addColumn("AM_YEARLYPAY_IPSA", "bigdecimal");
	this.dsSave.addColumn("DT_YEARLYPAY"    , "string");
	this.dsSave.addColumn("DS_REMARK"       , "string");
	this.dsSave.addColumn("YN_TARGET"       , "string");
	this.dsSave.addColumn("ID_INSERT"       , "string");
	
	// 결재
	this.dsApproval = new Dataset();
	this.dsApproval.addColumn("TY_WRK", "string");
	this.dsApproval.addColumn("CD_CORP", "string");
	this.dsApproval.addColumn("YY_BASE", "string");
	this.dsApproval.addColumn("TY_GUBUN", "string");
	this.dsApproval.addColumn("SN_GUBUN", "int");
	this.dsApproval.addColumn("ID_SABUN", "string");
	this.dsApproval.addColumn("ID_APRV", "string");
	this.dsApproval.addColumn("NO_APRV", "int");
	
	// 전표
	this.dsSlip = new Dataset();
	this.dsSlip.addColumn("CD_CORP", "string");
	this.dsSlip.addColumn("YY_BASE", "string");	
	this.dsSlip.addColumn("CD_TRADE", "string");
	this.dsSlip.addColumn("CD_DEPT_BH", "string");
	this.dsSlip.addColumn("ID_USER", "string");
	
};

/************************************************************************
 * 초기화 이벤트
 ************************************************************************/
this.fnSetInit = function ()
{
	//기준년월, 작업구분 셋팅
	this.dsSearch.setColumn(0,"TY_GUBUN","%");
	this.dsSearch.setColumn(0,"SN_GUBUN","");
	this.dsSearch.setColumn(0,"YY_BASE",this.gfnGetDate().substr(0,4));
	this.dsSearch.setColumn(0,"CD_CORP",this.AuthClient.CD_CORP);
	this.dsSearch.setColumn(0,"DS_CORP",this.AuthClient.DS_CORP);
	this.FormBtns.Select.click();
	this.bSelect = true;
};
/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if(!this.fnValidate()) return;
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	this.dsSelect.setColumn(0, "YY_BASE"  , this.dsSearch.getColumn(0, "YY_BASE"));
	this.dsSelect.setColumn(0, "SN_GUBUN" , this.dsSearch.getColumn(0, "SN_GUBUN"));
	this.dsSelect.setColumn(0, "TY_GUBUN" , this.dsSearch.getColumn(0, "TY_GUBUN"));
	this.dsSelect.setColumn(0, "CD_CORP"  , this.dsSearch.getColumn(0, "CD_CORP"));
	this.dsSelect.setColumn(0, "CD_DEPT"  , this.dsSearch.getColumn(0, "CD_DEPT"));
	this.dsSelect.setColumn(0, "ID_SABUN" , this.dsSearch.getColumn(0, "ID_SABUN"));
	

	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// trabsaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	var nrow = this.gfnGridAdd(this.dxGrid); 
	var tyGubun = this.dsSearch.getColumn(0, "TY_GUBUN");
	
	if(tyGubun != '%' && tyGubun != ''){
		this.dsList.setColumn(nrow, "TY_GUBUN", tyGubun);
	}else{
		this.dsList.setColumn(nrow, "TY_GUBUN", "G");
	}
	
	this.dsList.setColumn(nrow, "YY_BASE", this.dsSearch.getColumn(0, "YY_BASE"));
}	

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}

/*
 *	저장 버튼
 */
this.fnSave = function() {
// 그리드 필수항목 체크
	if (!this.gfnGridValidate(this.dxGrid)) return;	

	this.dxGrid.updateToDataset();
	
	this.dsSave.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		
		switch(flag) {
			case "I":
			case "U":
			case "D":
				var nrow = 0;
				if( flag == "D" ){
					nrow = this.dsSave.insertRow(0);
				} else {
					nrow = this.dsSave.addRow();
				}
				
				this.dsSave.setColumn(nrow, "TY_WRK"           , flag);
				this.dsSave.setColumn(nrow, "TY_GUBUN"         , this.dsList.getColumn(i, "TY_GUBUN"));
				if( flag == "I" ){
					if( this.dsList.getColumn(i, "TY_GUBUN") == "T" ) {
						this.dsSave.setColumn(nrow, "SN_GUBUN" , "");					
					} else if( this.dsList.getColumn(i, "TY_GUBUN") == "G" ) {
						this.dsSave.setColumn(nrow, "SN_GUBUN" , this.selGrid);
					}
				} else {
					this.dsSave.setColumn(nrow, "SN_GUBUN"         , this.dsList.getColumn(i, "SN_GUBUN"));
				}
				this.dsSave.setColumn(nrow, "CD_CORP"          , this.dsList.getColumn(i, "CD_CORP"));
				this.dsSave.setColumn(nrow, "CD_DEPT"          , this.dsList.getColumn(i, "CD_DEPT"));
				this.dsSave.setColumn(nrow, "ID_PERSON"        , this.dsList.getColumn(i, "ID_PERSON"));
				this.dsSave.setColumn(nrow, "ID_SABUN"         , this.dsList.getColumn(i, "ID_SABUN"));
				this.dsSave.setColumn(nrow, "YY_BASE"          , this.dsSearch.getColumn(0, "YY_BASE"));
				this.dsSave.setColumn(nrow, "AM_AVERAGEPAY"    , this.dsList.getColumn(i, "AM_AVERAGEPAY"));
				this.dsSave.setColumn(nrow, "QN_PAY"           , this.dsList.getColumn(i, "QN_PAY"));
				this.dsSave.setColumn(nrow, "AM_PAY"           , this.dsList.getColumn(i, "AM_PAY"));
				this.dsSave.setColumn(nrow, "QN_PAY_RETIRE"    , this.dsList.getColumn(i, "QN_PAY_RETIRE"));
				this.dsSave.setColumn(nrow, "AM_PAY_RETIRE"    , this.dsList.getColumn(i, "AM_PAY_RETIRE"));
				this.dsSave.setColumn(nrow, "QN_TOTAL"         , this.dsList.getColumn(i, "QN_TOTAL"));
				this.dsSave.setColumn(nrow, "QN_USEVACA"       , this.dsList.getColumn(i, "QN_USEVACA"));
				this.dsSave.setColumn(nrow, "QN_REMAIN"        , this.dsList.getColumn(i, "QN_REMAIN"));
				this.dsSave.setColumn(nrow, "QN_YEARLYPAY"     , this.dsList.getColumn(i, "QN_YEARLYPAY"));
				this.dsSave.setColumn(nrow, "AM_YEARLYPAY"     , this.dsList.getColumn(i, "AM_YEARLYPAY"));
				this.dsSave.setColumn(nrow, "QN_TOTAL_IPSA"    , this.dsList.getColumn(i, "QN_TOTAL_IPSA"));
				this.dsSave.setColumn(nrow, "QN_USEVACA_IPSA"  , this.dsList.getColumn(i, "QN_USEVACA_IPSA"));
				this.dsSave.setColumn(nrow, "QN_REMAIN_IPSA"   , this.dsList.getColumn(i, "QN_REMAIN_IPSA"));
				this.dsSave.setColumn(nrow, "QN_YEARLYPAY_IPSA", this.dsList.getColumn(i, "QN_YEARLYPAY_IPSA"));
				this.dsSave.setColumn(nrow, "AM_YEARLYPAY_IPSA", this.dsList.getColumn(i, "AM_YEARLYPAY_IPSA"));
				this.dsSave.setColumn(nrow, "DT_YEARLYPAY"     , this.dsList.getColumn(i, "DT_YEARLYPAY"));
				this.dsSave.setColumn(nrow, "DS_REMARK"        , this.dsList.getColumn(i, "DS_REMARK"));
				this.dsSave.setColumn(nrow, "YN_TARGET"        , this.dsList.getColumn(i, "YN_TARGET"));
				this.dsSave.setColumn(nrow, "ID_INSERT"        , this.AuthClient.ID_USER);
				
				break;
			
			default:

		}
	}
	
	if (this.dsSave.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "save=dsSave";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
};

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnValidate = function() {
	var validate = true;  
	if (validate && this.gfnIsNull(this.dsSearch.getColumn(0, "YY_BASE"))) {
		validate = false;
		this.ctclYY_BASE.form.TextBox.setFocus();
		this.gfnAlert("대상년도를 입력하세요.");
		return false;
	}
	
	 if (validate && this.gfnIsNull(this.dsSearch.getColumn(0, "CD_CORP"))) {
 		this.ccfCD_CORP.form.CDTextBox.setFocus();
 		this.gfnAlert("법인코드를 입력하세요.");
 		return false;
 	}

	return true;
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (errorCode != 0) {
		this.gfnAlert(errorMsg);
	}
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);	
		this.fnSetExtendButtonEnable();
	}
	else if(svcID == "save" || svcID == "APRVCNC" || svcID == "APRVINIT") {
		this.FormBtns.Select.click();
	} 
	else if (svcID == "APRV") {	// || svcID == "APRVCNC") {
		this.gfnOpenAppr(function() {
			this.FormBtns.Select.click();
		});
	}
	else if(svcID == "slipDelete"){
		if (errorCode == 0) {	
			this.gfnAlert("전표가 취소되었습니다.");	
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}	
	}  
}

// 결재상신 버튼 콜백
// 취소결재상신 버튼 콜백
// 결재상태초기화 버튼 콜백
this.fnAprvCallback = function(strId, val) {
	if(val) {
		this.dsApproval.clearData();
		this.dsApproval.addRow();
		
		this.dsApproval.setColumn(0, "TY_WRK",  strId);
		this.dsApproval.setColumn(0, "TY_GUBUN", this.dsList.getColumn(this.dsList.rowposition, "TY_GUBUN"));
		this.dsApproval.setColumn(0, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
		this.dsApproval.setColumn(0, "YY_BASE"	, this.dsList.getColumn(this.dsList.rowposition, "YY_BASE"));
		this.dsApproval.setColumn(0, "ID_APRV", this.AuthClient.ID_SABUN);
		if (strId == "APRV") {	// || strId == "APRVCNC") {
			this.dsApproval.setColumn(0, "NO_APRV", this.dsAprvOut.getColumn(0, "NO_APRV"));
		} else {
			this.dsApproval.setColumn(0, "NO_APRV", this.dsList.getColumn(this.dsList.rowposition, "NO_APRV"));
		}
			
		var strSvcId    = strId;
		var strSvcType  = "save";
		var inProc		= "_dsProc";
		var inData      = "aprv_execute=dsApproval";
		var outData     = "";
		var strArg      = "";
		var callBackFnc = "fnCallback";
		
		this.gfnTransaction(strSvcId,		// transaction을 구분하기 위한 svc id값
							strSvcType, 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData, 		// 입력값으로 보낼 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							outData, 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
							callBackFnc);	// 통신방법 정의 [생략가능]
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
		
	if (id == "ccfCD_DEPT") {
		if(this.gfnIsNull(this.dsSearch.getColumn(0, "CD_CORP"))) {
			this.gfnAlert("법인코드를 먼저 입력하세요.");
			return false;
		}

		dsUserParam.setColumn(nrow, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
	}
	
	if (id == "ccfID_SABUN") {
		dsUserParam.setColumn(nrow, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
		dsUserParam.setColumn(nrow, "CD_DEPT", this.dsSearch.getColumn(0, "CD_DEPT"));
		dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
		dsUserParam.setColumn(nrow, "YN_CORP", "N");
		dsUserParam.setColumn(nrow, "TY_RETIRE","%");
	}
	
	return true;
};

this.fnAfterCDTextChanged = function(id, codeFindData) {
	var arr = codeFindData; 
	
	if(id == "ccfCD_CORP"){
		if(arr.length > 0) {
			this.dsSearch.setColumn(0,"CD_DEPT","");
			this.dsSearch.setColumn(0,"DS_DEPT","");
			this.dsSearch.setColumn(0,"ID_SABUN","");
			this.dsSearch.setColumn(0,"DS_HNAME","");
			this.dsSearch.setColumn(0,"ID_PERSON","");	
		}
	}else if(id == "ccfCD_DEPT" ){
		if(arr.length > 0) {
			this.dsSearch.setColumn(0,"ID_SABUN","");
			this.dsSearch.setColumn(0,"DS_HNAME","");
			this.dsSearch.setColumn(0,"ID_PERSON","");	
		}
	}else if(id == "ccfID_SABUN") {
		if(arr.length > 0) {
			this.dsSearch.setColumn(0,"CD_CORP",arr[0]["CD_CORP"]);
			this.dsSearch.setColumn(0,"DS_CORP",arr[0]["DS_CORP"]);
			this.dsSearch.setColumn(0,"CD_DEPT",arr[0]["CD_DEPT"]);
			this.dsSearch.setColumn(0,"DS_DEPT",arr[0]["DS_DEPT"]);
			this.dsSearch.setColumn(0,"ID_SABUN",arr[0]["ID_SABUN"]);
			this.dsSearch.setColumn(0,"DS_HNAME",arr[0]["DS_HNAME"]);
			this.dsSearch.setColumn(0,"ID_PERSON",arr[0]["ID_PERSON"]);
		}
	}
};
 
/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
this.fnGrid_BeforeUserDataSetParam = function(id, dsUserParam, nrow){
	trace('grid_코드파인드_식별id: ' + id); 
	
	switch(id) {	
		case "ID_SABUN":     // DAX_CFBASEINFO 
			if(this.dsList.getColumn(this.dsList.rowposition, "TY_GUBUN") == "G") {	//계속근무
				dsUserParam.setColumn(nrow, "CD_CORP", "%");
				dsUserParam.setColumn(nrow, "GR_SEARCH",this.FormInfo.GR_SEARCH);
				dsUserParam.setColumn(nrow, "CD_DEPT", this.AuthClient.CD_DEPT);
				dsUserParam.setColumn(nrow, "TY_RETIRE", "%");
				dsUserParam.setColumn(nrow, "YN_CORP", "N");
			}else if(this.dsList.getColumn(this.dsList.rowposition, "TY_GUBUN") == "T"){
				dsUserParam.setColumn(nrow, "CD_CORP", "%");
				dsUserParam.setColumn(nrow, "GR_SEARCH",this.FormInfo.GR_SEARCH);
				dsUserParam.setColumn(nrow, "CD_DEPT", this.AuthClient.CD_DEPT);
				dsUserParam.setColumn(nrow, "TY_RETIRE", "04");
				dsUserParam.setColumn(nrow, "YN_CORP", "N");
			}else{
				dsUserParam.setColumn(nrow, "CD_CORP", "%");
				dsUserParam.setColumn(nrow, "GR_SEARCH",this.FormInfo.GR_SEARCH);
				dsUserParam.setColumn(nrow, "CD_DEPT", this.AuthClient.CD_DEPT);
				dsUserParam.setColumn(nrow, "TY_RETIRE", "%");
				dsUserParam.setColumn(nrow, "YN_CORP", "N");	
			}
		break;	

		default:
	}		
	
	return true;
};
 
 
 // 셀 수정가능 여부 (반드시 EnterCell에서 처리할것)
this.fnGrid_EnterCell = function(obj:nexacro.Grid, row, cell) { 

	var colnm = this.gfnGridGetBindColumnNameByIndex(obj, cell);
	var rowFlag = this.gfnGetFlag(this.dsList, row);	
	
	if (rowFlag != "#" && rowFlag != "I"  && (this.dsList.getColumn(row, "YN_CLOSE") == "Y")) { // 마감했으면
		if(colnm == "YN_TARGET"){
			return false;	
		} 
	}
	// 공통 > Setting > 그리드정보 에서 셋팅한 내용대로 
	nGrdSpcRow = this.dsGridSpec.findRow( "DS_FIELD", colnm);
	//if(this.dsGridSpec.getColumn(nGrdSpcRow, "YN_READONLY") == "Y" || (rowFlag != "#" && rowFlag != "I"  && this.dsGridSpec.getColumn(nGrdSpcRow, "YN_READONLY") == "U")){
	if(this.dsGridSpec.getColumn(nGrdSpcRow, "YN_READONLY") == "Y"){
		return false;
	}
	if(rowFlag != "#" && rowFlag != "I"){
		if(colnm == "ID_SABUN" || colnm == "YY_BASE"){
			return false;	
		} 
	}	
};

this.fnGrid_AfterEdit = function(obj,e) {	
	// G:계속근로|T:퇴직자
	var tyGubun = this.dsList.getColumn(this.dsList.rowposition,"TY_GUBUN");
	
	if(e.columnid == "QN_YEARLYPAY" || e.columnid == "AM_AVERAGEPAY" // 수당연차 또는 통상임금 변경 시
	|| e.columnid == "QN_TOTAL_IPSA" || e.columnid == "QN_YEARLY") { // 퇴사자대상 입사기준 총연차 또는 회계일기준발생연차 변경 시
		//this.dsList.setColumn(e.row, "AM_YEARLYPAY", 0); // 연차수당 = 0
		this.dsList.setColumn(e.row, "AM_YEARLYPAY", nexacro.round(this.dsList.getColumn(e.row, "AM_AVERAGEPAY") * this.dsList.getColumn(e.row, "QN_YEARLYPAY"),0));
		
		if( tyGubun == "T") { 
			// 수당연차
			if (this.dsList.getColumn(e.row, "QN_TOTAL_IPSA") > this.dsList.getColumn(e.row, "QN_YEARLY")){
				this.dsList.setColumn(e.row, "QN_YEARLYPAY_IPSA", (this.dsList.getColumn(e.row, "QN_TOTAL_IPSA") - this.dsList.getColumn(e.row, "QN_YEARLY")) + this.dsList.getColumn(e.row, "QN_YEARLYPAY"));
				this.dsList.setColumn(e.row, "QN_PAY", this.dsList.getColumn(e.row, "QN_YEARLYPAY_IPSA"));
			} else {
				this.dsList.setColumn(e.row, "QN_PAY", this.dsList.getColumn(e.row, "QN_YEARLYPAY"));
				this.dsList.setColumn(e.row, "QN_YEARLYPAY_IPSA", this.dsList.getColumn(e.row, "QN_YEARLYPAY"));
			}
		} else {
			this.dsList.setColumn(e.row, "QN_PAY", this.dsList.getColumn(e.row, "QN_YEARLYPAY"));
		}
		// 최종지급금액
		this.dsList.setColumn(e.row, "AM_PAY", nexacro.round(this.dsList.getColumn(e.row, "AM_AVERAGEPAY") * this.dsList.getColumn(e.row, "QN_PAY"),0));
	}
	else if(e.columnid == "QN_TOTAL" || e.columnid == "QN_USEVACA") { // 총연차, 사용연차
		this.dsList.setColumn(e.row, "QN_REMAIN", this.dsList.getColumn(e.row, "QN_TOTAL") - this.dsList.getColumn(e.row, "QN_USEVACA"));
	}
	else if(e.columnid == "QN_PAY") { // 최종지급 개수
		this.dsList.setColumn(e.row, "AM_PAY", nexacro.round(this.dsList.getColumn(e.row, "AM_AVERAGEPAY") * this.dsList.getColumn(e.row, "QN_PAY"),0));
	}
	else if(e.columnid == "AM_YEARLYPAY") { // 연차수당
		this.dsList.setColumn(e.row, "AM_PAY", this.dsList.getColumn(e.row, "AM_YEARLYPAY"));
	}
	else if(e.columnid == "QN_YEARLYPAY_IPSA") { // 퇴사자대상 입사기준 수당연차
		if( tyGubun == "T") { 
			if (this.dsList.getColumn(e.row, "QN_TOTAL_IPSA") > this.dsList.getColumn(e.row, "QN_YEARLY")){
				this.dsList.setColumn(e.row, "QN_PAY", this.dsList.getColumn(e.row, "QN_YEARLYPAY_IPSA"));
				// 최종지급금액
				this.dsList.setColumn(e.row, "AM_PAY", nexacro.round(this.dsList.getColumn(e.row, "AM_AVERAGEPAY") * this.dsList.getColumn(e.row, "QN_PAY"),0));
			}
		}
	}
};


this.fnGrid_oncelldblclick = function(obj:nexacro.Grid,e:nexacro.GridClickEventInfo)
{
	if(!this.gfnGridIsRow(obj)) return;
	var colNm = this.gfnGridGetBindColumnNameByIndex(obj,e.cell);
	if(obj.usReadOnlyY.search(colNm) == -1) return true;
	// G:계속근로|T:퇴직자
	var tyGubun = this.dsList.getColumn(this.dsList.rowposition,"TY_GUBUN");
	if( tyGubun == "T") {
		var param = {};
		param.CD_CORP = this.dsList.getColumn(this.dsList.rowposition, "CD_CORP");
		param.DS_CORP = this.dsList.getColumn(this.dsList.rowposition, "DS_CORP");
		param.CD_DEPT = this.dsList.getColumn(this.dsList.rowposition, "CD_DEPT");
		param.DS_DEPT = this.dsList.getColumn(this.dsList.rowposition, "DS_DEPT");
		param.ID_SABUN = this.dsList.getColumn(this.dsList.rowposition, "ID_SABUN");
		param.DS_HNAME = this.dsList.getColumn(this.dsList.rowposition, "DS_HNAME");
		param.ID_PERSON = this.dsList.getColumn(this.dsList.rowposition, "ID_PERSON");
		param.DT_JOIN  = obj.getCellText(e.row,obj.getBindCellIndex("body","DT_JOIN"));
		param.DT_RETIRE  = obj.getCellText(e.row,obj.getBindCellIndex("body","DT_RETIRE"));
		this.gfnFormOpen(this.FormInfo.CD_MODULE, "DAC_MGTVACATION_PAY_DETAIL", "fnPopupCallback", param);
	}
};


//그리드 로우변경 이벤트
this.dsList_Rowposchanged = function(obj:nexacro.NormalDataset,e:nexacro.DSRowPosChangeEventInfo)
{
	this.fnSetExtendButtonEnable();
};


/************************************************************************
 * 확장버튼 이벤트
 ************************************************************************/
// 대상자생성
this.fnPersonCreate = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	//if(!this.gfnGridIsRow(this.dxGrid)) return;
	var param = {};
	param.YY_BASE = this.dsSearch.getColumn(0, "YY_BASE");
	var tyGubun = this.dsSearch.getColumn(0, "TY_GUBUN");
	// T : 퇴직자, G : 계속근로
	if( tyGubun == 'T' ){
		param.TY_GUBUN = tyGubun;
		param.SN_GUBUN = "";
		param.TY_FLAG = "S";
	}  else if( tyGubun == '%' ){
		param.TY_GUBUN = "G";
		param.SN_GUBUN = 1;
		param.TY_FLAG = "";
	} else {
		param.TY_GUBUN = "G";
		param.SN_GUBUN = this.dsSearch.getColumn(0, "SN_GUBUN");
		param.TY_FLAG = "";
	}	
	
	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DAC_MGTVACATION_PAY_CREATE_DLG", "fnPopupCallback", param);
}

// 결재상신 버튼
this.fnAprv = function(obj:nexacro.Button, e:nexacro.ClickEventInfo) {
	if (!this.gfnGridIsRow(this.dxGrid)) return;
	var tyGubun = this.dsSearch.getColumn(0, "TY_GUBUN");
	if( tyGubun != 'G' ){
		this.gfnAlert("작업구분이 재직자인 경우에만 결재상신 할 수 있습니다.");
		return false;
	}
	
	var param = {};			
	param.YY_BASE = this.dsSearch.getColumn(0,"YY_BASE");
	param.CD_CORP = this.dsSearch.getColumn(0,"CD_CORP");
	param.TY_GUBUN = this.dsSearch.getColumn(0,"TY_GUBUN");
	
	// T : 퇴직자, G : 계속근로
	if( tyGubun == 'T' ){
		param.TY_GUBUN = "G";	//tyGubun;
		param.SN_GUBUN = 1;
	}  else if( tyGubun == '%' ){
		param.TY_GUBUN = "G";
		param.SN_GUBUN = 1;
	} else {
		param.TY_GUBUN = "G";
		param.SN_GUBUN = this.dsSearch.getColumn(0, "SN_GUBUN");
	}
	//param.SN_GUBUN = this.dsSearch.getColumn(0,"SN_GUBUN");	
	
	btnUrl = "DAC_MGTVACATION_PAY_APRV_DLG";
	this.gfnFormOpen(this.FormInfo.CD_MODULE, btnUrl, "fnPopupCallback", param);
	
// 	this.gfnConfirm(this.fnAprvMsg(obj), function(strId, isOk) {
// 		if (isOk == false) {
// 			return;
// 		}
// 		
// 		var initParam = {
// 			CD_CORP: this.dsSearch.getColumn(0, "CD_CORP"),
// 			ID_AP_TYPE: "DAU01",
// 			TY_WRK: "APRV",
// 			ID_APRV: this.AuthClient.ID_SABUN,
// 			TT_DOC: "품의서",
// 			//TT_DOC: "휴가신청서 (" + this.dsSearch.getColumn(0, "YY_TUITION") + "년도 " + this.dsSearch.getColumn(0, "CD_TUITION").replace("0", "") + "분기)",
// 		}
// 		this.gfnAprv(initParam, "fnAprvCallback", "APRV");
// 	});
}

// 결재문서조회 버튼
this.fnAprvDocQ = function(obj:nexacro.Button, e:nexacro.ClickEventInfo) {
	var oParams = {
		CD_CORP: this.dsList.getColumn(this.dsList.rowposition, "CD_CORP"),
		NO_APRV: this.dsList.getColumn(this.dsList.rowposition, "NO_APRV"),
	}
	this.gfnAprvDoc(oParams, this.fnAprvDocQCallback);
}

// 결재상태초기화 버튼
this.fnAprvInit = function(obj:nexacro.Button, e:nexacro.ClickEventInfo) {
	if (!this.gfnGridIsRow(this.dxGrid)) return;
	var tyGubun = this.dsSearch.getColumn(0, "TY_GUBUN");
	if( tyGubun != 'G' ){
		this.gfnAlert("작업구분이 재직자인 경우에만 결재상태초기화 할 수 있습니다.");
		return false;
	}
	
	var msg = "연차 품의서에 대하여 " + obj.text + "하시겠습니까?\n";
	this.gfnConfirm(msg, "fnAprvCallback", "APRVINIT");
}

// 결재취소 버튼
this.fnAprvCnc = function(obj:nexacro.Button, e:nexacro.ClickEventInfo) {
	if (!this.gfnGridIsRow(this.dxGrid)) return;
	var tyGubun = this.dsSearch.getColumn(0, "TY_GUBUN");
	if( tyGubun != 'G' ){
		this.gfnAlert("작업구분이 재직자인 경우에만 결재취소 할 수 있습니다.");
		return false;
	}
	
	var msg = "연차 품의서에 대하여 " + obj.text + "하시겠습니까?\n";
	this.gfnConfirm(msg, "fnAprvCallback", "APRVCNC");
}

this.fnAprvDocQCallback = function() {
	console.log('fnAprvDocQCallback');
	alert('fnAprvDocQCallback');
}

this.fnAprvMsg = function(obj) {
// 	var DT_VACAFROM = this.dsList.getColumn(this.dsList.rowposition, "DT_VACAFROM");
// 	var DT_VACATO = this.dsList.getColumn(this.dsList.rowposition, "DT_VACATO");
// 	var QN_VACATION = this.dsList.getColumn(this.dsList.rowposition, "QN_VACATION");
// 	var DS_VACATION = this.dsList.getColumn(this.dsList.rowposition, "DS_VACATION");
// 	var msg = "휴가기간 [" + DT_VACAFROM + " ~ " + DT_VACATO + "] ( " + QN_VACATION + " 일)\n";
// 	msg += DS_VACATION + " 신청에 대하여 " + obj.text + " 하시겠습니까?";
	
	var msg = "품의서 상신을 하시겠습니까?";
	return msg;
}

this.fnExtBtnEvent = function(btn){

	var param = {};
	var btnUrl;
	switch(btn.id){
		case "btnExt_btnSlip": //전표발행
			var tyGubun = this.dsSearch.getColumn(0, "TY_GUBUN");
			if( tyGubun != 'G' ){
				this.gfnAlert("작업구분이 재직자인 경우에만 전표발행 할 수 있습니다.");
				return false;
			}
			var param = {};	
			param.YY_BASE = this.dsSearch.getColumn(0, "YY_BASE");
			param.CD_CORP = this.dsSearch.getColumn(0, "CD_CORP");
			param.DS_CORP = this.ccfCD_CORP.form.DSTextBox.value;
			param.CD_DEPT_INSA = this.dsList.getColumn(this.dsList.rowposition, "CD_DEPT_INSA");
			param.DS_DEPT_INSA = this.dsList.getColumn(this.dsList.rowposition, "DS_DEPT_INSA");	
			
			btnUrl = "DAC_MGTVACATION_PAY_AUTOSLIP_ISSUE";
			this.gfnFormOpen(this.FormInfo.CD_MODULE, btnUrl, "fnPopupCallback", param); 

			break;

		case "btnExt_btnSlipCnc": //전표취소
			var tyGubun = this.dsSearch.getColumn(0, "TY_GUBUN");
			if( tyGubun != 'G' ){
				this.gfnAlert("작업구분이 재직자인 경우에만 전표취소 할 수 있습니다.");
				return false;
			}

			var nCnt = this.dsList.rowcount; 
			if( nCnt == 0) { 
				this.gfnAlert("취소할 전표가 없습니다."); 
				return; 
			}
			if( nCnt == 1 && this.dsList.getColumn(0, this.ucFlag) == "#"){ 
				this.gfnAlert("취소할 전표가 없습니다."); 
				return; 
			}

			this.gfnConfirm("전표를 취소 하시겠습니까?", "fnSlipCancel");	

			break;

		case "btnExt_btnSlipQ": //전표조회
			if( !this.gfnIsNull(this.dsList.getColumn(this.dsList.rowposition, "CD_TRADE")) ){
				var param = {};
				btnUrl = "DHA_ISSUESLIP"; 
				param.CD_TRADE = this.dsList.getColumn(this.dsList.rowposition,"CD_TRADE");
				param.IUD_FLAG = "S"; 
				
				this.gfnFormOpen("DHA", btnUrl, "", param); 

			}
			break;			
		default:
	}

	//this.gfnFormOpen(this.FormInfo.CD_MODULE, btnUrl, "", param);
 };
/*
  *	전표취소 
  */
this.fnSlipCancel = function(svcID, value){
	
	if(value) {
		this.gfnGridBeforeSelect(this.dxGrid);
        var idx = 0; 
		if(this.dsList.rowcount > 1) idx = 1; 
		if(this.gfnIsNull(this.dsList.getColumn(idx, "CD_TRADE"))){ 
			this.gfnAlert("전표가 생성된 건만 전표취소 가능합니다.");	
			return; 
		} 

		this.dsSlip.clearData();
		this.dsSlip.addRow();
		
		this.dsSlip.setColumn(0, "CD_CORP", this.dsList.getColumn(this.dsList.rowposition, "CD_CORP"));
		this.dsSlip.setColumn(0, "YY_BASE", this.dsList.getColumn(this.dsList.rowposition, "YY_BASE"));
		this.dsSlip.setColumn(0, "CD_TRADE", this.dsList.getColumn(this.dsList.rowposition, "CD_TRADE"));
		this.dsSlip.setColumn(0, "CD_DEPT_BH", this.AuthClient.CD_DEPT);	
		this.dsSlip.setColumn(0, "ID_USER", this.AuthClient.ID_USER);

		var strSvcId    = "slipDelete";
		var strSvcType  = "save";
		var inProc		= "_dsProc";
		var inData      = "slipDelete=dsSlip";
		var outData     = "";
		var strArg      = "";
		var callBackFnc = "fnCallback";

		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
							strSvcType , 	// trabsaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
							callBackFnc); // 통신방법 정의 [생략가능]
	}
	
};

// 급여적용
this.fnSalaryApply = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {

	var TY_CLOSE = "";
	//@TY_CLOSE = 'M', 적용취소인 경우 @TY_CLOSE = 'C'
	//적용
	if( obj.id == "btnExt_SalaryApply" ){
		TY_CLOSE = "M";
	}
	//적용취소
	else if( obj.id == "btnExt_SalaryApply_C" ){
		TY_CLOSE = "C";
	}
	// TODO 대상자생성 기능 추가
	//if(!this.gfnGridIsRow(this.dxGrid)) return;
	var param = {};
	param.YY_BASE = this.dsSearch.getColumn(0, "YY_BASE");
	var tyGubun = this.dsSearch.getColumn(0, "TY_GUBUN");
	// T : 퇴직자, G : 계속근로
	if( tyGubun == 'T' ){
		param.TY_GUBUN = tyGubun;
		param.SN_GUBUN = "";
		param.TY_FLAG = "S";
		param.YM_SALARY = this.dsList.getColumn(this.dsList.rowposition, "YM_SALARY");
		param.TY_SALARY = (this.dsList.getColumn(this.dsList.rowposition, "TY_SALARY") != undefined ? this.dsList.getColumn(this.dsList.rowposition, "TY_SALARY") : "R");
		param.SN_SALARY = (this.dsList.getColumn(this.dsList.rowposition, "SN_SALARY") != undefined ? this.dsList.getColumn(this.dsList.rowposition, "SN_SALARY") : "1");
		param.ID_SABUN = this.dsList.getColumn(this.dsList.rowposition, "ID_SABUN");
		param.DS_HNAME = this.dsList.getColumn(this.dsList.rowposition, "DS_HNAME");
	}  else if( tyGubun == '%' ){
		if (this.dsList.getColumn(this.dsList.rowposition,"TY_GUBUN") == "T")
		{
			param.TY_GUBUN = this.dsList.getColumn(this.dsList.rowposition,"TY_GUBUN");
			param.SN_GUBUN = "";
			param.TY_FLAG = "S";
			param.YM_SALARY = this.dsList.getColumn(this.dsList.rowposition, "YM_SALARY");
			param.TY_SALARY = (this.dsList.getColumn(this.dsList.rowposition, "TY_SALARY") != undefined ? this.dsList.getColumn(this.dsList.rowposition, "TY_SALARY") : "R");
			param.SN_SALARY = (this.dsList.getColumn(this.dsList.rowposition, "SN_SALARY") != undefined ? this.dsList.getColumn(this.dsList.rowposition, "SN_SALARY") : "1");
			param.ID_SABUN = this.dsList.getColumn(this.dsList.rowposition, "ID_SABUN");
			param.DS_HNAME = this.dsList.getColumn(this.dsList.rowposition, "DS_HNAME");
		}
		else
		{
			param.TY_GUBUN = "G";
			param.SN_GUBUN = 1;
			param.TY_FLAG = "";
			param.YM_SALARY = this.dsList.getColumn(this.dsList.rowposition, "YM_SALARY");
			param.TY_SALARY = (this.dsList.getColumn(this.dsList.rowposition, "TY_SALARY") != undefined ? this.dsList.getColumn(this.dsList.rowposition, "TY_SALARY") : "S");
			param.SN_SALARY = (this.dsList.getColumn(this.dsList.rowposition, "SN_SALARY") != undefined ? this.dsList.getColumn(this.dsList.rowposition, "SN_SALARY") : "1");
		}
	} else {
		this.dsList.filter("YN_TARGET == 'Y'");
		param.TY_GUBUN = "G";
		param.SN_GUBUN = this.dsSearch.getColumn(0, "SN_GUBUN");
		param.TY_FLAG = "";
		param.YM_SALARY = this.dsList.getColumn(0, "YM_SALARY");
		param.TY_SALARY = (this.dsList.getColumn(this.dsList.rowposition, "TY_SALARY") != undefined ? this.dsList.getColumn(this.dsList.rowposition, "TY_SALARY") : "S");
		param.SN_SALARY = (this.dsList.getColumn(this.dsList.rowposition, "SN_SALARY") != undefined ? this.dsList.getColumn(this.dsList.rowposition, "SN_SALARY") : "1");
		this.dsList.filter("");
	}	
	param.TY_CLOSE = TY_CLOSE;
	
	
	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DAC_MGTVACATION_PAY_SALARY_DLG", "fnPopupCallback", param);
};

this.fnPopupCallback = function (svcID, val)
{
	if(svcID.indexOf("DAC_MGTVACATION_PAY_DETAIL") > -1){
		this.FormBtns.Select.click();
	} else if(val){
		if(svcID.indexOf("DAC_MGTVACATION_PAY_DLG1") > -1){
			this.fnAlertCallback = function() {
				this.FormBtns.Select.click();
			}
			this.gfnAlert("작업이 완료 되었습니다.","fnAlertCallback");
		}else{
		
			this.FormBtns.Select.click();
		}
	}
};

/************************************************************************
 * 기타 이벤트
 ************************************************************************/
/*
 *	확장버튼 활성화 여부
 */
this.fnSetExtendButtonEnable = function(bEnable){
	var nrow = this.dsList.rowposition;
	
	//this.BaseCreate.set_enable(false);	
	this.btnAprv.set_enable(false);
	this.btnAprvCnc.set_enable(false);
	this.btnDocQ.set_enable(false);	
	this.btnInit.set_enable(false);	
	this.btnSlip.set_enable(false);
	this.btnSlipCnc.set_enable(false);
	this.btnSlipQ.set_enable(false);	
	
	var tyGubun = this.dsSearch.getColumn(0, "TY_GUBUN");
	
	//this.BaseCreate.set_enable(this.dsList.getColumn(nrow, "BTN_APRV") == "Y");	// 기초생성	
	if (nrow == 0)
	{	
		this.btnAprv.set_enable(false);	
	} else {
		//this.btnAprv.set_enable(this.dsList.getColumn(nrow, "BTN_APRV") == "Y" && tyGubun == 'G');	// 결재상신	
		this.btnAprv.set_enable(this.dsList.getColumn(nrow, "BTN_APRV") == "Y" );	// 결재상신	
	}
	
// 	if (this.dsSearch.getColumn(0,"TY_SALARY") == "R")
// 	{
// 		this.btnAprv.set_enable(this.dsList.getColumn(nrow, "BTN_APRV") == "Y");	// 결재상신	
// 	}
	
	this.btnAprvCnc.set_enable(this.dsList.getColumn(nrow, "BTN_APRV_CNC") == "Y" && this.dsList.getColumn(nrow, "BTN_SLIP") == "Y" && this.dsList.getColumn(nrow, "YN_CLOSE") != "Y");	// 지급품의 취소
	this.btnDocQ.set_enable(this.dsList.getColumn(nrow, "BTN_DOC_Q") == "Y");	// 결재문서조회
 	this.btnInit.set_enable(this.dsList.getColumn(nrow, "BTN_INIT") == "Y"); 	// 결재상태초기화
	
	this.btnSlip.set_enable(this.dsList.getColumn(nrow, "BTN_SLIP") == "Y");	// 전표발행
	this.btnSlipCnc.set_enable(this.dsList.getColumn(nrow, "BTN_SLIP_Q") == "Y" && this.dsList.getColumn(nrow, "CD_TRADE") != undefined && this.dsList.getColumn(nrow, "YN_CLOSE") != "Y");	// 전표취소
	this.btnSlipQ.set_enable(this.dsList.getColumn(nrow, "BTN_SLIP_Q") == "Y" && this.dsList.getColumn(nrow, "CD_TRADE") != undefined);	// 전표조회	
	
	if( tyGubun != 'G' ){
		this.btnSalaryApply.set_enable(this.gfnNvl(this.dsList.getColumn(nrow, "YM_SALARY"), '') == "");	// 급여이관
		this.btnSalaryApply_C.set_enable(this.gfnNvl(this.dsList.getColumn(nrow, "YM_SALARY"), '') != "");	// 급여이관취소
	} else {
		this.btnSalaryApply.set_enable(this.dsList.getColumn(nrow, "BTN_DOC_Q") == "Y"  && this.dsList.getColumn(nrow, "YM_SALARY") != "Y");	// 급여이관
		this.btnSalaryApply_C.set_enable(this.dsList.getColumn(nrow, "BTN_DOC_Q") == "Y"  && this.dsList.getColumn(nrow, "YM_SALARY") == "Y");	// 급여이관취소
// 		this.btnSalaryApply.set_enable(this.dsList.getColumn(nrow, "BTN_SLIP_Q") == "Y" && this.dsList.getColumn(nrow, "CD_TRADE") != undefined && this.dsList.getColumn(nrow, "YN_CLOSE") != "Y");	// 급여이관
// 		this.btnSalaryApply_C.set_enable(this.dsList.getColumn(nrow, "BTN_SLIP_Q") == "Y" && this.dsList.getColumn(nrow, "CD_TRADE") != undefined && this.dsList.getColumn(nrow, "YN_CLOSE") == "Y");	// 급여이관취소
	}
	
};

/*
 *	조회 조건 변경시 초기화
 */
this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(this.bSelect && e.oldvalue != e.newvalue) {
		if( e.columnid == "TY_GUBUN" ) {
			// G : 계속근로
			
			if( e.newvalue == "G") {				
				this.dsSearch.set_enableevent(false);
				this.dsSearch.setColumn(0,"SN_GUBUN","1");
				this.dsSearch.set_enableevent(true);
				//this.crdoSN_GUBUN.set_visible(true);
			} 			
			// @: 전체, T : 퇴직자
			else {
				this.dsSearch.set_enableevent(false);
				this.dsSearch.setColumn(0,"SN_GUBUN","");
				this.dsSearch.set_enableevent(true);
				//this.crdoSN_GUBUN.set_visible(false);
			}
			this.gfnGridInit(this.dxGrid, this.dsList, "DA", "DAC_MGTVACATION_PAY");
			this.selGrid = 1;
		}
		
		if( e.columnid == "SN_GUBUN" ) {
			if( e.newvalue == "3") {
				this.gfnGridInit(this.dxGrid, this.dsList, "DA", "DAC_MGTVACATION_PAY_G_FINAL2");
				this.selGrid = 3;
			} else if( e.newvalue == "2") {
				this.gfnGridInit(this.dxGrid, this.dsList, "DA", "DAC_MGTVACATION_PAY_G_FINAL");
				this.selGrid = 2;
			} else {
				this.gfnGridInit(this.dxGrid, this.dsList, "DA", "DAC_MGTVACATION_PAY");
				this.selGrid = 1;
			}
		}
		
		if( e.columnid == "CD_CORP" ) {
			this.dsSearch.setColumn(0,"CD_DEPT","");
			this.dsSearch.setColumn(0,"DS_DEPT","");
			this.dsSearch.setColumn(0,"ID_SABUN","");
			this.dsSearch.setColumn(0,"DS_HNAME","");
			this.dsSearch.setColumn(0,"ID_PERSON","");				
		}
		
		if( e.columnid == "ID_SABUN" ) {
			this.dsSearch.setColumn(0,"CD_DEPT","");
			this.dsSearch.setColumn(0,"DS_DEPT","");			
		}
		
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
		this.dxGrid.setFormatRowProperty(0, "size", 38);
		this.dxGrid.setFormatRowProperty(1, "size", 38);
	}
};
]]></Script>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ctclYY_BASE.form.TextBox" propid="value" datasetid="dsSearch" columnid="YY_BASE"/>
      <BindItem id="item1" compid="divSearch.form.ccboTY_GUBUN" propid="value" datasetid="dsSearch" columnid="TY_GUBUN"/>
      <BindItem id="item2" compid="divSearch.form.ccfCD_CORP.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_CORP"/>
      <BindItem id="item3" compid="divSearch.form.ccfCD_CORP.form.DSTextBox" propid="value" datasetid="dsSearch" columnid="DS_CORP"/>
      <BindItem id="item4" compid="divSearch.form.ccfCD_DEPT.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_DEPT"/>
      <BindItem id="item5" compid="divSearch.form.ccfCD_DEPT.form.DSTextBox" propid="value" datasetid="dsSearch" columnid="DS_DEPT"/>
      <BindItem id="item6" compid="divSearch.form.ccfID_SABUN.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="ID_SABUN"/>
      <BindItem id="item7" compid="divSearch.form.ccfID_SABUN.form.DSTextBox" propid="value" datasetid="dsSearch" columnid="DS_HNAME"/>
      <BindItem id="item8" compid="divSearch.form.crdoSN_GUBUN" propid="value" datasetid="dsSearch" columnid="SN_GUBUN"/>
    </Bind>
  </Form>
</FDL>
