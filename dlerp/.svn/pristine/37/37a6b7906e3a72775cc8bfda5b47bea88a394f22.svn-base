<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="전도금정산" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg">
          <Layouts>
            <Layout>
              <Static id="sta00" taborder="1" text="법인코드" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Div id="ccfCORP" CDTextWidth="70" taborder="0" left="sta00:0.0" top="10.0" width="300" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
              <Static id="sta01" taborder="1" text="현장코드" left="ccfCORP:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfCD_DEPT" CDTextWidth="70" taborder="0" left="sta01:0.0" top="10.0" width="300" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
              <Static id="staYM_WORK" taborder="1" text="회계년월" left="ccfCD_DEPT:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ctclYM_WORK" taborder="3" left="staYM_WORK:0.0" top="10.0" width="80" height="24.0" url="cmm::cmmCalMM.xfdl"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Objects>
      <Dataset id="dsList" onvaluechanged="dsList_onvaluechanged"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DBSPR_JUNDOJS_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">save</Col>
            <Col id="SP">DHAPR_JUNDOJS_SAVE</Col>
          </Row>
          <Row>
            <Col id="TARGET">issueSlip</Col>
            <Col id="SP">DHAPR_JUNDOJS_AUTOSLIP_ISSUE</Col>
          </Row>
          <Row>
            <Col id="TARGET">cancelSlip</Col>
            <Col id="SP">DHAPR_JUNDOJS_AUTOSLIP_CANCEL</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch">
        <ColumnInfo>
          <Column id="CD_CORP" type="STRING" size="256"/>
          <Column id="CD_DEPT" type="STRING" size="256"/>
          <Column id="YM_WORK" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CD_CORP"/>
            <Col id="CD_DEPT"/>
            <Col id="YM_WORK"/>
          </Row>
        </Rows>
      </Dataset>
    </Objects>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
};

/************************************************************************
* 버튼 설정 : 화면(Tab) 전환시 마다 호출
* 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
************************************************************************/
this.fnSetButton = function() {
	// Select, Add, Del, Save, Excel, Print
	// SubSelect, SubAdd, SubDel, SuubSave, SubExcel
	// this.FormBtns.Add.set_enable(false);	
}

/************************************************************************
* 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
************************************************************************/
this.fnSetExtendButton = function() {
	this.btnStateSettle = this.gfnFormButtonAdd("StateSettle", "fnStateSettle"); 	//전도금정산 버튼
	this.btnAppDoc = this.gfnFormButtonAdd("AppDoc", "fnAppDoc"); 					//결재문서 버튼
	this.btnStateIssue = this.gfnFormButtonAdd("StateIssue", "fnIssueSlip"); 		//전표발행 버튼
	this.btnStateCancel = this.gfnFormButtonAdd("StateCancel", "fnCancelSlip"); 	//전표취소 버튼
	this.btnStateSearch = this.gfnFormButtonAdd("StateSearch", "fnStateSearch");	//전표조회 버튼	
};

/************************************************************************
* 변수 선언
************************************************************************/
this.fnSetVariable = function() {
	this.ccfCORP = this.divSearch.form.ccfCORP;
	this.ccfCD_DEPT = this.divSearch.form.ccfCD_DEPT;
	this.ctclYM_WORK = this.divSearch.form.ctclYM_WORK;
	this.dxGrid = this.divData.form.objGrid;
};

/************************************************************************
* 이벤트 설정
************************************************************************/
this.fnSetEvent = function() {
	this.gfnGridInit(this.dxGrid, this.dsList, "DB", "DBS_JUNDOJS");
	
	this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforeUserDataSetParam";
	this.dxGrid.ExpandUp = "fnGrid_ExpandUp";
	
	this.ccfCORP.CodeFindName = "DHX_CFCORP";
	this.ccfCORP.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.ccfCORP.AfterCDTextChanged = "fnAfterCDTextChanged";	
	
	//this.ccfCD_DEPT.CodeFindName = "DHX_CFDEPT_02";
	this.ccfCD_DEPT.CodeFindName = "DHX_CFACNTUNIT";   //DHX_CFDEPT_02
	this.ccfCD_DEPT.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.ccfCD_DEPT.AfterCDTextChanged = "fnAfterCDTextChanged";		
	
	this.ctclYM_WORK.form.TextBox.set_value(this.gfnGetDate().substr(0,6));
	//법인코드 세션에 코드로 셋팅
	this.ccfCORP.form.DSTextBox.set_value(this.AuthClient.DS_CORP); 
	this.ccfCORP.form.CDTextBox.set_value(this.AuthClient.CD_CORP);	
}

/************************************************************************
* 파라미터 설정
************************************************************************/
this.fnSetParameter = function() {	
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_DEPT_BE", "string");
	this.dsSelect.addColumn("YM_WORK", "string");
	/*this.dsSelect.addColumn("ID_TRANS", "string");*/
	
	this.dsSave = new Dataset();
	this.dsSave.addColumn("CD_CORP", "string");
	this.dsSave.addColumn("TY_SAVE", "string");
	this.dsSave.addColumn("NO_SLIPKEY", "int");
	this.dsSave.addColumn("CD_DEPT_BE", "string");
	this.dsSave.addColumn("CD_DEPT_BH", "string");
	this.dsSave.addColumn("DT_ACCOUNT", "string");
	this.dsSave.addColumn("CD_ACCOUNT", "string");
	this.dsSave.addColumn("CD_SEMOK", "string");
	this.dsSave.addColumn("DS_SEMOK", "string");
	this.dsSave.addColumn("TY_PAY", "string");
	this.dsSave.addColumn("TY_VENDOR", "string");
	this.dsSave.addColumn("CD_VENDOR", "string");
	this.dsSave.addColumn("DS_VENDOR", "string");
	this.dsSave.addColumn("DS_REM", "string");
	this.dsSave.addColumn("TY_ISSUE", "string");
	this.dsSave.addColumn("AM_SUPPLY", "bigdecimal");
	this.dsSave.addColumn("AM_SUPPLY2", "bigdecimal");
	this.dsSave.addColumn("AM_ETC", "bigdecimal");
	this.dsSave.addColumn("AM_VAT", "bigdecimal");
	this.dsSave.addColumn("CD_PROOF", "string");
	this.dsSave.addColumn("CD_GONGJONG1", "string");
	this.dsSave.addColumn("DS_GONGJONG1", "string");
	this.dsSave.addColumn("ID_TRANS", "string");
	this.dsSave.addColumn("URL_PROOF", "string");
	this.dsSave.addColumn("NO_ACCOUNT", "string");
	this.dsSave.addColumn("DT_REQ", "string");

	//전표발행용 데이터셋
	this.dsIssueSlip = new Dataset();
	this.dsIssueSlip.addColumn("CD_DEPT_BE", "string");
	this.dsIssueSlip.addColumn("NO_SLIPKEY", "string");
	this.dsIssueSlip.addColumn("ID_USER", "string");
	this.dsIssueSlip.addColumn("CD_DEPT", "string");
	this.dsIssueSlip.addColumn("CD_CORP", "string");	
	
	//전표취소용 데이터셋
	this.dsCancelSlip = new Dataset();
	this.dsCancelSlip.addColumn("CD_SLIP", "string");
}

/************************************************************************
* 컨트롤 이벤트
************************************************************************/
/*
*	조회 버튼
*/
this.fnSelect = function() {
	if(!this.fnValidate()) return;
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	this.dsSelect.setColumn(0, "CD_DEPT_BE", this.dsSearch.getColumn(0, "CD_DEPT"));
	this.dsSelect.setColumn(0, "YM_WORK", this.dsSearch.getColumn(0, "YM_WORK"));
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
		strSvcType , 	// trabsaction을 요청할 구분
		inProc,			// Procedure 정보 Dataset 이름
		inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
		outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
		strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
		callBackFnc); // 통신방법 정의 [생략가능]
}

/*
*	입력 버튼
*/
this.fnAdd = function() {
	this.gfnGridAdd(this.dxGrid);
}

/*
*	삭제 버튼
*/
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}

/*
*	저장 버튼
*/
this.fnSave = function() {
	// 그리드 필수항목 체크
	if (!this.gfnGridValidate(this.dxGrid)) return;
	this.dxGrid.updateToDataset();		
	this.dsSave.clearData();
			
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
		case "I":
		case "U":
		case "D":
			var nrow = this.dsSave.addRow();
			this.dsSave.setColumn(nrow, "TY_SAVE", flag);
			this.dsSave.setColumn(nrow, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
			this.dsSave.setColumn(nrow, "NO_SLIPKEY", this.dsList.getColumn(i, "NO_SLIPKEY"));
			this.dsSave.setColumn(nrow, "CD_DEPT_BE", this.dsSearch.getColumn(0, "CD_DEPT"));
			this.dsSave.setColumn(nrow, "CD_DEPT_BH", this.dsSearch.getColumn(0, "CD_DEPT"));
			this.dsSave.setColumn(nrow, "DT_ACCOUNT", this.dsList.getColumn(i, "DT_ACCOUNT"));
			this.dsSave.setColumn(nrow, "CD_ACCOUNT", this.dsList.getColumn(i, "CD_ACCOUNT"));
			this.dsSave.setColumn(nrow, "CD_SEMOK", this.dsList.getColumn(i, "CD_SEMOK"));
			this.dsSave.setColumn(nrow, "DS_SEMOK", this.dsList.getColumn(i, "DS_SEMOK"));
			this.dsSave.setColumn(nrow, "TY_PAY", this.dsList.getColumn(i, "TY_PAY"));
			this.dsSave.setColumn(nrow, "TY_VENDOR", this.dsList.getColumn(i, "TY_VENDOR"));
			this.dsSave.setColumn(nrow, "CD_VENDOR", this.dsList.getColumn(i, "CD_VENDOR"));
			this.dsSave.setColumn(nrow, "DS_VENDOR", this.dsList.getColumn(i, "DS_VENDOR"));
			this.dsSave.setColumn(nrow, "DS_REM", this.dsList.getColumn(i, "DS_REM"));
			this.dsSave.setColumn(nrow, "TY_ISSUE", this.dsList.getColumn(i, "TY_ISSUE"));
			this.dsSave.setColumn(nrow, "AM_SUPPLY", this.dsList.getColumn(i, "AM_SUPPLY"));
			this.dsSave.setColumn(nrow, "AM_SUPPLY2", this.dsList.getColumn(i, "AM_SUPPLY2"));
			this.dsSave.setColumn(nrow, "AM_ETC", this.dsList.getColumn(i, "AM_ETC"));
			this.dsSave.setColumn(nrow, "AM_VAT", this.dsList.getColumn(i, "AM_VAT"));
			this.dsSave.setColumn(nrow, "CD_PROOF", this.dsList.getColumn(i, "CD_PROOF"));
			this.dsSave.setColumn(nrow, "CD_GONGJONG1", this.dsList.getColumn(i, "CD_GONGJONG1"));
			this.dsSave.setColumn(nrow, "DS_GONGJONG1", this.dsList.getColumn(i, "DS_GONGJONG1"));
			this.dsSave.setColumn(nrow, "ID_TRANS", this.dsList.getColumn(i, "ID_TRANS"));
			this.dsSave.setColumn(nrow, "URL_PROOF", this.dsList.getColumn(i, "URL_PROOF"));
			this.dsSave.setColumn(nrow, "NO_ACCOUNT", this.dsList.getColumn(i, "NO_ACCOUNT"));
			this.dsSave.setColumn(nrow, "DT_REQ", this.dsList.getColumn(i, "DT_REQ"));				
			break;
		}
	}
	
	if (this.dsSave.rowcount == 0) return;
	
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "save=dsSave";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
		strSvcType , 	// transaction을 요청할 구분
		inProc,			// Procedure 정보 Dataset 이름
		inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
		outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
		strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
		callBackFnc); // 통신방법 정의 [생략가능]
}

/*
*	엑셀 버튼
*/
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
*	출력 버튼
*/
this.fnPrint = function() {
}

/************************************************************************
* Validate
************************************************************************/
/*
*	조회 Validate
*/
this.fnValidate = function() {

	if (this.gfnIsNull(this.ccfCD_DEPT.form.CDTextBox.value)) {
		this.fnVaidateCallback = function() {
			this.ccfCD_DEPT.form.CDTextBox.setFocus();
		}
		this.gfnAlert("현장코드는 필수입력 값입니다.");
		return false;
	}

// 	if (this.gfnIsNull(this.ccfCORP.form.CDTextBox.value)) {
// 		this.ccfCORP.form.CDTextBox.setFocus();
// 		this.gfnAlert("법인코드를 입력하세요!");			
// 		return false;
// 	}

	if (this.gfnIsNull(this.ctclYM_WORK.form.TextBox.value)) {
		this.fnVaidateCallback = function() {			
		}
		this.gfnAlert("회계년월은 필수입력 값입니다.");
		return false;
	}
	return true;
};

/************************************************************************
* 콜백 이벤트
************************************************************************/
/*
*	콜백 처리
*/
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	switch(svcID) {
	case "select" :	
		this.gfnGridAfterSelect(this.dxGrid);
		break;
	case "save" :	
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}

		break;
	case "issueSlip" :
		if (errorCode == 0) {
			this.gfnAlert("전표가 발행 되었습니다.");
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
		break;
	case "cancelSlip" :
		if (errorCode == 0) {
			this.gfnAlert("전표가 취소 되었습니다.");
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
		break;
	}
}

/************************************************************************
* 코드파인드 이벤트
************************************************************************/
this.fnAfterCDTextChanged = function(id, codeFindData) {
	switch(id) {
	case "ccfCORP":	//법인코드
		//this.ccfCD_DEPT.form.fnCodeFindClear();
		break;
	}
}

this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	var cdCorp = this.dsSearch.getColumn(0, "CD_CORP");
	if (id == "ccfCORP") {
		dsUserParam.setColumn(nrow, "ID_SABUN", this.AuthClient.ID_USER);
	}else if (id == "ccfCD_DEPT") {
		if(this.gfnIsNull(cdCorp)){
			this.gfnAlert("법인코드를 선택하세요.");
			return false;
		}
		dsUserParam.setColumn(nrow, "CD_DEPT_UPPER"	, "");						//상위부서
		dsUserParam.setColumn(nrow, "YN_SLIPACCEPT"	, "Y");						//전표발행여부
		dsUserParam.setColumn(nrow, "CD_CORP"		, cdCorp);					//법인코드
		dsUserParam.setColumn(nrow, "YN_USE"		, "Y");						//사용여부
		dsUserParam.setColumn(nrow, "GR_DEPT_ACNT"	, "");						//현장/본사여부	
		//dsUserParam.setColumn(nrow, "ID_USER"	    , this.AuthClient.ID_USER);
		//dsUserParam.setColumn(nrow, "GR_SEARCH"     , this.FormInfo.GR_SEARCH);
		//dsUserParam.setColumn(nrow, "CD_DEPT"	    , this.AuthClient.CD_DEPT);	
		
// 		if (this.gfnIsNull(this.ccfCORP.form.CDTextBox.value)) {
// 			//this.ccfCD_CORP.form.CDTextBox.setFocus();
// 			this.gfnAlert("법인코드를 입력하세요!");			
// 			return false;
// 		}
// 		dsUserParam.setColumn(nrow, "CD_CORP", this.ccfCORP.form.CDTextBox.value);			
	}
	return true;
}

/************************************************************************
* 그리드 이벤트
************************************************************************/
this.fnGrid_BeforeUserDataSetParam = function(id, dsUserParam, nrow) {	
	// 그리드에서 코드파인드 id는 그리드셋팅의 코드파인드 식별ID
	var cdCorp = this.dsSearch.getColumn(0, "CD_CORP");
	var cdDept = this.dsSearch.getColumn(0, "CD_DEPT");
	var TyVendor = this.dsList.getColumn(this.dsList.rowposition, "TY_VENDOR");
	var cdPay = this.dsList.getColumn(this.dsList.rowposition, "CD_VENDOR");
	
	switch(id) {
		case "DHX_CFALLVENDOR_CODEFIND":	//거래처코드	
			dsUserParam.setColumn(nrow, "CD_CORP" , cdCorp);
		break;
		case "DHX_CFACNTSITE":	// 계정코드
			dsUserParam.setColumn(nrow, "CD_DEPT_BE" , cdDept);			
		break;
		case "DZX_CFCODE_COM":	// 증빙코드
			dsUserParam.setColumn(nrow, "CD_SYSTEM" , "DH");
			dsUserParam.setColumn(nrow, "CD_TYPE" , "V10");
		break;
		case "DFX_CFACCOUNTMATCH":	// 계좌번호
			if(this.gfnIsNull(cdPay)){
				this.gfnAlert("거래처를 입력해주세요.");
				return false;
			}
			dsUserParam.setColumn(nrow, "TY_VENDOR" , TyVendor);
			dsUserParam.setColumn(nrow, "CD_PAY" , cdPay);	
		break;
		case "DBX_CFMAINSITE":	// 단지코드
			dsUserParam.setColumn(nrow, "CD_AUTHDEPT", this.AuthClient.CD_DEPT);
		break;
// 		case "DWXPR_COST_TREE_01":	// 공종코드
// 			dsUserParam.setColumn(nrow, "CD_SITE" , cdDept);
// 		break;
	}

	return true;
}

// 첨부파일
this.fnGrid_ExpandUp = function(obj:nexacro.Grid, e:nexacro.GridMouseEventInfo) {
	var colnm = this.gfnGridGetBindColumnNameByIndex(obj, e.cell);
	var objDs = obj.getBindDataset();
	var sCdDir = "";

	if(colnm == "URL_PROOF") {	// 증빙첨부
		// 최초 작성시엔 NO_SEQ가 없기 때문에 저장 후에 파일 첨부를 진행하여야 함.
		// CD_DIR에 넣어줄 값이 없기에 저장 후 진행!
		if(this.gfnGetFlag(objDs, e.row) == "I"){
			this.gfnAlert("저장 후 파일첨부 진행.");
			return false;
		}
		/*NO_SLIPKEY --출금등록번호 --HIDDEN		*/
		var NO_SLIPKEY = objDs.getColumn(e.row, "NO_SLIPKEY");
		var fileManager = {};
		fileManager.CD_GUBUN = "DH02";
		fileManager.CD_DIR = [objDs.getColumn(e.row, "NO_SLIPKEY")];	
		fileManager.IS_READONLY = false; 
	
		this.gfnFileManager(fileManager, "fnFileCallback");
	}
}

this.fnFileCallback = function(strID, val) {
	var objDs = this.dxGrid.getBindDataset();
	// val.IsChange : 변경여부, val.Cnt : 파일개수
		
	// 파일개수를 다시 셋팅
	objDs.set_enableevent(false);
	if(val.Cnt == 0) {
		//objDs.setColumn(objDs.rowposition, "URL_PROOF", "첨부");
	}
	objDs.setColumn(objDs.rowposition, "URL_PROOF", "첨부(" + val.Cnt + ")");
	//objDs.setColumn(objDs.rowposition, "FILE_CNT", val.Cnt );
	objDs.set_enableevent(true);
};

/************************************************************************
* 기타 이벤트
************************************************************************/
/*
*	조회 조건 변경시 초기화
*/
this.fnSearchInit = function(obj,e) {
	if(e == null || (e.pretext != e.posttext)) {
		// 폼상태 초기화
		this.gfnSetFormStatus(this);	
		this.gfnGridClear(this.dxGrid);
	}
};

this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
	}
};

/************************************************************************
* 기타 버튼 이벤트
************************************************************************/
//전도금정산
this.fnStateSettle = function (obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
};
//결재문서
this.fnAppDoc = function (obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
};
	
//전표발행
this.fnIssueSlip = function (obj:nexacro.Button,e:nexacro.ClickEventInfo){

	if(this.dsList.getCaseCount("CHK == '1' && "+ this.ucFlag+" != '#'") == 0){
		this.gfnAlert("체크된 항목이 없습니다.");
		return;
	}
	
	if(this.dsList.findRowExpr("CHK == 1 && !dataset.parent.gfnIsNull(CD_SLIP) && nx_flag != '#'") > -1){
		this.gfnAlert("전표발행된 항목이 체크되어 있습니다.");
		return;
	}

	var nChkRow = this.dsList.findRow( "CHK", "1" );
	var sTyPay = this.dsList.getColumn(nChkRow, "TY_PAY");	// 지급구분
	for(var i = 0 ; i < this.dsList.rowcount; i++){
		if(this.dsList.getColumn(i, "CHK") == "1"){		
			if(sTyPay != this.dsList.getColumn(i, "TY_PAY")){
				this.gfnAlert("동일한 지급구분을 선택하십시오")
				return false;
			}
		}
	}
	
	this.gfnConfirm("전표 발행하시겠습니까?", "fnIssueSlip_callback");
};

//전표취소
this.fnCancelSlip = function (obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	if(this.dsList.getCaseCount("CHK == '1' && "+this.ucFlag+" != '#'") == 0){
		this.gfnAlert("체크된 항목이 없습니다.");
		return;
	}
	
	if(this.dsList.findRowExpr("CHK == 1 && dataset.parent.gfnIsNull(CD_SLIP) && nx_flag != '#'") > -1){
		this.gfnAlert("전표발행되지않은 항목이 체크되어 있습니다.");
		return;
	}

	this.gfnConfirm("전표 취소하시겠습니까?", "fnCancelSlip_callback");
};

//전표조회
this.fnStateSearch = function (obj:nexacro.Button,e:nexacro.ClickEventInfo){

	if (this.gfnIsNull(this.gfnTrim(this.dsList.getColumn(this.dsList.rowposition, "CD_SLIP")))) {
		this.gfnAlert("전표번호는 필수입니다.");
		return;
	}
	
	var cdSlip = this.gfnTrim(this.dsList.getColumn(this.dsList.rowposition, "CD_SLIP"));
	var param = {};
	param.IUD_FLAG = "S";
	param.CD_TRADE = cdSlip;
	this.gfnFormOpen("DHA", "DHA_ISSUESLIP", "fnPopupCallBack", param, this.getOffsetWidth(), this.getOffsetHeight());	
};

this.fnPopupCallBack = function(strId, val) {
	this.FormBtns.Select.click();
}

// 전표발행
this.fnIssueSlip_callback = function(strId, val) 
{
 	if(val == true) {
		var strNoSlipKey = "";
		var sDelimiter = "";
		var nLoopcnt = 0;
		var sTyPay = "";
		for(var r = 0; r < this.dsList.rowcount; r++) {
			if(this.dsList.getColumn(r, this.ucFlag) != '#' && this.dsList.getColumn(r, "CHK") == 1){
				sDelimiter = ( nLoopcnt == 0) ? "" : ";";
				strNoSlipKey += (sDelimiter + this.dsList.getColumn(r, "NO_SLIPKEY"));
				nLoopcnt++;

				sTyPay = this.dsList.getColumn(r, "TY_PAY");	// 지급구분
			}
		}

		this.dsIssueSlip.clearData();
		var nRow = this.dsIssueSlip.addRow();

		//처리할 데이터 담기
		this.dsIssueSlip.setColumn(nRow, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
		this.dsIssueSlip.setColumn(nRow, "CD_DEPT_BE", this.dsSearch.getColumn(0, "CD_DEPT"));
		this.dsIssueSlip.setColumn(nRow, "NO_SLIPKEY" , strNoSlipKey);
		this.dsIssueSlip.setColumn(nRow, "CD_DEPT", this.dsSearch.getColumn(0, "CD_DEPT"));
		this.dsIssueSlip.setColumn(nRow, "TY_PAY", sTyPay);
		this.dsIssueSlip.setColumn(nRow, "ID_USER"   , this.AuthClient.ID_USER);
 		
 		var strSvcId    = "issueSlip";
 		var strSvcType  = "save";
 		var inProc		= "_dsProc";
 		var inData      = "issueSlip=dsIssueSlip";
 		var outData     = "";
 		var strArg      = "";
 		var callBackFnc = "fnCallback";
 		
 		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
			strSvcType , 	// transaction을 요청할 구분
			inProc,			// Procedure 정보 Dataset 이름
			inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
			outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
			strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
			callBackFnc); 	// 통신방법 정의 [생략가능]
 	}
};

// 전표취소 처리
this.fnCancelSlip_callback = function(strId, val) 
{
	if(val == true) {
		var strNoSlipKey = "";
		var sDelimiter = "";
		var nLoopcnt = 0;
		for(var r = 0; r < this.dsList.rowcount; r++) {
			if(this.dsList.getColumn(r, this.ucFlag) != '#' && this.dsList.getColumn(r, "CHK") == 1){
				sDelimiter = ( nLoopcnt == 0) ? "" : ";";			
				strNoSlipKey += ( sDelimiter + this.dsList.getColumn(r, "CD_SLIP") );
				nLoopcnt++;
			}
		}
		
		this.dsCancelSlip.clearData();
		var nRow = this.dsCancelSlip.addRow();
		this.dsCancelSlip.setColumn(nRow, "CD_SLIP", strNoSlipKey);		
 		
 		var strSvcId    = "cancelSlip";
 		var strSvcType  = "save";
 		var inProc		= "_dsProc";
 		var inData      = "cancelSlip=dsCancelSlip";
 		var outData     = "";
 		var strArg      = "";
 		var callBackFnc = "fnCallback";
 		
 		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
			strSvcType , 	// transaction을 요청할 구분
			inProc,			// Procedure 정보 Dataset 이름
			inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
			outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
			strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
			callBackFnc); 	// 통신방법 정의 [생략가능]
 	}
};

this.dsList_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		var nAmVat = 0; // 합계
		var nRow = e.row;
		switch(e.columnid) {
			case "AM_SUPPLY":	// 공급가
			case "AM_SUPPLY2":	// 전력기금
			case "AM_ETC":		// 잡이익/손실
			case "AM_VAT":		// 부가세
				//AM_ACCOUNT	합계				
				
				var amSupply = nexacro.toNumber(obj.getColumn(nRow, "AM_SUPPLY"),0);
				var amSupply2 = nexacro.toNumber(obj.getColumn(nRow, "AM_SUPPLY2"),0);
				var amEtc = nexacro.toNumber(obj.getColumn(nRow, "AM_ETC"),0);
				var amVat = nexacro.toNumber(obj.getColumn(nRow, "AM_VAT"),0);
				nAmVat = amSupply + amSupply2 + amEtc + amVat;
				obj.setColumn(nRow, "AM_ACCOUNT", nAmVat);
				
				break;
		}
	}


	



};
]]></Script>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfCORP.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_CORP"/>
      <BindItem id="item1" compid="divSearch.form.ccfCD_DEPT.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_DEPT"/>
      <BindItem id="item2" compid="divSearch.form.ctclYM_WORK.form.TextBox" propid="value" datasetid="dsSearch" columnid="YM_WORK"/>
    </Bind>
  </Form>
</FDL>
