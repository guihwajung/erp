<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="form" width="1280" height="720" titletext="거래처계좌 등록" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg">
          <Layouts>
            <Layout>
              <Static id="staCorpCd" taborder="13" text="법인코드" left="0" top="10.0" width="92" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfCorpCd" CDTextWidth="70" taborder="0" left="staCorpCd:0.0" top="10.0" width="270" height="24.0" url="cmm::cmmCodeFind.xfdl" text=""/>
              <Static id="sta00" taborder="1" text="거래처코드" left="ccfCorpCd:0" top="10.0" width="105.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Div id="ccfDeptCode" CDTextWidth="80" taborder="0" left="sta00:0.0" top="10.0" width="269" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
              <Static id="sta01" taborder="3" text="계좌번호" left="ccfDeptCode:0.0" top="10.0" width="92" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Edit id="txtNO_ACCOUNT" taborder="2" left="sta01:0.0" top="10.0" width="140" height="24.0" onchanged="fnSearchInit"/>
              <Static id="sta02" taborder="4" text="사용여부" left="txtNO_ACCOUNT:0.0" top="10.0" width="92" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Combo id="cboYN_TERM" taborder="5" text="전체" left="sta02:0.0" top="10.0" width="70" height="24.0" innerdataset="dsYN_TERM" datacolumn="VALUE" codecolumn="CODE" index="0" value="" onitemchanged="fnSearchInit"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();

	// 타화면에서 호출 및 파라미터 존재시 자동 조회
	if(!this.gfnIsNull(this.getOwnerFrame().CD_VENDOR) && !this.gfnIsNull(this.getOwnerFrame().DS_VENDOR)) {
		//this.dsSearch.set_enableevent(false);
		
		this.ccfDeptCode.form.CDTextBox.set_value(this.getOwnerFrame().CD_VENDOR);
		this.ccfDeptCode.form.DSTextBox.set_value(this.getOwnerFrame().DS_VENDOR);
		this.ccfDeptCode.form.CDTextBox_onchanged(); // 거래처 코드파인드 자동조회

		this.ccfCorpCd.form.CDTextBox.set_value(this.getOwnerFrame().CD_CORP);
		this.ccfCorpCd.form.DSTextBox.set_value(this.getOwnerFrame().DS_CORP);
		
		if (this.gfnIsNull(this.ccfCorpCd.form.CDTextBox.value)) {
			this.ccfCorpCd.form.CDTextBox.set_value(this.AuthClient.CD_CORP);
			this.ccfCorpCd.form.DSTextBox.set_value(this.AuthClient.DS_CORP);
		}

		//this.dsSearch.set_enableevent(true);		
		this.FormBtns.Select.click();
	}else{
		if (this.gfnIsNull(this.ccfCorpCd.form.CDTextBox.value)) {
			this.ccfCorpCd.form.CDTextBox.set_value(this.AuthClient.CD_CORP);
			this.ccfCorpCd.form.DSTextBox.set_value(this.AuthClient.DS_CORP);
		}	
	}

	// 거래처코드에 포커스추가
	//this.ccfDeptCode.form.CDTextBox.setFocus();
}; 

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 ************************************************************************/
this.fnSetButton = function() {
};

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btnAccountValidate = this.gfnFormButtonAdd("btnAccountValidate", "fnAccountValidate"); //전자결재상신
	this.btnAprovalDoc = this.gfnFormButtonAdd("btnAprovalDoc", "fnAprovalDoc"); 	            //전자결재문서조회

	this.btnAppr = this.gfnFormButtonAdd("btnAppr", "fnAppr"); 	            //계좌검증요청
	this.btnApprX = this.gfnFormButtonAdd("btnApprX", "fnApprX"); 	        //계좌검증요청취소
	
	this.btnAcntCms  = this.gfnFormButtonAdd("btnAcntCms" , "fnAcntCms");		// 예금주조회 버튼
	this.btnAprv     = this.gfnFormButtonAdd("btnAprv"    , "fnAprv");			// 결재상신 버튼
	this.btnDocQ     = this.gfnFormButtonAdd("btnDocQ"    , "fnAprvDocQ");		// 결재문서조회 버튼
	this.btnInit     = this.gfnFormButtonAdd("btnInit"    , "fnAprvInit");		// 결재상태초기화 버튼
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	
	this.ccfDeptCode = this.divSearch.form.ccfDeptCode;
	this.ccfCorpCd = this.divSearch.form.ccfCorpCd;
	
	this.dxGrid = this.divData.form.objGrid;
	this.grSearch = this.FormInfo.GR_SEARCH;
	this.cdGroup = this.gfnIsNull(this.AuthClient.CD_GROUP) ? "" : this.AuthClient.CD_GROUP;			// 그룹코드
}

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	this.ccfDeptCode.CodeFindName = "DFX_CFVENDOR";
	this.ccfCorpCd.CodeFindName = "DZX_CFCORP";

	this.ccfDeptCode.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.ccfCorpCd.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";

	this.ccfDeptCode.AfterCDTextChanged = "fnAfterCDTextChanged";
	
	this.gfnGridInit(this.dxGrid, this.dsList, "DF", "DFB_ACCOUNT");
	
	this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforuserDataSetParam";
	this.dxGrid.addEventHandler("onselectchanged", this.fnGrid_RowCellChanged, this);
	
	this.dxGrid.EnterCell = "fnGrid_EnterCell";
	
	// BUTTON, BUTTON-IN 처리
	this.dxGrid.ExpandUp = "fnGrid_ExpandUp";	
	
	// 권한체크는 없애기로 함 2019.08.07 	
}

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {

	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_OWNER", "string");
	this.dsSelect.addColumn("NO_ACCOUNT", "string");
	this.dsSelect.addColumn("YN_HAEJI", "string");
	this.dsSelect.addColumn("YN_CHECK", "string");
	this.dsSelect.addColumn("CD_CORP", "string");
	
	this.dsInsert = new Dataset();
	this.dsInsert.addColumn("NO_ACCOUNT", "string");	// 계좌번호
	this.dsInsert.addColumn("CD_OWNER", "string");		// 거래처코드
	this.dsInsert.addColumn("CD_BANK", "string");		// 은행코드
	this.dsInsert.addColumn("NM_OPENER", "string");		// 예금주
	this.dsInsert.addColumn("TY_GUBUN", "string");		// 구분
	this.dsInsert.addColumn("TY_DEFAULT", "string");	// 기본
	this.dsInsert.addColumn("DS_MEMO", "string");		// 비고
	this.dsInsert.addColumn("YN_USE", "string");		// 사용여부
	this.dsInsert.addColumn("DT_HAEJI", "string");		// 해지일자
	this.dsInsert.addColumn("ID_USER", "string");
	this.dsInsert.addColumn("CD_CORP", "string");		// 법인코드
	this.dsInsert.addColumn("TY_VENDOR", "string");

	this.dsUpdate = new Dataset();
	this.dsUpdate.addColumn("NO_ACCOUNT", "string");	// 계좌번호
	this.dsUpdate.addColumn("CD_OWNER", "string");		// 거래처코드
	this.dsUpdate.addColumn("CD_BANK", "string");		// 은행코드
	this.dsUpdate.addColumn("NM_OPENER", "string");		// 예금주
	this.dsUpdate.addColumn("TY_GUBUN", "string");		// 구분
	this.dsUpdate.addColumn("TY_DEFAULT", "string");	// 기본
	this.dsUpdate.addColumn("DS_MEMO", "string");		// 비고
	this.dsUpdate.addColumn("YN_USE", "string");		// 사용여부
	this.dsUpdate.addColumn("DT_HAEJI", "string");		// 해지일자
	this.dsUpdate.addColumn("ID_USER", "string");
	this.dsUpdate.addColumn("CD_CORP", "string");		// 법인코드
	this.dsUpdate.addColumn("TY_VENDOR", "string");
	
	this.dsDelete = new Dataset();
	this.dsDelete.addColumn("NO_ACCOUNT", "string");	// 계좌번호
	this.dsDelete.addColumn("TY_GUBUN", "string");		// 구분
	this.dsDelete.addColumn("CD_OWNER", "string");		// 거래처코드
	this.dsDelete.addColumn("CD_CORP", "string");		// 법인코드
	//this.dsDelete.addColumn("ID_USER", "string");
	
	this.dsAccountValidate = new Dataset();
	this.dsAccountValidate.addColumn("TM_APPR", "string");		// 전자결재묵음KEY
	this.dsAccountValidate.addColumn("NO_ACCOUNT", "string");	// 계좌번호
	this.dsAccountValidate.addColumn("TY_GUBUN", "string");		// 계좌구분
	this.dsAccountValidate.addColumn("CD_OWNER", "string");		// 소유주
	this.dsAccountValidate.addColumn("ID_USER", "string");

	// 계좌검증요청
	this.dsAppr = new Dataset();
	this.dsAppr.addColumn("TY_GUBUN", "string");
	this.dsAppr.addColumn("NO_ACCOUNT", "string");
	this.dsAppr.addColumn("CD_OWNER", "string");
	this.dsAppr.addColumn("CD_CORP", "string");
	this.dsAppr.addColumn("TY_APPR", "string");
	this.dsAppr.addColumn("ID_USER", "string");

	// 예금주조회
	this.dsAcntCms = new Dataset();
	this.dsAcntCms.addColumn("TY_GUBUN", "string");
	this.dsAcntCms.addColumn("NO_ACCOUNT", "string");
	this.dsAcntCms.addColumn("CD_OWNER", "string");
	this.dsAcntCms.addColumn("CD_CORP", "string");
	this.dsAcntCms.addColumn("ER_CODE", "string");
	this.dsAcntCms.addColumn("ER_MSG", "string");
	this.dsAcntCms.addColumn("NM_BRANCH", "string");
	this.dsAcntCms.addColumn("ID_USER", "string");
	
	// 예금주 조회 실행 확인용
	this.dsExeCnt = new Dataset();
	this.dsExeCnt.addColumn("NO_CNT", "BIGDECIMAL");

	// 결재
	this.dsApproval = new Dataset();
	this.dsApproval.addColumn("TY_WRK", "string");

	this.dsApproval.addColumn("NO_ACCOUNT", "string");
	this.dsApproval.addColumn("TY_GUBUN", "string");
	this.dsApproval.addColumn("CD_OWNER", "string");
	this.dsApproval.addColumn("CD_CORP", "string");

	this.dsApproval.addColumn("ID_APRV", "string");
	this.dsApproval.addColumn("NO_APRV", "int");

}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	this.dsSelect.setColumn(0, "CD_CORP", this.ccfCorpCd.form.CDTextBox.value);
	this.dsSelect.setColumn(0, "CD_OWNER", this.ccfDeptCode.form.CDTextBox.text);
	this.dsSelect.setColumn(0, "NO_ACCOUNT", this.divSearch.form.txtNO_ACCOUNT.value);
	this.dsSelect.setColumn(0, "YN_HAEJI", this.divSearch.form.cboYN_TERM.value);
	this.dsSelect.setColumn(0, "YN_CHECK", "");	
	
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
} 

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	var nrow = this.gfnGridAdd(this.dxGrid);
	this.dsList.set_enableevent(false);
	
	this.dsList.setColumn(nrow, "CD_OWNER", this.divSearch.form.ccfDeptCode.form.CDTextBox.value);
	this.dsList.setColumn(nrow, "DS_VENDOR", this.divSearch.form.ccfDeptCode.form.DSTextBox.value);
	this.dsList.setColumn(nrow, "DS_DAEPYO", this.dsSearch.getColumn(0, "DS_DAEPYO"));
	this.dsList.setColumn(nrow, "NO_SJC", this.dsSearch.getColumn(0, "NO_SJC")); // 사업자번호
	this.dsList.setColumn(nrow, "TY_DEFAULT", "Y");
	this.dsList.setColumn(nrow, "YN_USE", "Y");
	this.dsList.setColumn(nrow, "DS_GUBUN", "20");		// 20:현금|21:전자
	
	this.dsList.set_enableevent(true);
}

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}

/*
 *	저장 버튼
 */
this.fnSave = function() {
	if (!this.gfnGridValidate(this.dxGrid)) return;

	this.dxGrid.updateToDataset();
	
	this.dsInsert.clearData();
	this.dsUpdate.clearData();
	this.dsDelete.clearData();
	
	//trace("this.dsList :: " + this.dsList.saveXML());
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "I":
				var nrow = this.dsInsert.addRow();
				this.dsInsert.setColumn(nrow, "NO_ACCOUNT", this.dsList.getColumn(i, "NM_ACCOUNT"));				// 계좌번호
				this.dsInsert.setColumn(nrow, "CD_OWNER", this.dsList.getColumn(i, "CD_OWNER"));					// 거래처코드
				this.dsInsert.setColumn(nrow, "CD_BANK", this.dsList.getColumn(i, "CD_BANK"));						// 은행코드
				this.dsInsert.setColumn(nrow, "NM_OPENER", this.dsList.getColumn(i, "NM_OPENER"));					// 예금주
				this.dsInsert.setColumn(nrow, "TY_GUBUN", this.dsList.getColumn(i, "DS_GUBUN"));					// 구분
				this.dsInsert.setColumn(nrow, "TY_DEFAULT", this.dsList.getColumn(i, "TY_DEFAULT"));				// 기본
				this.dsInsert.setColumn(nrow, "DS_MEMO", this.dsList.getColumn(i, "DS_MEMO"));						// 비고
				this.dsInsert.setColumn(nrow, "YN_USE", this.dsList.getColumn(i, "YN_USE"));						// 사용여부
				this.dsInsert.setColumn(nrow, "DT_HAEJI", this.dsList.getColumn(i, "DT_HAEJI"));					// 해지일자
				this.dsInsert.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);									
				this.dsInsert.setColumn(nrow, "CD_CORP", this.AuthClient.CD_CORP);									// 법인코드		
				this.dsInsert.setColumn(nrow, "TY_VENDOR", this.dsList.getColumn(i, "TY_VENDOR"));
				
				break;
				
			case "U":
				var nrow = this.dsUpdate.addRow();
				this.dsUpdate.setColumn(nrow, "NO_ACCOUNT", this.dsList.getColumn(i, "NM_ACCOUNT"));				// 계좌번호
				this.dsUpdate.setColumn(nrow, "CD_OWNER", this.dsList.getColumn(i, "CD_OWNER"));					// 거래처코드
				this.dsUpdate.setColumn(nrow, "CD_BANK", this.dsList.getColumn(i, "CD_BANK"));						// 은행코드
				this.dsUpdate.setColumn(nrow, "NM_OPENER", this.dsList.getColumn(i, "NM_OPENER"));					// 예금주
				this.dsUpdate.setColumn(nrow, "TY_GUBUN", this.dsList.getColumn(i, "DS_GUBUN"));					// 구분
				this.dsUpdate.setColumn(nrow, "TY_DEFAULT", this.dsList.getColumn(i, "TY_DEFAULT"));				// 기본
				this.dsUpdate.setColumn(nrow, "DS_MEMO", this.dsList.getColumn(i, "DS_MEMO"));						// 비고
				this.dsUpdate.setColumn(nrow, "YN_USE", this.dsList.getColumn(i, "YN_USE"));						// 사용여부
				this.dsUpdate.setColumn(nrow, "DT_HAEJI", this.dsList.getColumn(i, "DT_HAEJI"));					// 해지일자
				this.dsUpdate.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
				this.dsUpdate.setColumn(nrow, "CD_CORP", this.dsList.getColumn(i, "CD_CORP"));						// 법인코드
				this.dsUpdate.setColumn(nrow, "TY_VENDOR", this.dsList.getColumn(i, "TY_VENDOR"));
				
				break;
				
			case "D":
				var nrow = this.dsDelete.addRow();
				this.dsDelete.setColumn(nrow, "NO_ACCOUNT", this.dsList.getColumn(i, "NM_ACCOUNT"));				// 계좌번호
				this.dsDelete.setColumn(nrow, "TY_GUBUN", this.dsList.getColumn(i, "DS_GUBUN"));					// 구분
				this.dsDelete.setColumn(nrow, "CD_OWNER", this.dsList.getColumn(i, "CD_OWNER"));					// 거래처코드
				this.dsDelete.setColumn(nrow, "CD_CORP", this.dsList.getColumn(i, "CD_CORP"));						// 법인코드
				
				break;
		}
	}
	
	if (this.dsInsert.rowcount == 0 && this.dsUpdate.rowcount == 0 && this.dsDelete.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "insert=dsInsert update=dsUpdate delete=dsDelete";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {
	if (this.gfnIsNull(this.ccfCorpCd.form.CDTextBox.text)) {
		this.gfnAlert("법인코드가 입력되지 않았습니다.");
		this.ccfCorpCd.form.CDTextBox.setFocus();
		return false;
	}

// 	if (this.gfnIsNull(this.ccfDeptCode.form.CDTextBox.text)) {
// 		this.gfnAlert("거래처코드가 입력되지 않았습니다.");
// 		this.ccfDeptCode.form.CDTextBox.setFocus();
// 		return false;
// 	}
	return true;
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);
	
	}
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	
	} else if (svcID == "APRV") {
		this.gfnOpenAppr(function() {
			this.FormBtns.Select.click();
		});
	} else if (svcID == "APRVINIT") {
		this.FormBtns.Select.click();
	}
	else if(svcID == "accountValidate") {
		if (errorCode == 0) {
		
			var strFormId = "DSMEC_ACCOUNT_VERIFICATION";
			var strSubject = "거래처 계좌 검증 요청";
			strSubject = encodeURI(strSubject);
			var url = this.gfnGetConfig("DZ" , "GW_APROVAL_URL");
			url = url + "approval/legacy/goFormLink.do?legacyFormID=" + strFormId;
			url += "&mode=DRAFT";
			url += "&ID_USER=" + this.AuthClient.ID_USER;
			url += "&DS_KEY1=" + this.tmAppr;
			url += "&DS_KEY2="
			url += "&DS_KEY3="
			url += "&DS_KEY4="
			url += "&DS_KEY5="
			url += "&RTN_TITLE=" + strSubject;

			var new_window = window.open(url,"_blank", "width=790,height=1000,menubar=no,scrollbars=no,resizable=no,status=no");
			new_window.onbeforeunload = this.fnAprvDialogCallback();
			
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	
	// 예금주조회 결과처리
	else if(svcID == "accountCms") {
		if (errorCode == 0) {
			// 조회 건수 확인용(동기화)
			this.dsExeCnt.setColumn(0 ,"NO_CNT", nexacro.toNumber(this.dsExeCnt.getColumn(0, "NO_CNT"),0) + 1);
			var nExeCnt = nexacro.toNumber(this.dsExeCnt.getColumn(0, "NO_CNT"),0);
			var nCheckCnt = this.dsList.getCaseCount("CHK == 1 && " + this.ucFlag+" != '#'");
			trace("[예금주조회 콜백] 실행건수->" + nExeCnt+"  대상건수->" + nCheckCnt);
			if(nExeCnt == nCheckCnt){
				this.FormBtns.Select.click();
				this.dsExeCnt.clearData();
			}
		} else {
			this.gfnAlert(errorMsg);
		}
	}	
	else if(svcID == "appr") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {

	if (id == "ccfCorpCd") {
		dsUserParam.setColumn(nrow, "CD_GROUP", this.cdGroup);
	}

	if (id == "ccfDeptCode") {
		dsUserParam.setColumn(nrow, "TY_VENDOR1", "거래처");
		dsUserParam.setColumn(nrow, "CD_CORP", "");
	}
	return true;
} 

this.fnAfterCDTextChanged = function(id, codeFindData) {
	var arr = codeFindData;	
	switch(id) {
	case "ccfDeptCode":
		if(arr.length > 0) {
			this.dsSearch.setColumn(0, "DS_DAEPYO", arr[0]["DS_DAEPYO"]); // 대표자명
			this.dsSearch.setColumn(0, "NO_SJC", arr[0]["NO_SJC"]); // 사업자번호
		}else {
			this.fnSearchInit();
		}
		//trace(this.dsSearch.saveXML());
		break;		
	default:
	}	
	return true;	
} 

this.fnGrid_BeforuserDataSetParam = function(id, dsUserParam, nrow) {
	
	switch(id) {
	case "DFX_CFVENDOR": // 거래처코드
		dsUserParam.setColumn(nrow, "TY_VENDOR1", "거래처");
		dsUserParam.setColumn(nrow, "CD_CORP", "");
		break;
	default:
	}
	
	return true;
}

 this.fnGrid_ExpandUp = function(obj:nexacro.Grid, e:nexacro.GridMouseEventInfo) {

	var colnm = this.gfnGridGetBindColumnNameByIndex(obj, e.cell);
	
	if(colnm == "URL_PROOF") {
		// 최초 작성시엔 NO_SEQ가 없기 때문에 저장 후에 파일 첨부를 진행하여야 함.
		// CD_DIR에 넣어줄 값이 없기에 저장 후 진행!
		if(this.gfnGetFlag(this.dsList, e.row) == "I"){
			this.gfnAlert("저장 후 파일첨부 진행.");
			return false;
		}
	
	    var cdGubun = "";
		var cdDir = "";
		
		// 2019.09.23 계좌구분에 따른 cdGubun/cdDir 변경
		/*if (VcboAccntGb == "20" || VcboAccntGb == "21" || VcboAccntGb == "22") {
			cdGubun = "DH01";
			cdDir = "CD_OWNER";
		} else {*/
			cdGubun = "DF01";
			cdDir = "NO_ACCOUNT";		
		//}
		
		var fileManager = {};
		fileManager.CD_GUBUN = cdGubun;
		fileManager.CD_DIR = [this.dsList.getColumn(this.dsList.rowposition, cdDir)];
		fileManager.IS_READONLY = false;
// 		var fileManager = {};
// 		fileManager.CD_GUBUN = "DF01";
// 		fileManager.CD_DIR = [this.dsList.getColumn(e.row, "CD_ACCOUNT")];
// 		fileManager.IS_READONLY = false;
		
// 		trace("fileManager.CD_GUBUN :: " + fileManager.CD_GUBUN);
// 		trace("fileManager.CD_DIR :: " + fileManager.CD_DIR);
// 		trace("fileManager.IS_READONLY :: " + fileManager.IS_READONLY);
		
		this.gfnFileManager(fileManager, "fnFileCallback");
	}
}

 
/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
 // 셀 수정가능 여부 (반드시 EnterCell에서 처리할것)
// cell 수정안되는것만 return false 할것
// 마지막에 return true 해버리면 전체 컬럼 수정가능해져버림
this.fnGrid_EnterCell = function(obj:nexacro.Grid, row, cell) {
	var colnm = this.gfnGridGetBindColumnNameByIndex(obj, cell);
	

	var YN_CHECK = this.dsList.getColumn(row, "YN_CHECK");
	var ST_APRV = this.dsList.getColumn(row, "ST_APRV");
	//trace(colnm + "  셀 수정가능 여부 YN_APPR : " + YN_APPR + " / CD_AUTOSLIP : " + CD_AUTOSLIP + " / CD_APP : " + CD_APP);

	// 전자결재상태ST_APRV 공통코드 DZ - DZ_APRV
	// 1임시저장	2결재상신	3결재중	4결재완료	5반려	6상신취소	7작성취소
	if(ST_APRV == "1" || ST_APRV == "2" || ST_APRV == "3" || ST_APRV == "4" || YN_CHECK == "검증") {
	    if(colnm == "CD_BANK" || colnm == "NM_OPENER" || colnm == "DS_GUBUN"){
			return false;
		} 
		//if (colnm != "URL_PROOF" ){
		//	return false;
		//} 
		
	} 
	// if(YN_CHECK == "검증"){
	//	if(colnm == "CD_BANK" || colnm == "NM_OPENER" || colnm == "DS_GUBUN"){
	//		return false;
	//	} 
	//}

	//return true;
}

this.fnUpdateStatusExtendButton = function() {
	var nrow = this.dsList.rowposition;
	var bEnable = (nrow > 0) ? true : false;

	this.btnAprv.set_enable(bEnable && this.dsList.getColumn(nrow, "BTN_APRV") == "Y");
	this.btnDocQ.set_enable(bEnable && this.dsList.getColumn(nrow, "BTN_DOC_Q") == "Y");
	this.btnInit.set_enable(bEnable && this.dsList.getColumn(nrow, "BTN_INIT") == "Y");
}

this.fnGrid_RowCellChanged = function(obj:nexacro.Grid,e:nexacro.GridSelectEventInfo)
{
	if (!this.gfnGridIsRow(this.dxGrid)) return;
	
// 	if (this.gfnIsNull(this.dsList.getColumn(this.dsList.rowposition, "NO_DOC"))) {
// 		this.btnDocQ.set_enable(false);
// 		this.btnAprv.set_enable(true);
// 	}
// 	else {
// 		this.btnDocQ.set_enable(true);
// 		this.btnAprv.set_enable(false);
// 	}
	
	this.fnUpdateStatusExtendButton();
};
 
 /************************************************************************
 * 전자결재
 ************************************************************************/
 // 결재상신 버튼
this.fnAprv = function(obj:nexacro.Button, e:nexacro.ClickEventInfo) {
	if (!this.gfnGridIsRow(this.dxGrid)) return;

	if(this.dsList.getCaseCount("CHK == '1' && "+ this.ucFlag+" != '#'") == 0){
		this.gfnAlert("거래처 계좌신청 " + obj.text + " 대상을 체크하십시오.");
		return;
	}

	if(this.dsList.findRowExpr("CHK == 1 && (ST_APRV == '1' || ST_APRV == '2' || ST_APRV == '3' || ST_APRV == '4' ) && nx_flag != '#'") > -1){
		this.gfnAlert("결재상신된 항목이 체크되어 있습니다." );
		return;
	}

	
	// 예금주조회가 정상처리 완료 된 것을 체크 후 결재 상신 처리
	//if(this.dsList.findRowExpr("CHK == 1 && ER_MSG != '정상조회' && nx_flag != '#'") > -1){
	//	this.gfnAlert("예금주 조회가 정상처리된 항목만 상신 처리가 가능합니다.");
	//	return;
	//}

	this.gfnConfirm(this.fnAprvMsg(obj), function(strId, isOk) {  
		if(isOk == false) return;
		// ID_APRV: this.AuthClient.ID_SABUN,
		var initParam = {
			CD_CORP: this.ccfCorpCd.form.CDTextBox.value,
			ID_AP_TYPE: "DFB01",
			TY_WRK: "APRV",
			ID_APRV: this.AuthClient.ID_SABUN,
			TT_DOC: "거래처 계좌 신청",
			CD_CORP_SUFFIX : this.gfnGetConfig("DZ" , "CD_CORP_SUFFIX"),
		}
		this.gfnAprv(initParam, "fnAprvCallback", "APRV");
	});
}

// 결재문서조회 버튼
this.fnAprvDocQ = function(obj:nexacro.Button, e:nexacro.ClickEventInfo) {
	var cd_corp = this.dsList.getColumn(this.dsList.rowposition, "CD_CORP");
	var no_aprv = this.dsList.getColumn(this.dsList.rowposition, "NO_APRV");
	var no_doc = this.dsList.getColumn(this.dsList.rowposition, "NO_DOC");

	if(this.gfnIsNull(no_aprv) || this.gfnIsNull(no_doc)){
		return; 
	}

	var oParams = {
		CD_CORP: cd_corp,
		NO_APRV: no_aprv,
	}
	
	trace("CD_CORP->" + cd_corp);
	trace("NO_APRV->" + no_aprv);

	this.gfnAprvDoc(oParams, this.fnAprvDocQCallback);
}

this.fnAprvDocQCallback = function() {
	console.log('fnAprvDocQCallback');
	//alert('fnAprvDocQCallback');
}

// 결재상태초기화 버튼
this.fnAprvInit = function(obj:nexacro.Button, e:nexacro.ClickEventInfo) {
	if (!this.gfnGridIsRow(this.dxGrid)) return;
	
	//this.gfnConfirm(this.fnAprvMsg(obj), "fnAprvCallback", "APRVINIT");
	this.gfnConfirm(this.fnAprvMsg(obj), function(strId, isOk) {
		if (isOk == false) {
			return;
		}
		this.fnAprvCallback("APRVINIT", isOk);
	});	

}

this.fnAprvMsg = function(obj) {
	var nCnt = this.dsList.getCaseCount("CHK == '1' && "+ this.ucFlag+" != '#'");	
	var msg = "거래처 계좌 신청 "+nCnt+"건에 대하여\n";
	msg += "" + obj.text + " 하시겠습니까?";

	return msg;
}

// 결재상신 버튼 콜백
// 결재상태초기화 버튼 콜백
this.fnAprvCallback = function(strId, val) {

	this.dsApproval.clearData();
	this.dsApproval.addRow();

	var arrNoAccount = [];
	var arrTyGubun = [];
	var arrCdOwner = [];
	var arrCdCorp = [];
	
	for(var i = 0; i < this.dsList.rowcount; i++) {
		if(this.dsList.getColumn(i, this.ucFlag) != '#' && this.dsList.getColumn(i, "CHK") == 1){
			arrNoAccount.push(this.dsList.getColumn(i, "NO_ACCOUNT"));
			arrTyGubun.push(this.dsList.getColumn(i, "TY_GUBUN"));
			arrCdOwner.push(this.dsList.getColumn(i, "CD_OWNER"));
			arrCdCorp.push(this.dsList.getColumn(i, "CD_CORP"));
		}
	}

	this.dsApproval.setColumn(0, "TY_WRK",  strId);
	this.dsApproval.setColumn(0, "NO_ACCOUNT", arrNoAccount.join(';'));
	this.dsApproval.setColumn(0, "TY_GUBUN", arrTyGubun.join(';'));
	this.dsApproval.setColumn(0, "CD_OWNER", arrCdOwner.join(';'));
	this.dsApproval.setColumn(0, "CD_CORP", arrCdCorp.join(';'));
	this.dsApproval.setColumn(0, "ID_APRV", this.AuthClient.ID_SABUN);
	if (strId == "APRV") {
		this.dsApproval.setColumn(0, "NO_APRV", this.dsAprvOut.getColumn(0, "NO_APRV"));
	} else {
		this.dsApproval.setColumn(0, "NO_APRV", this.dsList.getColumn(this.dsList.rowposition, "NO_APRV"));
	}
	
	trace("결재상신 버튼 콜백!!! ->" + this.dsApproval.saveXML());

	var strSvcId    = strId;
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "aprv_execute=dsApproval";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction(strSvcId,		// transaction을 구분하기 위한 svc id값
						strSvcType, 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData, 		// 입력값으로 보낼 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						outData, 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc);	// 통신방법 정의 [생략가능]
}

/************************************************************************
 * 기타 이벤트
 ************************************************************************/
/*
 *	조회 조건 변경시 초기화
 */
this.fnSearchInit = function(obj,e) {
	if(e == null || (e.pretext != e.posttext)) {
		this.gfnSetFormStatus(this);
		this.gfnGridClear(this.dxGrid);
	}
};

this.ccfCorp_AfterCDTextChanged = function(id) {
// 	var arr = this.ccfCorp.form.SelectedData;
// 
// 	if (arr.length > 0) {
// 		var cd_system = arr[0]["CD_SYSTEM"];
// 		var ds_system = arr[0]["DS_SYSTEM"];
// 		var cd_module = arr[0]["CD_MODULE"];
// 		var ds_module = arr[0]["DS_MODULE"];
// 	}
};

this.fnDetail = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
}

this.fnDetailCallback = function(strId, val) {
};

// this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
// {
// 	trace("초기화");
// 	if ( e.oldvalue != e.newvalue ) {
// 		this.gfnSetFormStatus(this);
// 		this.gfnGridClear(this.dxGrid);			
// 	}
// };

this.fnFileCallback = function(strID, val) {
	// val.IsChange : 변경여부, val.Cnt : 파일개수
		
	// 파일개수를 다시 셋팅
	this.dsList.set_enableevent(false);
	if(val.Cnt == 0) {
		//this.dsList.setColumn(this.dsList.rowposition, "URL_PROOF", "첨부");
	}
	this.dsList.setColumn(this.dsList.rowposition, "URL_PROOF", "첨부(" + val.Cnt + ")");
	this.dsList.set_enableevent(true);
};

/*
 * 전자결재상신
 */
 
 // 전자결재상신 버튼 클릭시 팝업화면 호출
 this.fnAccountApp = function() {

	trace("tmAppr->" + this.tmAppr);

	var param = {};
	param.V1 = this.tmAppr;	// 계좌번호 (NO_ACCOUNT)
	param.ID_AP = this.dsList.getColumn(this.dsList.rowposition, "NO_APPR");	// 전자결재문서번호
	param.DS_ETITLE = "거래처 계좌 검증 요청";
	
	this.gfnFormOpen("DFB", "DFB_ACCOUNT_APP", "fnAprvDialogCallback", param, 1200, 700);
} 

this.fnAprvDialogCallback = function(svcID, value) {
	// 리턴값
	//if(value){
		// 결재완료, 결재취소, 결재상신 후에는 재조회를 한다
		this.FormBtns.Select.click();
	//}
};

this.fnAccountValidate  = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	if(!this.gfnGridIsRow(this.dxGrid)) return;
	
	this.dsAccountValidate.clearData();
	this.tmAppr = this.AuthClient.ID_USER + this.gfnGetDate("milli");
	
	for( var i =0; i < this.dsList.rowcount; i++){
		if( this.dsList.getColumn(i,"CHK") ) {
			var nrow = this.dsAccountValidate.addRow();
				
			this.dsAccountValidate.setColumn(nrow, "TM_APPR", this.tmAppr);	                             // 전자결재묵음KEY
			this.dsAccountValidate.setColumn(nrow, "NO_ACCOUNT", this.dsList.getColumn(i,"NM_ACCOUNT")); // 계좌번호
			this.dsAccountValidate.setColumn(nrow, "TY_GUBUN", this.dsList.getColumn(i,"DS_GUBUN"));	 // 계좌구분
			this.dsAccountValidate.setColumn(nrow, "CD_OWNER", this.dsList.getColumn(i,"CD_OWNER"));	 // 소유주	
			this.dsAccountValidate.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);					 // 사용자	
		}
	}
	if (this.dsAccountValidate.rowcount == 0) return;
	
	var strSvcId    = "accountValidate";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "accountValidate=dsAccountValidate";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); 	// 통신방법 정의 [생략가능]
}

/*
 * 전자결재문서조회
 */
this.fnAprovalDoc  = function(){
	if(!this.gfnGridIsRow(this.dxGrid)) return;
	
	if(this.gfnIsNull(this.dsList.getColumn(this.dsList.rowposition , "NO_APPR"))){
		this.gfnAlert("결재번호 정보가 존재하지 않습니다.");
		return;
	}
// 
// 	var nRow = this.dsList.rowposition;
// 	var param = {};	
// 
// 	param.PARAM01 = this.dsList.getColumn(nRow , "TM_APPR");
// 	param.PARAM02 = this.dsList.getColumn(nRow, "V_PARAM02");    
// 	param.PARAM03 = this.dsList.getColumn(nRow, "V_PARAM03");    
// 	param.PARAM04 = this.dsList.getColumn(nRow, "V_PARAM04");    
// 	param.ID_AP = this.dsList.getColumn(nRow, "NO_APPR");	// 전자결재문서번호
// 	param.YN_LINK = "N";	// 화면에서 팝업을 호출할경우 N, 링크를 통해서 화면을 오픈할경우 null 이다
	//param.NO_SILHENG = "";	
	//param.CD_ELAPPRGS = this.dsList.getColumn(nRow, "ST_APPR");	// 전자결재진행상태		

	// 화면 오픈. 
	// CD_MODULE은 보통 같은 모듈에서 호출하는 경우가 많으니 this.FormInfo.CD_MODULE 사용
	// 타 모듈 화면 호출시 지정할것.
	
	//this.gfnFormOpen("DFB", "DFB_ACCOUNT_APP", "fnAprvDialogCallback", param, 1200, 700);
	
// 	if(this.gfnIsNull(this.dsList.getColumn(this.dsList.rowposition , "NM_APPR"))){
// 		this.gfnAlert("결재문서번호 정보가 존재하지 않습니다.");
// 		return;
// 	}
// 
	var url = this.gfnGetConfig("DZ" , "GW_APROVAL_URL");
	url = url+"approval/legacy/goFormLink.do?";
	url +="mode=complete";
	url +="&ID_USER=" + this.AuthClient.ID_USER;
	url +="&fiid=" + this.dsList.getColumn(this.dsList.rowposition , "NO_APPR");
	var new_window = window.open(url,"_blank", "width=790,height=1000,menubar=no,scrollbars=no,resizable=no,status=no");
	new_window.onbeforeunload = this.fnAprvDialogCallback();
}

//계좌검증요청
this.fnAppr = function (obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	var sTyAppr = "01";
	this.fnExeAppr(sTyAppr);
};

//계좌검증요청취소
this.fnApprX = function (obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	var sTyAppr = "";
	this.fnExeAppr(sTyAppr);
};

// 계좌검증요청, 취소
this.fnExeAppr = function(sTyAppr){
/*
	@TY_GUBUN		VARCHAR(20),		--구분
	@NO_ACCOUNT		VARCHAR(30),		--계좌번호
	@CD_OWNER		VARCHAR(13),		--소유주코드
	@CD_CORP		VARCHAR(6),			--법인코드	
	@TY_APPR		VARCHAR(20),		--검증요청구분(검증요청 : '01', 검증요청취소 : '')
	@ID_USER		VARCHAR(20)			--사용자
*/
	// RAISERROR( '계좌번호[%s]는 검증처리된 계좌입니다. 검증요청 및 취소할 수 없습니다.', 16, 1, @NO_ACCOUNT)
	if(!this.gfnGridIsRow(this.dxGrid)) return;
	
	this.dsAppr.clearData();

	
	for( var i =0; i < this.dsList.rowcount; i++){
		if( this.dsList.getColumn(i,"CHK") ) {
			var nrow = this.dsAppr.addRow();

			this.dsAppr.setColumn(nrow, "TY_GUBUN", this.dsList.getColumn(i,"DS_GUBUN"));	// 계좌구분
			this.dsAppr.setColumn(nrow, "NO_ACCOUNT", this.dsList.getColumn(i, "NM_ACCOUNT"));
			this.dsAppr.setColumn(nrow, "CD_OWNER", this.dsList.getColumn(i, "CD_OWNER"));
			this.dsAppr.setColumn(nrow, "CD_CORP", this.dsList.getColumn(i, "CD_CORP"));
			this.dsAppr.setColumn(nrow, "TY_APPR", sTyAppr);
			this.dsAppr.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
		}
	}

	if (this.dsAppr.rowcount == 0) return;
		
	var strSvcId    = "appr";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "accountappr=dsAppr";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

// 예금주조회
this.fnAcntCms = function(){
	// http://10.211.200.68:8080
	var cmsUrl = this.gfnGetConfig("DF" , "DS_CMS_URL") + "/Woa/AccountName/";
	if(this.gfnIsNull(this.gfnGetConfig("DF" , "DS_CMS_URL"))){
		this.gfnAlert("환경변수(DS_CMS_URL)값이 입력되지 않았습니다. 시스템 담당자에게 문의하세요");
		return;
	}

	if(this.dsList.getCaseCount("CHK == '1' && "+ this.ucFlag+" != '#'") == 0){
		this.gfnAlert("예금주 조회 대상을 체크하십시오.");
		return;
	}
	
 	// 예금주 조회 전 체크 로직 : 계좌검증이 검증 상태인것은 예금주 조회 안되게 
 	if(this.dsList.findRowExpr("CHK == 1 && YN_CHECK == '검증' && nx_flag != '#'") > -1){
 		this.gfnAlert("검증 상태인 항목이 체크되어 있습니다.");
 		return;
 	}

	// 실행 건수 확인용(동기화)
	this.dsExeCnt.clearData();
	var nExeRow = this.dsExeCnt.addRow();
	this.dsExeCnt.setColumn(nExeRow ,"NO_CNT", 0);

	this.dsCheckAcntCms.clearData();
	for(var i=0; i<this.dsList.rowcount; i++){
		if(this.dsList.getColumn(i, "CHK") == 1 && this.dsList.getColumn(i, this.ucFlag) != "#"){

			// CD_BANK	은행코드
			var CD_BANK = this.dsList.getColumn(i ,"CD_BANK");

			// 예금주조회 오류발생시 계좌번호와 구분을 제외하고 수정가능하며 수정저장후 다시 예금주조회 가능			
			// NO_ACCOUNT	계좌번호
			var NO_ACCOUNT = this.gfnGetDigit(this.dsList.getColumn(i ,"NO_ACCOUNT"));
			
			
			// ① amt	조회금액
			// "성명조회시 사용할 금액. 기본 1으로 설정. 정확한 성명조회 이용 필요 시, 입금금액 등록(가상계좌에 사용)"

			// ② sessionID
			// 접근하려는 연계시스템 또는 사용자에 부여하는 Key값

			// ③ eCode	법인코드

			// ④ FIBankCode	성명조회를 수행할 모은행코드.
			// "특정 은행을 통해 성명조회를 수행할 경우의 모은행 코드를 나타냄. 기본은행이 설정되어 있음. 기본은행(020: 우리은행)"""

			// ⑤ birth	주민번호
			// "생년월일 또는 사업자번호 (FCS사용 시, 전은행 가능)"
			var NO_SJC = this.dsList.getColumn(i ,"NO_SJC");

			var nrow = this.dsCheckAcntCms.addRow();	
			this.dsCheckAcntCms.setColumn(nrow, "TY_GUBUN", this.dsList.getColumn(i, "TY_GUBUN"));
			this.dsCheckAcntCms.setColumn(nrow, "NO_ACCOUNT", NO_ACCOUNT);
			this.dsCheckAcntCms.setColumn(nrow, "CD_OWNER", this.dsList.getColumn(i, "CD_OWNER"));
			this.dsCheckAcntCms.setColumn(nrow, "CD_CORP", this.dsList.getColumn(i, "CD_CORP"));

			var context = "";
			if (nexacro.getEnvironmentVariable("evContextPath") != undefined) {
				context = nexacro.getEnvironmentVariable("evContextPath");
				context = context.substring(0, context.length - 1);
			}
			var url = context + "/api/account.do?url=" + cmsUrl + "&param1=" + CD_BANK + "&param2=" + NO_ACCOUNT +  "&type=json&amt=1"
			trace("[" + i+ "]" + url);

			this.fnCallAcntCms(nrow, url);
		}
	}
		
/*
	var CD_BANK = "020";
	var NM_ACCOUNT = "1002749642362";
	var url = "/api/account.do?url=" + cmsUrl + "&param1=" + CD_BANK + "&param2=" + NM_ACCOUNT +  "&type=" + sType + "&amt=1"
	trace("예금주조회 url->" + url);
	this.fnCallAcntCms(0, url);
*/

/*
	http://xxx.xxx.xxx.xxx:8080/Woa/AccountName/조회은행코드/조회계좌번호?type=xml&[amt=금액]&[sessionID=test]&[FIBankCode=BankCode]&[birth=생년월일 or 사업자번호]							
	   -> http://xxx.xxx.xxx.xxx:8080/Woa/AccountName/020/1002749642362?type=xml&amt=1							
								
	http://xxx.xxx.xxx.xxx:8080/Woa/AccountName/조회은행코드/조회계좌번호?type=json&[amt=금액]&[sessionID=test]&[FIBankCode=BankCode]&[birth=생년월일 or 사업자번호]							
	   -> http://xxx.xxx.xxx.xxx:8080/Woa/AccountName/020/1002749642362?type=json&amt=1							
								
	http://xxx.xxx.xxx.xxx:8080/Woa/AccountName/020/1002749642362?type=xml&amt=1&sessionID=test							
	http://xxx.xxx.xxx.xxx:8080/Woa/AccountName/088/100034855651?type=json&amt=1&sessionID=test&FIBankCode=020
	http://xxx.xxx.xxx.xxx:8080/Woa/AccountName/088/100034855651?type=xml&amt=1&sessionID=test&FIBankCode=020
*/
	
	//var url = "http://10.211.200.68:8080/Woa/AccountName/020/1002749642362?type=xml&amt=1  ";
	//var url = "http://10.211.200.68/api/account/020/1002749642362/get.do?type=json&amt=1";
	//var url = "/api/account.do?url=http://10.211.200.68:8080/Woa/AccountName/&param1=020&param2=1002749642362&type=json&amt=1"
}

this.fnCallAcntCms = function(nrow, url){
 	fetch(url, {
		method: "GET",
		headers: {
			"Accept": "*/*",
		},
	})
 	.then(response => response.json())
 	.then(res => {
		trace(res);
		trace("결과코드->" + res["R_CODE"]);
		trace("결과내용->" +res["R_MSG"]);
		trace("조회계좌명->" + res["조회계좌명"]);

		this.dsCheckAcntCms.setColumn(nrow, "ER_CODE", res["R_CODE"]);
		this.dsCheckAcntCms.setColumn(nrow, "ER_MSG", res["R_MSG"]);
		this.dsCheckAcntCms.setColumn(nrow, "NM_BRANCH", res["조회계좌명"]);
		this.dsCheckAcntCms.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);		

		// 예금주 조회 결과 처리
		this.fnAccountCmsCallback(nrow);

		// {"R_CODE":"0000","R_MSG":"정상조회","R_UserTrNo":"","조회은행코드":"020","조회계좌번호":"1002749642362","조회계좌명":"우봄"}
	});
}

// 예금주 조회 결과 처리
this.fnAccountCmsCallback = function(nRow){

// 	@TY_GUBUN		VARCHAR(20),		--구분
// 	@NO_ACCOUNT		VARCHAR(30),		--계좌번호
// 	@CD_OWNER		VARCHAR(13),		--소유주코드
// 	@CD_CORP		VARCHAR(6),			--법인코드	
// 	@ER_CODE		VARCHAR(50),		--에러코드 
//  @ER_MSG  		VARCHAR(100),       --에러 
// 	@NM_BRANCH		VARCHAR(100),		--예금주명 
//  @ID_USER        VARCHAR(20)         -- 
	
	
	if (this.dsCheckAcntCms.rowcount == 0) return;

	this.dsAcntCms.clearData();

	var nrow = this.dsAcntCms.addRow();	
	this.dsAcntCms.setColumn(nrow, "TY_GUBUN", this.dsCheckAcntCms.getColumn(nRow, "TY_GUBUN"));
	this.dsAcntCms.setColumn(nrow, "NO_ACCOUNT", this.dsCheckAcntCms.getColumn(nRow, "NO_ACCOUNT"));
	this.dsAcntCms.setColumn(nrow, "CD_OWNER", this.dsCheckAcntCms.getColumn(nRow, "CD_OWNER"));
	this.dsAcntCms.setColumn(nrow, "CD_CORP", this.dsCheckAcntCms.getColumn(nRow, "CD_CORP"));
	
	this.dsAcntCms.setColumn(nrow, "ER_CODE", this.dsCheckAcntCms.getColumn(nRow, "ER_CODE"));
	this.dsAcntCms.setColumn(nrow, "ER_MSG", this.dsCheckAcntCms.getColumn(nRow, "ER_MSG"));
	this.dsAcntCms.setColumn(nrow, "NM_BRANCH", this.dsCheckAcntCms.getColumn(nRow, "NM_BRANCH"));
	this.dsAcntCms.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);

	if (this.dsAcntCms.rowcount == 0) return;

	var strSvcId    = "accountCms";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "accountCms=dsAcntCms";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DFBPR_ACCOUNT_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">insert</Col>
            <Col id="SP">DFBPR_ACCOUNT_INSERT</Col>
          </Row>
          <Row>
            <Col id="TARGET">update</Col>
            <Col id="SP">DFBPR_ACCOUNT_UPDATE</Col>
          </Row>
          <Row>
            <Col id="TARGET">delete</Col>
            <Col id="SP">DFBPR_ACCOUNT_DELETE</Col>
          </Row>
          <Row>
            <Col id="TARGET">accountValidate</Col>
            <Col id="SP">DFBPR_ACCOUNT_GW_START</Col>
          </Row>
          <Row>
            <Col id="SP">DFBPR_ACCOUNT_APPR</Col>
            <Col id="TARGET">accountappr</Col>
          </Row>
          <Row>
            <Col id="TARGET">aprv_execute</Col>
            <Col id="SP">DFBPR_ACCOUNT_APRV_EXECUTE</Col>
          </Row>
          <Row>
            <Col id="SP">DFBPR_ACCOUNT_CMS_CALLBACK</Col>
            <Col id="TARGET">accountCms</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsYN_TERM">
        <ColumnInfo>
          <Column id="CODE" type="STRING" size="256"/>
          <Column id="VALUE" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CODE"/>
            <Col id="VALUE">전체</Col>
          </Row>
          <Row>
            <Col id="CODE">N</Col>
            <Col id="VALUE">N</Col>
          </Row>
          <Row>
            <Col id="CODE">Y</Col>
            <Col id="VALUE">Y</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch">
        <ColumnInfo>
          <Column id="CD_OWNER" type="STRING" size="256"/>
          <Column id="NO_ACCOUNT" type="STRING" size="256"/>
          <Column id="YN_HAEJI" type="STRING" size="256"/>
          <Column id="YN_CHECK" type="STRING" size="256"/>
          <Column id="DS_DAEPYO" type="STRING" size="256"/>
          <Column id="NO_SJC" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
      <Dataset id="dsCheckAcntCms">
        <ColumnInfo>
          <Column id="TY_GUBUN" type="STRING" size="256"/>
          <Column id="NO_ACCOUNT" type="STRING" size="256"/>
          <Column id="CD_OWNER" type="STRING" size="256"/>
          <Column id="CD_CORP" type="STRING" size="256"/>
          <Column id="ER_CODE" type="STRING" size="256"/>
          <Column id="ER_MSG" type="STRING" size="256"/>
          <Column id="NM_BRANCH" type="STRING" size="256"/>
          <Column id="ID_USER" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfDeptCode.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_OWNER"/>
      <BindItem id="item1" compid="divSearch.form.txtNO_ACCOUNT" propid="value" datasetid="dsSearch" columnid="NO_ACCOUNT"/>
      <BindItem id="item2" compid="this.divSearch.form.cboYN_TERM" propid="value" datasetid="dsSearch" columnid="YN_HAEJI"/>
    </Bind>
  </Form>
</FDL>
