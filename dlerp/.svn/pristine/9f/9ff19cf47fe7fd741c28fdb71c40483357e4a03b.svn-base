(function()
{
    return function()
    {
        if (!this._is_form)
            return;
        
        var obj = null;
        
        this.on_create = function()
        {
            this.set_name("form");
            this.set_titletext("New Form");
            if (Form == this.constructor)
            {
                this._setFormPosition(1280,720);
            }
            
            // Object(Dataset, ExcelExportObject) Initialize
            obj = new Dataset("dsList", this);
            obj._setContents("");
            this.addChild(obj.name, obj);


            obj = new Dataset("dsListRptProof", this);
            obj._setContents("");
            this.addChild(obj.name, obj);


            obj = new Dataset("_dsProc", this);
            obj._setContents("<ColumnInfo><Column id=\"TARGET\" type=\"STRING\" size=\"256\"/><Column id=\"SP\" type=\"STRING\" size=\"256\"/></ColumnInfo><Rows><Row><Col id=\"TARGET\">select</Col><Col id=\"SP\">DABPR_BZTP_RPT_SELECT</Col></Row><Row><Col id=\"TARGET\">save</Col><Col id=\"SP\">DABPR_BZTP_RPT_SAVE</Col></Row><Row><Col id=\"TARGET\">aprv_execute</Col><Col id=\"SP\">DABPR_BZTP_RPT_APRV_EXECUTE</Col></Row><Row><Col id=\"TARGET\">copy</Col><Col id=\"SP\">DABPR_BZTP_PLAN_DETAIL_COPY</Col></Row><Row><Col id=\"TARGET\">autoslip_execute</Col><Col id=\"SP\">DABPR_BZTP_RPT_AUTOSLIP_EXECUTE</Col></Row><Row><Col id=\"TARGET\">update_yn_ctrl</Col><Col id=\"SP\">DABPR_BZTP_RPT_YN_CTRL_UPDATE</Col></Row><Row><Col id=\"TARGET\">select_rpt_proof</Col><Col id=\"SP\">DABPR_BZTP_RPT_PROOF_SELECT</Col></Row></Rows>");
            this.addChild(obj.name, obj);


            obj = new Dataset("dsSearch", this);
            obj._setContents("<ColumnInfo><Column id=\"CD_CORP\" type=\"STRING\" size=\"256\"/><Column id=\"DS_CORP\" type=\"STRING\" size=\"256\"/><Column id=\"ID_SABUN_APL\" type=\"STRING\" size=\"256\"/><Column id=\"DS_HANME_APL\" type=\"STRING\" size=\"256\"/><Column id=\"DT_BZTP_FROM\" type=\"STRING\" size=\"256\"/><Column id=\"DT_BZTP_TO\" type=\"STRING\" size=\"256\"/></ColumnInfo><Rows><Row/></Rows>");
            this.addChild(obj.name, obj);
            
            // UI Components Initialize
            obj = new Div("divSearch","0","0",null,"46.0","0",null,null,null,null,null,this);
            obj.set_taborder("0");
            obj.set_cssclass("div_SEARCH_Bg");
            this.addChild(obj.name, obj);

            obj = new Static("staCD_CORP","0","10.0","66","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("0");
            obj.set_text("법인");
            obj.set_cssclass("sta_WF_SchLabelE");
            this.divSearch.addChild(obj.name, obj);

            obj = new Div("ccfCD_CORP","staCD_CORP:0.0","10.0","250","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.getSetter("CodeFindName").set("DAX_CFCORP_CODEFIND");
            obj.getSetter("CDTextWidth").set("50");
            obj.set_taborder("4");
            obj.set_url("cmm::cmmCodeFind.xfdl");
            obj.set_text("");
            this.divSearch.addChild(obj.name, obj);

            obj = new Static("staID_SABUN_APL","ccfCD_CORP:0","10.0","79","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("5");
            obj.set_text("신청자");
            obj.set_cssclass("sta_WF_SchLabel");
            this.divSearch.addChild(obj.name, obj);

            obj = new Div("ccfID_SABUN_APL","staID_SABUN_APL:0.0","10.0","250","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.getSetter("CodeFindName").set("DAX_CFBASEINFO_ALL");
            obj.getSetter("CDTextWidth").set("90");
            obj.set_taborder("6");
            obj.set_url("cmm::cmmCodeFind.xfdl");
            obj.set_text("");
            this.divSearch.addChild(obj.name, obj);

            obj = new Static("staDT_BZTP","ccfID_SABUN_APL:0.0","10.0","79","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("7");
            obj.set_text("출장일");
            obj.set_cssclass("sta_WF_SchLabel");
            this.divSearch.addChild(obj.name, obj);

            obj = new Calendar("ctclDT_BZTP_FROM","staDT_BZTP:10","10","105","24",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("1");
            obj.set_dateformat("yyyy-MM-dd");
            obj.set_editformat("yyyyMMdd");
            obj.set_autoselect("true");
            obj.set_value("");
            this.divSearch.addChild(obj.name, obj);

            obj = new Static("staDT_BUSINESS_range","ctclDT_BZTP_FROM:10","10","10","20",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("2");
            obj.set_text("~");
            this.divSearch.addChild(obj.name, obj);

            obj = new Calendar("ctclDT_BZTP_TO","staDT_BUSINESS_range:10","10","105","24",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("3");
            obj.set_dateformat("yyyy-MM-dd");
            obj.set_editformat("yyyyMMdd");
            obj.set_autoselect("true");
            obj.set_value("");
            this.divSearch.addChild(obj.name, obj);

            obj = new Div("divData","0","divSearch:10",null,null,"0","0",null,null,null,null,this);
            obj.set_taborder("0");
            obj.set_cssclass("div_DATA_Bg");
            this.addChild(obj.name, obj);

            obj = new Grid("objGrid","0","0",null,null,"0","0",null,null,null,null,this.divData.form);
            obj.set_taborder("0");
            obj._setContents("");
            this.divData.addChild(obj.name, obj);
            // Layout Functions
            //-- Default Layout : this
            obj = new Layout("default","",this._adjust_width,this._adjust_height,this,function(p){});
            this.addLayout(obj.name, obj);
            
            // BindItem Information
            obj = new BindItem("item0","divSearch.form.ccfCD_CORP.form.CDTextBox","value","dsSearch","CD_CORP");
            this.addChild(obj.name, obj);
            obj.bind();

            obj = new BindItem("item1","divSearch.form.ccfCD_CORP.form.DSTextBox","value","dsSearch","DS_CORP");
            this.addChild(obj.name, obj);
            obj.bind();

            obj = new BindItem("item2","divSearch.form.ccfID_SABUN_APL.form.CDTextBox","value","dsSearch","ID_SABUN_APL");
            this.addChild(obj.name, obj);
            obj.bind();

            obj = new BindItem("item3","divSearch.form.ccfID_SABUN_APL.form.DSTextBox","value","dsSearch","DS_HANME_APL");
            this.addChild(obj.name, obj);
            obj.bind();

            obj = new BindItem("item4","divSearch.form.ctclDT_BZTP_FROM","value","dsSearch","DT_BZTP_FROM");
            this.addChild(obj.name, obj);
            obj.bind();

            obj = new BindItem("item5","divSearch.form.ctclDT_BZTP_TO","value","dsSearch","DT_BZTP_TO");
            this.addChild(obj.name, obj);
            obj.bind();
            
            // TriggerItem Information

        };
        
        this.loadPreloadList = function()
        {
            this._addPreloadList("fdl","cmm::cmmCodeFind.xfdl");
        };
        
        // User Script
        this.registerScript("DAB_BZTP_RPT.xfdl", function() {
        this.objApp = this.gfnGetApplication();

        this.form_onload = function(obj,e) {
        	// -- 필수 -------------------//
        	this.gfnFormOnLoad(this);
        	this.gfnFormInfo(this);
        	// ---------------------------//

        	this.fnSetButton();
        	this.fnSetExtendButton();
        	this.fnSetVariable();
        	this.fnSetEvent();
        	this.fnSetParameter();
            this.fnSetCombo();
        	this.fnInit();
        }

        /************************************************************************
         * 버튼 설정 : 화면(Tab) 전환시 마다 호출
         ************************************************************************/
        this.fnSetButton = function() {

        }

        /************************************************************************
         * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
         ************************************************************************/
        this.fnSetExtendButton = function() {
        	this.btnPlan   = this.gfnFormButtonAdd("btnPlan"  , "fnPlan");			// 출장계획서 버튼
        	this.btnReport = this.gfnFormButtonAdd("btnReport", "fnReport");		// 출장보고서 버튼
        	this.btnAprv   = this.gfnFormButtonAdd("btnAprv"  , "fnAprv");			// 결재상신 버튼
        	this.btnDocQ   = this.gfnFormButtonAdd("btnDocQ"  , "fnAprvDocQ");		// 결재문서조회 버튼

        	this.btnSlip    = this.gfnFormButtonAdd("btnSlip"   , "fnSlip");		// 전표발행 버튼
        	this.btnSlipCnc = this.gfnFormButtonAdd("btnSlipCnc", "fnSlipCnc");		// 전표취소 버튼
        	this.btnSlipQ   = this.gfnFormButtonAdd("btnSlipQ"  , "fnSlipQ");		// 전표조회 버튼

        	this.btnInit   = this.gfnFormButtonAdd("btnInit"  , "fnAprvInit");		// 결재상태초기화 버튼
        }

        this.fnUpdateStatusExtendButton = function() {
        	var nrow = this.dsList.rowposition;

         	this.btnAprv.set_enable(this.dsList.getColumn(nrow, "BTN_APRV") == "Y");
         	this.btnDocQ.set_enable(this.dsList.getColumn(nrow, "BTN_DOC_Q") == "Y");
        	this.btnSlipQ.set_enable(this.dsList.getColumn(nrow, "BTN_SLIP_Q") == "Y");

        	var CD_MODULEGROUP_Q = this.gfnGetConfig("DZ", "CD_MODULEGROUP_Q").split("|");
        	this.btnSlip.set_enable(this.dsList.getColumn(nrow, "ST_APRV") == "4" && this.dsList.getColumn(nrow, "CD_TRADE") == undefined && (this.FormInfo.GR_SEARCH == 1 || CD_MODULEGROUP_Q.includes(this.FormInfo.ID_GROUP)));
        	this.btnSlipCnc.set_enable(this.dsList.getColumn(nrow, "ST_APRV") == "4" && this.dsList.getColumn(nrow, "CD_TRADE") != undefined && (this.FormInfo.GR_SEARCH == 1 || CD_MODULEGROUP_Q.includes(this.FormInfo.ID_GROUP)));
        	this.btnSlipQ.set_enable(this.dsList.getColumn(nrow, "CD_TRADE") != undefined);

         	this.btnInit.set_enable(this.dsList.getColumn(nrow, "BTN_INIT") == "Y");
        }

        /************************************************************************
         * 변수 선언
         ************************************************************************/
        this.fnSetVariable = function() {
        	// 그리드영역
        	this.dxGrid = this.divData.form.objGrid;

        	// 검색영역
        	this.ccfCD_CORP       = this.divSearch.form.ccfCD_CORP;			// 법인
        	this.ccfID_SABUN_APL  = this.divSearch.form.ccfID_SABUN_APL;	// 신청자
        	this.ctclDT_BZTP_FROM = this.divSearch.form.ctclDT_BZTP_FROM;	// 출장일(FROM)
        	this.ctclDT_BZTP_TO   = this.divSearch.form.ctclDT_BZTP_TO;		// 출장일(TO)
        }

        /************************************************************************
         * 이벤트 설정
         ************************************************************************/
        this.fnSetEvent = function() {
        	// 그리드영역
        	this.gfnGridInit(this.dxGrid, this.dsList, "DA", "DAB_BZTP_R");
        	this.dxGrid.BeforeUserDataSetParam = "fnGridBeforeUserDataSetParam";
        	this.dxGrid.AfterCDTextChanged     = "fnGridAfterCDTextChanged";
        	this.dxGrid.ExpandUp               = "fnGridExpandUp";
        	// 입축국항공료
         	this.gfnGridColumnColor(this.dxGrid, "YN_IOUTBRUFLGTNOT_BDGT"     , "BACK_ChongKe,Red", "YN_IOUTBRUFLGTNOT_BDGT == 'Y'");
         	this.gfnGridColumnColor(this.dxGrid, "IOUTBRUFLGTNOT_BDGT_KRW_PLN", "BACK_GangJo,Red", "YN_IOUTBRUFLGTNOT_BDGT == 'Y'");
         	this.gfnGridColumnColor(this.dxGrid, "IOUTBRUFLGTNOT_BDGT_KRW_RPT", "BACK_GangJo,Red", "YN_IOUTBRUFLGTNOT_BDGT == 'Y'");
        	// 철도비
         	this.gfnGridColumnColor(this.dxGrid, "YN_RAILNOT_BDGT"     , "BACK_GangJo,Red", "YN_RAILNOT_BDGT == 'Y'");
         	this.gfnGridColumnColor(this.dxGrid, "RAILNOT_BDGT_KRW_PLN", "BACK_GangJo,Red", "YN_RAILNOT_BDGT == 'Y'");
         	this.gfnGridColumnColor(this.dxGrid, "RAILNOT_BDGT_KRW_RPT", "BACK_GangJo,Red", "YN_RAILNOT_BDGT == 'Y'");
        	// 선박비
         	this.gfnGridColumnColor(this.dxGrid, "YN_SHIPNOT_BDGT"     , "BACK_GangJo,Red", "YN_SHIPNOT_BDGT == 'Y'");
         	this.gfnGridColumnColor(this.dxGrid, "SHIPNOT_BDGT_KRW_PLN", "BACK_GangJo,Red", "YN_SHIPNOT_BDGT == 'Y'");
         	this.gfnGridColumnColor(this.dxGrid, "SHIPNOT_BDGT_KRW_RPT", "BACK_GangJo,Red", "YN_SHIPNOT_BDGT == 'Y'");
        	// 항공비
         	this.gfnGridColumnColor(this.dxGrid, "YN_FLGTNOT_BDGT"     , "BACK_GangJo,Red", "YN_FLGTNOT_BDGT == 'Y'");
         	this.gfnGridColumnColor(this.dxGrid, "FLGTNOT_BDGT_KRW_PLN", "BACK_GangJo,Red", "YN_FLGTNOT_BDGT == 'Y'");
         	this.gfnGridColumnColor(this.dxGrid, "FLGTNOT_BDGT_KRW_RPT", "BACK_GangJo,Red", "YN_FLGTNOT_BDGT == 'Y'");
        	// 자동차비
         	this.gfnGridColumnColor(this.dxGrid, "YN_CARNOT_BDGT"     , "BACK_GangJo,Red", "YN_CARNOT_BDGT == 'Y'");
         	this.gfnGridColumnColor(this.dxGrid, "CARNOT_BDGT_KRW_PLN", "BACK_GangJo,Red", "YN_CARNOT_BDGT == 'Y'");
         	this.gfnGridColumnColor(this.dxGrid, "CARNOT_BDGT_KRW_RPT", "BACK_GangJo,Red", "YN_CARNOT_BDGT == 'Y'");
        	// 숙박비
         	this.gfnGridColumnColor(this.dxGrid, "YN_LDGGNOT_BDGT"     , "BACK_GangJo,Red", "YN_LDGGNOT_BDGT == 'Y'");
         	this.gfnGridColumnColor(this.dxGrid, "LDGGNOT_BDGT_KRW_PLN", "BACK_GangJo,Red", "YN_LDGGNOT_BDGT == 'Y'");
         	this.gfnGridColumnColor(this.dxGrid, "LDGGNOT_BDGT_KRW_RPT", "BACK_GangJo,Red", "YN_LDGGNOT_BDGT == 'Y'");
        	// 식비
         	this.gfnGridColumnColor(this.dxGrid, "YN_CRMNNOT_BDGT"     , "BACK_GangJo,Red", "YN_CRMNNOT_BDGT == 'Y'");
         	this.gfnGridColumnColor(this.dxGrid, "CRMNNOT_BDGT_KRW_PLN", "BACK_GangJo,Red", "YN_CRMNNOT_BDGT == 'Y'");
         	this.gfnGridColumnColor(this.dxGrid, "CRMNNOT_BDGT_KRW_RPT", "BACK_GangJo,Red", "YN_CRMNNOT_BDGT == 'Y'");
        	// 잡비
         	this.gfnGridColumnColor(this.dxGrid, "YN_ETCNOT_BDGT"     , "BACK_GangJo,Red", "YN_ETCNOT_BDGT == 'Y'");
         	this.gfnGridColumnColor(this.dxGrid, "ETCNOT_BDGT_KRW_PLN", "BACK_GangJo,Red", "YN_ETCNOT_BDGT == 'Y'");
         	this.gfnGridColumnColor(this.dxGrid, "ETCNOT_BDGT_KRW_RPT", "BACK_GangJo,Red", "YN_ETCNOT_BDGT == 'Y'");
        	// 통신비(로밍)
         	this.gfnGridColumnColor(this.dxGrid, "YN_COMMNOT_BDGT"     , "BACK_GangJo,Red", "YN_COMMNOT_BDGT == 'Y'");
         	this.gfnGridColumnColor(this.dxGrid, "COMMNOT_BDGT_KRW_PLN", "BACK_GangJo,Red", "YN_COMMNOT_BDGT == 'Y'");
         	this.gfnGridColumnColor(this.dxGrid, "COMMNOT_BDGT_KRW_RPT", "BACK_GangJo,Red", "YN_COMMNOT_BDGT == 'Y'");
        	// VISA 발급수수료
         	this.gfnGridColumnColor(this.dxGrid, "YN_VISAPBCNCMMS_BDGT"     , "BACK_GangJo,Red", "YN_VISAPBCNCMMS_BDGT == 'Y'");
         	this.gfnGridColumnColor(this.dxGrid, "VISAPBCNCMMS_BDGT_KRW_PLN", "BACK_GangJo,Red", "YN_VISAPBCNCMMS_BDGT == 'Y'");
         	this.gfnGridColumnColor(this.dxGrid, "VISAPBCNCMMS_BDGT_KRW_RPT", "BACK_GangJo,Red", "YN_VISAPBCNCMMS_BDGT == 'Y'");
        	// 추가비용1
         	this.gfnGridColumnColor(this.dxGrid, "YN_INSRCOST_BDGT"     , "BACK_GangJo,Red", "YN_INSRCOST_BDGT == 'Y'");
         	this.gfnGridColumnColor(this.dxGrid, "INSRCOST_BDGT_KRW_PLN", "BACK_GangJo,Red", "YN_INSRCOST_BDGT == 'Y'");
         	this.gfnGridColumnColor(this.dxGrid, "INSRCOST_BDGT_KRW_RPT", "BACK_GangJo,Red", "YN_INSRCOST_BDGT == 'Y'");
        	// 추가비용2
         	this.gfnGridColumnColor(this.dxGrid, "YN_ETCADTNCOST_BDGT"     , "BACK_GangJo,Red", "YN_ETCADTNCOST_BDGT == 'Y'");
         	this.gfnGridColumnColor(this.dxGrid, "ETCADTNCOST_BDGT_KRW_PLN", "BACK_GangJo,Red", "YN_ETCADTNCOST_BDGT == 'Y'");
         	this.gfnGridColumnColor(this.dxGrid, "ETCADTNCOST_BDGT_KRW_RPT", "BACK_GangJo,Red", "YN_ETCADTNCOST_BDGT == 'Y'");
        	// 교제비
         	this.gfnGridColumnColor(this.dxGrid, "YN_TCHMCOST_BDGT"     , "BACK_GangJo,Red", "YN_TCHMCOST_BDGT == 'Y'");
         	this.gfnGridColumnColor(this.dxGrid, "TCHMCOST_BDGT_KRW_PLN", "BACK_GangJo,Red", "YN_TCHMCOST_BDGT == 'Y'");
         	this.gfnGridColumnColor(this.dxGrid, "TCHMCOST_BDGT_KRW_RPT", "BACK_GangJo,Red", "YN_TCHMCOST_BDGT == 'Y'");

        	// 검색영역
        	this.ccfCD_CORP.BeforeUserDataSetParam      = "fnBeforeUserDataSetParam";
        	this.ccfCD_CORP.AfterCDTextChanged          = "fnAfterCDTextChanged";
        	this.ccfID_SABUN_APL.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
        	this.ccfID_SABUN_APL.AfterCDTextChanged     = "fnAfterCDTextChanged";
        }

        /************************************************************************
         * 파라미터 설정
         ************************************************************************/
        this.fnSetParameter = function() {
        	// 출장계획서 복사
        	this.dsCopy = new Dataset();
        	this.dsCopy.addColumn("CD_CORP", "string");
        	this.dsCopy.addColumn("SN_BZTPSEQ", "string");
        	this.dsCopy.addColumn("ID_SABUN_BZTP", "string");
        	this.dsCopy.addColumn("ID_SABUN_APL", "string");
        	this.dsCopy.addColumn("DT_WRITE", "string");

        	// 출장보고서 조회
        	this.dsSelect = new Dataset();
        	this.dsSelect.addColumn("CD_CORP", "string");
        	this.dsSelect.addColumn("ID_SABUN_APL", "string");
        	this.dsSelect.addColumn("DT_BZTP_FROM", "string");
        	this.dsSelect.addColumn("DT_BZTP_TO", "string");
        	this.dsSelect.addColumn("TY_BZTP", "string");

        	// 전자결재
        	this.dsApproval = new Dataset();
        	this.dsApproval.addColumn("TY_WRK", "string");
        	this.dsApproval.addColumn("CD_CORP", "string");
        	this.dsApproval.addColumn("SN_BZTPSEQ", "string");
        	this.dsApproval.addColumn("TY_BZTP", "string");
        	this.dsApproval.addColumn("ID_APRV", "string");
        	this.dsApproval.addColumn("NO_APRV", "int");

        	// 전표
        	this.dsAutoSlip = new Dataset();
        	this.dsAutoSlip.addColumn("TY_WRK", "string");
        	this.dsAutoSlip.addColumn("CD_CORP", "string");
        	this.dsAutoSlip.addColumn("SN_BZTPSEQ", "string");
        	this.dsAutoSlip.addColumn("ID_SABUN_BZTP", "string");
        	this.dsAutoSlip.addColumn("DT_ACCOUNT", "string");
        	this.dsAutoSlip.addColumn("DS_REM", "string");
        	this.dsAutoSlip.addColumn("ID_USER", "string");

        	// 예산통제
        	this.dsUpdateYnCtrl = new Dataset();
        	this.dsUpdateYnCtrl.addColumn("CD_CORP", "string");
        	this.dsUpdateYnCtrl.addColumn("SEQ_BZTP", "string");
        	this.dsUpdateYnCtrl.addColumn("ID_SABUN_BZTP", "string");
        	this.dsUpdateYnCtrl.addColumn("TY_BZTP", "string");
        	this.dsUpdateYnCtrl.addColumn("YN_CTRL", "string");
        	this.dsUpdateYnCtrl.addColumn("ID_SABUN", "string");

        	// 출장비용증빙 조회
        	this.dsSelectRptProof = new Dataset();
        	this.dsSelectRptProof.addColumn("CD_CORP", "string");
        	this.dsSelectRptProof.addColumn("SN_BZTPSEQ", "string");
        	this.dsSelectRptProof.addColumn("ID_SABUN_BZTP", "string");
        	this.dsSelectRptProof.addColumn("TY_BZTP", "string");
        }

        /************************************************************************
         * 콤보 데이터 조회 및 설정
         ************************************************************************/
        this.fnSetCombo = function() {

        }

        /************************************************************************
         * 화면 및 검색영역 초기화
         ************************************************************************/
        this.fnInit = function() {
        	if (this.getOwnerFrame().items != undefined && this.getOwnerFrame().items.length > 0) {
        		var items = this.getOwnerFrame().items;

        		for (var i = 0; i < items.length; i++) {
        			var CD_CORP       = items[i].CD_CORP;
        			var SN_BZTPSEQ    = items[i].SN_BZTPSEQ;
        			var ID_SABUN_BZTP = items[i].ID_SABUN_BZTP;
        			var ID_SABUN_APL  = items[i].ID_SABUN_APL;
        			var DT_WRITE      = items[i].DT_WRITE;

        			this.fnCopy(CD_CORP, SN_BZTPSEQ, ID_SABUN_BZTP, ID_SABUN_APL, DT_WRITE);
        		}
        	}

        	this.dsSearch.setColumn(0, "CD_CORP",      this.AuthClient.CD_CORP);	// 법인
        	this.dsSearch.setColumn(0, "DS_CORP",      this.AuthClient.DS_CORP);
        	if (this.FormInfo.GR_SEARCH == "1") {
        		this.dsSearch.setColumn(0, "ID_SABUN_APL", "");		// 신청자
        		this.dsSearch.setColumn(0, "DS_HANME_APL", "");
        	} else {
        		this.dsSearch.setColumn(0, "ID_SABUN_APL", this.AuthClient.ID_SABUN);	// 신청자
        		this.dsSearch.setColumn(0, "DS_HANME_APL", this.AuthClient.DS_HNAME);
        	}
        	this.dsSearch.setColumn(0, "DT_BZTP_FROM", this.gfnAddMonth(this.gfnGetDate().substr(0, 8), -1));	// 출장일
        	this.dsSearch.setColumn(0, "DT_BZTP_TO",   this.gfnAddMonth(this.gfnGetDate().substr(0, 8), 2));

        	// 확장버튼 상태 변경
        	this.fnUpdateStatusExtendButton();

        	// 조회여부
        	if (this.getOwnerFrame().SELECT) {
        		this.FormBtns.Select.click();
        	}

        	// 권한설정
        	if (this.FormInfo.GR_SEARCH == "9") {
        		this.ccfCD_CORP.set_enable(false);
        		this.ccfID_SABUN_APL.form.set_readonly(false);
        		this.ccfID_SABUN_APL.form.set_enable(false);
        		var CD_MODULEGROUP_Q = this.gfnGetConfig("DZ", "CD_MODULEGROUP_Q").split("|");
        		if (CD_MODULEGROUP_Q.includes(this.FormInfo.ID_GROUP)) {
        			this.ccfID_SABUN_APL.form.set_enable(true);
        		}
        	}

        	// 통제여부 필드 설정
        	if (this.FormInfo.ID_GROUP == "H" && this.FormInfo.ID_GROUP == "I") {
        		this.dxGrid.setFormatColProperty(this.dxGrid.getBindCellIndex("body", "YN_CTRL"), "size", 100);
        		this.dxGrid.setFormatColProperty(this.dxGrid.getBindCellIndex("body", "YN_OVER"), "size", 80);
        		// 입축국항공료
        		this.dxGrid.setFormatColProperty(this.dxGrid.getBindCellIndex("body", "YN_IOUTBRUFLGTNOT_BDGT"), "size", 80);
        		this.dxGrid.setFormatColProperty(this.dxGrid.getBindCellIndex("body", "IOUTBRUFLGTNOT_BDGT_KRW_PLN"), "size", 100);
        		this.dxGrid.setFormatColProperty(this.dxGrid.getBindCellIndex("body", "IOUTBRUFLGTNOT_BDGT_KRW_RPT"), "size", 100);
        		// 철도비
        		this.dxGrid.setFormatColProperty(this.dxGrid.getBindCellIndex("body", "YN_RAILNOT_BDGT"), "size", 80);
        		this.dxGrid.setFormatColProperty(this.dxGrid.getBindCellIndex("body", "RAILNOT_BDGT_KRW_PLN"), "size", 100);
        		this.dxGrid.setFormatColProperty(this.dxGrid.getBindCellIndex("body", "RAILNOT_BDGT_KRW_RPT"), "size", 100);
        		// 선박비
        		this.dxGrid.setFormatColProperty(this.dxGrid.getBindCellIndex("body", "YN_SHIPNOT_BDGT"), "size", 80);
        		this.dxGrid.setFormatColProperty(this.dxGrid.getBindCellIndex("body", "SHIPNOT_BDGT_KRW_PLN"), "size", 100);
        		this.dxGrid.setFormatColProperty(this.dxGrid.getBindCellIndex("body", "SHIPNOT_BDGT_KRW_RPT"), "size", 100);
        		// 항공비
        		this.dxGrid.setFormatColProperty(this.dxGrid.getBindCellIndex("body", "YN_FLGTNOT_BDGT"), "size", 80);
        		this.dxGrid.setFormatColProperty(this.dxGrid.getBindCellIndex("body", "FLGTNOT_BDGT_KRW_PLN"), "size", 100);
        		this.dxGrid.setFormatColProperty(this.dxGrid.getBindCellIndex("body", "FLGTNOT_BDGT_KRW_RPT"), "size", 100);
        		// 자동차비
        		this.dxGrid.setFormatColProperty(this.dxGrid.getBindCellIndex("body", "YN_CARNOT_BDGT"), "size", 80);
        		this.dxGrid.setFormatColProperty(this.dxGrid.getBindCellIndex("body", "CARNOT_BDGT_KRW_PLN"), "size", 100);
        		this.dxGrid.setFormatColProperty(this.dxGrid.getBindCellIndex("body", "CARNOT_BDGT_KRW_RPT"), "size", 100);
        		// 숙박비
        		this.dxGrid.setFormatColProperty(this.dxGrid.getBindCellIndex("body", "YN_LDGGNOT_BDGT"), "size", 80);
        		this.dxGrid.setFormatColProperty(this.dxGrid.getBindCellIndex("body", "LDGGNOT_BDGT_KRW_PLN"), "size", 100);
        		this.dxGrid.setFormatColProperty(this.dxGrid.getBindCellIndex("body", "LDGGNOT_BDGT_KRW_RPT"), "size", 100);
        		// 식비
        		this.dxGrid.setFormatColProperty(this.dxGrid.getBindCellIndex("body", "YN_CRMNNOT_BDGT"), "size", 80);
        		this.dxGrid.setFormatColProperty(this.dxGrid.getBindCellIndex("body", "CRMNNOT_BDGT_KRW_PLN"), "size", 100);
        		this.dxGrid.setFormatColProperty(this.dxGrid.getBindCellIndex("body", "CRMNNOT_BDGT_KRW_RPT"), "size", 100);
        		// 잡비
        		this.dxGrid.setFormatColProperty(this.dxGrid.getBindCellIndex("body", "YN_ETCNOT_BDGT"), "size", 80);
        		this.dxGrid.setFormatColProperty(this.dxGrid.getBindCellIndex("body", "ETCNOT_BDGT_KRW_PLN"), "size", 100);
        		this.dxGrid.setFormatColProperty(this.dxGrid.getBindCellIndex("body", "ETCNOT_BDGT_KRW_RPT"), "size", 100);
        		// 통신비(로밍)
        		this.dxGrid.setFormatColProperty(this.dxGrid.getBindCellIndex("body", "YN_COMMNOT_BDGT"), "size", 80);
        		this.dxGrid.setFormatColProperty(this.dxGrid.getBindCellIndex("body", "COMMNOT_BDGT_KRW_PLN"), "size", 100);
        		this.dxGrid.setFormatColProperty(this.dxGrid.getBindCellIndex("body", "COMMNOT_BDGT_KRW_RPT"), "size", 100);
        		// VISA 발급수수료
        		this.dxGrid.setFormatColProperty(this.dxGrid.getBindCellIndex("body", "YN_VISAPBCNCMMS_BDGT"), "size", 80);
        		this.dxGrid.setFormatColProperty(this.dxGrid.getBindCellIndex("body", "VISAPBCNCMMS_BDGT_KRW_PLN"), "size", 100);
        		this.dxGrid.setFormatColProperty(this.dxGrid.getBindCellIndex("body", "VISAPBCNCMMS_BDGT_KRW_RPT"), "size", 100);
        		// 추가비용1
        		this.dxGrid.setFormatColProperty(this.dxGrid.getBindCellIndex("body", "YN_INSRCOST_BDGT"), "size", 80);
        		this.dxGrid.setFormatColProperty(this.dxGrid.getBindCellIndex("body", "INSRCOST_BDGT_KRW_PLN"), "size", 100);
        		this.dxGrid.setFormatColProperty(this.dxGrid.getBindCellIndex("body", "INSRCOST_BDGT_KRW_RPT"), "size", 100);
        		// 추가비용2
        		this.dxGrid.setFormatColProperty(this.dxGrid.getBindCellIndex("body", "YN_ETCADTNCOST_BDGT"), "size", 80);
        		this.dxGrid.setFormatColProperty(this.dxGrid.getBindCellIndex("body", "ETCADTNCOST_BDGT_KRW_PLN"), "size", 100);
        		this.dxGrid.setFormatColProperty(this.dxGrid.getBindCellIndex("body", "ETCADTNCOST_BDGT_KRW_RPT"), "size", 100);
        		// 교제비
        		this.dxGrid.setFormatColProperty(this.dxGrid.getBindCellIndex("body", "YN_TCHMCOST_BDGT"), "size", 80);
        		this.dxGrid.setFormatColProperty(this.dxGrid.getBindCellIndex("body", "TCHMCOST_BDGT_KRW_PLN"), "size", 100);
        		this.dxGrid.setFormatColProperty(this.dxGrid.getBindCellIndex("body", "TCHMCOST_BDGT_KRW_RPT"), "size", 100);
        	}
        }

        /************************************************************************
         * 버튼 이벤트
         ************************************************************************/
         /*
          *	조회 버튼
          */
        this.fnSelect = function() {
        	if (!this.gfnSearchValidate(this.divSearch, this.dsSearch)) return false;

        	this.gfnGridBeforeSelect(this.dxGrid);

        	this.dsSelect.clearData();
        	this.dsSelect.addRow();
        	this.dsSelect.setColumn(0, "CD_CORP",      this.dsSearch.getColumn(0, "CD_CORP"));
        	this.dsSelect.setColumn(0, "ID_SABUN_APL", this.dsSearch.getColumn(0, "ID_SABUN_APL"));
        	this.dsSelect.setColumn(0, "DT_BZTP_FROM", this.dsSearch.getColumn(0, "DT_BZTP_FROM"));
        	this.dsSelect.setColumn(0, "DT_BZTP_TO",   this.dsSearch.getColumn(0, "DT_BZTP_TO"));
        	this.dsSelect.setColumn(0, "TY_BZTP",      "R");

        	var strSvcId    = "select";
        	var strSvcType  = "grid";
        	var inProc		= "_dsProc";
        	var inData      = "select=dsSelect";
        	var outData     = "dsList=select0";
        	var strArg      = "";
        	var callBackFnc = "fnCallback";

        	this.gfnTransaction(strSvcId,		// transaction을 구분하기 위한 svc id값
        						strSvcType, 	// transaction을 요청할 구분
        						inProc,			// Procedure 정보 Dataset 이름
        						inData, 		// 입력값으로 보낼 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        						outData, 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
        						callBackFnc);	// 통신방법 정의 [생략가능]
        }

        /*
         *	입력 버튼
         */
        this.fnAdd = function() {
        	if (this.gfnIsNull(this.dsSearch.getColumn(0, "CD_CORP"))) {
        		this.fnValidCallback = function() {
        			this.ccfCD_CORP.form.CDTextBox.setFocus();
        		}
        		this.gfnAlert("법인을 입력하세요.", "fnValidCallback");
        		return false;
        	}

        	var nrow = this.gfnGridAdd(this.dxGrid);
        	this.dsList.setColumn(nrow, "CD_CORP",      this.dsSearch.getColumn(0, "CD_CORP"));			// 법인
        	this.dsList.setColumn(nrow, "DS_CORP",      this.dsSearch.getColumn(0, "DS_CORP"));
        	this.dsList.setColumn(nrow, "TY_BZTP",      "P");											// 유형
        	this.dsList.setColumn(nrow, "DT_WRITE",     this.gfnGetDate().substr(0, 8));				// 작성일자
        	this.dsList.setColumn(nrow, "ID_SABUN_APL", this.dsSearch.getColumn(0, "ID_SABUN_APL"));	// 신청자
        	this.dsList.setColumn(nrow, "DS_HANME_APL", this.dsSearch.getColumn(0, "DS_HANME_APL"));
        }

        /*
         *	삭제 버튼
         */
        this.fnDel = function() {
        	this.gfnGridDel(this.dxGrid);
        }

        /*
         *	저장 버튼
         */
        this.fnSave = function() {
        	if (!this.gfnGridValidate(this.dxGrid)) return;

        	this.dxGrid.updateToDataset();
        	this.dsUpdateYnCtrl.clearData();

        	for (var i = 0; i < this.dsList.rowcount; i++) {
        		var flag = this.gfnGetFlag(this.dsList, i);
        		switch(flag) {
        		case "I":
        		case "U":
        		case "D":
        			var nrow = this.dsUpdateYnCtrl.addRow();
        			this.dsUpdateYnCtrl.setColumn(nrow, "CD_CORP"      , this.dsList.getColumn(i, "CD_CORP"));
        			this.dsUpdateYnCtrl.setColumn(nrow, "SEQ_BZTP"     , this.dsList.getColumn(i, "SN_BZTPSEQ"));
        			this.dsUpdateYnCtrl.setColumn(nrow, "ID_SABUN_BZTP", this.dsList.getColumn(i, "ID_SABUN_BZTP"));
        			this.dsUpdateYnCtrl.setColumn(nrow, "TY_BZTP"      , this.dsList.getColumn(i, "TY_BZTP"));
        			this.dsUpdateYnCtrl.setColumn(nrow, "YN_CTRL"      , this.dsList.getColumn(i, "YN_CTRL"));
        			this.dsUpdateYnCtrl.setColumn(nrow, "ID_SABUN"     , this.AuthClient.ID_SABUN);

        			break;
        		}
        	}

        	if (this.dsUpdateYnCtrl.rowcount == 0) return;

        	var strSvcId    = "update_yn_ctrl";
        	var strSvcType  = "save";
        	var inProc		= "_dsProc";
        	var inData      = "update_yn_ctrl=dsUpdateYnCtrl";
        	var outData     = "";
        	var strArg      = "";
        	var callBackFnc = "fnCallback";

        	this.gfnTransaction(strSvcId,		// transaction을 구분하기 위한 svc id값
        						strSvcType, 	// transaction을 요청할 구분
        						inProc,			// Procedure 정보 Dataset 이름
        						inData, 		// 입력값으로 보낼 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        						outData, 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
        						callBackFnc);	// 통신방법 정의 [생략가능]
        }

        /*
         *	엑셀 버튼
         */
        this.fnExcel = function() {
        	this.gfnExcelExport(this.dxGrid);
        }

        /*
         *	출력 버튼
         */
        this.fnPrint = function() {
        	return true;
        }

        /************************************************************************
         * Validate
         ************************************************************************/
        this.fnSelectValidate = function() {
        	return true;
        }

        /************************************************************************
         * 확장버튼 이벤트
         ************************************************************************/
        // 출장계획서 버튼
        this.fnPlan = function() {
        	var nrow = this.dsList.rowposition;

        	var param = {};
         	param.CD_CORP         = this.dsList.getColumn(nrow, "CD_CORP");				// 법인
         	param.DS_CORP         = this.dsList.getColumn(nrow, "DS_CORP");
         	param.SN_BZTPSEQ      = this.dsList.getColumn(nrow, "SN_BZTPSEQ");			// 출장순번
         	param.TY_BZTP         = "P";												// 유형
         	param.ID_SABUN_APL    = this.dsList.getColumn(nrow, "ID_SABUN_APL");		// 신청자
         	param.DS_HANME_APL    = this.dsList.getColumn(nrow, "DS_HANME_APL");
         	param.DT_BZTP_FROM    = this.dsList.getColumn(nrow, "DT_BZTP_FROM");		// 출장일(FROM)
         	param.DT_BZTP_TO      = this.dsList.getColumn(nrow, "DT_BZTP_TO");			// 출장일(TO)
         	param.CD_AREA_BZTP    = this.dsList.getColumn(nrow, "CD_AREA_BZTP");		// 출장지역
         	param.DS_AREA_BZTP    = this.dsList.getColumn(nrow, "DS_AREA_BZTP");
         	param.ID_SABUN_BZTP   = this.dsList.getColumn(nrow, "ID_SABUN_BZTP");		// 출장자
         	param.DS_HNAME_BZTP   = this.dsList.getColumn(nrow, "DS_HNAME_BZTP");
         	param.CD_EMPTYPE_BZTP = this.dsList.getColumn(nrow, "CD_EMPTYPE_BZTP");		// 출장직급
         	param.DS_EMPTYPE_BZTP = this.dsList.getColumn(nrow, "DS_EMPTYPE_BZTP");
         	param.DT_WRITE        = this.dsList.getColumn(nrow, "DT_WRITE");			// 작성일
         	param.AM_STDEXRT      = this.dsList.getColumn(nrow, "AM_STDEXRT");			// 기준환율
        	param.AM_ADVPGLD      = this.dsList.getColumn(nrow, "AM_ADVPGLD");			// 가불금
        	param.SELECT          = true;
        	param.READ_ONLY       = true;

        	if (param.CD_AREA_BZTP === "A22" || param.CD_AREA_BZTP === "B22" || param.CD_AREA_BZTP === "C22") {
        		this.gfnFormOpen(this.FormInfo.CD_MODULE, "DAB_BZTP_PLAN_DOMESTIC_DLG", "fnPlanCallback", param);
        	} else {
        		this.gfnFormOpen(this.FormInfo.CD_MODULE, "DAB_BZTP_PLAN_OVERSEAS_DLG", "fnPlanCallback", param);
        	}
        }

        this.fnPlanCallback = function() {
        	this.FormBtns.Select.click();
        }

        // 출장보고서 버튼
        this.fnReport = function() {
        	var nrow = this.dsList.rowposition;

        	var param = {};
         	param.CD_CORP         = this.dsList.getColumn(nrow, "CD_CORP");				// 법인
         	param.DS_CORP         = this.dsList.getColumn(nrow, "DS_CORP");
         	param.SN_BZTPSEQ      = this.dsList.getColumn(nrow, "SN_BZTPSEQ");			// 출장순번
         	param.TY_BZTP         = "R";												// 유형
         	param.ID_SABUN_APL    = this.dsList.getColumn(nrow, "ID_SABUN_APL");		// 신청자
         	param.DS_HANME_APL    = this.dsList.getColumn(nrow, "DS_HANME_APL");
         	param.DT_BZTP_FROM    = this.dsList.getColumn(nrow, "DT_BZTP_FROM");		// 출장일(FROM)
         	param.DT_BZTP_TO      = this.dsList.getColumn(nrow, "DT_BZTP_TO");			// 출장일(TO)
         	param.CD_AREA_BZTP    = this.dsList.getColumn(nrow, "CD_AREA_BZTP");		// 출장지역
         	param.DS_AREA_BZTP    = this.dsList.getColumn(nrow, "DS_AREA_BZTP");
         	param.ID_SABUN_BZTP   = this.dsList.getColumn(nrow, "ID_SABUN_BZTP");		// 출장자
         	param.DS_HNAME_BZTP   = this.dsList.getColumn(nrow, "DS_HNAME_BZTP");
         	param.CD_EMPTYPE_BZTP = this.dsList.getColumn(nrow, "CD_EMPTYPE_BZTP");		// 출장직급
         	param.DS_EMPTYPE_BZTP = this.dsList.getColumn(nrow, "DS_EMPTYPE_BZTP");
         	param.DT_WRITE        = this.dsList.getColumn(nrow, "DT_WRITE");			// 작성일
         	param.AM_STDEXRT      = this.dsList.getColumn(nrow, "AM_STDEXRT");			// 기준환율
        	param.AM_ADVPGLD      = this.dsList.getColumn(nrow, "AM_ADVPGLD");			// 가불금
        	param.READ_ONLY       = this.dsList.getColumn(nrow, "BTN_APRV") == "N";

        	if (param.CD_AREA_BZTP === "A22" || param.CD_AREA_BZTP === "B22" || param.CD_AREA_BZTP === "C22") {
        		this.gfnFormOpen(this.FormInfo.CD_MODULE, "DAB_BZTP_RPT_DOMESTIC_DLG", "fnReportCallback", param);
        	} else {
        		this.gfnFormOpen(this.FormInfo.CD_MODULE, "DAB_BZTP_RPT_OVERSEAS_DLG", "fnReportCallback", param);
        	}
        }

        this.fnReportCallback = function() {
        	this.FormBtns.Select.click();
        }

        // 결재상신 버튼
        this.fnAprv = function(obj, e) {
        	if (!this.gfnGridIsRow(this.dxGrid)) return;

        	this.dsList.set_enableevent(false);
        	this.dsList.filter("CHK == 1");
        	if (this.dsList.rowcount == 0) {
        		this.gfnAlert("출장보고서 " + obj.text + " 대상을 선택하십시오.");
        		this.dsList.filter("");
        		return;
        	}

        	// 예산초과 통제
        	for (var i = 0; i < this.dsList.rowcount; i++) {
        		if (this.dsList.getColumn(i, "YN_CTRL") == "Y" && this.dsList.getColumn(i, "YN_OVER") == "Y") {
        			this.gfnAlert("집액금액이 예산을 초과하는 출장보고서가 포함되어 있습니다.\n예산통제 여부를 변경한 후 전자결재를 진행할 수 있습니다.");
        			this.dsList.filter("");
        			this.dsList.set_enableevent(true);
        			return;
        		}
        	}

        	// 첨부파일 확인
        	for (var i = 0; i < this.dsList.rowcount; i++) {
        		var CD_CORP = this.dsList.getColumn(i, "CD_CORP");
        		var SN_BZTPSEQ = this.dsList.getColumn(i, "SN_BZTPSEQ");
        		var ID_SABUN_BZTP = this.dsList.getColumn(i, "ID_SABUN_BZTP");
        		var TY_BZTP = this.dsList.getColumn(i, "TY_BZTP");

        		if (!this.fnProofFileValid(CD_CORP, SN_BZTPSEQ, ID_SABUN_BZTP, TY_BZTP)) {
        			this.dsList.filter("");
        			this.dsList.set_enableevent(true);
        			return;
        		}
        	}

        	if (this.dsList.rowcount > 0) {
        		var AM_STDEXRT = parseFloat(this.dsList.getColumn(0, "AM_STDEXRT"));
        		for (var i = 1; i < this.dsList.rowcount; i++) {
        			if (AM_STDEXRT != this.dsList.getColumn(i, "AM_STDEXRT")) {
        				this.gfnAlert("동일한 기준환율만 전자결재가 가능합니다.");
        				this.dsList.filter("");
        				this.dsList.set_enableevent(true);
        				return;
        			}
        		}

        		var DT_BZTP_FROM = this.dsList.getColumn(0, "DT_BZTP_FROM");
        		for (var i = 1; i < this.dsList.rowcount; i++) {
        			if (DT_BZTP_FROM != this.dsList.getColumn(i, "DT_BZTP_FROM")) {
        				this.gfnAlert("동일한 출장기간만 전자결재가 가능합니다.");
        				this.dsList.filter("");
        				this.dsList.set_enableevent(true);
        				return;
        			}
        		}

        		var DT_BZTP_TO = this.dsList.getColumn(0, "DT_BZTP_TO");
        		for (var i = 1; i < this.dsList.rowcount; i++) {
        			if (DT_BZTP_TO != this.dsList.getColumn(i, "DT_BZTP_TO")) {
        				this.gfnAlert("동일한 출장기간만 전자결재가 가능합니다.");
        				this.dsList.filter("");
        				this.dsList.set_enableevent(true);
        				return;
        			}
        		}

        		var DS_AREA_BZTP = this.dsList.getColumn(0, "DS_AREA_BZTP");
        		for (var i = 1; i < this.dsList.rowcount; i++) {
        			if (DS_AREA_BZTP != this.dsList.getColumn(i, "DS_AREA_BZTP")) {
        				this.gfnAlert("동일한 출장직역만 전자결재가 가능합니다.");
        				this.dsList.filter("");
        				this.dsList.set_enableevent(true);
        				return;
        			}
        		}

        		for (var i = 0; i < this.dsList.rowcount; i++) {
        			if (this.dsList.getColumn(i, "YN_RPTXSTCYN") == "N") {
        				this.gfnAlert("출장보고서가 작성된 상태만 전자결재가 가능합니다.");
        				this.dsList.filter("");
        				this.dsList.set_enableevent(true);
        				return;
        			}
        		}
        	}

        	var lowestPositionRow = 0;
        	var CD_POSITION_BZTP = this.dsList.getColumn(0, "CD_POSITION_BZTP");
        	for (var i = 1; i < this.dsList.rowcount; i++) {
        		var tmp = this.dsList.getColumn(i, "CD_POSITION_BZTP");
        		if (parseInt(CD_POSITION_BZTP) > parseInt(tmp)) {
        			CD_POSITION_BZTP = tmp;
        			lowestPositionRow = i;
        		}
        	}
        	var person = this.dsList.getColumn(lowestPositionRow, "DS_HNAME_BZTP") + " " + this.dsList.getColumn(lowestPositionRow, "DS_POSITION_BZTP");
        	if (this.dsList.rowcount > 1) {
        		person = person + " 외 " + (this.dsList.rowcount - 1) + "명";
        	}
        	var locale = this.dsList.getColumn(lowestPositionRow, "DS_AREA_BZTP") == "국내" ? "[국내] " : "[해외] ";

        	var msg = "출장보고서(" + person + ")에\n대하여 " + obj.text + "하시겠습니까?";
        	for (var i = 0; i < this.dsList.rowcount; i++) {
        		msg += "\n    " + this.dsList.getColumn(i, "DS_HNAME_BZTP") + " [" + this.dsList.getColumn(i, "ID_SABUN_BZTP") + "]"
        	}
        	this.dsList.filter("");
        	this.dsList.set_enableevent(true);

        	this.gfnConfirm(msg, function(strId, isOk) {
        		if (isOk == false) {
        			return;
        		}

        		this.dsList.filter("CHK == 1");
        		var DS_BZTP = "";
        		for (var i = 0; i < this.dsList.rowcount; i++) {
        			// 1. (신청자 = 출장자)의 출장명
        			if (this.dsList.getColumn(i, "ID_SABUN_APL") == this.dsList.getColumn(i, "ID_SABUN_BZTP")) {
        				DS_BZTP = this.dsList.getColumn(i, "DS_BZTP");
        				break;
        			}

        			// 2. 임원의 출장명
        			if (this.dsList.getColumn(i, "CD_EMPTYPE_BZTP") == "A" || this.dsList.getColumn(i, "CD_EMPTYPE_BZTP") == "B") {
        				DS_BZTP = this.dsList.getColumn(i, "DS_BZTP");
        				break;
        			}

        			// 3. 제일 긴 출장명
        			if (DS_BZTP.length < this.gfnNvl(this.dsList.getColumn(i, "DS_BZTP"), "").length) {
        				DS_BZTP = this.dsList.getColumn(i, "DS_BZTP");
        			}
        		}
        		this.dsList.filter("");

        		var initParam = {
        			CD_CORP: this.dsSearch.getColumn(0, "CD_CORP"),
        			ID_AP_TYPE: locale === "[해외] " ? "DAB03" : "DAB06",
        			TY_WRK: "APRV",
        			ID_APRV: this.AuthClient.ID_SABUN,
        			TT_DOC: DS_BZTP, // locale + "출장보고서 (" + person + ")",
        			CD_CORP_SUFFIX : this.gfnGetConfig("DZ" , "CD_CORP_SUFFIX"),
        		}
        		this.gfnAprv(initParam, "fnAprvCallback", "APRV");
        	});
        }

        // 결재문서조회 버튼
        this.fnAprvDocQ = function(obj, e) {
        	var oParams = {
        		CD_CORP: this.dsList.getColumn(this.dsList.rowposition, "CD_CORP"),
        		NO_APRV: this.dsList.getColumn(this.dsList.rowposition, "NO_APRV"),
        	}
        	this.gfnAprvDoc(oParams, this.fnAprvDocQCallback);
        }

        // 전표발행 버튼
        this.fnSlip = function(obj, e) {
        	this.dsList.filter("CHK == 1");
        	if (this.dsList.rowcount == 0) {
        		this.gfnAlert("출장보고서 " + obj.text + " 대상을 선택하십시오.");
        		this.dsList.filter("");
        		return;
        	}

        	for (var i = 0; i < this.dsList.rowposition; i++) {
        		if (this.dsList.getColumn(i, "ST_APRV") != "4") {
        			this.gfnAlert("결재완료된 출장보고서만 전표를 발행할 수 있습니다.");
        			this.dsList.filter("");
        			return;
        		}

        		if (this.dsList.getColumn(i, "CD_TRADE") != undefined) {
        			this.gfnAlert("이미 전표가 발행된 출장보고서가 포함되어 있습니다.");
        			this.dsList.filter("");
        			return;
        		}
        	}

        	var param = {};
        	param.DT_ACCOUNT = this.dsList.getColumn(0, "DT_WRITE");
        	param.DS_BZTP    = this.dsList.getColumn(0, "DS_BZTP");

        	this.dsList.filter("");

        	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DAB_BZTP_RPT_SLIP_DLG", "fnSlipPubCallback", param);
        }

        this.fnSlipPubCallback = function(id, val) {
        	var result = JSON.parse(val);
        	if (!result.CONTINUE) {
        		return;
        	}

        	if (!this.gfnGridValidate(this.dxGrid)) return;

        	this.dxGrid.updateToDataset();
        	this.dsAutoSlip.clearData();

        	var SN_BZTPSEQ = [];
        	this.dsList.filter("CHK == 1");
        	for (var i = 0; i < this.dsList.rowcount; i++) {
        		var nrow = this.dsAutoSlip.addRow();
        		this.dsAutoSlip.setColumn(nrow, "TY_WRK"       , "SLPPUB");
        		this.dsAutoSlip.setColumn(nrow, "CD_CORP"      , this.dsSearch.getColumn(0, "CD_CORP"));
        		this.dsAutoSlip.setColumn(nrow, "SN_BZTPSEQ"   , this.dsList.getColumn(i, "SN_BZTPSEQ"));
        		this.dsAutoSlip.setColumn(nrow, "ID_SABUN_BZTP", this.dsList.getColumn(i, "ID_SABUN_BZTP"));
        		this.dsAutoSlip.setColumn(nrow, "DS_REM"       , result.DS_REM);
        		this.dsAutoSlip.setColumn(nrow, "DT_ACCOUNT"   , result.DT_ACCOUNT);
        		this.dsAutoSlip.setColumn(nrow, "ID_USER"      , this.AuthClient.ID_USER);
        		SN_BZTPSEQ.push(this.dsList.getColumn(i, "SN_BZTPSEQ"));
        	}
        	this.dsList.filter("");

        	if (this.dsAutoSlip.rowcount == 0) return;

        	var strSvcId    = "slippub";
        	var strSvcType  = "save";
        	var inProc		= "_dsProc";
        	var inData      = "autoslip_execute=dsAutoSlip";
        	var outData     = "";
        	var strArg      = "SN_BZTPSEQ=" + SN_BZTPSEQ.join(",");
        	var callBackFnc = "fnCallback";

        	this.gfnTransaction(strSvcId,		// transaction을 구분하기 위한 svc id값
        						strSvcType, 	// transaction을 요청할 구분
        						inProc,			// Procedure 정보 Dataset 이름
        						inData, 		// 입력값으로 보낼 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        						outData, 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
        						callBackFnc);	// 통신방법 정의 [생략가능]
        }

        // 전표취소 버튼
        this.fnSlipCnc = function(obj, e) {
        	this.gfnConfirm("발행된 전표를 취소하시겠습니까?", "fnSlipCncCallback");
        }

        this.fnSlipCncCallback = function() {
        	if (!this.gfnGridValidate(this.dxGrid)) return;

        	this.dxGrid.updateToDataset();
        	this.dsAutoSlip.clearData();

        	this.dsList.filter("CHK == 1");
        	for (var i = 0; i < this.dsList.rowcount; i++) {
        		var nrow = this.dsAutoSlip.addRow();
        		this.dsAutoSlip.setColumn(nrow, "TY_WRK"       , "SLPCNC");
        		this.dsAutoSlip.setColumn(nrow, "CD_CORP"      , this.dsSearch.getColumn(0, "CD_CORP"));
        		this.dsAutoSlip.setColumn(nrow, "SN_BZTPSEQ"   , this.dsList.getColumn(i, "SN_BZTPSEQ"));
        		this.dsAutoSlip.setColumn(nrow, "ID_SABUN_BZTP", this.dsList.getColumn(i, "ID_SABUN_BZTP"));
        		this.dsAutoSlip.setColumn(nrow, "ID_USER"      , this.AuthClient.ID_USER);
        	}
        	this.dsList.filter("");

        	if (this.dsAutoSlip.rowcount == 0) return;

        	var strSvcId    = "slipcnc";
        	var strSvcType  = "save";
        	var inProc		= "_dsProc";
        	var inData      = "autoslip_execute=dsAutoSlip";
        	var outData     = "";
        	var strArg      = "";
        	var callBackFnc = "fnCallback";

        	this.gfnTransaction(strSvcId,		// transaction을 구분하기 위한 svc id값
        						strSvcType, 	// transaction을 요청할 구분
        						inProc,			// Procedure 정보 Dataset 이름
        						inData, 		// 입력값으로 보낼 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        						outData, 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
        						callBackFnc);	// 통신방법 정의 [생략가능]
        }

        // 전표조회 버튼
        this.fnSlipQ = function(obj, e) {
        	var param = {};
        	param.CD_TRADE = this.dsList.getColumn(this.dsList.rowposition, "CD_TRADE");
        	param.IUD_FLAG = "S";

        	this.gfnFormOpen("DHA", "DHA_ISSUESLIP", "", param);
        }

        // 결재상태초기화 버튼
        this.fnAprvInit = function(obj, e) {
        	this.dsList.set_enableevent(false);
        	this.dsList.filter("CHK == 1");
        	if (this.dsList.rowcount == 0) {
        		this.gfnAlert("출장보고서 " + obj.text + " 대상을 선택하십시오.");
        		this.dsList.filter("");
        		this.dsList.set_enableevent(true);
        		return;
        	}
        	this.dsList.filter("");
        	this.dsList.set_enableevent(true);

        	if (!this.gfnGridIsRow(this.dxGrid)) return;

        	var msg = "출장보고서에 대하여 " + obj.text + "하시겠습니까?\n";
        	this.gfnConfirm(msg, "fnAprvCallback", "APRVINIT");
        }

        /************************************************************************
         * 콜백 이벤트
         ************************************************************************/
        /*
         *	콜백 처리
         */
        this.fnCallback = function(svcID, errorCode, errorMsg, strArg) {
        	if (svcID == "select") {
        		this.gfnGridAfterSelect(this.dxGrid);
        	} else if (svcID == "save") {
        		if (errorCode == 0) {
        			this.FormBtns.Select.click();
        		} else {
        			this.gfnAlert(errorMsg);
        		}
        	} else if (svcID == "slippub") {
        		this.FormBtns.Select.click();
        	} else if (svcID == "slipcnc") {
        		this.FormBtns.Select.click();
        	} else if (svcID == "APRV") {
        		this.gfnOpenAppr(function() {
        			this.FormBtns.Select.click();
        		});
        	} else if (svcID == "APRVINIT") {
        		this.FormBtns.Select.click();
        	} else if (svcID == "update_yn_ctrl") {
        		this.FormBtns.Select.click();
        	}
        }

        // 결재상신 버튼 콜백
        // 결재상태초기화 버튼 콜백
        this.fnAprvCallback = function(strId, val) {
        	this.dsApproval.clearData();
        	this.dsApproval.addRow();

        	this.dsList.filter("CHK == 1");
        	this.dsApproval.setColumn(0, "TY_WRK",  strId);
        	this.dsApproval.setColumn(0, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
        	var SN_BZTPSEQ = new Array();
        	for (var i  = 0; i < this.dsList.rowcount; i++) {
        		SN_BZTPSEQ.push(this.dsList.getColumn(i, "SN_BZTPSEQ"));
        	}
        	this.dsApproval.setColumn(0, "SN_BZTPSEQ", SN_BZTPSEQ.join(","));
        	this.dsApproval.setColumn(0, "TY_BZTP", "R");
        	this.dsApproval.setColumn(0, "ID_APRV", this.AuthClient.ID_SABUN);
        	if (strId == "APRV") {
        		this.dsApproval.setColumn(0, "NO_APRV", this.dsAprvOut.getColumn(0, "NO_APRV"));
        	} else {
        		this.dsApproval.setColumn(0, "NO_APRV", this.dsList.getColumn(this.dsList.rowposition, "NO_APRV"));
        	}
        	this.dsList.filter("");

        	var strSvcId    = strId;
        	var strSvcType  = "save";
        	var inProc		= "_dsProc";
        	var inData      = "aprv_execute=dsApproval";
        	var outData     = "";
        	var strArg      = "";
        	var callBackFnc = "fnCallback";

        	this.gfnTransaction(strSvcId,		// transaction을 구분하기 위한 svc id값
        						strSvcType, 	// transaction을 요청할 구분
        						inProc,			// Procedure 정보 Dataset 이름
        						inData, 		// 입력값으로 보낼 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        						outData, 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
        						callBackFnc);	// 통신방법 정의 [생략가능]
        }

        /************************************************************************
         * 코드파인드 이벤트
         ************************************************************************/
        this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
         	if (id == "ccfCD_CORP") {
        		// 법인코드
        		dsUserParam.setColumn(nrow, "CD_CORP",   this.AuthClient.CD_CORP);
        		dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
        		dsUserParam.setColumn(nrow, "ID_USER",   this.AuthClient.ID_USER);
        	} else if(id == "ccfID_SABUN_APL") {
        		// 사번
        		if (this.gfnIsNull(this.dsSearch.getColumn(0, "CD_CORP"))) {
        			this.fnValidCallback = function() {
        				this.ccfCD_CORP.form.CDTextBox.setFocus();
        			}
        			this.gfnAlert("법인코드를 입력하세요.", "fnValidCallback");
        			return false;
        		}
        		var CD_MODULEGROUP_Q = this.gfnGetConfig("DZ", "CD_MODULEGROUP_Q").split("|");
        		dsUserParam.setColumn(nrow, "CD_CORP",   this.dsSearch.getColumn(0, "CD_CORP"));
        		dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
        		dsUserParam.setColumn(nrow, "CD_DEPT",   CD_MODULEGROUP_Q.includes(this.FormInfo.ID_GROUP) ? "" : this.AuthClient.CD_DEPT);
        		dsUserParam.setColumn(nrow, "YN_CORP",   "N"); //법인무관(Y: 법인에 관계없이 직원검색 N:조건의 법인의 임직원만 검색)
        		dsUserParam.setColumn(nrow, "TY_RETIRE", "%");	// 01 재직 02 휴직 04 퇴직 % :전체
         	}

         	return true;
        }

        this.fnAfterCDTextChanged = function(id, codeFindData) {
        	var arr = codeFindData;
        	if (id == "ccfCD_CORP") {
        		this.ccfID_SABUN.form.fnCodeFindClear();
        	} else if(id == "ccfID_SABUN_APL") {

         	}
        }

        /************************************************************************
         * 그리드 이벤트
         ************************************************************************/
        this.fnGridBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
        	switch (id) {
        	// 귀속부서
        	case "DAX_CFDEPT":
        		dsUserParam.setColumn(nrow, "GR_SEARCH",  this.FormInfo.GR_SEARCH);
        		dsUserParam.setColumn(nrow, "CD_DEPT",    this.AuthClient.CD_DEPT);
        		dsUserParam.setColumn(nrow, "CD_CORP",    this.dsSearch.getColumn(0, "CD_CORP"));
        		dsUserParam.setColumn(nrow, "YN_CURRENT", "Y");
        		break;
         	}

        	return true;
        }

        this.fnGridAfterCDTextChanged = function(id, codeFindData) {
        	switch (id) {
        	case "DAX_CFBASEINFO_ALL":
        		this.dsList.setColumn(this.dsList.rowposition, "ID_PERSON_BZTP",   codeFindData[0]["ID_PERSON"]);
        		this.dsList.setColumn(this.dsList.rowposition, "CD_POSITION_BZTP", codeFindData[0]["CD_POSITION"]);
        		this.dsList.setColumn(this.dsList.rowposition, "DS_POSITION_BZTP", codeFindData[0]["DS_POSITION"]);
        		this.dsList.setColumn(this.dsList.rowposition, "CD_EMPTYPE_BZTP",  codeFindData[0]["CD_POSITION_BZTP"]);
        		this.dsList.setColumn(this.dsList.rowposition, "DS_EMPTYPE_BZTP",  codeFindData[0]["DS_POSITION_BZTP"]);
        		this.dsList.setColumn(this.dsList.rowposition, "CD_DEPT_BZTP",     codeFindData[0]["CD_DEPT"]);
        		this.dsList.setColumn(this.dsList.rowposition, "DS_DEPT_BZTP",     codeFindData[0]["DS_DEPT"]);
        		this.dsList.setColumn(this.dsList.rowposition, "CD_AREA_BZTP",     "");
        		this.dsList.setColumn(this.dsList.rowposition, "DS_AREA_BZTP",     "");
        		break;

        	case "DAX_CFCOMMONCODE_ED":
        		this.dsList.setColumn(this.dsList.rowposition, "CD_EMPTYPE_BZTP", "");
        		this.dsList.setColumn(this.dsList.rowposition, "DS_EMPTYPE_BZTP", "");
        		this.dsList.setColumn(this.dsList.rowposition, "CD_AREA_BZTP",    "");
        		this.dsList.setColumn(this.dsList.rowposition, "DS_AREA_BZTP",    "");
        		break;

        	case "DAX_CFDEPT":
        		break;
        	}
        }

        this.fnGridCellPosChanged = function(obj, e) {
        	this.fnUpdateStatusExtendButton();
        }

        /************************************************************************
         * 기타 이벤트
         ************************************************************************/
        this.dsSearch_onvaluechanged = function(obj,e){
        	if(e.oldvalue != e.newvalue){
        		this.gfnSetFormStatus(this);	// 폼상태 초기화
        		this.gfnGridClear(this.dxGrid);
        	}
        }

        // 복사
        this.fnCopy = function(CD_CORP, SN_BZTPSEQ, ID_SABUN_BZTP, ID_SABUN_APL, DT_WRITE) {
        	this.dsCopy.clearData();
        	var nrow = this.dsCopy.addRow();

        	this.dsCopy.setColumn(nrow, "CD_CORP",       CD_CORP);
        	this.dsCopy.setColumn(nrow, "SN_BZTPSEQ",    SN_BZTPSEQ);
        	this.dsCopy.setColumn(nrow, "ID_SABUN_BZTP", ID_SABUN_BZTP);
        	this.dsCopy.setColumn(nrow, "ID_SABUN_APL",  ID_SABUN_APL);
        	this.dsCopy.setColumn(nrow, "DT_WRITE",      DT_WRITE);

        	if (this.dsCopy.rowcount == 0) return;

        	var strSvcId    = "save";
        	var strSvcType  = "save";
        	var inProc		= "_dsProc";
        	var inData      = "copy=dsCopy";
        	var outData     = "";
        	var strArg      = "";
        	var callBackFnc = "fnCallback";

        	this.gfnTransaction(strSvcId,		// transaction을 구분하기 위한 svc id값
        						strSvcType, 	// transaction을 요청할 구분
        						inProc,			// Procedure 정보 Dataset 이름
        						inData, 		// 입력값으로 보낼 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        						outData, 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
        						callBackFnc);	// 통신방법 정의 [생략가능]
        }

        this.fnProofFileValid = function(CD_CORP, SN_BZTPSEQ, ID_SABUN_BZTP, TY_BZTP) {
        	this.dsSelectRptProof.clearData();
        	this.dsSelectRptProof.addRow();
        	this.dsSelectRptProof.setColumn(0, "CD_CORP"      , CD_CORP);
        	this.dsSelectRptProof.setColumn(0, "SN_BZTPSEQ"   , SN_BZTPSEQ);
        	this.dsSelectRptProof.setColumn(0, "ID_SABUN_BZTP", ID_SABUN_BZTP);
        	this.dsSelectRptProof.setColumn(0, "TY_BZTP"      , TY_BZTP);

        	var strSvcId    = "select_rpt_proof";
        	var strSvcType  = "select";
        	var inProc		= "_dsProc";
        	var inData      = "select_rpt_proof=dsSelectRptProof";
        	var outData     = "dsListRptProof=select_rpt_proof0";
        	var strArg      = "";
        	var callBackFnc = "fnCallback";

        	this.gfnTransaction(strSvcId,		// transaction을 구분하기 위한 svc id값
        						strSvcType, 	// transaction을 요청할 구분
        						inProc,			// Procedure 정보 Dataset 이름
        						inData, 		// 입력값으로 보낼 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        						outData, 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
        						callBackFnc,	// 통신방법 정의 [생략가능]
        						false);

        	for (var i = 0; i < this.dsListRptProof.rowcount; i++) {
        		var CD_PMT_TYPE = this.dsListRptProof.getColumn(i, "CD_PMT_TYPE");
        		var CNT_FILE = this.dsListRptProof.getColumn(i, "CNT_FILE");

        		var DT_PMT = this.dsListRptProof.getColumn(i, "DT_PMT");
        		var msg = "\n" +
        		          "  - 결제일: " + DT_PMT.substring(0, 4) + "년 " + DT_PMT.substring(4, 6) + "월 " + DT_PMT.substring(6, 8) + "일\n" +
        		          "  - 국가: " + this.dsListRptProof.getColumn(i, "DS_PMT_NTN") + "\n" +
        				  "  - 대구분: " + this.dsListRptProof.getColumn(i, "DS_PMT_TYPE") + "\n" +
        				  "  - 지불수단: " + this.dsListRptProof.getColumn(i, "DS_PMT_MEAN") + "\n" +
        				  "  - 집행화폐: " + this.dsListRptProof.getColumn(i, "CD_PMT_MNEY") + "\n" +
        				  "  - 집행화: " + this.gfnAppendComma(this.dsListRptProof.getColumn(i, "AM_PMT")) + "\n" +
        				  "  - 집행금액(KRW): " + this.gfnAppendComma(this.dsListRptProof.getColumn(i, "AM_PMT_KRW"));
        		if (CD_PMT_TYPE == "B701" && CNT_FILE == "증빙(0)") {
        			this.gfnAlert("입출국항공료의 증빙자료가 누락되었습니다." + msg);
        			return false;
        		}
        		if (CD_PMT_TYPE == "B702" && CNT_FILE == "증빙(0)") {
        			this.gfnAlert("교통비-철도비의 증빙자료가 누락되었습니다." + msg);
        			return false;
        		}
        		if (CD_PMT_TYPE == "B703" && CNT_FILE == "증빙(0)") {
        			this.gfnAlert("교통비-선박비의 증빙자료가 누락되었습니다." + msg);
        			return false;
        		}
        		if (CD_PMT_TYPE == "B704" && CNT_FILE == "증빙(0)") {
        			this.gfnAlert("교통비-항공비의 증빙자료가 누락되었습니다." + msg);
        			return false;
        		}
        		if (CD_PMT_TYPE == "B705" && CNT_FILE == "증빙(0)") {
        			this.gfnAlert("교통비-자동차비의 증빙자료가 누락되었습니다." + msg);
        			return false;
        		}
        		if (CD_PMT_TYPE == "B706" && CNT_FILE == "증빙(0)") {
        			this.gfnAlert("숙박비의 증빙자료가 누락되었습니다." + msg);
        			return false;
        		}
        		if (CD_PMT_TYPE == "B707" && CNT_FILE == "증빙(0)") {
        			this.gfnAlert("식비의 증빙자료가 누락되었습니다." + msg);
        			return false;
        		}
        		if (CD_PMT_TYPE == "B709" && CNT_FILE == "증빙(0)") {
        			this.gfnAlert("기타-통신비(로밍)의 증빙자료가 누락되었습니다." + msg);
        			return false;
        		}
        		if (CD_PMT_TYPE == "B710" && CNT_FILE == "증빙(0)") {
        			this.gfnAlert("기타-Visa 발급수수료의 증빙자료가 누락되었습니다." + msg);
        			return false;
        		}
        		if (CD_PMT_TYPE == "B711" && CNT_FILE == "증빙(0)") {
        			this.gfnAlert("기타-추가비용1의 증빙자료가 누락되었습니다." + msg);
        			return false;
        		}
        		if (CD_PMT_TYPE == "B712" && CNT_FILE == "증빙(0)") {
        			this.gfnAlert("기타-추가비용2의 증빙자료가 누락되었습니다." + msg);
        			return false;
        		}
        		if (CD_PMT_TYPE == "B713" && CNT_FILE == "증빙(0)") {
        			this.gfnAlert("교제비[별도계정]의 증빙자료가 누락되었습니다." + msg);
        			return false;
        		}
        	}

        	return true;
        }

        });
        
        // Regist UI Components Event
        this.on_initEvent = function()
        {
            this.addEventHandler("onload",this.form_onload,this);
            this.divData.form.objGrid.addEventHandler("oncellposchanged",this.fnGridCellPosChanged,this);
            this.dsSearch.addEventHandler("onvaluechanged",this.dsSearch_onvaluechanged,this);
        };
        this.loadIncludeScript("DAB_BZTP_RPT.xfdl");
        this.loadPreloadList();
        
        // Remove Reference
        obj = null;
    };
}
)();
