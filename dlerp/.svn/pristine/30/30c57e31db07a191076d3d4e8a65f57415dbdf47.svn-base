<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1400" height="720" titletext="자동전표 코드등록" onload="form_onload">
    <Layouts>
      <Layout stepcount="0">
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg" formscrolltype="none" text="">
          <Layouts>
            <Layout>
              <Static id="staCD_ACNTUNIT" taborder="3" text="사업지코드" left="0.0" top="10.0" width="105.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfCD_ACNTUNIT" CodeFindName="DLX_CFLEASESITE_CODEFIND" CDTextWidth="70" taborder="5" left="staCD_ACNTUNIT:0.0" top="10.0" width="350" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
              <Static id="staCD_PERIOD" taborder="4" text="입금기간" left="ccfCD_ACNTUNIT:0.0" top="10.0" height="24.0" width="105.0" cssclass="sta_WF_SchLabelE"/>
              <Calendar id="ctclDT_START" taborder="2" left="staCD_PERIOD:0.0" top="10.0" width="105" height="24.0" dateformat="yyyy-MM-dd" editformat="yyyyMMdd" autoselect="true"/>
              <Static id="staDT_PERIOD_TIL" taborder="0" text="~" left="ctclDT_START:0.0" top="10.0" width="30.0" height="24.0" cssclass="sta_WF_AC"/>
              <Calendar id="ctclDT_END" taborder="1" left="staDT_PERIOD_TIL:0.0" top="10.0" width="105" height="24.0" dateformat="yyyy-MM-dd" editformat="yyyyMMdd" autoselect="true"/>
              <Radio id="crdoYN_RECEIPT" taborder="6" left="ctclDT_END:0.0" top="10.0" height="24.0" direction="vertical" fittocontents="width" width="133" codecolumn="CD_CODE" datacolumn="DS_CODE" innerdataset="dsYN_RECEIPT"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg" text="">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" right="0" bottom="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	this.dsSearch.set_enableevent(false);
	this.dsSearch.setColumn(0, "DT_START", this.gfnGetDate());
	this.dsSearch.setColumn(0, "DT_END", this.gfnGetDate());
	this.dsSearch.setColumn(0, "YN_RECEIPT", "N");
	this.dsSearch.set_enableevent(true);
	
};

this.fnSetButton = function() {
}

this.fnSetExtendButton = function() {
	this.btnBatchReceipt = this.gfnFormButtonAdd("BatchReceipt", "fnBatchReceipt");
	this.btnReceiptDetail = this.gfnFormButtonAdd("ReceiptDetail", "fnReceiptDetail");
	this.btnReceiptExcel = this.gfnFormButtonAdd("ReceiptExcel", "fnReceiptExcel");
	
	
	this.btnBatchReceipt.set_enable(false);
	this.btnReceiptDetail.set_enable(false);
	this.btnReceiptExcel.set_enable(false); 
};

this.fnSetVariable = function() {
	this.ccfCD_ACNTUNIT = this.divSearch.form.ccfCD_ACNTUNIT;
	this.ctclDT_START = this.divSearch.form.ctclDT_START;
	this.ctclDT_END = this.divSearch.form.ctclDT_END;
	this.ccboYN_RECEIPT = this.divSearch.form.ccboYN_RECEIPT;

	this.dxGrid = this.divData.form.objGrid;
};

this.fnSetEvent = function() {
	this.gfnGridInit(this.dxGrid, this.dsList, "DL", "DLB_RECEIPTBATCH");
	
	this.gfnGridColumnColor(this.dxGrid, "", "Blue", "[YN] == 'Y'", true);
	
	this.dxGrid.addEventHandler("oncelldblclick", this.dxGrid_oncelldblclick, this);
	
	this.ccfCD_ACNTUNIT.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	
}

this.fnSetParameter = function() {
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_ACNTUNIT", "string");
	this.dsSelect.addColumn("TY_GUBUN", "string");
	this.dsSelect.addColumn("NO_CHASU", "string");
	this.dsSelect.addColumn("DT_START", "string");
	this.dsSelect.addColumn("DT_END", "string");
	this.dsSelect.addColumn("YN_OPTION", "string");
	this.dsSelect.addColumn("YN_CHKRECEIPT", "string");

	this.dsDelete = new Dataset();
	this.dsDelete.addColumn("CD_ACNTUNIT", "string");
	this.dsDelete.addColumn("TY_GUBUN", "string");
	this.dsDelete.addColumn("NO_CHASU", "string");
	this.dsDelete.addColumn("NO_SEQ", "string");
	this.dsDelete.addColumn("DT_RECEIPT", "string");
	this.dsDelete.addColumn("ID_INSERT", "string");

	this.dsBatch = new Dataset();
	this.dsBatch.addColumn("CD_ACNTUNIT", "string");
	this.dsBatch.addColumn("TY_GUBUN", "string");
	this.dsBatch.addColumn("NO_CHASU", "string");
	this.dsBatch.addColumn("DT_RECEIVED", "string");
	this.dsBatch.addColumn("NO_SEQ", "string");
	this.dsBatch.addColumn("YN_OPTION", "string");
	this.dsBatch.addColumn("ID_INSERT", "string");
	this.dsBatch.addColumn("NO_CONTRACT", "string");
	
	this.dsError = new Dataset();
	this.dsError.addColumn("DT_RECEIVED", "string");
	this.dsError.addColumn("NO_SEQ", "string");
	this.dsError.addColumn("DS_REMARK", "string");
	this.dsError.addColumn("ID_UPDATE", "string");
	
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
this.fnSelect = function() {
	if (!this.fnSelectValidation()) return;
	
	this.gfnGridBeforeSelect(this.dxGrid);

	this.dsSelect.clearData();
	this.dsSelect.addRow();
	this.dsSelect.setColumn(0, "CD_ACNTUNIT", this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(0, 6));
	this.dsSelect.setColumn(0, "TY_GUBUN", this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(6, 1));
	this.dsSelect.setColumn(0, "NO_CHASU", this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(7, 2));
	this.dsSelect.setColumn(0, "DT_START", this.dsSearch.getColumn(0, "DT_START"));
	this.dsSelect.setColumn(0, "DT_END", this.dsSearch.getColumn(0, "DT_END"));
	this.dsSelect.setColumn(0, "YN_OPTION", "N");
	this.dsSelect.setColumn(0, "YN_CHKRECEIPT", this.dsSearch.getColumn(0, "YN_RECEIPT"));
		
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect"; 
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

this.fnAdd = function() {
}

this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}

this.fnSave = function() {
	if (!this.gfnGridValidate(this.dxGrid)) return;

	this.dxGrid.updateToDataset();

	this.dsDelete.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "D":
				var nrow = this.dsDelete.addRow();
				this.dsDelete.setColumn(nrow, "CD_ACNTUNIT", this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(0, 6));
				this.dsDelete.setColumn(nrow, "TY_GUBUN", this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(6, 1));
				this.dsDelete.setColumn(nrow, "NO_CHASU", this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(7, 2));
				this.dsDelete.setColumn(nrow, "NO_SEQ", this.dsList.getColumn(i, "NO_SEQ"));
				this.dsDelete.setColumn(nrow, "DT_RECEIPT", this.dsList.getColumn(i, "DT_RECEIPT"));
				this.dsDelete.setColumn(nrow, "ID_INSERT", this.AuthClient.ID_USER);
				break;
		}
	}
	
	if (this.dsDelete.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "delete=dsDelete";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

this.fnPrint = function() {

}

/************************************************************************
 * Validate
 ************************************************************************/
this.fnSelectValidation = function() {
	var validate = true;
	if (this.gfnIsNull(this.dsSearch.getColumn(0, "CD_ACNTUNIT"))) {
		this.fnVaidateCallback = function() {
			this.ccfCD_ACNTUNIT.form.CDTextBox.setFocus();
		}
		this.gfnAlert("사업지코드가 입력되지 않았습니다.", "fnVaidateCallback");
	}
	if (this.gfnIsNull(this.dsSearch.getColumn(0, "DT_START")) || this.gfnIsNull(this.dsSearch.getColumn(0, "DT_END"))) {
		this.fnVaidateCallback = function() {
			this.ctclDT_START.setFocus();
		}
		this.gfnAlert("입금기간이 입력되지 않았습니다.", "fnVaidateCallback");
	}
	if (this.gfnGetDiffDate(this.dsSearch.getColumn(0, "DT_START"), this.dsSearch.getColumn(0, "DT_END")) < 0) {
		this.gfnAlert("완료입금일자는 시작입금일자보다 크거나 같아야 합니다!");
	}
	return validate;
}

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
this.fnCallback = function(svcID, errorCode, errorMsg) {
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);
		
		if (this.dsList.rowcount > 0) {
			this.btnBatchReceipt.set_enable(this.dsSearch.getColumn(0, "YN_RECEIPT") == "N");
			this.btnReceiptDetail.set_enable(this.dsSearch.getColumn(0, "YN_RECEIPT") != "N");
			this.btnReceiptExcel.set_enable(this.dsSearch.getColumn(0, "YN_RECEIPT") == "N");
			
			this.dsList.addColumn("YN", "string");
			
			this.dsList.set_enableevent(false);
			for (var i = 0; i < this.dsList.rowcount; i++) {
				this.dsList.setColumn(i, "YN", this.dsSearch.getColumn(0, "YN_RECEIPT"));
			}
			this.dsList.set_enableevent(true);
			
			this.FormBtns.Del.set_enable(this.dsSearch.getColumn(0, "YN_RECEIPT") != "Y");
		}
		else {
			this.btnBatchReceipt.set_enable(false);
			this.btnReceiptDetail.set_enable(false);
			this.btnReceiptExcel.set_enable(true);
		}
	}
	else if (svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		}
		else {
			this.gfnAlert(errorMsg);
		}
	}
	else if (svcID == "batch") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		}
		else {
			//this.gfnAlert(errorMsg);
			this.fnBatchError(errorMsg);
		}
	}
	else if (svcID == "error") {
		this.FormBtns.Select.click();
	}
}
 
/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	if (id == "ccfCD_ACNTUNIT") {
		dsUserParam.setColumn(nrow, "FLAG", "A");
		dsUserParam.setColumn(nrow, "CD_DEPT", this.AuthClient.CD_DEPT);
		dsUserParam.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
		dsUserParam.setColumn(nrow, "ID_GROUP", this.FormInfo.ID_GROUP);
		dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
		dsUserParam.setColumn(nrow, "YN_TOTALCHASU", "");
	}
	
	return true;
};


/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
this.dxGrid_oncelldblclick = function(obj:nexacro.Grid,e:nexacro.GridClickEventInfo) {
	if (!this.gfnGridIsRow(this.dxGrid)) return;
	if (this.dsSearch.getColumn(0, "YN_RECEIPT") == "N") return;
		
	this.fnReceiptDetail();
};
 
/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo) {
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);
		
		if (e.columnid == "YN_RECEIPT") {
			var isCheckY = e.newvalue == "Y" ? true : false;
			this.btnReceiptDetail.set_enable(isCheckY);
			this.btnReceiptExcel.set_enable(!isCheckY);
			this.btnBatchReceipt.set_enable(!isCheckY);
			this.FormBtns.Del.set_enable(!isCheckY);
			
			this.FormBtns.Select.click();
		}
	}
};

this.fnBatchReceipt = function() {
	if (!this.fnSelectValidation()) return;
	if (this.dsList.rowcount == 0) return;

	if (this.dsList.findRow("CHK", 1) < 0){
		this.gfnAlert("선택된 항목이 없습니다.");
		return;
	}
	
	var arrChk = [];
	for (var i = 0; i < this.dsList.rowcount; i++) {
		if (this.dsList.getColumn(i, "CHK") == 1) {
			arrChk.push(i);
		}
	}
	
	for (var i = 0; i < arrChk.length; i++) {
		if (!this.gfnIsNull(this.gfnGetFlag(this.dsList, arrChk[i]))) {
			this.gfnAlert("편집작업을 완료하고 난 후 진행하여 주십시오!");
			return;
		}
	}
	
	this.dsBatch.clearData();
	for (var i = 0; i < arrChk.length; i++) {
		var r = arrChk[i];
		
		var nrow = this.dsBatch.addRow();
		this.dsBatch.setColumn(nrow, "CD_ACNTUNIT", this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(0, 6));
		this.dsBatch.setColumn(nrow, "TY_GUBUN", this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(6, 1));
		this.dsBatch.setColumn(nrow, "NO_CHASU", this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(7, 2));
		this.dsBatch.setColumn(nrow, "DT_RECEIVED", nexacro.replaceAll(this.dsList.getColumn(r, "DT_RECEIPT"), "-", ""));
		this.dsBatch.setColumn(nrow, "NO_SEQ", this.dsList.getColumn(r, "NO_SEQ"));
		this.dsBatch.setColumn(nrow, "YN_OPTION", "N");
		this.dsBatch.setColumn(nrow, "ID_INSERT", this.AuthClient.ID_USER);
		this.dsBatch.setColumn(nrow, "NO_CONTRACT", "");
	}

	if (this.dsBatch.rowcount == 0) return;
	
	var strSvcId    = "batch";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "batch=dsBatch";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
		strSvcType , 	// transaction을 요청할 구분
		inProc,			// Procedure 정보 Dataset 이름
		inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
		outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
		strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
		callBackFnc); // 통신방법 정의 [생략가능]
}

this.fnBatchError = function(strMsg) {
	this.dsError.clearData();
	this.dsError.addRow();
	this.dsError.setColumn(0, "DT_RECEIVED", nexacro.replaceAll(this.dsList.getColumn(i, "DT_RECEIPT"), "-", ""));
	this.dsError.setColumn(0, "NO_SEQ", this.dsList.getColumn(i, "NO_SEQ"));
	this.dsError.setColumn(0, "DS_REMARK", strMsg);
	this.dsError.setColumn(0, "ID_UPDATE", this.AuthClient.ID_USER);

	var strSvcId    = "error";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "error=dsError";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
		strSvcType , 	// transaction을 요청할 구분
		inProc,			// Procedure 정보 Dataset 이름
		inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
		outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
		strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
		callBackFnc); // 통신방법 정의 [생략가능]
}

this.fnReceiptDetail = function() {
	if (this.dsList.rowcount == 0) return;
	if (!this.gfnGridIsRow(this.dxGrid)) return;
	if (!this.fnSelectValidation()) return;
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		if (!this.gfnIsNull(this.gfnGetFlag(this.dsList, i))) {
			this.gfnAlert("편집작업을 완료하고 난 후 진행하여 주십시오!");
			return;
		}
	}
	
	var hosu = this.dsList.getColumn(this.dsList.rowposition, "HOSU");
	if (!(hosu.length == 3 || hosu.length == 4)) {
		return;
	}
	
	var floor = hosu.substr(0, hosu.length - 2).padLeft(2, "0");
	var ho = hosu.substr(hosu.length - 2, 2).padLeft(3, "0");
	
	var param = {};
	param.CD_ACNTUNIT = this.dsSearch.getColumn(0, "CD_ACNTUNIT");
	param.DS_ACNTUNIT = this.dsSearch.getColumn(0, "DS_ACNTUNIT");
	param.NO_DONG = this.dsList.getColumn(this.dsList.rowposition, "NO_DONG");
	param.NO_FLOOR = floor;
	param.NO_HO = ho;
	param.NO_UNIONMEMBER = this.dsList.getColumn(this.dsList.rowposition, "NO_UNIONMEMBER");
	param.DS_CONTRACTOR = this.dsList.getColumn(this.dsList.rowposition, "DS_CONTRACTOR");

	this.gfnFormOpen("DLB", "DLB_RECEIPTDETAIL", "fnPopupCallback", param);
}

this.fnReceiptExcel = function() {
	if (!this.fnSelectValidation()) return;
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		if (!this.gfnIsNull(this.gfnGetFlag(this.dsList, i))) {
			this.gfnAlert("편집작업을 완료하고 난 후 진행하여 주십시오!");
			return;
		}
	}
	
	var param = {};
	param.CD_ACNTUNIT = this.dsSearch.getColumn(0, "CD_ACNTUNIT");
	param.DS_ACNTUNIT = this.dsSearch.getColumn(0, "DS_ACNTUNIT");
	param.DT_FROM = this.dsSearch.getColumn(0, "DT_START");
	param.DT_TO = this.dsSearch.getColumn(0, "DT_END");
	param.YN_OPTION = "N";

	this.gfnFormOpen("DLB", "DLB_RECEIPTBATCHEXCEL", "fnPopupCallback", param);
}





this.fnPopupCallback = function(svcID, val) {
	this.FormBtns.Select.click();
}
]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DRCPR_AUTORECEIPT_BATCH_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">delete</Col>
            <Col id="SP">DRCPR_AUTORECEIPT_DELETE</Col>
          </Row>
          <Row>
            <Col id="TARGET">batch</Col>
            <Col id="SP">DRCPR_FBS_AUTORECEIPT_MIGRATION</Col>
          </Row>
          <Row>
            <Col id="TARGET">error</Col>
            <Col id="SP">DRCPR_FBS_AUTORECEIPT_MIGRATION_ERR</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_ACNTUNIT" type="STRING" size="256"/>
          <Column id="DS_ACNTUNIT" type="STRING" size="256"/>
          <Column id="DT_START" type="STRING" size="256"/>
          <Column id="DT_END" type="STRING" size="256"/>
          <Column id="YN_RECEIPT" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CD_ACNTUNIT"/>
            <Col id="DS_ACNTUNIT"/>
            <Col id="DT_START"/>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsYN_RECEIPT">
        <ColumnInfo>
          <Column id="CD_CODE" type="STRING" size="256"/>
          <Column id="DS_CODE" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CD_CODE">N</Col>
            <Col id="DS_CODE">미수납건</Col>
          </Row>
          <Row>
            <Col id="CD_CODE">Y</Col>
            <Col id="DS_CODE">수납건</Col>
          </Row>
        </Rows>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfCD_ACNTUNIT.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_ACNTUNIT"/>
      <BindItem id="item1" compid="divSearch.form.ccfCD_ACNTUNIT.form.DSTextBox" propid="value" datasetid="dsSearch" columnid="DS_ACNTUNIT"/>
      <BindItem id="item2" compid="divSearch.form.ctclDT_START" propid="value" datasetid="dsSearch" columnid="DT_START"/>
      <BindItem id="item3" compid="divSearch.form.ctclDT_END" propid="value" datasetid="dsSearch" columnid="DT_END"/>
      <BindItem id="item4" compid="divSearch.form.crdoYN_RECEIPT" propid="value" datasetid="dsSearch" columnid="YN_RECEIPT"/>
    </Bind>
  </Form>
</FDL>
