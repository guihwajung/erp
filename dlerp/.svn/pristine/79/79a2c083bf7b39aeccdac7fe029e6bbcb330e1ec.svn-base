<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="New Form" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg" formscrolltype="none">
          <Layouts>
            <Layout>
              <Static id="staCD_PROJ" taborder="1" text="프로젝트" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfCD_PROJ" CodeFindName="DOS_CFPROJ" CDTextWidth="90" taborder="1" left="staCD_PROJ:0.0" top="10.0" width="299" height="24.0" FirToContents="true" url="cmm::cmmCodeFind.xfdl" text=""/>
              <Static id="staYM_WORK" taborder="2" text="회계년월" left="ccfCD_PROJ:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="tclYM_WORK" taborder="3" left="staYM_WORK:0.0" top="10.0" width="97" height="24.0" url="cmm::cmmCalMM.xfdl" enableevent="true" text=""/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg" ondragmove="divData_ondragmove">
          <Layouts>
            <Layout>
              <Div id="divSplitter" taborder="0" left="0" top="40.00%" width="100.00%" height="5" background="skyblue" cursor="ns-resize" ondrag="divData_divSplitter_ondrag"/>
              <Div id="divDataTop" taborder="0" left="0" top="0" bottom="divSplitter:5" right="0" cssclass="div_DATA_Bg">
                <Layouts>
                  <Layout>
                    <Static id="staTITLE" taborder="0" text="대상실적내역" left="0" top="0" height="30" cssclass="sta_TITLE_Bg" font="normal bold 10pt/normal &quot;Arial&quot;" right="0"/>
                    <Grid id="objGrid" taborder="0" left="0" top="staTITLE:5" bottom="0" right="0"/>
                  </Layout>
                </Layouts>
              </Div>
              <Div id="divDataBottom" taborder="0" left="0" top="divSplitter:5" bottom="0" right="0" cssclass="div_DATA_Bg">
                <Layouts>
                  <Layout>
                    <Static id="staTITLE" taborder="0" text="분할/투자조정내역" left="0" top="0" height="30" cssclass="sta_TITLE_Bg" font="normal bold 10pt/normal &quot;Arial&quot;" right="0"/>
                    <Grid id="objGrid1" taborder="1" left="0" top="staTITLE:5" bottom="0" right="0" oncelldblclick="divData_divDataBottom_objGrid1_oncelldblclick"/>
                  </Layout>
                </Layouts>
              </Div>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	if (!this.gfnIsNull(this.getOwnerFrame().CD_PROJ)) {
		this.dsSearch.setColumn(0, "CD_PROJ", this.getOwnerFrame().CD_PROJ);
		this.dsSearch.setColumn(0, "DS_PROJ", this.getOwnerFrame().DS_PROJ);
		this.dsSearch.setColumn(0, "YM_WORK", this.getOwnerFrame().YM_WORK);
		this.dsSearch.setColumn(0, "NO_SUJI", this.getOwnerFrame().NO_SUJI);
	}
	
	this.FormBtns.Select.click();
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {

};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {	
	this.ccfCD_PROJ = this.divSearch.form.ccfCD_PROJ;

	this.dxGrid = this.divData.form.divDataTop.form.objGrid;
	this.dxGrid1 = this.divData.form.divDataBottom.form.objGrid1;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	this.ccfCD_PROJ.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";

	// 그리드 초기화
	this.gfnGridInit(this.dxGrid, this.dsList, "DO", "DOS_DIVIDEMST");
	this.gfnGridInit(this.dxGrid1, this.dsList1, "DO", "DOS_DIVIDE");

	this.dxGrid1.BeforeUserDataSetParam = "fnGrid_BeforeUserDataSetParam";

};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_PROJ", "string");
	this.dsSelect.addColumn("YM_WORK", "string");
	this.dsSelect.addColumn("NO_SUJI", "bigdecimal");

	this.dsInsert = new Dataset();
	this.dsInsert.addColumn("CD_PROJ", "string");
	this.dsInsert.addColumn("YM_WORK", "string");
	this.dsInsert.addColumn("DT_TRADE", "string");
	this.dsInsert.addColumn("DT_CASH", "string");
	this.dsInsert.addColumn("CD_ITEM", "string");
	this.dsInsert.addColumn("AM_SUJI", "bigdecimal");
	this.dsInsert.addColumn("CD_SUJI", "string");
	this.dsInsert.addColumn("TY_INVEST", "string");
	this.dsInsert.addColumn("CD_DEPT", "string");
	this.dsInsert.addColumn("TY_VENDOR", "string");
	this.dsInsert.addColumn("CD_VENDOR", "string");
	this.dsInsert.addColumn("CD_BANK", "string");
	this.dsInsert.addColumn("NO_ACCOUNT", "string");
	this.dsInsert.addColumn("RM_BIGO", "string");
	this.dsInsert.addColumn("NO_SUJI", "bigdecimal");
	this.dsInsert.addColumn("ID_USER", "string");

	this.dsUpdate = new Dataset();
	this.dsUpdate.addColumn("CD_PROJ", "string");
	this.dsUpdate.addColumn("YM_WORK", "string");
	this.dsUpdate.addColumn("DT_TRADE", "string");
	this.dsUpdate.addColumn("DT_CASH", "string");
	this.dsUpdate.addColumn("CD_ITEM", "string");
	this.dsUpdate.addColumn("AM_SUJI", "bigdecimal");
	this.dsUpdate.addColumn("CD_SUJI", "string");
	this.dsUpdate.addColumn("TY_INVEST", "string");
	this.dsUpdate.addColumn("CD_DEPT", "string");
	this.dsUpdate.addColumn("TY_VENDOR", "string");
	this.dsUpdate.addColumn("CD_VENDOR", "string");
	this.dsUpdate.addColumn("CD_BANK", "string");
	this.dsUpdate.addColumn("NO_ACCOUNT", "string");
	this.dsUpdate.addColumn("RM_BIGO", "string");
	this.dsUpdate.addColumn("NO_SUJI", "bigdecimal");
	this.dsUpdate.addColumn("NO_DIVIDE", "bigdecimal");
	this.dsUpdate.addColumn("ID_USER", "string");

	this.dsDelete = new Dataset();
	this.dsDelete.addColumn("CD_PROJ", "string");
	this.dsDelete.addColumn("YM_WORK", "string");
	this.dsDelete.addColumn("NO_SUJI", "bigdecimal");
	this.dsDelete.addColumn("NO_DIVIDE", "bigdecimal");
	this.dsDelete.addColumn("ID_USER", "string");
	
	this.dsSelect1 = new Dataset();
	this.dsSelect1.addColumn("CD_PROJ", "string");
	this.dsSelect1.addColumn("YM_WORK", "string");
	this.dsSelect1.addColumn("NO_SUJI", "bigdecimal");
	
	this.dsSave = new Dataset();
	this.dsSave.addColumn("CD_PROJ", "string");
	this.dsSave.addColumn("YM_WORK", "string");
	this.dsSave.addColumn("NO_SUJI", "bigdecimal");
	this.dsSave.addColumn("ID_USER", "string");

}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	
	this.dsSelect.setColumn(0, "CD_PROJ", this.dsSearch.getColumn(0, "CD_PROJ"));
	this.dsSelect.setColumn(0, "YM_WORK", this.dsSearch.getColumn(0, "YM_WORK"));
	this.dsSelect.setColumn(0, "NO_SUJI", this.dsSearch.getColumn(0, "NO_SUJI"));
	
	this.dsSelect1.clearData();
	this.dsSelect1.addRow();
	
	this.dsSelect1.setColumn(0, "CD_PROJ", this.dsSearch.getColumn(0, "CD_PROJ"));
	this.dsSelect1.setColumn(0, "YM_WORK", this.dsSearch.getColumn(0, "YM_WORK"));
	this.dsSelect1.setColumn(0, "NO_SUJI", this.dsSearch.getColumn(0, "NO_SUJI"));
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect select1=dsSelect1";
	var outData     = "dsList=select0 dsList1=select10";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	//this.gfnGridInit(this.dxGrid1, this.dsList, "DO", "DOS_DIVIDE");
	//var nrow = this.gfnGridAdd(this.dxGrid1); // top (default), bottom, current
	var nrow = this.gfnGridAdd(this.dxGrid1,"");

	this.dsList1.setColumn(nrow, "NO_SUJI", this.dsList.getColumn(1, "NO_SUJI"));
	this.dsList1.setColumn(nrow, "CO_CORP", this.dsList.getColumn(1, "CO_CORP"));
	this.dsList1.setColumn(nrow, "DS_CORP", this.dsList.getColumn(1, "DS_CORP"));
	this.dsList1.setColumn(nrow, "DT_INPUT", this.dsList.getColumn(1, "DT_INPUT"));
	this.dsList1.setColumn(nrow, "DT_CASH", this.dsList.getColumn(1, "DT_CASH"));
	this.dsList1.setColumn(nrow, "DT_TRADE", this.dsList.getColumn(1, "DT_TRADE"));
	this.dsList1.setColumn(nrow, "AM_SUJI", this.dsList.getColumn(1, "AM_SUJI"));
	this.dsList1.setColumn(nrow, "NO_ACCOUNT", this.dsList.getColumn(1, "NO_ACCOUNT"));
	this.dsList1.setColumn(nrow, "CD_BANK", this.dsList.getColumn(1, "CD_BANK"));
	this.dsList1.setColumn(nrow, "DS_BANK", this.dsList.getColumn(1, "DS_BANK"));
	this.dsList1.setColumn(nrow, "CD_ITEM", this.dsList.getColumn(1, "CD_ITEM"));
	this.dsList1.setColumn(nrow, "TY_INOUT", this.dsList.getColumn(1, "TY_INOUT"));
	this.dsList1.setColumn(nrow, "DS_ITEM", this.dsList.getColumn(1, "DS_ITEM"));
	this.dsList1.setColumn(nrow, "CD_SUJI", this.dsList.getColumn(1, "CD_SUJI"));
	this.dsList1.setColumn(nrow, "TY_SUJI", this.dsList.getColumn(1, "TY_SUJI"));
	this.dsList1.setColumn(nrow, "DS_SUJI", this.dsList.getColumn(1, "DS_SUJI"));
	this.dsList1.setColumn(nrow, "CD_DEPT", this.dsList.getColumn(1, "CD_DEPT"));
	this.dsList1.setColumn(nrow, "DS_DEPT", this.dsList.getColumn(1, "DS_DEPT"));
	this.dsList1.setColumn(nrow, "CD_VENDOR", this.dsList.getColumn(1, "CD_VENDOR"));
	this.dsList1.setColumn(nrow, "TY_VENDOR", this.dsList.getColumn(1, "TY_VENDOR"));
	this.dsList1.setColumn(nrow, "DS_VENDOR", this.dsList.getColumn(1, "DS_VENDOR"));
	this.dsList1.setColumn(nrow, "TY_INVEST", this.dsList.getColumn(1, "TY_INVEST"));
	this.dsList1.setColumn(nrow, "RM_BIGO", this.dsList.getColumn(1, "RM_BIGO"));
	this.dsList1.setColumn(nrow, "NO_SLIP", this.dsList.getColumn(1, "NO_SLIP"));
	
}

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid1);
}

/*
 *	저장 버튼
 */
this.fnSave = function() {
	// 그리드 필수항목 체크
	if (!this.gfnGridValidate(this.dxGrid1)) return;	

	this.dxGrid.updateToDataset();
		
	this.dsInsert.clearData();
	this.dsUpdate.clearData();
	this.dsDelete.clearData();
	
	for (var i = 0; i < this.dsList1.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList1, i);
		switch(flag) {
			case "I":
				var nrow = this.dsInsert.addRow();
				this.dsInsert.setColumn(nrow, "CD_PROJ", this.dsSearch.getColumn(0, "CD_PROJ"));
				this.dsInsert.setColumn(nrow, "YM_WORK", this.dsSearch.getColumn(0, "YM_WORK"));
				this.dsInsert.setColumn(nrow, "DT_TRADE", this.dsList1.getColumn(i, "DT_TRADE"));
				this.dsInsert.setColumn(nrow, "DT_CASH", this.dsList1.getColumn(i, "DT_CASH"));
				this.dsInsert.setColumn(nrow, "CD_ITEM", this.dsList1.getColumn(i, "CD_ITEM"));
				this.dsInsert.setColumn(nrow, "AM_SUJI", this.dsList1.getColumn(i, "AM_SUJI"));
				this.dsInsert.setColumn(nrow, "CD_SUJI", this.dsList1.getColumn(i, "CD_SUJI"));
				this.dsInsert.setColumn(nrow, "TY_INVEST", this.dsList1.getColumn(i, "TY_INVEST"));
				this.dsInsert.setColumn(nrow, "CD_DEPT", this.dsList1.getColumn(i, "CD_DEPT"));
				this.dsInsert.setColumn(nrow, "TY_VENDOR", this.dsList1.getColumn(i, "TY_VENDOR"));
				this.dsInsert.setColumn(nrow, "CD_VENDOR", this.dsList1.getColumn(i, "CD_VENDOR"));
				this.dsInsert.setColumn(nrow, "CD_BANK", this.dsList1.getColumn(i, "CD_BANK"));
				this.dsInsert.setColumn(nrow, "NO_ACCOUNT", this.dsList1.getColumn(i, "NO_ACCOUNT"));
				this.dsInsert.setColumn(nrow, "RM_BIGO", this.dsList1.getColumn(i, "RM_BIGO"));
				this.dsInsert.setColumn(nrow, "NO_SUJI", this.dsSearch.getColumn(0, "NO_SUJI"));
				this.dsInsert.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
				break;
				
			case "U":
				var nrow = this.dsUpdate.addRow();
				this.dsUpdate.setColumn(nrow, "CD_PROJ", this.dsSearch.getColumn(0, "CD_PROJ"));
				this.dsUpdate.setColumn(nrow, "YM_WORK", this.dsSearch.getColumn(0, "YM_WORK"));
				this.dsUpdate.setColumn(nrow, "DT_TRADE", this.dsList1.getColumn(i, "DT_TRADE"));
				this.dsUpdate.setColumn(nrow, "DT_CASH", this.dsList1.getColumn(i, "DT_CASH"));
				this.dsUpdate.setColumn(nrow, "CD_ITEM", this.dsList1.getColumn(i, "CD_ITEM"));
				this.dsUpdate.setColumn(nrow, "AM_SUJI", this.dsList1.getColumn(i, "AM_SUJI"));
				this.dsUpdate.setColumn(nrow, "CD_SUJI", this.dsList1.getColumn(i, "CD_SUJI"));
				this.dsUpdate.setColumn(nrow, "TY_INVEST", this.dsList1.getColumn(i, "TY_INVEST"));
				this.dsUpdate.setColumn(nrow, "CD_DEPT", this.dsList1.getColumn(i, "CD_DEPT"));
				this.dsUpdate.setColumn(nrow, "TY_VENDOR", this.dsList1.getColumn(i, "TY_VENDOR"));
				this.dsUpdate.setColumn(nrow, "CD_VENDOR", this.dsList1.getColumn(i, "CD_VENDOR"));
				this.dsUpdate.setColumn(nrow, "CD_BANK", this.dsList1.getColumn(i, "CD_BANK"));
				this.dsUpdate.setColumn(nrow, "NO_ACCOUNT", this.dsList1.getColumn(i, "NO_ACCOUNT"));
				this.dsUpdate.setColumn(nrow, "RM_BIGO", this.dsList1.getColumn(i, "RM_BIGO"));
				this.dsUpdate.setColumn(nrow, "NO_SUJI", this.dsSearch.getColumn(0, "NO_SUJI"));
				this.dsUpdate.setColumn(nrow, "NO_DIVIDE", this.dsList1.getColumn(i, "NO_DIVIDE"));
				this.dsUpdate.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
				break;
				
			case "D":
				var nrow = this.dsDelete.addRow();
				this.dsDelete.setColumn(nrow, "CD_PROJ", this.dsSearch.getColumn(0, "CD_PROJ"));
				this.dsDelete.setColumn(nrow, "YM_WORK", this.dsSearch.getColumn(0, "YM_WORK"));
				this.dsDelete.setColumn(nrow, "NO_SUJI", this.dsSearch.getColumn(0, "NO_SUJI"));
				this.dsDelete.setColumn(nrow, "NO_DIVIDE", this.dsList1.getColumn(i, "NO_DIVIDE"));
				this.dsDelete.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
				break;
		}
	}
	
	if (this.dsInsert.rowcount == 0 && this.dsUpdate.rowcount == 0 && this.dsDelete.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "insert=dsInsert update=dsUpdate delete=dsDelete";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {
	var validate = true;
	
	if (this.gfnIsNull(this.dsSearch.getColumn(0,"CD_PROJ"))) {
		validate = false;
		// Alert후 실행할 처리
		this.fnVaidateCallback = function() {
			this.ccfCD_PROJ.form.CDTextBox.setFocus();
		}
		this.gfnAlert("프로젝트를 입력하세요.", "fnVaidateCallback");
	}
	
	return validate;
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);	
	}
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
			this.fnSave1();
		} else {
			this.gfnAlert(errorMsg);
		}
	}	
	else if(svcID == "save1") {
		if (errorCode == 0) {
		this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	if (id == "ccfCD_PROJ") {
		dsUserParam.setColumn(nrow, "CD_DEPT", this.AuthClient.CD_DEPT);
		dsUserParam.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
		dsUserParam.setColumn(nrow, "CD_CORP", this.AuthClient.CD_CORP);
		dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
	}	
	return true;
}

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
this.fnGrid_BeforeUserDataSetParam = function(id, dsUserParam, nrow){
	switch(id) {
		case "DOS_CFITEM": //사업수지항목
			//dsUserParam.setColumn(nrow, "CD_PROJ", this.ccfCD_PROJ.form.CDTextBox.value);
			dsUserParam.setColumn(nrow, "CD_PROJ", this.dsSearch.getColumn(0, "CD_PROJ"));
			dsUserParam.setColumn(nrow, "TY_INOUT", "");
			dsUserParam.setColumn(nrow, "YN_USE", "Y");
			break;
		case "DOS_CFACNTUNIT": //귀속부서
			dsUserParam.setColumn(nrow, "CD_DEPT", this.AuthClient.CD_DEPT);
			dsUserParam.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
			dsUserParam.setColumn(nrow, "CD_CORP", this.AuthClient.CD_CORP);
			dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
			dsUserParam.setColumn(nrow, "CD_PROJ", this.ccfCD_PROJ.form.CDTextBox.value);
			break;
		case "DOS_CFVENDOR": //거래처
			dsUserParam.setColumn(nrow, "TY_VENDOR1", ""); 
			dsUserParam.setColumn(nrow, "CD_CORP", this.AuthClient.CD_CORP);
			dsUserParam.setColumn(nrow, "CD_PROJ", this.ccfCD_PROJ.form.CDTextBox.value);
			break;
		case "DFX_CFACCOUNTNO_SUJI": //발생정보
			dsUserParam.setColumn(nrow, "CD_CORP", this.dsList.getColumn(this.dsList.rowposition, "CD_CORP"));
			break;
		case "DOS_CFSUJI": //자금수지
			dsUserParam.setColumn(nrow, "CD_PROJ", this.ccfCD_PROJ.form.CDTextBox.value);
			dsUserParam.setColumn(nrow, "TY_INOUT", "");
			dsUserParam.setColumn(nrow, "TY_SIGN", "");
			dsUserParam.setColumn(nrow, "CD_ITEM", "");
			dsUserParam.setColumn(nrow, "YN_USE", "Y");
			break;	
		default:
			break;
	}		
	return true;
}; 

/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
	}
};

// 최종 SAVE SP 호출
this.fnSave1 = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
		
	this.dsSave.clearData();
	var nrow = this.dsSave.addRow();

	this.dsSave.setColumn(nrow, "CD_PROJ", this.dsSearch.getColumn(0, "CD_PROJ"));
	this.dsSave.setColumn(nrow, "YM_WORK", this.dsSearch.getColumn(0, "YM_WORK"));
	this.dsSave.setColumn(nrow, "NO_SUJI", this.dsSearch.getColumn(0, "NO_SUJI"));
	this.dsSave.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);

	var strSvcId    = "save1";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "save=dsSave";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); 	// 통신방법 정의 [생략가능]	
	
};
]]></Script>
    <Objects>
      <Dataset id="dsList" onvaluechanged="dsList_onvaluechanged"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DOSPR_DIVIDEMST_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">insert</Col>
            <Col id="SP">DOSPR_DIVIDE_INSERT</Col>
          </Row>
          <Row>
            <Col id="TARGET">update</Col>
            <Col id="SP">DOSPR_DIVIDE_UPDATE</Col>
          </Row>
          <Row>
            <Col id="TARGET">delete</Col>
            <Col id="SP">DOSPR_DIVIDE_DELETE</Col>
          </Row>
          <Row>
            <Col id="TARGET">select1</Col>
            <Col id="SP">DOSPR_DIVIDE_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">save</Col>
            <Col id="SP">DOSPR_DIVIDEMST_SAVE</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_PROJ" type="STRING" size="256"/>
          <Column id="DS_PROJ" type="STRING" size="256"/>
          <Column id="YM_WORK" type="STRING" size="256"/>
          <Column id="NO_SUJI" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
      <Dataset id="dsList1" onvaluechanged="dsList1_onvaluechanged"/>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfCD_PROJ.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_PROJ"/>
      <BindItem id="item1" compid="divSearch.form.ccfCD_PROJ.form.DSTextBox" propid="value" datasetid="dsSearch" columnid="DS_PROJ"/>
      <BindItem id="item2" compid="divSearch.form.tclYM_WORK.form.TextBox" propid="value" datasetid="dsSearch" columnid="YM_WORK"/>
    </Bind>
  </Form>
</FDL>
