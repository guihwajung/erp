<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="New Form" onload="form_onload" onclose="form_onclose">
    <Layouts>
      <Layout height="720" width="1280">
        <Div id="divSearch" taborder="0" left="0" top="0" height="46" right="0" cssclass="div_SEARCH_Bg" formscrolltype="none" text="">
          <Layouts>
            <Layout>
              <Static cssclass="sta_WF_SchLabelE" id="staCD_PERIOD" taborder="0" text="조회기간" left="0" top="10" width="92" height="24"/>
              <!--      	  
			  <Static id="staCD_PERSON" taborder="3" text="담당자" left="ctclDT_PERIOD:10" top="10" width="50" height="20"/>
              <Edit id="edt_PERSON" taborder="4" left="staCD_PERSON:5" top="10" width="60" height="20"/>
              <Static id="staCD_PROGRESS" taborder="5" text="진행상태" left="edt_PERSON:10" top="10" width="50" height="20"/>
              <Combo id="ccboTY_PROGRESS" taborder="6" left="staCD_PROGRESS:10" top="10" width="75" height="20" innerdataset="dsTY_Progess" datacolumn="SP" codecolumn="TARGET" value="1" url="cmm::cmmMultiCombo.xfdl"/>
			   -->
              <Calendar id="ctclDT_FROM" taborder="1" left="staCD_PERIOD:0" top="10" width="105" height="24" dateformat="yyyy-MM-dd" editformat="yyyy-MM-dd" autoselect="true"/>
              <Static id="staCD_TILDE" taborder="2" text="~" left="ctclDT_FROM:0" top="10" width="20" height="24" cssclass="sta_WF_AC"/>
              <Calendar id="ctclDT_TO" taborder="3" left="staCD_TILDE:0" top="10" width="105" height="24" dateformat="yyyy-MM-dd" editformat="yyyy-MM-dd" autoselect="true"/>
              <CheckBox id="cchkYN_MULTILINE" taborder="4" text="Multiline" left="ctclDT_TO:30" top="10" width="80" height="24" onchanged="divSearch_cchkYN_MULTILINE_onchanged"/>
              <Static id="staNM_DAM" taborder="1" text="담당자(쿠키)" left="cchkYN_MULTILINE:0" top="10" width="113" height="24" cssclass="sta_WF_SchLabel"/>
              <Combo id="ccboNM_DAM" taborder="1" left="staNM_DAM:0" top="10" width="80" height="24" innerdataset="dsNM_DAM" codecolumn="CODE" datacolumn="VALUE" index="0" text="전체" value="" onitemchanged="divSearch_ccboNM_DAM_onitemchanged"/>
              <Static id="staNM_DEV" taborder="1" text="작업자(쿠키)" left="ccboNM_DAM:0" top="10" width="113" height="24" cssclass="sta_WF_SchLabel"/>
              <Combo id="ccboNM_DEV" taborder="1" left="staNM_DEV:0" top="10" width="80" height="24" innerdataset="dsNM_DEV" codecolumn="CODE" datacolumn="VALUE" index="0" text="전체" value="" onitemchanged="divSearch_ccboNM_DEV_onitemchanged"/>
              <CheckBox id="chkAuto" taborder="9" text="자동조회(5분)" left="ccboNM_DEV:30" top="10" width="110" height="24" onchanged="divSearch_chkAuto_onchanged"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:20" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this._Interval;
this._NO_SEQ = 0;

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{	
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	//this.fnSetExtendButton();
 	this.fnSetVariable();
 	this.fnSetEvent();
 	this.fnSetParameter();
	
	if(nexacro.getPrivateProfile("DZZ_DEVWORK#NO_SEQ") != null) {
		this._NO_SEQ = nexacro.getPrivateProfile("DZZ_DEVWORK#NO_SEQ");
	}
	if(nexacro.getPrivateProfile("DZZ_DEVWORK#IS_AUTO") != null) {
		this.divSearch.form.chkAuto.set_value(nexacro.getPrivateProfile("DZZ_DEVWORK#IS_AUTO"));
		if(this.divSearch.form.chkAuto.value == 1) {
			this.fnNotificationStart();
		}
	}
		
	this.FormBtns.Select.click();
};

function notify() {
	if (window.Notification) {
		if (Notification.permission !== 'granted') {
			alert('알림 권한이 없습니다.');
		}
		else {
			var notification = new Notification('개발의뢰', {
				body: '체크',
			});

			notification.onclick = function () {
			};
		}
	}
}

/************************************************************************
 * 버튼 설정 
 * 서브버튼 사용 처리. 공통 및 확장버튼 버튼관리화면에서 셋팅.
 ************************************************************************/
this.fnSetButton = function() {
	// Select, Add, Del, Save, Excel, Print
	// SubSelect, SubAdd, SubDel, SuubSave, SubExcel
	//this.FormBtns.Select.set_enable(false);
}

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {

	this.dxGrid = this.divData.form.objGrid;
};


/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
 
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("DT_FROM", "string");
	this.dsSelect.addColumn("DT_TO", "string");
	this.dsSelect.addColumn("NM_DAM", "string");
	this.dsSelect.addColumn("NM_DEV", "string");
	
	this.dsSave = new Dataset();
	this.dsSave.addColumn("TY_SAVE", "string");
	this.dsSave.addColumn("NO_SEQ", "int");
	this.dsSave.addColumn("NM_PROJECT","string");
	this.dsSave.addColumn("NM_PROJECT_APPLY", "string");
	this.dsSave.addColumn("NM_DAM","string");
	this.dsSave.addColumn("DT_WORK", "string");
	this.dsSave.addColumn("CD_SYSTEM", "string");
	this.dsSave.addColumn("ID_FORM", "string");
	this.dsSave.addColumn("NM_FORM", "string");
	this.dsSave.addColumn("RM_WORK", "string");
	this.dsSave.addColumn("ST_PROGRESS", "string");
	this.dsSave.addColumn("NM_DEV", "string");
	this.dsSave.addColumn("CNT_REQ", "int");
	this.dsSave.addColumn("CNT_CLOSE", "int");
	this.dsSave.addColumn("DT_CLOSE","string");
	this.dsSave.addColumn("RM_BIGO","string");
	this.dsSave.addColumn("CT_MDAY","BigDecimal");
	this.dsSave.addColumn("ID_USER","string");
	this.dsSave.addColumn("TY_DEV","string");
	this.dsSave.addColumn("RM_BIGO_R","string");
	this.dsSave.addColumn("TY_DEPT","string");
	this.dsSave.addColumn("PRIORITY","string");
	this.dsSave.addColumn("YN_APPROVE", "string");
	this.dsSave.addColumn("NO_CSR", "string");
}

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {

	// 초기값으로 FROM은 한달 전. TO는 한달 후로 설정.
	var today = this.gfnGetDate();
	this.dsSearch.set_enableevent(false);
	this.dsSearch.setColumn(0, "DT_FROM", this.gfnAddDate(today, -31));
	this.dsSearch.setColumn(0, "DT_TO", this.gfnAddDate(today, 30));
	if(nexacro.getPrivateProfile("DZZ_DEVWORK#NM_DAM") != null) {
		this.dsSearch.setColumn(0, "NM_DAM", nexacro.getPrivateProfile("DZZ_DEVWORK#NM_DAM"));
	}
	if(nexacro.getPrivateProfile("DZZ_DEVWORK#NM_DEV") != null) {
		this.dsSearch.setColumn(0, "NM_DEV", nexacro.getPrivateProfile("DZZ_DEVWORK#NM_DEV"));
	}
	this.dsSearch.set_enableevent(true);
	
	// 그리드 초기화
	this.dxGrid.AfterInit = "fnGrid_AfterInit";	// AfterInit 은 반드시 gfnGridInit 전에 선언.
	this.gfnGridInit(this.dxGrid, this.dsList, "DZ", "DZZ_DEVWORK");
	
	
	// BUTTON, BUTTON-IN 처리
	this.dxGrid.ExpandUp = "fnGrid_ExpandUp";
	
};



/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if(!this.fnValidate()) return;

	this.gfnGridBeforeSelect(this.dxGrid);
	
	var dtFrom = this.dsSearch.getColumn(0, "DT_FROM");
	var dtTo = this.dsSearch.getColumn(0, "DT_TO");
	var nmDam = this.dsSearch.getColumn(0, "NM_DAM");
	var nmDev = this.dsSearch.getColumn(0, "NM_DEV");
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	this.dsSelect.setColumn(0, "DT_FROM", dtFrom);
	this.dsSelect.setColumn(0, "DT_TO", dtTo);
	this.dsSelect.setColumn(0, "NM_DAM", nmDam);
	this.dsSelect.setColumn(0, "NM_DEV", nmDev);

	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// trabsaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}



/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnValidate = function() {
	
	var dt_From = this.dsSearch.getColumn(0, "DT_FROM");
	var dt_To = this.dsSearch.getColumn(0, "DT_TO");
	
	if (this.gfnIsNull(dt_From) || this.gfnIsNull(dt_To)) {
		this.gfnAlert("조회기간은 필수입력 값입니다.");
		return false;
	}

	return true;
};

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	var nrow = this.gfnGridAdd(this.dxGrid); // top (default), bottom, current
	this.dsList.set_enableevent(false);
	
	// 작업일자에 오늘 날짜를 넣어준다.
	var today = this.gfnGetDate();
	this.dsList.setColumn(nrow, "DT_WORK", today);
	
	this.dsList.set_enableevent(true);
}

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}

/*
 *	저장 버튼
 */
this.fnSave = function() {
	// 그리드 필수항목 체크
	if (!this.gfnGridValidate(this.dxGrid)) return;	

	this.dxGrid.updateToDataset();
	
	this.dsSave.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "I":
			case "U":
			case "D":
				var nrow = this.dsSave.addRow();
				this.dsSave.setColumn(nrow, "TY_SAVE", flag);
				this.dsSave.setColumn(nrow, "NO_SEQ", this.dsList.getColumn(i, "NO_SEQ"));
				this.dsSave.setColumn(nrow, "NM_PROJECT",this.dsList.getColumn(i, "NM_PROJECT"));	
				this.dsSave.setColumn(nrow, "NM_PROJECT_APPLY",this.dsList.getColumn(i, "NM_PROJECT_APPLY"));
				this.dsSave.setColumn(nrow, "NM_DAM",this.dsList.getColumn(i, "NM_DAM"));
				this.dsSave.setColumn(nrow, "DT_WORK",this.dsList.getColumn(i, "DT_WORK"));
				this.dsSave.setColumn(nrow, "CD_SYSTEM",this.dsList.getColumn(i, "CD_SYSTEM"));
				this.dsSave.setColumn(nrow, "ID_FORM",this.dsList.getColumn(i, "ID_FORM"));
				this.dsSave.setColumn(nrow, "NM_FORM",this.dsList.getColumn(i, "NM_FORM"));
				this.dsSave.setColumn(nrow, "RM_WORK",this.dsList.getColumn(i, "RM_WORK"));
				this.dsSave.setColumn(nrow, "ST_PROGRESS",this.dsList.getColumn(i, "ST_PROGRESS"));
				this.dsSave.setColumn(nrow, "NM_DEV",this.dsList.getColumn(i, "NM_DEV"));
				this.dsSave.setColumn(nrow, "CNT_REQ",this.dsList.getColumn(i, "CNT_REQ"));
				this.dsSave.setColumn(nrow, "CNT_CLOSE",this.dsList.getColumn(i, "CNT_CLOSE"));
				this.dsSave.setColumn(nrow, "DT_CLOSE",this.dsList.getColumn(i, "DT_CLOSE"));
				this.dsSave.setColumn(nrow, "RM_BIGO",this.dsList.getColumn(i, "RM_BIGO"));
				this.dsSave.setColumn(nrow, "CT_MDAY",this.dsList.getColumn(i, "CT_MDAY"));
				this.dsSave.setColumn(nrow, "TY_DEV",this.dsList.getColumn(i, "TY_DEV"));
				this.dsSave.setColumn(nrow, "RM_BIGO_R",this.dsList.getColumn(i, "RM_BIGO_R"));
				this.dsSave.setColumn(nrow, "TY_DEPT",this.dsList.getColumn(i, "TY_DEPT"));
				this.dsSave.setColumn(nrow, "PRIORITY",this.dsList.getColumn(i, "PRIORITY"));
				this.dsSave.setColumn(nrow, "YN_APPROVE", this.dsList.getColumn(i, "YN_APPROVE"));
				this.dsSave.setColumn(nrow, "NO_CSR", this.dsList.getColumn(i, "NO_CSR"));
				
				break;
		}
	}
	
	if (this.dsSave.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "save=dsSave";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
	
}

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);	
		
		if(this.dsList.rowcount > 0) {
			if(nexacro.toNumber(this._NO_SEQ) < nexacro.toNumber(this.dsList.getMax("NO_SEQ"))) {
				this._NO_SEQ = nexacro.toNumber(this.dsList.getMax("NO_SEQ"));
				nexacro.setPrivateProfile("DZZ_DEVWORK#NO_SEQ", this._NO_SEQ);
				if(this.divSearch.form.chkAuto.value == 1) {
					notify();
				}
			}
		}
	}
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
}

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
this.fnGrid_AfterInit = function(obj:nexacro.Grid) {
	// 소계부분 커스텀
	var colNM_DAM = this.dxGrid.getBindCellIndex("body", "NM_DAM");
	this.dxGrid.setCellProperty("body", colNM_DAM, "expr", "expr:dataset.getRowLevel(currow)==1?'소계':NM_DAM");
	
	// 총계부분 커스텀
	this.dxGrid.setCellProperty("summ", colNM_DAM, "textAlign", "center");
	this.dxGrid.setCellProperty("summ", colNM_DAM, "text", "총계");
	
	// 소계부분 decoratetext 타입사용 (bold, italic 등 적용하기)
	// 스타일(tag)부분은 도움말(F1) Grid > Objects > GridCellControl > dispalytype 참고
	//this.dxGrid.setCellProperty("body", colNM_DAM, "displaytype", "expr:dataset.getRowLevel(currow)==1?'decoratetext':'text'"); // text 부분은 해당 컬럼 타입에 맞게
	//this.dxGrid.setCellProperty("body", colNM_DAM, "expr", "expr:dataset.getRowLevel(currow)==1?'<b v=\"true\">소계</b>':NM_DAM");
	
	var colRM_WORK = this.dxGrid.getBindCellIndex("body", "RM_WORK")
	this.dxGrid.setCellProperty( "body", colRM_WORK, "wordWrap", "char" );
	
	this.dxGrid.set_enableredraw(false);	
	this.gfnGridColumnColor(this.dxGrid, "ST_PROGRESS", "Red", "ST_PROGRESS == '개발의뢰'");
	this.gfnGridColumnColor(this.dxGrid, "ST_PROGRESS", "Blue", "ST_PROGRESS == '접수완료' || ST_PROGRESS == '개발중'");
	this.gfnGridColumnColor(this.dxGrid, "ST_PROGRESS", "HotPink", "ST_PROGRESS == '개발완료'");
	this.dxGrid.set_enableredraw(true);
}

 this.fnGrid_ExpandUp = function(obj:nexacro.Grid, e:nexacro.GridMouseEventInfo) {

	var colnm = this.gfnGridGetBindColumnNameByIndex(obj, e.cell);
	
	if(colnm == "FILE_ATTACH") {
		// 최초 작성시엔 NO_SEQ가 없기 때문에 저장 후에 파일 첨부를 진행하여야 함.
		// CD_DIR에 넣어줄 값이 없기에 저장 후 진행!
		if(this.gfnGetFlag(this.dsList, e.row) == "I"){
			this.gfnAlert("저장 후 파일첨부 진행.");
			return false;
		}
	
		var fileManager = {};
		fileManager.CD_GUBUN = "DZ30";
		fileManager.CD_DIR = [this.dsList.getColumn(e.row, "NO_SEQ")];
		fileManager.IS_READONLY = false;
		this.gfnFileManager(fileManager, "fnFileCallback");
	}
}

/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.fnFileCallback = function(strID, val) {
	// val.IsChange : 변경여부, val.Cnt : 파일개수
	
	// 변경시 조회를 다시 하거나
// 	if(val.IsChange == true) {
// 		this.FormBtns.Select.click();
// 	}
	
	// 파일개수를 다시 셋팅
	this.dsList.set_enableevent(false);
	if(val.Cnt == 0) {
		this.dsList.setColumn(this.dsList.rowposition, "FILE_ATTACH", "첨부");
	} else {
		this.dsList.setColumn(this.dsList.rowposition, "FILE_ATTACH", "첨부(" + val.Cnt + ")");
	}
	this.dsList.set_enableevent(true);
};
this.divSearch_cchkYN_MULTILINE_onchanged = function(obj:nexacro.CheckBox,e:nexacro.CheckBoxChangedEventInfo)
{
	if(obj.isChecked()) {
		this.dxGrid.set_autosizingtype("row");
	} else {
		this.dxGrid.set_autosizingtype("none");
	}
};

this.divSearch_ccboNM_DAM_onitemchanged = function(obj:nexacro.Combo,e:nexacro.ItemChangeEventInfo)
{
	if(e.prevalue != e.postvalue) {
		nexacro.setPrivateProfile("DZZ_DEVWORK#NM_DAM", e.postvalue);
		this.FormBtns.Select.click();
	}
};
this.divSearch_ccboNM_DEV_onitemchanged = function(obj:nexacro.Combo,e:nexacro.ItemChangeEventInfo)
{
	if(e.prevalue != e.postvalue) {
		nexacro.setPrivateProfile("DZZ_DEVWORK#NM_DEV", e.postvalue);
		this.FormBtns.Select.click();
	}
};

this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{	
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
	}
};

this.divSearch_chkAuto_onchanged = function(obj:nexacro.CheckBox,e:nexacro.CheckBoxChangedEventInfo)
{
	if(this.divSearch.form.chkAuto.value == 1) {
		this.fnNotificationStart();
	} else {
		if(this._Interval != null) {
			this._Interval.destroy();
			this._Interval = null;
		}
	}
	nexacro.setPrivateProfile("DZZ_DEVWORK#IS_AUTO", this.divSearch.form.chkAuto.value);
};

this.fnNotificationStart = function() {
	// 알림 권한 얻기
	if (window.Notification) {
		Notification.requestPermission();
	}
	
	this._Interval = this.gfnSetInterval(this, function() {
		this.fnSelect();
	}, 1000*60*5); // 5분
	this._Interval.start();
};
]]></Script>
    <Objects>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="DT_FROM" type="STRING" size="256"/>
          <Column id="DT_TO" type="STRING" size="256"/>
          <Column id="NM_DAM" type="STRING" size="256"/>
          <Column id="NM_DEV" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="DT_FROM"/>
            <Col id="DT_TO"/>
            <Col id="NM_DAM"/>
            <Col id="NM_DEV"/>
          </Row>
        </Rows>
      </Dataset>
      <!--
      <Dataset id="dsTY_Progess">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">1</Col>
            <Col id="SP">개발의뢰</Col>
          </Row>
          <Row>
            <Col id="SP">접수완료</Col>
            <Col id="TARGET">2</Col>
          </Row>
          <Row>
            <Col id="SP">문서오류</Col>
            <Col id="TARGET">3</Col>
          </Row>
          <Row>
            <Col id="SP">Question</Col>
            <Col id="TARGET">4</Col>
          </Row>
          <Row>
            <Col id="SP">Answer</Col>
            <Col id="TARGET">5</Col>
          </Row>
          <Row>
            <Col id="SP">개발중</Col>
            <Col id="TARGET">6</Col>
          </Row>
          <Row>
            <Col id="SP">개발완료</Col>
            <Col id="TARGET">7</Col>
          </Row>
          <Row>
            <Col id="SP">확인완료(PL)</Col>
            <Col id="TARGET">8</Col>
          </Row>
        </Rows>
      </Dataset>
-->
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="SP">DZZPR_DEVWORK_SELECT</Col>
            <Col id="TARGET">select</Col>
          </Row>
          <Row>
            <Col id="TARGET">save</Col>
            <Col id="SP">DZZPR_DEVWORK_SAVE</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsNM_DAM">
        <ColumnInfo>
          <Column id="CODE" type="STRING" size="256"/>
          <Column id="VALUE" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CODE"/>
            <Col id="VALUE">전체</Col>
          </Row>
          <Row>
            <Col id="CODE">김근태</Col>
            <Col id="VALUE">김근태</Col>
          </Row>
          <Row>
            <Col id="CODE">김상우</Col>
            <Col id="VALUE">김상우</Col>
          </Row>
          <Row>
            <Col id="CODE">김상훈</Col>
            <Col id="VALUE">김상훈</Col>
          </Row>
          <Row>
            <Col id="CODE">김성욱</Col>
            <Col id="VALUE">김성욱</Col>
          </Row>
          <Row>
            <Col id="CODE">양노석</Col>
            <Col id="VALUE">양노석</Col>
          </Row>
          <Row>
            <Col id="CODE">이진형</Col>
            <Col id="VALUE">이진형</Col>
          </Row>
          <Row>
            <Col id="CODE">지광운</Col>
            <Col id="VALUE">지광운</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsNM_DEV">
        <ColumnInfo>
          <Column id="CODE" type="STRING" size="256"/>
          <Column id="VALUE" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CODE"/>
            <Col id="VALUE">전체</Col>
          </Row>
          <Row>
            <Col id="CODE">김상훈</Col>
            <Col id="VALUE">김상훈</Col>
          </Row>
          <Row>
            <Col id="CODE">한정환</Col>
            <Col id="VALUE">한정환</Col>
          </Row>
          <Row>
            <Col id="CODE">이종석</Col>
            <Col id="VALUE">이종석</Col>
          </Row>
          <Row>
            <Col id="CODE">김동길</Col>
            <Col id="VALUE">김동길</Col>
          </Row>
        </Rows>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ctclDT_FROM" propid="value" datasetid="dsSearch" columnid="DT_FROM"/>
      <BindItem id="item1" compid="divSearch.form.ctclDT_TO" propid="value" datasetid="dsSearch" columnid="DT_TO"/>
      <BindItem id="item2" compid="divSearch.form.ccboNM_DEV" propid="value" datasetid="dsSearch" columnid="NM_DEV"/>
      <BindItem id="item3" compid="divSearch.form.ccboNM_DAM" propid="value" datasetid="dsSearch" columnid="NM_DAM"/>
    </Bind>
  </Form>
</FDL>
