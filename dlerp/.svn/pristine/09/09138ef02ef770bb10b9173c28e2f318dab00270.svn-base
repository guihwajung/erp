(function()
{
    return function()
    {
        if (!this._is_form)
            return;
        
        var obj = null;
        
        this.on_create = function()
        {
            this.set_name("DAW_RETIRETARGET");
            this.set_titletext("퇴직정산대상자");
            if (Form == this.constructor)
            {
                this._setFormPosition(1280,720);
            }
            
            // Object(Dataset, ExcelExportObject) Initialize
            obj = new Dataset("dsList", this);
            obj._setContents("");
            this.addChild(obj.name, obj);


            obj = new Dataset("_dsProc", this);
            obj._setContents("<ColumnInfo><Column id=\"TARGET\" type=\"STRING\" size=\"256\"/><Column id=\"SP\" type=\"STRING\" size=\"256\"/></ColumnInfo><Rows><Row><Col id=\"TARGET\">select</Col><Col id=\"SP\">DAWPR_RETIRETARGET_SELECT</Col></Row><Row><Col id=\"TARGET\">save</Col><Col id=\"SP\">DAWPR_RETIRETARGET_SAVE</Col></Row><Row><Col id=\"TARGET\">retireInfo</Col><Col id=\"SP\">DAWPR_USER_SELECT</Col></Row><Row><Col id=\"TARGET\">retireCreate</Col><Col id=\"SP\">DAWPR_RETIRETHIS_CREATE</Col></Row><Row><Col id=\"TARGET\">dsAuthForm</Col><Col id=\"SP\">DZZPR_DOTNET_AUTHORITYFORM_SELECT_NEW</Col></Row></Rows>");
            this.addChild(obj.name, obj);


            obj = new Dataset("dsSearch", this);
            obj._setContents("<ColumnInfo><Column id=\"YM_RETIRE\" type=\"STRING\" size=\"256\"/><Column id=\"YM_JIGUB\" type=\"STRING\" size=\"256\"/><Column id=\"CD_CORP\" type=\"STRING\" size=\"256\"/><Column id=\"DS_CORP\" type=\"STRING\" size=\"256\"/><Column id=\"TY_GUBUN\" type=\"STRING\" size=\"256\"/></ColumnInfo><Rows><Row><Col id=\"CD_CORP\"/><Col id=\"TY_GUBUN\">E</Col></Row></Rows>");
            this.addChild(obj.name, obj);


            obj = new Dataset("_dsParamAuthForm", this);
            obj._setContents("<ColumnInfo><Column id=\"ID_USER\" type=\"STRING\" size=\"256\"/><Column id=\"CD_DEPT\" type=\"STRING\" size=\"256\"/><Column id=\"CD_CORP\" type=\"STRING\" size=\"256\"/><Column id=\"ID_FORM\" type=\"STRING\" size=\"256\"/><Column id=\"CD_MODULE\" type=\"STRING\" size=\"256\"/></ColumnInfo>");
            this.addChild(obj.name, obj);


            obj = new Dataset("_dsParamBtnInfo", this);
            obj._setContents("<ColumnInfo><Column id=\"CD_CORP\" type=\"STRING\" size=\"256\"/><Column id=\"CD_DEPT\" type=\"STRING\" size=\"256\"/><Column id=\"ID_SABUN\" type=\"STRING\" size=\"256\"/><Column id=\"CD_MODULE\" type=\"STRING\" size=\"256\"/><Column id=\"ID_FORM\" type=\"STRING\" size=\"256\"/></ColumnInfo>");
            this.addChild(obj.name, obj);


            obj = new Dataset("dsAuthForm", this);
            obj._setContents("");
            this.addChild(obj.name, obj);


            obj = new Dataset("dsBtnInfo", this);
            obj._setContents("");
            this.addChild(obj.name, obj);


            obj = new Dataset("dsList2", this);
            obj._setContents("");
            this.addChild(obj.name, obj);
            
            // UI Components Initialize
            obj = new Div("divSearch","0","0",null,"46.0","0",null,null,null,null,null,this);
            obj.set_taborder("0");
            obj.set_cssclass("div_SEARCH_Bg");
            this.addChild(obj.name, obj);

            obj = new Static("staYM_RETIRE","0.0","10.0","92.0","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("4");
            obj.set_text("퇴직년월");
            obj.set_cssclass("sta_WF_SchLabelE");
            this.divSearch.addChild(obj.name, obj);

            obj = new Div("ctclYM_RETIRE","staYM_RETIRE:0.0","10.0","80","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("0");
            obj.set_url("cmm::cmmCalMM.xfdl");
            obj.set_text("");
            obj.getSetter("AfterCDTextChanged").set("fnAfterCDTextChanged");
            this.divSearch.addChild(obj.name, obj);

            obj = new Static("staYM_JIGUB","ctclYM_RETIRE:0.0","10.0","92.0","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("4");
            obj.set_text("지급년월");
            obj.set_cssclass("sta_WF_SchLabel");
            this.divSearch.addChild(obj.name, obj);

            obj = new Div("ctclYM_JIGUB","staYM_JIGUB:0.0","10.0","80","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("0");
            obj.set_url("cmm::cmmCalMM.xfdl");
            obj.set_text("");
            obj.getSetter("AfterCDTextChanged").set("fnAfterCDTextChanged");
            this.divSearch.addChild(obj.name, obj);

            obj = new Static("staCD_CORP","ctclYM_JIGUB:0.0","10.0","66","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("3");
            obj.set_text("법인");
            obj.set_cssclass("sta_WF_SchLabelE");
            this.divSearch.addChild(obj.name, obj);

            obj = new Div("ccfCD_CORP","staCD_CORP:0.0","10.0","250","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.getSetter("CDTextWidth").set("50");
            obj.set_taborder("1");
            obj.set_url("cmm::cmmCodeFind.xfdl");
            obj.getSetter("CodeFindName").set("DAX_CFCORP_CODEFIND");
            obj.getSetter("BeforeUserDataSetParam").set("fnBeforeUserDataSetParam");
            obj.getSetter("AfterCDTextChanged").set("fnAfterCDTextChanged");
            this.divSearch.addChild(obj.name, obj);

            obj = new Static("staTY_GUBUN","ccfCD_CORP:0.0","10.0","66","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("5");
            obj.set_text("구분");
            obj.set_rtl("false");
            obj.set_cssclass("sta_WF_SchLabel");
            this.divSearch.addChild(obj.name, obj);

            obj = new Radio("rdoTY_GUBUN","staTY_GUBUN:0.0","10.0","120","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("2");
            obj.set_direction("vertical");
            obj.set_fittocontents("width");
            obj.set_codecolumn("codecolumn");
            obj.set_datacolumn("datacolumn");
            var divSearch_form_rdoTY_GUBUN_innerdataset = new nexacro.NormalDataset("divSearch_form_rdoTY_GUBUN_innerdataset", obj);
            divSearch_form_rdoTY_GUBUN_innerdataset._setContents("<ColumnInfo><Column id=\"codecolumn\" size=\"256\"/><Column id=\"datacolumn\" size=\"256\"/></ColumnInfo><Rows><Row><Col id=\"codecolumn\">E</Col><Col id=\"datacolumn\">임직원</Col></Row></Rows>");
            obj.set_innerdataset(divSearch_form_rdoTY_GUBUN_innerdataset);
            obj.set_text("임직원");
            obj.set_value("E");
            obj.set_index("0");
            this.divSearch.addChild(obj.name, obj);

            obj = new Div("divData","0","divSearch:10",null,null,"0","0",null,null,null,null,this);
            obj.set_taborder("0");
            obj.set_cssclass("div_DATA_Bg");
            this.addChild(obj.name, obj);

            obj = new Grid("objGrid","0","0",null,null,"0","0",null,null,null,null,this.divData.form);
            obj.set_taborder("0");
            obj.getSetter("BeforeUserDataSetParam").set("fnGrid_BeforeUserDataSetParam");
            obj.getSetter("AfterCDTextChanged").set("fnGrid_AfterCDTextChanged");
            obj._setContents("");
            this.divData.addChild(obj.name, obj);
            // Layout Functions
            //-- Default Layout : this
            obj = new Layout("default","",this._adjust_width,this._adjust_height,this,function(p){});
            this.addLayout(obj.name, obj);
            
            // BindItem Information
            obj = new BindItem("item0","divSearch.form.ctclYM_RETIRE.form.TextBox","value","dsSearch","YM_RETIRE");
            this.addChild(obj.name, obj);
            obj.bind();

            obj = new BindItem("item1","divSearch.form.ctclYM_JIGUB.form.TextBox","value","dsSearch","YM_JIGUB");
            this.addChild(obj.name, obj);
            obj.bind();

            obj = new BindItem("item2","divSearch.form.ccfCD_CORP.form.CDTextBox","value","dsSearch","CD_CORP");
            this.addChild(obj.name, obj);
            obj.bind();

            obj = new BindItem("item3","divSearch.form.ccfCD_CORP.form.DSTextBox","value","dsSearch","DS_CORP");
            this.addChild(obj.name, obj);
            obj.bind();

            obj = new BindItem("item4","divSearch.form.rdoTY_GUBUN","value","dsSearch","TY_GUBUN");
            this.addChild(obj.name, obj);
            obj.bind();
            
            // TriggerItem Information

        };
        
        this.loadPreloadList = function()
        {
            this._addPreloadList("fdl","cmm::cmmCalMM.xfdl");
            this._addPreloadList("fdl","cmm::cmmCodeFind.xfdl");
        };
        
        // User Script
        this.registerScript("DAW_RETIRETARGET.xfdl", function() {
        this.objApp = this.gfnGetApplication();

        this.form_onload = function(obj,e)
        {
        	// -- 필수 -------------------//
        	this.gfnFormOnLoad(this);
        	this.gfnFormInfo(this);
        	// ---------------------------//

        	this.fnSetButton();
        	this.fnSetExtendButton();
        	this.fnSetVariable();
        	this.fnSetEvent();
        	this.fnSetParameter();

        	//퇴직년도 셋팅
        	this.ctclYM_RETIRE.form.TextBox.set_value(this.gfnGetDate().substring(0,6));

        	// 구분
        	this.rdoTY_GUBUN.set_value("E");

        	this.dsSearch.setColumn(0, "CD_CORP", this.AuthClient.CD_CORP);
        	this.ccfCD_CORP.form.DSTextBox.set_value(this.AuthClient.DS_CORP);

        	//임직원 구분 - 일용직 삭제
        	//var rdoDs = this.divSearch.form.rdoTY_GUBUN.getInnerDataset().deleteRow(1);

        	//this.FormBtns.Select.click();
        };

        /************************************************************************
         * 버튼 설정 : 화면(Tab) 전환시 마다 호출
         * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
         ************************************************************************/
        this.fnSetButton = function() {
        	this.FormBtns.Reset.set_enable(true);
        };

        /************************************************************************
         * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
         ************************************************************************/
        this.fnSetExtendButton = function() {
        	this.btnRetireInfoCreate = this.gfnFormButtonAdd("RetireInfoCreate", "fnExtBtnEvent");//퇴직정산정보생성
        	this.btnRetireMng = this.gfnFormButtonAdd("RetireInfoMng", "fnExtBtnEvent");//퇴직정산관리
        	this.btnRetireInfo = this.gfnFormButtonAdd("RetireInfo", "fnExtBtnEvent");//퇴직자정보가져오기

        	this.btnRetireInfoCreate.set_enable(false);
        	this.btnRetireMng.set_enable(false);
        };

        /************************************************************************
         * 변수 선언
         ************************************************************************/
        this.fnSetVariable = function() {
        	this.ctclYM_RETIRE = this.divSearch.form.ctclYM_RETIRE;
        	this.ctclYM_JIGUB = this.divSearch.form.ctclYM_JIGUB;
        	this.ccfCD_CORP = this.divSearch.form.ccfCD_CORP;
        	this.rdoTY_GUBUN = this.divSearch.form.rdoTY_GUBUN;

        	this.dxGrid = this.divData.form.objGrid;
        };

        /************************************************************************
         * 이벤트 설정
         ************************************************************************/
        this.fnSetEvent = function() {
        	this.gfnGridInit(this.dxGrid, this.dsList, "DA", "DAW_RETIRETARGET");
        	this.dxGrid.EnterCell = "fnGrid_EnterCell";
        };

        /************************************************************************
         * 파라미터 설정
         ************************************************************************/
        this.fnSetParameter = function() {
        	//조회
        	this.dsSelect = new Dataset();
        	this.dsSelect.addColumn("YM_RETIRE", "string");
        	this.dsSelect.addColumn("CD_CORP", "string");
        	this.dsSelect.addColumn("YM_JIGUB", "string");
        	this.dsSelect.addColumn("TY_GUBUN", "string");
        	this.dsSelect.addColumn("GR_SEARCH", "string");
        	this.dsSelect.addColumn("GR_CORP", "string");
        	this.dsSelect.addColumn("ID_USER", "string");

        	this.dsCreate = new Dataset();
        	this.dsCreate.addColumn("YM_RETIRE", "string");
        	this.dsCreate.addColumn("CD_CORP", "string");
        	this.dsCreate.addColumn("TY_GUBUN", "string");
        	this.dsCreate.addColumn("GR_SEARCH", "string");
        	this.dsCreate.addColumn("GR_CORP", "string");
        	this.dsCreate.addColumn("ID_USER", "string");

        	this.dsSave = new Dataset();
        	this.dsSave.addColumn("TY_SAVE", "string");
        	this.dsSave.addColumn("TY_GUBUN", "string");
        	this.dsSave.addColumn("CD_CORP", "string");
        	this.dsSave.addColumn("YM_RETIRE", "string");
        	this.dsSave.addColumn("ID_PERSON", "int");
        	this.dsSave.addColumn("ID_SABUN", "string");
        	this.dsSave.addColumn("YN_MID", "string");
        	this.dsSave.addColumn("CD_DEPT", "string");
        	this.dsSave.addColumn("CD_POSITION", "string");
        	this.dsSave.addColumn("CD_PAYSTEP", "string");
        	this.dsSave.addColumn("DT_GROUPJOIN", "string");
        	this.dsSave.addColumn("NO_RETIRE", "int");
        	this.dsSave.addColumn("DT_JOIN", "string");
        	this.dsSave.addColumn("DT_START", "string");
        	this.dsSave.addColumn("DT_RETIRE", "string");
        	this.dsSave.addColumn("TY_PENSION", "string");
        	this.dsSave.addColumn("GR_SEARCH", "string");
        	this.dsSave.addColumn("GR_CORP", "string");
        	this.dsSave.addColumn("ID_USER", "string");
        };

        /************************************************************************
         * 컨트롤 이벤트
         ************************************************************************/
         /*
          *	조회 버튼
          */
        this.fnSelect = function() {

        	this.gfnGridBeforeSelect(this.dxGrid);
        	this.gfnSetFormStatus(this);

        	this.dsSelect.clearData();
        	this.dsSelect.addRow();

        	this.dsSelect.setColumn(0, "YM_RETIRE", this.dsSearch.getColumn(0, "YM_RETIRE"));
        	this.dsSelect.setColumn(0, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
        	this.dsSelect.setColumn(0, "YM_JIGUB", this.dsSearch.getColumn(0, "YM_JIGUB"));
        	this.dsSelect.setColumn(0, "TY_GUBUN", this.dsSearch.getColumn(0, "TY_GUBUN"));
        	this.dsSelect.setColumn(0, "GR_SEARCH", this.FormInfo.GR_SEARCH);
        	this.dsSelect.setColumn(0, "GR_CORP", this.AuthClient.CD_CORP);
        	this.dsSelect.setColumn(0, "ID_USER", this.AuthClient.ID_USER);

        	var strSvcId    = "select";
        	var strSvcType  = "grid";
        	var inProc		= "_dsProc";
        	var inData      = "select=dsSelect";
        	var outData     = "dsList=select0";
        	var strArg      = "";
        	var callBackFnc = "fnCallback";

        	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
        						strSvcType , 	// trabsaction을 요청할 구분
        						inProc,			// Procedure 정보 Dataset 이름
        						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
        						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
        						callBackFnc); // 통신방법 정의 [생략가능]
        };

        //퇴직자 정보 가져오기
        this.fnRetireInfo = function() {
        	var yyBase =this.ctclYM_RETIRE.form.TextBox.value;
        	this.gfnConfirm(yyBase.substring(0,4)+"년 "+ yyBase.substring(4,6)+"월 퇴직자 정보를 입력합니다.\n이전에 입력된 자료는 보존되며 추가정보만 입력됩니다.\n작업을 계속 수행하시겠습니까?","fnRetireInfoCallback");
        };

        this.fnRetireInfoCallback = function(strId, val) {

        	if(val) {

        		this.dsCreate.clearData();
        		this.dsCreate.addRow();

        		this.dsCreate.setColumn(0, "YM_RETIRE", this.dsSearch.getColumn(0, "YM_RETIRE"));
        		this.dsCreate.setColumn(0, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
        		this.dsCreate.setColumn(0, "TY_GUBUN", this.dsSearch.getColumn(0, "TY_GUBUN"));
        		this.dsCreate.setColumn(0, "GR_SEARCH", this.FormInfo.GR_SEARCH);
        		this.dsCreate.setColumn(0, "GR_CORP", this.AuthClient.CD_CORP);
        		this.dsCreate.setColumn(0, "ID_USER", this.AuthClient.ID_USER);

        		//var strSvcId    = "retireInfo";
        		var strSvcId    = "retireCreate";
        		var strSvcType  = "grid";
        		var inProc		= "_dsProc";
        		var inData      = "retireCreate=dsCreate";
        		//var outData     = "dsList2=retireInfo0";
        		var outData     = "";
        		var strArg      = "";
        		var callBackFnc = "fnCallback";

        		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
        							strSvcType , 	// trabsaction을 요청할 구분
        							inProc,			// Procedure 정보 Dataset 이름
        							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
        							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        							strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
        							callBackFnc); // 통신방법 정의 [생략가능]
        	}
        };

        /*
         *	입력 버튼
         */
        this.fnAdd = function() {
        	var nrow = this.gfnGridAdd(this.dxGrid);
        	this.dsList.setColumn(nrow, "GUBUN", this.rdoTY_GUBUN.value);
        };

        /*
         *	삭제 버튼
         */
        this.fnDel = function() {
        	this.gfnGridDel(this.dxGrid);
        };
        /*
         *	저장 버튼
         */
        this.fnSave = function() {

         	// 그리드 필수항목 체크
         	if (!this.gfnGridValidate(this.dxGrid)) return;

        	this.dxGrid.updateToDataset();

        	this.dsSave.clearData();

        	for (var i = 0; i < this.dsList.rowcount; i++) {
        		var flag = this.gfnGetFlag(this.dsList, i);
        		switch(flag) {
        			case "I":
        			case "U":
        			case "D":
        				var nrow = this.dsSave.addRow();
        				this.dsSave.setColumn(nrow, "TY_SAVE", flag);
        				this.dsSave.setColumn(nrow, "TY_GUBUN", this.dsSearch.getColumn(0, "TY_GUBUN"));
        				this.dsSave.setColumn(nrow, "CD_CORP", this.dsList.getColumn(i, "CD_CORP"));
        				this.dsSave.setColumn(nrow, "YM_RETIRE", this.dsList.getColumn(i, "YM_RETIRE"));
        				this.dsSave.setColumn(nrow, "ID_PERSON", this.dsList.getColumn(i, "ID_PERSON"));
        				this.dsSave.setColumn(nrow, "ID_SABUN", this.dsList.getColumn(i, "ID_SABUN"));
        				this.dsSave.setColumn(nrow, "YN_MID", this.dsList.getColumn(i, "YN_MID"));
        				this.dsSave.setColumn(nrow, "CD_DEPT", this.dsList.getColumn(i, "CD_DEPT"));
        				this.dsSave.setColumn(nrow, "CD_POSITION", this.dsList.getColumn(i, "CD_POSITION"));
        				this.dsSave.setColumn(nrow, "CD_PAYSTEP", this.dsList.getColumn(i, "CD_PAYSTEP"));
        				this.dsSave.setColumn(nrow, "DT_GROUPJOIN", this.dsList.getColumn(i, "DT_GROUPJOIN"));
        				this.dsSave.setColumn(nrow, "NO_RETIRE", this.dsList.getColumn(i, "NO_RETIRE"));
        				this.dsSave.setColumn(nrow, "DT_JOIN", this.dsList.getColumn(i, "DT_JOIN"));
        				this.dsSave.setColumn(nrow, "DT_START", this.dsList.getColumn(i, "DT_START"));
        				this.dsSave.setColumn(nrow, "DT_RETIRE", this.dsList.getColumn(i, "DT_RETIRE"));
        				this.dsSave.setColumn(nrow, "TY_PENSION", this.dsList.getColumn(i, "TY_PENSION"));
        				this.dsSave.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
        				this.dsSave.setColumn(nrow, "GR_CORP", this.AuthClient.CD_CORP);
        				this.dsSave.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
        				break;
        		}
        	}

        	if (this.dsSave.rowcount == 0) return;

        	var strSvcId    = "save";
        	var strSvcType  = "save";
        	var inProc		= "_dsProc";
        	var inData      ="save=dsSave";
        	var outData     = "";
        	var strArg      = "";
        	var callBackFnc = "fnCallback";

        	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
        						strSvcType , 	// transaction을 요청할 구분
        						inProc,			// Procedure 정보 Dataset 이름
        						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
        						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
        						callBackFnc); // 통신방법 정의 [생략가능]
        };

        /*
         *	엑셀 버튼
         */
        this.fnExcel = function() {
        	this.gfnExcelExport(this.dxGrid);
        };

        /*
         *	출력 버튼
         */
        this.fnPrint = function() {
        };

        /*
         *	초기화 버튼
         */
        this.fnReset = function(){

        	var divCompArr = this.divSearch.form.components;

        	for( var i=0; i < divCompArr.length; i++){
        		var comp = divCompArr[i];
        		if(comp instanceof nexacro.Div){
        			if(!comp.enable) continue;
        			if(comp.url.indexOf("CodeFind") > 0){
        				comp.form.CDTextBox.set_value("");
        				comp.form.DSTextBox.set_value("");
        				if(this.gfnTypeOf(comp.form.TextBox) == "Edit"){
        					comp.form.TextBox.set_value("");
        				}
        			}else if(comp.url.indexOf("CalYY") > 0 || comp.url.indexOf("CalMM") > 0){
        				comp.form.TextBox.set_value("");
        			}
        		}else if(comp instanceof nexacro.Edit ||
        				comp instanceof nexacro.MaskEdit ||
        				comp instanceof nexacro.Calendar
        		){
        			if(comp.readonly || !comp.enable) continue;
        			comp.set_value("");
        		}else if(comp instanceof nexacro.Combo){
        			if(comp.readonly || !comp.enable) continue;
        			comp.set_index(0);
        		}else if(comp instanceof nexacro.CheckBox){
        			if(comp.readonly || !comp.enable) continue;
        			if(comp.truevalue == "Y"){
        				comp.set_value("N");
        			}else{
        				comp.set_value(false);
        			}
        		}else if(comp instanceof nexacro.Radio){
        			if(comp.readonly || !comp.enable) continue;
        			comp.set_index(0);
        		}
        	}
        };

        /************************************************************************
         * Validate
         ************************************************************************/
        /************************************************************************
         * 콜백 이벤트
         ************************************************************************/
        /*
         *	콜백 처리
         */
        this.fnCallback = function(svcID, errorCode, errorMsg, args)
        {
        	this.FormBtns.Reset.set_enable(true);

        	if (svcID == "select") {
        		this.gfnGridAfterSelect(this.dxGrid);
        		if(this.dsList.rowcount > 1) {		//filter row
        			this.btnRetireInfoCreate.set_enable(true);
        			this.btnRetireMng.set_enable(true);
        		}else{
        			this.btnRetireInfoCreate.set_enable(false);
        			this.btnRetireMng.set_enable(false);
        		}
        	} else if(svcID == "save") {
        		if (errorCode == 0) {
        			this.gfnAlert("작업이 완료되었습니다.");
        			this.FormBtns.Select.click();
        		} else {
        			this.gfnAlert(errorMsg);
        		}

        	} else if(svcID =="retireCreate"){
        		// 퇴직자정보가져오기
        		this.gfnAlert("작업이 완료되었습니다.");
        		this.FormBtns.Select.click();

        	} else if(svcID =="retireInfo"){
        		if(this.dsList2.getRowCount() == 0) {
        			this.gfnAlert("적용년도 기준 추가입력 대상 퇴직자가 존재하지 않습니다.");
        		}else{
        			/*

         			for( var i = 0; i< this.dsList2.rowcount; i++){
        				if(!this.gfnIsNull(this.dsList2.getColumn(i,"ID_SABUN"))){
        					var nrow = this.dsList.addRow();
        					this.dsList.setColumn(nrow, "ID_SABUN", this.dsList2.getColumn(i,"ID_SABUN"));
        					this.dsList.setColumn(i, this.ucFlag, "I");
        				}
         			}
        			this.gfnSetFormStatus(this, "I");
        			//this.gfnAlert("퇴직자 정보 입력이 완료되었습니다.");
        			*/

         			for( var i = 0; i< this.dsList2.rowcount; i++){
        				this.dsList2.setColumn(i, this.ucFlag, "I");
         			}
        			var nRowCnt = this.dsList.appendData(this.dsList2,true,true);
        			this.gfnSetFormStatus(this, "I");
        		}
        	} else if (svcID == "authform") {
        		if (this.dsAuthForm.rowcount > 0) {

        			// 폼 정보
        			this.objForm.CD_MODULE = this.dsAuthForm.getColumn(0, "CD_MODULE");
        			this.objForm.ID_FORM = this.dsAuthForm.getColumn(0, "ID_FORM");
        			this.objForm.NM_FORM = this.dsAuthForm.getColumn(0, "NM_FORM");
        			this.objForm.ID_GROUP = this.dsAuthForm.getColumn(0, "ID_GROUP");
        			this.objForm.GR_SEARCH = this.dsAuthForm.getColumn(0, "GR_SEARCH");
        			this.objForm.TY_AUTH = this.dsAuthForm.getColumn(0, "TY_AUTH");
        			this.objForm.DS_FORM = this.dsAuthForm.getColumn(0, "DS_FORM");
        			this.objForm.CD_ROLE = this.dsAuthForm.getColumn(0, "CD_ROLE");
        			this.objForm.TY_MENU = this.dsAuthForm.getColumn(0, "TY_MENU");
        			this.objForm.DS_PARAM = this.dsAuthForm.getColumn(0, "DS_PARAM");

        			// 버튼 정보
        			this.objForm.BtnInfo = [];
        			for(var i = 0; i < this.dsBtnInfo.rowcount; i++) {
        				var json = {};
        				json.ID_BUTTON = this.dsBtnInfo.getColumn(i, "ID_BUTTON");
        				json.DS_BUTTON = this.dsBtnInfo.getColumn(i, "DS_BUTTON");
        				json.TY_BUTTON = this.dsBtnInfo.getColumn(i, "TY_BUTTON");
        				json.RM_BUTTON = this.dsBtnInfo.getColumn(i, "RM_BUTTON");
        				json.YN_VISIBLE = this.dsBtnInfo.getColumn(i, "YN_VISIBLE");
        				json.YN_ENABLED = this.dsBtnInfo.getColumn(i, "YN_ENABLED");
        				json.YN_QUERYX = this.dsBtnInfo.getColumn(i, "YN_QUERYX");
        				json.YN_UPDATEBLOCK = this.dsBtnInfo.getColumn(i, "YN_UPDATEBLOCK");
        				json.SN_ORDER = this.dsBtnInfo.getColumn(i, "SN_ORDER");
        				this.objForm.BtnInfo.push(json);
        			}

        			var json = this.gfnArgsToJson(args);
        			if (json.type == "popup" || json.type == "dialog") {
        				if(this.objForm.TY_MENU == "Dialog") {
        					json.type = "dialog";
        				}
        				this.objForm.CD_MODULE = json.cd_module;
        				this.objForm.ID_FORM = json.id_form;
        				this.objForm.POP_WIDTH = this.gfnIsNull(json.width) ? 0: nexacro.toNumber(json.width);
        				this.objForm.POP_HEIGHT = this.gfnIsNull(json.height) ? 0: nexacro.toNumber(json.height);
        				this.objForm.POP_CALLBACK = this.gfnIsNull(json.callback) ? "": json.callback;
        				this.objForm.POP_ARGS = json;

        				this.gfnCallPopup(this.objForm, json.type);
        			}
        			else if (json.type == "ext") {
        				// 외부 다이렉트 화면 접근
        				var func = this.objApp.gvMainFrame.form.lookupFunc(json.callback);
        				if (func != null) {
        					func.call(this.objForm);
        				}
        			}
        			else {
        				this.gfnCallNew(this.objForm);
        			}
        		}
        	}
        };

        /************************************************************************
         * 코드파인드 이벤트
         ************************************************************************/
        this.ccfCD_CORP_AfterCDTextChanged = function(id) {
        	if(!this.gfnIsNull(this.ccfCD_CORP.form.CDTextBox.value)) {
        		this.objApp.DW_SPACE01 = this.ccfCD_CORP.form.CDTextBox.value;
        		this.objApp.DW_SPACE02 = this.ccfCD_CORP.form.DSTextBox.value;
        	}
        	this.fnSearchInit();
        }

        this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {

         	switch(id) {
        		case "ccfCD_CORP": // 법인코드
        			dsUserParam.setColumn(nrow, "CD_CORP", this.AuthClient.CD_CORP);
        			dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
        			dsUserParam.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
        			break;

        		default:
         	}

         	return true;
        };

        this.fnAfterCDTextChanged = function(id, codeFindData) {
        	this.fnSearchInit();
        };

        //그리드 코드파인드
        this.fnGrid_BeforeUserDataSetParam = function(id, dsUserParam, nrow){
        	var nRow = this.dxGrid.currentrow;	//arr[0]["rowInfo"];
        	switch(id) {
        		//법인
        		case "DAX_CFCORP_CODEFIND":
        			break;
        		//사번
        		case "DAX_CFBASEINFO":
        			dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
        			dsUserParam.setColumn(nrow, "CD_DEPT", "%");
        			dsUserParam.setColumn(nrow, "TY_RETIRE", "%");	// 재직구분
        			break;
        		//부서
        		case "DAX_CFDEPT4":
        			var CD_CORP = this.dxGrid.getCellValue(nRow, this.dxGrid.getBindCellIndex("body", "CD_CORP"));
        			if(this.gfnIsNull(CD_CORP)){
        				this.gfnAlert("법인코드를 먼저 선택해주세요.");
        				return false;
        			}
        			dsUserParam.setColumn(nrow, "CD_CORP", CD_CORP);
        			break;
        		//직위
        		case "DAX_CFCOMMONCODE":
        			dsUserParam.setColumn(nrow, "CD_PREFIX", 'ED');	//직위
        			break;

        		//급호
        		case "DAX_CFPAYSTEP":
        			break;

        		default:
        	}

        	return true;
        };

        this.fnGrid_AfterCDTextChanged = function(id, codeFindData) {
        	var arr = codeFindData;

        	switch(id) {
        		case "DAX_CFBASEINFO":
        			var nRow = this.dxGrid.currentrow;	//arr[0]["rowInfo"];
        			this.dsList.setColumn(nRow, "CD_CORP", arr[0]["CD_CORP"]);
        			this.dsList.setColumn(nRow, "DS_CORP", arr[0]["DS_CORP"]);
        			this.dsList.setColumn(nRow, "CD_DEPT", arr[0]["CD_DEPT"]);
        			this.dsList.setColumn(nRow, "DS_DEPT", arr[0]["DS_DEPT"]);
        			this.dsList.setColumn(nRow, "CD_POSITION", arr[0]["CD_POSITION"]);
        			this.dsList.setColumn(nRow, "DS_POSITION", arr[0]["DS_POSITION"]);
        			this.dsList.setColumn(nRow, "CD_PAYSTEP", arr[0]["CD_PAYSTEP"]);
        			this.dsList.setColumn(nRow, "DS_PAYSTEP", arr[0]["DS_PAYSTEP"]);
        			this.dsList.setColumn(nRow, "DT_GROUPJOIN", arr[0]["DT_GROUPJOIN"]);
        			this.dsList.setColumn(nRow, "DT_JOIN", arr[0]["DT_JOIN"]);
        			break;

        		default:
        	}
        };

        /************************************************************************
         * 그리드 이벤트
         ************************************************************************/

         this.fnGrid_RowCellChanged = function(obj,e)
         {
        	var ynClose = this.dsList.getColumn(e.row, "YN_CLOSE");

        	if(this.gfnIsNull(ynClose)) ynClose = "N";

        	if (ynClose == "Y") {
        		this.btnCloseExecute.set_enable(false);
        		this.btnCloseCancle.set_enable(true);

        	} else if (ynClose == "N") {
        		this.btnCloseExecute.set_enable(true);
        		this.btnCloseCancle.set_enable(false);

        	}
        };

        // 셀 수정가능 여부 (반드시 EnterCell에서 처리할것)
        this.fnGrid_EnterCell = function(obj, row, cell) {
        	var colnm = this.gfnGridGetBindColumnNameByIndex(obj, cell);
        	var flag = this.gfnGetFlag(this.dsList, row);

        	// 전표발행건 수정불가처리
        	if (!this.gfnIsNull(this.dsList.getColumn(row, "CD_TRADE"))){
        		return false;
        	}

        	// 공통 > Setting > 그리드정보 에서 셋팅한 내용대로
        	nGrdSpcRow = this.dsGridSpec.findRow( "DS_FIELD", colnm);
        	var YN_READONLY = this.dsGridSpec.getColumn(nGrdSpcRow, "YN_READONLY");
        	if(YN_READONLY == "Y") return false;
        	if(YN_READONLY =="U" && (this.gfnIsNull(flag) || flag == "U")){	// flag 가 U 이거나 빈값
        		return false;
        	}
        	return true;
        }

         /************************************************************************
         * 확장버튼 이벤트
         ************************************************************************/
        this.fnExtBtnEvent = function(btn){

        	var param = {};
        	var btnUrl;

        	switch(btn.id){
        	// 퇴직정산정보생성
        	case "btnExt_RetireInfoCreate":
        		param = {
        			YM_BASE : 	this.dsList.rowposition > 0? this.dsList.getColumn(this.dsList.rowposition, "YM_RETIRE"):this.dsSearch.getColumn(0, "YM_RETIRE"),
        			CD_CORP: 	this.dsList.rowposition > 0? this.dsList.getColumn(this.dsList.rowposition, "CD_CORP"):this.dsSearch.getColumn(0, "CD_CORP"),
        			DS_CORP: 	this.dsList.rowposition > 0? this.dsList.getColumn(this.dsList.rowposition, "DS_CORP"):this.dsSearch.getColumn(0, "DS_CORP"),
        			TY_GUBUN: 	this.rdoTY_GUBUN.value,
        			ID_SABUN: 	this.dsList.rowposition > 0? this.dsList.getColumn(this.dsList.rowposition, "ID_SABUN"):"",
        			DS_HNAME: 	this.dsList.rowposition > 0? this.dsList.getColumn(this.dsList.rowposition, "DS_HNAME"):"",
        			ID_PERSON: 	this.dsList.rowposition > 0? this.dsList.getColumn(this.dsList.rowposition, "ID_PERSON"):""
        		};
        		btnUrl = "DAW_INITRETIRECREATE_DLG";
        		this.gfnFormOpen(this.FormInfo.CD_MODULE, btnUrl, "fnPopupCallBack", param);		// 퇴직정산정보 생성
        		break;

        	// 퇴직정산관리
        	case "btnExt_RetireInfoMng":
        		param={
        			YM_RETIRE:this.dsList.rowposition > 0? this.dsList.getColumn(this.dsList.rowposition, "YM_RETIRE"):"",
        			TY_GUBUN:this.rdoTY_GUBUN.value,
        			CD_CORP:this.dsList.rowposition > 0? this.dsList.getColumn(this.dsList.rowposition, "CD_CORP"):"",
        			DS_CORP: this.dsList.rowposition > 0? this.dsList.getColumn(this.dsList.rowposition, "DS_CORP"):"",
        			ID_SABUN:this.dsList.getColumn(this.dsList.rowposition, "ID_SABUN"), //this.dsList.rowposition > 0?this.dsList.getColumn(this.dsList.rowposition, "ID_SABUN"):"",
        			DS_HNAME:this.dsList.getColumn(this.dsList.rowposition, "DS_HNAME")
        		};
        		btnUrl = "DAW_RETIRE";
        		//this.fnMenuOpen(this.FormInfo.CD_MODULE, btnUrl, "퇴직정산관리", param);
        		this.gfnFormOpen(this.FormInfo.CD_MODULE, btnUrl, "fnPopupCallBack", param);		// 퇴직정산정보 생성
        		break;

        	case "btnExt_RetireInfo": //퇴직자정보가져오기
        		this.fnRetireInfo();
        		break;
        	}
        }

        this.fnPopupCallBack = function(svcID, value) {
        	if(svcID.indexOf("DAW_INITRETIRECREATE_DLG") > 0){
        		if(value){
        			//this.gfnAlert("퇴직정산정보가 생성되었습니다.");
        			this.FormBtns.Select.click();
        		}
        	}
        	if(svcID.indexOf("DAW_RETIRE") > 0){
        		this.FormBtns.Select.click();
        	}
        };
        /************************************************************************
         * 기타 이벤트
         ************************************************************************/
        /*
         *	조회 조건 변경시 초기화
         */
        this.fnSearchInit = function(obj,e) {
        	if(e == null || (e.pretext != e.posttext)) {
        		// 폼상태 초기화
        		this.gfnSetFormStatus(this);
        		this.gfnGridClear(this.dxGrid);
        	}
        };

        this.dsSearch_onvaluechanged = function(obj,e)
        {
        	if(e.oldvalue != e.newvalue) {
        		this.gfnSetFormStatus(this);	// 폼상태 초기화
        		this.gfnGridClear(this.dxGrid);
        	}
        };

         this.fnMenuOpen = function(cd_module, id_form, nm_form, objArg) {
        	var authArg = "";

        	var id_win = cd_module + "#" + id_form;
        	var winid = this.objApp.gdsOpenMenu.lookup("ID_WIN", id_win, "ID_WIN");

        	if (!this.gfnIsNull(winid))
        	{
        		if (this.objApp.gvFormLimit == 1 && this.objApp.gvMdiFrame.form.isActiveFrame(winid) == true)
        		{
        			return false;
        		}
        		else if (this.objApp.gvFormLimit > 1 && this.objApp.gvFormLimit <= this.objApp.gvMdiFrame.form.isActiveFrameCount(winid)) {
        			this.objApp.gvMdiFrame.form.isActiveFrame(winid);
        			alert(this.objApp.gvFormLimit + "개 초과하여 같은 화면을 열수 없습니다");
        			return false;
        		}
        	}

        	//열린메뉴 체크( application.gvMax = 8)
        	if( this.objApp.gvMax <= this.objApp.gdsOpenMenu.getRowCount() ){

        		this.gfnAlert(this.objApp.gvMax +"개 초과하여 화면을 열수 없습니다");
        		return false;
        	}

        	this.objForm = {
        		CD_MODULE: cd_module,
        		ID_FORM: id_form,
        		NM_FORM: nm_form,
        		DS_FORM: "",
        		ID_GROUP: "",
        		GR_SEARCH: "",
        		TY_AUTH: "",
        		CD_ROLE: "",
        		Args : objArg
        	};

        	// 인증정보
        	this.fnAuthForm(this, cd_module, id_form, authArg);
        };

        this.fnAuthForm = function(objForm, cd_module, id_form, strArg)
        {
        	if(strArg == null) strArg = "";
        	this.objForm.CUR_FORM = objForm;

        	var dsUser = this.objApp.gdsUserInfo;
        	this._dsParamAuthForm.clearData();
        	this._dsParamAuthForm.addRow();
        	this._dsParamAuthForm.setColumn(0, "ID_USER", dsUser.getColumn(0, "ID_USER"));
        	this._dsParamAuthForm.setColumn(0, "CD_DEPT", dsUser.getColumn(0, "CD_DEPT"));
        	this._dsParamAuthForm.setColumn(0, "CD_CORP", dsUser.getColumn(0, "CD_CORP"));
        	this._dsParamAuthForm.setColumn(0, "ID_FORM", id_form);
        	this._dsParamAuthForm.setColumn(0, "CD_MODULE", cd_module);

        	this._dsParamBtnInfo.clearData();
        	this._dsParamBtnInfo.addRow();
        	this._dsParamBtnInfo.setColumn(0, "CD_CORP", dsUser.getColumn(0, "CD_CORP"));
        	this._dsParamBtnInfo.setColumn(0, "CD_DEPT", dsUser.getColumn(0, "CD_DEPT"));
        	this._dsParamBtnInfo.setColumn(0, "ID_SABUN", dsUser.getColumn(0, "ID_USER"));
        	this._dsParamBtnInfo.setColumn(0, "CD_MODULE", cd_module);
        	this._dsParamBtnInfo.setColumn(0, "ID_FORM", id_form);

        	var strSvcId    = "authform";
        	var strSvcType  = "select";
        	var inProc		= "_dsProc";
        	var inData      = "dsAuthForm=_dsParamAuthForm dsBtnInfo=_dsParamBtnInfo";
        	var outData     = "dsAuthForm=dsAuthForm0 dsBtnInfo=dsBtnInfo0"; //"dsList=dsLogin1 dsList2=dsLogin2";
        	var callBackFnc = "fnCallback";

        	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
        						strSvcType , 	// trabsaction을 요청할 구분
        						inProc,			// Procedure 정보 Dataset 이름
        						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
        						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
        						callBackFnc); // 통신방법 정의 [생략가능]
        };
        });
        
        // Regist UI Components Event
        this.on_initEvent = function()
        {
            this.addEventHandler("onload",this.form_onload,this);
            this.divSearch.form.rdoTY_GUBUN.addEventHandler("onitemchanged",this.fnSearchInit,this);
            this.divData.form.objGrid.addEventHandler("onexpandup",this.divData_objGrid_onexpandup,this);
            this.dsList.addEventHandler("onvaluechanged",this.dsList_onvaluechanged,this);
            this.dsSearch.addEventHandler("onvaluechanged",this.dsSearch_onvaluechanged,this);
            this.dsList2.addEventHandler("onvaluechanged",this.dsList_onvaluechanged,this);
        };
        this.loadIncludeScript("DAW_RETIRETARGET.xfdl");
        this.loadPreloadList();
        
        // Remove Reference
        obj = null;
    };
}
)();
