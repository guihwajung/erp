<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="선급금관리" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg" text="">
          <Layouts>
            <Layout>
              <Static id="staCD_SITE" taborder="0" text="현장코드" left="0.0" top="10.0" width="92.0" height="24.0" textAlign="center" cssclass="sta_WF_SchLabel"/>
              <Div id="ccfCD_SITE" CodeFindName="DZX_CFSITE" CDTextWidth="80" taborder="1" left="staCD_SITE:0.0" top="10.0" width="250" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
              <Static id="staNO_HADOCONT" taborder="2" text="계약번호" left="ccfCD_SITE:0.0" top="10.0" width="92.0" height="24.0" textDecoration="none" textAlign="center" cssclass="sta_WF_SchLabel"/>
              <Div id="ccfNO_HADOCONT" CodeFindName="DWX_CFHADO_01" CDTextWidth="120" taborder="3" left="staNO_HADOCONT:0.0" top="10.0" width="250" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
              <Static id="staCD_VENDOR" taborder="4" text="업체코드" left="ccfNO_HADOCONT:0.0" top="10.0" width="92.0" height="24.0" textDecoration="none" textAlign="center" cssclass="sta_WF_SchLabel"/>
              <Div id="ccfCD_VENDOR" CodeFindName="DWX_CFHADOVENDOR_01" CDTextWidth="80" taborder="5" left="staCD_VENDOR:0.0" top="10.0" width="250" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
              <CheckBox id="chk_GISUNGREQ" taborder="6" text="완료제외" top="10.0" width="175" height="24.0" value="1" left="ccfCD_VENDOR:0.0" onchanged="divSearch_cchkHADOGS_GISUNGTOT_onchanged" falsevalue="N" truevalue="Y"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="1" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg" ondragmove="divData_ondragmove">
          <Layouts>
            <Layout>
              <Div id="divDataBottom" taborder="0" left="0" top="0" bottom="0" right="0">
                <Layouts>
                  <Layout>
                    <Static id="sta02" taborder="1" text="선급금청구내역" left="0" top="0" right="5" height="22" cssclass="sta_TITLE_Bg"/>
                    <Grid id="objGridSub" taborder="0" left="0" top="sta02:5" bottom="0" right="0"/>
                    <Button id="btnStockView" taborder="2" text="보증서보기" top="0" width="73" height="23" onclick="fnStockView" cssclass="btnExt" right="106"/>
                    <Button id="btnStockChange" taborder="3" text="보증변경내역" top="0" width="103" height="23" onclick="fnStockChange" cssclass="btnExt" right="0" visible="true"/>
                  </Layout>
                </Layouts>
              </Div>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[include 'lib::libCommon.xjs'
this.objApp = this.gfnGetApplication();
this.selSlipNo;
this.execGubun = "";   // 저장후 전표 처리인지 전표발행 버튼 클릭후 전표 처리인지 구분(값이 'btnExec'이면 전표발행 버튼, 'btnSave'이면 저장 버튼, 'btnExecCan'이면 전표취소 버튼)

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
   // -- 필수 -------------------//
   this.gfnFormOnLoad(this);   
   this.gfnFormInfo(this);      
   // ---------------------------//
   
   this.fnSetButton();
   this.fnSetExtendButton();
   this.fnSetVariable();
   this.fnSetEvent();
   this.fnSetParameter();
   
 	if(!this.gfnIsNull(this.getOwnerFrame().CD_SITE))
	{
		this.dsSearch.setColumn(0, "CD_SITE", this.getOwnerFrame().CD_SITE);
		this.divSearch.form.ccfCD_SITE.form.DSTextBox.set_value(this.getOwnerFrame().DS_SITE);
		this.dsSearch.setColumn(0, "NO_HADOCONT", this.getOwnerFrame().NO_HADOCONT);
		this.divSearch.form.ccfNO_HADOCONT.form.DSTextBox.set_value(this.getOwnerFrame().DS_HADOCONT);
		this.dsSearch.setColumn(0, "CD_VENDOR", this.getOwnerFrame().CD_VENDOR);
		this.divSearch.form.ccfCD_VENDOR.form.DSTextBox.set_value(this.getOwnerFrame().DS_VENDOR);	
	  
		this.FormBtns.Select.click();
	}  
	
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 ************************************************************************/
this.fnSetButton = function() {
	this.FormBtns.Save.set_enable(true);
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결
 ************************************************************************/
this.fnSetExtendButton = function() {
     this.btn1 = this.gfnFormButtonAdd("btnSlipIssue", "fnSlipIssue");
   this.btn2 = this.gfnFormButtonAdd("btnSlipSearch", "fnSlipSearch");
   this.btn3 = this.gfnFormButtonAdd("btnSlipCancel", "fnSlipCancel");
   this.btn4 = this.gfnFormButtonAdd("btnSlipIssueSap", "fnSlipIssueSap");
   this.btn5 = this.gfnFormButtonAdd("btnSlipCancelSap", "fnSlipCancelSap");
   this.btn6 = this.gfnFormButtonAdd("btnChrProc", "fnChrProc");
   this.btnSgnReq = this.gfnFormButtonAdd("btnSgnReq", "fnSgnReq");
   this.btnAttachFileSite = this.gfnFormButtonAdd("btnAttachFileSite", "fnAttachFileSite");
   this.btnAttachFileVndr = this.gfnFormButtonAdd("btnAttachFileVndr", "fnAttachFileVndr");
   //this.btnApp = this.gfnFormButtonAdd("btnAttachFileVndr", "fnApp");
   
   this.btnApp = this.gfnFormButtonAdd("btnApp", "fnApp");
   this.btnAppCancel = this.gfnFormButtonAdd("btnAppCancel", "fnAppCancel");
   
   this.btnPrintPrepay1 = this.gfnFormButtonAdd("btnPrintPrepay1", "fnPrintPrepay1");
   this.btnPrintPrepay2 = this.gfnFormButtonAdd("btnPrintPrepay2", "fnPrintPrepay2");  
   
   this.btnFile = this.gfnFormButtonAdd("btnFile", "fnFile");  
};


/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {

   this.ccfCD_SITE = this.divSearch.form.ccfCD_SITE;
   this.ccfNO_HADOCONT = this.divSearch.form.ccfNO_HADOCONT;
   this.ccfCD_VENDOR = this.divSearch.form.ccfCD_VENDOR;
   
   this.dxGridSub = this.divData.form.divDataBottom.form.objGridSub;
}; 


/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {   

	this.ccfCD_SITE.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.ccfNO_HADOCONT.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.ccfCD_VENDOR.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";



	
	//this.dsList.addEventHandler("canrowposchange", this.dsList_canrowposchange, this);
	
	this.gfnGridInit(this.dxGridSub, this.dsListSub, "DW", "DWB_PREPAY_ALL");
	this.dxGridSub.BeforeUserDataSetParam = "fnGridSub_BeforeUserDataSetParam";
	this.dxGridSub.AfterCDTextChanged = "codefind_AfterCDTextChanged";
	
	this.dxGridSub.addEventHandler("onselectchanged", this.fnGridSub_RowCellChanged, this);

	// row 수정가능 여부
	this.dxGridSub.EnterCell = "fnGridSub_EnterCell";
	//this.dxGridSub.AfterEdit = "fnGridSub_AfterEdit";
	this.dxGridSub.ExpandUp = "fnGridSub_ExpandUp";
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.codefind_AfterCDTextChanged = function(id) {
	if(id == "DWX_CFHADO_01") {
		var row = this.dsListSub.rowposition
		
		this.dsListSub.setColumn(row, "NO_SEQ", "");
		this.dsListSub.setColumn(row, "ADV_NO_CONT", "");
		this.dsListSub.setColumn(row, "ADV_NO_TY_DMD", "");
		this.dsListSub.setColumn(row, "DT_DMD", "");
		this.dsListSub.setColumn(row, "AM_OUR_TOT", "");
		this.dsListSub.setColumn(row, "RT_ADV", "");
		this.dsListSub.setColumn(row, "AM_DMD_TOT", "");
		this.dsListSub.setColumn(row, "RT_TERM1", "");
		this.dsListSub.setColumn(row, "RT_TERM2", "");

	}
}

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {

	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("TY_WRK", "string");
	this.dsSelect.addColumn("CD_SITE", "string");
	this.dsSelect.addColumn("NO_HADOCONT", "string");
	this.dsSelect.addColumn("CD_VENDOR", "string");

	this.dsSelectSub = new Dataset();
	this.dsSelectSub.addColumn("TY_WRK", "string");
	this.dsSelectSub.addColumn("CD_SITE", "string");
	this.dsSelectSub.addColumn("NO_HADOCONT", "string");
	this.dsSelectSub.addColumn("CD_VENDOR", "string");
	this.dsSelectSub.addColumn("YN_CMPLT", "string");
	
	this.dsSave = new Dataset();
	this.dsSave.addColumn("TY_WRK", "string");
	this.dsSave.addColumn("ID_USER", "string");
	this.dsSave.addColumn("CD_SITE", "string");
	this.dsSave.addColumn("NO_CONT", "string");
	this.dsSave.addColumn("CD_VENDOR", "string");
	this.dsSave.addColumn("NO_SEQ", "string");
	this.dsSave.addColumn("CD_DIV", "string");
	this.dsSave.addColumn("DT_PREPAY", "string");
	this.dsSave.addColumn("AM_REQUESTPRO", "bigdecimal");
	this.dsSave.addColumn("AM_REQUESTVAT", "bigdecimal");
	this.dsSave.addColumn("AM_REQUESTTXFR", "bigdecimal");
	this.dsSave.addColumn("AM_REQUEST", "bigdecimal");
	this.dsSave.addColumn("AM_NOTIPRO", "bigdecimal");
	this.dsSave.addColumn("AM_NOTIVAT", "bigdecimal");
	this.dsSave.addColumn("AM_NOTITXFR", "bigdecimal");
	this.dsSave.addColumn("AM_NOTI", "bigdecimal");
	this.dsSave.addColumn("DS_REASON", "string");
	this.dsSave.addColumn("DT_IRCPSRCV", "string");
	this.dsSave.addColumn("AM_PREPAYPRO", "bigdecimal");
	this.dsSave.addColumn("AM_PREPAYVAT", "bigdecimal");
	this.dsSave.addColumn("AM_PREPAYTXFR", "bigdecimal");
	this.dsSave.addColumn("AM_PREPAY", "bigdecimal");
	this.dsSave.addColumn("AM_GUPPRO", "bigdecimal");
	this.dsSave.addColumn("AM_GUPVAT", "bigdecimal");
	this.dsSave.addColumn("AM_GUPTXFR", "bigdecimal");
	this.dsSave.addColumn("AM_GUP", "string");
	this.dsSave.addColumn("DT_ACNT", "string");
	this.dsSave.addColumn("DT_REQTAXBILL", "string");
	this.dsSave.addColumn("YN_FORWARD", "string");
	this.dsSave.addColumn("CD_PAYMENT", "string");
	this.dsSave.addColumn("DT_PAYMENT", "string");
	this.dsSave.addColumn("NO_ERPKEY", "string");
	this.dsSave.addColumn("NO_SLIP", "string");
	this.dsSave.addColumn("NO_SLIP2", "string");
	this.dsSave.addColumn("TY_STOCK", "string");
	this.dsSave.addColumn("NO_STOCK", "string");
	this.dsSave.addColumn("DS_STOCKKIND", "string");
	this.dsSave.addColumn("AM_GUARANTEE", "bigdecimal");
	this.dsSave.addColumn("OR_PUBLICATION", "string");
	this.dsSave.addColumn("DT_RECEIPT", "string");
	this.dsSave.addColumn("DT_MANRYO", "string");
	this.dsSave.addColumn("FR_GNTPERD", "string");
	this.dsSave.addColumn("TO_GNTPERD", "string");
	this.dsSave.addColumn("DS_PAPER", "string");
	this.dsSave.addColumn("CD_VATPROOF", "string");
	this.dsSave.addColumn("NO_VAT1", "string");
	this.dsSave.addColumn("NO_VAT2", "string");
	this.dsSave.addColumn("CONVERSATION_ID1", "string");
	this.dsSave.addColumn("CONVERSATION_ID2", "string");
	this.dsSave.addColumn("TY_AGREE", "string");
	this.dsSave.addColumn("DT_REQUEST", "string");
	this.dsSave.addColumn("DT_APPROVE", "string");
	this.dsSave.addColumn("ID_APPROVE", "string");
	this.dsSave.addColumn("AM_FROMDFPRO", "bigdecimal");
	this.dsSave.addColumn("TY_ISSUE", "string");
	this.dsSave.addColumn("NO_TAX", "string");
	this.dsSave.addColumn("RT_NOTI", "bigdecimal");
	
	this.dsSave.addColumn("ADV_NO_CONT", "bigdecimal");
	this.dsSave.addColumn("ADV_NO_TY_DMD", "bigdecimal");
	this.dsSave.addColumn("ACCOMPAMT", "bigdecimal");
	
	
	this.dsExec = new Dataset();
	this.dsExec.addColumn("TY_WRK", "string");
	this.dsExec.addColumn("ID_USER", "string");
	this.dsExec.addColumn("CD_SITE", "string");
	this.dsExec.addColumn("NO_HADOCONT", "string");
	this.dsExec.addColumn("CD_VENDOR", "string");
	this.dsExec.addColumn("NO_SEQ", "string");
	this.dsExec.addColumn("CD_DEPT", "string");
	this.dsExec.addColumn("NO_SLIP", "string");
	this.dsExec.addColumn("DS_RTNRSN", "string");
	this.dsExec.addColumn("YN_TAX", "string");
	
	this.dsSapAuto = new Dataset();
	this.dsSapAuto.addColumn("TY_WRK", "string");
	this.dsSapAuto.addColumn("CD_AUTOSLIP", "string");
	this.dsSapAuto.addColumn("NO_ERPKEY", "string");
	
	this.dsFileExec = new Dataset();
	this.dsFileExec.addColumn("TY_WRK", "string");
	this.dsFileExec.addColumn("ID_USER", "string");
	this.dsFileExec.addColumn("CD_SITE", "string");
	this.dsFileExec.addColumn("NO_CONT", "string");
	this.dsFileExec.addColumn("CD_VENDOR", "string");
	this.dsFileExec.addColumn("NO_SEQ", "string");
	
	this.dsAppParam = new Dataset();
	this.dsAppParam.addColumn("ID_USER", "string");
	this.dsAppParam.addColumn("CD_SITE", "string");
	this.dsAppParam.addColumn("NO_ERPKEYS", "string");
	this.dsAppParam.addColumn("NO_SEQ", "string");
	this.dsAppParam.addColumn("ID_AP_TYPE", "string");
	
	// 보증관련
	this.dsTransure = new Dataset();
	this.dsTransure.addColumn("CD_SITE", "string");
	this.dsTransure.addColumn("NO_CONT", "string");
	this.dsTransure.addColumn("SN_SEQ", "string");
	this.dsTransure.addColumn("TY_STOCK", "string");
	this.dsTransure.addColumn("PROCESSCODE", "string");
	this.dsTransure.addColumn("GRTTYPE", "string");
	this.dsTransure.addColumn("CONINDICODE", "string");
}

/************************************************************************
 * 버튼 이벤트
 ************************************************************************/
 /*
  *   조회 버튼
  */
/*this.fnSelect = function() {
   if (!this.fnSelectValidate()) return false;
  
   this.dsSelect.clearData();
   this.dsSelect.addRow();

	this.dsSelect.setColumn(0, "TY_WRK", "Q");
	this.dsSelect.setColumn(0, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
	this.dsSelect.setColumn(0, "NO_HADOCONT", this.dsSearch.getColumn(0, "NO_HADOCONT"));
	this.dsSelect.setColumn(0, "CD_VENDOR", this.dsSearch.getColumn(0, "CD_VENDOR"));

   var strSvcId    = "select";
   var strSvcType  = "grid";
   var inProc      = "_dsProc";
   var inData      = "select=dsSelect";
   var outData     = "dsList=select0";
   var strArg      = "";
   var callBackFnc = "fnCallback";
   
   this.gfnTransaction( strSvcId ,    // transaction을 구분하기 위한 svc id값
                  strSvcType ,    // transaction을 요청할 구분
                  inProc,         // Procedure 정보 Dataset 이름
                  inData ,       // 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
                  outData ,       // 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
                  strArg,          // 입력갑스로 보낼 arguments, strFormData="20120607"
                  callBackFnc); // 통신방법 정의 [생략가능]
}*/


 
/************************************************************************
 * 서브 버튼 이벤트
 ************************************************************************/
this.fnSelect = function() {
   
//    if (this.dsSearch.getColumn(0, "CD_SITE") == "") {
// 		this.gfnAlert("현장코드를 입력하세요.");
// 	return;
// 	}
// 	
	
	this.gfnGridBeforeSelect(this.dxGridSub);
	
	// 디테일 데이터셋 데이터 삭제
	this.dsListSub.clearData();
	
	// 디테일 파마리터 데이터셋 셋팅
	this.dsSelectSub.clearData();
	this.dsSelectSub.addRow();

	this.dsSelectSub.setColumn(0, "TY_WRK", "Q");
	this.dsSelectSub.setColumn(0, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
// 	this.dsSelectSub.setColumn(0, "NO_HADOCONT", this.dsList.getColumn(this.dsList.rowposition, "NO_HADOCONT"));
// 	this.dsSelectSub.setColumn(0, "CD_VENDOR", this.dsList.getColumn(this.dsList.rowposition, "CD_VENDOR"));
	this.dsSelectSub.setColumn(0, "NO_HADOCONT", this.dsSearch.getColumn(0, "NO_HADOCONT"));
	this.dsSelectSub.setColumn(0, "CD_VENDOR", this.dsSearch.getColumn(0, "CD_VENDOR"));
	this.dsSelectSub.setColumn(0, "YN_CMPLT", this.dsSearch.getColumn(0, "YN_CMPLT"));
		
	var strSvcId    = "detail";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "d_select=dsSelectSub";
	var outData     = "dsListSub=d_select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}



/*
 *	서브 저장 버튼
 */
this.fnSave = function() {
		if(this.dsListSub.rowcount < 1) return false;
		if (!this.gfnGridValidate(this.dxGridSub)) return false;

		this.dxGridSub.updateToDataset();
		this.dsSave.clearData();
	
		for (var i = 0; i < this.dsListSub.rowcount; i++) {
			var flag = this.gfnGetFlag(this.dsListSub, i);
			switch(flag) {
			case "I":
			case "U":
			case "D":	
				var nrow = this.dsSave.addRow();		
				this.dsSave.setColumn(nrow, "TY_WRK", flag);
				this.dsSave.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
				this.dsSave.setColumn(nrow, "CD_SITE", this.dsListSub.getColumn(i, "CD_SITE"));
				this.dsSave.setColumn(nrow, "NO_CONT", this.dsListSub.getColumn(i, "NO_CONT"));
				this.dsSave.setColumn(nrow, "CD_VENDOR", this.dsListSub.getColumn(i, "CD_VENDOR"));
				this.dsSave.setColumn(nrow, "NO_SEQ", this.dsListSub.getColumn(i, "NO_SEQ"));
				this.dsSave.setColumn(nrow, "CD_DIV", this.dsListSub.getColumn(i, "CD_DIV"));				
				this.dsSave.setColumn(nrow, "DT_PREPAY", this.dsListSub.getColumn(i, "DT_PREPAY"));
				this.dsSave.setColumn(nrow, "AM_REQUESTPRO", this.dsListSub.getColumn(i, "AM_REQUESTPRO"));
				this.dsSave.setColumn(nrow, "AM_REQUESTVAT", this.dsListSub.getColumn(i, "AM_REQUESTVAT"));
				this.dsSave.setColumn(nrow, "AM_REQUESTTXFR", this.dsListSub.getColumn(i, "AM_REQUESTTXFR"));
				this.dsSave.setColumn(nrow, "AM_REQUEST", this.dsListSub.getColumn(i, "AM_REQUEST"));
				this.dsSave.setColumn(nrow, "AM_NOTIPRO", this.dsListSub.getColumn(i, "AM_NOTIPRO"));
				this.dsSave.setColumn(nrow, "AM_NOTIVAT", this.dsListSub.getColumn(i, "AM_NOTIVAT"));
				this.dsSave.setColumn(nrow, "AM_NOTITXFR", this.dsListSub.getColumn(i, "AM_NOTITXFR"));
				this.dsSave.setColumn(nrow, "AM_NOTI", this.dsListSub.getColumn(i, "AM_NOTI"));
				this.dsSave.setColumn(nrow, "DS_REASON", this.dsListSub.getColumn(i, "DS_REASON"));
				this.dsSave.setColumn(nrow, "DT_IRCPSRCV", this.dsListSub.getColumn(i, "DT_IRCPSRCV"));
				this.dsSave.setColumn(nrow, "AM_PREPAYPRO", this.dsListSub.getColumn(i, "AM_PREPAYPRO"));
				this.dsSave.setColumn(nrow, "AM_PREPAYVAT", this.dsListSub.getColumn(i, "AM_PREPAYVAT"));
				this.dsSave.setColumn(nrow, "AM_PREPAYTXFR", this.dsListSub.getColumn(i, "AM_PREPAYTXFR"));
				this.dsSave.setColumn(nrow, "AM_PREPAY", this.dsListSub.getColumn(i, "AM_PREPAY"));
				this.dsSave.setColumn(nrow, "AM_GUPPRO", this.dsListSub.getColumn(i, "AM_GUPPRO"));
				this.dsSave.setColumn(nrow, "AM_GUPVAT", this.dsListSub.getColumn(i, "AM_GUPVAT"));
				this.dsSave.setColumn(nrow, "AM_GUPTXFR", this.dsListSub.getColumn(i, "AM_GUPTXFR"));
				this.dsSave.setColumn(nrow, "AM_GUP", this.dsListSub.getColumn(i, "AM_GUP"));
				this.dsSave.setColumn(nrow, "DT_ACNT", this.dsListSub.getColumn(i, "DT_ACNT"));
				this.dsSave.setColumn(nrow, "DT_REQTAXBILL", this.dsListSub.getColumn(i, "DT_REQTAXBILL"));
				this.dsSave.setColumn(nrow, "YN_FORWARD", this.dsListSub.getColumn(i, "YN_FORWARD"));
				this.dsSave.setColumn(nrow, "DT_PAYMENT", this.dsListSub.getColumn(i, "DT_PAYMENT"));
				this.dsSave.setColumn(nrow, "NO_ERPKEY", this.dsListSub.getColumn(i, "NO_ERPKEY"));
				this.dsSave.setColumn(nrow, "NO_SLIP", this.dsListSub.getColumn(i, "NO_SLIP"));
				this.dsSave.setColumn(nrow, "NO_SLIP2", this.dsListSub.getColumn(i, "NO_SLIP2"));
				this.dsSave.setColumn(nrow, "TY_STOCK", this.dsListSub.getColumn(i, "TY_STOCK"));
				this.dsSave.setColumn(nrow, "NO_STOCK", this.dsListSub.getColumn(i, "NO_STOCK"));
				this.dsSave.setColumn(nrow, "DS_STOCKKIND", this.dsListSub.getColumn(i, "DS_STOCKKIND"));
				this.dsSave.setColumn(nrow, "AM_GUARANTEE", this.dsListSub.getColumn(i, "AM_GUARANTEE"));
				this.dsSave.setColumn(nrow, "OR_PUBLICATION", this.dsListSub.getColumn(i, "OR_PUBLICATION"));
				this.dsSave.setColumn(nrow, "DT_RECEIPT", this.dsListSub.getColumn(i, "DT_RECEIPT"));
				this.dsSave.setColumn(nrow, "DT_MANRYO", this.dsListSub.getColumn(i, "DT_MANRYO"));
				this.dsSave.setColumn(nrow, "FR_GNTPERD", this.dsListSub.getColumn(i, "FR_GNTPERD"));
				this.dsSave.setColumn(nrow, "TO_GNTPERD", this.dsListSub.getColumn(i, "TO_GNTPERD"));
				this.dsSave.setColumn(nrow, "DS_PAPER", this.dsListSub.getColumn(i, "DS_PAPER"));
				this.dsSave.setColumn(nrow, "CD_PAYMENT", this.dsListSub.getColumn(i, "CD_PAYMENT"));
				this.dsSave.setColumn(nrow, "CD_VATPROOF", this.dsListSub.getColumn(i, "CD_VATPROOF"));
				this.dsSave.setColumn(nrow, "NO_VAT1", this.dsListSub.getColumn(i, "NO_VAT1"));
				this.dsSave.setColumn(nrow, "NO_VAT2", this.dsListSub.getColumn(i, "NO_VAT2"));
				this.dsSave.setColumn(nrow, "CONVERSATION_ID1", this.dsListSub.getColumn(i, "CONVERSATION_ID1"));
				this.dsSave.setColumn(nrow, "CONVERSATION_ID2", this.dsListSub.getColumn(i, "CONVERSATION_ID2"));
				this.dsSave.setColumn(nrow, "TY_AGREE", this.dsListSub.getColumn(i, "TY_AGREE"));
				this.dsSave.setColumn(nrow, "DT_REQUEST", this.dsListSub.getColumn(i, "DT_REQUEST"));
				this.dsSave.setColumn(nrow, "DT_APPROVE", this.dsListSub.getColumn(i, "DT_APPROVE"));
				this.dsSave.setColumn(nrow, "ID_APPROVE", this.dsListSub.getColumn(i, "ID_APPROVE"));
				this.dsSave.setColumn(nrow, "AM_FROMDFPRO", this.dsListSub.getColumn(i, "AM_FROMDFPRO"));
				this.dsSave.setColumn(nrow, "TY_ISSUE", this.dsListSub.getColumn(i, "TY_ISSUE"));
				this.dsSave.setColumn(nrow, "NO_TAX", this.dsListSub.getColumn(i, "NO_TAX"));
				this.dsSave.setColumn(nrow, "RT_NOTI", nexacro.toNumber(this.dsListSub.getColumn(i, "RT_NOTI"),0));
				
				this.dsSave.setColumn(nrow, "ADV_NO_CONT", this.dsListSub.getColumn(i, "ADV_NO_CONT"));
				this.dsSave.setColumn(nrow, "ADV_NO_TY_DMD", this.dsListSub.getColumn(i, "ADV_NO_TY_DMD"));
				this.dsSave.setColumn(nrow, "ACCOMPAMT", this.dsListSub.getColumn(i, "ACCOMPAMT"));
				
				
				break;
		}
	}
	
  if (this.dsSave.rowcount == 0) return false;
  
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
    var inData     = "d_save=dsSave";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
	return true;
}





/*
 *	저장 후 실행처리
 */
this.fnExec = function(tyWrk, cdSite, noHadocont, cdVendor, noSeq, noSlip, ds_rtnrsn) {

	this.dsExec.clearData();
	this.dsExec.addRow();
	
	this.dsExec.setColumn(0, "TY_WRK", tyWrk);
	this.dsExec.setColumn(0, "ID_USER", this.AuthClient.ID_USER);
	this.dsExec.setColumn(0, "CD_SITE", cdSite);
	this.dsExec.setColumn(0, "NO_HADOCONT", noHadocont);
	this.dsExec.setColumn(0, "CD_VENDOR", cdVendor);
	this.dsExec.setColumn(0, "NO_SEQ", noSeq);
	this.dsExec.setColumn(0, "CD_DEPT", this.AuthClient.CD_DEPT);
	this.dsExec.setColumn(0, "NO_SLIP", noSlip);
	this.dsExec.setColumn(0, "DS_RTNRSN", ds_rtnrsn);
	
	if("SLPPUB" == tyWrk){
		this.dsExec.setColumn(0, "YN_TAX", this.dsListSub.getColumn(this.dsListSub.rowposition,"YN_TAX"));
	}
	

	if (this.dsExec.rowcount == 0) return;
	
	var strSvcId    = "exec";
	var strSvcType  = "save";
	var inProc     = "_dsProc";
	var inData      = "d_exec=dsExec";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *   삭제 버튼
*/
this.fnDel = function() {
	this.gfnGridDel(this.dxGridSub);
}

this.fnExcel = function() {
	this.gfnExcelExport(this.dxGridSub);
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *   조회 Validate
 */
this.fnSelectValidate = function() {   
   var validate = true;
   
   if (this.gfnIsNull(this.dsSearch.getColumn(0,"CD_SITE"))) {
      validate = false;
      // Alert후 실행할 처리
      this.fnVaidateCallback = function() {
         this.ccfCD_SITE.form.CDTextBox.setFocus();
      }
      this.gfnAlert("현장코드는 반드시 입력 하셔야 합니다.", "fnVaidateCallback");
   }
   
   return validate;
   
};
/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *   콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
   if (svcID == "select") {
      /*this.gfnGridAfterSelect(this.dxGrid);   */
	  this.fnBtnCheckAll();
	  
	  
   }
   else if(svcID == "detail") {
	  this.gfnSetFormStatus(this, "Q");
   }
   else if(svcID == "save") {
      if (errorCode == 0) {
//          var tyWrk = "";
//        var cdSite = "";   
//          var noHadocont = "";
//        var cdVendor = "";
//        var noSeq = "";
//          var noSlip = "";
//        var dt_rtnrsn = "";
         
//          this.execGubun = "btnSave";
//          this.fnExec(tyWrk, cdSite, noHadocont, cdVendor, noSeq, noSlip, dt_rtnrsn);      
       this.fnSelect();   

      } else {
         this.gfnAlert(errorMsg);
      }
   }
   else if(svcID == "exec") {
      if (errorCode == 0) {
		 this.fnCallback_callback = function()
		 {
			this.fnSelect();
		 }
	  
         if(this.execGubun == "btnExec"){
            this.gfnAlert("전표발행이 정상 처리되었습니다.","fnCallback_callback");
         }else if(this.execGubun == "btnExecCan"){
            this.gfnAlert("전표취소가 정상 처리되었습니다.", "fnCallback_callback");
         }else if(this.execGubun == "btnSgnReq") {
			this.fnFileExecute();
		 }
         
         this.execGubun = "";         
		
      } else {
         this.gfnAlert(errorMsg);
      }
   }
   else if(svcID == "file") {
	  if (errorCode == 0) {
		this.fnAutoFile();
	  }
	  else  {
         this.gfnAlert(errorMsg);
      }
	}
	else if(svcID == "appChk") 
	{
		if (errorCode == 0) 
		{
			this.fnAppSelect();
		}
		else
		{	
			this.gfnAlert(errorMsg);
		}
	}else if(svcID == "appSelect") {
		
		if (errorCode == 0) 
		{
			this.fnAppOpen();
		}
		else
		{
			this.gfnAlert(errorMsg);
		}
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
//코드파인드의 파라미터 값을 넘겨줄때 사용하는 함수
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
   
   if (id == "ccfCD_SITE") {
		  dsUserParam.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
		  dsUserParam.setColumn(nrow, "CD_DEPT", this.AuthClient.CD_DEPT);
		  dsUserParam.setColumn(nrow, "CD_CORP", this.AuthClient.CD_CORP);
		  dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
	  
   } else if (id == "ccfNO_HADOCONT") {
		if(!this.gfnIsNull(this.dsSearch.getColumn(0, "CD_SITE")))
		{			
			dsUserParam.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
			dsUserParam.setColumn(nrow, "YM_WORK", this.gfnGetDate());
			dsUserParam.setColumn(nrow, "TY_DIV", "CONT");
			dsUserParam.setColumn(nrow, "DS_CONTMETHOD", this.FormInfo.DS_PARAM);
			dsUserParam.setColumn(nrow, "CD_VENDOR", "");
		} 
   }else if ( id == "ccfCD_VENDOR" ) {
	    if(this.gfnIsNull(this.dsSearch.getColumn(0, "CD_SITE")))
		{
			this.gfnAlert("현장코드를 먼저 입력하십시오.");
			return false;
		}
		else if(this.gfnIsNull(this.dsSearch.getColumn(0, "NO_HADOCONT")))
		{
			this.gfnAlert("계약번호를 먼저 입력하십시오.");
			return false;
		}
		
	
		dsUserParam.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
		dsUserParam.setColumn(nrow, "YM_WORK", "");
		dsUserParam.setColumn(nrow, "NO_HADOCONT", this.dsSearch.getColumn(0, "NO_HADOCONT"));
   }
   
   return true;
}



/************************************************************************
 * 그리드 이벤트
 *********************************************************************** */ 



 this.fnGridSub_EnterCell = function(obj:nexacro.Grid, row, cell) {

	var colnm = this.gfnGridGetBindColumnNameByIndex(this.dxGridSub, cell);	// 클릭한 cell의 컬럼명
// 	if(colnm == "NO_CONT")
// 	{
// 		return true;
// 	}

	//return true;
// 	// 증권파일(첨부파일)의 경우에는 수정여부와 관계없이 호출 가능하게 처리.
// 	if(colnm == "BTN_SCRTS")
// 	{
// 		return true;
// 	}
// 	
// 	
// 	// 클릭했을때 클릭한 cell을 수정 가능 or 불가능 상태로 만든다.
// 	// YN_EDIT 값이 Y일때만 수정가능상태
// 	if(this.dsListSub.getColumn(row, "YN_EDIT") == "N") {
// 		return false;
// 	}else{
// 		// YN_EDIT_VNDR이 Y라면 협력회사 컬럼들 입력가능.
// 		// 아니라면 협력회사 컬럼들 입력 불가능.
// 		if(this.dsListSub.getColumn(row, "YN_EDIT_VNDR") == "Y")
// 		{
// 			switch(colnm)
// 			{
// 				case "AM_PREPAYPRO" : case "AM_PREPAYVAT" : case "AM_PREPAYTXFR" :
// 				case "AM_PREPAY" : case "AM_GUPPRO" : case "AM_GUPVAT" :
// 				case "AM_GUPTXFR" : case "AM_GUP" : case "CD_REQDIV" :
// 				case "DS_STOCKKIND" : case "TY_STOCK" : case "NO_STOCK" :
// 				case "AM_GUARANTEE" : case "OR_PUBLICATION" : case "DT_RECEIPT" :
// 				case "DT_MANRYO" : case "FR_GNTPERD" : case "TO_GNTPERD" :
// 					return true;
// 				break;
// 			}
// 		}
// 		else
// 		{
// 			switch(colnm)
// 			{
// 				case "AM_PREPAYPRO" : case "AM_PREPAYVAT" : case "AM_PREPAYTXFR" :
// 				case "AM_PREPAY" : case "AM_GUPPRO" : case "AM_GUPVAT" :
// 				case "AM_GUPTXFR" : case "AM_GUP" : case "CD_REQDIV" :
// 				case "DS_STOCKKIND" : case "TY_STOCK" : case "NO_STOCK" :
// 				case "AM_GUARANTEE" : case "OR_PUBLICATION" : case "DT_RECEIPT" :
// 				case "DT_MANRYO" : case "FR_GNTPERD" : case "TO_GNTPERD" :
// 					return false;
// 				break;
// 			}
// 		}
// 
// 		if(colnm == "DT_REQTAXBILL" || colnm == "DT_PAYMENT" ){
// 			if(this.gfnIsNull(this.dsListSub.getColumn(row, "DT_ACNT"))) {
// 				return false;
// 			}else{
// 				return true;
// 			}
// 		}			
// 	}
}	

this.fnGridSub_AfterEdit = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo) {
   var dtAcnt =  this.dsListSub.getColumn(e.row, "DT_ACNT");
   
   if(this.gfnGetFlag(this.dsListSub, e.row) == "I"){
      if(e.oldvalue != e.newvalue) {
         if(e.columnid == "DT_ACNT"){
            if(this.gfnIsNull(e.newvalue)) {
               this.dsListSub.setColumn(e.row, "DT_REQTAXBILL", "");
               this.dsListSub.setColumn(e.row, "DT_PAYMENT", "");
            } else {
               this.dsListSub.setColumn(e.row, "DT_REQTAXBILL", this.dsListSub.getColumn(e.row, "DT_ACNT"));
               this.dsListSub.setColumn(e.row, "DT_PAYMENT", this.gfnAddDate(dtAcnt, +15));
            }
         }
      }
   }
}

 this.fnGridSub_BeforeUserDataSetParam = function(id, dsUserParam, nrow) {	
	// 그리드에서 코드파인드 id는 그리드셋팅의 코드파인드 식별ID
 	//그리드 발주처 코드파인드
	if (id == "DWX_CFPAYMENT_01") {
		
		var cd_site = this.dsSearch.getColumn(0, "CD_SITE");
		if(this.gfnIsNull(cd_site)) {
			this.gfnAlert("현장코드를 먼저 입력하세요.");
			return false;
		}		
		
		dsUserParam.setColumn(nrow, "CD_SITE", this.dsListSub.getColumn(this.dsListSub.rowposition, "CD_SITE"));
		dsUserParam.setColumn(nrow, "TY_DIV", "DWB02");
	
 	}else if (id == "DWX_COMBO_CONST_NO") {
 		dsUserParam.setColumn(nrow, "CD_SITE", this.dsListSub.getColumn(this.dsListSub.rowposition, "CD_SITE"));
	}else if (id == "DWX_CFHADO_01") {
		
		dsUserParam.setColumn(nrow, "CD_SITE", this.dsListSub.getColumn(this.dsListSub.rowposition, "CD_SITE"));
		
 		/*dsUserParam.setColumn(nrow, "TY_GUBUN", "1");*/
 		dsUserParam.setColumn(nrow, "TY_DIV", "CONT");
		var today = this.gfnGetDate();
		dsUserParam.setColumn(nrow, "YM_WORK", today);
		dsUserParam.setColumn(nrow, "CD_VENDOR", "");
		dsUserParam.setColumn(nrow, "DS_CONTMETHOD", "");
		



	}
	return true;
};

this.fnGridSub_ExpandUp = function(obj:nexacro.Grid, e:nexacro.GridMouseEventInfo) {

	var colnm = this.gfnGridGetBindColumnNameByIndex(obj, e.cell);
	
	var cd_site 		= this.dsListSub.getColumn(e.row, "CD_SITE");
	var no_hadocont 	= this.dsListSub.getColumn(e.row, "NO_CONT");
	var cd_vendor 		= this.dsListSub.getColumn(e.row, "CD_VENDOR");
	var no_seq 			= this.dsListSub.getColumn(e.row, "NO_SEQ");
	var btn_scrts_auto 	= this.dsListSub.getColumn(e.row, "BTN_SCRTS_AUTO");
	
	var is_readonly = false;
	
	if(btn_scrts_auto == "F")
	{
		is_readonly = false;
	}
	else 
	{
		is_readonly = true;
	}
	
	if(colnm == "BTN_SCRTS") {
		var fileManager = {};
		fileManager.CD_GUBUN = "DWB5";
		fileManager.CD_DIR = [no_hadocont, no_seq, "01", cd_site, "SCRTS"];
		fileManager.IS_READONLY = is_readonly;
		this.gfnFileManager(fileManager, "fnFileCallback");
	}
};


// this.fnGrid_RowCellChanged = function(obj:nexacro.Grid,e:nexacro.GridSelectEventInfo)
// {
//     if ((obj.oldrow > -1 && obj.oldrow == e.row)
// 		|| (obj.oldrow == -1 && e.oldrow != e.row)) {
// 		// 마스터 그리드 클릭 이벤트(디테일 그리드 조회)
// 		this.fnSelect();
// 		obj.oldrow = -1;
// 	}
// };

// this.fnGridSub_RowCellChanged = function(obj:nexacro.Grid,e:nexacro.GridSelectEventInfo)
// {
//     if ((obj.oldrow > -1 && obj.oldrow == e.row)
// 		|| (obj.oldrow == -1 && e.oldrow != e.row)) {
// 		// 마스터 그리드 클릭 이벤트(디테일 그리드 조회)
// 		this.fnBtnCheckAll();
// 		obj.oldrow = -1;
// 	}
// };






this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		/*this.gfnGridClear(this.dxGrid);	*/
		this.gfnGridClear(this.dxGridSub);	
	}
};


this.fnSearchInit = function(obj,e) {
   if(e == null || (e.pretext != e.posttext)) {
      this.gfnSetFormStatus(this);
      /*this.gfnGridClear(this.dxGrid);*/
      this.gfnGridClear(this.dxGridSub);
      }
}


this.divData_ondragmove = function(obj:nexacro.Div,e:nexacro.DragEventInfo)
{
   if(e.userdata == "splitter") {
      this.divData.form.divSplitter.set_top(e.clienty);
      this.divData.form.resetScroll();   
   }
};

this.divData_divSplitter_ondrag = function(obj:nexacro.Div,e:nexacro.DragEventInfo)
{
   e.set_userdata("splitter");
   return true;
};

this.dsListSub_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
	   var nRow = e.row;
	   var colnm = e.columnid;
	   
	   if(colnm == "AM_REQUESTPRO" || colnm == "AM_REQUESTVAT" || colnm == "AM_REQUESTTXFR") {    //선급금대상금액       
		  if(colnm == "AM_REQUESTPRO") {
		  // 선급대상금액 부과세
		  this.dsListSub.setColumn(nRow, "AM_REQUESTVAT", nexacro.floor(nexacro.toNumber(this.dsListSub.getColumn(nRow, "AM_REQUESTPRO"),0) * 0.1));   
		  }
		  // 선급대상금액 합계
		  this.dsListSub.setColumn(nRow, "AM_REQUEST", nexacro.toNumber(this.dsListSub.getColumn(nRow, "AM_REQUESTPRO"),0) + nexacro.toNumber(this.dsListSub.getColumn(nRow, "AM_REQUESTVAT"),0) + nexacro.toNumber(this.dsListSub.getColumn(nRow, "AM_REQUESTTXFR"),0) );         

	   }else if(colnm == "AM_NOTIPRO" || colnm == "AM_NOTIVAT" || colnm == "AM_NOTITXFR") {   //선급금통보금액      
		  if(colnm == "AM_NOTIPRO") {
		  // 선급금통보금액 부과세
		  this.dsListSub.setColumn(nRow, "AM_NOTIVAT", nexacro.floor(nexacro.toNumber(this.dsListSub.getColumn(nRow, "AM_NOTIPRO"),0) * 0.1));   
		  }
		  // 선급금통보금액 합계
		  this.dsListSub.setColumn(nRow, "AM_NOTI", nexacro.toNumber(this.dsListSub.getColumn(nRow, "AM_NOTIPRO"),0) + nexacro.toNumber(this.dsListSub.getColumn(nRow, "AM_NOTIVAT"),0) + nexacro.toNumber(this.dsListSub.getColumn(nRow, "AM_NOTITXFR"),0) );      

	   }else if(colnm == "AM_PREPAYPRO" || colnm == "AM_PREPAYVAT" || colnm == "AM_PREPAYTXFR") {   //선급요청보금액      
		  if(colnm == "AM_PREPAYPRO") {
		  // 선급요청보금액 부과세
		  this.dsListSub.setColumn(nRow, "AM_PREPAYVAT", nexacro.floor(nexacro.toNumber(this.dsListSub.getColumn(nRow, "AM_PREPAYPRO"),0) * 0.1));   
		  }
		  // 선급요청금액 합계
		  this.dsListSub.setColumn(nRow, "AM_PREPAY", nexacro.toNumber(this.dsListSub.getColumn(nRow, "AM_PREPAYPRO"),0) + nexacro.toNumber(this.dsListSub.getColumn(nRow, "AM_PREPAYVAT"),0) + nexacro.toNumber(this.dsListSub.getColumn(nRow, "AM_PREPAYTXFR"),0) );      

	   }else if(colnm == "AM_GUPPRO" || colnm == "AM_GUPVAT" || colnm == "AM_GUPTXFR") {   //선급금포기금액금액      
		  if(colnm == "AM_GUPPRO") {
		  // 선급금포기금액 부과세
		  this.dsListSub.setColumn(nRow, "AM_GUPVAT", nexacro.floor(nexacro.toNumber(this.dsListSub.getColumn(nRow, "AM_GUPPRO"),0) * 0.1));   
		  }
		  // 선급금포기금액 합계
		  var am_gup = nexacro.toNumber(this.dsListSub.getColumn(nRow, "AM_GUPPRO"),0) + nexacro.toNumber(this.dsListSub.getColumn(nRow, "AM_GUPVAT"),0) + nexacro.toNumber(this.dsListSub.getColumn(nRow, "AM_GUPTXFR"),0);
		  //this.dsListSub.setColumn(nRow, "AM_GUP", this.gfnAppendComma(am_gup) );   
		  this.dsListSub.setColumn(nRow, "AM_GUP", am_gup );     
	   }
	   else if(colnm == "RT_NOTI")
	   {
		  var am_requestpro = nexacro.toNumber(this.dsListSub.getColumn(nRow, "AM_REQUESTPRO"),0);
		  var am_requesttxfr = nexacro.toNumber(this.dsListSub.getColumn(nRow, "AM_REQUESTTXFR"),0);
		  
		  var rt_noti = nexacro.toNumber(this.dsListSub.getColumn(nRow, "RT_NOTI"),0);
	   
		  this.dsListSub.setColumn(nRow, "AM_NOTIPRO", nexacro.floor(nexacro.toNumber(am_requestpro * rt_noti * 0.01, 0)));
		  this.dsListSub.setColumn(nRow, "AM_NOTITXFR", nexacro.floor(nexacro.toNumber(am_requesttxfr * rt_noti * 0.01, 0)));
	   }
   }
};

this.fnBtnCheckAll = function()
{
	this.gfnBtnCheck(this.btn1, this.dsListSub);
	this.gfnBtnCheck(this.btn2, this.dsListSub);
	this.gfnBtnCheck(this.btn3, this.dsListSub);
	this.gfnBtnCheck(this.btn4, this.dsListSub);
	this.gfnBtnCheck(this.btn5, this.dsListSub);
	this.gfnBtnCheck(this.btn6, this.dsListSub);
	this.gfnBtnCheck(this.btnSgnReq, this.dsListSub);
	this.gfnBtnCheck(this.btnAttachFileSite, this.dsListSub);
	this.gfnBtnCheck(this.btnAttachFileVndr, this.dsListSub);
}



// 서명요청 버튼 클릭 이벤트
this.fnSgnReq = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	
	if(this.dsListSub.rowcount == 0 || this.dsListSub.rowposition < 0)
	{
		return false;
	}
	
	var row = this.dsListSub.rowposition;
	
	var msg = "현장코드 : [" + this.dsSearch.getColumn(0, "CD_SITE") + "] " + this.dsListSub.getColumn(row, "DS_SITE")
			+ "\n계약번호 : [" + this.dsListSub.getColumn(row, "NO_HADOCONT") + "] " + this.dsListSub.getColumn(row, "DS_HADOCONT")
			+ "\n업체코드 : [" + this.dsListSub.getColumn(row, "CD_VENDOR") + "] " + this.dsListSub.getColumn(row, "DS_VENDOR")
			+ "\n선급회차 : [" + this.dsListSub.getColumn(this.dsListSub.rowposition, "NO_SEQ") + "] 회차"
			+ "\n\n" + "선급금 서명요청을 하시겠습니까?"
	;
	
	this.gfnConfirm(msg, "fnSgnReq_callback");
}

this.fnSgnReq_callback = function(strID, val)
{
	if(val == true)
	{
		var tyWrk = "SGNREQ";
		var cdSite = this.dsSearch.getColumn(0, "CD_SITE");	
        var noHadocont = this.dsListSub.getColumn(this.dsListSub.rowposition, "NO_HADOCONT");
		var cdVendor = this.dsListSub.getColumn(this.dsListSub.rowposition, "CD_VENDOR");
		var noSeq = this.dsListSub.getColumn(this.dsListSub.rowposition, "NO_SEQ");
        var noSlip = "";
		var dt_rtnrsn = "";
		
		this.execGubun = "btnSgnReq";
	
		this.fnExec(tyWrk, cdSite, noHadocont, cdVendor, noSeq, noSlip, dt_rtnrsn);
	}
}

// 서명파일정보 생성
this.fnFileExecute = function()
{
	this.dsFileExec.clearData();
	var nrow = this.dsFileExec.addRow();
	
	this.dsFileExec.setColumn(nrow, "TY_WRK", "CRT");
	this.dsFileExec.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
	this.dsFileExec.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
	this.dsFileExec.setColumn(nrow, "NO_CONT", this.dsListSub.getColumn(this.dsListSub.rowposition, "NO_HADOCONT"));
	this.dsFileExec.setColumn(nrow, "CD_VENDOR", this.dsListSub.getColumn(this.dsListSub.rowposition, "CD_VENDOR"));
	this.dsFileExec.setColumn(nrow, "NO_SEQ", this.dsListSub.getColumn(this.dsListSub.rowposition, "NO_SEQ"));

	var strSvcId    = "file";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "file=dsFileExec";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

// 공동모듈(첨부파일) 호출.
this.fnAutoFile = function() {
	  var dsAutoForm = this.objApp.gdsAutoForm;
	  dsAutoForm.clearData();
      
	  var nrow = dsAutoForm.addRow();
	  dsAutoForm.setColumn(nrow, "TY_WORK", "DW-03");
	  dsAutoForm.setColumn(nrow, "ATTR01", this.dsSearch.getColumn(0, "CD_SITE"));
	  dsAutoForm.setColumn(nrow, "ATTR02", this.dsListSub.getColumn(this.dsListSub.rowposition, "NO_HADOCONT"));
	  dsAutoForm.setColumn(nrow, "ATTR03", this.dsListSub.getColumn(this.dsListSub.rowposition, "CD_VENDOR"));
	  dsAutoForm.setColumn(nrow, "ATTR04", this.dsListSub.getColumn(this.dsListSub.rowposition, "NO_SEQ"));
	  dsAutoForm.setColumn(nrow, "ATTR05", "");
	  dsAutoForm.setColumn(nrow, "ATTR06", "");
	  dsAutoForm.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);

      this.gfnAutoForm("fnAutoFile_Callback");   // callback 생략가능
}

this.fnAutoFile_Callback = function(svcID, errorCode, errorMsg, strArg) {
   if(errorCode == 0) {
		this.fnAutoFile_Callback_callback = function()
		{
			this.FormBtns.Select.click();
		}
		
		this.gfnAlert("선급금 서명요청 정상 처리되었습니다.", "fnAutoFile_Callback_callback");
   } else {
      this.gfnAlert(errorMsg);
   }
}


// 첨부파일(현장)
this.fnAttachFileSite = function(obj: nexacro.Button, e: nexacro.ClickEventInfo) {
	if(this.dsListSub.rowposition < 0) return;
	
    var cd_site = this.dsSearch.getColumn(0, "CD_SITE");
	var no_hadocont = this.dsListSub.getColumn(this.dsListSub.rowposition, "NO_HADOCONT");
	var cd_vendor = this.dsListSub.getColumn(this.dsListSub.rowposition, "CD_VENDOR");
	var no_seq = this.dsListSub.getColumn(this.dsListSub.rowposition, "NO_SEQ");
	
    var fileManager = {};
    fileManager.CD_GUBUN = "DWB3";
	fileManager.CD_DIR = [ cd_site, no_hadocont, cd_vendor, no_seq, 'SITE' ];
    
	var is_readonly = false;
	
	if(this.dsListSub.getColumn(this.dsListSub.rowposition, "BTN_ATTACHFILESITE_AUTH") == "F")
	{
		is_readonly = false;
	}
	else
	{
		is_readonly = true;
	}
	
	fileManager.IS_READONLY = is_readonly;

    this.gfnFileManager(fileManager, "fnFileCallback");
}

// 첨부파일(업체)
this.fnAttachFileVndr = function(obj: nexacro.Button, e: nexacro.ClickEventInfo) {
	if(this.dsListSub.rowposition < 0) return;

	var cd_site = this.dsSearch.getColumn(0, "CD_SITE");
	var no_hadocont = this.dsListSub.getColumn(this.dsListSub.rowposition, "NO_HADOCONT");
	var cd_vendor = this.dsListSub.getColumn(this.dsListSub.rowposition, "CD_VENDOR");
	var no_seq = this.dsListSub.getColumn(this.dsListSub.rowposition, "NO_SEQ");
	
    var fileManager = {};
    fileManager.CD_GUBUN = "DWB4";
	fileManager.CD_DIR = [ cd_site, no_hadocont, cd_vendor, no_seq, 'VNDR' ];
    fileManager.IS_READONLY = true;

    this.gfnFileManager(fileManager, "fnFileCallback");
}

//전자결재
this.fnApp = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) 
{
	
	//if(this.dsList.findRow("CHK", "1") < 0){
	if(this.dsListSub.rowposition < 0){
		this.gfnAlert("전표결재 하실 정보를 선택하시기 바랍니다.");
		return false;
	}
	
// 	var chkCnt = 0;
// 	for (var i = 0; i < this.dsList.rowcount; i++) {
// 		if(this.dsList.getColumn(i, "CHK") == "1"){
// 			chkCnt = chkCnt + 1;
// 		}
// 	}
	
	var msg = "현장코드 : [" + this.dsListSub.getColumn(this.dsListSub.rowposition, "CD_SITE") + "] " + this.dsListSub.getColumn(this.dsListSub.rowposition, "DS_SITE")
			+ "\n계약번호 : [" + this.dsListSub.getColumn(this.dsListSub.rowposition, "NO_CONT")+ "]"
			+ "\n계약차수 : [" + this.dsListSub.getColumn(this.dsListSub.rowposition, "NO_SEQ")+ "]"
			+ "\n\n외주전표 전자결재를 하시겠습니까?";
	this.gfnConfirm(msg, "fnApp_callback", "");
}

//전자결재취소
this.fnAppCancel = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) 
{
	/*if(this.dsList.findRow("CHK", "1") < 0){*/
	if(this.dsListSub.rowposition < 0){
		this.gfnAlert("전표결재 하실 정보를 선택하시기 바랍니다.");
		return false;
	}
	
// 	var chkCnt = 0;
// 	for (var i = 0; i < this.dsList.rowcount; i++) {
// 		if(this.dsList.getColumn(i, "CHK") == "1"){
// 			chkCnt = chkCnt + 1;
// 		}
// 	}
	
	var msg = "현장코드 : [" + this.dsListSub.getColumn(this.dsListSub.rowposition, "CD_SITE") + "] " + this.dsListSub.getColumn(this.dsListSub.rowposition, "DS_HADOCONT")
			+ "\n계약번호 : [" + this.dsListSub.getColumn(this.dsListSub.rowposition, "NO_CONT")+ "]"
			+ "\n계약차수 : [" + this.dsListSub.getColumn(this.dsListSub.rowposition, "NO_SEQ")+ "]"
			+ "\n\n외주전표 취소전자결재를 하시겠습니까?";
	this.gfnConfirm(msg, "fnAppCancel_callback", "");
}

//전자결재 체크로직
this.fnApp_callback = function(strId, val) 
{
	if(val == true) 
	{	
		
		
// 		var noHadoConts ="";
// 		for(var i=0;i < this.dsList.rowcount;i++){
// 			if(this.dsList.getColumn(i, "CHK") == "1"){
// 				if(noHadoConts != ""){
// 					noHadoConts += ",";
// 				}
// 				noHadoConts += this.dsList.getColumn(i, "NO_HADOCONT");
// 			}
// 		}
		this.dsAppParam.clearData();
		
		var nrow = this.dsAppParam.addRow();
		
		//this.dsAppParam.setColumn(nrow, "TY_WRK", flg);
		
		
		
		this.dsAppParam.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
		this.dsAppParam.setColumn(nrow, "CD_SITE", this.dsListSub.getColumn(this.dsListSub.rowposition, "CD_SITE"));
		
		var noErpkeys ="";
		for(var i=0;i < this.dsListSub.rowcount;i++){
			if(this.dsListSub.getColumn(i, "CHK") == "1"){
				if(noErpkeys != ""){
					noErpkeys += ",";
				}
				noErpkeys += this.dsListSub.getColumn(i, "NO_ERPKEY");
			}
		}
		if(noErpkeys == ""){
			this.gfnAlert("전자결재 하실 정보를 선택하시기 바랍니다.");
			return;
		}
		
 		this.dsAppParam.setColumn(nrow, "NO_ERPKEYS", noErpkeys);
// 		this.dsAppParam.setColumn(nrow, "NO_SEQ", this.dsListSub.getColumn(this.dsListSub.rowposition, "NO_SEQ"));
		this.dsAppParam.setColumn(nrow, "ID_AP_TYPE", "DW07");
		
		
		
		//this.dsAppParam.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
		
	
		if (this.dsAppParam.rowcount == 0) return;
		
		var strSvcId    = "appChk";
		var strSvcType  = "save";
		var inProc		= "_dsProc";
		var inData      = "appChk=dsAppParam";
		var outData     = "";
		var strArg      = "";
		var callBackFnc = "fnCallback";
		
		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
							strSvcType , 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
							callBackFnc); // 통신방법 정의 [생략가능]
	}
}

//전자결재취소 체크로직
this.fnAppCancel_callback = function(strId, val) 
{
	if(val == true) 
	{	
		
		
// 		var noHadoConts ="";
// 		for(var i=0;i < this.dsList.rowcount;i++){
// 			if(this.dsList.getColumn(i, "CHK") == "1"){
// 				if(noHadoConts != ""){
// 					noHadoConts += ",";
// 				}
// 				noHadoConts += this.dsList.getColumn(i, "NO_HADOCONT");
// 			}
// 		}
		this.dsAppParam.clearData();
		
		var nrow = this.dsAppParam.addRow();
		
		//this.dsAppParam.setColumn(nrow, "TY_WRK", flg);
	
		this.dsAppParam.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
		this.dsAppParam.setColumn(nrow, "CD_SITE", this.dsListSub.getColumn(this.dsListSub.rowposition, "CD_SITE"));
// 		this.dsAppParam.setColumn(nrow, "NO_CONT", this.dsListSub.getColumn(this.dsListSub.rowposition, "NO_CONT"));
// 		this.dsAppParam.setColumn(nrow, "NO_SEQ", this.dsListSub.getColumn(this.dsListSub.rowposition, "NO_SEQ"));
		var noErpkeys ="";
		for(var i=0;i < this.dsListSub.rowcount;i++){
			if(this.dsListSub.getColumn(i, "CHK") == "1"){
				if(noErpkeys != ""){
					noErpkeys += ",";
				}
				noErpkeys += this.dsListSub.getColumn(i, "NO_ERPKEY");
			}
		}
		
		if(noErpkeys == ""){
			this.gfnAlert("전자결재 하실 정보를 선택하시기 바랍니다.");
			return;
		}
		
 		this.dsAppParam.setColumn(nrow, "NO_ERPKEYS", noErpkeys);
		this.dsAppParam.setColumn(nrow, "ID_AP_TYPE", "DW08");
		
		
		
		//this.dsAppParam.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
		
	
		if (this.dsAppParam.rowcount == 0) return;
		
		var strSvcId    = "appChk";
		var strSvcType  = "save";
		var inProc		= "_dsProc";
		var inData      = "appChk=dsAppParam";
		var outData     = "";
		var strArg      = "";
		var callBackFnc = "fnCallback";
		
		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
							strSvcType , 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
							callBackFnc); // 통신방법 정의 [생략가능]
	}
}

//전자결재 대상조회
this.fnAppSelect = function()
{
	var strSvcId    = "appSelect";
	var strSvcType  = "select";
	var inProc		= "_dsProc";
	var inData      = "appSelect=dsAppParam";
	var outData     = "dsAppList=appSelect0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

//그룹웨어 팝업 호출
this.fnAppOpen = function()
{

	if(this.dsAppList.rowcount > 0) 
	{

		var sApType = "";
	
		var sTitle  = "";
	
		sApType = this.dsAppParam.getColumn(0,"ID_AP_TYPE");
		if(sApType == "DW07"){
			sTitle = "선급금신청품의 ["+this.dsListSub.getColumn(this.dsListSub.rowposition, "DS_SITE")+']';
		}else if(sApType == "DW08"){
			sTitle = "선급금신청품의 취소 ["+this.dsListSub.getColumn(this.dsListSub.rowposition, "DS_SITE")+']';
		}
	
		var sRef01  = this.dsAppParam.getColumn(0, "CD_SITE");
// 		var sRef02  = this.dsAppParam.getColumn(0, "NO_CONT");
// 		var sRef03  = this.dsAppParam.getColumn(0,"NO_SEQ");	//계약번호 ,로 구분하여 n건 발송
		var sRef02  = this.dsAppParam.getColumn(0, "NO_ERPKEYS");
		/*var sRef04  = "";*/
		
		var oParam  = this.gfnDataSetToJson(this.dsAppList, this.dsAppList.rowposition)
		
		console.info("================ oParam");
		console.info(oParam);
	
		console.info("================ sRef01"+sRef01);
		console.info("================ sRef02"+sRef02);
		/*console.info("================ sRef03"+sRef03);*/
		this.gfnApprove(sApType, sTitle, sRef01, sRef02, "", "", oParam, "fnAprvDialogCallback");
	}
}

this.fnAprvDialogCallback = function() 
{
	// 결재완료, 결재취소, 결재상신 후에는 재조회를 한다
	this.FormBtns.Select.click();
};


this.fnChrProc = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
		//if (!this.fnSelectValidate()) return false;
		
		if(this.dsListSub.rowposition < 0){
			this.gfnAlert("선급금청구내역 그리드에 선택된 행이 없습니다.");
			return false;
		}
		
		var param = {};
		
		
		var listRow = this.dsListSub.rowposition;
		
		param.CD_SITE = this.dsListSub.getColumn(listRow, "CD_SITE")
		param.DS_SITE = this.dsListSub.getColumn(listRow, "DS_SITE")
		param.NO_HADOCONT = this.dsListSub.getColumn(listRow, "NO_CONT");
		param.DS_HADOCONT = this.dsListSub.getColumn(listRow, "DS_HADOCONT");
		param.CD_VENDOR = this.dsListSub.getColumn(listRow, "CD_VENDOR");
		param.DS_VENDOR = this.dsListSub.getColumn(listRow, "DS_VENDOR");
		param.NO_SEQ = this.dsListSub.getColumn(listRow, "NO_SEQ");
		param.CD_PROCDIV = this.dsListSub.getColumn(listRow, "CD_PROCDIV");

		this.gfnFormOpenNonAuth("DWB", "DWB_PREPAYCHRPROCDLG", "fnChrProc_callback", param);
};

this.fnChrProc_callback = function()
{
	this.FormBtns.Select.click();
}

 // 전표조회 버튼 클릭시 팝업화면 호출
this.fnSlipSearch = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	// 선택된 row가 있을 경우에만 팝업을 띄움
	if (!this.gfnGridIsRow(this.dxGridSub)) { return false; }
	
	var param = {};
	
	//param.NO_ERPKEY = this.dsList.getColumn(this.dsList.rowposition, "NO_ERPKEY");
	var no_slip = this.gfnIsNull(this.selSlipNo) ?  this.dsListSub.getColumn(this.dsListSub.rowposition, "NO_SLIP") : this.selSlipNo;
	no_slip = this.gfnIsNull(this.selSlipNo) ? this.dsListSub.getColumn(this.dsListSub.rowposition, "NO_SLIP2") : no_slip;

	if(this.gfnIsNull(no_slip) ){
		return;
	}

	param.CD_TRADE = no_slip; //this.dsList.getColumn(this.dsList.rowposition, "NO_SLIP");

	//this.gfnFormOpen("DHA", "DHA_ERPKEY_SLIP", "", param); 
	this.gfnFormOpen("DHA", "DHA_ISSUESLIP", "", param); 
}


/************************************************************************
 * 보증관련 Function
 ************************************************************************/
this.fnStockRes = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	if(this.dsListSub.rowposition == -1) return;
	if(this.dsListSub.getColumn(this.dsListSub.rowposition,"CD_STATUS") != 'C310') {
		this.gfnAlert("보증서 반려처리가 불가능합니다!");
		return;
	};
	
	this.dsTransure.clearData();
	this.dsTransure.addRow();
	this.dsTransure.setColumn(0, "CD_SITE",		this.dsListSub.getColumn(this.dsListSub.rowposition, "CD_SITE"));
	this.dsTransure.setColumn(0, "NO_CONT",		this.dsListSub.getColumn(this.dsListSub.rowposition, "NO_CONT"));
	this.dsTransure.setColumn(0, "SN_SEQ", 		this.dsListSub.getColumn(this.dsListSub.rowposition, "NO_SEQ"));
	this.dsTransure.setColumn(0, "TY_STOCK", 	this.dsListSub.getColumn(this.dsListSub.rowposition, "TY_STOCK"));
	
	var strSvcId    = "transureRes";
	var strSvcType  = "dcc_transure_" + (this.dsListSub.getColumn(this.dsListSub.rowposition, "TY_PUBLICATION")).toLowerCase() + "_res";
	var inProc		= "";
	var inData      = "dsTransure=dsTransure";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnTransureCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
};

this.fnStockAcc = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	if(this.dsListSub.rowposition == -1) return;
	if(this.dsListSub.getColumn(this.dsListSub.rowposition,"CD_STATUS") != 'C310' &&
		this.dsListSub.getColumn(this.dsListSub.rowposition,"CD_STATUS") != 'C510') {
		this.gfnAlert("보증서 승인처리가 불가능합니다!");
		return;
	};
	
	this.dsTransure.clearData();
	this.dsTransure.addRow();
	this.dsTransure.setColumn(0, "CD_SITE",		this.dsListSub.getColumn(this.dsListSub.rowposition, "CD_SITE"));
	this.dsTransure.setColumn(0, "NO_CONT",		this.dsListSub.getColumn(this.dsListSub.rowposition, "NO_CONT"));
	this.dsTransure.setColumn(0, "SN_SEQ", 		this.dsListSub.getColumn(this.dsListSub.rowposition, "NO_SEQ"));
	this.dsTransure.setColumn(0, "TY_STOCK", 	this.dsListSub.getColumn(this.dsListSub.rowposition, "TY_STOCK"));
	
	var strSvcId    = "transureAcc";
	var strSvcType  = "dcc_transure_" + (this.dsListSub.getColumn(this.dsListSub.rowposition, "TY_PUBLICATION")).toLowerCase() + "_acc";
	var inProc		= "";
	var inData      = "dsTransure=dsTransure";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnTransureCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
};

this.fnStockDes = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	if(this.dsListSub.rowposition == -1) return;
	if(this.dsListSub.getColumn(this.dsListSub.rowposition,"CD_STATUS") != 'C410') {
		this.gfnAlert("보증서 파기처리가 불가능합니다!");
		return;
	};
	
	this.dsTransure.clearData();
	this.dsTransure.addRow();
	this.dsTransure.setColumn(0, "CD_SITE",		this.dsListSub.getColumn(this.dsListSub.rowposition, "CD_SITE"));
	this.dsTransure.setColumn(0, "NO_CONT",		this.dsListSub.getColumn(this.dsListSub.rowposition, "NO_CONT"));
	this.dsTransure.setColumn(0, "SN_SEQ", 		this.dsListSub.getColumn(this.dsListSub.rowposition, "NO_SEQ"));
	this.dsTransure.setColumn(0, "TY_STOCK", 	this.dsListSub.getColumn(this.dsListSub.rowposition, "TY_STOCK"));
	
	var strSvcId    = "transureDes";
	var strSvcType  = "dcc_transure_" + (this.dsListSub.getColumn(this.dsListSub.rowposition, "TY_PUBLICATION")).toLowerCase() + "_des";
	var inProc		= "";
	var inData      = "dsTransure=dsTransure";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnTransureCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
};

this.fnStockView = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	if(this.dsListSub.rowposition == -1) return;
	if(this.dsListSub.getColumn(this.dsListSub.rowposition,"YN_ONLINE") != "Y") {
		this.gfnAlert("전자보증서만 가능합니다!");
		return;
	};
	if(this.gfnIsNull(this.dsListSub.getColumn(this.dsListSub.rowposition,"NO_STOCK"))) {
		this.gfnAlert("발급된 보증서가 없습니다!");
		return;
	};
	
	var param = {};
	param.CD_SITE			=	this.dsListSub.getColumn(this.dsListSub.rowposition, "CD_SITE");
	param.NO_CONT			=	this.dsListSub.getColumn(this.dsListSub.rowposition, "NO_CONT");
	param.SN_SEQ			=	this.dsListSub.getColumn(this.dsListSub.rowposition, "NO_SEQ");
	param.TY_STOCK			=	"P";
	param.TY_PUBLICATION	=	this.dsListSub.getColumn(this.dsListSub.rowposition, "TY_PUBLICATION");


	this.gfnFormOpen("DCC", "DCC_STOCK_VIEWER", "", param);
};

this.fnStockChange = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	var param = {};
	
	param.YN_EXEC		= "N";
	param.CD_SITE 		= this.dsListSub.getColumn(this.dsListSub.rowposition, "CD_SITE");
	param.DS_SITE 		= this.dsListSub.getColumn(this.dsListSub.rowposition, "DS_SITE");
	param.NO_HADOCONT 	= this.dsListSub.getColumn(this.dsListSub.rowposition, "NO_CONT");
	param.DS_HADOCONT 	= this.dsListSub.getColumn(this.dsListSub.rowposition, "DS_HADOCONT");
	param.NO_SEQ 		= this.dsListSub.getColumn(this.dsListSub.rowposition, "NO_SEQ");
	param.CD_VENDOR 	= this.dsListSub.getColumn(this.dsListSub.rowposition, "CD_VENDOR");
	param.DS_VENDOR 	= this.dsListSub.getColumn(this.dsListSub.rowposition, "DS_VENDOR");	
	
	this.gfnFormOpen("DWB", "DWB_PREPAY_CHANGE", "fnPrepay_callback", param, 1400, 550);
};

this.fnTransureCallback = function(svcID, errorCode, errorMsg)
{
	if(svcID == "transureReq"){
		if(errorCode != 0) {
			this.gfnAlert(errorMsg);
			return;
		}
		this.gfnAlert("보증신청완료!!!");
	} else if(svcID == "transureCan") {
		if(errorCode != 0) {
			this.gfnAlert(errorMsg);
			return;
		}
		this.gfnAlert("보증취소완료!!!");
	} else if(svcID == "transureRes") {
		if(errorCode != 0) {
			this.gfnAlert(errorMsg);
			return;
		}
		this.gfnAlert("보증반려완료!!!");
	} else if(svcID == "transureAcc") {
		if(errorCode != 0) {
			this.gfnAlert(errorMsg);
			return;
		}
		this.gfnAlert("보증수용완료!!!");
	} else if(svcID == "transureDes") {
		if(errorCode != 0) {
			this.gfnAlert(errorMsg);
			return;
		}
		this.gfnAlert("보증파기완료!!!");
	} else if(svcID == "transureApp") {
		if(errorCode != 0) {
			this.gfnAlert(errorMsg);
			return;
		}
		this.gfnAlert("보증최종완료!!!");
	};
	
	this.fnSelect();
};

// this.divData_divDataBottom_objGridSub_oncellposchanged = function(obj:nexacro.Grid,e:nexacro.GridSelectEventInfo)
// {
// 	
// 	var colnm = this.gfnGridGetBindColumnNameByIndex(this.dxGridSub, e.cell);
// 
// 	if(colnm == "NO_SLIP"||colnm == "NO_SLIP2"){
// 		this.selSlipNo = this.dsListSub.getColumn(e.row,colnm);
// 	}
// };

/*
 *   입력 버튼
 */
this.fnAdd = function() {
	if(this.gfnIsNull(this.dsSearch.getColumn(0, "CD_SITE"))){
		return;
	}
   var nrow = this.gfnGridAdd(this.dxGridSub, "bottom"); // top (default), bottom, current
   var today = this.gfnGetDate();
   this.dsListSub.set_enableevent(false);
   this.dsListSub.setColumn(nrow, "YN_EDIT", "Y");
   

   this.dsListSub.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
   this.dsListSub.setColumn(nrow, "DS_SITE", this.divSearch.form.ccfCD_SITE.form.DSTextBox.value);
   this.dsListSub.setColumn(nrow, "DT_PREPAY", today); //작성일
   this.dsListSub.setColumn(nrow, "DT_ACNT", today); //회계일
   this.dsListSub.setColumn(nrow, "DT_REQTAXBILL", today); //증빙일 
   //this.dsListSub.setColumn(nrow, "YN_FORWARD", "Y"); //정발행
   this.dsListSub.setColumn(nrow, "YN_FORWARD", "N"); //역발행
   this.dsListSub.setColumn(nrow, "CD_PAYMENT", "J"); //지급구분 'J'
   this.dsListSub.setColumn(nrow, "DS_PAYMENT", "즉시지급"); //지급구분명 '즉시지급'
   /*this.dsListSub.setColumn(nrow, "NO_SEQ", this.dsListSub.getRowCount());*/
   

   
   this.dsListSub.setColumn(nrow, "DT_PAYMENT", this.gfnAddDate(today, +15)); //집행예정일(+15)
   this.dsListSub.set_enableevent(true);  	     
		

}	



this.fnPrintPrepay1 = function(){
	if(this.dsListSub.rowcount < 1) { return; }
	var param = {};
	var row = this.dsListSub.rowposition;
	
	var cdSite = this.dsListSub.getColumn(row, "CD_SITE")
	var noCont = this.dsListSub.getColumn(row, "NO_CONT")
	var cdVendor = this.dsListSub.getColumn(row, "CD_VENDOR")
	var noSeq = this.dsListSub.getColumn(row, "NO_SEQ")
	
	
	var strReportName = "/dp/scbd0042prt.ozr";

	

	param.REPORT_NAME = strReportName;	
	param.JSONPARAM = "{\"CDSITE\":\""+ cdSite + "\", \"CONTNO\":\"" + noCont + "\", \"CDVENDOR\":\"" + cdVendor + "\", \"NOSEQ\":\"" + noSeq +"\"}";
	console.log(param);
	this.gfnFormOpenNonAuth("DZU", "DZU_OZ", "", param, 900, 650);

}

this.fnPrintPrepay2 = function(){
	if(this.dsListSub.rowcount < 1) { return; }
	var param = {};
	var row = this.dsListSub.rowposition;
	
	var cdSite = this.dsListSub.getColumn(row, "CD_SITE")
	var noCont = this.dsListSub.getColumn(row, "NO_CONT")
	var cdVendor = this.dsListSub.getColumn(row, "CD_VENDOR")
	var noSeq = this.dsListSub.getColumn(row, "NO_SEQ")
	
	
	var strReportName = "/dp/scbd0040prt.ozr";

	

	param.REPORT_NAME = strReportName;	
	param.JSONPARAM = "{\"CDSITE\":\""+ cdSite + "\", \"CONTNO\":\"" + noCont + "\", \"CDVENDOR\":\"" + cdVendor + "\", \"NOSEQ\":\"" + noSeq +"\"}";
	console.log(param);
	this.gfnFormOpenNonAuth("DZU", "DZU_OZ", "", param, 900, 650);

}

// 첨부파일
this.fnFile = function(obj: nexacro.Button, e: nexacro.ClickEventInfo) {
	if(this.dsListSub.rowcount < 1) { return; }
	var param = {};
	var row = this.dsListSub.rowposition;
	
	var noCont = this.dsListSub.getColumn(row, "NO_CONT")
	var cdVendor = this.dsListSub.getColumn(row, "CD_VENDOR")
	var noSeq = this.dsListSub.getColumn(row, "NO_SEQ")
	
    var fileManager = {};
    fileManager.CD_GUBUN = "DWB6";
	fileManager.CD_DIR = [  noCont, cdVendor, noSeq ];
	fileManager.IS_READONLY = false;
	
    this.gfnFileManager(fileManager, "fnFileCallback");
}

this.fnFileCallback = function(strID, val) {
	/*this.FormBtns.Select.click();*/

};]]></Script>
    <Objects>
      <Dataset id="dsList" canrowposchange="dsList_canrowposchange"/>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="TY_WRK" type="STRING" size="256"/>
          <Column id="CD_SITE" type="STRING" size="256"/>
          <Column id="NO_HADOCONT" type="STRING" size="256"/>
          <Column id="CD_VENDOR" type="STRING" size="256"/>
          <Column id="YN_CMPLT" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="YN_CMPLT">Y</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsListSub" onvaluechanged="dsListSub_onvaluechanged"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DWBPR_PREPAYCONTRACT_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">d_save</Col>
            <Col id="SP">DWBPR_PREPAY_ALL_SAVE</Col>
          </Row>
          <Row>
            <Col id="TARGET">d_exec</Col>
            <Col id="SP">DWBPR_PREPAY_EXECUTE</Col>
          </Row>
          <Row>
            <Col id="SP">DWBPR_PREPAY_ALL_SELECT</Col>
            <Col id="TARGET">d_select</Col>
          </Row>
          <Row>
            <Col id="TARGET">sapauto</Col>
            <Col id="SP">DWZPR_SAP_AUTOSLIP_ISSUE_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">sapcancel</Col>
            <Col id="SP">DWZPR_SAP_AUTOSLIP_CANCEL_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">file</Col>
            <Col id="SP">DWBPR_PREPAYFILE_EXECUTE</Col>
          </Row>
          <Row>
            <Col id="TARGET">appSelect</Col>
            <Col id="SP">DWBPR_APP_DW07_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">appChk</Col>
            <Col id="SP">DWBPR_APP_DW07_CHK</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsListSap"/>
      <Dataset id="dsAppList" onvaluechanged="dsList_onvaluechanged"/>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfCD_SITE.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_SITE"/>
      <BindItem id="item1" compid="divSearch.form.ccfNO_HADOCONT.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="NO_HADOCONT"/>
      <BindItem id="item2" compid="divSearch.form.ccfCD_VENDOR.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_VENDOR"/>
      <BindItem id="item3" compid="divSearch.form.chk_GISUNGREQ" propid="value" datasetid="dsSearch" columnid="YN_CMPLT"/>
    </Bind>
  </Form>
</FDL>
