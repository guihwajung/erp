(function()
{
    return function()
    {
        if (!this._is_form)
            return;
        
        var obj = null;
        
        this.on_create = function()
        {
            this.set_name("form");
            this.set_titletext("학자금신청");
            if (Form == this.constructor)
            {
                this._setFormPosition(1280,720);
            }
            
            // Object(Dataset, ExcelExportObject) Initialize
            obj = new Dataset("_dsProc", this);
            obj._setContents("<ColumnInfo><Column id=\"TARGET\" type=\"STRING\" size=\"256\"/><Column id=\"SP\" type=\"STRING\" size=\"256\"/></ColumnInfo><Rows><Row><Col id=\"TARGET\">select</Col><Col id=\"SP\">DABPR_TUITION_REQUEST_SELECT</Col></Row><Row><Col id=\"TARGET\">submit</Col><Col id=\"SP\">DABPR_TUITION_APPROVAL</Col></Row></Rows>");
            this.addChild(obj.name, obj);


            obj = new Dataset("dsSearch", this);
            obj._setContents("<ColumnInfo><Column id=\"YY_TUITION\" type=\"STRING\" size=\"256\"/><Column id=\"CD_TUITION\" type=\"STRING\" size=\"256\"/><Column id=\"CD_CORP\" type=\"STRING\" size=\"256\"/><Column id=\"DS_CORP\" type=\"STRING\" size=\"256\"/><Column id=\"ID_SABUN\" type=\"STRING\" size=\"256\"/><Column id=\"DS_HNAME\" type=\"STRING\" size=\"256\"/><Column id=\"ID_PERSON\" type=\"STRING\" size=\"256\"/></ColumnInfo><Rows><Row><Col id=\"CD_CORP\"/><Col id=\"DS_CORP\"/><Col id=\"ID_SABUN\"/><Col id=\"DS_HNAME\"/><Col id=\"ID_PERSON\"/></Row></Rows>");
            this.addChild(obj.name, obj);


            obj = new Dataset("dsCD_TUITION", this);
            obj._setContents("<ColumnInfo><Column id=\"CD_CODE\" type=\"STRING\" size=\"256\"/><Column id=\"DS_CODE\" type=\"STRING\" size=\"256\"/></ColumnInfo><Rows><Row><Col id=\"CD_CODE\">01</Col><Col id=\"DS_CODE\">1분기</Col></Row><Row><Col id=\"CD_CODE\">02</Col><Col id=\"DS_CODE\">2분기</Col></Row><Row><Col id=\"CD_CODE\">03</Col><Col id=\"DS_CODE\">3분기</Col></Row><Row><Col id=\"CD_CODE\">04</Col><Col id=\"DS_CODE\">4분기</Col></Row></Rows>");
            this.addChild(obj.name, obj);


            obj = new Dataset("dsList", this);
            obj._setContents("");
            this.addChild(obj.name, obj);
            
            // UI Components Initialize
            obj = new Div("divSearch","0","0",null,"46.0","0",null,null,null,null,null,this);
            obj.set_taborder("1");
            obj.set_cssclass("div_SEARCH_Bg");
            obj.set_text("");
            this.addChild(obj.name, obj);

            obj = new Static("staYY_TUITION","0","10.0","66","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("4");
            obj.set_text("년도");
            obj.set_cssclass("sta_WF_SchLabelE");
            this.divSearch.addChild(obj.name, obj);

            obj = new Div("ccfYY_TUITION","staYY_TUITION:0.0","10.0","60","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("5");
            obj.set_text("");
            obj.set_url("cmm::cmmCalYY.xfdl");
            this.divSearch.addChild(obj.name, obj);

            obj = new Static("staCD_TUITION","ccfYY_TUITION:0.0","10.0","66","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("6");
            obj.set_text("분기");
            obj.set_cssclass("sta_WF_SchLabelE");
            this.divSearch.addChild(obj.name, obj);

            obj = new Combo("cboCD_TUITION","staCD_TUITION:0.0","10.0","70","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("7");
            obj.set_innerdataset("dsCD_TUITION");
            obj.set_codecolumn("CD_CODE");
            obj.set_datacolumn("DS_CODE");
            this.divSearch.addChild(obj.name, obj);

            obj = new Static("staCD_CORP","cboCD_TUITION:0.0","10.0","66","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("2");
            obj.set_text("법인");
            obj.set_cssclass("sta_WF_SchLabelE");
            this.divSearch.addChild(obj.name, obj);

            obj = new Div("ccfCD_CORP","staCD_CORP:0.0","10.0","250","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.getSetter("CDTextWidth").set("50");
            obj.set_taborder("3");
            obj.set_url("cmm::cmmCodeFind.xfdl");
            obj.set_text("");
            obj.getSetter("CodeFindName").set("DAX_CFCORP");
            obj.set_enable("true");
            this.divSearch.addChild(obj.name, obj);

            obj = new Static("staID_SABUN","ccfCD_CORP:0.0","10.0","66","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("0");
            obj.set_text("성명");
            obj.set_cssclass("sta_WF_SchLabelE");
            this.divSearch.addChild(obj.name, obj);

            obj = new Div("ccfID_SABUN","staID_SABUN:0.0","10.0","250","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.getSetter("CDTextWidth").set("90");
            obj.set_taborder("1");
            obj.set_url("cmm::cmmCodeFind.xfdl");
            obj.set_text("");
            obj.getSetter("CodeFindName").set("DAX_CFBASEINFO_ALL");
            obj.set_enable("true");
            this.divSearch.addChild(obj.name, obj);

            obj = new Edit("edtID_PERSON","ccfID_SABUN:5","10.0","90","24.0",null,null,null,null,null,null,this.divSearch.form);
            obj.set_taborder("8");
            obj.set_enable("false");
            obj.set_visible("false");
            this.divSearch.addChild(obj.name, obj);

            obj = new Div("divData","0","divSearch:10",null,null,"0","0",null,null,null,null,this);
            obj.set_taborder("1");
            obj.set_cssclass("div_DATA_Bg");
            this.addChild(obj.name, obj);

            obj = new Grid("objGrid","0","0",null,null,"0","0",null,null,null,null,this.divData.form);
            obj.set_taborder("0");
            obj._setContents("");
            this.divData.addChild(obj.name, obj);
            // Layout Functions
            //-- Default Layout : this
            obj = new Layout("default","",this._adjust_width,this._adjust_height,this,function(p){});
            this.addLayout(obj.name, obj);
            
            // BindItem Information
            obj = new BindItem("item0","divSearch.form.ccfYY_TUITION.form.TextBox","value","dsSearch","YY_TUITION");
            this.addChild(obj.name, obj);
            obj.bind();

            obj = new BindItem("item1","divSearch.form.cboCD_TUITION","value","dsSearch","CD_TUITION");
            this.addChild(obj.name, obj);
            obj.bind();

            obj = new BindItem("item2","divSearch.form.ccfCD_CORP.form.CDTextBox","value","dsSearch","CD_CORP");
            this.addChild(obj.name, obj);
            obj.bind();

            obj = new BindItem("item3","divSearch.form.ccfCD_CORP.form.DSTextBox","value","dsSearch","DS_CORP");
            this.addChild(obj.name, obj);
            obj.bind();

            obj = new BindItem("item4","divSearch.form.ccfID_SABUN.form.CDTextBox","value","dsSearch","ID_SABUN");
            this.addChild(obj.name, obj);
            obj.bind();

            obj = new BindItem("item5","divSearch.form.ccfID_SABUN.form.DSTextBox","value","dsSearch","DS_HNAME");
            this.addChild(obj.name, obj);
            obj.bind();

            obj = new BindItem("item6","divSearch.form.edtID_PERSON","value","dsSearch","ID_PERSON");
            this.addChild(obj.name, obj);
            obj.bind();
            
            // TriggerItem Information

        };
        
        this.loadPreloadList = function()
        {
            this._addPreloadList("fdl","cmm::cmmCalYY.xfdl");
            this._addPreloadList("fdl","cmm::cmmCodeFind.xfdl");
        };
        
        // User Script
        this.registerScript("DAB_TUITION_REQUEST.xfdl", function() {
        this.objApp = this.gfnGetApplication();

        this.form_onload = function(obj, e) {
        	// -- 필수 -------------------//
        	this.gfnFormOnLoad(this);
        	this.gfnFormInfo(this);
        	// ---------------------------//

        	this.fnSetButton();
        	this.fnSetExtendButton();
        	this.fnSetVariable();
        	this.fnSetEvent();
        	this.fnSetParameter();
        	this.fnSetCombo();
        	this.fnInit();
        }

        /************************************************************************
         * 버튼 설정 : 화면(Tab) 전환시 마다 호출
         * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
         ************************************************************************/
        this.fnSetButton = function() {

        }

        /************************************************************************
         * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
         ************************************************************************/
        this.fnSetExtendButton = function() {
        	this.btnReq = this.gfnFormButtonAdd("Req", "fnReq");	// 신청
        }

        /************************************************************************
         * 변수 선언
         ************************************************************************/
        this.fnSetVariable = function() {
        	// 그리드영역
        	this.dxGrid = this.divData.form.objGrid;

        	// 검색영역
        	this.ccfYY_TUITION = this.divSearch.form.ccfYY_TUITION;		// 년도
        	this.cboCD_TUITION = this.divSearch.form.cboCD_TUITION;		// 분기
        	this.ccfCD_CORP    = this.divSearch.form.ccfCD_CORP;		// 법인코드
        	this.ccfID_SABUN   = this.divSearch.form.ccfID_SABUN;		// 성명
        	this.edtID_PERSON  = this.divSearch.form.edtID_PERSON;		// ID_PERSION(숨김)
        }

        /************************************************************************
         * 이벤트 설정
         ************************************************************************/
        this.fnSetEvent = function() {
        	// 그리드영역
        	this.gfnGridInit(this.dxGrid, this.dsList, "DA", "DAB_TUITION_REQUEST");
        	this.dxGrid.AfterEdit     = "fnGridAfterEdit";
        	this.dxGrid.AfterAllCheck = "fnGridAfterAllCheck";

        	// 검색영역
        	this.ccfCD_CORP.BeforeUserDataSetParam  = "fnBeforeUserDataSetParam";	// 법인
        	this.ccfCD_CORP.AfterCDTextChanged      = "fnAfterCDTextChanged";
        	this.ccfID_SABUN.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";	// 성명
        	this.ccfID_SABUN.AfterCDTextChanged     = "fnAfterCDTextChanged";
        }

        /************************************************************************
         * 파라미터 설정
         ************************************************************************/
        this.fnSetParameter = function() {
        	// 조회
        	this.dsSelect = new Dataset();
        	this.dsSelect.addColumn("YY_TUITION", "string");
        	this.dsSelect.addColumn("CD_TUITION", "string");
        	this.dsSelect.addColumn("CD_CORP", "string");
        	this.dsSelect.addColumn("ID_PERSON", "int");
        	this.dsSelect.addColumn("ID_SABUN", "string");
        	this.dsSelect.addColumn("GR_SEARCH", "string");
        	this.dsSelect.addColumn("GR_CORP", "string");
        	this.dsSelect.addColumn("GR_DEPT", "string");
        	this.dsSelect.addColumn("ID_USER", "string");

        	// 제출 및 제출취소
        	this.dsSubmit = new Dataset();
        	this.dsSubmit.addColumn("TY_APPROVAL", "string");
        	this.dsSubmit.addColumn("ID_PERSON", "int");
        	this.dsSubmit.addColumn("YY_TUITION", "string");
        	this.dsSubmit.addColumn("CD_TUITION", "string");
        	this.dsSubmit.addColumn("NO_SEQ", "int");
        	this.dsSubmit.addColumn("CD_CORP", "string");
        	this.dsSubmit.addColumn("ID_SABUN", "string");
        	this.dsSubmit.addColumn("ID_RESIDENT", "string");
        	this.dsSubmit.addColumn("DS_FAM_HNAME", "string");
        	this.dsSubmit.addColumn("GR_SEARCH", "string");
        	this.dsSubmit.addColumn("GR_CORP", "string");
        	this.dsSubmit.addColumn("GR_DEPT", "string");
        	this.dsSubmit.addColumn("ID_USER", "string");
        }

        /************************************************************************
         * 콤보 데이터 조회 및 설정
         ************************************************************************/
        this.fnSetCombo = function() {

        }

        /************************************************************************
         * 화면 및 검색영역 초기화
         ************************************************************************/
        this.fnInit = function() {
        	var today = this.gfnGetDate();											// 년도
        	this.dsSearch.setColumn(0, "YY_TUITION", today.substr(0, 4));
        	var nQuarter = this.fnGetQuarter(today);								// 분기
        	this.dsSearch.setColumn(0, "CD_TUITION", nQuarter);
        	this.dsSearch.setColumn(0, "CD_CORP", this.AuthClient.CD_CORP);			// 법인
        	this.dsSearch.setColumn(0, "DS_CORP", this.AuthClient.DS_CORP);
        	this.dsSearch.setColumn(0, "ID_SABUN", this.AuthClient.ID_SABUN);		// 성명
        	this.dsSearch.setColumn(0, "DS_HNAME", this.AuthClient.DS_HNAME);
        	this.dsSearch.setColumn(0, "ID_PERSON", this.AuthClient.ID_PERSON);

        	if (this.FormInfo.GR_SEARCH == 9) {
        		this.ccfCD_CORP.set_enable(false);
        		this.ccfID_SABUN.set_enable(false);
        	}

        	if (this.gfnGetConfig("DZ", "CD_ROLE_SECRETARY") == this.FormInfo.CD_ROLE) {
        		this.ccfCD_CORP.set_enable(false);
        		this.ccfID_SABUN.set_enable(true);
        		this.ccfID_SABUN.form.set_readonly(false);
        	}
        }

        /************************************************************************
         * 컨트롤 이벤트
         ************************************************************************/
         /*
          *	조회 버튼
          */
        this.fnSelect = function() {
        	if (!this.gfnSearchValidate(this.divSearch, this.dsSearch)) return false;

        	this.gfnGridBeforeSelect(this.dxGrid);
        	this.gfnSetFormStatus(this);

        	this.dsSelect.clearData();
        	this.dsSelect.addRow();

        	this.dsSelect.setColumn(0, "YY_TUITION", this.dsSearch.getColumn(0, "YY_TUITION"));
        	this.dsSelect.setColumn(0, "CD_TUITION", this.dsSearch.getColumn(0, "CD_TUITION"));
        	this.dsSelect.setColumn(0, "CD_CORP"   , this.dsSearch.getColumn(0, "CD_CORP"));
        	this.dsSelect.setColumn(0, "ID_PERSON" , this.dsSearch.getColumn(0, "ID_PERSON"));
        	this.dsSelect.setColumn(0, "ID_SABUN"  , this.dsSearch.getColumn(0, "ID_SABUN"));
        	this.dsSelect.setColumn(0, "GR_SEARCH" , this.FormInfo.GR_SEARCH);
        	this.dsSelect.setColumn(0, "GR_CORP"   , this.AuthClient.CD_CORP);
        	this.dsSelect.setColumn(0, "GR_DEPT"   , this.AuthClient.CD_DEPT);
        	this.dsSelect.setColumn(0, "ID_USER"   , this.AuthClient.ID_USER);

        	var strSvcId    = "select";
        	var strSvcType  = "grid";
        	var inProc		= "_dsProc";
        	var inData      = "select=dsSelect";
        	var outData     = "dsList=select0";
        	var strArg      = "";
        	var callBackFnc = "fnCallback";

        	this.gfnTransaction(strSvcId,		// transaction을 구분하기 위한 svc id값
        						strSvcType, 	// transaction을 요청할 구분
        						inProc,			// Procedure 정보 Dataset 이름
        						inData, 		// 입력값으로 보낼 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        						outData, 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
        						callBackFnc);	// 통신방법 정의 [생략가능]
        }

        /*
         * 추가 버튼
         */
        this.fnAdd = function() {

        }

        /*
         * 삭제 버튼
         */
        this.fnDel = function() {

        }

        /*
         * 저장 버튼
         */
        this.fnSave = function() {

        }

        /*
         * 엑셀 버튼
         */
        this.fnExcel = function() {
        	this.gfnExcelExport(this.dxGrid);
        }

        /*
         * 출력 버튼
         */
        this.fnPrint = function() {

        }

        /************************************************************************
         * Validate
         ************************************************************************/
        this.fnSelectValid = function(){
        	if (this.gfnIsNull(this.ccfYY_TUITION.form.TextBox.value)) {
        		this.fnValidCallback = function() {
        			this.ccfYY_TUITION.form.TextBox.setFocus();
        		}
        		this.gfnAlert("년도를 선택하세요!", "fnValidCallback");
        		return false;
        	}
        	return true;
        }

        /************************************************************************
         * 확장버튼 이벤트
         ************************************************************************/
        // 신청 버튼
        this.fnReq = function() {
        	var param = {};
         	param.CD_CORP    = this.dsSearch.getColumn(0, "CD_CORP");
        	param.DS_CORP    = this.dsSearch.getColumn(0, "DS_CORP");
        	param.ID_SABUN   = this.dsSearch.getColumn(0, "ID_SABUN");
        	param.DS_HNAME   = this.dsSearch.getColumn(0, "DS_HNAME");
        	param.CD_DEPT    = this.AuthClient.CD_DEPT;
        	param.DS_DEPT    = this.AuthClient.DS_DEPT;
        	param.YY_TUITION = this.dsSearch.getColumn(0, "YY_TUITION");
        	param.CD_TUITION = this.dsSearch.getColumn(0, "CD_TUITION");

        	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DAB_TUITION_REQUEST_DLG", "fnReqPopCallback", param);
        }

        /************************************************************************
         * 콜백 이벤트
         ************************************************************************/
        /*
         * 기본 콜백
         */
        this.fnCallback = function(svcID, errorCode, errorMsg) {
        	if (svcID == "select") {
        		this.gfnGridAfterSelect(this.dxGrid);

        		for (var i = 0; i < this.dsList.rowcount; i++) {
        			var DS_RETURN = this.dsList.getColumn(i, "DS_RETURN");
        			var rows = (DS_RETURN == undefined || DS_RETURN == "") ? 1 : DS_RETURN.split("\n").length;
        			this.dxGrid.setRealRowSize(i, 29 * rows - (rows == 1 ? 0 : (rows * 6) + (rows * 3)));
        		}

        	} else if(svcID == "submit") {
        		if (errorCode == 0) {
        			this.fnSubmitAfter = function() {
        				this.FormBtns.Select.click();
        			}
        			this.gfnAlert("제출이 완료되었습니다.", "fnSubmitAfter");
        		} else {
        			this.gfnAlert(errorMsg);
        		}
        	} else if(svcID == "submitCanc") {
        		if (errorCode == 0) {
        			this.fnSubmitCancAfter = function() {
        				this.FormBtns.Select.click();
        			}
        			this.gfnAlert("제출취소가 완료되었습니다.", "fnSubmitCancAfter");
        		} else {
        			this.gfnAlert(errorMsg);
        		}
        	}
        }

        // 신청 버튼 콜백
        this.fnReqPopCallback = function(id, val) {
        	this.FormBtns.Select.click();
        }

        // 제출
        this.fnSubmit = function(obj,e) {

        }

        // 승인 처리
        this.fnSubmitProc = function(id,val){
        	if(val == false) return;

        	// 그리드 필수항목 체크
        	if (!this.gfnGridValidate(this.dxGrid)) return;
        	this.dxGrid.updateToDataset();

        	this.dsSubmit.clearData();
        	for (var i = 0; i < this.dsList.rowcount; i++) {
        		if (this.dsList.getColumn(i, "CHK") != "1") continue;

        		var nrow = this.dsSubmit.addRow();
        		this.dsSubmit.setColumn(nrow, "TY_APPROVAL" , "01");	// 01:제출, 00:제출취소, 03:결재완료, 04:반려
        		this.dsSubmit.setColumn(nrow, "ID_PERSON"   , this.dsList.getColumn(i, "ID_PERSON"));
        		this.dsSubmit.setColumn(nrow, "YY_TUITION"  , this.dsList.getColumn(i, "YY_TUITION"));
        		this.dsSubmit.setColumn(nrow, "CD_TUITION"  , this.dsList.getColumn(i, "CD_TUITION"));
        		this.dsSubmit.setColumn(nrow, "NO_SEQ"      , this.dsList.getColumn(i, "NO_SEQ"));
        		this.dsSubmit.setColumn(nrow, "CD_CORP"     , this.dsList.getColumn(i, "CD_CORP"));
        		this.dsSubmit.setColumn(nrow, "ID_SABUN"    , this.dsList.getColumn(i, "ID_SABUN"));
        		this.dsSubmit.setColumn(nrow, "ID_RESIDENT" , this.dsList.getColumn(i, "ID_RESIDENT"));
        		this.dsSubmit.setColumn(nrow, "DS_FAM_HNAME", this.dsList.getColumn(i, "DS_FAM_HNAME"));
        		this.dsSubmit.setColumn(nrow, "GR_SEARCH"   , this.FormInfo.GR_SEARCH);
        		this.dsSubmit.setColumn(nrow, "GR_CORP"     , this.AuthClient.CD_CORP);
        		this.dsSubmit.setColumn(nrow, "GR_DEPT"     , this.AuthClient.CD_DEPT);
        		this.dsSubmit.setColumn(nrow, "ID_USER"     , this.AuthClient.ID_USER);
        	}

        	if (this.dsSubmit.rowcount == 0) return;

        	var strSvcId    = "submit";
        	var strSvcType  = "save";
        	var inProc		= "_dsProc";
        	var inData      = "submit=dsSubmit";
        	var outData     = "";
        	var strArg      = "";
        	var callBackFnc = "fnCallback";

        	this.gfnTransaction(strSvcId,		// transaction을 구분하기 위한 svc id값
        						strSvcType, 	// transaction을 요청할 구분
        						inProc,			// Procedure 정보 Dataset 이름
        						inData, 		// 입력값으로 보낼 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        						outData, 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
        						callBackFnc);	// 통신방법 정의 [생략가능]
        }

        // 제출취소
        this.fnSubmitCanc = function(obj,e) {
        	if (this.dsList.rowcount == 0) return;

        	if (this.dsList.findRow("CHK", "1") == -1) {
        		this.gfnAlert("대상자를 체크해주세요.");
        		return;
        	}

        	this.gfnConfirm("제출취소하시겠습니까?", "fnSubmitCancProc");
        }

        // 제출취소 콜백
        this.fnSubmitCancProc = function(id, val) {
        	if (val == false) return;

        	// 그리드 필수항목 체크
        	if (!this.gfnGridValidate(this.dxGrid)) return;

        	this.dxGrid.updateToDataset();
        	this.dsSubmit.clearData();

        	for (var i = 0; i < this.dsList.rowcount; i++) {
        		if (this.dsList.getColumn(i, "CHK") != "1") continue;

        		var nrow = this.dsSubmit.addRow();
        		this.dsSubmit.setColumn(nrow, "TY_APPROVAL", "00");	// 00: 제출취소, 01: 제출, 03: 결재완료, 04: 반려
        		this.dsSubmit.setColumn(nrow, "ID_PERSON"   , this.dsList.getColumn(i, "ID_PERSON"));
        		this.dsSubmit.setColumn(nrow, "YY_TUITION"  , this.dsList.getColumn(i, "YY_TUITION"));
        		this.dsSubmit.setColumn(nrow, "CD_TUITION"  , this.dsList.getColumn(i, "CD_TUITION"));
        		this.dsSubmit.setColumn(nrow, "NO_SEQ"      , this.dsList.getColumn(i, "NO_SEQ"));
        		this.dsSubmit.setColumn(nrow, "CD_CORP"     , this.dsList.getColumn(i, "CD_CORP"));
        		this.dsSubmit.setColumn(nrow, "ID_SABUN"    , this.dsList.getColumn(i, "ID_SABUN"));
        		this.dsSubmit.setColumn(nrow, "ID_RESIDENT" , this.dsList.getColumn(i, "ID_RESIDENT"));
        		this.dsSubmit.setColumn(nrow, "DS_FAM_HNAME", this.dsList.getColumn(i, "DS_FAM_HNAME"));
        		this.dsSubmit.setColumn(nrow, "GR_SEARCH"   , this.FormInfo.GR_SEARCH);
        		this.dsSubmit.setColumn(nrow, "GR_CORP"     , this.AuthClient.CD_CORP);
        		this.dsSubmit.setColumn(nrow, "GR_DEPT"     , this.AuthClient.CD_DEPT);
        		this.dsSubmit.setColumn(nrow, "ID_USER"     , this.AuthClient.ID_USER);
        	}

        	if (this.dsSubmit.rowcount == 0) return;

        	var strSvcId    = "submitCanc";
        	var strSvcType  = "save";
        	var inProc		= "_dsProc";
        	var inData      = "submit=dsSubmit";
        	var outData     = "";
        	var strArg      = "";
        	var callBackFnc = "fnCallback";

        	this.gfnTransaction(strSvcId,		// transaction을 구분하기 위한 svc id값
        						strSvcType, 	// transaction을 요청할 구분
        						inProc,			// Procedure 정보 Dataset 이름
        						inData, 		// 입력값으로 보낼 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        						outData, 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
        						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
        						callBackFnc);	// 통신방법 정의 [생략가능]
        }

        /************************************************************************
         * 코드파인드 이벤트
         ************************************************************************/
        this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
        	if (id == "ccfCD_CORP") {
        		;
        	} else if (id == "ccfID_SABUN") {
        		if (this.gfnIsNull(this.ccfCD_CORP.form.CDTextBox.value)) {
        			this.fnValidCallback = function() {
        				this.ccfCD_CORP.form.CDTextBox.setFocus();
        			}
        			this.gfnAlert("법인을 선택하세요!", "fnValidCallback");
        			return false;
        		}
        		dsUserParam.setColumn(nrow, "CD_DEPT"  , this.AuthClient.CD_DEPT);
        		dsUserParam.setColumn(nrow, "CD_CORP"  , this.gfnNvl(this.ccfCD_CORP.form.CDTextBox.value, "%"));
        		dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
        		dsUserParam.setColumn(nrow, "YN_CORP"  , "N");
        		dsUserParam.setColumn(nrow, "TY_RETIRE", "%");
        	}
        	return true;
        }

        this.fnAfterCDTextChanged = function(id, codeFindData) {
        	var arr = codeFindData;
        	if (id == "ccfCD_CORP") {
        		this.ccfID_SABUN.form.fnCodeFindClear();
        		this.edtID_PERSON.set_value("");
        	} else if(id == "ccfID_SABUN") {
        		this.edtID_PERSON.set_value("");
        		if (arr.length > 0) {
        			this.edtID_PERSON.set_value(arr[0]["ID_PERSON"]);
        		}
        	}
        }

        /************************************************************************
         * 그리드 이벤트
         ************************************************************************/
        this.fnGridBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
        	return true;
        }

        this.fnGridAfterCDTextChanged = function(id, codeFindData) {

        }

        /************************************************************************
         * 기타 이벤트
         ************************************************************************/
        this.dsSearch_onvaluechanged = function(obj,e){
        	if(e.oldvalue != e.newvalue) {
        		this.gfnSetFormStatus(this);	// 폼상태 초기화
        		this.gfnGridClear(this.dxGrid);
        	}
        }

        /************************************************************************
         * 기타 함수
         ************************************************************************/
        // 분기
        this.fnGetQuarter = function(today){
        	var nMonth = parseInt(today.substr(4, 2));
        	if (nMonth >= 1 && nMonth <= 3) {
        		return "01";
        	} else if (nMonth >= 4 && nMonth <= 6) {
        		return "02";
        	} else if (nMonth >= 7 && nMonth <= 9) {
        		return "03";
        	} else if (nMonth >= 10 && nMonth <= 12){
        		return "04";
        	}
        }

        });
        
        // Regist UI Components Event
        this.on_initEvent = function()
        {
            this.addEventHandler("onload",this.form_onload,this);
            this.dsSearch.addEventHandler("onvaluechanged",this.dsSearch_onvaluechanged,this);
        };
        this.loadIncludeScript("DAB_TUITION_REQUEST.xfdl");
        this.loadPreloadList();
        
        // Remove Reference
        obj = null;
    };
}
)();
