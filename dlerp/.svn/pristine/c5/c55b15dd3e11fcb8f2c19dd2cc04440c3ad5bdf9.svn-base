<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="DIQ_BIMOK" width="1280" height="720" titletext="비목코드관리" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg" formscrolltype="none">
          <Layouts>
            <Layout>
              <Static id="staCD_ACNTUNIT" taborder="1" text="회계년도" left="0" top="10" width="92" height="24" cssclass="sta_WF_SchLabelE"/>
              <Div id="ctclYR_ACCOUNT" taborder="3" left="staCD_ACNTUNIT:0" top="10" width="60" height="24" url="cmm::cmmCalYY.xfdl"/>
              <Static id="staDS_PAYBACKSTATE" taborder="2" text="사용여부" left="ctclYR_ACCOUNT:0" top="10" width="92" height="24" textDecoration="none" cssclass="sta_WF_SchLabel"/>
              <Combo id="ccboYN_USE" taborder="0" top="10" width="100" height="24" innerdataset="dsYN_USE" codecolumn="CD_CODE" datacolumn="DS_CODE" left="staDS_PAYBACKSTATE:0"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();

	this.dsSearch.setColumn(0, "YR_ACCOUNT", this.gfnGetDate().substr(0, 4));
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {

	this.btnCopy = this.gfnFormButtonAdd("btnCopy", "fnCopyData");
	
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.ctclYR_ACCOUNT = this.divSearch.form.ctclYR_ACCOUNT;
	this.ccboYN_USE = this.divSearch.form.ccboYN_USE;
	
	this.dxGrid = this.divData.form.objGrid;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	this.gfnGridInit(this.dxGrid, this.dsList, "DI", "DIQ_BIMOK");
	//this.dxGrid.AfterEdit              = "fnGrid_AfterEdit";
	this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforeUserDataSetParam";
	this.dxGrid.AfterCDTextChanged = "fnGrid_AfterCDTextChanged";
};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("YR_ACCOUNT", "string");
	this.dsSelect.addColumn("YN_USE", "string");

	this.dsInsert = new Dataset();
	this.dsInsert.addColumn("YR_ACCOUNT", "string");
	this.dsInsert.addColumn("CD_BIMOK", "string");
	this.dsInsert.addColumn("DS_BIMOK", "string");
	this.dsInsert.addColumn("YN_CONTROL", "string");
	this.dsInsert.addColumn("MM_PERIOD", "int");
	this.dsInsert.addColumn("YN_USE", "string");
	this.dsInsert.addColumn("DS_REM", "string");
	this.dsInsert.addColumn("ID_INSERT", "string");
	this.dsInsert.addColumn("YN_SEND", "string");
	this.dsInsert.addColumn("CD_GUBUN", "string");	
	this.dsInsert.addColumn("CD_ITEM", "string");

	this.dsUpdate = new Dataset();
	this.dsUpdate.addColumn("YR_ACCOUNT", "string");
	this.dsUpdate.addColumn("CD_BIMOK", "string");
	this.dsUpdate.addColumn("DS_BIMOK", "string");
	this.dsUpdate.addColumn("YN_CONTROL", "string");
	this.dsUpdate.addColumn("MM_PERIOD", "int");
	this.dsUpdate.addColumn("YN_USE", "string");
	this.dsUpdate.addColumn("DS_REM", "string");
	this.dsUpdate.addColumn("ID_UPDATE", "string");
	this.dsUpdate.addColumn("YN_SEND", "string");
	this.dsUpdate.addColumn("CD_GUBUN", "string");	
	this.dsUpdate.addColumn("CD_ITEM", "string");

	this.dsDelete = new Dataset();
	this.dsDelete.addColumn("YR_ACCOUNT", "string");
	this.dsDelete.addColumn("CD_BIMOK", "string");
	
	// COPY
	this.dsCopy = new Dataset();
	this.dsCopy.addColumn("YR_ACCOUNT", "string");	// 예산년도
	this.dsCopy.addColumn("ID_INSERT", "string");	// 작업자 
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	this.dsSelect.setColumn(0, "YR_ACCOUNT", this.dsSearch.getColumn(0, "YR_ACCOUNT"));
	this.dsSelect.setColumn(0, "YN_USE", this.dsSearch.getColumn(0, "YN_USE"));
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction(strSvcId, 		// transaction을 구분하기 위한 svc id값
						strSvcType, 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData, 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData, 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); 	// 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	var nrow = this.gfnGridAdd(this.dxGrid);
	this.dsList.setColumn(nrow, "YN_CONTROL", "N");
	this.dsList.setColumn(nrow, "YN_USE", "Y");
	this.dsList.setColumn(nrow, "YN_SEND", "Y");
	this.dsList.setColumn(nrow, "MM_PERIOD", "12");
};

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
};

/*
 *	저장 버튼
 */
this.fnSave = function() {
	if (!this.gfnGridValidate(this.dxGrid)) return false;
	
	this.dxGrid.updateToDataset();
	
	this.dsInsert.clearData();
	this.dsUpdate.clearData();
	this.dsDelete.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "I":
				var nrow = this.dsInsert.addRow();
				this.dsInsert.setColumn(nrow, "YR_ACCOUNT", this.dsSearch.getColumn(0, "YR_ACCOUNT"));
				this.dsInsert.setColumn(nrow, "CD_BIMOK", this.dsList.getColumn(i, "CD_BIMOK"));
				this.dsInsert.setColumn(nrow, "DS_BIMOK", this.dsList.getColumn(i, "DS_BIMOK"));
				this.dsInsert.setColumn(nrow, "YN_CONTROL", this.dsList.getColumn(i, "YN_CONTROL"));
				this.dsInsert.setColumn(nrow, "MM_PERIOD", this.dsList.getColumn(i, "MM_PERIOD"));
				this.dsInsert.setColumn(nrow, "YN_USE", this.dsList.getColumn(i, "YN_USE"));
				this.dsInsert.setColumn(nrow, "DS_REM", this.dsList.getColumn(i, "DS_REM"));
				this.dsInsert.setColumn(nrow, "ID_INSERT", this.AuthClient.ID_USER);
				this.dsInsert.setColumn(nrow, "YN_SEND", this.dsList.getColumn(i, "YN_SEND"));
				this.dsInsert.setColumn(nrow, "CD_GUBUN", this.dsList.getColumn(i, "CD_GUBUN"));
				this.dsInsert.setColumn(nrow, "CD_ITEM", this.dsList.getColumn(i, "CD_ITEM"));				
				break;
				
			case "U":
				var nrow = this.dsUpdate.addRow();
				this.dsUpdate.setColumn(nrow, "YR_ACCOUNT", this.dsSearch.getColumn(0, "YR_ACCOUNT"));
				this.dsUpdate.setColumn(nrow, "CD_BIMOK", this.dsList.getColumn(i, "CD_BIMOK"));
				this.dsUpdate.setColumn(nrow, "DS_BIMOK", this.dsList.getColumn(i, "DS_BIMOK"));
				this.dsUpdate.setColumn(nrow, "YN_CONTROL", this.dsList.getColumn(i, "YN_CONTROL"));
				this.dsUpdate.setColumn(nrow, "MM_PERIOD", this.dsList.getColumn(i, "MM_PERIOD"));
				this.dsUpdate.setColumn(nrow, "YN_USE", this.dsList.getColumn(i, "YN_USE"));
				this.dsUpdate.setColumn(nrow, "DS_REM", this.dsList.getColumn(i, "DS_REM"));
				this.dsUpdate.setColumn(nrow, "ID_UPDATE", this.AuthClient.ID_USER);
				this.dsUpdate.setColumn(nrow, "YN_SEND", this.dsList.getColumn(i, "YN_SEND"));
				this.dsUpdate.setColumn(nrow, "CD_GUBUN", this.dsList.getColumn(i, "CD_GUBUN"));
				this.dsUpdate.setColumn(nrow, "CD_ITEM", this.dsList.getColumn(i, "CD_ITEM"));
				break;
				
			case "D":
				var nrow = this.dsDelete.addRow();
				this.dsDelete.setColumn(nrow, "YR_ACCOUNT", this.dsSearch.getColumn(0, "YR_ACCOUNT"));
				this.dsDelete.setColumn(nrow, "CD_BIMOK", this.dsList.getColumn(i, "CD_BIMOK"));
				break;
		}
	}
	
	if (this.dsInsert.rowcount == 0 && this.dsUpdate.rowcount == 0 && this.dsDelete.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "insert=dsInsert update=dsUpdate delete=dsDelete";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction(strSvcId, 		// transaction을 구분하기 위한 svc id값
						strSvcType, 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData, 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData, 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); 	// 통신방법 정의 [생략가능]
};

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {
	var validate = true;
	if (this.gfnIsNull(this.dsSearch.getColumn(0, "YR_ACCOUNT"))) {
		this.fnVaidateCallback = function() {
			this.ctclYR_ACCOUNT.form.TextBox.setFocus();
		}
		this.gfnAlert("회계년도는 반드시 입력 하셔야 합니다.", "fnVaidateCallback");
		validate = false;
	}
	
	return validate;
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg) {
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);
		
	
	}
	else if (svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	else if (svcID == "copy") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
this.fnGrid_BeforeUserDataSetParam = function(id, dsUserParam, nrow) {	
	// 그리드에서 코드파인드 id는 그리드셋팅의 코드파인드 식별ID
	if (id == "DIX_CFITEM")
	{	
		var cdSystem = 'DH';
		var cdType = 'I02';
		dsUserParam.setColumn(nrow, "CD_SYSTEM", cdSystem);	
		dsUserParam.setColumn(nrow, "CD_TYPE", cdType);	
	}
	return true;
};

this.fnGrid_AfterCDTextChanged = function(id, codeFindData) {
trace("fnGrid_AfterCDTextChanged");
}

/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
	}
};

this.fnDetail = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	var param = {};
	param.KIND = "BIMOK";
	param.YM_FROM = nexacro.toNumber(this.dsSearch.getColumn(0, "YR_ACCOUNT")) - 1;
	param.YM_TO = this.dsSearch.getColumn(0, "YR_ACCOUNT");;
	param.TITLE = "비목 복사 및 삭제";

	this.gfnFormOpen("DIQ", "DIQ_DATACREATEDLG", "fnPopupCallback", param);
}

this.fnCopyData = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
//if (!this.gfnGridIsRow(this.dxGrid)) { return false; }
	
	this.gfnConfirm("전년도 비목자료를 복사 하시겠습니까?", "fnConfirm_Confirm", "Y");
	
}

this.fnConfirm_Confirm = function(strId, val) {
	if(val == true) {		
		this.fnCopy(strId);
	}
}

/*
 *	비목복사처리 
 */
this.fnCopy = function(strId) {
	// alert(tyWrk);
	this.dsCopy.clearData();
	
	this.dsCopy.addRow();
	
	var nRow = this.dsList.rowposition;
	
	this.dsCopy.setColumn(0, "YR_ACCOUNT", this.dsSearch.getColumn(0, "YR_ACCOUNT"));
	this.dsCopy.setColumn(0, "ID_INSERT", this.AuthClient.ID_USER);
	
	if (this.dsCopy.rowcount == 0) return;
	
	var strSvcId    = "copy";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "copy=dsCopy";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc);   // 통신방법 정의 [생략가능]
}

this.fnDetail2 = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	if (!this.gfnGridIsRow(this.dxGrid)) return;

	var param = {};
	param.DS_REM = this.dsList.getColumn(this.dsList.rowposition, "DS_REM");
	
	this.gfnFormOpen("DIQ", "DIQ_DSREMDIG", "fnPopupCallback", param);
}

this.fnPopupCallback = function(svcID, val) {
	if (svcID.indexOf("DIQ_DATACREATEDLG") > -1) {
		if (val) {
			this.FormBtns.Select.click();
		}
	}
	else if (svcID.indexOf("DIQ_DSREMDIG") > -1) {
		if (!val) return;
		var json = JSON.parse(val);
		this.dsList.setColumn(this.dsList.rowposition, "DS_REM", json.retStr);
		if (this.gfnIsNull(this.gfnGetFlag(this.dsList, this.dsList.rowposition))) {
			this.dsList.setColumn(this.dsList.rowposition, this.ucFlag, "U");
			this.gfnSetFormStatus(this, "U");
		}
	}
}
]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DIQPR_BIMOK_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">insert</Col>
            <Col id="SP">DIQPR_BIMOK_INSERT</Col>
          </Row>
          <Row>
            <Col id="TARGET">update</Col>
            <Col id="SP">DIQPR_BIMOK_UPDATE</Col>
          </Row>
          <Row>
            <Col id="TARGET">delete</Col>
            <Col id="SP">DIQPR_BIMOK_DELETE</Col>
          </Row>
          <Row>
            <Col id="TARGET">copy</Col>
            <Col id="SP">DIQPR_BIMOK_CREATE</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="YR_ACCOUNT" type="STRING" size="256"/>
          <Column id="YN_USE" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="YR_ACCOUNT"/>
            <Col id="YN_USE"/>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsYN_USE">
        <ColumnInfo>
          <Column id="CD_CODE" type="STRING" size="256"/>
          <Column id="DS_CODE" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="DS_CODE">전체</Col>
            <Col id="CD_CODE"/>
          </Row>
          <Row>
            <Col id="DS_CODE">사용</Col>
            <Col id="CD_CODE">Y</Col>
          </Row>
          <Row>
            <Col id="CD_CODE">N</Col>
            <Col id="DS_CODE">미사용</Col>
          </Row>
        </Rows>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ctclYR_ACCOUNT.form.TextBox" propid="value" datasetid="dsSearch" columnid="YR_ACCOUNT"/>
      <BindItem id="item1" compid="divSearch.form.ccboYN_USE" propid="value" datasetid="dsSearch" columnid="YN_USE"/>
    </Bind>
  </Form>
</FDL>
