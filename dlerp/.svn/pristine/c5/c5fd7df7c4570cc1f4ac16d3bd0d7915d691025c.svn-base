<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="800" height="500" titletext="수주-공통-프로젝트공동도급사관리" onload="form_onload" enable="true">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg" formscrolltype="none">
          <Layouts>
            <Layout>
              <Static id="staCD_PROJ" taborder="0" text="프로젝트코드" left="0.0" top="10.0" width="118.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfCD_PROJ" CodeFindName="DOXPR_PROJ_CODEFIND" CDTextWidth="65" taborder="1" top="10.0" width="400" height="24.0" left="staCD_PROJ:0.0" enable="false" url="cmm::cmmCodeFind.xfdl" enableevent="true"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" bottom="0" right="0" cssclass="div_DATA_Bg" height="457">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);			
	// ---------------------------//
	
	
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	this.gridGoloring();
	
	if(!this.gfnIsNull(this.getOwnerFrame().CD_PROJ))
	{
		this.dsSearch.setColumn(0, "CD_PROJ", this.getOwnerFrame().CD_PROJ);
		this.dsSearch.setColumn(0, "DS_PROJ", this.getOwnerFrame().DS_PROJ);
		this.FormBtns.Select.click();
	}
	this.fnSetButton();
	this.divSearch.form.ccfCD_PROJ.form.CDTextBox.set_enable(true);
};

/************************************************************************
 * 담당자 여부 검사
 ************************************************************************/
 this.fnGetYNCharge = function(){
	
	this.dsReqYNCharge = new Dataset();
	this.dsReqYNCharge.addColumn("CD_PROJ", "string");
	this.dsReqYNCharge.addColumn("ID_USER", "string");
	
	this.dsReqYNCharge.addRow();
	this.dsReqYNCharge.setColumn(0, "CD_PROJ", this.getOwnerFrame().CD_PROJ);
	this.dsReqYNCharge.setColumn(0, "ID_USER", this.objApp.gdsUserInfo.getColumn(0, "ID_USER"));
		
	var strSvcId    = "selectCharge";
	var strSvcType  = "select";
	var inProc		= "_dsProc";
		inData      = "selectCharge=dsReqYNCharge";
		outData     = "dsRcvYNCharge=selectCharge0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
		
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc,false); // 통신방법 정의 [생략가능]
 }
 

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {

}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {

};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
   this.ccfCD_PROJ = this.divSearch.form.ccfCD_PROJ;
   this.dxGrid = this.divData.form.objGrid;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	this.ccfCD_PROJ.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";	
		
	// 그리드 초기화
	this.gfnGridInit(this.dxGrid, this.dsList, "DO", "DOZ_PROJ_CO_CONTRCT");
	
	// 그리드 코드파인드 설정
	this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforeUserDataSetParam";
	
	// 그리드 코드파인드 값 변경
	this.dxGrid.AfterCDTextChanged = "fnGrid_AfterCDTextChanged";
	
	this.dxGrid.EnterCell = "fnGrid_EnterCell";
};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_PROJ", "string");
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.addRow();
	this.dsSelect.setColumn(0, "CD_PROJ", this.dsSearch.getColumn(0, "CD_PROJ"));
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	var nrow = this.gfnGridAdd(this.dxGrid, "bottom"); // top (default), bottom, current
	
	var rtChk = 100 - this.dsList.getSum("RT_POTN");
	var ynChk = this.dsList.getCaseCount("YN_JUGAN == 'Y'")
	
	this.dsList.set_updatecontrol(false);
	this.dsList.setColumn(nrow, "CD_PROJ", this.dsSearch.getColumn(0, "CD_PROJ"));
	this.dsList.setColumn(nrow, "YN_JUGAN", ynChk > 0 ? "N" : "Y");
	this.dsList.setColumn(nrow, "RT_POTN", rtChk);	
	this.dsList.setColumn(nrow, "ID_ADD", this.objApp.gdsUserInfo.getColumn(0, "ID_USER"));	
	this.dsList.set_updatecontrol(true);
}

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}

/*
 *	저장 버튼
 */
this.fnSave = function() {
	// 그리드 필수항목 체크
	if (!this.gfnGridValidate(this.dxGrid)) return;	
	
	this.dxGrid.updateToDataset();
	
	this.dsSave.copyData(this.dsList, true);
	
	if (this.dsSave.rowcount == 0) return;
	
	if(!this.fnGridCustmValidate()) return;
				
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "save=dsSave saveChk=dsSearch";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";

	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc,false); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (errorCode == 0) {
		if (svcID == "select") {
// 			if(this.dsList.rowcount < 1){
// 				this.FormBtns.Add.click();
// 			}
			
			//this.FormBtns.Add.set_enable(true);
			this.gfnGridAfterSelect(this.dxGrid);
		}
		else if(svcID == "save") {
			if (errorCode == 0) {
				this.FormBtns.Select.click();
			} else {
				this.gfnAlert(errorMsg);
			}
		}
	} else {
		this.gfnAlert(errorMsg);
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) 
 {
	if(id == "ccfCD_PROJ")
	{
		dsUserParam.setColumn(nrow, "TY_PROJ", this.getOwnerFrame().TY_PROJ);
	}
	return true;
 }


/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
 this.fnGrid_RowCellChanged = function(obj:nexacro.Grid,e:nexacro.GridSelectEventInfo)
{
     if (e.row != e.oldrow) {
	
	 }
};

/*한대운 수정: 셀수정 설정*/
this.fnGrid_EnterCell = function(obj:nexacro.Grid, row, cell){
    var colnm = this.gfnGridGetBindColumnNameByIndex(obj, cell);
	if(colnm == "NM_CO_CONTRACT")
		return false;
	
	if(colnm == "CD_CO_CONTRACT"){
		if(this.gfnIsNull(this.gfnGetFlag(this.dsList, row))) return false;
	}
	return true;
 };
 
/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
	}
};

this.dsList_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue)
	{
		
	}
};


this.fnGrid_BeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	// 그리드에서 코드파인드 id는 그리드셋팅의 코드파인드 식별ID
 	if (id == "DOX_CFVENDOR_DH") {
		if(this.gfnIsNull(this.dsSearch.getColumn(0, "CD_PROJ"))){
			this.gfnAlert("프로젝트 코드를 입력해주십시오.");
			return false;
		}
	
		dsUserParam.setColumn(nrow, "CD_CORP", this.objApp.gdsUserInfo.getColumn(0, "CD_CORP"));
		dsUserParam.setColumn(nrow, "CD_SITE", "");
		dsUserParam.setColumn(nrow, "TY_VENDOR", this.gfnIsNull(this.getOwnerFrame().TY_VENDOR) ? "" : this.getOwnerFrame().TY_VENDOR);
 	}
	return true;
}

this.fnGrid_AfterCDTextChanged = function(id, codeFindData) {
	if(id == "DOX_CFVENDOR_DH") {
		var arr = codeFindData;
		if(arr.length > 0) {
			var CD_VENDOR = arr[0].CD_VENDOR;
			var chkCnt = this.dsList.getCaseCount("CD_CO_CONTRACT == '" + CD_VENDOR + "'");
			if(chkCnt > 1){
				this.gfnAlert("공동도급사 코드가 중복입니다.");
				this.dsList.setColumn(this.dsList.rowposition,"CD_CO_CONTRACT","")
				this.dsList.setColumn(this.dsList.rowposition,"NM_CO_CONTRACT","")
				return false;
			}
		}
	}
	
	return true;
};

this.fnGridCustmValidate = function(){
	var cntChk = this.dsSave.getCaseCount("nx_flag == 'D' || nx_flag == 'DU'");

	this.dsSave.filter("nx_flag == 'I' || nx_flag == 'U' || nx_flag == undefined");
	this.dsChk.copyData(this.dsSave, true);
	this.dsSave.filter("");
	
	if(cntChk != this.dsSave.getRowCount()){
		var ynChk = this.dsChk.getCaseCount("YN_JUGAN == 'Y'");
		if(ynChk !== 1){
			this.gfnAlert("Main여부는 하나만 존재 해야 합니다.");
			return false;
		}
		

		var rtChk = this.dsChk.getSum("RT_POTN");
		if(rtChk != '100'){
			this.gfnAlert("지분율의 합은 0또는 100이 되어야 합니다.");
			return false;
		}
		
	}
	return true;
}

//readonly color 설정
this.gridGoloring = function(){
	this.gfnGridColumnColor(this.dxGrid, "CD_CO_CONTRACT","BACK_ReadOnly", "nx_flag==null");
	this.gfnGridColumnColor(this.dxGrid, "NM_CO_CONTRACT","BACK_ReadOnly", "nx_flag==null");
}]]></Script>
    <Objects>
      <Dataset id="dsList" onvaluechanged="dsList_onvaluechanged"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DOAPR_ARCH_CO_CONTRCT</Col>
          </Row>
          <Row>
            <Col id="TARGET">save</Col>
            <Col id="SP">DOAPR_ARCH_CO_CONTRCT_MERGE</Col>
          </Row>
          <Row>
            <Col id="TARGET">saveChk</Col>
            <Col id="SP">DOAPR_PROJ_CO_CONTRCT_CHECK</Col>
          </Row>
          <Row>
            <Col id="TARGET">selectCharge</Col>
            <Col id="SP">DOAPR_PROJ_YNCHARGE_SELECT</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_PROJ" type="STRING" size="256"/>
          <Column id="DS_PROJ" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
      <Dataset id="dsSave"/>
      <Dataset id="dsChk"/>
      <Dataset id="dsRcvYNCharge">
        <ColumnInfo>
          <ConstColumn id="YN_EXISTS" type="STRING" size="30"/>
        </ColumnInfo>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfCD_PROJ.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_PROJ"/>
      <BindItem id="item1" compid="divSearch.form.ccfCD_PROJ.form.DSTextBox" propid="value" datasetid="dsSearch" columnid="DS_PROJ"/>
    </Bind>
  </Form>
</FDL>
