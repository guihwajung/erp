<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="form" width="450" height="230" maxwidth="450" maxheight="250" titletext="출금구분및입금계좌변경" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divData" taborder="0" left="0" top="0" bottom="0" right="0" cssclass="div_DATA_Bg" text="">
          <Layouts>
            <Layout>
              <Static id="staTITLE" taborder="0" text="계좌번호변경" left="0" top="0" width="100%" height="30" cssclass="sta_TITLE_Bg" textAlign="left"/>
              <Static id="staCD_PAY" taborder="3" text="거래처" left="0" top="40" width="110" height="30" textAlign="right" cssclass="sta_WF_tablelabelE"/>
              <Static id="staBg1" taborder="6" left="109" top="40" right="0" height="30" cssclass="sta_WF_tablebg"/>
              <Static id="staNO_ACCOUNT" taborder="4" text="거래처계좌" left="0" top="98" width="110" height="30" textAlign="right" cssclass="sta_WF_tablelabelE"/>
              <Static id="staBg2" taborder="5" left="staCD_PAY:-111" top="staBg1:-1" right="0" height="30" cssclass="sta_WF_tablebg"/>
              <Combo id="cboTY_PAYMENT2" taborder="9" left="staCD_PAY:5" top="74" width="180" height="20" innerdataset="dsTY_PAYMENT2" datacolumn="DS_CODE" codecolumn="CD_CODE"/>
              <Static id="staTY_PAYMENT2" taborder="7" text="출금구분" left="0" top="69" width="110" height="30" textAlign="right" cssclass="sta_WF_tablelabel"/>
              <Static id="staBg3" taborder="8" left="staTY_PAYMENT2:-1" top="staBg2:-1" right="0" height="30" cssclass="sta_WF_tablebg"/>
              <Div id="cfNO_ACCOUNT" CodeFindName="DFX_CFACCOUNTMATCH" CDTextWidth="150" taborder="10" left="115" top="staBg2:4" width="285" height="20" url="cmm::cmmCodeFind.xfdl"/>
              <Button id="btnSave" taborder="1" text="저장" left="38.00%" top="staNO_ACCOUNT:20" width="50" height="20" onclick="divData_btnSave_onclick"/>
              <Button id="btnCancel" taborder="2" text="취소" left="50.00%" top="staNO_ACCOUNT:20" width="50" height="20" onclick="divData_btnCancel_onclick"/>
              <Edit id="edtCD_PAY" taborder="11" left="114" top="45" width="100" height="20" readonly="true"/>
              <Edit id="edtDS_PAY" taborder="12" left="221" top="45" width="199" height="20" readonly="true"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	this.fnSetCombo();
		
	// 팝업사이즈 조정
 	var nWidth = "500px";
 	var nHeight = "250px";	
 	this.getOwnerFrame().set_width(nWidth);
 	this.getOwnerFrame().set_height(nHeight);	
	
	// 이전 화면에서 데이터 받기.
 	//this.dsList.setColumn(0, "SEQ_EXEC", this.getOwnerFrame().SEQ_EXEC);
	//this.dsList.setColumn(0, "CD_CORP", this.getOwnerFrame().CD_CORP);
	//this.divData.form.cfCD_CORP.form.DSTextBox.set_value(this.getOwnerFrame().DS_CORP);
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {

}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {

};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	
	this.edtCD_PAY = this.divData.form.edtCD_PAY;
	this.edtDS_PAY = this.divData.form.edtDS_PAY;
	this.cboTY_GUBUN = this.divData.form.cboTY_GUBUN;
	this.cfNO_ACCOUNT = this.divData.form.cfNO_ACCOUNT;

	this.cdGroup = this.gfnIsNull(this.AuthClient.CD_GROUP) ? "" : this.AuthClient.CD_GROUP;			// 그룹코드
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	this.cfNO_ACCOUNT.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.cfNO_ACCOUNT.AfterCDTextChanged = "fnAfterCDTextChanged";
};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	this.dsUpdate = new Dataset();
	this.dsUpdate.addColumn("SEQ_EXEC", "string");
	this.dsUpdate.addColumn("NO_ACCOUNT", "string");
	this.dsUpdate.addColumn("TY_GUBUN", "string");
	this.dsUpdate.addColumn("CD_BANK", "string");
	this.dsUpdate.addColumn("TY_PAYMENT2", "string");
	this.dsUpdate.addColumn("ID_USER", "string");
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 
 /*
 *	입력 버튼
 */
this.fnAdd = function() {


}

 /*
 *	저장 버튼
 */
this.fnSave = function() {
	
}

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	//this.gfnGridDel(this.dxGrid);
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	//this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

this.fnSetCombo = function() {
	
	this.dsCombo = new Dataset();
	this.dsCombo.addColumn("CD_SYSTEM", "string");
	this.dsCombo.addColumn("CD_TYPE", "string");
	
	this.dsCombo.addRow();
	this.dsCombo.setColumn(0, "CD_SYSTEM", "DF");
	this.dsCombo.setColumn(0, "CD_TYPE", "B2");
	
	var strSvcId    = "combo";
	var strSvcType  = "select";
	var inProc		= "_dsProc";
	var inData      = "combo=dsCombo";
	var outData     = "dsTY_PAYMENT2=combo0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
};

/************************************************************************
 * Validate
 ************************************************************************/

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
*/
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "combo") {
		// 타화면에서 오픈시 넘어오는 파라미터 처리
		var frame = this.getOwnerFrame();	

		this.dsList.setColumn(0, "SEQ_EXEC", this.getOwnerFrame().SEQ_EXEC);
		this.dsList.setColumn(0, "CD_CORP", this.getOwnerFrame().CD_CORP);
		this.dsList.setColumn(0, "TY_CASH", this.getOwnerFrame().TY_CASH);
		this.dsList.setColumn(0, "TY_VENDOR", this.getOwnerFrame().TY_VENDOR);
		this.dsList.setColumn(0, "TY_GUBUN", this.getOwnerFrame().TY_ACCOUNT_GU);
		this.dsList.setColumn(0, "CD_PAY", this.getOwnerFrame().CD_PAY);
		this.dsList.setColumn(0, "DS_PAY", this.getOwnerFrame().DS_PAY);
		this.dsList.setColumn(0, "TY_PAYMENT2", this.getOwnerFrame().TY_PAYMENT2);
		
		// 거래처계좌
		this.dsList.setColumn(0, "NO_ACCOUNT", this.getOwnerFrame().DS_PAY_NO_ACCOUNT);	
		this.dsList.setColumn(0, "DS_BANK", this.getOwnerFrame().DS_PAY_NM_BANK);
		this.dsList.setColumn(0, "CD_BANK", this.getOwnerFrame().CD_BANK);			
	}
	if (svcID == "save") {
		if(errorCode == 0){
			// this.close()가 작동하지 않았고, 
			// 부모의 callback 함수로 데이터를 넘겨주기 위해 작성되었습니다.
			this.getParentContext().close(true);
		}else{
			this.gfnAlert(errorMsg);
		}
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	if (id == "cfNO_ACCOUNT") {
		//TY_VENDOR = 하단 GRID.현재ROW.TY_VENDOR
		//CD_PAY = TEXT.CD_PAY
		//TY_CASH = 하단 GRID.현재ROW.TY_CASH
		//CD_CORP = 하단 GRID.현재ROW.CD_CORP

		dsUserParam.setColumn(nrow, "TY_VENDOR", this.dsList.getColumn(0, "TY_VENDOR"));
		dsUserParam.setColumn(nrow, "CD_PAY", this.dsList.getColumn(0, "CD_PAY"));
		dsUserParam.setColumn(nrow, "TY_CASH", this.dsList.getColumn(0, "TY_CASH"));
		dsUserParam.setColumn(nrow, "CD_CORP", this.dsList.getColumn(0, "CD_CORP"));
	}
	return true;
}

this.fnAfterCDTextChanged = function(id, codeFindData) {
	var arr = codeFindData;

	if (id == "cfNO_ACCOUNT") {
		if(arr.length > 0) {
			this.dsList.setColumn(0, "NO_ACCOUNT", arr[0]["NO_ACCOUNT"]);		// 계좌번호
			this.dsList.setColumn(0, "CD_BANK", arr[0]["CD_BANK"]);				// 은행코드
			this.dsList.setColumn(0, "TY_GUBUN", arr[0]["TY_GUBUN"]);			// 계좌구분
			//this.dsList.setColumn(0, "CD_SIDEBANK", arr[0]["CD_MANAGEBANK"]);	// 계좌지점코드
	
			//@NO_ACCOUNT = DFX_CFACCOUNTMATCH.NO_ACCOUNT
			//@TY_GUBUN = 하단 GRID.현재ROW.TY_ACCOUNT_GU / DFX_CFACCOUNTMATCH.TY_GUBUN
			//@CD_BANK = 하단 GRID.현재ROW.CD_BANK / DFX_CFACCOUNTMATCH.CD_BANK
		}
	}
}

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
 
/************************************************************************
 * 기타 이벤트
 ************************************************************************/
 
// 저장 버튼 클릭
this.divData_btnSave_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	if(!this.fnSaveValidate()) return;

	/*	
	var json = {};
	
	json.CD_MAINBANK = this.dsList.getColumn(0, "CD_BANK");			// 은행코드
	json.NO_MAINACCOUNT = this.dsList.getColumn(0, "NO_ACCOUNT");	// 계좌번호
	json.CD_MAINSIDEBANK = this.dsList.getColumn(0, "CD_SIDEBANK");	// 계좌지점
	json.TY_GUBUN = this.dsList.getColumn(0, "TY_GUBUN");			// 계좌구분
	
	this.getParentContext().close(JSON.stringify(json));
	*/

	this.dsUpdate.clearData();
	var nrow = this.dsUpdate.addRow();
	this.dsUpdate.setColumn(nrow, "SEQ_EXEC", this.dsList.getColumn(0, "SEQ_EXEC"));
	this.dsUpdate.setColumn(nrow, "NO_ACCOUNT", this.dsList.getColumn(0, "NO_ACCOUNT"));
	this.dsUpdate.setColumn(nrow, "TY_GUBUN", this.dsList.getColumn(0, "TY_GUBUN"));
	this.dsUpdate.setColumn(nrow, "CD_BANK", this.dsList.getColumn(0, "CD_BANK"));
	this.dsUpdate.setColumn(nrow, "TY_PAYMENT2", this.dsList.getColumn(0, "TY_PAYMENT2"));
	this.dsUpdate.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);

	if (this.dsUpdate.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "update=dsUpdate";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
};

// 취소 버튼 클릭
this.divData_btnCancel_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	// this.close()가 작동하지 않았고, 
	// 부모의 callback 함수로 데이터를 넘겨주기 위해 작성되었습니다.
	this.getParentContext().close(false);
};

this.fnSaveValidate = function() {

	var strMsg = "";
	
	if(this.gfnIsNull(this.dsList.getColumn(0, "CD_PAY"))) {
		strMsg += "거래처는 반드시 입력 하셔야 합니다.\n";
	}
	//if(this.gfnIsNull(this.dsList.getColumn(0, "TY_PAYMENT2"))) {
	//	strMsg += "출금구분 코드는 반드시 입력 하셔야 합니다.\n";
	//}
	if(this.gfnIsNull(this.dsList.getColumn(0, "NO_ACCOUNT"))) {
		strMsg += "거래처 계좌는 반드시 입력 하셔야 합니다.\n";
	}
	
	if(strMsg.length > 0) {
		this.gfnAlert(strMsg);
		return false;
	}

	return true;
}]]></Script>
    <Objects>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">update</Col>
            <Col id="SP">DFBPR_EXECDTL_EDIT</Col>
          </Row>
          <Row>
            <Col id="SP">DZXPR_COMBO_SELECT</Col>
            <Col id="TARGET">combo</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsList">
        <ColumnInfo>
          <Column id="CD_PAY" type="STRING" size="256"/>
          <Column id="DS_PAY" type="STRING" size="256"/>
          <Column id="TY_GUBUN" type="STRING" size="256"/>
          <Column id="TY_VENDOR" type="STRING" size="256"/>
          <Column id="TY_CASH" type="STRING" size="256"/>
          <Column id="SEQ_EXEC" type="STRING" size="256"/>
          <Column id="CD_CORP" type="STRING" size="256"/>
          <Column id="CD_BANK" type="STRING" size="256"/>
          <Column id="TY_PAYMENT2" type="STRING" size="256"/>
          <Column id="NO_ACCOUNT" type="STRING" size="256"/>
          <Column id="DS_BANK" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
      <Dataset id="dsTY_PAYMENT2">
        <ColumnInfo>
          <Column id="CD_CODE" type="STRING" size="256"/>
          <Column id="DS_CODE" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CD_CODE">모계좌</Col>
            <Col id="DS_CODE">모계좌</Col>
          </Row>
        </Rows>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divData.form.cfNO_ACCOUNT.form.CDTextBox" propid="value" datasetid="dsList" columnid="NO_ACCOUNT"/>
      <BindItem id="item1" compid="divData.form.cfNO_ACCOUNT.form.DSTextBox" propid="value" datasetid="dsList" columnid="DS_BANK"/>
      <BindItem id="item2" compid="divData.form.edtCD_PAY" propid="value" datasetid="dsList" columnid="CD_PAY"/>
      <BindItem id="item3" compid="divData.form.edtDS_PAY" propid="value" datasetid="dsList" columnid="DS_PAY"/>
      <BindItem id="item4" compid="divData.form.cboTY_PAYMENT2" propid="value" datasetid="dsList" columnid="TY_PAYMENT2"/>
    </Bind>
  </Form>
</FDL>
