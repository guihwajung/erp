<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="전표발행" onload="form_onload">
    <Layouts>
      <Layout stepcount="0">
        <Div id="divSearch" taborder="1" left="0.0" top="10.0" height="110.0" right="0" cssclass="div_SEARCH_Bg" formscrolltype="none">
          <Layouts>
            <Layout>
              <Static id="sta01" taborder="7" text="법인코드" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfCD_CORP" CDTextWidth="70" taborder="0" left="sta01:0.0" top="10.0" width="219" height="24.0" url="cmm::cmmCodeFind.xfdl" text=""/>
              <Static id="sta03" taborder="8" text="회계일자" left="ccfCD_CORP:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Calendar id="calDT_ACCOUNT" taborder="1" left="sta03:0.0" top="10.0" width="105" height="24.0" dateformat="yyyy-MM-dd" editformat="yyyyMMdd" autoselect="true" enable="true"/>
              <Static id="sta04" taborder="9" text="발행부서" left="0.0" top="sta01:10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfACNTUNIT" CDTextWidth="70" taborder="4" left="0.0" top="sta04:10.0" width="219" height="24.0" url="cmm::cmmCodeFind.xfdl" text=""/>
              <Static id="sta05" taborder="10" text="작성일" left="ccfACNTUNIT:0.0" top="sta01:10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Static id="sta00" taborder="11" text="전표구분" left="calDT_ACCOUNT:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Combo id="ccboTY_SLIP" taborder="2" left="sta00:0.0" top="10.0" width="90" height="24.0" innerdataset="dsTY_SLIP" datacolumn="DS_CODE" codecolumn="CD_CODE" value="" index="-1" text="" enable="true" color="royalblue"/>
              <Static id="sta06" taborder="12" text="전표번호" left="ccboTY_SLIP:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Edit id="txtCD_TRADE" taborder="3" left="sta06:0.0" top="10.0" width="210" height="24.0" onkeydown="divSearch_txtSEARCH_onkeydown" color="royalblue" font="bold 12px/normal &quot;Dotum&quot;" text="20190910010000000006" readonly="true"/>
              <Edit id="txtDT_UPDATE" taborder="5" left="sta05:0.0" top="sta01:10.0" width="105" height="24.0" onkeydown="divSearch_txtSEARCH_onkeydown" readonly="true"/>
              <Static id="sta07" taborder="13" text="작성자" left="txtDT_UPDATE:0.0" top="sta01:10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Edit id="txtDS_HNAME" taborder="6" left="sta07:0.0" top="sta01:10.0" width="90" height="24.0" readonly="true"/>
              <Static id="sta02" taborder="14" text="결재상태" left="txtDS_HNAME:0.0" top="sta01:10.0" width="92.0" height="24.0" visible="false" cssclass="sta_WF_SchLabel"/>
              <Combo id="ccboCD_APP" taborder="15" left="sta02:0.0" top="sta01:10.0" width="120" height="24.0" innerdataset="dsCD_APP" datacolumn="DS_CODE" codecolumn="CD_CODE" value="" index="-1" text="" enable="false" color="royalblue" visible="false"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg" ondragmove="divData_ondragmove">
          <Layouts>
            <Layout>
              <Div id="divSplitter" taborder="1" left="0" top="64.88%" width="100.00%" height="5" cssclass="div_Splitter" cursor="ns-resize" ondrag="divData_divSplitter_ondrag"/>
              <Div id="divDataBottom" taborder="0" left="0" top="divSplitter:7" bottom="0" right="0">
                <Layouts>
                  <Layout>
                    <Static id="sta02" taborder="0" text="관리항목" left="0" top="0" right="0" height="22" cssclass="sta_TITLE_Bg"/>
                    <Div id="divTotal" taborder="2" left="0" right="0" height="32" bottom="0">
                      <Layouts>
                        <Layout>
                          <Static id="sta03" taborder="0" left="316" top="2" height="30" cssclass="sta_WF_tablebg" right="0"/>
                          <Static id="sta31" taborder="6" left="94" top="2" height="30" cssclass="sta_WF_tablebg" width="130"/>
                          <Static id="sta21" taborder="8" text="차대차액" left="0" top="2" height="30" cssclass="sta_WF_tablelabel" textDecoration="none" width="95"/>
                          <MaskEdit id="mskSUM_CRDR" taborder="7" left="sta21:5" top="7" width="115" height="20" enable="false" format="#,###"/>
                          <Static id="sta11" taborder="9" left="94" top="-18" width="94" height="30" cssclass="sta_WF_tablebg" text="" visible="false"/>
                          <Static id="sta01" taborder="11" text="전표마감일" left="1005" top="2" width="95" height="30" cssclass="sta_WF_tablelabel" textDecoration="none" visible="true"/>
                          <Static id="sta00" taborder="12" text="합계" left="mskSUM_CRDR:8" top="2" width="95" height="30" cssclass="sta_WF_tablelabel" textDecoration="none"/>
                          <Static id="sta04" taborder="13" text="차변" left="sta00:18" top="7" width="60" height="20"/>
                          <MaskEdit id="mskAM_DR" taborder="5" left="sta04:-26" top="7" width="115" height="20" limitbymask="both" readonly="true" format="#,###" background="#aacee2"/>
                          <Static id="sta05" taborder="4" text="대변" left="mskAM_DR:21" top="7" width="60" height="20"/>
                          <MaskEdit id="mskAM_CR" taborder="3" left="mskAM_DR:55" top="7" width="115" height="20" readonly="true" limitbymask="both" format="#,###" background="#fdf2dc"/>
                          <Static id="sta06" taborder="2" text="건수" left="mskAM_CR:21" top="7" width="60" height="20"/>
                          <MaskEdit id="mskCOUNT" taborder="1" left="sta06:-26" top="7" width="65" height="20" format="#,###" limitbymask="both" readonly="true" background="yellow"/>
                          <Edit id="txtDT_MAGAM" taborder="10" left="1105" top="7" width="80" height="20" maxlength="7" text="2019-09-02" enable="false" visible="true"/>
                        </Layout>
                      </Layouts>
                    </Div>
                    <Grid id="objGridSub" sub="true" taborder="1" left="0" top="sta02:5" bottom="divTotal:4" right="0"/>
                  </Layout>
                </Layouts>
              </Div>
              <Div id="divDataTop" taborder="2" left="0" top="0" bottom="divSplitter:5" right="0">
                <Layouts>
                  <Layout>
                    <Static id="sta01" taborder="1" text="전표정보" left="0" top="-5" width="100.00%" height="22" cssclass="sta_TITLE_Bg"/>
                    <Grid id="objGrid" taborder="0" left="0" top="sta01:6" bottom="3" right="0"/>
                    <Button id="btnAddRow" taborder="2" text="신규 행 추가" top="0" height="20" onclick="divData_divDataTop_btnAddRow_onclick" right="0" width="87"/>
                    <MaskEdit id="mskAddCnt" taborder="3" top="0" width="90" height="20" limitbymask="both" format="###" right="92"/>
                  </Layout>
                </Layouts>
              </Div>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.FileManager = {};

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	this.V_IUD_FLAG 	= "I";	//등록/수정/삭제 전역변수
	this.V_CD_TRADE 	= "";	//전표번호 전역변수	
	this.V_CD_AUTOSLIP 	= "";	//자동전표번호
	this.V_YN_DF 		= "";	//자금 입금내역 전표발행 전역변수
	this.V_NO_INCONFIRM = "";	//자금 입금확인번호 전역 변수
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	this.fnSetCombo();
	
	//그리드 헤더 초기화
	this.fnGridHeaderReset();
		
	//trace("@@@ 자금 파라미터 YN_DF :: "+this.getOwnerFrame().YN_DF);
	//trace("@@@ 전표번호 파라미터 CD_TRADE :: "+this.getOwnerFrame().CD_TRADE);
	
	if (this.gfnIsNull(this.getOwnerFrame().CD_TRADE)) {
		this.ccfCD_CORP.form.DSTextBox.set_value(this.AuthClient.DS_CORP); 
		this.ccfCD_CORP.form.CDTextBox.set_value(this.AuthClient.CD_CORP);	
	}	
	
// 	if (nexacro.toNumber(this.FormInfo.GR_SEARCH) > 1) {
// 		this.ccfCD_CORP.form.set_readonly(true);
// 	}
	
// 	if (nexacro.toNumber(this.FormInfo.GR_SEARCH) >= 7) {
// 		this.ccfACNTUNIT.form.set_readonly(true);
// 	}	
	
	//항번 색상 처리
	var colNO_VIEW = this.dxGrid.getBindCellIndex("body", "NO_VIEW");
	this.dxGrid.setCellProperty("body", colNO_VIEW, "background", "darkgreen");
	this.dxGrid.setCellProperty("body", colNO_VIEW, "color", "yellow");
	
	//입금내역 전표발행(자금)을 통해 들어온경우
	if(this.getOwnerFrame().YN_DF == "Y"){
	
		this.fnDFSelect();
	
		//this.fnDFSetting();	
		
	} else {
		//다른화면에서 들어왔을 경우
		if(!this.gfnIsNull(this.getOwnerFrame().CD_TRADE)) {
			this.V_IUD_FLAG = this.getOwnerFrame().IUD_FLAG;
			this.V_CD_TRADE = nexacro.replaceAll(this.gfnNvl(this.gfnAllTrim(this.getOwnerFrame().CD_TRADE)),"-","");
			
			//trace("@@@ 파라미터 V_IUD_FLAG :: "+this.V_IUD_FLAG);
			//trace("@@@ 파라미터 V_CD_TRADE :: "+this.V_CD_TRADE);
		
			this.txtCD_TRADE.set_value(this.V_CD_TRADE);
			
			this.FormBtns.Select.set_enable(true);
			
			//this.fnSelect();
			this.FormBtns.Select.click();
			
			this.gfnGridAdd(this.dxGridSub, null, false);
		}
		
		//전표구분 대체전표로 임시 처리
		this.ccboTY_SLIP.set_value("01");
		//발행일자 현재일자 셋팅
		this.calDT_ACCOUNT.set_value(this.gfnGetDate());
	}
	
	this.dsSearch.set_enableevent(false);
	this.ccfACNTUNIT.form.CDTextBox.set_value(this.AuthClient.CD_DEPT);	
	this.ccfACNTUNIT.form.DSTextBox.set_value(this.AuthClient.DS_DEPT); 
	this.dsSearch.set_enableevent(true);

	//버튼처리
	//this.fnSetButtonEnable(this.V_IUD_FLAG);
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
	// Select, Add, Del, Save, Excel, Print
	// SubSelect, SubAdd, SubDel, SuubSave, SubExcel
	this.FormBtns.Add.set_enable(true);
	this.FormBtns.Select.set_enable(false);
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btnTaxView     = this.gfnFormButtonAdd("btnTaxView"   	 , "fnTaxView");		//세금계산서 보기	
	this.btnRequestList = this.gfnFormButtonAdd("btnRequestList" , "fnRequestList");	//출금요청	
	//this.btnApprove     = this.gfnFormButtonAdd("btnApprove"     , "fnApprove");		//전표결제
	//this.btnSchApprove  = this.gfnFormButtonAdd("btnSchApprove"  , "fnSchApprove");		//결제조회
	this.btnSlipCopy    = this.gfnFormButtonAdd("btnSlipCopy"    , "fnSlipCopy");		//전표복사
	this.btnDFPopup     = this.gfnFormButtonAdd("btnDFPopup"     , "fnDFPopup");		//자금집행현황
	this.btnSlipNew     = this.gfnFormButtonAdd("btnSlipNew"     , "fnSlipNew");  		//새전표
	this.btnSlipDelete  = this.gfnFormButtonAdd("btnSlipDelete"  , "fnSlipDelete");		//전표삭제
	this.btnSlipBanje   = this.gfnFormButtonAdd("btnBanje"       , "fnSlipBanje");		//반제전표
	
	this.btnSlipDelete.set_enable(false);
	//this.btnSchApprove.set_enable(false);
	//this.btnApprove.set_enable(false);
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.ccfCD_CORP = this.divSearch.form.ccfCD_CORP;
	this.calDT_ACCOUNT = this.divSearch.form.calDT_ACCOUNT;
	this.ccboTY_SLIP = this.divSearch.form.ccboTY_SLIP;
	this.txtCD_TRADE = this.divSearch.form.txtCD_TRADE;
	this.ccfACNTUNIT = this.divSearch.form.ccfACNTUNIT;
	this.txtDT_UPDATE = this.divSearch.form.txtDT_UPDATE;
	this.txtDS_HNAME = this.divSearch.form.txtDS_HNAME;
	this.ccboCD_APP = this.divSearch.form.ccboCD_APP;
	
	this.mskAddCnt = this.divData.form.divDataTop.form.mskAddCnt;
	this.btnAddRow = this.divData.form.divDataTop.form.btnAddRow;
	
	this.txtDT_MAGAM = this.divData.form.divDataBottom.form.divTotal.form.txtDT_MAGAM;
	this.mskSUM_CRDR = this.divData.form.divDataBottom.form.divTotal.form.mskSUM_CRDR;
	this.mskAM_DR = this.divData.form.divDataBottom.form.divTotal.form.mskAM_DR;
	this.mskAM_CR = this.divData.form.divDataBottom.form.divTotal.form.mskAM_CR;
	this.mskCOUNT = this.divData.form.divDataBottom.form.divTotal.form.mskCOUNT;
	
	this.dxGrid = this.divData.form.divDataTop.form.objGrid;
	this.dxGridSub = this.divData.form.divDataBottom.form.objGridSub;
	
	this.vFileCnt = 0;
	
	this.FileManager = {};
	this.FileManager.CD_GUBUN = "DH03";
	//this.FileManager.CD_DIR = [cdDir];
	this.FileManager.IS_READONLY = false;	
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	
	this.ccfCD_CORP.CodeFindName = "DHX_CFCORP";
	this.ccfCD_CORP.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.ccfCD_CORP.AfterCDTextChanged = "fnAfterCDTextChanged";
	
 	this.ccfACNTUNIT.CodeFindName = "DHX_CFACNTUNIT2";
 	this.ccfACNTUNIT.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
		
	// 그리드 초기화
	this.gfnGridInit(this.dxGrid, this.dsList, "DH", "DHA_ISSUESLIP");
	this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforeUserDataSetParam";
	this.dxGrid.AfterCDTextChanged     = "fnGrid_AfterCDTextChanged";
	this.dxGrid.addEventHandler("onselectchanged", this.fnGrid_RowCellChanged, this);
	this.dxGrid.addEventHandler("oncelldblclick", this.fnGrid_CellDblclick, this);
	this.dxGrid.addEventHandler("onkeydown", this.fnGrid_onkeydown, this);
	
	this.dsList.addEventHandler("oncolumnchanged", this.dsList_ColumnChanged, this);
	this.dsList.addEventHandler("onrowposchanged", this.dsList_Rowposchanged, this);
	
	// BUTTON, BUTTON-IN 처리
	this.dxGrid.ExpandUp = "fnGrid_ExpandUp";
	
	this.gfnGridInit(this.dxGridSub, this.dsListSub, "DH", "DHA_ISSUESLIP1");
	this.dxGridSub.BeforeUserDataSetParam = "fnGridSub_BeforeUserDataSetParam";
	this.dxGridSub.AfterCDTextChanged     = "fnGridSub_AfterCDTextChanged";
	this.dsListSub.addEventHandler("oncolumnchanged", this.dsListSub_ColumnChanged, this);
		
	// 검색조건 변경 이벤트
	this.dsSearch.addEventHandler("onvaluechanged", this.dsSearch_Valuechanged, this);
	
	// 헤더 클릭 이벤트 삭제(소팅 막기 위해 처리)
	this.dxGrid.removeEventHandlerLookup("onheadclick", "gfnGrid_onheadclick", this);
	
	var colYN_VAT = this.dxGrid.getBindCellIndex("body", "YN_VAT");
	
	// 증빙자료 부가세 없을경우 콤보박스 비활성 처리
	//this.dxGrid.setCellProperty("body", colYN_VAT, "edittype", "expr:!dataset.parent.gfnIsNull(YN_DF) || dataset.parent.gfnIsNull(FLAG_V) || FLAG_V =='D' || !dataset.parent.fnGridReadOnly(rowidx) ? 'none':'combo'");
	this.dxGrid.setCellProperty("body", colYN_VAT, "edittype", "none");
	
	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "ISSUE_ID"), "expandshow", "expr:!dataset.parent.fnGridReadOnly(rowidx) ?'hide':'show'");		//전자세금계산서(돋보기버튼)
	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "ISSUE_ID"), "edittype", "expr:!dataset.parent.fnGridReadOnly(rowidx) ? 'none':'text'");		//전자세금계산서
	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "DT_ACCOUNT"), "edittype", "expr:!dataset.parent.fnGridReadOnly(rowidx) || !dataset.parent.gfnIsNull(ISSUE_ID) ? 'none':'date'");		//회계일자
	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "CD_ACCOUNT"), "expandshow", "expr:!dataset.parent.fnGridReadOnly(rowidx) ?'hide':'show'");	//계정코드(돋보기버튼)
	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "CD_ACCOUNT"), "edittype", "expr:!dataset.parent.fnGridReadOnly(rowidx) ? 'none':'text'");		//계정코드
	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "DS_REM"), "edittype", "expr:!dataset.parent.fnGridReadOnly(rowidx) ? 'none':'text'");			//적요
	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "AM_DR"), "edittype", "expr:!dataset.parent.fnGridReadOnly(rowidx) ? 'none':'mask'");			//차변
	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "AM_CR"), "edittype", "expr:!dataset.parent.fnGridReadOnly(rowidx) ? 'none':'mask'");			//대변
	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "CD_VENDOR"), "expandshow", "expr:!dataset.parent.fnGridReadOnly(rowidx) ?'hide':'show'");		//거래처코드(돋보기버튼)
	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "CD_VENDOR"), "edittype", "expr:!dataset.parent.fnGridReadOnly(rowidx) ? 'none':'text'");		//거래처코드
	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "CD_DEPT_BE"), "expandshow", "expr:!dataset.parent.fnGridReadOnly(rowidx) ?'hide':'show'");	//귀속부서(돋보기버튼)
	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "CD_DEPT_BE"), "edittype", "expr:!dataset.parent.fnGridReadOnly(rowidx) ? 'none':'text'");		//귀속부서
};

this.fnGridReadOnly = function (currow)
{
	// 자동전표
	if(!this.gfnIsNull(this.dsList.getColumn(currow, "CD_AUTOSLIP"))){
		return false;
	}
	// 승인전표
	if(this.dsList.getColumn(currow, "YN_APPR") == "Y"){
		return false;
	}
	// 결재상태 결재중, 결재완료
	if(this.dsList.getColumn(currow, "CD_APP") == "1" || this.dsList.getColumn(currow, "CD_APP") == "2"){
		return false;
	}
	
	// 신규가 아닐경우
	/*
	if(this.dsList.getColumn(currow, this.ucFlag) != "I"){
		if(this.dsList.getColumn(currow, "CD_ACCOUNT") == "13500" || this.dsList.getColumn(currow, "CD_ACCOUNT") == "25500"){	//선급부가세/선수부가세일경우
			var amVat = nexacro.toNumber(this.dsList.getColumn(currow, "AM_DR"),0) + nexacro.toNumber(this.dsList.getColumn(currow, "AM_CR"),0); 
			if(amVat > 0 || amVat < 0){
				return false;
			}
		}
	}
	*/
	// 전표구분이 대체전표가 아닐경우
	//trace("this.ccboTY_SLIP.value = " + this.ccboTY_SLIP.value);
	if(this.ccboTY_SLIP.value != "02"){
		if(this.dsList.getColumn(currow, "CD_ACCOUNT") == "13500" || this.dsList.getColumn(currow, "CD_ACCOUNT") == "25500"){	//선급부가세/선수부가세일경우
			var amVat = nexacro.toNumber(this.dsList.getColumn(currow, "AM_DR"),0) + nexacro.toNumber(this.dsList.getColumn(currow, "AM_CR"),0); 
			if(amVat > 0 || amVat < 0){
				return false;
			}
		}
	}

	return true;
};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_TRADE", "string");
	
	this.dsSelectSub = new Dataset();
	this.dsSelectSub.addColumn("CD_TRADE", "string");
	
	this.dsSaveDF = new Dataset();
	this.dsSaveDF.addColumn("NO_INCONFIRM", "string");
	this.dsSaveDF.addColumn("NO_SLIP"	  , "string");
	this.dsSaveDF.addColumn("ID_USER"	  , "string");
	
	this.dsSelectNewCode = new Dataset();
	this.dsSelectNewCode.addColumn("IN_PARAM", "string");
	this.dsSelectNewCode.addColumn("IN_DT_ACCOUNT", "string");
	
	
	// 등록 데이터셋
 	this.dsSave = new Dataset();
	this.dsSave.addColumn("S_FLAG", "string");	
	this.dsSave.addColumn("ISSUE_ID", "string");
	this.dsSave.addColumn("CD_TRADE", "string");	
	this.dsSave.addColumn("CUR_SLIP_NO", "string");
	this.dsSave.addColumn("NO_VIEW", "BIGDECIMAL");
	this.dsSave.addColumn("DT_ACCOUNT", "string");
	this.dsSave.addColumn("CD_DEPT_BH", "string");
	this.dsSave.addColumn("CD_DEPT_BE", "string");
	this.dsSave.addColumn("CD_ACCOUNT", "string");
	this.dsSave.addColumn("SEMOK_CD", "string");
	this.dsSave.addColumn("SEMOK_DS", "string");
	this.dsSave.addColumn("TY_CRDR", "string");
	this.dsSave.addColumn("AM_ACCOUNT", "BIGDECIMAL");
	this.dsSave.addColumn("TY_VENDOR", "string");
	this.dsSave.addColumn("DS_REM", "string");
	this.dsSave.addColumn("CD_VENDOR", "string");
	this.dsSave.addColumn("DS_VENDOR", "string");
	this.dsSave.addColumn("YN_LASTSLIP", "string");
	this.dsSave.addColumn("YN_APPR", "string");
	this.dsSave.addColumn("CD_SLIP_MI", "string");
	this.dsSave.addColumn("YN_COPY", "string");
	this.dsSave.addColumn("CD_CORP", "string");	
	this.dsSave.addColumn("YN_VAT", "string");
	this.dsSave.addColumn("FLAG_V", "string");
	this.dsSave.addColumn("CD_VATDEPT_ACNT", "string");
	this.dsSave.addColumn("TY_SALEBUY", "string");
	this.dsSave.addColumn("CD_PROOF", "string");		//증빙코드
	this.dsSave.addColumn("TY_VATBGJE", "string");		//불공제코드
	this.dsSave.addColumn("CD_VATACCOUNT", "string");
	this.dsSave.addColumn("TY_VATVENDOR", "string");
	this.dsSave.addColumn("CD_VATVENDOR", "string");
	this.dsSave.addColumn("DS_VATVENDOR", "string");
	this.dsSave.addColumn("AM_SUPPLY", "BIGDECIMAL");
	this.dsSave.addColumn("AM_VAT", "BIGDECIMAL");
	this.dsSave.addColumn("AM_SERVICE", "BIGDECIMAL");
	this.dsSave.addColumn("NO_CREDIT", "string");
	this.dsSave.addColumn("DS_VATREM", "string");
	this.dsSave.addColumn("CK_OMIT", "string");
	this.dsSave.addColumn("DT_PROOF", "string");
	this.dsSave.addColumn("TY_ISSUE", "string");
	
	this.dsSave.addColumn("TY_ETC1", "string");
	this.dsSave.addColumn("CD_ETC1", "string");
	this.dsSave.addColumn("DS_ETC1", "string");
	this.dsSave.addColumn("TY_ETC2", "string");
	this.dsSave.addColumn("CD_ETC2", "string");
	this.dsSave.addColumn("DS_ETC2", "string");
	this.dsSave.addColumn("TY_REF", "string");
	this.dsSave.addColumn("NO_REF", "string");
	this.dsSave.addColumn("DS_REF", "string");
	this.dsSave.addColumn("TY_REF2", "string");
	this.dsSave.addColumn("NO_REF2", "string");
	this.dsSave.addColumn("DS_REF2", "string");
	this.dsSave.addColumn("AM_REF1", "BIGDECIMAL");
	this.dsSave.addColumn("AM_REF2", "BIGDECIMAL");
	this.dsSave.addColumn("DT_REF1", "string");
	this.dsSave.addColumn("DT_REF2", "string");
	this.dsSave.addColumn("RT_REF1", "BIGDECIMAL");
	this.dsSave.addColumn("RT_REF2", "BIGDECIMAL");
	this.dsSave.addColumn("CD_GONGJONG", "string");
	this.dsSave.addColumn("DS_GONGJONG", "string");
	this.dsSave.addColumn("ID_INSERT", "string");
	this.dsSave.addColumn("TY_CLOSING", "string");	

	//전표삭제용 데이터셋
	this.dsSlipDelete = new Dataset();
	this.dsSlipDelete.addColumn("CD_TRADE", "string");
	
	//파일폴더명변경용 데이터셋
	this.dsRnameList = new Dataset();
	this.dsRnameList.addColumn("PATH_ORG", "string");
	this.dsRnameList.addColumn("PATH_NEW", "string");
	this.dsRnameList.addColumn("SAVE_YN", "string");
	
	this.dsFileUpdate = new Dataset();
	this.dsFileUpdate.addColumn("CD_REF1", "string");
	this.dsFileUpdate.addColumn("NEW_CD_REF1", "string");
	
	this.dsFileSave = new Dataset();	//파일삭제용 데이터셋	
	this.dsFileSave.addColumn("TY_SAVE", "string");
	this.dsFileSave.addColumn("CD_GUBUN", "string");
	this.dsFileSave.addColumn("NO_SEQ", "string");
	this.dsFileSave.addColumn("CD_REF1", "string");
	
	this.dsDeleteList = new Dataset();	//파일삭제용 데이터셋	
	this.dsDeleteList.addColumn("filepath", "string");
	this.dsDeleteList.addColumn("filename", "string");
	
	//세금계산서 조회용 데이터셋
	this.dsSelectTax = new Dataset();
	this.dsSelectTax.addColumn("ISSUE_ID"  , "string");
	this.dsSelectTax.addColumn("TY_SALEBUY", "string");
	
	this.dsSelectDtReq = new Dataset();
	this.dsSelectDtReq.addColumn("CD_TRADE", "string");
	
	this.dsReportParam = new Dataset();
	this.dsReportParam.addColumn("DS_CORP", "string");
	this.dsReportParam.addColumn("DT_ACCOUNT", "string");
	
	this.dsReportParam.addColumn("CD_TRADE", "string");
	this.dsReportParam.addColumn("DS_DEPT_BE", "string");
	this.dsReportParam.addColumn("DS_DEPT_BH", "string");  
	this.dsReportParam.addColumn("DS_USER", "string");  
	this.dsReportParam.addColumn("AM_DR_SUM", "BIGDECIMAL");
	this.dsReportParam.addColumn("AM_CR_SUM", "BIGDECIMAL");
	
	//입금내역전표발행용 데이터셋
	this.dsDFSelect = new Dataset();
	this.dsDFSelect.addColumn("CD_CORP", "string");
	this.dsDFSelect.addColumn("NO_INCONFIRM", "string");
}

/************************************************************************
* 컨트롤 이벤트
************************************************************************/
// 조회 버튼
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	this.dsSelect.setColumn(0, "CD_TRADE", this.txtCD_TRADE.value);
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

// 입력 버튼
this.fnAdd = function() {
	if(!this.fnCheckValidate()) return;

	var nRow = this.gfnGridAdd(this.dxGrid, "bottom", true);
	
	this.dsList.set_enableevent(false);
	
 	var cdCorp = this.ccfCD_CORP.form.CDTextBox.value;
 	this.dsList.setColumn(nRow, "CD_CORP"   , cdCorp);									// 법인코드 
	this.dsList.setColumn(nRow, "CD_TRADE"	, this.txtCD_TRADE.value);					// 거래번호
	this.dsList.setColumn(nRow, "DT_ACCOUNT", this.calDT_ACCOUNT.value);				// 발행일자
	this.dsList.setColumn(nRow, "AM_DR"		, "0");										// 차변금액 
	this.dsList.setColumn(nRow, "AM_CR"		, "0");										// 대변금액
	this.dsList.setColumn(nRow, "CD_ACCOUNT", "");										// 계정코드
	this.dsList.setColumn(nRow, "CD_DEPT_BH", this.ccfACNTUNIT.form.CDTextBox.value);	// 발행부서
 	this.dsList.setColumn(nRow, "TY_CLOSING", this.ccboTY_SLIP.value);					// 전표구분
 	this.dsList.setColumn(nRow, "YN_VAT"  	, "N");										// 부가세여부
	
	// 20200408 / jkcha / 2번째 줄부터 등록시 바로위의 줄의 데이터를 입력
	if (nRow > 0) {
		this.dsList.setColumn(nRow, "CD_VENDOR" , this.dsList.getColumn(nRow-1, "CD_VENDOR")); 	// 거래처코드
		this.dsList.setColumn(nRow, "DS_VENDOR" , this.dsList.getColumn(nRow-1, "DS_VENDOR"));	// 거래처명
		this.dsList.setColumn(nRow, "CD_DEPT_BE", this.dsList.getColumn(nRow-1, "CD_DEPT_BE"));	// 귀속부서
		this.dsList.setColumn(nRow, "DS_DEPT"  	, this.dsList.getColumn(nRow-1, "DS_DEPT"));	// 귀속부서명
		this.dsList.setColumn(nRow, "TY_VENDOR" , this.dsList.getColumn(nRow-1, "TY_VENDOR"));	// 거래처구분	
	}
	
	//수정일 경우 전표번호 채번
	if(this.V_IUD_FLAG == "U"){
		var cdSlip = this.fnSetCdSlip(this.txtCD_TRADE.value);
		this.dsList.setColumn(nRow, "CD_SLIP"   , cdSlip);
		this.dsList.setColumn(nRow, "FILE_DIR"  , cdSlip);
		
		this.FormBtns.Select.set_enable(true);
	} else {
		this.FormBtns.Select.set_enable(false);
	}
	
	//항번 셋팅
	this.fnNoViewSetting();

	this.dsList.set_enableevent(true);
	
	//하단 관리항목 로우 추가
	if(this.dsListSub.rowcount == 0){
		this.gfnGridAdd(this.dxGridSub, null, false);
	}
	
	this.gfnSetEnable(this.btnDFPopup, false);
	
	var colISSUE_ID = this.dxGrid.getBindCellIndex("body", "ISSUE_ID");
	this.dxGrid.setCellPos(colISSUE_ID, nRow);
	this.dxGrid.showEditor(true);
	
	return nRow;
}

// 삭제 버튼
this.fnDel = function() {
	var rPos = this.dsList.rowposition;
		
	//상단 데이터가 증빙데이터일 경우
	//if(this.gfnGetFlag(this.dsList, (rPos-1)) !="I" && this.dsList.getColumn((rPos-1), "YN_VAT") == "Y"){
	if(this.dsList.getColumn(rPos, "CD_ACCOUNT") == "13500" || this.dsList.getColumn(rPos, "CD_ACCOUNT") == "25500"){	//선급부가세/선수부가세일경우
		//if(this.dsList.getColumn((rPos-1), "YN_VAT") == "Y"){
		//this.dsList.setColumn((rPos-1), "YN_VAT", "N");
		//this.dsList.setColumn((rPos-1), "FLAG_V", "D");
		
		if (this.ccboTY_SLIP.value != "02") {	// 20201117 / jkcha / 결산전표일경우 부가세관련 계정 추가 안함.
			this.gfnAlert("부가세계정은 삭제할수 없습니다. 증빙팝업에서 삭제처리하세요.");
			return;
		}
	}
	
	this.gfnGridDel(this.dxGrid);

	if(this.dsList.rowcount == 0){
		this.dsListSub.clearData();
	}
		
 	var rCnt = this.dsList.rowcount;

 	if(rCnt > 0){
 		this.dxGrid.setCellPos(4, rCnt-1);
 	}
	
	//수정일 경우 전표번호 채번
	if(this.V_IUD_FLAG == "U"){		
		this.FormBtns.Select.set_enable(true);
	} else {
		this.FormBtns.Select.set_enable(false);
	}

	// 삭제되면서 아래의 관리 항목 변경
	this.fnEtcGridSetting(this.dsList.rowposition);
	//항번 셋팅
	this.fnNoViewSetting();
	//하단 계산
	this.fnCalcSlip();
}

// 저장 버튼
this.fnSave = function() {
	if(this.dsList.rowcount == 0) return;
	
	if (!this.gfnGridValidate(this.dxGrid)) return;
	if (!this.fnDataValidate()) return;
	
	this.dxGrid.updateToDataset();
	
	//신규 처리
	if(this.gfnIsNull(this.txtCD_TRADE.value)){
		//거래번호/전표번호 채번
		this.fnSelectNewCode();
	}else{
		this.fnSave2();
	}	
}

// 엑셀 버튼
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

// 출력 버튼
this.fnPrint = function() {
	this.dsReportParam.clearData();
	this.dsReportParam.addRow();

	this.dsReportParam.setColumn(0, "DS_CORP"		, this.dsList.getColumn(0, "DS_CORP"));
	this.dsReportParam.setColumn(0, "DT_ACCOUNT"	, nexacro.replaceAll(this.calDT_ACCOUNT.text, "-", "/"));
	this.dsReportParam.setColumn(0, "CD_TRADE"		, this.dsList.getColumn(0, "CD_TRADE"));	
	this.dsReportParam.setColumn(0, "DS_DEPT_BE"	, this.dsList.getColumn(0, "DS_DEPT_BH"));	
	this.dsReportParam.setColumn(0, "DS_DEPT_BH"	, this.dsList.getColumn(0, "DS_DEPT_BH"));	
	this.dsReportParam.setColumn(0, "DS_USER"		, this.dsList.getColumn(0, "DS_INSERT"));	
	this.dsReportParam.setColumn(0, "AM_DR_SUM"		, this.gfnNvl(this.mskAM_DR.value,0));	
	this.dsReportParam.setColumn(0, "AM_CR_SUM"		, this.gfnNvl(this.mskAM_CR.value,0));	

	var reportpath  = "/dh/dha/DHA_SLIP1.ozr";
	var inProc		= "_dsProc";
	var inParam 	= "params=dsReportParam";
	var inData   	= "select=dsList";
	
	gfnOpenReport(this, reportpath, inProc, inParam, inData);
}

// 조회 버튼
this.fnDFSelect = function() {
	
	this.V_NO_INCONFIRM = this.getOwnerFrame().NO_INCONFIRM;	// 입금확인번호(NO_INCONFIRM) : 
	
	this.dsDFSelect.clearData();
	this.dsDFSelect.addRow();
	this.dsDFSelect.setColumn(0, "CD_CORP", this.getOwnerFrame().CD_CORP);
	this.dsDFSelect.setColumn(0, "NO_INCONFIRM", this.V_NO_INCONFIRM);		// 20202020,20202012 ....
	
	var strSvcId    = "selectDF";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "selectDF=dsDFSelect";
	var outData     = "dsListDF=selectDF0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {
	var validate = true;
	if (this.gfnIsNull(this.txtCD_TRADE.value)) {
		validate = false;
		this.gfnAlert("전표번호가 없습니다.");
	}
	return validate;
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	switch(svcID) {
		case "select" :
			this.gfnGridAfterSelect(this.dxGrid);
			
			//trace("YN_APPR :: "+this.dsList.getColumn(0, "YN_APPR"));
			//trace("DT_INSERT :: "+this.dsList.getColumn(0, "DT_INSERT"));
			//trace("DS_INSERT :: "+this.dsList.getColumn(0, "DS_INSERT"));
			//trace("CD_AUTOSLIP :: "+this.dsList.getColumn(0, "CD_AUTOSLIP"));
			//trace("TY_CLOSING :: "+this.dsList.getColumn(0, "TY_CLOSING"));
			//trace("CD_APP :: "+this.dsList.getColumn(0, "CD_APP"));
			
			if(this.dsList.rowcount > 0){
				this.fnCalcSlip();
				
				this.dsSearch.set_enableevent(false);
				
				//다른화면에서 넘어 왔을경우 검색조건 셋팅
				if (!this.gfnIsNull(this.getOwnerFrame().CD_TRADE)) {
					this.ccfCD_CORP.form.CDTextBox.set_value(this.dsList.getColumn(0, "CD_CORP"));
					this.ccfCD_CORP.form.DSTextBox.set_value(this.dsList.getColumn(0, "DS_CORP")); 
					this.ccfACNTUNIT.form.CDTextBox.set_value(this.dsList.getColumn(0, "CD_DEPT_BH"));
					this.ccfACNTUNIT.form.DSTextBox.set_value(this.dsList.getColumn(0, "DS_DEPT_BH")); 
					this.calDT_ACCOUNT.set_value(this.dsList.getColumn(0, "DT_ACCOUNT_H")); 
				}
				this.dsSearch.set_enableevent(true);
				
				this.txtDT_UPDATE.set_value(this.dsList.getColumn(0, "DT_INSERT"));
				this.txtDS_HNAME.set_value(this.dsList.getColumn(0, "DS_INSERT"));
				this.ccboCD_APP.set_value(this.dsList.getColumn(0, "CD_APP"));
				
				this.ccboTY_SLIP.set_value(this.dsList.getColumn(0, "TY_CLOSING"));
				
				//자동전표 여부
				this.V_CD_AUTOSLIP = this.dsList.getColumn(0, "CD_AUTOSLIP");
				
				
				var vFlag = "";
				
				if(!this.gfnIsNull(this.V_CD_AUTOSLIP)){	//자동전표일 경우
					vFlag = "S"; //조회용
				}else{
					if(this.dsList.getColumn(0, "YN_APPR") == "Y"){	//승인 전표일경우
						vFlag = "S"; //조회용
					}else{
						//결재중/결재완료
						if(this.dsList.getColumn(0, "CD_APP") == "1" || this.dsList.getColumn(0, "CD_APP") == "2"){
							vFlag = "S"; //조회용
						}else{
							vFlag = "U"; //수정가능
						}
					}
				
				}
				//자동 전표가 아니고 승인이 안되어 있을 경우 
	// 			if(this.gfnIsNull(this.V_CD_AUTOSLIP) && this.dsList.getColumn(0, "YN_APPR") != "Y"){
	// 				vFlag = "U"; 
	// 			}else{
	// 				vFlag = "S"; 
	// 				if(this.dsList.getColumn(0, "YN_APPR") == "Y"){
	// 					vFlag = "A"; 
	// 				}
	// 			}
				
				//입금전표일 경우
				if(this.dsList.getColumn(0, "TY_CLOSING") == "03"){
					vFlag = "S"; 
				}
				
				//전역변수에 상태값 담기
				this.V_IUD_FLAG = vFlag;
				
				//trace("### 전표 사용여부 vFlag :: "+vFlag);
				
				this.fnSetButtonEnable(vFlag);
				
				//파일 조회
				this.fnFileSelect();
			}else{
				this.V_IUD_FLAG = "N";
			}
			
			// 전표결제, 결제조회 버튼 활성화 여부
			/*
			if( !this.gfnIsNull(this.dsList.getColumn(this.dsList.rowposition , "NO_DOC")) ){
				this.btnSchApprove.set_enable(true);
			} else {
				this.btnSchApprove.set_enable(false);
			}
			*/
			
			//trace("전역변수 V_IUD_FLAG >>>> "+this.V_IUD_FLAG);
			
			break;
		case "selectSub" :
			this.gfnGridAfterSelect(this.dxGridSub);	
			break;
		case "combo" :
			break;
		case "newCode" :
			if (errorCode == 0) {
				//trace("NEW_CD_TRADE :: "+this.dsNewCode.saveXML());
				
				//검색조건 전표번호 셋팅
				this.txtCD_TRADE.set_value(this.dsNewCode.getColumn(0, "CD_TRADE"));
				
				//this.dsRnameList.clearData();
				
				this.dsList.set_enableevent(false);
				for(var i = 0;i<this.dsList.rowcount;i++){
					if(this.gfnGetFlag(this.dsList, i) == "I"){	//신규 데이터만
						//전표번호 셋팅
						var cdSlip = this.fnSetCdSlip(this.dsNewCode.getColumn(0, "CD_TRADE"));
						this.dsList.setColumn(i, "CD_TRADE", this.dsNewCode.getColumn(0, "CD_TRADE"));
						this.dsList.setColumn(i, "CD_SLIP" , cdSlip);
						
						var fileDir = this.dsList.getColumn(i, "FILE_DIR");
						
						if(!this.gfnIsNull(fileDir)){
							if(fileDir.indexOf("TEMP") > -1){	//임시 업로드한 파일이 있을경우
								//trace("임시파일이다 등록!!! ");
								//trace("임시파일이다 등록 fileDir :: "+cdSlip);
								//trace("임시파일이다 등록 cdSlip :: "+cdSlip);
							
								var nRow = this.dsRnameList.addRow();
								this.dsRnameList.setColumn(nRow, "PATH_ORG", fileDir);
								this.dsRnameList.setColumn(nRow, "PATH_NEW", cdSlip);		
								this.dsRnameList.setColumn(nRow, "SAVE_YN" , "N");	
							}
						}
					}
				}
				this.dsList.set_enableevent(true);
				
				this.fnSave2();
				
				this.dsNewCode.clearData();
				
				//this.V_IUD_FLAG = "U";	//전역 플래그 수정으로 변경
				
				//this.fnSetButtonEnable(this.V_IUD_FLAG);
			} else {
				this.gfnAlert(errorMsg);
			}
			break;
		case "save" :	
			if (errorCode == 0) {
				
				if(this.V_IUD_FLAG == "N"){
					this.V_IUD_FLAG = "U";	//전역 플래그 수정으로 변경
				}
				
				this.fnSetButtonEnable(this.V_IUD_FLAG);
				
				// 파일명변경 처리
				if(this.dsRnameList.rowcount > 0) {;
					this.fnFileMove();
				}else{
					this.FormBtns.Select.click();
				}			
				
				// 자금 입금내역 전표일 경우 저장 후 프로시저 호출
				if(this.V_YN_DF == "Y"){
					this.fnDFProcCall();
				}
			} else {
				this.gfnAlert(errorMsg);
			}
			break;
		case "slipDelete" :	
			if (errorCode == 0) {
				// 전표번호 초기화
				this.txtCD_TRADE.set_value("");
				
				this.gfnSetFormStatus(this);	// 폼상태 초기화
				this.gfnGridClear(this.dxGrid);	
				this.gfnGridClear(this.dxGridSub);	
				this.FormBtns.Add.set_enable(true);
				
				//this.txtDT_MAGAM.set_value("");
				this.mskSUM_CRDR.set_value("");
				this.mskAM_DR.set_value("");
				this.mskAM_CR.set_value("");
				this.mskCOUNT.set_value("");
				
				this.V_IUD_FLAG = "I";
				
				//첨부파일 삭제
				this.fnFileDelete();

			} else {
				this.gfnAlert(errorMsg);
			}
			break;
		case "fileSelect" :	
			//trace("파일 조회 완료!!");
			break;
			
		case "selectTax" :	
			if (errorCode == 0) {
				if(this.dsTax.rowcount > 0){
					var url = this.gfnGetConfig("DH" , "TAX_URL");
					url = url+"Tax/TaxView.jsp?";
					url += "invseq="+this.dsTax.getColumn(0, "INV_SEQ");
					url += "&status="+this.dsTax.getColumn(0, "STATUS");
					url += "&burks=" +this.dsTax.getColumn(0, "BUKRS");

					window.open(url, "_blank", "width=790,height=600,menubar=no,scrollbars=no,resizable=no,status=no");
				}else{
					this.gfnAlert("세금계산서 정보가 없습니다.");
				}
			}else{
				this.gfnAlert(errorMsg);
			}
			break;
		case "selectDtReq" :	
			if (errorCode == 0) {
				
				var dtReq = "";
				if(this.dsDtReq.rowcount > 0){
					dtReq = this.dsDtReq.getColumn(0, "DT_REQ");
				}
				
				var dtAccount = this.dsList.getColumn(0, "DT_ACCOUNT");
				dtAccount = dtAccount.substr(0,4)+"-" + dtAccount.substr(4,2) + "-" + dtAccount.substr(6,2);
				
				var txtSubject = this.gfnNvl(this.dsList.getColumn(0, "DS_CORP"),"");	//법인명
				txtSubject += " / "+ (this.gfnIsNull(this.dsList.getColumn(0, "CD_AUTOSLIP")) ? "일반전표" : this.dsList.getColumn(0, "DS_AUTOSLIP"));
				txtSubject += " / "+ this.gfnNvl(this.dsList.getColumn(0, "DS_INSERT"),"");		//작성자
				txtSubject += " / "+ this.gfnNvl(this.dsList.getColumn(0, "DS_DEPT_BH"),"");	//발행부서
				txtSubject += " / "+ this.gfnNvl(dtAccount,"");	                                //회계일자
				txtSubject += " /자금 : "+ this.gfnNvl(dtReq,"");								//자금요청일
				txtSubject += " / "+ this.gfnNvl( this.dsList.getColumn(0, "DS_REM"),"");		//대표적요
				txtSubject += " / "+ nexacro.toNumber(this.dsList.getSum("AM_DR"),0);			//금액

				var url = this.gfnGetConfig("DZ" , "GW_APROVAL_URL");
				url = url+"approval/legacy/goFormLink.do?mode=DRAFT&legacyFormID=WF_FORM_ERP_SLIP";
				url += "&subject="+encodeURI(txtSubject);
				url += "&dataType=proc";
				url += "&empno="+this.AuthClient.ID_USER;
				url += "&P_DS_KEY1="+this.txtCD_TRADE.value;  // 전표번호
				url += "&P_DS_KEY2=&P_DS_KEY3=&P_DS_KEY4=&P_DS_KEY5="; 
				
				window.open(url, "_blank", "width=790,height=600,menubar=no,scrollbars=no,resizable=no,status=no");
			}else{
				this.gfnAlert(errorMsg);
			}
			break;
		case "selectDF" :	
			if (errorCode == 0) {
				this.fnDFSetting();
			} else {
				this.gfnAlert(errorMsg);
			}
			break;
	}
}

this.fnMsgCallback = function() {
	this.FormBtns.Select.click();
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnAfterCDTextChanged = function(id, codeFindData) {
	switch(id) {
		case "ccfCD_CORP":	//법인코드
			this.ccfACNTUNIT.form.fnCodeFindClear();
		break;
	}
}
 
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	if (id == "ccfCD_CORP") {
		dsUserParam.setColumn(nrow, "ID_SABUN", this.AuthClient.ID_USER);
	}
	if (id == "ccfACNTUNIT") {
		var cdCorp = this.ccfCD_CORP.form.CDTextBox.value;
		if (!this.gfnIsNull(cdCorp)) {
			dsUserParam.setColumn(nrow, "CD_DEPT_UPPER"	, "");		//상위부서
			dsUserParam.setColumn(nrow, "YN_SLIPACCEPT"	, "");				//전표발행여부
			dsUserParam.setColumn(nrow, "CD_CORP"		, cdCorp);			//법인코드
			dsUserParam.setColumn(nrow, "YN_USE"		, "Y");				//사용여부
			dsUserParam.setColumn(nrow, "GR_DEPT_ACNT"	, "");				//현장/본사여부
			dsUserParam.setColumn(nrow, "ID_USER"	    , this.AuthClient.ID_USER);
			dsUserParam.setColumn(nrow, "GR_SEARCH"	    , this.FormInfo.GR_SEARCH);
			dsUserParam.setColumn(nrow, "CD_DEPT"	    , this.AuthClient.CD_DEPT);
		} else {
			this.gfnAlert("법인코드는 필수입력 값입니다.");
			return false;
		}
	}	
	
	return true;
};

this.fnGrid_BeforeUserDataSetParam = function(id, dsUserParam, nrow) {	
	// 그리드에서 코드파인드 id는 그리드셋팅의 코드파인드 식별ID
	var cdCorp = this.dsList.getColumn(this.dsList.rowposition, "CD_CORP");
	switch(id) {
		case "DHX_CFEBILLBUY_ESERO":	//전자세금계산서
			dsUserParam.setColumn(nrow, "CD_CORP"   , cdCorp);
			dsUserParam.setColumn(nrow, "TY_SALEBUY", "I");	//매입만
		break;
		case "DHX_CFACCOUNT":	//계정코드
			dsUserParam.setColumn(nrow, "YN_SLIP", "Y");	
		break;
		case "DHX_CFALLVENDOR_CODEFIND":	//거래처코드	
			dsUserParam.setColumn(nrow, "CD_CORP" , cdCorp);			
		break;
		case "DHX_CFACNTUNIT":	//귀속부서	
			dsUserParam.setColumn(nrow, "CD_DEPT_UPPER"	, "");			//상위부서
			dsUserParam.setColumn(nrow, "YN_SLIPACCEPT"	, "Y");			//전표발행여부
			dsUserParam.setColumn(nrow, "CD_CORP"		, cdCorp);		//법인코드
			dsUserParam.setColumn(nrow, "YN_USE"		, "Y");			//사용여부
			dsUserParam.setColumn(nrow, "GR_DEPT_ACNT"	, "");			//현장/본사여부	
		break;
	}

	return true;
}

this.fnGridSub_BeforeUserDataSetParam = function(id, dsUserParam, nrow) {	
	// 그리드에서 코드파인드 id는 그리드셋팅의 코드파인드 식별ID
	var cdCorp  = this.dsList.getColumn(this.dsList.rowposition, "CD_CORP");
	var cdVendor  = this.dsList.getColumn(this.dsList.rowposition, "CD_VENDOR");
	
	switch(id) {
		case "DHX_CFETC_CODEFIND1":	//ETC1
		case "DHX_CFETC_CODEFIND2":	//ETC2
		case "DHX_CFETC_CODEFIND3":	//REF1
		case "DHX_CFETC_CODEFIND4":	//REF2
			var cfDiv = this.gfnRight(id, 1);
			if(cfDiv == "1"){
				colTyName = "TY_ETC1";
			}else if(cfDiv == "2"){
				colTyName = "TY_ETC2";
			}else if(cfDiv == "3"){
				colTyName = "TY_REF";
			}else{
				colTyName = "TY_REF2";
			}
			
			var TyVendor  = this.dsListSub.getColumn(this.dsListSub.rowposition, colTyName);
			
			if(this.gfnIsNull(cdVendor)){
				this.gfnAlert("전표정보에 거래처코드를 먼저 선택 하세요");
				return false;
			}
			
			if(this.gfnIsNull(TyVendor)){
				this.gfnAlert("구분을 선택 하세요");
				return false;
			}
			
			dsUserParam.setColumn(nrow, "TY_VENDOR"   , TyVendor);
			dsUserParam.setColumn(nrow, "CD_VENDOR"   , cdVendor);
			dsUserParam.setColumn(nrow, "CD_CORP" 	  , cdCorp);
			break;
		case "DWX_CFTREESHCOST_01":	//공종코드	
			//dsUserParam.setColumn(nrow, "CD_SITE"	, cdDeptBe);	//현장코드
			//dsUserParam.setColumn(nrow, "CD_GBIMOK"	, "");		//비목		
			break;
	}

	return true;
}

this.fnGrid_AfterCDTextChanged = function(id, codeFindData) {
	var arrData = codeFindData;
	var rowPos = this.dsList.rowposition;

	switch(id) {
		case "DHX_CFEBILLBUY_ESERO":	//전자세금계산서번호
			if (arrData.length > 0) {
				this.dsList.set_enableevent(false);
				this.dsList.setColumn(rowPos, "DT_ACCOUNT"	, nexacro.replaceAll(this.gfnNvl(arrData[0]["ISSUE_DATE"],""),"-",""));	//회계일자
				this.dsList.setColumn(rowPos, "CD_VENDOR" 	, arrData[0]["CD_VENDOR"]);		//거래처코드
				this.dsList.setColumn(rowPos, "DS_VENDOR" 	, arrData[0]["DS_VENDOR"]);		//거래처명
				this.dsList.setColumn(rowPos, "TY_VENDOR" 	, arrData[0]["TY_VENDOR"]);		//거래처구분	
				this.dsList.setColumn(rowPos, "TY_CRDR"	  	, arrData[0]["TY_CRDR"]);		//차대구분
				this.dsList.setColumn(rowPos, "TY_SALEBUY"	, arrData[0]["TY_SALEBUY"]);	//거래구분
				this.dsList.setColumn(rowPos, "AM_SUPPLY"	, arrData[0]["CHARGETOTAL"]);	//공급가액
				this.dsList.setColumn(rowPos, "AM_VAT"		, arrData[0]["TAXTOTAL"]);		//부가세
				this.dsList.setColumn(rowPos, "TY_ISSUE"	, "E");		//발행구분(전자발행)
				
				this.dsList.setColumn(rowPos, "DT_PROOF"    , nexacro.replaceAll(this.gfnNvl(arrData[0]["ISSUE_DATE"],""),"-",""));		//부가세 증빙일자
				
				//trace("TAXTOTAL :: "+arrData[0]["TAXTOTAL"]);
				
				if(arrData[0]["TY_SALEBUY"] == "I"){	//매입
					this.dsList.setColumn(rowPos, "AM_DR", arrData[0]["CHARGETOTAL"]);	//차변
					this.dsList.setColumn(rowPos, "AM_CR", "");	//대변
				}else{
					this.dsList.setColumn(rowPos, "AM_DR", "");	//차변
					this.dsList.setColumn(rowPos, "AM_CR", arrData[0]["CHARGETOTAL"]);	//대변
				}
				
				this.dsList.set_enableevent(true);
				
				var colCD_ACCOUNT = this.dxGrid.getBindCellIndex("body", "CD_ACCOUNT");
				this.dxGrid.setCellPos(colCD_ACCOUNT);
				this.dxGrid.showEditor(true);
			}
			break;
		case "DHX_CFACCOUNT":	//계정코드
			//trace("!!!!! TY_ACCOUNT :: "+arrData[0]["TY_ACCOUNT"]);
			
			// 자금에서 들어온 경우
			if(this.dsList.getColumn(rowPos, "YN_DF") == "Y"){
				//this.fnSetGridEtcData(rowPos);		// 20201106 : 자금에서 들어온 row 는 이벤트를 타지 않도록 처리되어야 함 
			} else {

				//계정코드 변경시 관리항목 컬럼 초기화
				this.dsList.set_enableevent(false);
				this.dsList.setColumn(rowPos, "CD_ETC1", "");
				this.dsList.setColumn(rowPos, "DS_ETC11", "");
				this.dsList.setColumn(rowPos, "CD_ETC2", "");
				this.dsList.setColumn(rowPos, "DS_ETC21", "");
				this.dsList.setColumn(rowPos, "NO_REF", "");
				this.dsList.setColumn(rowPos, "DS_REF", "");
				this.dsList.setColumn(rowPos, "NO_REF2", "");
				this.dsList.setColumn(rowPos, "DS_REF2", "");
				this.dsList.setColumn(rowPos, "AM_REF1", "");
				this.dsList.setColumn(rowPos, "AM_REF2", "");
				this.dsList.setColumn(rowPos, "DT_REF1", "");
				this.dsList.setColumn(rowPos, "DT_REF2", "");
				this.dsList.setColumn(rowPos, "RT_REF1", "");
				this.dsList.setColumn(rowPos, "RT_REF2", "");
				this.dsList.set_enableevent(true);
			
				// 20201102 / jkcha / 해당되는 줄 바로위의 계정코드의 관리항목 데이터 복사
				// (관리항목이 다른 위치에 있더라도 복사가 되도록 처리)
				var TYPE_1, CHECK_1, TY_1, CD_1, DS_1;
				var TYPE_2, CHECK_2, TY_2, CD_2, DS_2;			

				if (rowPos > 0) {
					for(var i = 0 ; i < this.dsMngItem.rowcount ; i++) {
						var TYPE_1 = this.dsMngItem.getColumn(i, "TYPE");		// 값 유형
						var CHECK_1 = this.dsMngItem.getColumn(i, "CHECK");		// 비교값
						var TY_1 = this.dsMngItem.getColumn(i, "TY");			// TY 값
						var CD_1 = this.dsMngItem.getColumn(i, "CD");			// CD 값
						var DS_1 = this.dsMngItem.getColumn(i, "DS");			// DS 값
						 
						for(var j = 0 ; j < this.dsMngItem.rowcount ; j++) {
							CHECK_2 = this.dsMngItem.getColumn(j, "CHECK");
							
							if (this.dsList.getColumn(rowPos, CHECK_1) == this.dsList.getColumn(rowPos - 1, CHECK_2)) {
								TYPE_2 = this.dsMngItem.getColumn(j, "TYPE");
								TY_2 = this.dsMngItem.getColumn(j, "TY");
								CD_2 = this.dsMngItem.getColumn(j, "CD");
								DS_2 = this.dsMngItem.getColumn(j, "DS");
								
								if (TYPE_2 == "TY_CD_DS") {
									this.dsList.setColumn(rowPos, CD_2 , this.dsList.getColumn(rowPos-1, CD_1));	
									this.dsList.setColumn(rowPos, DS_2 , this.dsList.getColumn(rowPos-1, DS_1));
								} else {
									this.dsList.setColumn(rowPos, CD_2 , this.dsList.getColumn(rowPos-1, CD_1));	
								}
								break;
							}
						}
					}
				}	
			}
					
			// 관리항목 그리드 셋팅
			this.fnEtcGridSetting(rowPos);
			
			var amDr = nexacro.toNumber(this.dsList.getColumn(rowPos, "AM_DR"),0);	//차변
			var amCr = nexacro.toNumber(this.dsList.getColumn(rowPos, "AM_CR"),0);	//대변

			if(amDr > 0){	// 차변에 금액이 있을경우 차대구분 차변으로 변경
				this.dsList.setColumn(rowPos, "TY_CRDR", "D");
			}
			if(amCr > 0){	// 대변에 금액이 있을경우 차대구분 대변으로 변경
				this.dsList.setColumn(rowPos, "TY_CRDR", "C");
			}
			
			if (arrData.length > 0) {
				// 부가세 계정 변경
				this.dsList.set_enableevent(false);
				this.dsList.setColumn(rowPos, "CD_VATACCOUNT", arrData[0]["CD_ACCOUNT"] +"|"+ arrData[0]["DS_ACCOUNT"]);
				this.dsList.set_enableevent(true);
			}
			
			if(this.dsList.getColumn(rowPos, "YN_VAT_ADD") != "Y"){

				var colDS_REM = this.dxGrid.getBindCellIndex("body", "DS_REM");
				//this.dsList.set_rowposition(rowPos);
				this.dxGrid.setCellPos(colDS_REM);
				this.dxGrid.showEditor(true);
			}else{
				this.dsList.set_rowposition((rowPos+1));
				
				var colCD_ACCOUNT = this.dxGrid.getBindCellIndex("body", "CD_ACCOUNT");
				this.dxGrid.setCellPos(colCD_ACCOUNT, (rowPos+1));
				this.dxGrid.showEditor(true);
			}
			
			// 전표구분을 수정할수 없도록 처리 - 결산전표일때와 아닐경우 처리가 구분됨(13500, 25500 금액수정여부)
			this.ccboTY_SLIP.set_enable(false);

			break;
		case "DHX_CFALLVENDOR_CODEFIND":	//거래처

 			var colCD_DEPT_BE = this.dxGrid.getBindCellIndex("body", "CD_DEPT_BE");

 			this.dxGrid.setCellPos(colCD_DEPT_BE, rowPos);
//			this.dxGrid.showEditor(true);
			if (arrData.length > 0) {
				//부가세 거래처 변경
				this.dsList.set_enableevent(false);
				this.dsList.setColumn(rowPos, "TY_VATVENDOR", arrData[0]["TY_VENDOR"]);
				this.dsList.setColumn(rowPos, "CD_VATVENDOR", arrData[0]["CD_VENDOR"]);
				this.dsList.setColumn(rowPos, "DS_VATVENDOR", arrData[0]["DS_VENDOR"]);
				
				var tySaleBuy = this.dsList.getColumn(rowPos, "TY_SALEBUY");
				var fAcnt = this.dsList.findRowExpr("currow == "+(rowPos+1)+" && CD_ACCOUNT == "+(tySaleBuy == "I" ? "13500" : "25500")+"'");
				if(fAcnt > -1){
					this.dsList.setColumn((rowPos+1), "TY_VENDOR" , arrData[0]["TY_VENDOR"]);
					this.dsList.setColumn((rowPos+1), "CD_VENDOR" , arrData[0]["CD_VENDOR"]);
					this.dsList.setColumn((rowPos+1), "DS_VENDOR" , arrData[0]["DS_VENDOR"]);
					
					if(this.gfnGetFlag(this.dsList, (rowPos+1)) != "I"){
						this.dsList.setColumn((rowPos+1), this.ucFlag , "U");
					}
				}
				this.dsList.set_enableevent(true);
			}

		break;
		case "DHX_CFACNTUNIT":	//귀속부서	
			if (arrData.length > 0) {
				//부가세 귀속부서 변경
				this.dsList.set_enableevent(false);
				//this.dsList.setColumn(rowPos, "CD_VATDEPT_ACNT" , arrData[0]["CD_DEPT_ACNT"] +"|"+ arrData[0]["DS_DEPT_ACNT"]);			//부가세 귀속부서
				this.dsList.setColumn(rowPos, "CD_DEPT_ACNT_BON", arrData[0]["CD_DEPT_ACNT_BON"]);	//본사귀속부서코드
				this.dsList.setColumn(rowPos, "DS_DEPT_ACNT_BON", arrData[0]["DS_DEPT_ACNT_BON"]);	//본사귀속부서명
				
				//trace("@@@@ CD_DEPT_BUY :: "+arrData[0]["CD_DEPT_BUY"]);
				//trace("@@@@ DS_DEPT_BUY :: "+arrData[0]["DS_DEPT_BUY"]);
				//trace("@@@@ CD_DEPT_ACNT_BON :: "+arrData[0]["CD_DEPT_ACNT_BON"]);
				//trace("@@@@ DS_DEPT_ACNT_BON :: "+arrData[0]["DS_DEPT_ACNT_BON"]);
				
				var tySaleBuy = this.dsList.getColumn(rowPos, "TY_SALEBUY");
				var fAcnt = this.dsList.findRowExpr("currow == "+(rowPos+1)+" && CD_ACCOUNT == "+(tySaleBuy == "I" ? "13500" : "25500")+"'");
				if(fAcnt > -1){
 					if(this.dsList.getColumn(rowPos, "TY_SALEBUY") == "I"){	//매입일경우
 						if(!this.gfnIsNull(this.dsList.getColumn(rowPos, "CD_DEPT_BUY"))){
							var cdDeptAcnt = arrData[0]["CD_DEPT_BUY"];
							var dsDeptAcnt = arrData[0]["DS_DEPT_BUY"];
						}else{
							var cdDeptAcnt = arrData[0]["CD_DEPT_ACNT"];
							var dsDeptAcnt = arrData[0]["DS_DEPT_ACNT"];
						}
						this.dsList.setColumn(rowPos, "CD_VATDEPT_ACNT", cdDeptAcnt +"|"+ dsDeptAcnt);	//부가세 발의부서
// 					}else{
// 						if(this.dsList.getColumn(rowPos, "CK_BONSA") == "Y"){
// 							var cdDeptAcnt = arrData[0]["CD_DEPT_ACNT_BON"];
// 							var dsDeptAcnt = arrData[0]["DS_DEPT_ACNT_BON"];
// 						}else{
// 							var cdDeptAcnt = arrData[0]["CD_DEPT_ACNT"];
// 							var dsDeptAcnt = arrData[0]["DS_DEPT_ACNT"];
// 						}
					}
					
					
					this.dsList.setColumn((rowPos+1), "CD_DEPT_BE" , arrData[0]["CD_DEPT_ACNT"]);	//부가세 귀속부서코드
					this.dsList.setColumn((rowPos+1), "DS_DEPT"    , arrData[0]["DS_DEPT_ACNT"]);	//부가세 귀속부서명
					
					if(this.gfnGetFlag(this.dsList, (rowPos+1)) != "I"){
						this.dsList.setColumn((rowPos+1), this.ucFlag , "U");
					}

				}				
				this.dsList.set_enableevent(true);
			}
		break;
 	}
	//trace("부가세 계정코드 :: "+this.dsList.getColumn(rowPos, "CD_VATACCOUNT"));
	//trace("부가세 거래처구분 :: "+this.dsList.getColumn(rowPos, "TY_VATVENDOR"));
	//trace("부가세 거래처코드 :: "+this.dsList.getColumn(rowPos, "CD_VATVENDOR"));
	//trace("부가세 거래처명 :: "+this.dsList.getColumn(rowPos, "DS_VATVENDOR"));
	//trace("부가세 귀속부서 :: "+this.dsList.getColumn(rowPos, "CD_VATDEPT_ACNT"));
	//trace("부가세 본사귀속부서코드 :: "+this.dsList.getColumn(rowPos, "CD_DEPT_ACNT_BON"));
	//trace("부가세 본사귀속부서명 :: "+this.dsList.getColumn(rowPos, "DS_DEPT_ACNT_BON"));
};

this.fnGridSub_AfterCDTextChanged = function(id, codeFindData) {
	var arr = codeFindData;
	var rowPos = this.dsListSub.rowposition;

	switch(id) {
		case "DHX_CFETC_CODEFIND1":	
		case "DHX_CFETC_CODEFIND2":	
		case "DHX_CFETC_CODEFIND3":	
		case "DHX_CFETC_CODEFIND4":	
			//데이터 복사 처리
			this.fnCopyData(this.dsListSub, rowPos);
		break;
 	}
};

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
this.fnGrid_RowCellChanged = function(obj:nexacro.Grid,e:nexacro.GridSelectEventInfo)
{
    if ((obj.oldrow > -1 && obj.oldrow == e.row) || (obj.oldrow == -1 && e.oldrow != e.row)) {
		//this.FormBtns.SubSelect.click();
		//관리항목 데이터 셋팅
		obj.oldrow = -1;
	}
};

//그리드 더블클릭 이벤트
this.fnGrid_CellDblclick = function(obj:nexacro.Grid,e:nexacro.GridClickEventInfo)
{
	var colName = this.gfnGridGetBindColumnNameByIndex(obj, e.cell);
		
	if(colName == "YN_VAT"){	//증빙일 경우
		this.fnCallVatPopup();
	}
};

//그리드 값변경 이벤트
this.dsList_ColumnChanged = function(obj:nexacro.NormalDataset, e:nexacro.DSColChangeEventInfo)
{
	//전자세금계산서번호
	if(e.columnid == "ISSUE_ID"){
		if(e.newvalue != e.oldvalue && this.gfnIsNull(e.newvalue)){
			//obj.setColumn(e.row, "TY_SALEBUY" , "");		// 거래구분 초기화
			obj.setColumn(e.row, "TY_ISSUE"   , "P");		// 발행구분(일반)
		}
	}

	if(e.columnid == "AM_DR" || e.columnid == "AM_CR"){	//차변 OR 대변 수정시
		var colIdAm = (e.columnid == "AM_DR" ? "AM_CR" : "AM_DR");
		var tyCrdr = (e.columnid == "AM_DR" ? "D" : "C");
		
		obj.setColumn(e.row, colIdAm     , "0");		//금액
		obj.setColumn(e.row, "TY_CRDR"  , tyCrdr);		//TY_CRDR
		obj.setColumn(e.row, "AM_SUPPLY", e.newvalue);	//부가세공급가
		
		var vatRate   = nexacro.toNumber(obj.getColumn(e.row, "VAT_RATE") ,0);	//부가세율
		if(!this.gfnIsNull(obj.getColumn(e.row, "VAT_RATE"))){

			var amVat = (vatRate == 0 ? 0 : nexacro.floor(nexacro.toNumber(e.newvalue ,0) / vatRate));
			
			obj.setColumn(e.row, "AM_VAT", amVat);	//부가세
			
			if(this.gfnGetFlag(obj, e.row) != "D"){
				var nextCdAcnt = obj.getColumn((e.row+1), "CD_ACCOUNT");
				if(nextCdAcnt == "13500"){	//선급부가세일경우

					// 20200908 : 증빙자료에서 매입, 세금계산서 불공제건은 금액을  "0" 으로 처리함
					if (obj.getColumn(e.row, "TY_SALEBUY") == "I" && obj.getColumn(e.row, "CD_PROOF") == "13") {
						amVat = 0;
					}

					obj.setColumn((e.row+1), "AM_DR"	, amVat);	//차변
					obj.setColumn((e.row+1), "AM_CR"	, "");		//대변
					
					if(this.gfnGetFlag(obj, e.row) != "I"){
						obj.setColumn((e.row+1), this.ucFlag, "U");		//상태값
					}
				}
				if(nextCdAcnt == "25500"){	//선수부가세일경우
					obj.setColumn((e.row+1), "AM_DR"	, "");		//차변
					obj.setColumn((e.row+1), "AM_CR"	, amVat);	//대변
					if(this.gfnGetFlag(obj, e.row) != "I"){
						obj.setColumn((e.row+1), this.ucFlag, "U");		//상태값
					}
				}
	// 			if(nextCdAcnt == "13500" || nextCdAcnt == "25500"){	//선급부가세/선수부가세일경우
	// 				obj.setColumn((e.row+1), e.columnid, amVat);	//부가세
	// 				obj.setColumn((e.row+1), this.ucFlag, "U");		//상태값
	// 			}
			}
		}
	
		//하단 금액 계산
		this.fnCalcSlip();
		
		if(this.fnBjDataCheck(e.row)){	
			//반제전표 코드가 없으면 반제전표 팝업 호출
			if(this.gfnIsNull(this.gfnTrim(this.dsList.getColumn(e.row, "CD_SLIP_MI")))){
				//this.dxGrid.removeEventHandler("onkeydown", this._grd_onkeydown, this);
				
				//trace("@@@ dsList_ColumnChanged!!!!!!!");
				
				var nIndex = this.dxGrid.findEventHandler("onkeydown", this.fnGrid_onkeydown, this );
				
				//trace("@@@ nIndex >>>  "+nIndex);
				if(nIndex > -1) this.dxGrid.removeEventHandler("onkeydown", this.fnGrid_onkeydown, this);
				this.btnSlipBanje.click();
			}
		}
		
		//trace("부가세 공급가 :: "+obj.getColumn(e.row, "AM_SUPPLY"));
		//trace("부가세 부가세 :: "+obj.getColumn(e.row, "AM_VAT"));
	}	
	
	//적요
	if(e.columnid == "DS_REM"){
		obj.setColumn(e.row, "DS_VATREM" , e.newvalue);		//부가세적요
		
		//trace("부가세 적요 :: "+obj.getColumn(e.row, "DS_VATREM"));
		
		var tySaleBuy = obj.getColumn(e.row, "TY_SALEBUY");
		var fAcnt = obj.findRowExpr("currow == "+(e.row+1)+" && CD_ACCOUNT == "+(tySaleBuy == "I" ? "13500" : "25500")+"'");
		if(fAcnt > -1){
			obj.setColumn((e.row+1), e.columnid , e.newvalue);
			
			if(this.gfnGetFlag(obj, (e.row+1)) != "I"){
				obj.setColumn((e.row+1), this.ucFlag , "U");
			}
		}
	}
	
	//회계일자
	if(e.columnid == "DT_ACCOUNT"){
		obj.setColumn(e.row, "DT_PROOF" , e.newvalue);		//부가세 증빙일자
		
		//trace("부가세 증빙일자 :: "+obj.getColumn(e.row, "DT_ACCOUNT"));
		
		var tySaleBuy = obj.getColumn(e.row, "TY_SALEBUY");
		var fAcnt = obj.findRowExpr("currow == "+(e.row+1)+" && CD_ACCOUNT == "+(tySaleBuy == "I" ? "13500" : "25500")+"'");
		if(fAcnt > -1){
			obj.setColumn((e.row+1), e.columnid , e.newvalue);
			if(this.gfnGetFlag(obj, (e.row+1)) != "I"){
				obj.setColumn((e.row+1), this.ucFlag , "U");
			}
		}
	}
	
	//증빙
	if(e.columnid == "YN_VAT"){
		var ynVatOrg = obj.getOrgColumn(e.row, e.columnid);
		var tySaleBuy = obj.getColumn(e.row, "TY_SALEBUY");	//거래구분
		var fAcnt = obj.findRowExpr("currow == "+(e.row+1)+" && CD_ACCOUNT == "+(tySaleBuy == "I" ? "13500" : "25500")+"'");
				
		if(e.newvalue == "N" && ynVatOrg == "Y"){
			if(fAcnt > -1){
				if(this.gfnGetFlag(obj, e.row) == "I"){
					obj.deleteRow((e.row+1));
				}else{
					this.dsList.setColumn(fAcnt, this.ucFlag, "D");
					
					this.dsList.setColumn(e.row, "YN_VAT", "N");
					this.dsList.setColumn(e.row, "FLAG_V", "D");
				}
			}
		}else{
			if(fAcnt > -1){
				if(this.gfnGetFlag(obj, e.row) != "I"){
					this.dsList.setColumn(fAcnt, this.ucFlag, obj.getOrgColumn(e.row, this.ucFlag));
					
					this.dsList.setColumn(e.row, "YN_VAT", ynVatOrg);
					this.dsList.setColumn(e.row, "FLAG_V", obj.getOrgColumn(e.row, "FLAG_V"));
				}else{
					obj.deleteRow((e.row+1));
				}
			}
		}

	}
	
	//데이터가 수정되면 전표복사 비활성
	this.btnSlipCopy.set_enable(false);
}

//관리항목 그리드 값변경 이벤트
this.dsListSub_ColumnChanged = function(obj:nexacro.NormalDataset, e:nexacro.DSColChangeEventInfo)
{
	var colId = e.columnid;
	var tyCol = colId.substring(0, 2);

	if(tyCol == "TY"){
		var tyMng = colId.substring(colId.indexOf("_")+1, colId.length);
		if(e.oldvalue != e.newvalue){
			var colCd = (tyMng.indexOf("REF") > -1 ? "NO_"+tyMng : "CD_"+tyMng);
			obj.setColumn(e.row, colCd, "");
			obj.setColumn(e.row, "DS_"+tyMng, "");
		}
	}

	this.fnCopyData(obj, e.row);
	
	//데이터가 수정되면 전표복사 비활성
	this.btnSlipCopy.set_enable(false);
}

//그리드 로우변경 이벤트
this.dsList_Rowposchanged = function(obj:nexacro.NormalDataset,e:nexacro.DSRowPosChangeEventInfo)
{
	//trace("dsList_Rowposchanged!!!");
	//trace("gfnGetFlag !!! "+this.gfnGetFlag(obj, e.newrow));

	this.fnEtcGridSetting(e.newrow);
	
	if(this.gfnGetFlag(obj, e.newrow) == "I") {
		this.gfnSetEnable(this.btnDFPopup, false);
	} else {
		//미수/미불구분이 미불(0)일경우
		if(obj.getColumn(e.newrow, "TY_ACCOUNT") == "0"){
			this.gfnSetEnable(this.btnDFPopup, true);
		}else{
			this.gfnSetEnable(this.btnDFPopup, false);
		}
	}
	
	// 전표결제, 결제조회 버튼 활성화 여부
// 	if( !this.gfnIsNull(this.dsList.getColumn(this.dsList.rowposition , "NO_DOC")) ){
// 		this.btnSchApprove.set_enable(true);
// 	} else {
// 		this.btnSchApprove.set_enable(false);
// 	}
};

/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.divData_ondragmove = function(obj:nexacro.Div,e:nexacro.DragEventInfo)
{
	if(e.userdata == "splitter") {
		this.divData.form.divSplitter.set_top(e.clienty);
		this.divData.form.resetScroll();	
	}
};

this.divData_divSplitter_ondrag = function(obj:nexacro.Div,e:nexacro.DragEventInfo)
{
	e.set_userdata("splitter");
	return true;
};

/************************************************************************
* 서브 버튼 이벤트
************************************************************************/

this.fnDataValidate = function(){
	var sExpr = this.ucFlag +" != 'D' && "+ this.ucFlag + " != 'DU'";	//삭제 데이터 제외
	var amDrSum = nexacro.toNumber(this.dsList.getCaseSum(sExpr , "AM_DR"),0);	//차변금액 합
	var amCrSum = nexacro.toNumber(this.dsList.getCaseSum(sExpr , "AM_CR"),0);	//대변금액 합
	
	var dtJigub = this.dsList.getCaseMax("!dataset.parent.gfnIsNull(CD_SLIP_MI) && TY_BOND == '채무'", "DT_JIGUB");
	
	//trace("### 최대 지급일은 ??? dtJigub :: "+dtJigub);

	//var fRow = this.dsList.findRowExpr("!dataset.parent.gfnIsNull(CD_SLIP_MI) && TY_BOND == '채무'");
	//var dtJigub = this.dsList.getColumn(fRow, "DT_JIGUB");
	
	if(amDrSum != amCrSum){
		this.gfnAlert("차대 밸런스가 맞지 않습니다.");
		return false;
	}
	
	var sMsg = " 필수입력값입니다.\n";
	var strRowMsg = "", strRowEtcMsg = "", noView = "";
	var bjAmChk = false, cdSlipMiChk = false, chkVat = false, chkDtJigub = false;
	var chkRow = -1;
	for(var i=0;i<this.dsList.rowcount;i++){
		if(!this.gfnIsNull(this.gfnTrim(this.dsList.getColumn(i, "CD_SLIP_MI")))){	//반제 전표 체크(반제전표 코드가 있을경우)
			cdSlipMiChk = true;

		}else{
			if(!this.gfnIsNull(dtJigub)){
				if(this.gfnGetDiffDate(dtJigub, this.dsList.getColumn(i, "DT_ACCOUNT")) < 0){
					chkDtJigub = true;
				}
			}
		}

		if(this.gfnGetFlag(this.dsList, i) != "D"){	//삭제 데이터가 아닌경우
			//미수미불 구분이 미불이 아닐경우 && 차대구분이 대변일 경우(원래는 차변)
			//if(nexacro.toNumber(this.dsList.getColumn(i, "TY_ACCOUNT"),0) > 0 ){
			if(!this.gfnIsNull(this.dsList.getColumn(i, "TY_ACCOUNT"))){
				var tyCrdrAcnt = this.dsList.getColumn(i, "TY_CRDR_ACNT");

				//해당 계정의 차대구분에 금액이 없을경우
				if(tyCrdrAcnt == "D" && nexacro.toNumber(this.dsList.getColumn(i , "AM_DR"),0) == 0){	//차변
					bjAmChk = true;
					chkRow = i;
				}else if(tyCrdrAcnt == "C" && nexacro.toNumber(this.dsList.getColumn(i , "AM_CR"),0) == 0){	//대변
					bjAmChk = true;	
					chkRow = i;
				}
			}
			
			//전자세금계산서 번호가 있고 증빙을 입력 안했을경우
			if(!this.gfnIsNull(this.dsList.getColumn(i, "ISSUE_ID")) && this.dsList.getColumn(i, "YN_VAT") == "N"){
				chkVat = true;
			}
			
			if(this.gfnIsNull(this.gfnTrim(this.dsList.getColumn(i, "DT_ACCOUNT")))){
				strRowMsg += (i + 1) + "행: [" + "작성일자" + "]"+sMsg;
			}
			
			if(this.gfnIsNull(this.gfnTrim(this.dsList.getColumn(i, "CD_ACCOUNT")))){
				strRowMsg += (i + 1) + "행: [" + "계정코드" + "]"+sMsg;
			}
			/* 20200529 / 불공제시 부가세금액 0원 처리를 위해 체크 제외시킴
			if(this.dsList.getColumn(i, "TY_CRDR") == "D"){
				if(nexacro.toNumber(this.dsList.getColumn(i, "AM_DR"),0) == 0){
					strRowMsg += (i + 1) + "행: [" + "차변금액" + "]"+sMsg;
				}
			}else if(this.dsList.getColumn(i, "TY_CRDR") == "C"){
				if(nexacro.toNumber(this.dsList.getColumn(i, "AM_CR"),0) == 0){
					strRowMsg += (i + 1) + "행: [" + "대변금액" + "]"+sMsg;
				}
			}
			*/
			
			if(this.gfnIsNull(this.gfnTrim(this.dsList.getColumn(i, "CD_VENDOR")))){
				strRowMsg += (i + 1) + "행: [" + "거래처" + "]"+sMsg;
			}
			
			if(this.gfnIsNull(this.gfnTrim(this.dsList.getColumn(i, "CD_DEPT_BE")))){
				strRowMsg += (i + 1) + "행: [" + "귀속부서" + "]"+sMsg;
			}
			
			noView = this.dxGrid.getCellText(i, this.dxGrid.getBindCellIndex("body", "NO_VIEW"));
			
			//*********************** 관리항목 체크 ***************************//
			if(this.dsList.getColumn(i, "CK_ETC1_MO") == "M"){	//기타1
				if(this.gfnIsNull(this.dsList.getColumn(i, "CD_ETC1"))){
					var headTxt = this.dsList.getColumn(i, "DS_ETC1");
					strRowEtcMsg += "[항번"+ noView + "-관리항목] [" + headTxt + "]"+sMsg;
				}
			}

			if(this.dsList.getColumn(i, "CK_ETC2_MO") == "M"){	//기타2
				if(this.gfnIsNull(this.dsList.getColumn(i, "CD_ETC2"))){
					var headTxt = this.dsList.getColumn(i, "DS_ETC2");
					strRowEtcMsg += "[항번"+ noView + "-관리항목] [" + headTxt + "]"+sMsg;
				}
			}
			
			if(this.dsList.getColumn(i, "CK_REFNO_MO") == "M"){	//참고번호1
				if(this.gfnIsNull(this.dsList.getColumn(i, "NO_REF"))){
					var headTxt = this.dsList.getColumn(i, "DS_REFNO");
					strRowEtcMsg += "[항번"+ noView + "-관리항목] [" + headTxt + "]"+sMsg;
				}
			}
			
			if(this.dsList.getColumn(i, "CK_REFNO2_MO") == "M"){	//참고번호2
				if(this.gfnIsNull(this.dsList.getColumn(i, "NO_REF2"))){
					var headTxt = this.dsList.getColumn(i, "DS_REFNO2");
					strRowEtcMsg += "[항번"+ noView + "-관리항목] [" + headTxt + "]"+sMsg;
				}
			}
			
			if(this.dsList.getColumn(i, "CK_REFAM1_MO") == "M"){	//참고금액1
				if(this.gfnIsNull(this.dsList.getColumn(i, "AM_REF1"))){
					var headTxt = this.dsList.getColumn(i, "DS_REFAM1");
					strRowEtcMsg += "[항번"+ noView + "-관리항목] [" + headTxt + "]"+sMsg;
				}
			}
			
			if(this.dsList.getColumn(i, "CK_REFAM2_MO") == "M"){	//참고금액2
				if(this.gfnIsNull(this.dsList.getColumn(i, "AM_REF2"))){
					var headTxt = this.dsList.getColumn(i, "DS_REFAM2");
					strRowEtcMsg += "[항번"+ noView + "-관리항목] [" + headTxt + "]"+sMsg;
				}
			}
			
			if(this.dsList.getColumn(i, "CK_REFDT1_MO") == "M"){	//참고일자1
				if(this.gfnIsNull(this.dsList.getColumn(i, "DT_REF1"))){
					var headTxt = this.dsList.getColumn(i, "DS_REFDT1");
					strRowEtcMsg += "[항번"+ noView + "-관리항목] [" + headTxt + "]"+sMsg;
				}
			}
			
			if(this.dsList.getColumn(i, "CK_REFDT2_MO") == "M"){	//참고일자2
				if(this.gfnIsNull(this.dsList.getColumn(i, "DT_REF2"))){
					var headTxt = this.dsList.getColumn(i, "DS_REFDT2");
					strRowEtcMsg += "[항번"+ noView + "-관리항목] [" + headTxt + "]"+sMsg;
				}
			}
			
			if(this.dsList.getColumn(i, "CK_REFRT1_MO") == "M"){	//참고율1
				if(this.gfnIsNull(this.dsList.getColumn(i, "RT_REF1"))){
					var headTxt = this.dsList.getColumn(i, "DS_REFRT1");
					strRowEtcMsg += "[항번"+ noView + "-관리항목] [" + headTxt + "]"+sMsg;
				}
			}
			
			if(this.dsList.getColumn(i, "CK_REFRT2_MO") == "M"){	//참고율2
				if(this.gfnIsNull(this.dsList.getColumn(i, "RT_REF2"))){
					var headTxt = this.dsList.getColumn(i, "DS_REFRT2");
					strRowEtcMsg += "[항번"+ noView + "-관리항목] [" + headTxt + "]"+sMsg;
				}
			}
			
			if(this.dsList.getColumn(i, "CK_GONGJONG_MO") == "M"){	//공종코드
				if(this.gfnIsNull(this.dsList.getColumn(i, "CD_GONGJONG1"))){
					var headTxt = "공종";
					strRowEtcMsg += "[항번"+ noView + "-관리항목] [" + headTxt + "]"+sMsg;
				}
			}
		}
	}
	
	if(cdSlipMiChk == false && bjAmChk == true){
		var cdAccount = this.dsList.getColumn(chkRow, "CD_ACCOUNT");
		var DsAccount = this.dsList.getColumn(chkRow, "DS_ACCOUNT");
	
		this.gfnAlert("계정 "+ cdAccount + "(" +DsAccount + ")" +  " 반제전표가 입력되지 않았습니다.\n반제전표를 등록하세요.");
		return false;
	}
	
	//반제전표가 있고 채무 데이터일 경우 지급일자 체크
	if(cdSlipMiChk == true && chkDtJigub == true){
		this.gfnAlert("지급일["+dtJigub+"]"+" 회계일자는 지급일자와 같거나 커야합니다.");
		return false;
	}
	
	if(chkVat){
		this.gfnAlert("증빙자료가 입력되지 않았습니다.\n증방자료를 등록하세요.");
		return false;
	}
	
	if(!this.gfnIsNull(strRowMsg)){
		this.gfnAlert(strRowMsg);
		return false;
	}
	
	if(!this.gfnIsNull(strRowEtcMsg)){
		this.gfnAlert(strRowEtcMsg);
		return false;
	}

	return true;
}

//관리항목 그리드 셋팅
this.fnEtcGridSetting = function (row)
{
	var objGrid = this.dxGridSub;
	
	//그리드 헤더 초기화
	this.fnGridHeaderReset();
	
	objGrid.set_enableredraw(false);
	this.dsListSub.set_enableevent(false);

	var arrType  = ["ETC1", "ETC2", "REFNO", "REFNO2", "REFAM1", "REFAM2", "REFDT1", "REFDT2", "REFRT1", "REFRT2", "GONGJONG"];
	var arrType2 = ["ETC1", "ETC2", "REF"  , "REF2"  , "REF1"  , "REF2"  , "REF1"  , "REF2"  , "REF1"  , "REF2"  , "GONGJONG"];
	
	var topIdx = 2; 
	var ckMoNm = "", tyNm = "", cdNm= "", dsNm = "";
	for(var i = 0 ; i < arrType.length ; i++){
		ckMoNm = "CK_" + arrType[i] + "_MO";
		tyNm   = "TY_" + arrType2[i];
		cdNm   = (arrType[i].indexOf("REFNO") > -1 ?  "NO_" : "CD_") + arrType2[i];
		dsNm   = "DS_" + arrType2[i];

		if(!this.gfnIsNull(this.gfnTrim(this.dsList.getColumn(row, ckMoNm)))){	//값이 있을경우
			var textLine = "none";
			var headerText = this.dsList.getColumn(row, "DS_"+arrType[i]);
			/*
			if(this.dsList.getColumn(row, ckMoNm) == "M"){	//필수일 경우
				textLine = "underline";
			}
			*/
			var sType = "", subColIdx = 0;
			switch(arrType[i]) {
				case "REFAM1" : 
					sType = "AM";
					headerText = "참고금액1";
					subColIdx = 25;
					break;
				case "REFAM2" : 
					sType = "AM";
					headerText = "참고금액2";
					subColIdx = 26;
					break;
				case "REFDT1":
					sType = "DT";
					headerText = "참고일1";
					subColIdx = 27;
					break;
				case "REFDT2":
					sType = "DT";
					headerText = "참고일2";
					subColIdx = 28;
					break;
				case "REFRT1":
					sType = "RT";
					headerText = "참고율1";
					subColIdx = 29;
					break;
				case "REFRT2":
					sType = "RT";
					headerText = "참고율2";
					subColIdx = 30;
					break;
				case "GONGJONG":
					sType = "DS";
					headerText = "공종";
					subColIdx = 31;
					break;
			}

			// 헤더 상단에 필수값일경우 필(필수)/선(선택)을 추가
			headerText = headerText + (this.dsList.getColumn(row, ckMoNm) == "M" ? " (필)" : " (선)");
		
			//헤더 상단 설정
			objGrid.setCellProperty("head", this.gfnGetHeadCellIndex(objGrid, cdNm), "textDecoration", textLine);
			objGrid.setCellProperty("head", topIdx, "text", headerText);
			
			//헤더 텍스트 값이 있을경우 서브 헤더 텍스트 셋팅
			if(!this.gfnIsNull(sType)){
				var subText = this.dsList.getColumn(row, "DS_"+arrType[i]);
				objGrid.setCellProperty("head", subColIdx, "text", subText);
				objGrid.setCellProperty("head", subColIdx, "textDecoration", textLine);
				
				//공종일 경우
				if(sType == "DS"){
					objGrid.setCellProperty("head", subColIdx, "text", "공종코드");
					objGrid.setCellProperty("head", (subColIdx)+1, "text", "공종명");
				}
			}
			
			//기타/참고번호 서브헤더 텍스트 셋팅
			if(arrType[i].indexOf("ETC") > -1 || arrType[i].indexOf("REFNO") > -1){
				objGrid.setCellProperty("head", this.gfnGetHeadCellIndex(objGrid, tyNm), "text", "구분");
				objGrid.setCellProperty("head", this.gfnGetHeadCellIndex(objGrid, cdNm), "text", "코드");
				objGrid.setCellProperty("head", this.gfnGetHeadCellIndex(objGrid, dsNm), "text", "명칭");
			}
			
			//사이즈 조정
			if(arrType[i].indexOf("ETC") > -1 || arrType[i].indexOf("REFNO") > -1){
				objGrid.setFormatColProperty(objGrid.getBindCellIndex("body", tyNm), "size", 90);	//구분
				objGrid.setFormatColProperty(objGrid.getBindCellIndex("body", cdNm), "size", 100);	//코드
				objGrid.setFormatColProperty(objGrid.getBindCellIndex("body", dsNm), "size", 110);	//명칭
			}else if(arrType[i].indexOf("GONGJONG") > -1){
				objGrid.setFormatColProperty(objGrid.getBindCellIndex("body", "CD_"+arrType[i]), "size", 90);
				objGrid.setFormatColProperty(objGrid.getBindCellIndex("body", "DS_"+arrType[i]), "size", 100);
			}else{
				objGrid.setFormatColProperty(objGrid.getBindCellIndex("body", sType +"_"+ arrType2[i]), "size", 100);
			}
			
		}
		topIdx++;
		
		if(this.dsList.rowcount > 0){
			this.dsListSub.setColumn(0, "TY_ETC1", this.dsList.getColumn(row, "TY_ETC1"));
			this.dsListSub.setColumn(0, "CD_ETC1", this.dsList.getColumn(row, "CD_ETC1"));
			this.dsListSub.setColumn(0, "DS_ETC1", this.dsList.getColumn(row, "DS_ETC11"));
			
			this.dsListSub.setColumn(0, "TY_ETC2", this.dsList.getColumn(row, "TY_ETC2"));
			this.dsListSub.setColumn(0, "CD_ETC2", this.dsList.getColumn(row, "CD_ETC2"));
			this.dsListSub.setColumn(0, "DS_ETC2", this.dsList.getColumn(row, "DS_ETC21"));

			this.dsListSub.setColumn(0, "TY_REF", this.dsList.getColumn(row, "TY_REF"));
			this.dsListSub.setColumn(0, "NO_REF", this.dsList.getColumn(row, "NO_REF"));
			this.dsListSub.setColumn(0, "DS_REF", this.dsList.getColumn(row, "DS_REF"));

			this.dsListSub.setColumn(0, "TY_REF2", this.dsList.getColumn(row, "TY_REF2"));
			this.dsListSub.setColumn(0, "NO_REF2", this.dsList.getColumn(row, "NO_REF2"));
			this.dsListSub.setColumn(0, "DS_REF2", this.dsList.getColumn(row, "DS_REF2"));
			
			this.dsListSub.setColumn(0, "AM_REF1", this.dsList.getColumn(row, "AM_REF1"));
			this.dsListSub.setColumn(0, "AM_REF2", this.dsList.getColumn(row, "AM_REF2"));
			this.dsListSub.setColumn(0, "DT_REF1", this.dsList.getColumn(row, "DT_REF1"));
			this.dsListSub.setColumn(0, "DT_REF2", this.dsList.getColumn(row, "DT_REF2"));
			this.dsListSub.setColumn(0, "RT_REF1", this.dsList.getColumn(row, "RT_REF1"));
			this.dsListSub.setColumn(0, "RT_REF2", this.dsList.getColumn(row, "RT_REF2"));
			
			this.dsListSub.setColumn(0, "CD_GONGJONG", this.dsList.getColumn(row, "CD_GONGJONG2"));
			this.dsListSub.setColumn(0, "DS_GONGJONG", this.dsList.getColumn(row, "DS_GONGJONG2"));
		}
	
		// trace("--------- END -----------");
	}
	
	this.dsListSub.set_enableevent(true);
	objGrid.set_enableredraw(true);
};

//그리드 헤더 초기화
this.fnGridHeaderReset = function ()
{
	var cellCnt = this.dxGridSub.getCellCount("head");
	
	this.dxGridSub.set_enableredraw(false);
	for(var i=0;i<cellCnt;i++){
		if(i > 1){
			this.dxGridSub.setCellProperty("head", i, "textDecoration", "none");
			this.dxGridSub.setCellProperty("head", i, "text", "");
			this.dxGridSub.setFormatColProperty(i, "size", 0);
		}
	}
	this.dxGridSub.set_enableredraw(true);
};


//콤보박스 코드 조회
this.fnSetCombo = function() {
	
	this.dsCombo = new Dataset();
	this.dsCombo.addColumn("CD_SYSTEM", "string");
	this.dsCombo.addColumn("CD_TYPE", "string");	
	
	this.dsCombo2 = new Dataset();
	this.dsCombo2.addColumn("CD_SYSTEM", "string");
	this.dsCombo2.addColumn("CD_TYPE", "string");
	
	this.dsCombo.addRow();
	this.dsCombo.setColumn(0, "CD_SYSTEM", "DH");
	this.dsCombo.setColumn(0, "CD_TYPE",  "A09");
	
	this.dsCombo2.addRow();
	this.dsCombo2.setColumn(0, "CD_SYSTEM", "DZ");
	this.dsCombo2.setColumn(0, "CD_TYPE",  "ZG");
	
	var strSvcId    = "combo";
	var strSvcType  = "select";
	var inProc		= "_dsProc";
	var inData      = "combo=dsCombo combo2=dsCombo2";
	var outData     = "dsTY_SLIP=combo0 dsCD_APP=combo20";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
};

//검색조건 변경 이벤트
this.dsSearch_Valuechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{	
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
		this.gfnGridClear(this.dxGridSub);	
		this.FormBtns.Add.set_enable(true);
		
		this.fnCalcSlip();
	}
};

//하단 금액 계산
this.fnCalcSlip = function ()
{	
	var sExpr = this.ucFlag +" != 'D' && "+ this.ucFlag + " != 'DU'";	//삭제 데이터 제외

	//삭제로우를 제외한 합계
	var amDrSum = nexacro.toNumber(this.dsList.getCaseSum(sExpr, "AM_DR"), 0);
	var amCrSum = nexacro.toNumber(this.dsList.getCaseSum(sExpr, "AM_CR"), 0);
	var totCnt = nexacro.toNumber(this.dsList.getCaseCount(sExpr), 0);
	
	this.mskAM_DR.set_value(amDrSum);				//차변합
	this.mskAM_CR.set_value(amCrSum);				//대변합
	this.mskSUM_CRDR.set_value(Math.abs(amDrSum-amCrSum));	//차액
	this.mskCOUNT.set_value(totCnt);				//건수
};

//새전표
this.fnSlipNew = function (obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	if(!this.fnCheckValidate()) return;
	
	this.V_IUD_FLAG = "I";
	
	//폼 클리어
	this.fnClearForm();

	// 전표구분을 수정할수 있도록 처리 - 결산전표일때와 아닐경우 처리가 구분됨(13500, 25500 금액수정여부)
	this.ccboTY_SLIP.set_enable(true);

	this.fnAdd();

}

//폼 클리어 
this.fnClearForm = function ()
{
	
	//전표번호 초기화
	this.txtCD_TRADE.set_value("");
	
	this.gfnSetFormStatus(this);	// 폼상태 초기화
	this.gfnGridClear(this.dxGrid);	
	this.gfnGridClear(this.dxGridSub);
	
	//this.txtDT_MAGAM.set_value("");
	this.mskSUM_CRDR.set_value("");
	this.mskAM_DR.set_value("");
	this.mskAM_CR.set_value("");
	this.ccboCD_APP.set_value("");
	this.txtDS_HNAME.set_value("");
	this.txtDT_UPDATE.set_value("");
	this.mskCOUNT.set_value(this.dsList.rowcount);
	
	this.btnSlipDelete.set_enable(false);
	this.btnRequestList.set_enable(false);
	//this.btnSchApprove.set_enable(false);
	//this.btnApprove.set_enable(false);
	this.btnSlipCopy.set_enable(false);
	
	this.dxGrid.info = "N";
	this.dxGridSub.info = "N";
	
	this.FormBtns.Add.set_enable(true);
	this.FormBtns.Select.set_enable(false);
};

//항번 채번
this.fnNoViewSetting = function ()
{
	
	var noView = 1;
	//this.dsList.set_enableevent(false);
	for(var i = 0;i<this.dsList.rowcount;i++){
		//삭제가 아닌 데이터만 
		if(this.gfnGetFlag(this.dsList, i) != "D"){	
			this.dsList.setColumn(i, "NO_VIEW", noView);
			noView++;
		}
		
	}
	//this.dsList.set_enableevent(true);
};

//전표번호 셋팅
this.fnSetCdSlip = function (cdTrade)
{
	var nextCdSlip = "";
	var cdSlip = 0;

 	var maxCdSlip = 0;
 	for(var i = 0;i<this.dsList.rowcount;i++){
		if(!this.gfnIsNull(this.dsList.getColumn(i, "CD_SLIP"))){
			cdSlip = nexacro.toNumber(this.gfnRight(this.dsList.getColumn(i, "CD_SLIP"), 5),0);
			
			if (maxCdSlip < cdSlip){
				maxCdSlip = cdSlip;
			}
		}
 	}
	maxCdSlip += 1;
	
	nextCdSlip = cdTrade + (maxCdSlip.toString()).padLeft(5, "0");
	
	return nextCdSlip;
};

//전표번호 채번
this.fnSelectNewCode = function ()
{
	this.dsSelectNewCode.clearData();
	this.dsSelectNewCode.addRow();
	
	this.dsSelectNewCode.setColumn(0, "IN_PARAM"     , this.ccfACNTUNIT.form.CDTextBox.value);
	this.dsSelectNewCode.setColumn(0, "IN_DT_ACCOUNT", this.calDT_ACCOUNT.value);
	
	var strSvcId    = "newCode";
	var strSvcType  = "select";
	var inProc		= "_dsProc";
	var inData      = "selectNewCode=dsSelectNewCode";
	var outData     = "dsNewCode=selectNewCode0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
};

this.fnSave2 = function ()
{	

	this.dsSave.clearData();
	
	//마지막 전표 항번	
	//var lastCdSlip = this.dsList.getCaseMax(this.ucFlag+" != ''", "CD_SLIP");
	//var lastNoView = this.dsList.getCaseMax(this.ucFlag+" != ''", "NO_VIEW");	
	var lastRow = this.fnLastRow();	//마지막 등록 수정 삭제 로우
	
	//trace("### lastRow :: "+lastRow);
	
	var cdSlip = "", curSlipNo = "", noView = 0;

	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		
		switch(flag) {
			case "I":
			case "U":
			case "D":
				cdSlip = this.dsList.getColumn(i, "CD_SLIP");
				noView = this.dsList.getColumn(i, "NO_VIEW");
				if(!this.gfnIsNull(cdSlip)){
					curSlipNo = cdSlip.substring(cdSlip.length - 5, cdSlip.length);
				}

				var nrow = this.dsSave.addRow();
				this.dsSave.setColumn(nrow, "S_FLAG"		, flag);													//플래그				
				this.dsSave.setColumn(nrow, "ISSUE_ID"		, this.dsList.getColumn(i, "ISSUE_ID"));					//전자세금계산서번호
				this.dsSave.setColumn(nrow, "CD_TRADE"		, this.dsList.getColumn(i, "CD_TRADE"));					//거래번호
				this.dsSave.setColumn(nrow, "CUR_SLIP_NO"	, curSlipNo);												//전표번호
				this.dsSave.setColumn(nrow, "NO_VIEW"		, this.dsList.getColumn(i, "NO_VIEW"));						//전표보이는순번			
				this.dsSave.setColumn(nrow, "DT_ACCOUNT"	, this.dsList.getColumn(i, "DT_ACCOUNT"));					//회계일자
				this.dsSave.setColumn(nrow, "CD_DEPT_BH"	, this.gfnNvl(this.dsList.getColumn(i, "CD_DEPT_BH"),""));	//발행부서
				this.dsSave.setColumn(nrow, "CD_DEPT_BE"	, this.dsList.getColumn(i, "CD_DEPT_BE"));					//발의부서(회계부서)
				this.dsSave.setColumn(nrow, "CD_ACCOUNT"	, this.dsList.getColumn(i, "CD_ACCOUNT"));					//계정코드	
				this.dsSave.setColumn(nrow, "SEMOK_CD"		, this.gfnNvl(this.dsList.getColumn(i, "SEMOK_CD"),""));	//세목코드
				this.dsSave.setColumn(nrow, "SEMOK_DS"		, this.gfnNvl(this.dsList.getColumn(i, "SEMOK_DS"),""));	//세목명
				this.dsSave.setColumn(nrow, "TY_CRDR"		, this.dsList.getColumn(i, "TY_CRDR"));						//차대구분
				
				var amAccount = 0;
				if(this.dsList.getColumn(i, "TY_CRDR") == "D"){
					amAccount = nexacro.toNumber(this.dsList.getColumn(i, "AM_DR"));
				}else{
					amAccount = nexacro.toNumber(this.dsList.getColumn(i, "AM_CR"));
				}
				
				//trace("### 저장시 금액 TY_CRDR :: "+this.dsList.getColumn(i, "TY_CRDR"));
				//trace("### 저장시 금액 amAccount :: "+amAccount);
				
				this.dsSave.setColumn(nrow, "AM_ACCOUNT"	, amAccount);								//회계금액
				this.dsSave.setColumn(nrow, "DS_REM"		, this.dsList.getColumn(i, "DS_REM"));		//적요
				this.dsSave.setColumn(nrow, "TY_VENDOR"		, this.dsList.getColumn(i, "TY_VENDOR"));	//거래처종류
				this.dsSave.setColumn(nrow, "CD_VENDOR"		, this.dsList.getColumn(i, "CD_VENDOR"));	//거래처코드
				this.dsSave.setColumn(nrow, "DS_VENDOR"		, this.dsList.getColumn(i, "DS_VENDOR"));	//거래처명
				
				this.dsSave.setColumn(nrow, "YN_LASTSLIP"	, (i == lastRow ? "Y" : "" ));		//마지막전표여부
				
				var yn_appr = "";
				if(flag == "I"){
					yn_appr = "N";
				}else{
					yn_appr = this.dsList.getColumn(i, "YN_APPR");
				}
				this.dsSave.setColumn(nrow, "YN_APPR", yn_appr);	//승인여부
				this.dsSave.setColumn(nrow, "CD_SLIP_MI", this.gfnNvl(this.dsList.getColumn(i, "CD_SLIP_MI"),""));	
				this.dsSave.setColumn(nrow, "YN_COPY", this.gfnNvl(this.dsList.getColumn(i, "YN_COPY"),""));	//전표복사여부
				this.dsSave.setColumn(nrow, "CD_CORP", this.dsList.getColumn(i, "CD_CORP"));	//법인코드
				
				//부가세항목
				this.dsSave.setColumn(nrow, "YN_VAT", this.gfnNvl(this.dsList.getColumn(i, "YN_VAT"),""));						//부가여부
				this.dsSave.setColumn(nrow, "FLAG_V", this.gfnNvl(this.dsList.getColumn(i, "FLAG_V"),""));						//부가세플래그(입력-I, 수정-U, 삭제 D)
				this.dsSave.setColumn(nrow, "CD_VATDEPT_ACNT", this.gfnNvl(this.dsList.getColumn(i, "CD_VATDEPT_ACNT"),""));	//부가세발의부서
				this.dsSave.setColumn(nrow, "TY_SALEBUY", this.gfnNvl(this.dsList.getColumn(i, "TY_SALEBUY"),""));				//거래구분/매입/매출
				this.dsSave.setColumn(nrow, "CD_PROOF", this.gfnNvl(this.dsList.getColumn(i, "CD_PROOF"),""));					//증빙코드
				this.dsSave.setColumn(nrow, "TY_VATBGJE", this.gfnNvl(this.dsList.getColumn(i, "TY_VATBGJE"),""));				//불공제코드
				this.dsSave.setColumn(nrow, "CD_VATACCOUNT", this.gfnNvl(this.dsList.getColumn(i, "CD_VATACCOUNT"),""));		//부가세계정
				this.dsSave.setColumn(nrow, "TY_VATVENDOR", this.gfnNvl(this.dsList.getColumn(i, "TY_VATVENDOR"),""));			//부가세거래처구분
				this.dsSave.setColumn(nrow, "CD_VATVENDOR", this.gfnNvl(this.dsList.getColumn(i, "CD_VATVENDOR"),""));			//부가세거래처코드
				this.dsSave.setColumn(nrow, "DS_VATVENDOR", this.gfnNvl(this.dsList.getColumn(i, "DS_VATVENDOR"),""));			//부가세거래처명칭
				this.dsSave.setColumn(nrow, "AM_SUPPLY", this.gfnNvl(this.dsList.getColumn(i, "AM_SUPPLY"),""));				//공급가
				this.dsSave.setColumn(nrow, "AM_VAT", this.gfnNvl(this.dsList.getColumn(i, "AM_VAT"),""));						//부가세
				this.dsSave.setColumn(nrow, "AM_SERVICE", this.gfnNvl(this.dsList.getColumn(i, "AM_SERVICE"),""));				//봉사료
				this.dsSave.setColumn(nrow, "NO_CREDIT", nexacro.replaceAll(this.gfnNvl(this.dsList.getColumn(i, "NO_CREDIT"),""),"-",""));		//신용카드번호
				this.dsSave.setColumn(nrow, "DS_VATREM", this.gfnNvl(this.dsList.getColumn(i, "DS_VATREM"),""));				//부가세 적요
				this.dsSave.setColumn(nrow, "CK_OMIT", this.gfnNvl(this.dsList.getColumn(i, "CK_OMIT"),""));					//누락여부(부가세)

				this.dsSave.setColumn(nrow, "DT_PROOF", this.gfnNvl(this.dsList.getColumn(i, "DT_PROOF"),""));					//부가세증빙일자
				this.dsSave.setColumn(nrow, "TY_ISSUE", this.gfnNvl(this.dsList.getColumn(i, "TY_ISSUE"),""));					//세금계산서발행구분
				
				//관리항목
				this.dsSave.setColumn(nrow, "TY_ETC1", this.gfnNvl(this.dsList.getColumn(i, "TY_ETC1"),""));	//기타1종류
				this.dsSave.setColumn(nrow, "CD_ETC1", this.gfnNvl(this.dsList.getColumn(i, "CD_ETC1"),""));	//기타1코드
				this.dsSave.setColumn(nrow, "DS_ETC1", this.gfnNvl(this.dsList.getColumn(i, "DS_ETC11"),""));	//기타1명칭
				this.dsSave.setColumn(nrow, "TY_ETC2", this.gfnNvl(this.dsList.getColumn(i, "TY_ETC2"),""));	//기타2종류
				this.dsSave.setColumn(nrow, "CD_ETC2", this.gfnNvl(this.dsList.getColumn(i, "CD_ETC2"),""));	//기타2코드
				this.dsSave.setColumn(nrow, "DS_ETC2", this.gfnNvl(this.dsList.getColumn(i, "DS_ETC21"),""));	//기타2명칭
				this.dsSave.setColumn(nrow, "TY_REF", this.gfnNvl(this.dsList.getColumn(i, "TY_REF"),""));		//참고번호1종류
				this.dsSave.setColumn(nrow, "NO_REF", this.gfnNvl(this.dsList.getColumn(i, "NO_REF"),""));		//참고번호1
				this.dsSave.setColumn(nrow, "DS_REF", this.gfnNvl(this.dsList.getColumn(i, "DS_REF"),""));		//참고번호1명칭
				this.dsSave.setColumn(nrow, "TY_REF2", this.gfnNvl(this.dsList.getColumn(i, "TY_REF2"),""));	//참고번호2종류
				this.dsSave.setColumn(nrow, "NO_REF2", this.gfnNvl(this.dsList.getColumn(i, "NO_REF2"),""));	//참고번호2
				this.dsSave.setColumn(nrow, "DS_REF2", this.gfnNvl(this.dsList.getColumn(i, "DS_REF2"),""));	//참고번호2명칭
				this.dsSave.setColumn(nrow, "AM_REF1", this.gfnNvl(this.dsList.getColumn(i, "AM_REF1"),""));	//참고금액1
				this.dsSave.setColumn(nrow, "AM_REF2", this.gfnNvl(this.dsList.getColumn(i, "AM_REF2"),""));	//참고금액2
				this.dsSave.setColumn(nrow, "DT_REF1", this.gfnNvl(this.dsList.getColumn(i, "DT_REF1"),""));	//참고일자1
				this.dsSave.setColumn(nrow, "DT_REF2", this.gfnNvl(this.dsList.getColumn(i, "DT_REF2"),""));	//참고일자2
				this.dsSave.setColumn(nrow, "RT_REF1", this.gfnNvl(this.dsList.getColumn(i, "RT_REF1"),""));	//참고율1
				this.dsSave.setColumn(nrow, "RT_REF2", this.gfnNvl(this.dsList.getColumn(i, "RT_REF2"),""));	//참고율2
				this.dsSave.setColumn(nrow, "CD_GONGJONG", this.gfnNvl(this.dsList.getColumn(i, "CD_GONGJONG"),""));	//공종코드
				this.dsSave.setColumn(nrow, "DS_GONGJONG", this.gfnNvl(this.dsList.getColumn(i, "DS_GONGJONG"),""));	//공종명칭
				this.dsSave.setColumn(nrow, "ID_INSERT", this.AuthClient.ID_USER);	//입력자사번
				
				this.dsSave.setColumn(nrow, "TY_CLOSING", this.gfnNvl(this.dsList.getColumn(i, "TY_CLOSING"),""));	//전표구분

				break;
		}
	}
	
	if (this.dsSave.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "insert=dsSave";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
						
};

this.fnLastRow = function ()
{
	var lastRow = -1;
	for (var i = this.dsList.rowcount - 1; i >= 0; i--){
		if(!this.gfnIsNull(this.dsList.getColumn(i , this.ucFlag))){
			lastRow = i;
			break;
		}
	}
	return lastRow;
};

this.fnCopyData = function (objDs, row)
{
	var mappingCol = "TY_ETC1=TY_ETC1,CD_ETC1=CD_ETC1,DS_ETC11=DS_ETC1,"
	    mappingCol+= "TY_ETC2=TY_ETC2,CD_ETC2=CD_ETC2,DS_ETC21=DS_ETC2,"
		mappingCol+= "TY_REF=TY_REF,NO_REF=NO_REF,DS_REF=DS_REF,"
		mappingCol+= "TY_REF2=TY_REF2,NO_REF2=NO_REF2,DS_REF2=DS_REF2,"
		mappingCol+= "AM_REF1=AM_REF1,AM_REF2=AM_REF2,"
		mappingCol+= "DT_REF1=DT_REF1,DT_REF2=DT_REF2,"
		mappingCol+= "RT_REF1=RT_REF1,RT_REF2=RT_REF2,"
		mappingCol+= "CD_GONGJONG=CD_GONGJONG,DS_GONGJONG=DS_GONGJONG";

	this.dsList.copyRow(this.dsList.rowposition, objDs, row, mappingCol);
};

// 넥사크로의 copyRow 는 상황에 따라 문제를 일으킨다. 가급적 사용하지 말아야 함. 
this.fnCopyDataVat = function (sourceRow, targetRow)
{
	this.dsList.setColumn(targetRow, "CD_VATDEPT_ACNT"	, this.dsReturn.getColumn(sourceRow, "CD_VATDEPT_ACNT"));
	this.dsList.setColumn(targetRow, "CD_VATACCOUNT"	, this.dsReturn.getColumn(sourceRow, "CD_VATACCOUNT"));
	this.dsList.setColumn(targetRow, "TY_SALEBUY"		, this.dsReturn.getColumn(sourceRow, "TY_SALEBUY"));
	this.dsList.setColumn(targetRow, "CD_PROOF"			, this.dsReturn.getColumn(sourceRow, "CD_PROOF"));
	this.dsList.setColumn(targetRow, "DS_PROOF"			, this.dsReturn.getColumn(sourceRow, "DS_PROOF"));
	this.dsList.setColumn(targetRow, "TY_VATBGJE"		, this.dsReturn.getColumn(sourceRow, "TY_VATBGJE"));
	this.dsList.setColumn(targetRow, "CD_VATVENDOR"		, this.dsReturn.getColumn(sourceRow, "CD_VATVENDOR"));
	this.dsList.setColumn(targetRow, "DS_VATVENDOR"		, this.dsReturn.getColumn(sourceRow, "DS_VATVENDOR"));
	this.dsList.setColumn(targetRow, "TY_VATVENDOR"		, this.dsReturn.getColumn(sourceRow, "TY_VATVENDOR"));
	this.dsList.setColumn(targetRow, "AM_SUPPLY"		, this.dsReturn.getColumn(sourceRow, "AM_SUPPLY"));
	this.dsList.setColumn(targetRow, "AM_VAT"			, this.dsReturn.getColumn(sourceRow, "AM_VAT"));
	this.dsList.setColumn(targetRow, "DT_PROOF"			, this.dsReturn.getColumn(sourceRow, "DT_PROOF"));
	this.dsList.setColumn(targetRow, "NO_CREDIT"		, this.dsReturn.getColumn(sourceRow, "NO_CREDIT"));
	this.dsList.setColumn(targetRow, "DS_VATREM"		, this.dsReturn.getColumn(sourceRow, "DS_VATREM"));
	this.dsList.setColumn(targetRow, "CK_OMIT"			, this.dsReturn.getColumn(sourceRow, "CK_OMIT"));
	this.dsList.setColumn(targetRow, "TY_ISSUE"			, this.dsReturn.getColumn(sourceRow, "TY_ISSUE"));
	this.dsList.setColumn(targetRow, "NO_VIEW"			, this.dsReturn.getColumn(sourceRow, "NO_VIEW"));
	this.dsList.setColumn(targetRow, "VAT_RATE"			, this.dsReturn.getColumn(sourceRow, "VAT_RATE"));
	this.dsList.setColumn(targetRow, "NO_VAT"			, this.dsReturn.getColumn(sourceRow, "NO_VAT"));
	this.dsList.setColumn(targetRow, "FILE_DIR"			, this.dsReturn.getColumn(sourceRow, "FILE_DIR"));
};



//전표취소 처리
this.fnSlipDelete = function (obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	if (this.gfnIsNull(this.gfnTrim(this.txtCD_TRADE.value))) {
		this.gfnAlert("전표번호는 필수입니다.");
		this.txtCD_TRADE.setFocus();
		return;
	}
	
	this.gfnConfirm("전표를 삭제하시겠습니까?", "fnSlipDelete_callback");
	
};

this.fnSlipDelete_callback = function(strId, val) 
{
	if(val == true) {
		this.dsSlipDelete.clearData();
		var nRow = this.dsSlipDelete.addRow();
		
		//처리할 데이터 담기
		this.dsSlipDelete.setColumn(nRow, "CD_TRADE"   , this.txtCD_TRADE.value);
		
		var strSvcId    = "slipDelete";
		var strSvcType  = "save";
		var inProc		= "_dsProc";
		var inData      = "slipDelete=dsSlipDelete";
		var outData     = "";
		var strArg      = "";
		var callBackFnc = "fnCallback";
		
		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
							strSvcType , 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
							callBackFnc); 	// 통신방법 정의 [생략가능]
	}
};

//버튼처리
this.fnSetButtonEnable = function (flag)
{
	//trace("$$$$ flag ::: "+flag);

	this.FormBtns.Excel.set_enable(true);
	
	switch(flag) {
	case "S" :
		this.FormBtns.Add.set_enable(false);
		this.FormBtns.Save.set_enable(false);
		this.FormBtns.Del.set_enable(false);
		
		this.btnRequestList.set_enable(false);
		this.btnSlipDelete.set_enable(false);
		this.btnSlipNew.set_enable(false);
		this.btnSlipBanje.set_enable(false);
		this.btnDFPopup.set_enable(false);
		this.btnSlipCopy.set_enable(true);
		
		//this.dxGrid.info = "Y";
		this.dxGridSub.info = "Y";
		
		this.ccfCD_CORP.set_enable(false);
		this.calDT_ACCOUNT.set_enable(false);
		this.ccfACNTUNIT.set_enable(false);
		this.mskAddCnt.set_visible(false);
		this.btnAddRow.set_visible(false);
		break;
	case "I" :
		this.FormBtns.Add.set_enable(true);
		this.btnSlipNew.set_enable(true);
		this.btnRequestList.set_enable(false);
		this.btnSlipDelete.set_enable(false);
		this.btnSlipBanje.set_enable(true);
		this.btnSlipCopy.set_enable(false);
		this.btnDFPopup.set_enable(false);
		this.mskAddCnt.set_visible(true);
		this.btnAddRow.set_visible(true);
		
		//this.dxGrid.info = "N";
		this.dxGridSub.info = "N";
		break;
	case "U" :
		this.FormBtns.Add.set_enable(true);
		this.FormBtns.Del.set_enable(true);
		this.FormBtns.Excel.set_enable(true);
		this.btnSlipNew.set_enable(true);
		this.btnSlipDelete.set_enable(true);
		this.btnSlipBanje.set_enable(true);
		this.btnSlipCopy.set_enable(true);
		this.btnDFPopup.set_enable(false);
		this.btnRequestList.set_enable(true);
		
		this.mskAddCnt.set_visible(true);
		this.btnAddRow.set_visible(true);
		
		//this.dxGrid.info = "N";
		this.dxGridSub.info = "N";
		break;
	case "A" :
		this.FormBtns.Add.set_enable(false);
		this.FormBtns.Save.set_enable(false);
		this.FormBtns.Del.set_enable(false);
		this.btnRequestList.set_enable(false);
		this.btnSlipNew.set_enable(true);
		this.btnSlipDelete.set_enable(false);
		this.btnSlipBanje.set_enable(false);
		this.btnSlipCopy.set_enable(true);
		this.btnDFPopup.set_enable(false);
		
		this.mskAddCnt.set_visible(false);
		this.btnAddRow.set_visible(false);
		//this.dxGrid.info = "Y";
		this.dxGridSub.info = "Y";
		break;
	}
	
	// 전표결제 버튼 활성화 여부
	var nRow = this.dsList.findRowExpr("CD_APP == '1' || CD_APP == '2'");
	
	/*
	if( !this.gfnIsNull(this.txtCD_TRADE.value) && nRow == -1){		
		this.btnApprove.set_enable(true);
	} else {
		this.btnApprove.set_enable(false);
	}
	*/
};

//그리드 키다운 이벤트
this.fnGrid_onkeydown = function(obj:nexacro.Grid,e:nexacro.KeyEventInfo){
	var colId = this.gfnGridGetBindColumnNameByIndex(obj, obj.getCellPos());
	
	//trace("### keycode :: "+e.keycode);
	
	if(e.keycode == 86){	// paste
		var fAcnt = this.dsList.findRowExpr("currow == "+(this.dsList.rowposition)+" && (CD_ACCOUNT == '13500' || CD_ACCOUNT == '25500')");
		
		if(fAcnt > -1){
			document.removeEventListener("paste", this._gfnGridPasteCallback);
		}
	}
 	if(e.keycode == 119){	//F8일경우
		if (colId == "YN_VAT"){	//증빙
			this.fnCallVatPopup();	//부가세 팝업 호출
		}	
 	}
 	if(e.keycode == 13){	//엔터일경우
		if (colId == "AM_DR" || colId == "AM_CR"){	//차대변 금액
			if(this.fnBjDataCheck(this.dsList.rowposition)){	
				//반제전표 코드가 없으면 반제전표 팝업 호출
				if(this.gfnIsNull(this.gfnTrim(this.dsList.getColumn(this.dsList.rowposition, "CD_SLIP_MI")))){
					this.btnSlipBanje.click();
				}
			}
		}
		
		if (colId == "DS_DEPT" || colId == "YN_VAT"){	//귀속부서명/증빙
			this.fnAddData(this.dsList.rowposition, "KEY");	
		}
 	}
	//Ctrl + 엔터일 경우
	if(e.ctrlkey && e.keycode == 13){		
		var rowPos = this.dsList.rowposition;
		var flag = this.gfnGetFlag(this.dsList, rowPos);
		var tRowPos = this.dsList.rowposition -1;
		
		obj.removeEventHandler("onkeydown", this._grd_onkeydown, this);

		var cellIdx = 0;
		if(flag != "D"){
			if (colId == "YN_VAT"){	//증빙
				this.fnCallVatPopup();	//부가세 팝업 호출
			}	
			
			var fAcnt = this.dsList.findRowExpr("currow == "+(rowPos)+" && (CD_ACCOUNT == '13500' || CD_ACCOUNT == '25500')");
			//선급부가세/선수부가세가 아닐경우
			if(fAcnt == -1){
				if(this.dsList.rowposition > 0 && tRowPos > -1){
					switch(colId) {
						case "CD_ACCOUNT" :
							this.dsList.set_enableevent(false);
							this.dsList.setColumn(rowPos, "CD_ACCOUNT", this.dsList.getColumn(tRowPos, "CD_ACCOUNT"));
							this.dsList.setColumn(rowPos, "DS_ACCOUNT", this.dsList.getColumn(tRowPos, "DS_ACCOUNT"));
							this.dsList.setColumn(rowPos, "TY_ACCOUNT", this.dsList.getColumn(tRowPos, "TY_ACCOUNT"));
							
							this.dsList.setColumn(rowPos, "YN_CONSTCOST", this.dsList.getColumn(tRowPos, "YN_CONSTCOST"));
							this.dsList.setColumn(rowPos, "CD_SEMOK", this.dsList.getColumn(tRowPos, "CD_SEMOK"));
							this.dsList.setColumn(rowPos, "DS_SEMOK", this.dsList.getColumn(tRowPos, "DS_SEMOK"));
							this.dsList.setColumn(rowPos, "TY_CRDR", this.dsList.getColumn(tRowPos, "TY_CRDR"));
							
							this.dsList.setColumn(rowPos, "CK_ETC1_MO", this.dsList.getColumn(tRowPos, "CK_ETC1_MO"));
							this.dsList.setColumn(rowPos, "DS_ETC1", this.dsList.getColumn(tRowPos, "DS_ETC1"));
							this.dsList.setColumn(rowPos, "TY_ETC1_FLAG", this.dsList.getColumn(tRowPos, "TY_ETC1_FLAG"));

							this.dsList.setColumn(rowPos, "CK_ETC2_MO", this.dsList.getColumn(tRowPos, "CK_ETC2_MO"));
							this.dsList.setColumn(rowPos, "DS_ETC2", this.dsList.getColumn(tRowPos, "DS_ETC2"));
							this.dsList.setColumn(rowPos, "TY_ETC2_FLAG", this.dsList.getColumn(tRowPos, "TY_ETC2_FLAG"));
							
							this.dsList.setColumn(rowPos, "CK_REFNO_MO", this.dsList.getColumn(tRowPos, "CK_REFNO_MO"));
							this.dsList.setColumn(rowPos, "DS_REFNO", this.dsList.getColumn(tRowPos, "DS_REFNO"));
							this.dsList.setColumn(rowPos, "TY_REFNO_FLAG", this.dsList.getColumn(tRowPos, "TY_REFNO_FLAG"));
							
							this.dsList.setColumn(rowPos, "CK_REFNO2_MO", this.dsList.getColumn(tRowPos, "CK_REFNO2_MO"));
							this.dsList.setColumn(rowPos, "DS_REFNO2", this.dsList.getColumn(tRowPos, "DS_REFNO2"));
							this.dsList.setColumn(rowPos, "TY_REFNO2_FLAG", this.dsList.getColumn(tRowPos, "TY_REFNO2_FLAG"));
							
							this.dsList.setColumn(rowPos, "CK_REFAM1_MO", this.dsList.getColumn(tRowPos, "CK_REFAM1_MO"));
							this.dsList.setColumn(rowPos, "DS_REFAM1", this.dsList.getColumn(tRowPos, "DS_REFAM1"));
							this.dsList.setColumn(rowPos, "CK_REFAM2_MO", this.dsList.getColumn(tRowPos, "CK_REFAM2_MO"));
							this.dsList.setColumn(rowPos, "DS_REFAM2", this.dsList.getColumn(tRowPos, "DS_REFAM2"));
							
							this.dsList.setColumn(rowPos, "CK_REFDT1_MO", this.dsList.getColumn(tRowPos, "CK_REFDT1_MO"));
							this.dsList.setColumn(rowPos, "DS_REFDT1", this.dsList.getColumn(tRowPos, "DS_REFDT1"));
							
							this.dsList.setColumn(rowPos, "CK_REFDT2_MO", this.dsList.getColumn(tRowPos, "CK_REFDT2_MO"));
							this.dsList.setColumn(rowPos, "DS_REFDT2", this.dsList.getColumn(tRowPos, "DS_REFDT2"));
							
							this.dsList.setColumn(rowPos, "CK_REFRT1_MO", this.dsList.getColumn(tRowPos, "CK_REFRT1_MO"));
							this.dsList.setColumn(rowPos, "DS_REFRT1", this.dsList.getColumn(tRowPos, "DS_REFRT1"));
							
							this.dsList.setColumn(rowPos, "CK_REFRT2_MO", this.dsList.getColumn(tRowPos, "CK_REFRT2_MO"));
							this.dsList.setColumn(rowPos, "DS_REFRT2", this.dsList.getColumn(tRowPos, "DS_REFRT2"));
							
							//this.dsList.setColumn(rowPos, "CK_GONGJONG_MO", this.dsList.getColumn(tRowPos, "CK_GONGJONG_MO"));
							//this.dsList.setColumn(rowPos, "DS_GONGJONG1", this.dsList.getColumn(tRowPos, "DS_GONGJONG1"));
							this.dsList.setColumn(rowPos, "TY_ETC1", this.dsList.getColumn(tRowPos, "TY_ETC1"));
							this.dsList.setColumn(rowPos, "TY_ETC2", this.dsList.getColumn(tRowPos, "TY_ETC2"));
							this.dsList.setColumn(rowPos, "TY_REF", this.dsList.getColumn(tRowPos, "TY_REF"));
							this.dsList.setColumn(rowPos, "TY_REF2", this.dsList.getColumn(tRowPos, "TY_REF2"));
							this.dsList.setColumn(rowPos, "YN_VAT_ACNT", this.dsList.getColumn(tRowPos, "YN_VAT_ACNT"));
							
							cellIdx = this.dxGrid.getBindCellIndex("body", "DS_REM");
							
							this.dxGrid.setCellPos(cellIdx, rowPos);
							
							this.fnEtcGridSetting(rowPos);
							this.dsList.set_enableevent(true);
							break;
						case "CD_VENDOR" :
							this.dsList.set_enableevent(false);
							this.dsList.setColumn(rowPos, "CD_VENDOR", this.dsList.getColumn(tRowPos, "CD_VENDOR"));
							this.dsList.setColumn(rowPos, "DS_VENDOR", this.dsList.getColumn(tRowPos, "DS_VENDOR"));
							this.dsList.setColumn(rowPos, "TY_VENDOR", this.dsList.getColumn(tRowPos, "TY_VENDOR"));
							this.dsList.set_enableevent(true);
							
							cellIdx = this.dxGrid.getBindCellIndex("body", "CD_DEPT_BE");
							this.dxGrid.setCellPos(cellIdx, rowPos);
							break;
						case "CD_DEPT_BE" :
							this.dsList.set_enableevent(false);
							this.dsList.setColumn(rowPos, "CD_DEPT_BE", this.dsList.getColumn(tRowPos, "CD_DEPT_BE"));
							this.dsList.setColumn(rowPos, "DS_DEPT"   , this.dsList.getColumn(tRowPos, "DS_DEPT"));
							
							//매입귀속부서
							this.dsList.setColumn(rowPos, "CD_DEPT_BUY", this.dsList.getColumn(tRowPos, "CD_DEPT_BUY"));
							this.dsList.setColumn(rowPos, "DS_DEPT_BUY", this.dsList.getColumn(tRowPos, "DS_DEPT_BUY"));
							//본사귀속부서
							this.dsList.setColumn(rowPos, "CD_DEPT_ACNT_BON", this.dsList.getColumn(tRowPos, "CD_DEPT_ACNT_BON"));
							this.dsList.setColumn(rowPos, "DS_DEPT_ACNT_BON", this.dsList.getColumn(tRowPos, "DS_DEPT_ACNT_BON"));
							
							this.dsList.set_enableevent(true);
							
							cellIdx = this.dxGrid.getBindCellIndex("body", "YN_VAT");
							this.dxGrid.setCellPos(cellIdx, rowPos);
							break;
						case "DT_ACCOUNT" :	//회계일자
						case "DS_REM" :		//적요
						case "AM_DR" :		//차변금액
						case "AM_CR" :		//대변금액
							if(colId == "DT_ACCOUNT"){
								cellIdx = this.dxGrid.getBindCellIndex("body", "CD_ACCOUNT");
								this.dsList.setColumn(rowPos, colId, this.dsList.getColumn(tRowPos, colId));
							}else if(colId == "DS_REM"){
								if(this.dsList.getColumn(rowPos, "TY_CRDR") == "D"){
									cellIdx = this.dxGrid.getBindCellIndex("body", "AM_DR");
								}else{
									cellIdx = this.dxGrid.getBindCellIndex("body", "AM_CR");
								}
								this.dsList.setColumn(rowPos, colId, this.dsList.getColumn(tRowPos, colId));
							}else{
								cellIdx = this.dxGrid.getBindCellIndex("body", "CD_VENDOR");
								this.dsList.setColumn(rowPos, "TY_CRDR", this.dsList.getColumn(tRowPos, "TY_CRDR"));
								
								var totAM_DR = 0, totAM_CR = 0, totAM_DRCR = 0;
								for(var i=0;i<this.dsList.rowcount;i++){
									if(this.gfnGetFlag(this.dsList, i) != "D"){
										if(i != rowPos){
											totAM_DR += nexacro.toNumber(this.dsList.getColumn(i, "AM_DR"),0);
											totAM_CR += nexacro.toNumber(this.dsList.getColumn(i, "AM_CR"),0);
											totAM_DRCR = Math.abs(totAM_DR - totAM_CR);
										}
									}
								}
								if(totAM_DR == totAM_CR){
									this.dsList.setColumn(rowPos, colId, this.dsList.getColumn(tRowPos, colId));
								}else if(totAM_DR > totAM_CR){
									this.dsList.setColumn(rowPos, "AM_CR", totAM_DRCR);
									this.dsList.setColumn(rowPos, "TY_CRDR", "C");
								}else{
									this.dsList.setColumn(rowPos, "AM_DR", totAM_DRCR);
									this.dsList.setColumn(rowPos, "TY_CRDR", "D");
								}
							}
							
							if(this.fnBjDataCheck(rowPos)){	
								//반제전표 코드가 없으면 반제전표 팝업 호출
								if(this.gfnIsNull(this.gfnTrim(this.dsList.getColumn(rowPos, "CD_SLIP_MI")))){
									this.btnSlipBanje.click();
								}
							}
		
							break;
		
					}
				}
			}
		}
		obj.addEventHandler("onkeydown", this._grd_onkeydown, this);
	}
}

//반제전표
this.fnSlipBanje = function (obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	//if(!this.fnCheckValidate()) return;
	
	var param = {};
	param.CD_CORP    = this.ccfCD_CORP.form.CDTextBox.value;
	param.DS_CORP    = this.ccfCD_CORP.form.DSTextBox.value;
	param.CD_DEPT_BH = this.ccfACNTUNIT.form.CDTextBox.value;
	param.DS_DEPT_BH = this.ccfACNTUNIT.form.DSTextBox.value;
	param.CD_ACCOUNT = this.dsList.getColumn(this.dsList.rowposition, "CD_ACCOUNT");
	param.DS_ACCOUNT = this.dsList.getColumn(this.dsList.rowposition, "DS_ACCOUNT");
	param.GR_SEARCH  = this.FormInfo.GR_SEARCH;
	
	var sPopupCallBack = "fnBanjeSlipPopupCallback";
	
	this.gfnFormOpenNonAuth(this.FormInfo.CD_MODULE, "DHA_ISSUESLIPMIKYULDLG", sPopupCallBack, param, 1280, 500);
}

//반제전표 팝업 콜백
this.fnBanjeSlipPopupCallback = function(svcID, val) {
	//var nIndex1 = this.dxGrid.findEventHandler("onkeydown", this._grd_onkeydown, this );
	//if(nIndex1 == -1) this.dxGrid.addEventHandler("onkeydown", this._grd_onkeydown, this);
	
	var nIndex2 = this.dxGrid.findEventHandler("onkeydown", this.fnGrid_onkeydown, this );
	if(nIndex2 == -1) this.dxGrid.addEventHandler("onkeydown", this.fnGrid_onkeydown, this);
	
	this.dsReturn.clearData();
	
 	if(!this.gfnIsNull(val)) {
		this.dsReturn.loadXML(val);
		
		var rowCnt = this.dsList.rowcount;
		var rowPos = this.dsList.rowposition;

		this.dsList.set_enableevent(false);

		var nRow = 0;

		for(var i = 0 ; i < this.dsReturn.rowcount ; i++){
			var cdSlip = this.dsReturn.getColumn(i, "CD_SLIP");	//반제전표의 전표번호
			var fRow = this.dsList.findRowExpr(this.ucFlag +" == 'I' && CD_SLIP_MI == '"+cdSlip+"'");	//이미 등록한 반제전표가 있을경우 덮어 씌우기

			if(fRow > -1) {
				nRow = fRow;
			} else {
				if(rowCnt == 0) {
					//alert("fnBanjeSlipPopupCallback : 1");
					nRow = this.dsList.addRow();
				} else {
					//현재 로우가 반제전표를 등록해야할 데이터일 경우
					if(this.fnBjDataCheck(rowPos)) {
						//alert("fnBanjeSlipPopupCallback : 2");
						nRow = rowPos;
					} else {
						//alert("fnBanjeSlipPopupCallback : 3");
						//nRow = this.dsList.addRow();
						nRow = this.dsList.insertRow(rowPos);
					}
					rowPos++;
				}
			}

			//trace("nRow :: " + nRow);
			//}else if((rowPos+1) != rowCnt && rowPos > -1){	//부가세이면 +1
			//	nRow = this.dsList.insertRow(rowPos);
			//}
			
			this.dsReturn.setColumn(i, "CD_AUTOSLIP", "");
			// 반제전표 복사
			this.dsList.copyRow(nRow, this.dsReturn, i);

			var cdSlip  = "";
			var cdTrade = "";
			
			if(!this.gfnIsNull(this.txtCD_TRADE.value)){
				cdSlip = this.fnSetCdSlip(this.txtCD_TRADE.value);
				cdTrade = this.txtCD_TRADE.value;
			}
			this.dsList.setColumn(nRow, "CD_SLIP"   	, cdSlip);
			this.dsList.setColumn(nRow, "FILE_DIR"  	, cdSlip);
			this.dsList.setColumn(nRow, "CD_TRADE"  	, cdTrade);
			this.dsList.setColumn(nRow, "DT_ACCOUNT"  	, this.calDT_ACCOUNT.value);
			this.dsList.setColumn(nRow, "TY_CLOSING"	, this.ccboTY_SLIP.value);						//전표구분
			this.dsList.setColumn(nRow, "CD_CORP"   	, this.ccfCD_CORP.form.CDTextBox.value);		//법인코드
			this.dsList.setColumn(nRow, "CD_SLIP_MI"   	, this.dsReturn.getColumn(i, "CD_SLIP"));		//반제전표의 전표번호
			this.dsList.setColumn(nRow, "CD_DEPT_BH"   	, this.ccfACNTUNIT.form.CDTextBox.value);		//발행부서
			//this.dsList.setColumn(nRow, "DS_ACCOUNT"   	, this.dsReturn.getColumn(i, "DS_ACCOUNT"));	//반제전표의 계정명
			
			//this.dsList.setColumn(nRow, "CD_DEPT_BH"   	, this.ccfACNTUNIT.form.CDTextBox.value);
			//this.dsList.setColumn(nRow, "CD_DEPT_BE"   	, this.dsReturn.getColumn(i, "CD_DEPT_BE"));
			//this.dsList.setColumn(nRow, "DS_DEPT"   	, this.dsReturn.getColumn(i, "DS_DEPT"));
			//
			//this.dsList.setColumn(nRow, "CD_VENDOR"   	, this.dsReturn.getColumn(i, "CD_VENDOR"));
			//this.dsList.setColumn(nRow, "DS_VENDOR"   	, this.dsReturn.getColumn(i, "DS_VENDOR"));
			//this.dsList.setColumn(nRow, "DS_REM"   		, this.dsReturn.getColumn(i, "DS_REM"));
			
			this.dsList.setColumn(nRow, "YN_VAT"  		, "N");
			this.dsList.setColumn(nRow, "YN_APPR"  		, "N");
			
			var amYy = "CR";	//대변
			//차변일경우 
			if(this.dsReturn.getColumn(i, "TY_CRDR") == "D") {
				amYy = "DR";
			}	

			this.dsList.setColumn(nRow, "AM_"+amYy      , this.dsReturn.getColumn(i, "AM_REMAIN"));	//반제금액 금액에 넣기
	 	}
		
		this.dsList.set_enableevent(true);
		
		this.gfnSetFormStatus(this, "I");
		
		//항번 셋팅
		this.fnNoViewSetting();
		
		//하단 관리항목 로우 추가
		if(this.dsListSub.rowcount == 0){
			this.gfnGridAdd(this.dxGridSub, null, false);
		}
		
		var colDT_ACCOUNT = this.dxGrid.getBindCellIndex("body", "DT_ACCOUNT");
		this.dxGrid.setCellPos(colDT_ACCOUNT, nRow);
		
		//관리항목 셋팅
		this.fnEtcGridSetting(nRow);
		
		//하단 계산
		this.fnCalcSlip();
	
 	}
};

//필수값 체크
this.fnCheckValidate = function()
{
	//법인코드 체크
	if(this.gfnIsNull(this.gfnTrim(this.ccfCD_CORP.form.CDTextBox.value))){
		this.gfnAlert("법인코드를 입력하세요");
		this.ccfCD_CORP.form.CDTextBox.setFocus();
		return false;
	}
	
	//법인코드 체크
	if(this.gfnIsNull(this.gfnTrim(this.calDT_ACCOUNT.value))){
		this.gfnAlert("회계일자를 입력하세요");
		this.calDT_ACCOUNT.setFocus();
		return false;
	}

	//발행부서 체크
	if(this.gfnIsNull(this.gfnTrim(this.ccfACNTUNIT.form.CDTextBox.value))){
		this.gfnAlert("발행부서를 입력하세요");
		this.ccfACNTUNIT.form.CDTextBox.setFocus();
		return false;
	}
	
	return true;	
};

//필수값 체크
this.fnVatCheckValidate = function(row)
{
	var colNm = "";
	//회계일자
	if(this.gfnIsNull(this.gfnTrim(this.dsList.getColumn(row, "DT_ACCOUNT")))){
		colNm += "회계일자";
	}
	
	//적요
	if(this.gfnIsNull(this.gfnTrim(this.dsList.getColumn(row, "DS_REM")))){
		colNm += (colNm.length > 0 ? ", " : "") +"적요";
	}

	var tyCrDr = this.dsList.getColumn(row, "TY_CRDR");
	//금액
	if(!this.gfnIsNull(tyCrDr)){
		if(this.gfnIsNull(this.dsList.getColumn(row, "AM_"+tyCrDr+"R"))){
			if(tyCrDr == "D"){
				
				colNm += (colNm.length > 0 ? ", " : "") + "차변금액";
			}else{
				colNm += (colNm.length > 0 ? ", " : "") + "대변금액";
			}
		}
	}	
	
	//거래처
	if(this.gfnIsNull(this.gfnTrim(this.dsList.getColumn(row, "CD_VENDOR")))){
		colNm += (colNm.length > 0 ? ", " : "") + "거래처";
	}
	
	//귀속부서
	if(this.gfnIsNull(this.gfnTrim(this.dsList.getColumn(row, "CD_DEPT_BE")))){
		colNm += (colNm.length > 0 ? ", " : "") + "귀속부서";
	}
	
	if(!this.gfnIsNull(colNm)){
		this.gfnAlert("[미입력 항목] " + colNm);
		return false;
	}
	return true;	
};

//부가세 팝업 콜백
this.fnVatRegPopupCallback = function(svcID, val) {
	this.dsReturn.clearData();
	
	//trace("부가세 콜백 >>> val :: " + val + "******************************************************************************************");

 	if(!this.gfnIsNull(val)) {
		if(val != "DEL"){		//  부가세 신규 또는 수정	****************************************************************************
			//trace("야 : if(val != DEL)");
			this.dsReturn.loadXML(val);
			
			var rowCnt = this.dsList.rowcount;
			var rowPos = this.dsList.rowposition;

			var amVat = nexacro.toNumber(this.dsReturn.getColumn(0, "AM_VAT"), 0);	//부가세
			var tySaleBuy  = this.dsReturn.getColumn(0, "TY_SALEBUY");				//거래구분
			
			//부가세 테이블에 데이터가 있는지 여부
			//trace("this.dsReturn.getColumn(0, NO_VAT) = " + this.dsReturn.getColumn(0, "NO_VAT"));
			var fRow = this.dsList.findRowExpr("!dataset.parent.gfnIsNull(NO_VAT) && NO_VAT == '" + this.dsReturn.getColumn(0, "NO_VAT") + "'");
			
			//trace("부가세 번호 체크 fRow >>> " + fRow);
			
			if(fRow > -1) {		// 부가세 수정일 경우****************************************************************************
				//trace("    부가세 수정 : fRow = " + fRow);
			
				//this.dsList.copyRow(fRow, this.dsReturn, this.dsReturn.rowposition);	//-> 이거 동작하고나면 기존Dataset 에 설정된 값들 이상해짐. copyRow 는 사용자제
				this.fnCopyDataVat(this.dsReturn.rowposition, fRow);
			
				//부가세 계정 로우 찾아서 덮어 씌우기
				var fAcnt = this.dsList.findRowExpr("currow == " + (fRow + 1) + " && CD_ACCOUNT == " + (tySaleBuy == "I" ? "13500" : "25500") + "'");
				
				if(fAcnt > -1) {
					//trace("        부가세 계정 있을경우 : fAcnt = "+fAcnt);
					var tyCrdr = this.dsList.getColumn(fRow, "TY_CRDR");	//차대구분	

					this.dsList.setColumn(fRow, "YN_VAT" , "Y");	//부가세여부
					this.dsList.setColumn(fRow, "FLAG_V" , "U");	//부가세 플래그(수정)	
					this.dsList.setColumn(fRow, "DS_REM"  , this.dsReturn.getColumn(0, "DS_VATREM"));			// 적요
					this.dsList.setColumn(fAcnt, "DS_REM" , this.dsReturn.getColumn(0, "DS_VATREM"));			// 적요
					//this.dsList.setColumn(fRow, "DT_ACCOUNT"  , this.dsReturn.getColumn(0, "DT_PROOF"));		// 회계일자
					this.dsList.setColumn(fRow, "CD_PROOF", this.dsReturn.getColumn(0, "CD_PROOF"));			// 증빙코드
					
					//부가세가 있을경우
					if(amVat > 0 || amVat < 0){
						if(this.dsList.getColumn(fAcnt, this.ucFlag) != "I"){
							this.dsList.setColumn(fAcnt, this.ucFlag, "U");
						}
						this.dsList.setColumn(fAcnt, (tyCrdr == "D" ? "AM_DR" : "AM_CR") , amVat);
						//this.dsList.setColumn(fRow, "FLAG_V", "U");
					} else {
						this.dsList.setColumn(fAcnt, this.ucFlag, "D");
						//this.dsList.setColumn(fRow, "YN_VAT", "N");
						this.dsList.setColumn(fRow, "FLAG_V", "D");
					}
					
					// 불공제일경우 금액을 0 으로 변경 
					if (this.dsReturn.getColumn(0, "CD_PROOF") == "13" || this.dsReturn.getColumn(0, "CD_PROOF") == "19")	{	
						//this.dsList.setColumn(fAcnt, "AM_DR", 0);
						//this.dsList.setColumn(fAcnt, "AM_CR", 0);
						this.dsList.deleteRow(fAcnt);
					}
					
				} else {
					//trace("        부가세 계정 없을경우 : fAcnt = "+fAcnt);
					//trace("        부가세 등록 >>> ");

					if (this.dsReturn.getColumn(0, "CD_PROOF") != "13" && this.dsReturn.getColumn(0, "CD_PROOF") != "19")	{	

						var nRow = this.gfnGridAdd(this.dxGrid, "current_bottom", true);
						var cdCorp = this.ccfCD_CORP.form.CDTextBox.value;
						this.dsList.setColumn(nRow, "CD_CORP"   , cdCorp);									//법인코드 
						this.dsList.setColumn(nRow, "CD_DEPT_BH", this.ccfACNTUNIT.form.CDTextBox.value);	//발행부서
						this.dsList.setColumn(nRow, "TY_CLOSING", this.ccboTY_SLIP.value);					//전표구분
						
						//부가세가 있을경우
						if(amVat > 0 || amVat < 0){
							if (this.ccboTY_SLIP.value != "02") {	// 20201117 / jkcha / 결산전표일경우 부가세관련 계정 추가 안함.
								this.fnVatDataSet(fRow, nRow, tySaleBuy);
							}
						} else {
							if(this.gfnGetFlag(this.dsList, nRow) == "I"){
								this.dsList.deleteRow(nRow);
							}
						}
					}
				}
				
				this.gfnSetFormStatus(this, "U");
				
				//항번 셋팅
				this.fnNoViewSetting();
				
				//관리항목 셋팅
				this.fnEtcGridSetting(fRow);
				
			} else {	// 부가세 신규일 경우****************************************************************************
				//trace("    부가세 신규 >" + fRow);
				
				this.dsList.set_enableevent(false);

				//this.dsList.copyRow(rowPos, this.dsReturn, this.dsReturn.rowposition);	
				this.fnCopyDataVat(this.dsReturn.rowposition, rowPos);
				
				this.dsList.set_enableevent(true);
				
				this.dsList.setColumn(rowPos, "YN_VAT" 		, "Y");
				this.dsList.setColumn(rowPos, "DS_REM" 		, this.dsReturn.getColumn(0, "DS_VATREM"));		//적요
				//this.dsList.setColumn(rowPos, "DT_ACCOUNT"  , this.dsReturn.getColumn(0, "DT_PROOF"));		//회계일자
				this.dsList.setColumn(rowPos, "CD_PROOF"    , this.dsReturn.getColumn(0, "CD_PROOF"));		//증빙코드
				
				if(this.dsList.getColumn(rowPos, "FLAG_V") != "U"){	
					this.dsList.setColumn(rowPos, "FLAG_V" , this.V_IUD_FLAG);	
				}
				
				//기등록한 부가세 데이터가 있는지 체크
				var fRow = this.dsList.findRow("NO_VIEW_VAT", this.dsReturn.getColumn(0, "NO_VIEW"));
				var nRow = -1;
				
				//trace("### 리턴  NO_VIEW :: "+this.dsReturn.getColumn(0, "NO_VIEW"));
				//trace("### fRow :: "+fRow);

				if(fRow == -1){
					//if (this.ccboTY_SLIP.value != "02") {
					if (this.ccboTY_SLIP.value != "02" && this.dsReturn.getColumn(0, "CD_PROOF") != "13" && this.dsReturn.getColumn(0, "CD_PROOF") != "19") {	// 20201117 / jkcha / 결산전표일경우 부가세관련 계정 추가 안함.
						nRow = this.gfnGridAdd(this.dxGrid, "current_bottom", true);
					}
				} else {
					//기 등록된 부가세 삭제 처리
					this.dsList.set_enableevent(false);
					this.dsList.deleteRow(fRow);
					this.dsList.set_enableevent(true);
					
					if (this.dsReturn.getColumn(0, "CD_PROOF") != "13" && this.dsReturn.getColumn(0, "CD_PROOF") != "19") {	
						nRow = this.gfnGridAdd(this.dxGrid, "current_bottom", true);
					}
				}
				
				if (nRow > -1) {
					var cdCorp = this.ccfCD_CORP.form.CDTextBox.value;
					this.dsList.setColumn(nRow, "CD_CORP"   , cdCorp);									//법인코드 
					this.dsList.setColumn(nRow, "CD_DEPT_BH", this.ccfACNTUNIT.form.CDTextBox.value);	//발행부서
					this.dsList.setColumn(nRow, "TY_CLOSING", this.ccboTY_SLIP.value);					//전표구분
					
					//부가세가 있을경우
					if(amVat > 0 || amVat < 0){
						if (this.ccboTY_SLIP.value != "02") {	// 20201117 / jkcha / 결산전표일경우 부가세관련 계정 추가 안함.
							this.fnVatDataSet(rowPos, nRow, tySaleBuy);
						}
					} else {
						if(this.gfnGetFlag(this.dsList, nRow) == "I"){
							this.dsList.deleteRow(nRow);
							nRow = rowPos;
						}
					}
					
					this.gfnSetFormStatus(this, "I");
					
					//항번 셋팅
					this.fnNoViewSetting();
					
					//하단 관리항목 로우 추가
					if(this.dsListSub.rowcount == 0){
						this.gfnGridAdd(this.dxGridSub, null, false);
					}
					//관리항목 셋팅
					this.fnEtcGridSetting(nRow);				
				} else {
					nRow = rowPos;
				}
			}
			
			var colDT_ACCOUNT = this.dxGrid.getBindCellIndex("body", "DT_ACCOUNT");
			this.dxGrid.setCellPos(colDT_ACCOUNT, nRow);

			//하단 계산
			this.fnCalcSlip();
			//trace("saveXML :: "+this.dsList.saveXML());
		
			this.fnAddData(nRow);	
			
		} else {				//  증빙삭제(부가세 삭제)	****************************************************************
		
			//trace("//  증빙삭제(부가세 삭제)	****************************************************************");

			var rowPos = this.dsList.rowposition;
			var tySaleBuy = this.dsList.getColumn(rowPos, "TY_SALEBUY");	// 거래구분
			var fAcnt = this.dsList.findRowExpr("currow == "+(rowPos+1)+" && CD_ACCOUNT == "+(tySaleBuy == "I" ? "13500" : "25500")+"'");
					
			this.dsList.setColumn(rowPos, "YN_VAT"			, "N");			// 부가세여부
			
			if(this.gfnGetFlag(this.dsList, rowPos) == "I") {
				this.dsList.deleteRow((rowPos+1));
				this.dsList.setColumn(rowPos, "CD_VATDEPT_ACNT"	, "");		// 부가세 귀속부서
				this.dsList.setColumn(rowPos, "CD_VATACCOUNT"	, "");		// 부가세계정
				this.dsList.setColumn(rowPos, "CD_VATVENDOR"	, "");		// 부가세 거래처코드
				this.dsList.setColumn(rowPos, "DS_VATVENDOR"	, "");		// 부가세 거래처명
				this.dsList.setColumn(rowPos, "TY_VATVENDOR"	, "");		// 부가세 거래처구분
				this.dsList.setColumn(rowPos, "CD_PROOF"		, "");		// 증빙코드
				this.dsList.setColumn(rowPos, "TY_VATBGJE"		, "");		// 불공제사유
				this.dsList.setColumn(rowPos, "NO_CREDIT"		, "");		// 신용카드번호
				this.dsList.setColumn(rowPos, "FLAG_V"			, "");
			} else {
				if(fAcnt > -1) {
					this.dsList.setColumn(fAcnt, this.ucFlag, "D");
				}
				this.dsList.setColumn(rowPos, "FLAG_V", "D");
			}
			
// 			}else{
// 				if(fAcnt > -1){
// 					if(this.gfnGetFlag(obj, e.row) != "I"){
// 						this.dsList.setColumn(fAcnt, this.ucFlag, obj.getOrgColumn(e.row, this.ucFlag));
// 						
// 						this.dsList.setColumn(e.row, "YN_VAT", ynVatOrg);
// 						this.dsList.setColumn(e.row, "FLAG_V", obj.getOrgColumn(e.row, "FLAG_V"));
// 					}else{
// 						obj.deleteRow((e.row+1));
// 					}
// 				}
//			}
		}
	}
};

this.fnVatDataSet = function (rowPos, nRow, tySaleBuy)
{
	var tyCrdr = this.dsList.getColumn(rowPos, "TY_CRDR");	//차대구분	
	var amVat = nexacro.toNumber(this.dsReturn.getColumn(0, "AM_VAT"), 0);
	
	// 20200908 : 증빙자료에서 매입, 세금계산서 불공제건은 금액을  "0" 으로 처리함
	if (this.dsReturn.getColumn(0, "TY_SALEBUY") == "I" && this.dsReturn.getColumn(0, "CD_PROOF") == "13") {
		amVat = 0;
	}
	
	var cdAccount = "", dsAccount = "";
	if(tySaleBuy == "I"){		//매입
		cdAccount = "13500";
		dsAccount = "부가세대급금";		//선급부가세
		tyCrdr = "D";
	}else if(tySaleBuy == "O"){		//매출
		cdAccount = "25500";
		dsAccount = "부가세예수금";			//선수부가세
		tyCrdr = "C";
	}	
	
	this.dsList.setColumn(nRow, "YN_VAT_ADD" , "Y");
	this.dsList.setColumn(nRow, "CD_ACCOUNT" , cdAccount);
	this.dsList.setColumn(nRow, "DS_ACCOUNT" , dsAccount);
	
	this.dsList.set_enableevent(false);
	this.dsList.setColumn(nRow, (tyCrdr == "D" ? "AM_DR" : "AM_CR") , amVat);
	this.dsList.setColumn(nRow, "TY_CRDR" 	  , tyCrdr);
	//this.dsList.setColumn(nRow, "DT_ACCOUNT"  , this.dsReturn.getColumn(0, "DT_PROOF"));
	this.dsList.setColumn(nRow, "DT_ACCOUNT"  , this.dsList.getColumn(rowPos, "DT_ACCOUNT"));
	this.dsList.setColumn(nRow, "CD_VENDOR"   , this.dsList.getColumn(rowPos, "CD_VENDOR"));
	this.dsList.setColumn(nRow, "DS_VENDOR"   , this.dsList.getColumn(rowPos, "DS_VENDOR"));
	this.dsList.setColumn(nRow, "TY_VENDOR"   , this.dsList.getColumn(rowPos, "TY_VENDOR"));
	this.dsList.setColumn(nRow, "CD_DEPT_BE"  , this.dsList.getColumn(rowPos, "CD_DEPT_BE"));
	this.dsList.setColumn(nRow, "DS_DEPT" 	  , this.dsList.getColumn(rowPos, "DS_DEPT"));
	this.dsList.setColumn(nRow, "NO_VIEW_VAT" , this.dsList.getColumn(rowPos, "NO_VIEW"));
	this.dsList.setColumn(nRow, "DS_REM" 	  , this.dsReturn.getColumn(0, "DS_VATREM"));		//적요
	this.dsList.setColumn(nRow, "YN_VAT" 	  , "N");	
	
	//수정일 경우 전표번호 채번
	if(this.V_IUD_FLAG == "U"){
		var cdSlip = this.fnSetCdSlip(this.txtCD_TRADE.value);
		this.dsList.setColumn(nRow, "CD_TRADE"  , this.txtCD_TRADE.value);
		this.dsList.setColumn(nRow, "CD_SLIP"   , cdSlip);
	}
	this.dsList.set_enableevent(true);
};

//부가세 팝업 호출
this.fnCallVatPopup = function ()
{
	var rPos = this.dsList.rowposition;
	
	//trace("부가세 팝업 호출 들어왔당");
	//trace("부가세계정이닝 ==> "+this.dsList.getColumn(rPos, "YN_VAT_ACNT"));
	
	//부가세 계정일 경우
	if(this.dsList.getColumn(rPos, "YN_VAT_ACNT") == "Y"){
		//trace("YN_APPR :: "+this.dsList.getColumn(rPos, "YN_APPR"));
		//trace("YN_VAT :: "+this.dsList.getColumn(rPos, "YN_VAT"));
		//trace("TY_SALEBUY :: "+this.dsList.getColumn(rPos, "TY_SALEBUY"));
		//trace("CD_PROOF :: "+this.dsList.getColumn(rPos, "CD_PROOF"));
	
		//승인전표는 부가세 추가 안되게 처리
		//if(this.dsList.getColumn(rPos, "YN_APPR") == "Y" && this.dsList.getColumn(rPos, "YN_VAT") == "N") return;
		
		if(!this.fnVatCheckValidate(rPos)) return;
		
		var tyCrdr  = this.dsList.getColumn(rPos, "TY_CRDR");	//차대변구분
		var dtProof = this.dsList.getColumn(rPos, "DT_PROOF");	//증빙일자
		if(this.gfnIsNull(dtProof)){
			dtProof = this.dsList.getColumn(rPos, "DT_ACCOUNT");	//회계일자
		}
		
		var param = {};
		param.P_IUD_FLAG  	= this.V_IUD_FLAG;	//등록,수정,조회 구분
		param.P_GUBUN  		= "SLIP";	//팝업구분
		param.P_CD_SLIP  	= this.dsList.getColumn(rPos, "CD_SLIP")				//전표번호
		param.P_CD_AUTOSLIP = this.dsList.getColumn(rPos, "CD_AUTOSLIP")			//자동전표번호
		param.P_YN_VAT  	= this.dsList.getColumn(rPos, "YN_VAT");				//부가세여부
		param.P_NO_VIEW     = this.dsList.getColumn(rPos, "NO_VIEW");				//항번
		param.P_YN_APPR     = this.dsList.getColumn(rPos, "YN_APPR");				//승인여부
		param.P_CD_APP      = this.dsList.getColumn(rPos, "CD_APP");				//결재상태코드
		param.P_NO_VAT      = this.dsList.getColumn(rPos, "NO_VAT");				//부가세번호
		param.P_ISSUE_ID 	= this.dsList.getColumn(rPos, "ISSUE_ID");				//전자세금계산서번호
		param.P_FILE_DIR    = this.dsList.getColumn(rPos, "FILE_DIR");				//첨부파일경로
		param.P_CD_DEPT     = this.dsList.getColumn(rPos, "CD_DEPT_BE");			//귀속부서코드
		param.P_DS_DEPT     = this.dsList.getColumn(rPos, "DS_DEPT");				//귀속부서명
		param.CD_DEPT_BUY   = this.dsList.getColumn(rPos, "CD_DEPT_BUY");			//매입귀속부서코드
		param.DS_DEPT_BUY   = this.dsList.getColumn(rPos, "DS_DEPT_BUY");			//매입귀속부서명
		param.CD_DEPT_ACNT_BON = this.dsList.getColumn(rPos, "CD_DEPT_ACNT_BON");	//본사귀속부서코드
		param.DS_DEPT_ACNT_BON = this.dsList.getColumn(rPos, "DS_DEPT_ACNT_BON");	//본사귀속부서명
		
		//부가세가 발행이 N이고 증빙구분이 없을 경우(처음 부가세 팝업 띄울경우 부가세 팝업에서 확인을 안눌렀을 경우)
		if(this.dsList.getColumn(rPos, "YN_VAT") == "N" && this.gfnIsNull(this.dsList.getColumn(rPos, "CD_PROOF"))){
			//trace("부가세 처음 등록한다!!!");
			
			//전자세금계산서번호가 있을경우
			if(!this.gfnIsNull(this.dsList.getColumn(rPos, "ISSUE_ID"))){
				param.TY_SALEBUY 	= this.dsList.getColumn(rPos, "TY_SALEBUY");	//거래구분
				param.TY_ISSUE 		= this.dsList.getColumn(rPos, "TY_ISSUE");		//발행구분
				param.AM_SUPPLY 	= this.dsList.getColumn(rPos, "AM_SUPPLY");		//공급가
				param.AM_VAT 		= this.dsList.getColumn(rPos, "AM_VAT");		//부가세
			}else{
				param.TY_SALEBUY 	= "I";		//거래구분
				param.AM_SUPPLY 	= this.dsList.getColumn(rPos, "AM_"+tyCrdr+"R");	//금액
			}
			
			param.YN_VAT 		= "N";		//부가세여부
			param.CD_CORP 		= this.dsList.getColumn(rPos, "CD_CORP");			//회사코드
			
			if(!this.gfnIsNull(this.dsList.getColumn(rPos, "CD_DEPT_BUY"))){		//매입부서가 있을경우
				param.CD_DEPT = this.dsList.getColumn(rPos, "CD_DEPT_BUY");			//매입부서코드
				param.DS_DEPT = this.dsList.getColumn(rPos, "DS_DEPT_BUY");			//매입부서명
			}else{
				param.CD_DEPT 		= this.dsList.getColumn(rPos, "CD_DEPT_BE");		//귀속부서코드
				param.DS_DEPT 		= this.dsList.getColumn(rPos, "DS_DEPT");			//귀속부서명
			}
			param.CD_ACCOUNT 	= this.dsList.getColumn(rPos, "CD_ACCOUNT");		//계정코드
			param.DS_ACCOUNT 	= this.dsList.getColumn(rPos, "DS_ACCOUNT");		//계정명
			
			param.TY_VENDOR 	= this.dsList.getColumn(rPos, "TY_VENDOR");			//거래처구분
			param.CD_VENDOR 	= this.dsList.getColumn(rPos, "CD_VENDOR");			//거래처코드
			param.DS_VENDOR 	= this.dsList.getColumn(rPos, "DS_VENDOR");			//거래처명
			param.NO_SJC 	    = this.dsList.getColumn(rPos, "NO_SJC");			//사업자/주민번호
			param.DS_REM 		= this.dsList.getColumn(rPos, "DS_REM");			//적요
			param.DT_PROOF 		= dtProof;											//회계일자
			param.TY_CRDR 		= tyCrdr;											//차대변구분
		}else  if(this.dsList.getColumn(rPos, "YN_VAT") == "N" && !this.gfnIsNull(this.dsList.getColumn(rPos, "CD_PROOF"))){
			
			param.YN_VAT 		= this.dsList.getColumn(rPos, "YN_VAT");			//부가세여부
			param.CD_CORP 		= this.dsList.getColumn(rPos, "CD_CORP");			//회사코드
			var cdVatDeptAcnt = this.dsList.getColumn(rPos, "CD_VATDEPT_ACNT").split("|");	//부가세 귀속부서
			param.CD_DEPT 		= cdVatDeptAcnt[0];		//귀속부서코드
			param.DS_DEPT 		= cdVatDeptAcnt[1];		//귀속부서명
			param.TY_SALEBUY 	= this.dsList.getColumn(rPos, "TY_SALEBUY");		//거래구분
			param.CD_PROOF 		= this.dsList.getColumn(rPos, "CD_PROOF");			//증빙코드
			param.DS_PROOF 		= this.dsList.getColumn(rPos, "DS_PROOF");			//증빙코드명
			param.VAT_RATE 		= this.dsList.getColumn(rPos, "VAT_RATE");			//부가세율
			param.YN_VATBGJE 	= this.dsList.getColumn(rPos, "YN_VATBGJE");		//불공제여부
			param.TY_VATBGJE 	= this.dsList.getColumn(rPos, "TY_VATBGJE");		//불공제사유
			
			var cdAccount = this.dsList.getColumn(rPos, "CD_VATACCOUNT").split("|");
			
			param.CD_ACCOUNT 	= cdAccount[0];	//부가세 계정코드
			param.DS_ACCOUNT 	= cdAccount[1];	//부가세 계정명
			param.TY_VENDOR 	= this.dsList.getColumn(rPos, "TY_VENDOR");			//거래처구분
			param.CD_VENDOR 	= this.dsList.getColumn(rPos, "CD_VENDOR");			//거래처코드
			param.DS_VENDOR 	= this.dsList.getColumn(rPos, "DS_VENDOR");			//거래처명
			param.NO_SJC 	    = this.dsList.getColumn(rPos, "NO_SJC");			//사업자/주민번호
			param.AM_SUPPLY 	= this.dsList.getColumn(rPos, "AM_SUPPLY");			//공급가액
			param.AM_VAT 		= this.dsList.getColumn(rPos, "AM_VAT");			//부가세액
			param.AM_SERVICE 	= this.dsList.getColumn(rPos, "AM_SERVICE");		//봉사료
			param.NO_CREDIT 	= this.dsList.getColumn(rPos, "NO_CREDIT");			//카드번호
			param.DT_PROOF 		= dtProof;	//회계일자
			param.DS_REM 		= this.dsList.getColumn(rPos, "DS_VATREM");			//적요
			param.CK_OMIT 		= this.dsList.getColumn(rPos, "CK_OMIT");			//누락여부
			param.TY_ISSUE 		= this.dsList.getColumn(rPos, "TY_ISSUE");			//발행구분
		}else{
			//trace("부가세 수정이다");
			param.YN_VAT 		= this.dsList.getColumn(rPos, "YN_VAT");			//부가세여부
			param.CD_CORP 		= this.dsList.getColumn(rPos, "CD_CORP");			//회사코드			
			
			var cdVatDeptAcnt = this.dsList.getColumn(rPos, "CD_VATDEPT_ACNT").split("|");	//부가세 귀속부서
			param.CD_DEPT 		= cdVatDeptAcnt[0];		//귀속부서코드
			param.DS_DEPT 		= cdVatDeptAcnt[1];		//귀속부서명
			param.TY_SALEBUY 	= this.dsList.getColumn(rPos, "TY_SALEBUY");		//거래구분
			param.CD_PROOF 		= this.dsList.getColumn(rPos, "CD_PROOF");			//증빙코드
			param.DS_PROOF 		= this.dsList.getColumn(rPos, "DS_PROOF");			//증빙코드명
			param.VAT_RATE 		= this.dsList.getColumn(rPos, "VAT_RATE");			//부가세율
			param.YN_VATBGJE 	= this.dsList.getColumn(rPos, "YN_VATBGJE");		//불공제여부
			param.TY_VATBGJE 	= this.dsList.getColumn(rPos, "TY_VATBGJE");		//불공제사유
			
			var cdAccount = this.dsList.getColumn(rPos, "CD_VATACCOUNT").split("|");
			
			param.CD_ACCOUNT 	= cdAccount[0];	//부가세 계정코드
			param.DS_ACCOUNT 	= cdAccount[1];	//부가세 계정명
			param.TY_VENDOR 	= this.dsList.getColumn(rPos, "TY_VENDOR");			//거래처구분
			param.CD_VENDOR 	= this.dsList.getColumn(rPos, "CD_VENDOR");			//거래처코드
			param.DS_VENDOR 	= this.dsList.getColumn(rPos, "DS_VENDOR");			//거래처명
			param.NO_SJC 	    = this.dsList.getColumn(rPos, "NO_SJC");			//사업자/주민번호
			param.AM_SUPPLY 	= this.dsList.getColumn(rPos, "AM_SUPPLY");			//공급가액
			param.AM_VAT 		= this.dsList.getColumn(rPos, "AM_VAT");			//부가세액
			param.AM_SERVICE 	= this.dsList.getColumn(rPos, "AM_SERVICE");		//봉사료
			param.NO_CREDIT 	= this.dsList.getColumn(rPos, "NO_CREDIT");			//카드번호
			param.DT_PROOF 		= dtProof;	//회계일자
			param.DS_REM 		= this.dsList.getColumn(rPos, "DS_VATREM");			//적요
			param.CK_OMIT 		= this.dsList.getColumn(rPos, "CK_OMIT");			//누락여부
			param.TY_ISSUE 		= this.dsList.getColumn(rPos, "TY_ISSUE");			//발행구분
		}

		var sPopupCallBack = "fnVatRegPopupCallback";
			
		this.gfnFormOpenNonAuth(this.FormInfo.CD_MODULE, "DHA_ISSUEVATDLG", sPopupCallBack, param, 550, 630);
	}
};

//자금 입금내역 전표발행 셋팅
this.fnDFSetting = function ()
{
	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "ISSUE_ID"), "edittype", "expr:YN_DF =='Y' ? 'none':'text'");
	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "ISSUE_ID"), "expandshow", "expr:YN_DF =='Y'? 'hide':'show'");
	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "DT_ACCOUNT"), "edittype", "expr:YN_DF =='Y' ? 'none':'date'");	
	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "CD_ACCOUNT"), "edittype", "expr:YN_DF =='Y'? 'none':'text'");
	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "CD_ACCOUNT"), "expandshow", "expr:YN_DF =='Y'? 'hide':'show'");
	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "AM_DR"), "edittype", "expr:YN_DF =='Y'? 'none':'text'");
	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "AM_CR"), "edittype", "expr:YN_DF =='Y'? 'none':'text'");
	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "CD_VENDOR"), "edittype", "expr:YN_DF =='Y'? 'none':'text'");
	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "CD_VENDOR"), "expandshow", "expr:YN_DF =='Y'? 'hide':'show'");
	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "CD_DEPT_BE"), "edittype", "expr:YN_DF =='Y'? 'none':'text'");
	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "CD_DEPT_BE"), "expandshow", "expr:YN_DF =='Y'? 'hide':'show'");

	var CD_CORP = this.getOwnerFrame().CD_CORP;
	var DS_CORP = this.getOwnerFrame().DS_CORP;
	var TY_SLIP = "03";

	this.V_IUD_FLAG = "I";
	this.V_YN_DF 	= this.getOwnerFrame().YN_DF;	//자금여부
	this.ccboTY_SLIP.set_value(TY_SLIP);				//전표구분 : 입금전표	
		
	//if(!this.gfnIsNull(this.getOwnerFrame().DF_INFO)){

		//폼 클리어
		this.fnClearForm();
		
		//var arrDF_INFO = this.getOwnerFrame().DF_INFO.split(",");

		//법인코드
		this.ccfCD_CORP.form.CDTextBox.set_value(CD_CORP);
		this.ccfCD_CORP.form.DSTextBox.set_value(DS_CORP); 
		
		this.calDT_ACCOUNT.set_enable(false);
		this.ccfCD_CORP.form.set_readonly(true); 
		this.ccfACNTUNIT.form.set_readonly(true); 

		// 입금내역 데이터 바인딩
		this.dsList.set_enableevent(false);
		
		for (var i = 0 ; i < this.dsListDF.rowcount ; i++) {
		
			// 첫번째 일자를 회계일자로 설정
			if (i == 0) {
				//검색조건 셋팅
				this.calDT_ACCOUNT.set_value(this.dsListDF.getColumn(i, "DF_INFO3"));		 // 왜 세팅하는지 모르겠음.
			}
			
			// 로우 추가
			var row = this.gfnGridAdd(this.dxGrid, "bottom", true);

			this.dsList.setColumn(row, "CD_ACCOUNT"		, this.dsListDF.getColumn(i, "DF_INFO6"));		// 계정코드(CD_ACCOUNT)  -> 
			
			// 전표정보
			this.dsList.setColumn(row, "CD_CORP" 		, CD_CORP);										// 법인코드
			this.dsList.setColumn(row, "CD_DEPT_BH"		, this.AuthClient.CD_DEPT);						// 발행부서
			this.dsList.setColumn(row, "TY_CLOSING"		, TY_SLIP);										// 전표구분 : 입금전표
			this.dsList.setColumn(row, "YN_DF"  		, "Y");
			this.dsList.setColumn(row, "FLAG_V"  		, "I");
			this.dsList.setColumn(row, "YN_IMG"  		, "N");
			this.dsList.setColumn(row, "YN_VAT"   		, "N");
			this.dsList.setColumn(row, "YN_BANJE"  		, "N");
			
			this.dsList.setColumn(row, "CD_DEPT_BE"  	, this.dsListDF.getColumn(i, "DF_INFO1"));		// 귀속부서
			this.dsList.setColumn(row, "DS_DEPT"  	  	, this.dsListDF.getColumn(i, "DF_INFO2"));		// 귀속부서명
			this.dsList.setColumn(row, "DT_ACCOUNT"  	, this.dsListDF.getColumn(i, "DF_INFO3"));		// 회계일자
			this.dsList.setColumn(row, "AM_DR"    		, nexacro.toNumber(this.dsListDF.getColumn(i, "DF_INFO4")));				// 차변금액
			this.dsList.setColumn(row, "AM_CR"  		, 0);											// 대변금액
			this.dsList.setColumn(row, "DS_REM"  		, this.dsListDF.getColumn(i, "DF_INFO5"));		// 적요
			this.dsList.setColumn(row, "TY_VENDOR"  	, this.dsListDF.getColumn(i, "DF_INFO7"));		// 거래처구분
			this.dsList.setColumn(row, "CD_VENDOR"  	, this.dsListDF.getColumn(i, "DF_INFO8"));		// 거래처코드
			this.dsList.setColumn(row, "DS_VENDOR"  	, this.dsListDF.getColumn(i, "DF_INFO9"));		// 거래처명
			this.dsList.setColumn(row, "TY_CRDR"  		, "D");											// 차대구분 
			this.dsList.setColumn(row, "CD_SLIP_MI"  	, this.dsListDF.getColumn(i, "DF_INFO24"));		// 반제전표번호
			
			this.dsList.setColumn(row, "TY_ETC1"  		, this.dsListDF.getColumn(i, "DF_INFO10"));
			this.dsList.setColumn(row, "CD_ETC1"  		, this.dsListDF.getColumn(i, "DF_INFO11"));
			this.dsList.setColumn(row, "DS_ETC11"  		, this.dsListDF.getColumn(i, "DF_INFO12"));
			this.dsList.setColumn(row, "TY_ETC2"  		, this.dsListDF.getColumn(i, "DF_INFO13"));
			this.dsList.setColumn(row, "CD_ETC2"  		, this.dsListDF.getColumn(i, "DF_INFO14"));
			this.dsList.setColumn(row, "DS_ETC21"  		, this.dsListDF.getColumn(i, "DF_INFO15"));
			
			this.dsList.setColumn(row, "TY_REF"  		, this.dsListDF.getColumn(i, "DF_INFO16"));
			this.dsList.setColumn(row, "NO_REF"  		, this.dsListDF.getColumn(i, "DF_INFO17"));
			this.dsList.setColumn(row, "DS_REF"  		, this.dsListDF.getColumn(i, "DF_INFO18"));
			
			//alert("this.dsListDF.getColumn("+i+", DF_INFO17)) = " + this.dsListDF.getColumn(i, "DF_INFO17"));
			
			this.dsList.setColumn(row, "TY_REF2"  		, this.dsListDF.getColumn(i, "DF_INFO19"));
			this.dsList.setColumn(row, "NO_REF2"  		, this.dsListDF.getColumn(i, "DF_INFO20"));
			this.dsList.setColumn(row, "DS_REF2"  		, this.dsListDF.getColumn(i, "DF_INFO21"));
		
			this.dsList.setColumn(row, "DT_REF1"  		, this.dsListDF.getColumn(i, "DF_INFO22"));
			this.dsList.setColumn(row, "DT_REF2"  		, this.dsListDF.getColumn(i, "DF_INFO23"));
			
			/********************************************************************************************/
		}
		this.dsList.set_enableevent(true);				
		
		// 두번째로우 추가
		row = this.gfnGridAdd(this.dxGrid, "bottom", true);
		this.dsList.set_enableevent(false);
		this.dsList.setColumn(row, "DT_ACCOUNT"		, this.gfnGetDate());
		this.dsList.setColumn(row, "CD_DEPT_BE"		, this.AuthClient.CD_DEPT);
		this.dsList.setColumn(row, "CD_DEPT_BH"		, this.AuthClient.CD_DEPT);
		this.dsList.setColumn(row, "DS_DEPT"		, this.AuthClient.DS_DEPT);
		this.dsList.setColumn(row, "CD_CORP"		, this.getOwnerFrame().CD_CORP);
		this.dsList.setColumn(row, "TY_CLOSING"		, TY_SLIP);								// 전표구분
		this.dsList.setColumn(row, "YN_VAT"			, "N");
		this.dsList.setColumn(row, "YN_DF"			, "N");
		
		// 항번 셋팅
		this.fnNoViewSetting();
		
		this.dsList.set_enableevent(true);
		
		//하단 관리항목 로우 추가
		if(this.dsListSub.rowcount == 0){
			this.gfnGridAdd(this.dxGridSub, null, false);
		}
		
		//하단 금액 계산
		this.fnCalcSlip();
	//}
};

//자금 관리항목 데이터 셋팅   
//this.fnSetGridEtcData = function (row)
//{
	//if(!this.gfnIsNull(this.getOwnerFrame().DF_INFO)) {
		/*
		var arrDF_INFO = this.getOwnerFrame().DF_INFO.split(",");
		//관리항목
		this.dsList.setColumn(row, "TY_ETC1"  	, this.dsListDF.getColumn(row, "DF_INFO10"));
		this.dsList.setColumn(row, "CD_ETC1"  	, this.dsListDF.getColumn(row, "DF_INFO11"));
		this.dsList.setColumn(row, "DS_ETC11"  	, this.dsListDF.getColumn(row, "DF_INFO12"));
		this.dsList.setColumn(row, "TY_ETC2"  	, this.dsListDF.getColumn(row, "DF_INFO13"));
		this.dsList.setColumn(row, "CD_ETC2"  	, this.dsListDF.getColumn(row, "DF_INFO14"));
		this.dsList.setColumn(row, "DS_ETC21"  	, this.dsListDF.getColumn(row, "DF_INFO15"));
		
		this.dsList.setColumn(row, "TY_REF"  	, this.dsListDF.getColumn(row, "DF_INFO16"));
		this.dsList.setColumn(row, "NO_REF"  	, this.dsListDF.getColumn(row, "DF_INFO17"));
		this.dsList.setColumn(row, "DS_REF"  	, this.dsListDF.getColumn(row, "DF_INFO18"));
		
		this.dsList.setColumn(row, "TY_REF2"  	, this.dsListDF.getColumn(row, "DF_INFO19"));
		this.dsList.setColumn(row, "NO_REF2"  	, this.dsListDF.getColumn(row, "DF_INFO20"));
		this.dsList.setColumn(row, "DS_REF2"  	, this.dsListDF.getColumn(row, "DF_INFO21"));
	
		this.dsList.setColumn(0, "DT_REF1"  	, this.dsListDF.getColumn(row, "DF_INFO22"));
		this.dsList.setColumn(0, "DT_REF2"  	, this.dsListDF.getColumn(row, "DF_INFO23"));
		*/
	//}
//}


//자금 프로시저 호출
this.fnDFProcCall = function ()
{
	this.dsSaveDF.clearData();
	
	var nRow = this.dsSaveDF.addRow();
	this.dsSaveDF.setColumn(nRow, "NO_INCONFIRM", this.V_NO_INCONFIRM);		//입금확인번호
	this.dsSaveDF.setColumn(nRow, "NO_SLIP"	    , this.txtCD_TRADE.value);	//전표번호
	this.dsSaveDF.setColumn(nRow, "ID_USER"	    , this.AuthClient.ID_USER);	//사용자ID

	var strSvcId    = "callDF";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "callDF=dsSaveDF";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
};

//반제 데이터 체크
this.fnBjDataCheck = function (rowPos)
{
	//trace("### fnBjDataCheck !!! ");
	//trace("### fnBjDataCheck rowPos :: "+rowPos);

	var bjChk = false;
	
	var tyAccount  = this.dsList.getColumn(rowPos, "TY_ACCOUNT");				// 미수미불구분
	var tyCrdrAcnt = this.dsList.getColumn(rowPos, "TY_CRDR_ACNT");				// 계정의 차대구분
	var amDr = nexacro.toNumber(this.dsList.getColumn(rowPos , "AM_DR"),0);		// 차변금액
	var amCr = nexacro.toNumber(this.dsList.getColumn(rowPos , "AM_CR"),0);		// 대변금액
	
	//trace("### tyAccount :: "+tyAccount);
	
	if(!this.gfnIsNull(tyAccount)) {	//미수미불구분이 있을경우
	//if(tyAccount > 0){	//미수미불구분이 미불(0)이 아닐경우
		//해당 계정의 차대구분에 금액이 없을경우
		
		if (tyCrdrAcnt == "D") {	//차변
			if (amDr == 0) {
				bjChk = true;
			}
		} else if (tyCrdrAcnt == "C") {	//대변
			if (amCr == 0) {
				bjChk = true;
			}
		}
	}
	
	return bjChk;
};

//자금집행현황 팝업
this.fnDFPopup = function (obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
 	var param = {};
 	param.CD_SLIP = this.gfnTrim(this.dsList.getColumn(this.dsList.rowposition, "CD_SLIP"));
 	this.gfnFormOpenNonAuth(this.FormInfo.CD_MODULE, "DHA_ISSUESLIPDFDLG", "fnSlipDFPopupCallback", param, 630, 450);
};

//전표복사 팝업
this.fnSlipCopy = function (obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
 	var param = {};
 	param.CD_SLIP = this.gfnTrim(this.dsList.getColumn(this.dsList.rowposition, "CD_SLIP"));
 	this.gfnFormOpenNonAuth(this.FormInfo.CD_MODULE, "DHA_ISSUESLIPCOPYDLG", "fnSlipCopyPopupCallback", param, 320, 170);
};

//전표복사 팝업 콜백
this.fnSlipCopyPopupCallback = function(svcID, val) {

 	if(!this.gfnIsNull(val)) {
		this.V_IUD_FLAG = "I";
		
		//this.dxGrid.info = "N";
		this.dxGridSub.info = "N";
		
		this.dsList.set_enableevent(false);
		
		for(var i=0;i<this.dsList.rowcount;i++){
			this.dsList.setColumn(i, this.ucFlag   , "I");		//상태값(신규)
			this.dsList.setColumn(i, "CD_TRADE"    , "");		//전표번호	
			this.dsList.setColumn(i, "CD_SLIP"     , "");		//전표번호	
			this.dsList.setColumn(i, "ISSUE_ID"    , "");		//전자세금계산서번호
			
			this.dsList.setColumn(i, "DT_ACCOUNT"  , val);		//회계일자
			this.dsList.setColumn(i, "DT_PROOF"    , val);		//부가세 증빙일자
			this.dsList.setColumn(i, "YN_APPR"     , "N");		//승인여부
			this.dsList.setColumn(i, "CD_DEPT_BH"  , this.AuthClient.CD_DEPT);	//발행부서
			this.dsList.setColumn(i, "FILE_ATTACH" , "");		//전표번호	
			this.dsList.setColumn(i, "CD_AUTOSLIP" , "");		//자동전표번호
			this.dsList.setColumn(i, "CD_APP"      , "");		//결재상태
			
			var flag = "";
			if(this.dsList.getColumn(i, "YN_VAT") == "Y"){
				flag = "I";
			}
			
			this.dsList.setColumn(i, "FLAG_V" , flag);
		}
		
		this.txtCD_TRADE.set_value("");
		this.ccboCD_APP.set_value("");
		this.txtDS_HNAME.set_value("");
		this.txtDT_UPDATE.set_value("");
		
		this.dsList.set_enableevent(true);
		
		this.gfnSetFormStatus(this, "U");
		
		this.fnSetButtonEnable("I");
		
		//this.btnApprove.set_enable(false);
		//this.btnSchApprove.set_enable(false);
		this.FormBtns.Select.set_enable(false);
		this.btnSlipCopy.set_enable(false);
	}
};


// 전표결제 버튼 클릭
this.fnApprove = function (obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	var cdTrade  = this.gfnTrim(this.txtCD_TRADE.value);
	if(this.gfnIsNull(cdTrade)){
		this.gfnAlert("전표번호는 필수입니다.");
		return;
	}
	
	this.dsSelectDtReq.clearData();
	var nRow = this.dsSelectDtReq.addRow();

	this.dsSelectDtReq.setColumn(nRow, "CD_TRADE", cdTrade);

	var strSvcId    = "selectDtReq";
	var strSvcType  = "select";
	var inProc		= "_dsProc";
	var inData      = "selectDtReq=dsSelectDtReq";
	var outData     = "dsDtReq=selectDtReq0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]


};

// 결제조회 버튼 클릭
this.fnSchApprove = function (obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	//if(!this.gfnGridIsRow(this.dxGrid)) return;
	
	var url = this.gfnGetConfig("DZ" , "GW_APROVAL_URL");
	url = url+"approval/approval_Form.do?";
	if(this.gfnIsNull(this.dsList.getColumn(0 , "NO_DOC"))){
		this.gfnAlert("결재 정보가 존재하지 않습니다.");
		return;
	}
	url +="forminstanceID="+this.dsList.getColumn(0 , "NO_DOC");
	url +="&processID="+this.dsList.getColumn(0 , "DS_DOC");
		
	window.open(url, "_blank", "width=790,height=1000,menubar=no,scrollbars=no,resizable=no,status=no");
};

// 파일이동
this.fnFileMove = function() {
	//trace("$$$$$ fnFileMove 들어옴!!!");
	
	if(this.dsRnameList.rowcount == 0) return;
	
	//trace("$$$$$ dsRnameList saveXML :: "+this.dsRnameList.saveXML());
	
	for (var i = 0; i < this.dsRnameList.rowcount; i++) {		
		var fileManager = {};
		fileManager.CD_GUBUN = "DH03";
		fileManager.CD_DIR = [ this.dsRnameList.getColumn(i, "PATH_ORG") ];
		fileManager.MV_DIR = [ this.dsRnameList.getColumn(i, "PATH_NEW") ];
		// CD_DIR 만 지정시 CD_DIR 배열 순대로 키1,키2,키3 까지 자동지정
		// 저장되는 디렉토리와 키값이 다른경우 CD_REF 추가로 사용
		fileManager.CD_REF = [ this.dsRnameList.getColumn(i, "PATH_ORG") ];
		fileManager.MV_REF = [ this.dsRnameList.getColumn(i, "PATH_NEW") ];
		
		fileManager.IS_DELETE = true;
		
		this.gfnMoveFile(fileManager, "fnFileMoveCallback");
	}
};


this.fnFileMoveCallback = function(svcID, errorCode, errorMsg) {
	//trace("&&& File Move End!!!!");

	if (errorCode == 0) {
		this.vFileCnt++;
	} else {
		this.gfnAlert(errorMsg);
		return;
	}
	
	//trace("&&& 콜백 this.vFileCnt :: "+this.vFileCnt);
	
	//전체건 처리 되었을 경우 데이터셋 클리어
	if(this.dsRnameList.rowcount == this.vFileCnt){
		this.dsRnameList.clearData();
		this.vFileCnt = 0;
		//trace("$$$ 파일 데이터셋 클리어!!!!");
		this.FormBtns.Select.click();
	}
};

this.fnFileDelete = function() {
	this.dsDeleteList.clearData();
	
	for( var i=0; i<this.dsFileList.rowcount;i++)
	{		
		var nrow = this.dsDeleteList.addRow();	
		this.dsDeleteList.setColumn(nrow, "filepath", this.dsFileList.getColumn(i, "DS_PATH"));
		this.dsDeleteList.setColumn(nrow, "filename", this.dsFileList.getColumn(i, "NM_FILE"));
	}
	
	var strSvcId    = "deletefile";
	var strSvcType  = "file/deleteFile";	
	var inProc		= "";
	var inData      = "input=dsDeleteList";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnDeleteCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
};

this.fnDeleteCallback = function(svcID, errorCode, errorMsg) {
	if(svcID == "deletefile") {
		if (errorCode == 0) {
			this.fnFileDataDelete();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "fileDelete") {

	}
}

this.fnFileDataDelete = function() {
	
	this.dsFileSave.clearData();
	
	for(var i=0;i<this.dsFileList.rowcount;i++){
		var nrow = this.dsFileSave.addRow();	

// 		var dsPath = this.dsFileList.getColumn(i, "DS_PATH");
// 		var cdRef1 = dsPath.substring(dsPath.lastIndexOf("\\")+1, dsPath.length);
		
		this.dsFileSave.setColumn(nrow, "TY_SAVE" , "D");
		this.dsFileSave.setColumn(nrow, "NO_SEQ"  , "0");
		this.dsFileSave.setColumn(nrow, "CD_GUBUN", "DH03");
		this.dsFileSave.setColumn(nrow, "CD_REF1" , this.dsFileList.getColumn(i, "CD_REF1"));	
	}
	
	if (this.dsFileSave.rowcount == 0) return;
		
	var strSvcId    = "fileDelete";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "fileDelete=dsFileSave";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnDeleteCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
};

//파일 조회
this.fnFileSelect = function ()
{	
	this.dsFileSelect = new Dataset();
	this.dsFileSelect.addColumn("CD_GUBUN", "string");
	this.dsFileSelect.addColumn("CD_REF1", "string");

	this.dsFileSelect.clearData();
	this.dsFileSelect.addRow();
	this.dsFileSelect.setColumn(0, "CD_GUBUN", "DH03");     // 첨부파일 구분
	this.dsFileSelect.setColumn(0, "CD_REF1", this.txtCD_TRADE.value + "%");		//파일경로 구분
	
	var strSvcId    = "fileSelect";
	var strSvcType  = "select";
	var inProc		= "_dsProc";
	var inData      = "fileSelect=dsFileSelect";
	var outData     = "dsFileList=fileSelect0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// trabsaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
};

this.fnAddData = function (rowPos, type)
{
	var sExpr = this.ucFlag +" != 'D' && "+ this.ucFlag + " != 'DU'";	//삭제 데이터 제외
	var amDrSum = nexacro.toNumber(this.dsList.getCaseSum(sExpr , "AM_DR"),0);	//차변금액 합
	var amCrSum = nexacro.toNumber(this.dsList.getCaseSum(sExpr , "AM_CR"),0);	//대변금액 합
	
	if(amDrSum != amCrSum){
		//이미 추가된 로우가 있을경우
		var fRow = this.dsList.findRowAs(this.ucFlag, "I", (rowPos+1));
		
		if(fRow > -1){
			return;
		}
		
		var nRow = this.fnAdd();	//추가
		var tRowPos = nRow -1;
			
		this.dsList.set_enableevent(false);
		this.dsList.setColumn(nRow, "DT_ACCOUNT" , this.dsList.getColumn(tRowPos, "DT_ACCOUNT"));	//회계일자
		this.dsList.setColumn(nRow, "DS_REM" 	 , this.dsList.getColumn(tRowPos, "DS_REM"));	//적요
		this.dsList.setColumn(nRow, "CD_VENDOR"  , this.dsList.getColumn(tRowPos, "CD_VENDOR"));	//거래처코드
		this.dsList.setColumn(nRow, "DS_VENDOR"  , this.dsList.getColumn(tRowPos, "DS_VENDOR"));	//거래처명
		this.dsList.setColumn(nRow, "TY_VENDOR"  , this.dsList.getColumn(tRowPos, "TY_VENDOR"));	//거래처구분
		this.dsList.setColumn(nRow, "CD_DEPT_BE" , this.dsList.getColumn(tRowPos, "CD_DEPT_BE"));	//귀속부서코드
		this.dsList.setColumn(nRow, "DS_DEPT"    , this.dsList.getColumn(tRowPos, "DS_DEPT"));	//귀속부서명	
		
		//매입귀속부서
		this.dsList.setColumn(nRow, "CD_DEPT_BUY", this.dsList.getColumn(tRowPos, "CD_DEPT_BUY"));
		this.dsList.setColumn(nRow, "DS_DEPT_BUY", this.dsList.getColumn(tRowPos, "DS_DEPT_BUY"));
		//본사귀속부서
		this.dsList.setColumn(nRow, "CD_DEPT_ACNT_BON", this.dsList.getColumn(tRowPos, "CD_DEPT_ACNT_BON"));
		this.dsList.setColumn(nRow, "DS_DEPT_ACNT_BON", this.dsList.getColumn(tRowPos, "DS_DEPT_ACNT_BON"));
		this.dsList.set_enableevent(true);
		
		this.dsList.set_rowposition(nRow);
		
		var colIdx = this.dxGrid.getBindCellIndex("body", "CD_ACCOUNT");
		if(type == "KEY"){
			colIdx = this.dxGrid.getBindCellIndex("body", "DT_ACCOUNT");
		}
		this.dxGrid.setCellPos(colIdx, nRow);
		this.dxGrid.showEditor(true);
	}
};

this.fnGrid_ExpandUp = function(obj:nexacro.Grid, e:nexacro.GridMouseEventInfo) {

	//trace("## fnGrid_ExpandUp ");
	
	//삭제데이터, 결재완료 데이터일 경우 리턴
	//if(this.gfnGetFlag(this.dsList, e.row) == "D" || this.dsList.getColumn(e.row, "CD_APP") == "2"){
	if(this.gfnGetFlag(this.dsList, e.row) == "D"){
		return;
	}
	
	var colnm = this.gfnGridGetBindColumnNameByIndex(obj, e.cell);
	
	if(colnm == "FILE_ATTACH") {
	
		var CD_AUTOSLIP = this.dsList.getColumn(e.row, "CD_AUTOSLIP");
		
		switch(CD_AUTOSLIP) {
			case "DHA0101": 	// PMS_사업관리비-체재비     
			case "DHA0102":		// PMS_사업관리비-법인카드    
			case "DHA0103":		// PMS_사업관리비-세금계산서  
			case "DHA0104":		// PMS_출장비              
			case "DHA0105":		// PMS_사업관리비-사업경비    
			case "DHA0106":		// PMS_개인경비             
			case "DHA0107":		// PMS_매입계산서           
			case "DHA0108":		// PMS_매출계산서    
			case "DHA0109":		// PMS_공통경비
			case "DHA0110":		// PMS_일반경비
				var Parm = { CD_TRADE: this.dsList.getColumn(e.row, "CD_TRADE"), CD_SLIP: this.dsList.getColumn(e.row, "CD_SLIP") };
				var Option = {
						//popuptype:"modeless", 
						title:"증빙자료", 
						width:"600", 
						height:"400"
					};	
				this.gfnOpenPopup("modelesspopup1", "dha::DHA_ISSUESLIP_PMS_PROOF.xfdl", Parm, null, Option);	
				break;
			default:
				var cdDir = "";
				if (this.gfnGetFlag(this.dsList, e.row) == "I") {
					if(this.gfnIsNull(this.dsList.getColumn(e.row, "FILE_DIR"))) {
						cdDir = "TEMP_" + this.gfnGetDate("milli");
					} else {
						cdDir = this.dsList.getColumn(e.row, "FILE_DIR");
					}
				} else {
					cdDir = this.dsList.getColumn(e.row, "CD_SLIP");
				}
				
				//trace("## 첨부파일 cdDir :: "+cdDir);
			
				this.FileManager.CD_DIR = [cdDir];
				this.gfnFileManager(this.FileManager, "fnFileCallback");			
				break;
		}
	}
};

this.fnFileCallback = function(strID, val) {
	// val.IsChange : 변경여부, val.Cnt : 파일개수
	
	//trace("## val :: " + val);
		
	// 파일개수를 다시 셋팅
	this.dsList.set_enableevent(false);
	
	if (val.Cnt == 0) {
		this.dsList.setColumn(this.dsList.rowposition, "FILE_DIR", "");
	} else {
		if(this.gfnIsNull(this.dsList.getColumn(this.dsList.rowposition, "CD_SLIP"))){
			this.dsList.setColumn(this.dsList.rowposition, "FILE_DIR", this.FileManager.CD_DIR);
		}
	}
	
	//trace("## 첨부파일 건수 :: " + val.Cnt);
	//trace("## FILE_DIR :: " + this.dsList.getColumn(this.dsList.rowposition, "FILE_DIR"));
	
	if(val.IsChange){
		this.dsList.setColumn(this.dsList.rowposition, "FILE_ATTACH", "첨부(" + val.Cnt + ")");
	}

	this.dsList.set_enableevent(true);
};

//자금신청 이동
this.fnRequestList = function (obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
 	var param = {};
 	param.CD_CORP = this.ccfCD_CORP.form.CDTextBox.value;
	param.DS_CORP = this.ccfCD_CORP.form.DSTextBox.value;
	param.CD_DEPTOPER = this.dsList.getColumn(0, "CD_DEPT_BH");
	param.DS_DEPTOPER = this.dsList.getColumn(0, "DS_DEPT_BH");
	param.CD_TRADE = this.dsList.getColumn(0, "CD_TRADE");
	param.DT_REQ_FROM = this.dsList.getMin("DT_ACCOUNT");
	param.DT_REQ_TO = this.dsList.getMax("DT_ACCOUNT");
	
 	this.gfnFormOpen("DFB", "DFB_REQUESTLIST", "fnSlipDFCallback", param);
};

//세금계산서 보기
this.fnTaxView = function (obj:nexacro.Button,e:nexacro.ClickEventInfo)
{

	var issueId   = this.gfnTrim(this.dsList.getColumn(this.dsList.rowposition, "ISSUE_ID"));
	var tySalebuy = this.dsList.getColumn(this.dsList.rowposition, "TY_SALEBUY");
	if(this.gfnIsNull(issueId)){
		this.gfnAlert("전자세금계산서번호는 필수입니다.");
		return;
	}
	
	//세금계산서 정보 조회
	this.fnSelectTax(issueId, tySalebuy);
};

//세금계산서 정보 조회
this.fnSelectTax = function (issueId, tySalebuy)
{
	this.dsSelectTax.clearData();
	var nRow = this.dsSelectTax.addRow();
	
	this.dsSelectTax.setColumn(nRow, "ISSUE_ID"  , issueId);		//세금계산서번호
	this.dsSelectTax.setColumn(nRow, "TY_SALEBUY", tySalebuy);		//매입/매출구분 

	var strSvcId    = "selectTax";
	var strSvcType  = "select";
	var inProc		= "_dsProc";
	var inData      = "selectTax=dsSelectTax";
	var outData     = "dsTax=selectTax0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
};

this.divData_divDataTop_btnAddRow_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	if(!this.fnCheckValidate()) return;
	
	var addCnt = nexacro.toNumber(this.mskAddCnt.value,0);
	if(addCnt == 0){
		this.gfnAlert("추가할 갯수를 입력하세요.");
		this.mskAddCnt.setFocus();
		return;
	}
	
	var cdCorp = this.ccfCD_CORP.form.CDTextBox.value;
	
	this.dsList.set_enableevent(false);
	
	for(var i=0;i<addCnt;i++){
		var nRow = this.dsList.addRow();
		this.dsList.setColumn(nRow, "CD_CORP"   , cdCorp);						//법인코드 
		this.dsList.setColumn(nRow, "CD_TRADE"	, this.txtCD_TRADE.value);		//거래번호
		this.dsList.setColumn(nRow, "DT_ACCOUNT", this.calDT_ACCOUNT.value);	//발행일자
		this.dsList.setColumn(nRow, "AM_DR"		, "0");							//차변금액 
		this.dsList.setColumn(nRow, "AM_CR"		, "0");							//대변금액
		this.dsList.setColumn(nRow, "CD_ACCOUNT", "");							//계정코드
		this.dsList.setColumn(nRow, "CD_DEPT_BH", this.ccfACNTUNIT.form.CDTextBox.value);	//발행부서
		this.dsList.setColumn(nRow, "TY_CLOSING", this.ccboTY_SLIP.value);		//전표구분
		this.dsList.setColumn(nRow, "YN_VAT"  	, "N");							//부가세여부
		this.dsList.setColumn(nRow, this.ucFlag, "I");
		
		//수정일 경우 전표번호 채번
		if(this.V_IUD_FLAG == "U"){
			var cdSlip = this.fnSetCdSlip(this.txtCD_TRADE.value);
			this.dsList.setColumn(nRow, "CD_SLIP"   , cdSlip);
			this.dsList.setColumn(nRow, "FILE_DIR"  , cdSlip);
		}
		
		//항번 셋팅
		this.fnNoViewSetting();
	}
	
	this.dsList.set_enableevent(true);
	
	if(this.V_IUD_FLAG == "U"){		
		this.FormBtns.Select.set_enable(true);
	}else{
		this.FormBtns.Select.set_enable(false);
	}
	
	//하단 관리항목 로우 추가
	if(this.dsListSub.rowcount == 0){
		this.gfnGridAdd(this.dxGridSub, null, false);
	}
	
	this.gfnSetFormStatus(this, "I");
	
	this.gfnSetEnable(this.btnDFPopup, false);
};
]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DHAPR_SLIP_DETAIL</Col>
          </Row>
          <Row>
            <Col id="TARGET">insert</Col>
            <Col id="SP">DHAPR_SLIP_XISSUESLIP</Col>
          </Row>
          <Row>
            <Col id="TARGET">update</Col>
            <Col id="SP">DHAPR_SLIP_XISSUESLIP</Col>
          </Row>
          <Row>
            <Col id="TARGET">delete</Col>
            <Col id="SP">DHAPR_SLIP_XISSUESLIP</Col>
          </Row>
          <Row>
            <Col id="TARGET">slipDelete</Col>
            <Col id="SP">DHAPR_SLIP_DELETE</Col>
          </Row>
          <Row>
            <Col id="TARGET">selectNewCode</Col>
            <Col id="SP">DHAPR_SLIPNO_XSELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">combo</Col>
            <Col id="SP">DZXPR_COMBO_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">callDF</Col>
            <Col id="SP">DFLPR_INCOMESLIP_SLIP</Col>
          </Row>
          <Row>
            <Col id="TARGET">fileDelete</Col>
            <Col id="SP">DZZPR_FILEMANAGER_SAVE</Col>
          </Row>
          <Row>
            <Col id="TARGET">fileSelect</Col>
            <Col id="SP">DZZPR_FILEMANAGER_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">combo2</Col>
            <Col id="SP">DZXPR_COMBO_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">selectTax</Col>
            <Col id="SP">DHXPR_TAX_INFO_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">selectDtReq</Col>
            <Col id="SP">DHAPR_SLIP_DT_MIBUL_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">selectDF</Col>
            <Col id="SP">DFLPR_INCOMESLIP_ISSUE_SELECT</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsListSub"/>
      <Dataset id="dsSearch">
        <ColumnInfo>
          <Column id="CD_CORP" type="STRING" size="256"/>
          <Column id="ACNTUNIT" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
      <Dataset id="dsStatus"/>
      <Dataset id="dsTY_SLIP"/>
      <Dataset id="dsNewCode">
        <ColumnInfo>
          <Column id="CD_TRADE" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="dsReturn"/>
      <Dataset id="dsFileList"/>
      <Dataset id="dsCD_APP"/>
      <Dataset id="dsTax"/>
      <Dataset id="dsDtReq"/>
      <Dataset id="dsMngItem">
        <ColumnInfo>
          <Column id="TYPE" type="STRING" size="256"/>
          <Column id="CHECK" type="STRING" size="256"/>
          <Column id="TY" type="STRING" size="256"/>
          <Column id="CD" type="STRING" size="256"/>
          <Column id="DS" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TYPE">TY_CD_DS</Col>
            <Col id="CHECK">TY_ETC1_FLAG</Col>
            <Col id="CD">CD_ETC1</Col>
            <Col id="DS">DS_ETC11</Col>
            <Col id="TY">TY_ETC1</Col>
          </Row>
          <Row>
            <Col id="TYPE">TY_CD_DS</Col>
            <Col id="CHECK">TY_ETC2_FLAG</Col>
            <Col id="CD">CD_ETC2</Col>
            <Col id="DS">DS_ETC21</Col>
            <Col id="TY">TY_ETC2</Col>
          </Row>
          <Row>
            <Col id="TYPE">TY_CD_DS</Col>
            <Col id="CHECK">TY_REFNO_FLAG</Col>
            <Col id="TY">TY_REF</Col>
            <Col id="CD">NO_REF</Col>
            <Col id="DS">DS_REF</Col>
          </Row>
          <Row>
            <Col id="TYPE">TY_CD_DS</Col>
            <Col id="CHECK">TY_REFNO2_FLAG</Col>
            <Col id="TY">TY_REF2</Col>
            <Col id="CD">NO_REF2</Col>
            <Col id="DS">DS_REF2</Col>
          </Row>
          <Row>
            <Col id="TYPE">CD</Col>
            <Col id="CHECK">DS_REFAM1</Col>
            <Col id="DS"/>
            <Col id="CD">AM_REF1</Col>
            <Col id="TY">-</Col>
          </Row>
          <Row>
            <Col id="TYPE">CD</Col>
            <Col id="CHECK">DS_REFAM2</Col>
            <Col id="DS"/>
            <Col id="CD">AM_REF2</Col>
            <Col id="TY">-</Col>
          </Row>
          <Row>
            <Col id="TYPE">CD</Col>
            <Col id="CHECK">DS_REFDT1</Col>
            <Col id="DS"/>
            <Col id="CD">DT_REF1</Col>
            <Col id="TY">-</Col>
          </Row>
          <Row>
            <Col id="TYPE">CD</Col>
            <Col id="CHECK">DS_REFDT2</Col>
            <Col id="DS"/>
            <Col id="CD">DT_REF2</Col>
            <Col id="TY">-</Col>
          </Row>
          <Row>
            <Col id="TYPE">CD</Col>
            <Col id="CHECK">DS_REFRT1</Col>
            <Col id="DS"/>
            <Col id="CD">RT_REF1</Col>
            <Col id="TY">-</Col>
          </Row>
          <Row>
            <Col id="TYPE">CD</Col>
            <Col id="CHECK">DS_REFRT2</Col>
            <Col id="DS"/>
            <Col id="CD">RT_REF2</Col>
            <Col id="TY">-</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsListDF">
        <ColumnInfo>
          <Column id="DF_INFO0" type="STRING" size="256"/>
          <Column id="DF_INFO1" type="STRING" size="256"/>
          <Column id="DF_INFO2" type="STRING" size="256"/>
          <Column id="DF_INFO3" type="STRING" size="256"/>
          <Column id="DF_INFO4" type="STRING" size="256"/>
          <Column id="DF_INFO5" type="STRING" size="256"/>
          <Column id="DF_INFO6" type="STRING" size="256"/>
          <Column id="DF_INFO7" type="STRING" size="256"/>
          <Column id="DF_INFO8" type="STRING" size="256"/>
          <Column id="DF_INFO9" type="STRING" size="256"/>
          <Column id="DF_INFO10" type="STRING" size="256"/>
          <Column id="DF_INFO11" type="STRING" size="256"/>
          <Column id="DF_INFO12" type="STRING" size="256"/>
          <Column id="DF_INFO13" type="STRING" size="256"/>
          <Column id="DF_INFO14" type="STRING" size="256"/>
          <Column id="DF_INFO15" type="STRING" size="256"/>
          <Column id="DF_INFO16" type="STRING" size="256"/>
          <Column id="DF_INFO17" type="STRING" size="256"/>
          <Column id="DF_INFO18" type="STRING" size="256"/>
          <Column id="DF_INFO19" type="STRING" size="256"/>
          <Column id="DF_INFO20" type="STRING" size="256"/>
          <Column id="DF_INFO21" type="STRING" size="256"/>
          <Column id="DF_INFO22" type="STRING" size="256"/>
          <Column id="DF_INFO23" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfCD_CORP.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_CORP"/>
      <BindItem id="item4" compid="divSearch.form.ccfACNTUNIT.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="ACNTUNIT"/>
    </Bind>
  </Form>
</FDL>
