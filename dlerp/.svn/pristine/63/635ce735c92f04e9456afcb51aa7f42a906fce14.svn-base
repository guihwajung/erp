<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="옵션일괄수납" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg" formscrolltype="none">
          <Layouts>
            <Layout>
              <Static id="staCD_ACNTUNIT" taborder="0" text="사업지코드" left="0.0" top="10.0" width="105.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfCD_ACNTUNIT" CodeFindName="DRX_CFACNTUNIT" CDTextWidth="100" taborder="1" left="staCD_ACNTUNIT:0.0" top="10.0" width="400" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
              <Static id="staDT_RECEIPT" taborder="2" text="입금기간" left="ccfCD_ACNTUNIT:0.0" top="10.0" width="105.0" height="24.0" textDecoration="none" cssclass="sta_WF_SchLabel"/>
              <Calendar id="ctclDT_START" taborder="3" left="staDT_RECEIPT:0.0" top="10.0" width="105" height="24.0" dateformat="yyyy-MM-dd" editformat="yyyyMMdd" autoselect="true" value=""/>
              <Static id="staRANGE" taborder="4" text="~" left="ctclDT_START:0.0" top="10.0" width="30.0" height="24.0" cssclass="sta_WF_AC"/>
              <Calendar id="ctclDT_END" taborder="5" left="staRANGE:0.0" top="10.0" width="105" height="24.0" dateformat="yyyy-MM-dd" editformat="yyyyMMdd" autoselect="true" value=""/>
              <Static id="staYN_CHKRECEIPT" taborder="6" text="수납여부" left="ctclDT_END:0.0" top="10.0" width="105.0" height="24.0" textDecoration="none" cssclass="sta_WF_SchLabel"/>
              <Combo id="ccboYN_CHKRECEIPT" taborder="7" left="staYN_CHKRECEIPT:0.0" top="10.0" width="90" height="24.0" innerdataset="innerdataset" datacolumn="datacolumn" codecolumn="codecolumn" value="" index="0" text="전체">
                <Dataset id="innerdataset">
                  <ColumnInfo>
                    <Column id="codecolumn" size="256"/>
                    <Column id="datacolumn" size="256"/>
                  </ColumnInfo>
                  <Rows>
                    <Row>
                      <Col id="codecolumn">N</Col>
                      <Col id="datacolumn">미수납건</Col>
                    </Row>
                    <Row>
                      <Col id="codecolumn">Y</Col>
                      <Col id="datacolumn">수납건</Col>
                    </Row>
                  </Rows>
                </Dataset>
              </Combo>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	if(this.FormInfo.TY_AUTH == "R") {
		this.FormBtns.Save.set_enable(false);
	}
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
	// Select, Add, Del, Save, Excel, Print
	// SubSelect, SubAdd, SubDel, SuubSave, SubExcel
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btnAutoSunap = this.gfnFormButtonAdd("AutoSunap", "fnButtonClick"); 	// 수납처리
	this.btnReceiptMg = this.gfnFormButtonAdd("ReceiptMg", "fnButtonClick"); 	// 수납관리
	this.btnExcelData = this.gfnFormButtonAdd("ExcelData", "fnButtonClick"); 	// 엑셀자료관리
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {

	this.ccfCD_ACNTUNIT = this.divSearch.form.ccfCD_ACNTUNIT;	// 사업지코드

	this.dxGrid = this.divData.form.objGrid;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	this.ccfCD_ACNTUNIT.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	
	// 그리드 초기화
	this.gfnGridInit(this.dxGrid, this.dsList, "DR", "DRF_RECEIPTBATCH");
	
	//조회기간
	this.dsSearch.setColumn(0, "DT_START", this.gfnGetDate());
	this.dsSearch.setColumn(0, "DT_END"  , this.gfnGetDate());
	
	// 수납처 
	this.dsSearch.set_enableevent(false);
	this.dsSearch.setColumn(0, "YN_CHKRECEIPT", "N");	// 미수납건
	this.dsSearch.set_enableevent(true);
	
	// 체크박스 일괄.
	this.dxGrid.setEventHandler("onheadclick", this.fnGrid_onheadclick, this); 	
};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {

	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_ACNTUNIT"  		, "string");
	this.dsSelect.addColumn("TY_GUBUN"     		, "string");
	this.dsSelect.addColumn("NO_CHASU"     		, "string");
	this.dsSelect.addColumn("DT_START"     		, "string");
	this.dsSelect.addColumn("DT_END"       		, "string");
	this.dsSelect.addColumn("YN_OPTION"    		, "string");
	this.dsSelect.addColumn("YN_CHKRECEIPT"		, "string");
			
	this.dsInsert = new Dataset();		
	this.dsInsert.addColumn("CD_ACNTUNIT"  		, "string");
	this.dsInsert.addColumn("TY_GUBUN"     		, "string");
	this.dsInsert.addColumn("NO_CHASU"     		, "string");
	this.dsInsert.addColumn("NO_DONG"      		, "string");
	this.dsInsert.addColumn("NO_FLOOR"     		, "string");
	this.dsInsert.addColumn("NO_HO"        		, "string");
	this.dsInsert.addColumn("DT_RECEIPT"   		, "string");
	this.dsInsert.addColumn("AM_RECEIPT"   		, "bigdecimal");
	this.dsInsert.addColumn("NO_GUJA"      		, "string");
	this.dsInsert.addColumn("CD_TRADE"     		, "string");
	this.dsInsert.addColumn("ID_INSERT"    		, "string");
	
	this.dsUpdate = new Dataset();
	this.dsUpdate.addColumn("CD_ACNTUNIT"  		, "string");
	this.dsUpdate.addColumn("TY_GUBUN"     		, "string");
	this.dsUpdate.addColumn("NO_CHASU"     		, "string");
	this.dsUpdate.addColumn("NO_DONG"      		, "string");
	this.dsUpdate.addColumn("NO_FLOOR"     		, "string");
	this.dsUpdate.addColumn("NO_HO"        		, "string");
	this.dsUpdate.addColumn("DT_RECEIPT"   		, "string");
	this.dsUpdate.addColumn("NO_SEQ"       		, "string");
	this.dsUpdate.addColumn("DS_CONTRACTOR"		, "string");
	this.dsUpdate.addColumn("ID_UPDATE"    		, "string");
	
	this.dsDelete = new Dataset();
	this.dsDelete.addColumn("CD_ACNTUNIT"  		, "string");
	this.dsDelete.addColumn("TY_GUBUN"     		, "string");
	this.dsDelete.addColumn("NO_CHASU"     		, "string");
	this.dsDelete.addColumn("NO_SEQ"       		, "string");
	this.dsDelete.addColumn("DT_RECEIPT"   		, "string");
	this.dsDelete.addColumn("ID_INSERT"    		, "string");
	
	// FBS
	this.dsInsertFBS = new Dataset();
	this.dsInsertFBS.addColumn("CD_ACNTUNIT"  	, "string");
	this.dsInsertFBS.addColumn("TY_GUBUN"     	, "string");
	this.dsInsertFBS.addColumn("NO_CHASU"     	, "string");
	this.dsInsertFBS.addColumn("DT_RECEIVED"  	, "string");
	this.dsInsertFBS.addColumn("NO_SEQ"       	, "string");
	this.dsInsertFBS.addColumn("YN_OPTION"    	, "string");
	this.dsInsertFBS.addColumn("ID_INSERT"    	, "string");
	this.dsInsertFBS.addColumn("NO_CONTRACT"	, "string");
	
	this.dsDeleteFBS = new Dataset();
	this.dsDeleteFBS.addColumn("DT_RECEIVED"  	, "string");
	this.dsDeleteFBS.addColumn("NO_SEQ"     	, "string");
	this.dsDeleteFBS.addColumn("DS_REMARK"     	, "string");
	this.dsDeleteFBS.addColumn("ID_UPDATE"  	, "string");
	
	// 
	this.dsDeleteFBSTrade = new Dataset();
	this.dsDeleteFBSTrade.addColumn("CD_ACNTUNIT", "string");
	this.dsDeleteFBSTrade.addColumn("DT_START"   , "string");
	this.dsDeleteFBSTrade.addColumn("DT_END"     , "string");
	this.dsDeleteFBSTrade.addColumn("YN_OPTION"  , "string");
	this.dsDeleteFBSTrade.addColumn("ID_INSERT"  , "string");
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {

	if (!this.fnSelectValidate()) return false;
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	
	this.dsSelect.setColumn(0, "CD_ACNTUNIT"  , this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(0, 6));
	this.dsSelect.setColumn(0, "TY_GUBUN"     , this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(6, 1));
	this.dsSelect.setColumn(0, "NO_CHASU"     , this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(7, 2));
	this.dsSelect.setColumn(0, "DT_START"     , this.dsSearch.getColumn(0, "DT_START"));
	this.dsSelect.setColumn(0, "DT_END"       , this.dsSearch.getColumn(0, "DT_END"));
	this.dsSelect.setColumn(0, "YN_OPTION"    , "Y");
	this.dsSelect.setColumn(0, "YN_CHKRECEIPT", this.dsSearch.getColumn(0, "YN_CHKRECEIPT"));
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); 	// 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {};

/*
 *	삭제 버튼
 */
this.fnDel = function() {};

/*
 *	저장 버튼
 */
this.fnSave = function() {
	
	if(!this.gfnGridValidate(this.dxGrid)) return false;
	
	this.dxGrid.updateToDataset();
	
	this.dsDelete.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag      = this.gfnGetFlag(this.dsListPayback, i);
		switch(flag) {
			case "D" :	
					var nRow = this.dsDelete.addRow();
					
					this.dsDelete.setColumn(nRow, "CD_ACNTUNIT"   , this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(0, 6));
					this.dsDelete.setColumn(nRow, "TY_GUBUN"      , this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(6, 1));
					this.dsDelete.setColumn(nRow, "NO_CHASU"      , this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(7, 2));
					this.dsDelete.setColumn(nRow, "NO_SEQ"        , this.dsList.getColumn(i, "NO_SEQ"));
					this.dsDelete.setColumn(nRow, "DT_RECEIVED"   , this.dsList.getColumn(i, "DT_RECEIVED"));
					this.dsDelete.setColumn(nRow, "DS_REMARK"     , this.dsList.getColumn(i, "DS_REMARK"));
					this.dsDelete.setColumn(nRow, "ID_INSERT"     , this.AuthClient.ID_USER);
				break;
		}
	}
	
	if (this.dsDelete.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "delete=dsDelete";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction(strSvcId, 		// transaction을 구분하기 위한 svc id값
						strSvcType, 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData, 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData, 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); 	// 통신방법 정의 [생략가능]

};

this.fnUpdate = function($flag) {

	if(!this.gfnGridValidate(this.dxGrid)) return false;
	
	this.dxGrid.updateToDataset();
	
	this.dsInsertFBS.clearData();
	this.dsDeleteFBS.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		
		switch($flag) {
			case "AutoSunap" :	// 수납처리.
					
					if(this.dsList.getColumn(i, "CHK") == "1") {
						var nRow = this.dsInsertFBS.addRow();
			
						this.dsInsertFBS.setColumn(nRow, "CD_ACNTUNIT"   , this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(0, 6));
						this.dsInsertFBS.setColumn(nRow, "TY_GUBUN"      , this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(6, 1));
						this.dsInsertFBS.setColumn(nRow, "NO_CHASU"      , this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(7, 2));
						this.dsInsertFBS.setColumn(nRow, "DT_RECEIVED"   , this.dsList.getColumn(i, "DT_RECEIPT"));
						this.dsInsertFBS.setColumn(nRow, "NO_SEQ"        , this.dsList.getColumn(i, "NO_SEQ"));
						this.dsInsertFBS.setColumn(nRow, "YN_OPTION"     , "Y");
						this.dsInsertFBS.setColumn(nRow, "NO_CONTRACT"   , this.dsList.getColumn(i, "NO_CONTRACT"));
						this.dsInsertFBS.setColumn(nRow, "ID_INSERT"     , this.AuthClient.ID_USER);
												
					}
					
				break;
				
			case "AutoSunapFail" :	// 수납실패처리.
					
					if(this.dsList.getColumn(i, "CHK") == "1") {
						var nRow = this.dsDeleteFBS.addRow();
			
						this.dsDeleteFBS.setColumn(nRow, "DT_RECEIVED" , this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(0, 6));
						this.dsDeleteFBS.setColumn(nRow, "NO_SEQ"      , this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(6, 1));
						this.dsDeleteFBS.setColumn(nRow, "DS_REMARK"   , this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(7, 2));
						this.dsDeleteFBS.setColumn(nRow, "ID_UPDATE"   , this.AuthClient.ID_USER);
					}
					
				break;
			
		}
	}
	
	if (this.dsInsertFBS.rowcount == 0 && this.dsDeleteFBS.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "insert=dsInsertFBS updateFBS=dsUpdateFBS";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction(strSvcId, 		// transaction을 구분하기 위한 svc id값
						strSvcType, 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData, 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData, 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); 	// 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {	

	if (this.gfnIsNull(this.dsSearch.getColumn(0, "CD_ACNTUNIT"))) {
		this.gfnAlert("사업지코드를 입력하지 않았습니다.");
		return false;
	}
	
	if (this.gfnIsNull(this.dsSearch.getColumn(0, "DT_START")) || this.gfnIsNull(this.dsSearch.getColumn(0, "DT_END")))
	{
		this.gfnAlert("입금기간이 입력되지 않았습니다.");
		return false;
	}

	if (this.gfnGetDiffDate(this.dsSearch.getColumn(0, "DT_START"), this.dsSearch.getColumn(0, "DT_END")) < 0)
	{
		this.gfnAlert("완료입금일자는 시작입금일자보다 크거나 같아야 합니다.");
		return false;
	}
	
	return true;
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg) {

	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);
	}
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		}
		else {
			this.gfnAlert(errorMsg);
		}
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/

//코드파인드의 파라미터 값을 넘겨줄때 사용하는 함수
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	
	// 사업지코드
	if (id == "ccfCD_ACNTUNIT") {
		dsUserParam.setColumn(nrow, "CD_DEPT"  , this.AuthClient.CD_DEPT);
		dsUserParam.setColumn(nrow, "ID_USER"  , this.AuthClient.ID_USER);
		dsUserParam.setColumn(nrow, "ID_GROUP" , this.FormInfo.ID_GROUP);
		dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
	}
	
	return true;
}

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/

/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		
		if(e.columnid == "YN_CHKRECEIPT") {
			this.FormBtns.Select.click();
			
			this.fnColorSetter(e.newvalue);
		}
	
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);
	}
};

this.fnColorSetter = function($value) {
	
	var i = 0, len = this.dsList.colcount;
	
	for(i = 0; i < len; ++i) {
		this.dxGrid.setCellProperty("body", i, "cssclass", $value == "Y" ? "Blue" : "");
	}
	
	this.dxGrid.setCellProperty("body" , this.dxGrid.getBindCellIndex("body", "CHK"), "edittype", "expr:YN_CHKRECEIPT == 'N' ? 'checkbox' : 'none'");
	this.dxGrid.setCellProperty("body" , this.dxGrid.getBindCellIndex("body", "CHK"), "cssclass", "expr:YN_CHKRECEIPT == 'N' ? '' : 'BACK_ReadOnly'");
}

this.fnButtonClick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	
	switch(obj.name) {
		case "btnExt_AutoSunap":	// 수납처리
						
				var i = 0, len = this.dsList.rowcount;
				
				for(i = 0; i < len; ++i) {
					if(this.dsList.getColumn(i, "CHK") == "1" && this.dsList.getColumn(i, "YN_CHKRECEIPT") == "N") {
						try {
							this.fnUpdate("AutoSunap");
						} catch(exception) {
							this.fnUpdate("AutoSunapFail");
						}
						return;
					}
				}
				this.gfnAlert("수납처리할 대상을 선택하여 주십시오.");
			break;
			
		case "btnExt_ReceiptMg":	// 수납관리
		
				if(!this.gfnGridIsRow(this.dxGrid)) {return false;}
				
				var hosu = this.dsList.getColumn(this.dsList.rowposition, "HOSU");
				if (!(hosu.length == 3 || hosu.length == 4))
					return;

				var floor = hosu.substr(0, hosu.length - 2).padLeft(2, '0');
				var ho    = hosu.substr(hosu.length - 2, 2).padLeft(3, '0');
				
				var param = {};
				
				param.CD_ACNTUNIT    = this.dsSearch.getColumn(0, "CD_ACNTUNIT");
				param.DS_ACNTUNIT    = this.dsSearch.getColumn(0, "DS_ACNTUNIT");
				param.NO_DONG        = this.dsList.getColumn(this.dsList.rowposition, "NO_DONG");
				param.NO_FLOOR       = floor;
				param.NO_HO          = ho;
				param.DS_CONTRACTOR  = this.dsList.getColumn(this.dsList.rowposition, "DS_CONTRACTOR");
				param.NO_UNIONMEMBER = this.dsList.getColumn(this.dsList.rowposition, "NO_UNIONMEMBER");
				
				this.gfnFormOpen(this.FormInfo.CD_MODULE, "DRF_RECEIPTDETAIL", "", param);
		
			break;
			
		case "btnExt_ExcelData":	// 엑셀자료관리
				
				var param = {};
				
				param.CD_ACNTUNIT = this.dsSearch.getColumn(0, "CD_ACNTUNIT");
				param.DS_ACNTUNIT = this.dsSearch.getColumn(0, "DS_ACNTUNIT");
				param.DT_FROM     = this.dsSearch.getColumn(0, "DT_START");
				param.DT_TO       = this.dsSearch.getColumn(0, "DT_END");
				param.YN_OPTION   = "Y";
				
				this.gfnFormOpen(this.FormInfo.CD_MODULE, "DRC_RECEIPTBATCHEXCEL_NEW", "", param);
				
			break;
	}
}

// 그리드 헤드 클릭 이벤트 재정의
this.fnGrid_onheadclick = function(objGrid, e) {
	var cell = this._gfnGridGetBodyCellIndex(objGrid, e.cell);	
	var colnm = this.gfnGridGetBindColumnNameByIndex(objGrid, cell);
	// 체크박스 클릭한 경우.
	if(colnm == "CHK" && this.dsSearch.getColumn(0, "YN_CHKRECEIPT") == "Y") {
		var sVal = objGrid.getCellProperty("head", e.cell, "text");
		var sChk;
		if (sVal == "1") {
			objGrid.setCellProperty("head", e.cell, "text", "0");
			sChk="0";
		} else {
			objGrid.setCellProperty("head", e.cell, "text", "1");
			sChk="1";
		}
		
		for(var i = 0; i < this.dsList.rowcount; i++)
		{
			if(this.dsList.getColumn(i, "YN_CHKVIEW") == "Y")
			{
				this.dsList.setColumn(i, "CHK", sChk);
			}
		}
	}
	// 체크박스를 클릭한게 아니라면 기존의 공통의 그리드 헤드 클릭 이벤트를 탄다.
	else {
		this.gfnGrid_onheadclick(objGrid, e);
	}
};]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DRCPR_AUTORECEIPT_BATCH_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">insert</Col>
            <Col id="SP">DRCPR_FBS_AUTORECEIPT_MIGRATION</Col>
          </Row>
          <Row>
            <Col id="TARGET">update</Col>
            <Col id="SP">DRCPR_AUTORECEIPT_BATCH_UPDATE</Col>
          </Row>
          <Row>
            <Col id="TARGET">delete</Col>
            <Col id="SP">DRCPR_AUTORECEIPT_DELETE</Col>
          </Row>
          <Row>
            <Col id="TARGET">deleteFBS</Col>
            <Col id="SP">DRCPR_FBS_AUTORECEIPT_MIGRATION_ERR</Col>
          </Row>
          <Row>
            <Col id="TARGET">deleteFBSTrade</Col>
            <Col id="SP">DRCPR_FBS_TRADE_UPLOAD_SHINYOUNG</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_ACNTUNIT" type="STRING" size="256"/>
          <Column id="DS_ACNTUNIT" type="STRING" size="256"/>
          <Column id="DT_START" type="STRING" size="256"/>
          <Column id="DT_END" type="STRING" size="256"/>
          <Column id="YN_CHKRECEIPT" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CD_ACNTUNIT"/>
            <Col id="DS_ACNTUNIT"/>
          </Row>
        </Rows>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfCD_ACNTUNIT.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_ACNTUNIT"/>
      <BindItem id="item1" compid="divSearch.form.ccfCD_ACNTUNIT.form.DSTextBox" propid="value" datasetid="dsSearch" columnid="DS_ACNTUNIT"/>
      <BindItem id="item4" compid="divSearch.form.ctclDT_START" propid="value" datasetid="dsSearch" columnid="DT_START"/>
      <BindItem id="item5" compid="divSearch.form.ctclDT_END" propid="value" datasetid="dsSearch" columnid="DT_END"/>
      <BindItem id="item6" compid="divSearch.form.ccboYN_CHKRECEIPT" propid="value" datasetid="dsSearch" columnid="YN_CHKRECEIPT"/>
    </Bind>
  </Form>
</FDL>
