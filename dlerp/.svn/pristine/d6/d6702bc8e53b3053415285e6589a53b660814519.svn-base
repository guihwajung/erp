<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1400" height="720" titletext="현장공통매입세액관리" onload="form_onload">
    <Layouts>
      <Layout stepcount="0">
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg">
          <Layouts>
            <Layout>
              <Static id="staCD_CORP" taborder="0" text="법인코드" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfCD_CORP" CodeFindName="DHX_CFCORP" CDTextWidth="50" taborder="1" left="staCD_CORP:0.0" top="10.0" width="240" height="24.0" url="cmm::cmmCodeFind.xfdl" text=""/>
              <Static id="sta00" taborder="0" text="세무단위" left="ccfCD_CORP:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfCD_DEPT" CodeFindName="DHX_CFSELFACNT" CDTextWidth="70" taborder="1" left="sta00:0.0" top="10.0" width="300" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
              <Static id="staYY_WORK" taborder="2" text="작성년도" left="ccfCD_DEPT:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ctclYY_WORK" taborder="3" left="staYY_WORK:0.0" top="10.0" width="60" height="24.0" url="cmm::cmmCalYY.xfdl"/>
              <Static id="staYY_WORK00" taborder="4" text="작성기수" left="ctclYY_WORK:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Combo id="ccboNO_TAX" taborder="5" text="cbo00" left="staYY_WORK00:0.0" top="10.0" width="98" height="24.0" codecolumn="CD_CODE" datacolumn="DS_CODE" innerdataset="dsNO_TAX"/>
              <Edit id="ctxtDT_FROM" taborder="6" left="ccboNO_TAX:0.0" top="10.0" height="24.0" autoselect="true" width="80" textAlign="left" inputtype="digit" text="2020-04-04" readonly="true"/>
              <Static id="staDT_WORK" taborder="7" text="~" left="ctxtDT_FROM:0.0" top="10.0" width="30.0" height="24.0" cssclass="sta_WF_AC"/>
              <Edit id="ctxtDT_TO" taborder="8" left="staDT_WORK:0.0" top="10.0" height="24.0" autoselect="true" width="80" textAlign="left" inputtype="digit" text="2020-04-04" readonly="true"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="30" bottom="0" right="0" cssclass="div_DATA_Bg" text="">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="15" right="0" bottom="0"/>
              <Radio id="rdoYN_DEP" taborder="1" left="405" top="-34" width="200" height="20" onitemchanged="rdo00_onitemchanged" index="-1" text="" value="" innerdataset="dsYN_DEP" datacolumn="VALUE" codecolumn="CODE" fittocontents="width" direction="vertical"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------// 
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetVariable();
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetParameter();
	this.fnSetEvent(); 
	
	this.dsSearch.setColumn(0, "CD_CORP", this.AuthClient.CD_CORP);
	this.dsSearch.setColumn(0, "DS_CORP", this.AuthClient.DS_CORP);

	this.dsSearch.setColumn(0, "CD_DEPT", this.UserInfo.CD_DEPT_SELFACNT);
	if (!this.gfnIsNull(this.dsSearch.getColumn(0, "CD_DEPT")))
		this.ccfCD_DEPT.form.fnCodeFindLoad();
		
	this.dsSearch.setColumn(0, "YY_WORK", this.gfnGetDate().substring(0, 4));

	var month = nexacro.toNumber(this.gfnGetDate().substr(4,2),0);
	var selectedIndex = 0;
	if(month >= 4 && month <= 6){
		selectedIndex = 1;
	}else if(month >= 7 && month <= 9){
		selectedIndex = 2;
	}else if(month >= 10 && month <= 12){
		selectedIndex = 3;
	}	
	this.ccboNO_TAX.set_index(selectedIndex);
}; 

this.fnSetButton = function() {
}

this.fnSetExtendButton = function() {
	this.btnCreate = this.gfnFormButtonAdd("Create", "fnCreate");					//자료생성 
//  	this.btnIssueSlip = this.gfnFormButtonAdd("IssueSlip", "fnIssueSlip"); 			//전표발행
//  	this.btnDetailSlip = this.gfnFormButtonAdd("DetailSlip", "fnDetailSlip"); 		//전표조회
//  	this.btnCancelSlip = this.gfnFormButtonAdd("CancelSlip", "fnCancelSlip"); 		//전표취소
//  	this.btnEntireClick = this.gfnFormButtonAdd("EntireClick", "fnEntireClick"); 	//전체선택
//  	this.btnEntireCancel = this.gfnFormButtonAdd("EntireCancel", "fnEntireCancel");	//전체선택취소
	
//	this.btnCreate.set_enable(false);
// 	this.btnIssueSlip.set_enable(false);
// 	this.btnDetailSlip.set_enable(false);
// 	this.btnCancelSlip.set_enable(false);
// 	this.btnEntireClick.set_enable(false);
// 	this.btnEntireCancel.set_enable(false);
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.ccfCD_CORP = this.divSearch.form.ccfCD_CORP;	// 법인코드
	this.ccfCD_DEPT = this.divSearch.form.ccfCD_DEPT;
	this.ctclYY_WORK = this.divSearch.form.ctclYY_WORK;
	this.ccboNO_TAX = this.divSearch.form.ccboNO_TAX;
	this.ctxtDT_FROM = this.divSearch.form.ctxtDT_FROM;
	this.ctxtDT_TO = this.divSearch.form.ctxtDT_TO;

	this.dxGrid = this.divData.form.objGrid;
};

this.fnSetEvent = function() {		
	this.gfnGridInit(this.dxGrid, this.dsList, "DH", "DHV_DIVDEPT_SITE_ALL");

	this.dxGrid.addEventHandler("onselectchanged", this.fnGrid_RowCellChanged, this);
	this.dxGrid.AfterEdit = "fnGrid_AfterEdit";
	this.dxGrid.EnterCell = "fnGrid_EnterCell";
	
	this.ccfCD_CORP.AfterCDTextChanged = "fnAfterCDTextChanged";
	this.ccfCD_CORP.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.ccfCD_DEPT.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
}

this.fnSetParameter = function() {
	this.dsSelect = new Dataset();	
	this.dsSelect.addColumn("CD_DEPT_ACNT", "string");
	this.dsSelect.addColumn("YM_MAGAM", "string");
	this.dsSelect.addColumn("DT_FROM", "string");
	this.dsSelect.addColumn("DT_TO", "string");
	
	this.dsUpdate = new Dataset();
	this.dsUpdate.addColumn("CD_DEPT_ACNT", "string");
	this.dsUpdate.addColumn("YM_ACCOUNT", "string");
	this.dsUpdate.addColumn("AM_COMMBILLADJ", "decimal");
	this.dsUpdate.addColumn("AM_BGJ_SANBILL", "decimal");
	this.dsUpdate.addColumn("AM_BGJ_BILL", "decimal");
	this.dsUpdate.addColumn("AM_BGJ_GITOT", "decimal");
	this.dsUpdate.addColumn("AM_BGJ_CHATOT", "decimal");
	this.dsUpdate.addColumn("YN_BONSA", "string");
	
	this.dsCreate = new Dataset();
	this.dsCreate.addColumn("CD_DEPT_SELFACNT", "string");
	this.dsCreate.addColumn("YM_MAGAM", "string");
	this.dsCreate.addColumn("ID_INSERT", "string");
	this.dsCreate.addColumn("DT_FROM", "string");
	this.dsCreate.addColumn("DT_TO", "string");
	
	this.dsIssueSlip = new Dataset();
	this.dsIssueSlip.addColumn("FLAG", "string");
	this.dsIssueSlip.addColumn("YM_ACCOUNT", "string");
	this.dsIssueSlip.addColumn("CD_DEPT_ACNT", "string");
	this.dsIssueSlip.addColumn("CD_DEPT_BH", "string");
	this.dsIssueSlip.addColumn("ID_INSERT", "string");
	this.dsIssueSlip.addColumn("DT_FROM", "string");
	this.dsIssueSlip.addColumn("DT_TO", "string");
	
	this.dsCancelSlip = new Dataset();
	this.dsCancelSlip.addColumn("CD_DEPT_ACNT", "string");
	this.dsCancelSlip.addColumn("YM_MAGAM", "string");
	this.dsCancelSlip.addColumn("CD_TRADE", "string");
	this.dsCancelSlip.addColumn("ID_INSERT", "string");
	this.dsCancelSlip.addColumn("FLAG", "string");
	
	this.dsSelectUser = new Dataset();
	this.dsSelectUser.addColumn("ID_USER", "string");
	this.dsSelectUser.addColumn("CD_DEPT", "string");
};

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
this.fnSelect = function() {
	if (!this.fnSelectValidation()) return;

	this.gfnGridBeforeSelect(this.dxGrid);

	this.dsSelect.clearData();
	this.dsSelect.addRow();
	
	this.dsSelect.setColumn(0, "CD_DEPT_ACNT", this.gfnTrim(this.dsSearch.getColumn(0, "CD_DEPT")));
	this.dsSelect.setColumn(0, "YM_MAGAM", this.dsSearch.getColumn(0, "YY_WORK"));
	this.dsSelect.setColumn(0, "DT_FROM", nexacro.replaceAll(this.dsSearch.getColumn(0, "DT_FROM"), "-", ""));
	this.dsSelect.setColumn(0, "DT_TO", nexacro.replaceAll(this.dsSearch.getColumn(0, "DT_TO"), "-", ""));
		
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect"; 
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
};

this.fnSave = function() {
	if (!this.gfnGridValidate(this.dxGrid)) return;	
	
	this.dxGrid.updateToDataset();
	
	this.dsUpdate.clearData();

	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "U":		
				var nrow = this.dsUpdate.addRow();
				this.dsUpdate.setColumn(nrow, "CD_DEPT_ACNT", this.dsList.getColumn(i, "CD_DEPT_ACNT"));
				this.dsUpdate.setColumn(nrow, "YM_ACCOUNT", nexacro.replaceAll(this.dsSearch.getColumn(0, "DT_TO"), "-", ""));
				this.dsUpdate.setColumn(nrow, "AM_COMMBILLADJ", this.dsList.getColumn(i, "AM_COMMBILLADJ"));
				this.dsUpdate.setColumn(nrow, "AM_BGJ_SANBILL", this.dsList.getColumn(i, "AM_BGJ_SANBILL"));
				this.dsUpdate.setColumn(nrow, "AM_BGJ_BILL", this.dsList.getColumn(i, "AM_BGJ_BILL"));
				this.dsUpdate.setColumn(nrow, "AM_BGJ_GITOT", this.dsList.getColumn(i, "AM_BGJ_GITOT"));
				this.dsUpdate.setColumn(nrow, "AM_BGJ_CHATOT", this.dsList.getColumn(i, "AM_BGJ_CHATOT"));
				this.dsUpdate.setColumn(nrow, "YN_BONSA", "N");
				break;
		}
	}

	if (this.dsUpdate.rowcount == 0) return;

	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "update=dsUpdate";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

this.fnPrint = function() {

}

/************************************************************************
 * Validate
 ************************************************************************/
this.fnSelectValidation = function() {
	if (this.gfnIsNull(this.dsSearch.getColumn(0, "CD_DEPT"))) {
		this.fnVaidateCallback = function() {
			this.ccfCD_DEPT.form.CDTextBox.setFocus();
		}
		this.gfnAlert("세무단위를 입력하세요.", "fnVaidateCallback");
		return false;
	}
	
	if (this.gfnIsNull(this.dsSearch.getColumn(0, "YY_WORK"))) {
		this.fnVaidateCallback = function() {
			this.ctclYY_WORK.form.TextBox.setFocus();
		}
		this.gfnAlert("작성년도를 입력하세요.", "fnVaidateCallback");
		return false;
	}
	
	if(this.gfnIsNull(this.dsSearch.getColumn(0, "NO_TAX"))) {
		this.fnVaidateCallback = function() {
			this.ccboNO_TAX.setFocus();
		}
		this.gfnAlert("작성기수를 입력하세요.", "fnVaidateCallback");
		return false;
	}
	
	return true;
}

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
this.fnCallback = function(svcID, errorCode, errorMsg) {

	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);
		
		if (this.dsList.rowcount > 0) {
/*			this.btnCreate.set_enable(true);*/
		}
		
		
		for (var i = 0; i < this.dsList.rowcount; i++) {
			if (!this.gfnIsNull(this.dsList.getColumn(i, "CD_SLIP"))) {
				this.btnCreate.set_enable(false);
				break;
			}
		}
	}
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}		
	}
	else if (svcID == "create") {
		if (errorCode == 0) {
			this.fnExecute_callback = function() {
				this.FormBtns.Select.click();
			}
			this.gfnAlert("생성되었습니다.", "fnExecute_callback");
		}
		else {
			this.gfnAlert(errorMsg);
		}
	}
	else if (svcID == "issueSlip"){	
		if (errorCode == 0) {
			this.fnExecute_callback = function() {
				this.FormBtns.Select.click();
			}
			this.gfnAlert("전표가 발행 되었습니다.", "fnExecute_callback");
		}
		else {
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "cancelSlip"){	
		if (errorCode == 0) {
			this.fnExecute_callback = function() {
				this.FormBtns.Select.click();
			}
			this.gfnAlert("전표가 취소 되었습니다.", "fnExecute_callback");
		}
		else {
			this.gfnAlert(errorMsg);
		}
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	var cdCorp = this.dsSearch.getColumn(0, "CD_CORP");
	switch(id) {
		case "ccfCD_CORP": // 법인코드
			dsUserParam.setColumn(nrow, "ID_SABUN", this.AuthClient.ID_USER);
			break;	
		
		case "ccfCD_DEPT": // 세무단위
			if (this.gfnIsNull(cdCorp)) {
				this.gfnAlert("법인코드를 먼저 선택하세요.");
				this.ccfCD_CORP.form.CDTextBox.setFocus();
				return false;
			}
			dsUserParam.setColumn(nrow, "CD_CORP", cdCorp);
			//dsUserParam.setColumn(nrow, "LV_DEPT", this.UserInfo.LEVLV_DEPT_ACNT);
			break;
	}

	return true;
};

this.fnAfterCDTextChanged = function(id, codeFindData) {
	var arrData = codeFindData;
	
	switch(id) {
		case "ccfCD_CORP": // 법인코드
			this.ccfCD_DEPT.form.fnCodeFindClear();
			break;
	}
	return true;
};


/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
 this.fnGrid_RowCellChanged = function(obj:nexacro.Grid,e:nexacro.GridSelectEventInfo)
{	
// 	if ((obj.oldrow > -1 && obj.oldrow == e.row)
// 		|| (obj.oldrow == -1 && e.oldrow != e.row)) {
// 			if (this.gfnIsNull(this.dsList.getColumn(e.row, "CD_SLIP")))
// 				this.btnDetailSlip.set_enable(false);
// 			else
// 				this.btnDetailSlip.set_enable(true);
// 		obj.oldrow = -1;
// 	}
};

this.fnGrid_AfterEdit = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo) {
	if (e.oldvalue != e.newvalue) {
		if (e.columnid == "AM_COMMBILLADJ") {
			var dTT1 = nexacro.toNumber(this.dsList.getColumn(e.row, "AM_COMMBILL") - this.dsList.getColumn(e.row, "AM_COMMBILLADJ"), 0);
			this.dsList.setColumn(e.row, "AM_COMMBILLSPLIT", dTT1);
			var dTT2 = nexacro.toNumber(this.dsList.getColumn(e.row, "AM_COMMBILLSPLIT") * this.dsList.getColumn(e.row, "RT_RATE"), 0);
			this.dsList.setColumn(e.row, "AM_BGJ_SANBILL", dTT2);
			var dTT3 = nexacro.toNumber(this.dsList.getColumn(e.row, "AM_BGJ_SANBILL") - this.dsList.getColumn(e.row, "AM_BGJ_GIBILL"), 0);
			this.dsList.setColumn(e.row, "AM_BGJ_BILL", dTT3);
			var dTT4 = nexacro.toNumber(this.dsList.getColumn(e.row, "AM_BGJ_BILL") + this.dsList.getColumn(e.row, "AM_BGJ_CARD") - this.dsList.getColumn(e.row, "AM_BGJ_GITOT"), 0);
			this.dsList.setColumn(e.row, "AM_BGJ_CHATOT", dTT4);
		}
		else if (e.columnid == "AM_BGJ_GITOT") {
			var dTT5 = nexacro.toNumber(this.dsList.getColumn(e.row, "AM_BGJ_BILL") + this.dsList.getColumn(e.row, "AM_BGJ_CARD") - this.dsList.getColumn(e.row, "AM_BGJ_GITOT"), 0);
			this.dsList.setColumn(e.row, "AM_BGJ_CHATOT", dTT5);
		}
	}
};

this.fnGrid_EnterCell = function(obj:nexacro.Grid, row, cell) {
	var colnm = this.gfnGridGetBindColumnNameByIndex(this.dxGrid, cell);
	if (colnm == "AM_BGJ_GITOT") {
		if(this.gfnIsNull(this.dsList.getColumn(row, "CD_SLIP")))
			return true;
		else
			return false;
	}
}

/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo) {
    if (e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);
		this.gfnGridClear(this.dxGrid);	

		switch(e.columnid) {
			case "YY_WORK" :
			case "NO_TAX" :
				this.fnMagamSetting();
				break;
		}
    }
}

this.fnMagamSetting = function() {
	var dtFrom;
	var dtTo;
	
	var ymMagam = this.dsSearch.getColumn(0, "YY_WORK");
	var noTax = this.dsSearch.getColumn(0, "NO_TAX");
	
	if (this.gfnIsNull(ymMagam) || this.gfnIsNull(noTax)) {
		dtFrom = "";
		dtTo = "";
	}
	else {
		switch(noTax) {
			case "1" :
				dtFrom = ymMagam + "-01";
				dtTo = ymMagam + "-03";
				break;
			case "2" :
				dtFrom = ymMagam + "-04";
				dtTo = ymMagam + "-06";
				break;
			case "3" :
				dtFrom = ymMagam + "-07";
				dtTo = ymMagam + "-09";
				break;
			case "4" :
				dtFrom = ymMagam + "-10";
				dtTo = ymMagam + "-12";
				break;
			default :
				dtFrom = "";
				dtTo = "";
				break;
		}
	}
	
	this.dsSearch.setColumn(0, "DT_FROM", dtFrom);
	this.dsSearch.setColumn(0, "DT_TO", dtTo);
}

//자료생성
this.fnCreate = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	this.gfnConfirm("자료생성을 하시겠습니까?", "fnCreate_callBack");
}

this.fnCreate_callBack = function(strId, val) {
	if (val == false) return;
	
	this.dsCreate.clearData();
	this.dsCreate.addRow();
	
	this.dsCreate.setColumn(0, "CD_DEPT_SELFACNT", this.dsSearch.getColumn(0, "CD_DEPT"));
	this.dsCreate.setColumn(0, "YM_MAGAM", nexacro.replaceAll(this.dsSearch.getColumn(0, "DT_TO"), "-", ""));
	this.dsCreate.setColumn(0, "ID_INSERT", this.AuthClient.ID_USER);
	this.dsCreate.setColumn(0, "DT_FROM", nexacro.replaceAll(this.dsSearch.getColumn(0, "DT_FROM"), "-", ""));
	this.dsCreate.setColumn(0, "DT_TO", nexacro.replaceAll(this.dsSearch.getColumn(0, "DT_TO"), "-", ""));
	
	var strSvcId    = "create";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "create=dsCreate";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
};

//전표발행
this.fnIssueSlip = function (obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	var chkcnt = 0;
	var chkslip = 0;
	for (var i = 0; i < this.dsList.rowcount; i++) {
		if (this.dsList.getColumn(i, "YN_SLIP") == 1) {
			chkcnt++;
			
			if (!this.gfnIsNull(this.dsList.getColumn(i, "CD_SLIP")))
				chkslip++;
		}
	}
	
	if (chkcnt == 0) {
		this.gfnAlert("전표발행 대상을 선택 하세요.");
		return;
	}
	
	if (chkslip > 0) {
		this.gfnAlert("전표발행 대상만 선택하세요.");
		return;
	}

	this.gfnConfirm("전표발행 작업을 수행하시겠습니까?", "fnIssueSlip_callback");
};

this.fnIssueSlip_callback = function(strId, val) {
	if (val == true) {
		this.dsIssueSlip.clearData();
		
		for (var i = 0; i < this.dsList.rowcount; i++) {
			if (this.dsList.getColumn(i, "YN_SLIP") == 1 && this.dsList.getColumn(i, "AM_BGJ_CHATOT") != "") {
				var nRow = this.dsIssueSlip.addRow();
				this.dsIssueSlip.setColumn(nRow, "FALG", "현장");
				this.dsIssueSlip.setColumn(nRow, "YM_ACCOUNT", nexacro.replaceAll(this.dsSearch.getColumn(0, "DT_TO"), "-", ""));
				this.dsIssueSlip.setColumn(nRow, "CD_DEPT_ACNT", this.dsList.getColumn(i, "CD_DEPT_ACNT"));
				this.dsIssueSlip.setColumn(nRow, "CD_DEPT_BH", this.AuthClient.CD_DEPT);
				this.dsIssueSlip.setColumn(nRow, "ID_INSERT", this.AuthClient.ID_USER);
				this.dsIssueSlip.setColumn(nRow, "DT_FROM", nexacro.replaceAll(this.dsSearch.getColumn(0, "DT_FROM"), "-", ""));
				this.dsIssueSlip.setColumn(nRow, "DT_TO", nexacro.replaceAll(this.dsSearch.getColumn(0, "DT_TO"), "-", ""));
			}
		}
		
		var strSvcId    = "issueSlip";
		var strSvcType  = "save";
		var inProc		= "_dsProc";
		var inData      = "issueSlip=dsIssueSlip";
		var outData     = "";
		var strArg      = "";
		var callBackFnc = "fnCallback";
		
		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
							strSvcType , 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
							callBackFnc); 	// 통신방법 정의 [생략가능]
	}
};

//전표 조회 
this.fnDetailSlip = function (obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	if (this.gfnIsNull(nexacro.replaceAll(this.gfnTrim(this.gfnNvl(this.dsList.getColumn(this.dsList.rowposition, "CD_SLIP"),"")),"-",""))) {
		return;
	}

	var param = {};
	param.CD_TRADE = this.gfnTrim(nexacro.replaceAll(this.dsList.getColumn(this.dsList.rowposition, "CD_SLIP"), "-", "").substr(0, 20));
	param.IUD_FLAG = "S";
	param.strYN_JUNDO_START = "";
	
	this.gfnFormOpen("DHA", "DHA_ISSUESLIP", "fnPopupCallBack", param);	
};

this.fnPopupCallback = function(strId, val) {
	if (strId.indexOf("DHA_ISSUESLIP") > 0) {
		this.FormBtns.Select.click();
	}
};

//전표취소
this.fnCancelSlip = function (obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	this.gfnConfirm("기존에 발행된 전표를 취소하시겠습니까?", "fnCancelSlip_callback");
};

this.fnCancelSlip_callback = function(strId, val) {
	if (val == true) {
		this.dsCancelSlip.clearData();
		
		for (var i = 0; i < this.dsList.rowcount; i++) {
			if (this.dsList.getColumn(i, "YN_SLIP") == 1 && this.dsList.getColumn(i, "AM_BGJ_CHATOT") != "") {
				var nRow = this.dsCancelSlip.addRow();
				this.dsCancelSlip.setColumn(nRow, "CD_DEPT_ACNT", this.dsList.getColumn(i, "CD_DEPT_ACNT"));
				this.dsCancelSlip.setColumn(nRow, "YM_MAGAM", nexacro.replaceAll(this.dsSearch.getColumn(0, "DT_TO"), "-", ""));
				this.dsCancelSlip.setColumn(nRow, "CD_TRADE", nexacro.replaceAll(this.dsList.getColumn(i, "CD_SLIP"), "-", ""));
				this.dsCancelSlip.setColumn(nRow, "ID_INSERT", this.AuthClient.ID_USER);
				this.dsCancelSlip.setColumn(nRow, "FLAG", "");
			}
		}
		
		var strSvcId    = "cancelSlip";
		var strSvcType  = "save";
		var inProc		= "_dsProc";
		var inData      = "cancelSlip=dsCancelSlip";
		var outData     = "";
		var strArg      = "";
		var callBackFnc = "fnCallback";
		
		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
							strSvcType , 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
							callBackFnc); 	// 통신방법 정의 [생략가능]
	}
};

//전체선택
this.fnEntireClick = function (obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	for (var i = 0; i < this.dsList.rowcount; i++) {
		this.dsList.setColumn(i, "YN_SLIP", 1);
	}
}

//전체선택취소
this.fnEntireCancel = function (obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	for (var i = 0; i < this.dsList.rowcount; i++) {
		this.dsList.setColumn(i, "YN_SLIP", 0);
	}
}
]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DHVPR_DIVDEPT_SITE_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">update</Col>
            <Col id="SP">DHVPR_DIVDEPT_SITE_UPDATE</Col>
          </Row>
          <Row>
            <Col id="TARGET">create</Col>
            <Col id="SP">DHVPR_DIVDEPT_MAGAM_SITE</Col>
          </Row>
          <Row>
            <Col id="TARGET">issueSlip</Col>
            <Col id="SP">DHVPR_DIVDEPT_SITE_DHV0096</Col>
          </Row>
          <Row>
            <Col id="TARGET">cancelSlip</Col>
            <Col id="SP">DHVPR_DIVDEPT_SITE_ISSUECANCEL</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_DEPT" type="STRING" size="256"/>
          <Column id="DS_DEPT" type="STRING" size="256"/>
          <Column id="YY_WORK" type="STRING" size="256"/>
          <Column id="NO_TAX" type="STRING" size="256"/>
          <Column id="DT_FROM" type="STRING" size="256"/>
          <Column id="DT_TO" type="STRING" size="256"/>
          <Column id="CD_CORP" type="STRING" size="256"/>
          <Column id="DS_CORP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
      <Dataset id="dsNO_TAX">
        <ColumnInfo>
          <Column id="CD_CODE" type="STRING" size="256"/>
          <Column id="DS_CODE" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CD_CODE">1</Col>
            <Col id="DS_CODE">1기예정</Col>
          </Row>
          <Row>
            <Col id="CD_CODE">2</Col>
            <Col id="DS_CODE">1기확정</Col>
          </Row>
          <Row>
            <Col id="CD_CODE">3</Col>
            <Col id="DS_CODE">2기예정</Col>
          </Row>
          <Row>
            <Col id="CD_CODE">4</Col>
            <Col id="DS_CODE">2기확정</Col>
          </Row>
        </Rows>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfCD_DEPT.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_DEPT"/>
      <BindItem id="item1" compid="divSearch.form.ccfCD_DEPT.form.DSTextBox" propid="value" datasetid="dsSearch" columnid="DS_DEPT"/>
      <BindItem id="item2" compid="divSearch.form.ctclYY_WORK.form.TextBox" propid="value" datasetid="dsSearch" columnid="YY_WORK"/>
      <BindItem id="item3" compid="divSearch.form.ccboNO_TAX" propid="value" datasetid="dsSearch" columnid="NO_TAX"/>
      <BindItem id="item4" compid="divSearch.form.ctxtDT_FROM" propid="value" datasetid="dsSearch" columnid="DT_FROM"/>
      <BindItem id="item5" compid="divSearch.form.ctxtDT_TO" propid="value" datasetid="dsSearch" columnid="DT_TO"/>
      <BindItem id="item6" compid="divSearch.form.ccfCD_CORP.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_CORP"/>
      <BindItem id="item7" compid="divSearch.form.ccfCD_CORP.form.DSTextBox" propid="value" datasetid="dsSearch" columnid="DS_CORP"/>
    </Bind>
  </Form>
</FDL>
