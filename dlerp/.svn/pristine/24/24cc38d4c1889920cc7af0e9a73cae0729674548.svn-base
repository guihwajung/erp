<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="New Form" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg" formscrolltype="none">
          <Layouts>
            <Layout>
              <Static id="staYR_MAGAM" taborder="0" text="평가년도" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ctclYR_MAGAM" taborder="1" left="staYR_MAGAM:0.0" top="10.0" width="70" height="24.0" url="cmm::cmmCalYY.xfdl"/>
              <Div id="ccfNO_SEQ" CodeFindName="DCX_CFEVALUE_NOSEQ" CDTextWidth="40" taborder="2" left="ctclYR_MAGAM:0.0" top="10.0" width="300" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0" oncellclick="divData_objGrid_oncellclick"/>
              <Grid id="objGridExcel" taborder="1" left="65" top="50" bottom="305" right="685" oncellclick="divData_objGrid_oncellclick" visible="false"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	this.fnSetYear();
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btnSubmit = this.gfnFormButtonAdd("btnSubmit", "fnSubmit");
	this.btnSubmitCancel = this.gfnFormButtonAdd("btnSubmitCancel", "fnSubmitCancel");
	//this.btnDetail = this.gfnFormButtonAdd("btnDetail", "fnDetail");
	this.btnExcelUpload = this.gfnFormButtonAdd("btnExcelUpload", "fnExcelUpload"); //엑셀업로드
	this.btnExcelDownload = this.gfnFormButtonAdd("btnExcelDownload", "fnExcelDownload"); //엑셀다운로드
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {	
	this.dxGrid = this.divData.form.objGrid;
	this.dxGridExcel = this.divData.form.objGridExcel;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	this.divSearch.form.ccfNO_SEQ.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";

	// 그리드 초기화
	this.gfnGridInit(this.dxGrid, this.dsList, "DC", "DCD_EVALUEMAGAM_BONSA_CS");
	this.gfnGridInit(this.dxGridExcel, this.dsList, "DC", "DCD_EVALUEMAGAM_BONSA_CS_EXCEL");
	
	this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforeUserDataSetParam";
};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("YR_MAGAM", "string");
	this.dsSelect.addColumn("NO_SEQ", "string");
	this.dsSelect.addColumn("TY_SYSTEM", "string");

	this.dsSubmit = new Dataset();
	this.dsSubmit.addColumn("YR_MAGAM", "string");
	this.dsSubmit.addColumn("NO_SEQ", "string");
	this.dsSubmit.addColumn("YN_SUBMIT", "string");
	this.dsSubmit.addColumn("TY_SYSTEM", "string");

	this.dsUpdate = new Dataset();
	this.dsUpdate.addColumn("YR_MAGAM", "string");
	this.dsUpdate.addColumn("NO_SEQ", "string");
	this.dsUpdate.addColumn("CD_VENDOR", "string");
	this.dsUpdate.addColumn("AM_SCORE", "float");
	this.dsUpdate.addColumn("TY_SYSTEM", "string");
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	
	this.dsSelect.setColumn(0, "YR_MAGAM", this.dsSearch.getColumn(0, "YR_MAGAM"));
	this.dsSelect.setColumn(0, "NO_SEQ", this.dsSearch.getColumn(0, "NO_SEQ"));
	this.dsSelect.setColumn(0, "TY_SYSTEM", this.FormInfo.DS_PARAM);
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	//var nrow = this.gfnGridAdd(this.dxGrid); // top (default), bottom, current
}

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	//this.gfnGridDel(this.dxGrid);
}

/*
 *	저장 버튼
 */
this.fnSave = function() {
	// 그리드 필수항목 체크
	if (!this.gfnGridValidate(this.dxGrid)) return;	

	this.dxGrid.updateToDataset();
		
	this.dsUpdate.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "U":
				var nrow = this.dsUpdate.addRow();
				this.dsUpdate.setColumn(nrow, "YR_MAGAM", this.dsList.getColumn(i, "YR_MAGAM"));
				this.dsUpdate.setColumn(nrow, "NO_SEQ", this.dsList.getColumn(i, "NO_SEQ"));
				this.dsUpdate.setColumn(nrow, "CD_VENDOR", this.dsList.getColumn(i, "CD_VENDOR"));
				this.dsUpdate.setColumn(nrow, "AM_SCORE", this.dsList.getColumn(i, "AM_ETC2_B"));
				this.dsUpdate.setColumn(nrow, "TY_SYSTEM", this.FormInfo.DS_PARAM);
				break;
		}
	}
	
	if (this.dsUpdate.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "update=dsUpdate";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {
	var validate = true;
	
	if (this.gfnIsNull(this.dsSearch.getColumn(0,"YR_MAGAM"))) {
		validate = false;
		// Alert후 실행할 처리
		this.fnVaidateCallback = function() {
			this.divSearch.form.ctclYR_MAGAM.form.TextBox.setFocus();
		}
		this.gfnAlert("평가년도를 입력하세요.", "fnVaidateCallback");
	}
	else if (this.gfnIsNull(this.dsSearch.getColumn(0,"NO_SEQ"))) {
		validate = false;
		// Alert후 실행할 처리
		this.fnVaidateCallback = function() {
			this.divSearch.form.ccfNO_SEQ.form.CDTextBox.setFocus();
		}
		this.gfnAlert("평가시기를 입력하세요.", "fnVaidateCallback");
	}
	
	return validate;
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg, strArg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);	
	}
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "year")
	{
		if(this.dsYear.rowcount > 0)
		{
			this.dsSearch.setColumn(0, "YR_MAGAM", this.dsYear.getColumn(0, "YR_MAGAM"));
			this.dsSearch.setColumn(0, "NO_SEQ", this.dsYear.getColumn(0, "NO_SEQ"));
		
			this.divSearch.form.ccfNO_SEQ.form.fnCodeFindLoad();
		}
	}
	else if(svcID == "submit") {
		if (errorCode == 0) {
			this.fnCallback_callback = function()
			{
				this.FormBtns.Select.click();
			}
			
			var msg = "안전 평가 제출되었습니다.";
			
			if((strArg.split(" "))[0] == "N")
			{
				msg = "안전 평가 제출취소 되었습니다.";
			}
			
			this.gfnAlert(msg,"fnCallback_callback");
		} else {
			this.gfnAlert(errorMsg);
		}
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	if(id == "ccfNO_SEQ")
	{
		dsUserParam.setColumn(nrow, "CD_SYSTEM", "DC");
		dsUserParam.setColumn(nrow, "CD_TYPE", "D01");
		dsUserParam.setColumn(nrow, "YR_MAGAM",this.dsSearch.getColumn(0, "YR_MAGAM"));
		dsUserParam.setColumn(nrow, "TY_SYSTEM", this.FormInfo.DS_PARAM);
	}

	return true;
}
/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
 this.fnGrid_BeforeUserDataSetParam = function(id, dsUserParam, nrow){
	if(id == "DCX_CFEVALUEMAGAM_SCORE"){
		dsUserParam.setColumn(nrow, "CD_TYPE", "D03");
	}
	
	return true;
};
/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
	}
};

this.fnSetYear = function()
{
	this.dsYearSelect = new Dataset();
	this.dsYearSelect.addColumn("YR_MAGAM", "string");
	this.dsYearSelect.addColumn("TY_SYSTEM", "string");
	this.dsYearSelect.clearData();
	this.dsYearSelect.addRow();
	
	this.dsYearSelect.setColumn(0, "YR_MAGAM", this.gfnGetDate().substr(0,4));
	this.dsYearSelect.setColumn(0, "TY_SYSTEM", this.FormInfo.DS_PARAM);
	
	var strSvcId    = "year";
	var strSvcType  = "select";
	var inProc		= "_dsProc";
	var inData      = "year=dsYearSelect";
	var outData     = "dsYear=year0";
	var strArg      = "";
	var callBackFnc = "fnCallback";

	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

this.fnSubmit = function()
{
	if (!this.fnSelectValidate()) return false;
	
	var msg = "평가년도 : [" + this.dsSearch.getColumn(0, "YR_MAGAM") + "]"
			+ "\n" + "평가기간 : [" + this.divSearch.form.ccfNO_SEQ.form.DSTextBox.text + "]"
			+ "\n\n" + "안전 평가 제출하시겠습니까?"
	;
	
	this.gfnConfirm(msg,"fnSubmit_callback", "Y");
}

this.fnSubmitCancel = function()
{
	if (!this.fnSelectValidate()) return false;
	
	var msg = "평가년도 : [" + this.dsSearch.getColumn(0, "YR_MAGAM") + "]"
			+ "\n" + "평가기간 : [" + this.divSearch.form.ccfNO_SEQ.form.DSTextBox.text + "]"
			+ "\n\n" + "안전 평가 제출 취소하시겠습니까?"
	;
	
	this.gfnConfirm(msg,"fnSubmit_callback", "N");
}

this.fnSubmit_callback = function(strID, val)
{
	if(val == true)
	{
		this.dsSubmit.clearData();
		
		var nrow = this.dsSubmit.addRow();
		this.dsSubmit.setColumn(nrow, "YR_MAGAM", this.dsSearch.getColumn(0, "YR_MAGAM"));
		this.dsSubmit.setColumn(nrow, "NO_SEQ", this.dsSearch.getColumn(0, "NO_SEQ"));
		this.dsSubmit.setColumn(nrow, "YN_SUBMIT", strID);
		this.dsSubmit.setColumn(nrow, "TY_SYSTEM", this.FormInfo.DS_PARAM);

		if (this.dsSubmit.rowcount == 0) return;
			
		var strSvcId    = "submit";
		var strSvcType  = "save";
		var inProc		= "_dsProc";
		var inData      = "submit=dsSubmit";
		var outData     = "";
		var strArg      = strID;
		var callBackFnc = "fnCallback";
		
		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
							strSvcType , 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
							callBackFnc); // 통신방법 정의 [생략가능]
	}
}

this.fnDetail = function()
{
	if(this.dsList.rowposition < 0) return;

	var param = {};
	
	param.YR_MAGAM = this.dsSearch.getColumn(0, "YR_MAGAM");
	param.NO_SEQ = this.dsSearch.getColumn(0, "NO_SEQ");
	param.DS_SEQ = this.divSearch.form.ccfNO_SEQ.form.DSTextBox.text;
	param.CD_VENDOR = this.dsList.getColumn(this.dsList.rowposition, "CD_VENDOR");
	param.DS_VENDOR = this.dsList.getColumn(this.dsList.rowposition, "DS_VENDOR");
	param.TY_SYSTEM = this.FormInfo.DS_PARAM;
	
	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DCD_EVALUEMAGAM_BONSA_CS_DETAIL", "fnDetail_callback", param);
}

this.fnDetail_callback = function(strId, val)
{
	this.FormBtns.Select.click();
}
this.dsList_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.columnid == "AM_ETC2_B") {
// 		if(e.newvalue > obj.getColumn(e.row, "AM_ETC2")) {
// 			this.gfnAlert("배점기준점수(" + obj.getColumn(e.row, "AM_ETC2") + ")를 초과하여 입력할 수 없습니다.");
// 			obj.setColumn(e.row, "AM_ETC2_B", e.oldvalue);
// 		}
		if(e.newvalue > 100) {
			this.gfnAlert("만점은 100점 입니다.");
			obj.setColumn(e.row, "AM_ETC2_B", e.oldvalue);
		}
	}
};

this.divData_objGrid_oncellclick = function(obj:nexacro.Grid,e:nexacro.GridClickEventInfo)
{
	if(this.dsList.rowposition < 0) return;
	
	if(nexacro.replaceAll(obj.getCellProperty("body", e.cell, "text"), "bind:", "") != "DS_VENDOR") return;

	var param = {};
	
	param.YR_MAGAM = this.dsSearch.getColumn(0, "YR_MAGAM");
	param.NO_SEQ = this.dsSearch.getColumn(0, "NO_SEQ");
	param.CD_VENDOR = this.dsList.getColumn(this.dsList.rowposition, "CD_VENDOR");
	param.TY_SYSTEM = this.FormInfo.DS_PARAM;
	
	this.gfnFormOpen("DCD", "DCD_EVALUEMAGAM_VENDOR_LIST", "", param, 800, 400);	
};

this.fnExcelDownload = function() {
	this.gfnExcelExport(this.dxGridExcel);
}

this.fnExcelUpload = function() {	
	this.gfnExcelImport("dsExcel","","A3","fnExcelImportCallback","import",this);
};

this.fnExcelImportCallback = function(sImportId, dsOut, dsSheet) {

    dsOut.updateColID("Column1", "NO_SJC");
	dsOut.updateColID("Column3", "AM_ETC2_B");
	
	for (var i = 0; i < dsOut.rowcount; i++) {
	    var dsOutVendor = dsOut.getColumn(i, "NO_SJC");
	    for (var j = 1; j < this.dsList.rowcount; j++) {
			var dsListVendor = this.dsList.getColumn(j, "NO_SJC");
			
			if(dsOutVendor.toString() == dsListVendor.toString()){
				this.dsList.setColumn(j, "AM_ETC2_B"	  , dsOut.getColumn(i, "AM_ETC2_B"));
				this.dsList.setColumn(j, "AM_ETC2"	  , 0);
			}
	    }
	}
};]]></Script>
    <Objects>
      <Dataset id="dsList" onvaluechanged="dsList_onvaluechanged"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DCDPR_EVALUEMAGAM_BONSA_CS_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">update</Col>
            <Col id="SP">DCDPR_EVALUEMAGAM_BONSA_CS_UPDATE</Col>
          </Row>
          <Row>
            <Col id="TARGET">submit</Col>
            <Col id="SP">DCDPR_EVALUEMAGAM_BONSA_CS_SUBMIT</Col>
          </Row>
          <Row>
            <Col id="TARGET">year</Col>
            <Col id="SP">DCDPR_EVALUEMAGAM_YEAR_MAX_SELECT</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="YR_MAGAM" type="STRING" size="256"/>
          <Column id="NO_SEQ" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
      <Dataset id="dsYear"/>
      <Dataset id="dsExcel" onvaluechanged="dsList_onvaluechanged"/>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ctclYR_MAGAM.form.TextBox" propid="value" datasetid="dsSearch" columnid="YR_MAGAM"/>
      <BindItem id="item1" compid="divSearch.form.ccfNO_SEQ.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="NO_SEQ"/>
    </Bind>
  </Form>
</FDL>
