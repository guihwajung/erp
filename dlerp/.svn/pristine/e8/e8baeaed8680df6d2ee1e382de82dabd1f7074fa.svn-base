<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="New Form" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg">
          <Layouts>
            <Layout>
              <Static id="sta02" taborder="1" text="사용여부" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Radio id="rdoYN_USE" taborder="0" left="sta02:0.0" top="10.0" width="200" height="24.0" innerdataset="innerdataset" codecolumn="codecolumn" datacolumn="datacolumn" direction="vertical" index="1" text="사용" value="Y" onitemchanged="divSearch_rdoYN_USE_onitemchanged">
                <Dataset id="innerdataset">
                  <ColumnInfo>
                    <Column id="codecolumn" size="256"/>
                    <Column id="datacolumn" size="256"/>
                  </ColumnInfo>
                  <Rows>
                    <Row>
                      <Col id="codecolumn"/>
                      <Col id="datacolumn">전체</Col>
                    </Row>
                    <Row>
                      <Col id="codecolumn">Y</Col>
                      <Col id="datacolumn">사용</Col>
                    </Row>
                    <Row>
                      <Col id="codecolumn">N</Col>
                      <Col id="datacolumn">미사용</Col>
                    </Row>
                  </Rows>
                </Dataset>
              </Radio>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg" ondragmove="divData_ondragmove">
          <Layouts>
            <Layout>
              <Div id="divSplitter" taborder="1" left="20%" top="0" width="5" height="100%" background="skyblue" cursor="ew-resize" ondrag="divData_divSplitter_ondrag"/>
              <Div id="divDataLeft" taborder="0" left="0" top="0" bottom="0" right="divSplitter:5">
                <Layouts>
                  <Layout>
                    <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0"/>
                  </Layout>
                </Layouts>
              </Div>
              <Div id="divDataRight" taborder="0" left="divSplitter:5" top="0" bottom="0" right="0">
                <Layouts>
                  <Layout>
                    <Grid id="objGridSub" taborder="0" left="0" top="0" bottom="0" right="0"/>
                  </Layout>
                </Layouts>
              </Div>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter(); 
	this.FormBtns.Select.click();
	
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 ************************************************************************/
this.fnSetButton = function() {
	// 서브 버튼 사용
	//this.gfnUseSubBtn(true, this.divData, this.divData.form.divSplitter); // divSplitter sync
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결
 ************************************************************************/
this.fnSetExtendButton = function() {
	//this.btn1 = this.gfnFormButtonAdd("Detail", "fnDetail1");
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.dxGrid = this.divData.form.divDataLeft.form.objGrid;
	this.dxGridSub = this.divData.form.divDataRight.form.objGridSub;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {	
	this.gfnGridInit(this.dxGrid, this.dsList, "DM", "DMM_ITEMSELECT_TREE", "DS_TITLE", "NO_LEVEL");
	this.dxGrid.set_selecttype("cell");	
	this.dxGrid.addEventHandler("onselectchanged", this.fnGrid_RowCellChanged, this);
	//this.dsList.addEventHandler("canrowposchange", this.dsList_canrowposchange, this);
		
	this.gfnGridInit(this.dxGridSub, this.dsListSub, "DM", "DMM_ITEMSELECT");
	//this.dxGridSub.BeforeUserDataSetParam = "fnGridSub_BeforeUserDataSetParam";
}

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {

	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("YN_USE", "string");
	this.dsSelect.addColumn("CD_ITEM", "string");
	
	this.dsSelectSub = new Dataset();
	this.dsSelectSub.addColumn("NO_LEVEL", "string");
	this.dsSelectSub.addColumn("CD_ITEMTREE", "string");
	this.dsSelectSub.addColumn("YN_USE", "string");
	this.dsSelectSub.addColumn("SEARCH_ITEM", "string");
	this.dsSelectSub.addColumn("TY_TYPE", "string");
	this.dsSelectSub.addColumn("CD_ITEM", "string");
	
	this.dsInsert = new Dataset();
	this.dsInsert.addColumn("NO_LEVEL", "string");
	this.dsInsert.addColumn("CD_UPLEVEL", "string");	
	this.dsInsert.addColumn("CD_ITEM", "string");
	this.dsInsert.addColumn("DS_KSITEM", "string");
	this.dsInsert.addColumn("DS_KITEM", "string");
	this.dsInsert.addColumn("DS_ESITEM", "string");
	this.dsInsert.addColumn("DS_EITEM", "string");
	this.dsInsert.addColumn("SZ_ITEM", "string");
	this.dsInsert.addColumn("UT_ITEM", "string");
	this.dsInsert.addColumn("TY_ITEM", "string");
	this.dsInsert.addColumn("CD_ACCOUNT", "string");
	this.dsInsert.addColumn("TY_MAT_ITEM", "string");
	this.dsInsert.addColumn("YN_INVTOUSE", "string");
	this.dsInsert.addColumn("AM_PRICE", "bigdecimal");
	this.dsInsert.addColumn("AM_STANDARD", "bigdecimal");
	this.dsInsert.addColumn("UT_WEIGHT", "string");
	this.dsInsert.addColumn("RT_GAMGA", "bigdecimal");
	this.dsInsert.addColumn("TY_GAMGA", "string");
	this.dsInsert.addColumn("YN_MATERIAL", "string");
	this.dsInsert.addColumn("YN_LABOR", "string");
	this.dsInsert.addColumn("YN_COST", "string");
	this.dsInsert.addColumn("YN_USE", "string");
	this.dsInsert.addColumn("ID_DAM1", "string");
	this.dsInsert.addColumn("ID_DAM2", "string");
	this.dsInsert.addColumn("RM_REM", "string");
	this.dsInsert.addColumn("TY_MAT_TYPE", "string");
	this.dsInsert.addColumn("TY_TYPE", "string");
	this.dsInsert.addColumn("ID_USER", "string");
	this.dsInsert.addColumn("CD_JODAL", "string");
	this.dsInsert.addColumn("NO_ORDER", "bigdecimal");
	this.dsInsert.addColumn("CD_UPPER", "string");
	
	
	this.dsUpdate = new Dataset();
	this.dsUpdate.addColumn("NO_LEVEL", "string");
	this.dsUpdate.addColumn("CD_UPLEVEL", "string");
	this.dsUpdate.addColumn("CD_ITEM", "string");
	this.dsUpdate.addColumn("DS_KSITEM", "string");
	this.dsUpdate.addColumn("DS_KITEM", "string");
	this.dsUpdate.addColumn("DS_ESITEM", "string");
	this.dsUpdate.addColumn("DS_EITEM", "string");
	this.dsUpdate.addColumn("SZ_ITEM", "string");
	this.dsUpdate.addColumn("UT_ITEM", "string");
	this.dsUpdate.addColumn("TY_ITEM", "string");
	this.dsUpdate.addColumn("CD_ACCOUNT", "string");
	this.dsUpdate.addColumn("TY_MAT_ITEM", "string");
	this.dsUpdate.addColumn("YN_INVTOUSE", "string");
	this.dsUpdate.addColumn("AM_PRICE", "bigdecimal");
	this.dsUpdate.addColumn("AM_STANDARD", "bigdecimal");	
	this.dsUpdate.addColumn("UT_WEIGHT", "string");
	this.dsUpdate.addColumn("RT_GAMGA", "bigdecimal");
	this.dsUpdate.addColumn("TY_GAMGA", "string");
	this.dsUpdate.addColumn("YN_MATERIAL", "string");
	this.dsUpdate.addColumn("YN_LABOR", "string");
	this.dsUpdate.addColumn("YN_COST", "string");
	this.dsUpdate.addColumn("YN_USE", "string");
	this.dsUpdate.addColumn("ID_DAM1", "string");
	this.dsUpdate.addColumn("ID_DAM2", "string");
	this.dsUpdate.addColumn("RM_REM", "string");
	this.dsUpdate.addColumn("TY_MAT_TYPE", "string");
	this.dsUpdate.addColumn("TY_TYPE", "string");
	this.dsUpdate.addColumn("ID_USER", "string");
	this.dsUpdate.addColumn("CD_JODAL", "string");
	this.dsUpdate.addColumn("NO_ORDER", "bigdecimal");
	this.dsUpdate.addColumn("CD_UPPER", "string");
	this.dsUpdate.addColumn("MAKER_NO", "string");
	this.dsUpdate.addColumn("PART_NO", "string");
	
	this.dsDelete = new Dataset();
	this.dsDelete.addColumn("NO_LEVEL", "string");
	this.dsDelete.addColumn("CD_UPLEVEL", "string");
	this.dsDelete.addColumn("CD_ITEM", "string");
	
}

/************************************************************************
 * 버튼 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();

	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	var nrow = this.gfnGridAdd(this.dxGridSub);
	this.dsListSub.setColumn(nrow , "YN_USE", "Y");
	this.dsListSub.setColumn(nrow , "NO_ORDER", this.dsListSub.getMax("NO_ORDER")+1);
	if(this.dsList.getColumn(this.dsList.rowposition, "NO_LEVEL") > 2){
		this.dsListSub.setColumn(nrow , "YN_INVTOUSE", "Y");
	}
};

/*
 *	삭제 버튼
 */ 
this.fnDel = function() {
	this.gfnGridDel(this.dxGridSub);
}

/*
 *	저장 버튼
 */ 
this.fnSave = function() {
	if (!this.gfnGridValidate(this.dxGridSub)) return;
	this.dxGridSub.updateToDataset();
	
	this.dsInsert.clearData();
	this.dsUpdate.clearData();
	this.dsDelete.clearData();
	
	for (var i = 0; i < this.dsListSub.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsListSub, i);
		switch(flag) {
			case "I":
				var nrow = this.dsInsert.addRow();
				this.dsInsert.setColumn(nrow, "NO_LEVEL", this.dsList.getColumn(this.dsList.rowposition, "NO_LEVEL"));
				this.dsInsert.setColumn(nrow, "CD_UPLEVEL", this.dsList.getColumn(this.dsList.rowposition, "CD_ITEM"));
				this.dsInsert.setColumn(nrow, "CD_ITEM", this.dsListSub.getColumn(i, "CD_ITEM"));
				this.dsInsert.setColumn(nrow, "DS_KSITEM", this.dsListSub.getColumn(i, "DS_KSITEM"));
				this.dsInsert.setColumn(nrow, "DS_KITEM", "");
				this.dsInsert.setColumn(nrow, "DS_ESITEM", this.dsListSub.getColumn(i, "DS_ESITEM"));
				this.dsInsert.setColumn(nrow, "DS_EITEM", "");
				this.dsInsert.setColumn(nrow, "SZ_ITEM", this.dsListSub.getColumn(i, "SZ_ITEM"));
				this.dsInsert.setColumn(nrow, "UT_ITEM", this.dsListSub.getColumn(i, "UT_ITEM"));
				this.dsInsert.setColumn(nrow, "TY_ITEM", this.dsListSub.getColumn(i, "TY_ITEM"));
				this.dsInsert.setColumn(nrow, "CD_ACCOUNT", this.dsListSub.getColumn(i, "CD_ACCOUNT"));
				this.dsInsert.setColumn(nrow, "TY_MAT_ITEM", this.dsListSub.getColumn(i, "TY_MAT_ITEM"));
				this.dsInsert.setColumn(nrow, "YN_INVTOUSE", this.dsListSub.getColumn(i, "YN_INVTOUSE"));
				this.dsInsert.setColumn(nrow, "AM_PRICE", this.dsListSub.getColumn(i, "AM_PRICE"));
				this.dsInsert.setColumn(nrow, "AM_STANDARD", this.dsListSub.getColumn(i, "AM_STANDARD"));				
				this.dsInsert.setColumn(nrow, "UT_WEIGHT", this.dsListSub.getColumn(i, "UT_WEIGHT"));
				this.dsInsert.setColumn(nrow, "RT_GAMGA", this.dsListSub.getColumn(i, "RT_GAMGA"));
				this.dsInsert.setColumn(nrow, "TY_GAMGA", this.dsListSub.getColumn(i, "TY_GAMGA"));
				this.dsInsert.setColumn(nrow, "YN_MATERIAL", "");
				this.dsInsert.setColumn(nrow, "YN_LABOR", "");
				this.dsInsert.setColumn(nrow, "YN_COST", "");
				this.dsInsert.setColumn(nrow, "YN_USE", this.dsListSub.getColumn(i, "YN_USE"));
				this.dsInsert.setColumn(nrow, "ID_DAM1", this.dsListSub.getColumn(i, "ID_DAM1"));
				this.dsInsert.setColumn(nrow, "ID_DAM2", this.dsListSub.getColumn(i, "ID_DAM2"));
				this.dsInsert.setColumn(nrow, "RM_REM", this.dsListSub.getColumn(i, "RM_REM"));
				this.dsInsert.setColumn(nrow, "TY_MAT_TYPE", this.dsListSub.getColumn(i, "TY_MAT_TYPE"));
				this.dsInsert.setColumn(nrow, "TY_TYPE", this.dsListSub.getColumn(i, "TY_TYPE"));
				this.dsInsert.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
				this.dsInsert.setColumn(nrow, "CD_JODAL", "");
				this.dsInsert.setColumn(nrow, "NO_ORDER", this.dsListSub.getColumn(i, "NO_ORDER"));
				this.dsInsert.setColumn(nrow, "YN_ETC", this.dsListSub.getColumn(i, "YN_ETC"));
				this.dsInsert.setColumn(nrow, "CD_UPPER", this.dsListSub.getColumn(i, "CD_UPPER"));
				break;
				
			case "U":
				var nrow = this.dsUpdate.addRow();
				this.dsUpdate.setColumn(nrow, "NO_LEVEL", this.dsList.getColumn(this.dsList.rowposition, "NO_LEVEL"));
				this.dsUpdate.setColumn(nrow, "CD_UPLEVEL", this.dsList.getColumn(this.dsList.rowposition, "CD_ITEM"));
				this.dsUpdate.setColumn(nrow, "CD_ITEM", this.dsListSub.getColumn(i, "CD_ITEM"));
				this.dsUpdate.setColumn(nrow, "DS_KSITEM", this.dsListSub.getColumn(i, "DS_KSITEM"));
				this.dsUpdate.setColumn(nrow, "DS_KITEM", "");
				this.dsUpdate.setColumn(nrow, "DS_ESITEM", this.dsListSub.getColumn(i, "DS_ESITEM"));
				this.dsUpdate.setColumn(nrow, "DS_EITEM", "");
				this.dsUpdate.setColumn(nrow, "SZ_ITEM", this.dsListSub.getColumn(i, "SZ_ITEM"));
				this.dsUpdate.setColumn(nrow, "UT_ITEM", this.dsListSub.getColumn(i, "UT_ITEM"));
				this.dsUpdate.setColumn(nrow, "TY_ITEM", this.dsListSub.getColumn(i, "TY_ITEM"));
				this.dsUpdate.setColumn(nrow, "CD_ACCOUNT", this.dsListSub.getColumn(i, "CD_ACCOUNT"));
				this.dsUpdate.setColumn(nrow, "TY_MAT_ITEM", this.dsListSub.getColumn(i, "TY_MAT_ITEM"));
				this.dsUpdate.setColumn(nrow, "YN_INVTOUSE", this.dsListSub.getColumn(i, "YN_INVTOUSE"));
				this.dsUpdate.setColumn(nrow, "AM_PRICE", this.dsListSub.getColumn(i, "AM_PRICE"));
				this.dsUpdate.setColumn(nrow, "AM_STANDARD", this.dsListSub.getColumn(i, "AM_STANDARD"));				
				this.dsUpdate.setColumn(nrow, "UT_WEIGHT", this.dsListSub.getColumn(i, "UT_WEIGHT"));
				this.dsUpdate.setColumn(nrow, "RT_GAMGA", this.dsListSub.getColumn(i, "RT_GAMGA"));
				this.dsUpdate.setColumn(nrow, "TY_GAMGA", this.dsListSub.getColumn(i, "TY_GAMGA"));
				this.dsUpdate.setColumn(nrow, "YN_MATERIAL", "");
				this.dsUpdate.setColumn(nrow, "YN_LABOR", "");
				this.dsUpdate.setColumn(nrow, "YN_COST", "");				
				this.dsUpdate.setColumn(nrow, "YN_USE", this.dsListSub.getColumn(i, "YN_USE"));
				this.dsUpdate.setColumn(nrow, "ID_DAM1", this.dsListSub.getColumn(i, "ID_DAM1"));
				this.dsUpdate.setColumn(nrow, "ID_DAM2", this.dsListSub.getColumn(i, "ID_DAM2"));
				this.dsUpdate.setColumn(nrow, "RM_REM", this.dsListSub.getColumn(i, "RM_REM"));
				this.dsUpdate.setColumn(nrow, "TY_MAT_TYPE", this.dsListSub.getColumn(i, "TY_MAT_TYPE"));
				this.dsUpdate.setColumn(nrow, "TY_TYPE", this.dsListSub.getColumn(i, "TY_TYPE"));
				this.dsUpdate.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
				this.dsUpdate.setColumn(nrow, "CD_JODAL", "");
				this.dsUpdate.setColumn(nrow, "NO_ORDER", this.dsListSub.getColumn(i, "NO_ORDER"));
				this.dsUpdate.setColumn(nrow, "CD_UPPER", this.dsListSub.getColumn(i, "CD_UPPER"));
				this.dsUpdate.setColumn(nrow, "MAKER_NO", this.dsListSub.getColumn(i, "MAKER_NO"));
				this.dsUpdate.setColumn(nrow, "PART_NO", this.dsListSub.getColumn(i, "PART_NO"));
				break;
				
			case "D":
				var nrow = this.dsDelete.addRow();
				this.dsDelete.setColumn(nrow, "NO_LEVEL", this.dsList.getColumn(this.dsList.rowposition, "NO_LEVEL"));
				this.dsDelete.setColumn(nrow, "CD_UPLEVEL", this.dsList.getColumn(this.dsList.rowposition, "CD_ITEM"));
				this.dsDelete.setColumn(nrow, "CD_ITEM", this.dsListSub.getColumn(i, "CD_ITEM"));
				break;
		}
	}

	if (this.dsInsert.rowcount == 0 && this.dsUpdate.rowcount == 0 && this.dsDelete.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "insert=dsInsert update=dsUpdate delete=dsDelete";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
 	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
 						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */ 
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}
 
/************************************************************************
 * 서브 버튼 이벤트
 ************************************************************************/
this.fnSelectSub = function() {
	
	if (this.dxGrid.rowcount == 0 || this.dxGrid.currentrow < 0) return false;
	
	if(this.dsList.getColumn(this.dsList.rowposition, "NO_LEVEL") > 2){
		this.fnColSet(false);
	}else{
		this.fnColSet(true);
	}
	
	this.dsListSub.clearData();
	
	this.gfnGridBeforeSelect(this.dxGridSub);
	
	this.dsSelectSub.clearData();
	this.dsSelectSub.addRow();
	this.dsSelectSub.setColumn(0, "NO_LEVEL", this.dsList.getColumn(this.dsList.rowposition, "NO_LEVEL"));
	this.dsSelectSub.setColumn(0, "CD_ITEMTREE", this.dsList.getColumn(this.dsList.rowposition, "CD_ITEM"));
	this.dsSelectSub.setColumn(0, "YN_USE", this.divSearch.form.rdoYN_USE.value);
	this.dsSelectSub.setColumn(0, "SEARCH_ITEM", "");
	this.dsSelectSub.setColumn(0, "TY_TYPE", "");
	this.dsSelectSub.setColumn(0, "CD_ITEM", "");
	
	var strSvcId    = "detail";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "d_select=dsSelectSub";
	var outData     = "dsListSub=d_select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";

	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
};

/************************************************************************
 * Validate
 ************************************************************************/

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);	
	}
	else if (svcID == "detail") {
		this.gfnGridAfterSelect(this.dxGridSub);	
	}
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "savesub") {
		if (errorCode == 0) {
			this.FormBtns.SubSelect.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	else if (svcID == "radio") {
		if (errorCode == 0) {
			// 라디오 버튼의 경우 상위 레이아웃의 resetScroll 호출 필요.
			this.divSearch.form.resetScroll();
			// 초기 선택값은 아래 3가지 방법으로 가능
			this.divSearch.form.crdoTY_GUBUN.set_index(0);
// 			this.divSearch.form.crdoTY_GUBUN.set_value("10");
// 			this.divSearch.form.crdoTY_GUBUN.set_text("외주");
		}
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
this.fnGrid_RowCellChanged = function(obj:nexacro.Grid,e:nexacro.GridSelectEventInfo)
{
    if ((obj.oldrow > -1 && obj.oldrow == e.row)
		|| (obj.oldrow == -1 && e.oldrow != e.row)) {
			this.FormBtns.SubSelect.click();
		obj.oldrow = -1;
	}
};

this.dsList_canrowposchange = function(obj:nexacro.NormalDataset,e:nexacro.DSRowPosChangeEventInfo) {
	var can_rowchange = true;
	for (var i = 0; i < this.dsListSub.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsListSub, i);
		if (flag == "I" || flag == "U" || flag == "D") {
			can_rowchange = false;
			break;
		}
	}
	if(!can_rowchange) {
		this._row = e.newrow;
		this.gfnConfirm("변경된 데이터가 있습니다.\r\n계속 진행하시겠습니까?", "dsList_canrowposchange_callback");
	}
	return can_rowchange;
}

this.dsList_canrowposchange_callback = function(strId, val) 
{
	if(val == true) {
		this.dsList.set_enableevent(false);
		this.dsList.set_rowposition(this._row);
		this.dsList.set_enableevent(true);
	}	
}

/*
 *	서브 그리드 코드파인드
 */ 
this.fnGridSub_BeforeUserDataSetParam = function(id, dsUserParam, nrow) {

 	if (id == "DZX_CFUSERGROUP") {
		var cd_system = this.dsListSub.getColumn(this.dsListSub.rowposition, "CD_SYSTEM");
		if(this.gfnIsNull(cd_system)) {
			this.gfnAlert("시스템코드를 먼저 입력하세요.");
			return false;
		}
 		dsUserParam.setColumn(nrow, "CD_MODULE", this.dsListSub.getColumn(this.dsListSub.rowposition, "CD_SYSTEM"));
 	}
	return true;
}

/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.fnSearchInit = function(obj,e) {
	if(e == null || (e.pretext != e.posttext)) {
		this.gfnSetFormStatus(this);
		this.gfnGridClear(this.dxGrid);
		this.gfnGridClear(this.dxGridSub);
	}
}

this.divData_ondragmove = function(obj:nexacro.Div,e:nexacro.DragEventInfo)
{
	if(e.userdata == "splitter") {
		this.divData.form.divSplitter.set_left(e.clientx);
		this.divData.form.resetScroll();
	}
};

this.divData_divSplitter_ondrag = function(obj:nexacro.Div,e:nexacro.DragEventInfo)
{
	e.set_userdata("splitter");
	return true;
};

this.fnColSet = function(val){
	if(val){
		this.dxGridSub.setRealColSize( "body", this.dxGridSub.getBindCellIndex( "body", "SZ_ITEM" ), "0", false );
		this.dxGridSub.setRealColSize( "body", this.dxGridSub.getBindCellIndex( "body", "DS_ITEM" ), "0", false );
		//this.dxGridSub.setRealColSize( "body", this.dxGridSub.getBindCellIndex( "body", "TY_ITEM" ), "0", false );
		this.dxGridSub.setRealColSize( "body", this.dxGridSub.getBindCellIndex( "body", "YN_INVTOUSE" ), "0", false );
		//this.dxGridSub.setRealColSize( "body", this.dxGridSub.getBindCellIndex( "body", "RT_GAMGA" ), "0", false );
		this.dxGridSub.setRealColSize( "body", this.dxGridSub.getBindCellIndex( "body", "UT_ITEM" ), "0", false );
		//this.dxGridSub.setRealColSize( "body", this.dxGridSub.getBindCellIndex( "body", "CD_ACCOUNT" ), "0", false );
		this.dxGridSub.setRealColSize( "body", this.dxGridSub.getBindCellIndex( "body", "YN_USE" ), "0", false );
		this.dxGridSub.setRealColSize( "body", this.dxGridSub.getBindCellIndex( "body", "RM_REM" ), "0", false );	
	}else{
		this.dxGridSub.setRealColSize( "body", this.dxGridSub.getBindCellIndex( "body", "SZ_ITEM" ), "80", false );
		this.dxGridSub.setRealColSize( "body", this.dxGridSub.getBindCellIndex( "body", "DS_ITEM" ), "70", false );
		//this.dxGridSub.setRealColSize( "body", this.dxGridSub.getBindCellIndex( "body", "TY_ITEM" ), "100", false );
		this.dxGridSub.setRealColSize( "body", this.dxGridSub.getBindCellIndex( "body", "YN_INVTOUSE" ), "100", false );
		//this.dxGridSub.setRealColSize( "body", this.dxGridSub.getBindCellIndex( "body", "RT_GAMGA" ), "60", false );
		this.dxGridSub.setRealColSize( "body", this.dxGridSub.getBindCellIndex( "body", "UT_ITEM" ), "80", false );
		//this.dxGridSub.setRealColSize( "body", this.dxGridSub.getBindCellIndex( "body", "CD_ACCOUNT" ), "100", false );
		this.dxGridSub.setRealColSize( "body", this.dxGridSub.getBindCellIndex( "body", "YN_USE" ), "60", false );
		this.dxGridSub.setRealColSize( "body", this.dxGridSub.getBindCellIndex( "body", "RM_REM" ), "100", false );
	}
};
this.divSearch_rdoYN_USE_onitemchanged = function(obj:nexacro.Radio,e:nexacro.ItemChangeEventInfo)
{
	this.FormBtns.Select.click();
};
]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DMMPR_ITEMTREE_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">d_select</Col>
            <Col id="SP">DMMPR_ITEMSELECT_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">insert</Col>
            <Col id="SP">DMMPR_ITEMSELECT_INSERT</Col>
          </Row>
          <Row>
            <Col id="TARGET">delete</Col>
            <Col id="SP">DMMPR_ITEMSELECT_DELETE</Col>
          </Row>
          <Row>
            <Col id="TARGET">update</Col>
            <Col id="SP">DMMPR_ITEMSELECT_UPDATE</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsListSub"/>
    </Objects>
  </Form>
</FDL>
