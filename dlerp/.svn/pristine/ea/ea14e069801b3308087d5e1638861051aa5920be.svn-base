<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="New Form" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0" top="0" height="46" right="0" cssclass="div_SEARCH_Bg">
          <Layouts>
            <Layout>
              <Static cssclass="sta_WF_SchLabelE" id="staMODULE" taborder="1" text="서브모듈" left="0" top="10" width="92" height="24"/>
              <Div id="ccfCD_MODULE" CDTextWidth="50" taborder="0" left="staMODULE:0" top="10" width="250" height="24" url="cmm::cmmCodeFind.xfdl" text=""/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:20" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0" autofittype="col"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
};

/************************************************************************
 * 버튼 설정 
 ************************************************************************/
this.fnSetButton = function() {
// 	var id_group = this.FormInfo.ID_GROUP;
// 	var gr_search = this.FormInfo.GR_SEARCH;
// 	var cd_role = this.FormInfo.CD_ROLE;
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결
 ************************************************************************/
this.fnSetExtendButton = function() {
	/*
	this.btnOpen = this.gfnFormButtonAdd("btnOpen", "fnFormOpen", "화면실행"); 
	this.btn1 = this.gfnFormButtonAdd("Detail", "fnDetail", "화면권한설정"); 
	this.btnFormButton = this.gfnFormButtonAdd("FormButton", "fnFormButton", "화면버튼설정"); 
	this.btnFormButton = this.gfnFormButtonAdd("FormInfo", "fnFormInfo", "화면개발정보"); 
	*/
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.ccfCD_MODULE = this.divSearch.form.ccfCD_MODULE;
	this.dxGrid = this.divData.form.objGrid;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	
	this.ccfCD_MODULE.CodeFindName = "DZX_CFMODULE";
	this.ccfCD_MODULE.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.ccfCD_MODULE.AfterCDTextChanged = "fnSearchInit";
	
	this.gfnGridInit(this.dxGrid, this.dsList, "DZ", "DZZ_FORMNOTICE");
	this.dxGrid.addEventHandler("onselectchanged", this.fnGrid_RowCellChanged, this);
}

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {

	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_MODULE", "string");

	this.dsSave = new Dataset();
	this.dsSave.addColumn("NO_ID", "int");
	this.dsSave.addColumn("DS_NOTICE", "string");
	this.dsSave.addColumn("DT_END", "string");
	this.dsSave.addColumn("DS_HELP", "string");
	this.dsSave.addColumn("ID_USER", "string");
	this.dsSave.addColumn("CD_MODULE", "string");

}

/************************************************************************
 * 버튼 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	
	this.dsSelect.setColumn(0, "CD_MODULE", this.dsSearch.getColumn(0, "CD_MODULE"));
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	this.gfnGridAdd(this.dxGrid);
}

/*
 *	삭제 버튼
 */ 
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}

/*
 *	저장 버튼
 */
this.fnSave = function() {
	// 그리드 필수항목 체크
	if (!this.gfnGridValidate(this.dxGrid)) return;	
	
	this.dxGrid.updateToDataset();

	// save SP 한개로 사용하는 경우
	this.dsSave.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "I":
			case "U":
			case "D":
				var nrow = this.dsSave.addRow();
				this.dsSave.setColumn(nrow, "NO_ID", this.dsList.getColumn(i, "NO_ID"));
				this.dsSave.setColumn(nrow, "DS_NOTICE", this.dsList.getColumn(i, "DS_NOTICE"));
				this.dsSave.setColumn(nrow, "DT_END", this.dsList.getColumn(i, "DT_END"));
				this.dsSave.setColumn(nrow, "DS_HELP", this.dsList.getColumn(i, "DS_HELP"));
				this.dsSave.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
				this.dsSave.setColumn(nrow, "CD_MODULE", this.dsSearch.getColumn(0, "CD_MODULE"));
				
				break;
		}
	}
		
	if (this.dsSave.rowcount == 0) return;
	
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "save=dsSave";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */ 
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/
this.fnSelectValidate = function() {
	var validate = true;
	if (this.gfnIsNull(this.ccfCD_MODULE.form.CDTextBox.text)) {
		validate = false;
		this.fnVaidateCallback = function() {
			this.ccfCD_MODULE.form.CDTextBox.setFocus();
		}
		this.gfnAlert("서브모듈을 입력하세요.");
	}
	return validate;
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);	
	}
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	if (id == "cfDept") {
		dsUserParam.setColumn(nrow, "CD_CORP", this.AuthClient.CD_CORP);
	}
	return true;
}

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
this.fnGrid_RowCellChanged = function(obj:nexacro.Grid,e:nexacro.GridSelectEventInfo)
{
    if (e.oldrow != e.row) {
		if(this.dsList.getColumn(e.row, "TY_MENU") == "화면" && !this.gfnIsNull(this.dsList.getColumn(e.row, "ID_FORM"))) {
			this.btnFormButton.set_enable(true);
		} else {
			this.btnFormButton.set_enable(false);
		}
	}
};

/************************************************************************
 * 확장버튼 이벤트
 ************************************************************************/
this.fnDetail = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	if (!this.fnSelectValidate()) { return false; }
	var param = {};
	param.CD_MODULE = this.ccfCD_MODULE.form.CDTextBox.text;
	param.DS_MODULE = this.ccfCD_MODULE.form.DSTextBox.text;
	this.gfnFormOpen("DZB", "DZU_USERAUTHORITY", "fnDetailCallback", param);
	
}

this.fnDetailCallback = function(strId, val) {
	this.FormBtns.Select.click();
};

this.fnFormButton = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	var row = this.dsList.rowposition;
	if((this.dsList.getColumn(row, "TY_MENU") == "화면" || this.dsList.getColumn(row, "TY_MENU") == "Dialog") 
		&& !this.gfnIsNull(this.dsList.getColumn(row, "ID_FORM"))) {	
		var param = {};
		param.CD_MODULE = this.ccfCD_MODULE.form.CDTextBox.text;
		param.ID_FORM = this.dsList.getColumn(row, "ID_FORM");
		param.NM_FORM = this.dsList.getColumn(row, "NM_FORM");
		this.gfnFormOpen("DZB", "DZU_FORMBUTTON", "", param);
	}
}

this.fnFormInfo = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	var row = this.dsList.rowposition;
	if(this.dsList.getColumn(row, "TY_MENU") == "화면" && !this.gfnIsNull(this.dsList.getColumn(row, "ID_FORM"))) {	
		var param = {};
		param.ID_FORM = this.dsList.getColumn(row, "ID_FORM");
		param.GR_SEARCH = this.FormInfo.GR_SEARCH;
		param.TY_AUTH = this.FormInfo.TY_AUTH;
		this.gfnFormOpen("DZO", "DZU_FORMINFO", "", param);
	}
}

this.fnFormOpen = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	var row = this.dsList.rowposition;
// 	if((this.dsList.getColumn(row, "TY_MENU") == "화면" || this.dsList.getColumn(row, "TY_MENU") == "Dialog") 
// 		&& !this.gfnIsNull(this.dsList.getColumn(row, "ID_FORM"))) 
	{
		var param = {};

		this.gfnFormOpen(this.dsList.getColumn(row, "ASM_NAME").substr(0,3) , this.dsList.getColumn(row, "ID_FORM"), "", param);
	}
}

/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.fnSearchInit = function(id) {
	this.gfnSetFormStatus(this);
	this.gfnGridClear(this.dxGrid);
};
]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DZZPR_FORMNOTICE_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">save</Col>
            <Col id="SP">DZZPR_FORMNOTICE_UPDATE</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_MODULE" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CD_MODULE"/>
          </Row>
        </Rows>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfCD_MODULE.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_MODULE"/>
    </Bind>
  </Form>
</FDL>
