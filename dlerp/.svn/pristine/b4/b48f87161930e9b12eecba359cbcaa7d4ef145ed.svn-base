<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="DZU_EPS_TOTAL_LOG" width="1280" height="720" titletext="New Form" onload="DWA_SILHENG_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="1" left="0" top="0" height="80" right="0">
          <Layouts>
            <Layout>
              <Div id="divSplitter" taborder="1" left="50%" top="0" width="5" height="100%"/>
              <Div id="divSearchLeft" taborder="0" left="0" top="0" height="80" right="divSplitter:5" cssclass="div_SEARCH_Bg">
                <Layouts>
                  <Layout>
                    <Static id="staCD_SITE" taborder="0" text="조회기간" left="10" top="10" width="60" height="25"/>
                    <Calendar id="ctclDT_FROM" taborder="1" left="75" top="10" width="105" height="25" dateformat="yyyy-MM-dd" editformat="yyyyMMdd" autoselect="true" value=""/>
                    <Static id="sta_range" taborder="2" text="~" left="ctclDT_FROM:10" top="staCD_SITE:-25" width="10" height="25"/>
                    <Calendar id="ctclDT_TO" taborder="3" left="sta_range:10" top="10" width="105" height="25" dateformat="yyyy-MM-dd" editformat="yyyyMMdd" autoselect="true" value=""/>
                    <Static id="staNO_PR" taborder="5" text="화면명" left="ctclDT_TO:30" top="10" width="40" height="25"/>
                    <Edit id="ctxtNM_FORM" taborder="4" left="staNO_PR:5" top="10" width="155" height="25" value=""/>
                  </Layout>
                </Layouts>
              </Div>
              <Div id="divSearchRight" taborder="0" left="divSplitter:0" top="0" height="80" right="0" cssclass="div_SEARCH_Bg">
                <Layouts>
                  <Layout>
                    <Static id="staCD_SITE_SUB" taborder="0" text="현장코드" left="10" top="10" width="60" height="25"/>
                    <Static id="sta_range" taborder="1" text="~" left="190" top="46" width="10" height="25"/>
                    <Calendar id="ctclDT_TO" taborder="2" left="210" top="46" width="105" height="25" dateformat="yyyy-MM-dd" editformat="yyyyMMdd" autoselect="true" value=""/>
                    <Calendar id="ctclDT_FROM" taborder="3" left="75" top="46" width="105" height="25" dateformat="yyyy-MM-dd" editformat="yyyyMMdd" autoselect="true" value=""/>
                    <Static id="staCD_SITE" taborder="4" text="조회기간" left="10" top="46" width="60" height="25"/>
                    <Div id="cfDS_VENDOR" CodeFindName="DHX_CFCTVENDOR_CODEFIND" CDTextWidth="70" taborder="5" left="75" top="10" width="308" height="25" url="cmm::cmmCodeFind.xfdl"/>
                    <Static id="staNO_PR" taborder="6" text="화면명" left="ctclDT_TO:30" top="46" width="40" height="25"/>
                    <Edit id="ctxtNM_FORM" taborder="7" left="staNO_PR:5" top="46" width="155" height="25" value=""/>
                  </Layout>
                </Layouts>
              </Div>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="1" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg" ondragmove="divData_ondragmove">
          <Layouts>
            <Layout>
              <Div id="divSplitter" taborder="2" left="49.69%" top="0" width="5" height="100.00%" background="skyblue" cursor="ew-resize" ondrag="divData_divSplitter_ondrag"/>
              <Div id="divDataLeft" taborder="0" left="0" top="0" bottom="0" right="divSplitter:10">
                <Layouts>
                  <Layout>
                    <Grid id="objGrid" sub="true" taborder="0" left="0" top="27" bottom="0" right="0"/>
                    <Static id="sta01" taborder="1" text="기간별 총 접속 이력 조회" left="0" top="0" width="100.00%" height="22" cssclass="sta_TITLE_Bg"/>
                  </Layout>
                </Layouts>
              </Div>
              <Div id="divDataRight" taborder="1" left="divSplitter:5" top="0" bottom="0" right="0">
                <Layouts>
                  <Layout>
                    <Grid id="objGridSub" sub="true" taborder="0" left="0" top="27" bottom="0" right="0"/>
                    <Static id="sta03" taborder="1" text="업체별 접속 이력" left="0" top="0" width="100.00%" height="22" cssclass="sta_TITLE_Bg"/>
                  </Layout>
                </Layouts>
              </Div>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DZUPR_EPS_TOTAL_LOG_SELECT</Col>
          </Row>
          <Row>
            <Col id="SP">DZUPR_EPS_VENDOR_LOG_SELECT</Col>
            <Col id="TARGET">d_select</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="DT_FROM" type="STRING" size="256"/>
          <Column id="DT_TO" type="STRING" size="256"/>
          <Column id="NM_FROM" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
      <Dataset id="dsSearchSub" onvaluechanged="dsSearchSub_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_VENDOR" type="STRING" size="256"/>
          <Column id="DT_FROM" type="STRING" size="256"/>
          <Column id="DT_TO" type="STRING" size="256"/>
          <Column id="NM_FROM" type="STRING" size="256"/>
          <Column id="DS_VENDOR" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CD_VENDOR"/>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsListSub"/>
    </Objects>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.DWA_SILHENG_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();	
	
	var today = this.gfnGetDate();
	this.dsSearch.setColumn(0, "DT_FROM", this.gfnAddMonth(today,-1));
	this.dsSearch.setColumn(0, "DT_TO",   today);	 

	this.dsSearchSub.setColumn(0, "DT_FROM", this.gfnAddMonth(today,-1));
	this.dsSearchSub.setColumn(0, "DT_TO",   today);	

	
	
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
	// Select, Add, Del, Save, Excel, Print
	// SubSelect, SubAdd, SubDel, SuubSave, SubExcel
// 	this.FormBtns.Add.set_enable(false);
// 	this.FormBtns.Del.set_enable(false);
	this.gfnUseSubBtn(true, this.divData, this.divData.form.divSplitter, "fnCustomDragMove"); // divSplitter sync

}

this.fnCustomDragMove = function(obj:nexacro.Div,e:nexacro.DragEventInfo) {
	if(e.userdata == "splitter") {
		this.divSearch.form.divSplitter.set_left(e.clientx);
		this.divSearch.form.resetScroll();
	}
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	
	this.dxGrid = this.divData.form.divDataLeft.form.objGrid;
	this.dxGridSub = this.divData.form.divDataRight.form.objGridSub;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	this.gfnGridInit(this.dxGrid, this.dsList, "DZ", "DZU_EPS_TOTAL_LOG");
	this.gfnGridInit(this.dxGridSub, this.dsListSub, "DZ", "DZU_EPS_VENDOR_LOG");
	
};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("DT_FROM", "string");
	this.dsSelect.addColumn("DT_TO", "string");
	this.dsSelect.addColumn("NM_FROM", "string");
	
	
	this.dsSelectSub = new Dataset();
	this.dsSelectSub.addColumn("CD_VENDOR", "string");
	this.dsSelectSub.addColumn("DT_FROM", "string");
	this.dsSelectSub.addColumn("DT_TO", "string");
	this.dsSelectSub.addColumn("NM_FROM", "string");
		
	
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if(!this.fnValidate()) return;

	this.dsSelect.clearData();
	this.dsSelect.addRow();
	this.dsSelect.setColumn(0, "DT_FROM", this.dsSearch.getColumn(0, "DT_FROM"));	//발주기간
	this.dsSelect.setColumn(0, "DT_TO",   this.dsSearch.getColumn(0, "DT_TO"));	
	this.dsSelect.setColumn(0, "NM_FROM", this.dsSearch.getColumn(0, "NM_FROM"));
	//this.dsSelect.setColumn(0, "TY_GUBUN", "2");
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// trabsaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}


this.fnSelectSub = function() {
    this.dsListSub.clearData();
	this.gfnGridBeforeSelect(this.dxGridSub);
	
	// 디테일 파라미터 데이터셋 셋팅
	this.dsSelectSub.clearData();
	this.dsSelectSub.addRow();
	this.dsSelectSub.setColumn(0, "CD_VENDOR", this.dsSearchSub.getColumn(0, "CD_VENDOR"));	//발주기간
	this.dsSelectSub.setColumn(0, "DT_FROM",   this.dsSearchSub.getColumn(0, "DT_FROM"));	//발주기간
	this.dsSelectSub.setColumn(0, "DT_TO",     this.dsSearchSub.getColumn(0, "DT_TO"));	
	this.dsSelectSub.setColumn(0, "NM_FROM",   this.dsSearchSub.getColumn(0, "NM_FROM"));	
	
	
	var strSvcId    = "d_select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "d_select=dsSelectSub";
	var outData     = "dsListSub=d_select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc);   // 통신방법 정의 [생략가능]

}



/*
 *	입력 버튼
 */
this.fnAdd = function() {
	this.gfnGridAdd(this.dxGrid);
}

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}

/*
 *	저장 버튼
 */
this.fnSave = function() {
		// 그리드 필수항목 체크
	if (!this.gfnGridValidate(this.dxGrid)) return;	

	this.dxGrid.updateToDataset();
	
	this.dsInsert.clearData();
	this.dsUpdate.clearData();
	this.dsDelete.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		
		switch(flag) {
			case "I":
				
				var nrow = this.dsInsert.addRow();
				
				this.dsInsert.setColumn(nrow, "ID_USER", this.dsList.getColumn(i, "ID_USER"));
				this.dsInsert.setColumn(nrow, "DS_HNAME", this.dsList.getColumn(i, "DS_HNAME"));
				this.dsInsert.setColumn(nrow, "ID_PASSWORD", this.dsList.getColumn(i, "ID_PASSWORD"));
				this.dsInsert.setColumn(nrow, "ID_JUMIN", this.dsList.getColumn(i, "ID_JUMIN"));
				this.dsInsert.setColumn(nrow, "ID_EMAIL", this.dsList.getColumn(i, "ID_EMAIL"));
				this.dsInsert.setColumn(nrow, "NO_IP", this.dsList.getColumn(i, "NO_IP"));
				this.dsInsert.setColumn(nrow, "CD_DEPT", this.dsList.getColumn(i, "CD_DEPT"));
				this.dsInsert.setColumn(nrow, "YN_LOGINDENY", this.dsList.getColumn(i, "YN_LOGINDENY"));
				this.dsInsert.setColumn(nrow, "TY_ECONT", this.dsList.getColumn(i, "TY_ECONT"));
				this.dsInsert.setColumn(nrow, "CD_ROLE", this.dsList.getColumn(i, "CD_ROLE"));
				this.dsInsert.setColumn(nrow, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
				this.dsInsert.setColumn(nrow, "ID_INSERT", this.AuthClient.ID_USER);
				this.dsInsert.setColumn(nrow, "ID_ACCOUNT", this.dsList.getColumn(i, "ID_ACCOUNT"));
				this.dsInsert.setColumn(nrow, "YN_GROUPWARE", this.dsList.getColumn(i, "YN_GROUPWARE"));
			break;
			case "U":
			
				var nrow = this.dsUpdate.addRow();
				
				this.dsUpdate.setColumn(nrow, "ID_USER", this.dsList.getColumn(i, "ID_USER"));
				this.dsUpdate.setColumn(nrow, "DS_HNAME", this.dsList.getColumn(i, "DS_HNAME"));
				this.dsUpdate.setColumn(nrow, "ID_PASSWORD", this.dsList.getColumn(i, "ID_PASSWORD"));
				this.dsUpdate.setColumn(nrow, "ID_JUMIN", this.dsList.getColumn(i, "ID_JUMIN"));
				this.dsUpdate.setColumn(nrow, "ID_EMAIL", this.dsList.getColumn(i, "ID_EMAIL"));
				this.dsUpdate.setColumn(nrow, "NO_IP", this.dsList.getColumn(i, "NO_IP"));
				this.dsUpdate.setColumn(nrow, "CD_DEPT", this.dsList.getColumn(i, "CD_DEPT"));
				this.dsUpdate.setColumn(nrow, "YN_LOGINDENY", this.dsList.getColumn(i, "YN_LOGINDENY"));
				this.dsUpdate.setColumn(nrow, "TY_ECONT", this.dsList.getColumn(i, "TY_ECONT"));
				this.dsUpdate.setColumn(nrow, "CD_ROLE", this.dsList.getColumn(i, "CD_ROLE"));
				this.dsUpdate.setColumn(nrow, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
				this.dsUpdate.setColumn(nrow, "ID_INSERT", this.AuthClient.ID_USER);
				this.dsUpdate.setColumn(nrow, "ID_ACCOUNT", this.dsList.getColumn(i, "ID_ACCOUNT"));
				this.dsUpdate.setColumn(nrow, "YN_GROUPWARE", this.dsList.getColumn(i, "YN_GROUPWARE"));
			break;
			case "D":
			
				var nrow = this.dsDelete.addRow();
				
				this.dsDelete.setColumn(nrow, "ID_USER", this.dsList.getColumn(i, "ID_USER"));
				this.dsDelete.setColumn(nrow, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
				this.dsDelete.setColumn(nrow, "ID_INSERT", this.AuthClient.ID_USER);
			
			break;
		}
	}

	if (this.dsInsert.rowcount == 0 && this.dsUpdate.rowcount == 0 && this.dsDelete.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "insert=dsInsert update=dsUpdate delete=dsDelete";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
	
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnValidate = function() {
// 	if (this.gfnIsNull(this.dsSearch.getColumn(0, "CD_CORP"))) {
// 		this.fnVaidateCallback = function() {
// 			//this.ccfCorp.form.CDTextBox.setFocus();
// 		}
// 		//this.gfnAlert("법인코드는 필수입력 값입니다.");
// 		return false;
// 	}
	
	return true;
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);	
	
	}else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
};

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/

this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {

// 	if (id == "ccfDeptCorp") {
// 		if(!this.gfnIsNull(this.dsSearch.getColumn(0, "CD_CORP"))){
// 			dsUserParam.setColumn(nrow, "CD_CORP", this.ccfCorp.form.CDTextBox.value);	
// 		}else{
// 			this.gfnAlert("법인코드는 필수입력 값입니다.");
// 			return false;
// 		}
// 	}
	return true;
};

this.fnAfterCDTextChanged = function(id, codeFindData) {
	if(id == "ccfCorp") {
		// 현장코드 변경시 초기화
		//this.ccfDeptCorp.form.fnCodeFindClear();
	}
}

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
 
this.fnGrid_BeforeUserDataSetParam = function(id, dsUserParam, nrow) {	
	// 그리드에서 코드파인드 id는 그리드셋팅의 코드파인드 식별ID
//  	if (id == "DZX_CFDEPTCORP") {
// 		var cd_corp = this.dsSearch.getColumn(0, "CD_CORP");
// 		if(this.gfnIsNull(cd_corp)) {
// 			this.gfnAlert("법인코드를 먼저 입력하세요.");
// 			return false;
// 		}
//  		dsUserParam.setColumn(nrow, "CD_CORP", cd_corp);
//  	}
	return true;
}

/************************************************************************
 * 기타 이벤트
 ************************************************************************/
/*
 *	조회 조건 변경시 초기화
 */
this.fnSearchInit = function(obj,e) {
	if(e == null || (e.pretext != e.posttext)) {
		// 폼상태 초기화
		this.gfnSetFormStatus(this);	
		this.gfnGridClear(this.dxGrid);
		this.gfnGridClear(this.dxGridSub);
	}
};

this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
	}
};
this.dsSearchSub_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGridSub);	
	}	
};


this.fnUserModule = function(obj:nexacro.Button, e:nexacro.ClickEventInfo){
	if(!this.gfnGridIsRow(this.dxGrid)){return false;}
	var param = {};
	param.ID_CORP = this.ccfCorp.form.CDTextBox.value;
	param.DS_CORP = this.ccfCorp.form.DSTextBox.value;
	param.ID_USER = this.dsList.getColumn(this.dsList.rowposition, "ID_USER");
	param.DS_HNAME = this.dsList.getColumn(this.dsList.rowposition, "DS_HNAME");
	
	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DZU_USERMODULE_USER", "fnUserModuleCallback", param);
};

this.fnGYUMJIK = function(obj:nexacro.Button, e:nexacro.ClickEventInfo){
	if(!this.gfnGridIsRow(this.dxGrid)){return false;}
	var param = {};
	param.ID_CORP = this.ccfCorp.form.CDTextBox.value;
	param.DS_CORP = this.ccfCorp.form.DSTextBox.value;
	param.ID_USER = this.dsList.getColumn(this.dsList.rowposition, "ID_USER");
	param.DS_HNAME = this.dsList.getColumn(this.dsList.rowposition, "DS_HNAME");
	
	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DZU_GYUMJIK", "fnGYUMJIKCallback", param);
};

]]></Script>
    <Bind>
      <BindItem id="item1" compid="divSearch.form.divSearchLeft.form.ctclDT_FROM" propid="value" datasetid="dsSearch" columnid="DT_FROM"/>
      <BindItem id="item2" compid="divSearch.form.divSearchLeft.form.ctclDT_TO" propid="value" datasetid="dsSearch" columnid="DT_TO"/>
      <BindItem id="item6" compid="divSearch.form.divSearchLeft.form.ctxtNM_FORM" propid="value" datasetid="dsSearch" columnid="NM_FROM"/>
      <BindItem id="item0" compid="divSearch.form.divSearchRight.form.ctclDT_FROM" propid="value" datasetid="dsSearchSub" columnid="DT_FROM"/>
      <BindItem id="item3" compid="divSearch.form.divSearchRight.form.ctclDT_TO" propid="value" datasetid="dsSearchSub" columnid="DT_TO"/>
      <BindItem id="item4" compid="divSearch.form.divSearchRight.form.cfDS_VENDOR.form.CDTextBox" propid="value" datasetid="dsSearchSub" columnid="CD_VENDOR"/>
      <BindItem id="item5" compid="divSearch.form.divSearchRight.form.cfDS_VENDOR.form.DSTextBox" propid="value" datasetid="dsSearchSub" columnid="DS_VENDOR"/>
      <BindItem id="item7" compid="divSearch.form.divSearchRight.form.ctxtNM_FORM" propid="value" datasetid="dsSearchSub" columnid="NM_FROM"/>
    </Bind>
  </Form>
</FDL>
