<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="[전자]입찰현황" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg" formscrolltype="none">
          <Layouts>
            <Layout>
              <Static id="sta00" taborder="0" text="현장코드" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfCD_SITE" CodeFindName="DZX_CFSITE" CDTextWidth="80" taborder="1" left="sta00:0.0" top="10.0" width="250" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
              <Static id="sta01" taborder="2" text="입찰번호" left="ccfCD_SITE:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfNO_BID" CDTextWidth="100" taborder="3" left="sta01:0.0" top="10.0" width="270" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="1" left="0" top="55" bottom="0" right="0" cssclass="div_DATA_Bg" ondragmove="divData_ondragmove">
          <Layouts>
            <Layout>
              <Div id="divSplitter" taborder="1" left="0" top="50%" width="100%" height="5" background="skyblue" cursor="ns-resize" ondrag="divData_divSplitter_ondrag"/>
              <Div id="divDataTop" taborder="0" left="0" top="0" bottom="divSplitter:5" right="0">
                <Layouts>
                  <Layout>
                    <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0"/>
                  </Layout>
                </Layouts>
              </Div>
              <Div id="divDataBottom" taborder="0" left="0" top="divSplitter:5" bottom="0" right="0">
                <Layouts>
                  <Layout>
                    <Grid id="objGridSub" sub="true" taborder="1" left="0" top="0" bottom="0" right="0"/>
                  </Layout>
                </Layouts>
              </Div>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[include "lib::libCommon.xjs";
this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	// 타화면에서 오픈시 넘어오는 파라미터 처리
	if(!this.gfnIsNull(this.getOwnerFrame().CD_SITE) && !this.gfnIsNull(this.getOwnerFrame().NO_BID)) {
		
		this.dsSearch.setColumn(0, "CD_SITE", this.getOwnerFrame().CD_SITE);
		this.dsSearch.setColumn(0, "NO_BID", this.getOwnerFrame().NO_BID);
		// 코드파인드의 명칭부분은 직접 접근해서 셋팅
		this.ccfCD_SITE.form.DSTextBox.set_value(this.getOwnerFrame().DS_SITE);
		if(!this.gfnIsNull(this.getOwnerFrame().DS_SUBCON)) {
			this.ccfNO_BID.form.DSTextBox.set_value(this.getOwnerFrame().DS_SUBCON);
		}
		
		this.ccfCD_SITE.form.fnFitToContents();
		this.ccfNO_BID.form.fnFitToContents();
		
		this.FormBtns.Select.click();
	}	
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
	// Select, Add, Del, Save, Excel, Print
	// SubSelect, SubAdd, SubDel, SuubSave, SubExcel
	//this.FormBtns.Select.set_enable(false);
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btnAttach = this.gfnFormButtonAdd("btnAttach", "fnAttach");  		// 입찰사 첨부파일
	// this.btnAttach.set_color("yellow");
	this.btnOpen = this.gfnFormButtonAdd("btnOpen", "fnOpen");  		// 입찰개봉
	// this.btnOpen.set_color("yellow");
	this.btnBlind = this.gfnFormButtonAdd("btnBlind", "fnBlind");  		// 블라인드해제
	this.btnBlind.set_color("yellow");
	this.btnCopy = this.gfnFormButtonAdd("btnCopy", "fnCopy");  			// 투찰가복사
	this.btnDtlBid = this.gfnFormButtonAdd("btnDtlBid", "fnDtlBid"); 			// 상세투찰내역
	this.btnDaebiBid = this.gfnFormButtonAdd("btnDaebiBid", "fnDaebiBid"); 		// 견적대비표
	this.btnPassBid = this.gfnFormButtonAdd("btnPassBid", "fnPassBid"); 		// 유찰
	this.btnRebidAlert = this.gfnFormButtonAdd("btnRebidAlert", "fnRebidAlert");//재입찰통보
	// this.btnRebidAlert.set_color("yellow");
	this.btnSuccBid = this.gfnFormButtonAdd("btnSuccBid", "fnSuccBid"); 		// 낙찰사선정
	this.btnSuccAlert = this.gfnFormButtonAdd("btnSuccAlert", "fnSuccAlert"); 	// 낙찰통보
	this.btnYega = this.gfnFormButtonAdd("btnYega", "fnYega"); 	// 예가(목표가)
	this.btnSuccBidCancel = this.gfnFormButtonAdd("btnSuccBidCancel", "fnSuccBidCancel"); //낙찰취소
	this.btnAPP = this.gfnFormButtonAdd("btnAPP", "fnAPP");		// 결과통보
	this.btnAPP2 = this.gfnFormButtonAdd("btnAPP2", "fnAPP2");		// 선정의뢰
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.ccfCD_SITE = this.divSearch.form.ccfCD_SITE;
	this.ccfNO_BID = this.divSearch.form.ccfNO_BID;
	this.dxGrid = this.divData.form.divDataTop.form.objGrid;
	this.dxGridSub = this.divData.form.divDataBottom.form.objGridSub;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {	
	//this.ccfCD_SITE.CodeFindName = "DZX_CFSITE";
	this.ccfNO_BID.CodeFindName = "DCX_CFORDERPLAN_01";
	
	//this.ccfCD_SITE.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.ccfCD_SITE.AfterCDTextChanged = "fnAfterCDTextChanged";
	this.ccfNO_BID.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.ccfNO_BID.AfterCDTextChanged = "fnAfterCDTextChanged";
	
	// 그리드 초기화
	this.gfnGridInit(this.dxGrid, this.dsList, "DC", "DCB_FIRSTSELECT");
	this.dxGrid.addEventHandler("onselectchanged", this.fnGrid_RowCellChanged, this);
	
	this.gfnGridInit(this.dxGridSub, this.dsListSub, "DC", "DCB_ESTIMATION_REBID_RESULT"); 
	
	
	// 셀 변경 후 이벤트
	//this.dxGrid.AfterEdit = "fnGrid_AfterEdit";
	
	// 그리드 코드파인드 설정
	//this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforeUserDataSetParam";
	
	// 전체체크박스 체크/해제 이벤트
	//this.dxGrid.AfterAllCheck = "fnGrid_AfterAllCheck";
	
	// BUTTON, BUTTON-IN 처리
	//this.dxGrid.ExpandUp = "fnGrid_ExpandUp";
	
};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {

	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_SITE", "string");
	this.dsSelect.addColumn("NO_BID", "string");
	this.dsSelect.addColumn("CD_CORP", "string");
	
	this.dsSelectSub = new Dataset();
	this.dsSelectSub.addColumn("NO_BID", "string");
	
	this.dsCopy = new Dataset();
	this.dsCopy.addColumn("CD_SITE", "string");
	this.dsCopy.addColumn("NO_BID", "string");
	
	this.dsSuccal = new Dataset();
	this.dsSuccal.addColumn("TY_SYSTEM", "string");
	this.dsSuccal.addColumn("TY_GUBUN", "string");
	this.dsSuccal.addColumn("REF_KEY1", "string");
	this.dsSuccal.addColumn("REF_KEY2", "string");
	this.dsSuccal.addColumn("REF_KEY3", "string");
	this.dsSuccal.addColumn("YN_MAIL", "string");
	this.dsSuccal.addColumn("YN_SMS", "string");
	
	this.dsSuccal1 = new Dataset();
	this.dsSuccal1.addColumn("CD_SITE", "string");
	this.dsSuccal1.addColumn("NO_BID", "string");
	
	this.dsAppParam = new Dataset();
	this.dsAppParam.addColumn("CD_SITE", "string");
	this.dsAppParam.addColumn("NO_BID", "string");
	this.dsAppParam.addColumn("CD_VENDOR", "string");
	this.dsAppParam.addColumn("TY_GUBUN", "string");
	this.dsAppParam.addColumn("DABIE_URL", "string");
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;

	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
		
	this.dsSelect.setColumn(0, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
	this.dsSelect.setColumn(0, "NO_BID", this.dsSearch.getColumn(0, "NO_BID"));
	this.dsSelect.setColumn(0, "CD_CORP", this.AuthClient.CD_CORP);
	
	this.dsSelectSub.clearData();
	this.dsSelectSub.addRow();	
	this.dsSelectSub.setColumn(0, "NO_BID", this.dsSearch.getColumn(0, "NO_BID"));
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect d_select=dsSelectSub";
	var outData     = "dsList=select0 dsListSub=d_select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	var nrow = this.gfnGridAdd(this.dxGrid); // top (default), bottom, current
}

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}


/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {	
	var validate = true;
	
	if (this.gfnIsNull(this.dsSearch.getColumn(0,"CD_SITE"))) {
		validate = false;
		// Alert후 실행할 처리
		this.fnVaidateCallback = function() {
			this.ccfCD_SITE.form.CDTextBox.setFocus();
		}
		this.gfnAlert("현장코드는 반드시 입력 하셔야 합니다.", "fnVaidateCallback");
	}else if (this.gfnIsNull(this.dsSearch.getColumn(0,"NO_BID"))) {
		validate = false;
		// Alert후 실행할 처리
		this.fnVaidateCallback = function() {
			this.ccfNO_BID.form.CDTextBox.setFocus();
		}
		this.gfnAlert("입찰번호는 반드시 입력 하셔야 합니다.", "fnVaidateCallback");
	}
	
	return validate;
	
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);	
		/*
			if(this.dsList.findRow("YN_BLIND", "Y") != -1){
			this.gfnAlert("블라인드된 입찰건입니다.");
		}
		*/
		this.fnBtnCheckAll();
		
// 		var strCD_SYSTEM = this.dsList.getColumn(0, "CD_SYSTEM");
// 		
// 		var CD_ELAPPRGS_Index;
// 		if(strCD_SYSTEM == "DM")
// 		{
// 			CD_ELAPPRGS_Index = this.dxGrid.getBindCellIndex("body", "CD_ELAPPRGS");
// 			this.dxGrid.setRealColSize("body", CD_ELAPPRGS_Index, 0);
// 			this.btnAPP.set_enable(false);
// 		}else
// 		{
// 			CD_ELAPPRGS_Index = this.dxGrid.getBindCellIndex("body", "CD_ELAPPRGS");
// 			this.dxGrid.setRealColSize("body", CD_ELAPPRGS_Index, 70);
// 			this.btnAPP.set_enable(true);
// 		}
	}
	else if(svcID == "copy") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "succal1") {
		if (errorCode == 0) {
			this.fnCallback_callback = function()
			{
				this.FormBtns.Select.click();
			}
			
			this.gfnAlert("낙찰게시 정상처리되었습니다.","fnCallback_callback");
		} else {
			this.gfnAlert(errorMsg);
		}
	}	
	else if(svcID == "check") {
		if (errorCode == 0) {
			this.fnCallback_callback = function()
			{
				this.FormBtns.Select.click();
			}
			
			this.gfnAlert("입찰개봉이 정상처리되었습니다.","fnCallback_callback");
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "release") {
		if (errorCode == 0) {
			this.fnCallback_callback = function()
			{
				this.FormBtns.Select.click();
			}
			
			this.gfnAlert("블라인드해제가 정상처리되었습니다.","fnCallback_callback");
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "rebid") {
		if (errorCode == 0) {
			this.fnCallback_callback = function()
			{
				this.FormBtns.Select.click();
			}
			
			this.gfnAlert("재입찰통보가 정상처리되었습니다.","fnCallback_callback");
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "openbid") {
		if (errorCode == 0) {
			this.fnCallback_callback = function()
			{
				this.FormBtns.Select.click();
			}
			
			this.gfnAlert("입찰개봉이 정상처리되었습니다.","fnCallback_callback");
		} else {
			this.gfnAlert(errorMsg);
		}		
	}
	else if(svcID == "appChk") {
		if (errorCode == 0) 
		{
			this.fnAppSelect();
		}
		else
		{
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "appSelect") {
		if (errorCode == 0) 
		{
			this.fnAppOpen();
		}
		else
		{
			this.gfnAlert(errorMsg);
		}
	}
}

this.fnCheckCallback = function(svcID, errorCode, errorMsg)
{
	if(svcID == "open_check") {
		if (errorCode == 0) {
			this.fnOpenBid();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "attach_check") {
		if (errorCode == 0) {
			this.fnAttachOpen();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "dtlBid_check") {
		if (errorCode == 0) {
			this.fnOpenDtlBid();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "daeBiBid_check") {
		if (errorCode == 0) {
			this.fnOpenDaebiBid();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
//코드파인드의 파라미터 값을 넘겨줄때 사용하는 함수
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
// 	
// 	if (id == "ccfCD_SITE"){ 		
// 		dsUserParam.setColumn(nrow, "CD_CORP", this.AuthClient.CD_CORP);
// 	}else 
	if (id == "ccfNO_BID"){
 		if (this.gfnIsNull(this.dsSearch.getColumn(0, "CD_SITE"))) {
 			this.gfnAlert("현장코드를 먼저 입력하세요.");
 			return false;
 		}
		dsUserParam.setColumn(nrow, "CD_SYSTEM", this.gfnNvl(this.getOwnerFrame().DS_PARAM, ""));
		dsUserParam.setColumn(nrow, "TY_ONOFF", "ON");
		dsUserParam.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
	}
	
	return true;
}

this.fnAfterCDTextChanged = function(id, codeFindData) {
	if(id == "ccfCD_SITE") {
		// 현장코드 변경시 입찰번호 초기화
		this.ccfNO_BID.form.fnCodeFindClear();
	} else if(id == "ccfNO_BID") {
		if(codeFindData[0].TY_BIDSTATUSCD <= "B40") {
			this.btnOpen.set_enable(true);
		} else {
			this.btnOpen.set_enable(false);
		}
	}
}
/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
this.fnGrid_RowCellChanged = function(obj:nexacro.Grid,e:nexacro.GridSelectEventInfo)
{
	 if ((obj.oldrow > -1 && obj.oldrow == e.row)
		|| (obj.oldrow == -1 && e.oldrow != e.row)) {
		this.fnBtnCheckAll();
		obj.oldrow = -1;
	}
}
/************************************************************************
 * 기타 이벤트
 ************************************************************************/

/*
 *	EPS 파라미터 공통 조회
 */ 
// DZZPR_EPS_BID_SAP_MIDDLE_POPUP_SELECT
this.fnSelectEPS = function(lv_app) {
	
	this.dsEPS = new Dataset();
	
	this._dsProcEPS = new Dataset();
	this._dsProcEPS.addColumn("TARGET", "string");
	this._dsProcEPS.addColumn("SP", "string");
	
	this._dsProcEPS.addRow();
	this._dsProcEPS.setColumn(0, "TARGET", "eps");
	this._dsProcEPS.setColumn(0, "SP", "DZZPR_EPS_BID_SAP_MIDDLE_POPUP_SELECT");
	
	this.dsSelectEPS = new Dataset();
	this.dsSelectEPS.addColumn("NO_BID", "string");		// ERP발주(입찰)번호
	this.dsSelectEPS.addColumn("YN_UNION", "string");	// 통합입찰여부
	this.dsSelectEPS.addColumn("ID_USER", "string");
	
	this.dsSelectEPS.addRow();
	
	this.dsSelectEPS.setColumn(0, "NO_BID", this.dsSearch.getColumn(0, "NO_BID"));
	this.dsSelectEPS.setColumn(0, "YN_UNION", "N");
	this.dsSelectEPS.setColumn(0, "ID_USER", this.AuthClient.ID_USER);

	var strSvcId    = "eps";
	var strSvcType  = "select";
	var inProc		= "_dsProcEPS";
	var inData      = "eps=dsSelectEPS";
	var outData     = "dsEPS=eps0";
	var strArg      = "P_APP=" + lv_app;
	var callBackFnc = "fnCallbackEPS";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
	
}

// DZZPR_EPS_OPEN_SU_NOSAVE_SELECT
this.fnSelectEPS2 = function(lv_app) {
	
	this.dsEPS = new Dataset();
	
	this._dsProcEPS = new Dataset();
	this._dsProcEPS.addColumn("TARGET", "string");
	this._dsProcEPS.addColumn("SP", "string");
	
	this._dsProcEPS.addRow();
	this._dsProcEPS.setColumn(0, "TARGET", "eps");
	this._dsProcEPS.setColumn(0, "SP", "DZZPR_EPS_OPEN_SU_NOSAVE_SELECT");
	
	this.dsSelectEPS = new Dataset();
	this.dsSelectEPS.addColumn("NO_BID", "string");		// ERP발주(입찰)번호
	this.dsSelectEPS.addColumn("YN_UNION", "string");	// 통합입찰여부
	this.dsSelectEPS.addColumn("ID_USER", "string");
	
	this.dsSelectEPS.addRow();
	
	this.dsSelectEPS.setColumn(0, "NO_BID", this.dsSearch.getColumn(0, "NO_BID"));
	this.dsSelectEPS.setColumn(0, "YN_UNION", "N");
	this.dsSelectEPS.setColumn(0, "ID_USER", this.AuthClient.ID_USER);

	var strSvcId    = "eps2";
	var strSvcType  = "select";
	var inProc		= "_dsProcEPS";
	var inData      = "eps=dsSelectEPS";
	var outData     = "dsEPS=eps0";
	var strArg      = "workGbn=" + lv_app;
	var callBackFnc = "fnCallbackEPS";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
	
}

this.fnCallbackEPS = function(svcID, errorCode, errorMsg, strArg)
{
	if (errorCode!=0) {
		this.gfnAlert(errorMsg);
		return;
	}
	
	var url = "";
	if (svcID == "eps") {		
		url = "/buyer/bid/pop/bid_sap_middle_pop.do";
	}
	else if (svcID == "eps2") {		
		url = "/buyer/bid/open_su_nosave.do";
	}
	
	if(this.dsEPS.rowcount > 0) {	
		var arr_param = [];
		
		arr_param.push(strArg);
		for(var c = 0; c < this.dsEPS.colinfos.length; c++) {
			var colid = this.dsEPS.colinfos[c].name;			
			var val = this.dsEPS.getColumn(0, colid);
			if(val==null) val="";
			arr_param.push(colid + "=" + val);
		}
		
		this.gfnOpenEPS(url, arr_param.join('&'));
	}
};

this.fnAttach = function() {
	if (!this.fnSelectValidate()) return false;
	if (!this.gfnGridIsRow(this.dxGrid)) { return false; }
	
	this.dsOpenCheck = new Dataset();
	this.dsOpenCheck.addColumn("NO_BID", "string");
	this.dsOpenCheck.addColumn("TY_CASE", "string");
	
	this.dsOpenCheck.clearData();
	
	var nrow = this.dsOpenCheck.addRow();
	this.dsOpenCheck.setColumn(nrow, "NO_BID", this.dsSearch.getColumn(0, "NO_BID"));
	this.dsOpenCheck.setColumn(nrow, "TY_CASE", this.btnAttach.text);

	var strSvcId    = "attach_check";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "open_check=dsOpenCheck";
	var outData     = "dsTest=open_check0";
	var strArg      = "";
	var callBackFnc = "fnCheckCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

this.fnAttachOpen = function()
{
	var param = {};
	param.NO_BID = this.dsSearch.getColumn(0, "NO_BID");
	param.DS_SUBCON = this.divSearch.form.ccfNO_BID.form.DSTextBox.text;
	param.CD_VENDOR = this.dsList.getColumn(this.dsList.rowposition, "CD_VENDOR");
	param.DS_VENDOR = this.dsList.getColumn(this.dsList.rowposition, "DS_VENDOR");
	param.NO_PR = this.dsList.getColumn(this.dsList.rowposition, "NO_PR");
	param.ADDFILE_NO = this.dsList.getColumn(this.dsList.rowposition, "ADDFILE_NO");
	
	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DCB_ESTIMATION_DOCUMENT_LIST", "", param, 1000, 600);
	
	//this.fnSelectEPS("B");	// B : 입찰참여회사 첨부파일조회
}
 
// 입찰개봉(조달링크) 버튼 클릭시 팝업화면 호출
this.fnOpen = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	if (!this.fnSelectValidate()) return false;
	
	this.gfnConfirm("입찰개봉을 진행하시겠습니까?", "fnOpen_Callback");	
}

this.fnOpen_Callback = function(strId, val) {
	if(val == true) {
		this.dsOpenCheck = new Dataset();
		this.dsOpenCheck.addColumn("NO_BID", "string");
		this.dsOpenCheck.addColumn("TY_CASE", "string");
		this.dsOpenCheck.addColumn("ID_USER", "string");
		
		this.dsOpenCheck.clearData();
		
		var nrow = this.dsOpenCheck.addRow();
		this.dsOpenCheck.setColumn(nrow, "NO_BID", this.dsSearch.getColumn(0, "NO_BID"));
		this.dsOpenCheck.setColumn(nrow, "TY_CASE", this.btnOpen.text);
		this.dsOpenCheck.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);

		var strSvcId    = "open_check";
		var strSvcType  = "grid";
		var inProc		= "_dsProc";
		var inData      = "open_check=dsOpenCheck";
		var outData     = "dsTest=open_check0";
		var strArg      = "";
		var callBackFnc = "fnCheckCallback";
		
		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
							strSvcType , 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
							callBackFnc); // 통신방법 정의 [생략가능]
	}	
}

this.fnOpenBid = function()
{
	this.dsOpenBid = new Dataset();
	this.dsOpenBid.addColumn("NO_BID", "string");
	
	this.dsOpenBid.clearData();
	var nrow = this.dsOpenBid.addRow();
	this.dsOpenBid.setColumn(nrow, "NO_BID", this.dsSearch.getColumn(0, "NO_BID"));
	
	var strSvcId    = "openbid";
	var strSvcType  = "pki/openbid";	// 개봉 서비스
	var inProc		= "";
	var inData      = "input=dsOpenBid";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

this.fnCheck = function()
{
	this.dsCheck = new Dataset();
	this.dsCheck.addColumn("NO_BID", "string");
	
	this.dsCheck.clearData();
	var nrow = this.dsCheck.addRow();
	this.dsCheck.setColumn(nrow, "NO_BID", this.dsSearch.getColumn(0, "NO_BID"));
	
	if (this.dsCheck.rowcount == 0) return;
	
	var strSvcId    = "check";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "check=dsCheck";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
	
}

// 블라인드해제
this.fnBlind = function() {
	if (!this.fnSelectValidate()) return false;
	
	this.gfnConfirm("블라인드 해제를 진행하시겠습니까?", "fnBlind_callback");
	
	//this.fnSelectEPS2("BR");	// BR : 블라인드해제
}

this.fnBlind_callback = function(strID, val)
{
	if(val == true)
	{
		this.dsBlind = new Dataset();
		this.dsBlind.addColumn("NO_BID", "string");
		
		var nrow = this.dsBlind.addRow();
		this.dsBlind.setColumn(nrow, "NO_BID", this.dsSearch.getColumn(0, "NO_BID"));
	
		if (this.dsBlind.rowcount == 0) return;
	
		var strSvcId    = "release";
		var strSvcType  = "save";
		var inProc		= "_dsProc";
		var inData      = "release=dsBlind";
		var outData     = "";
		var strArg      = "";
		var callBackFnc = "fnCallback";
		
		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
							strSvcType , 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
							callBackFnc); // 통신방법 정의 [생략가능]
	}
}

// 투찰가복사 버튼 클릭 이벤트
this.fnCopy = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	// 선택된 row가 있을 경우에만 팝업을 띄움
	//if (!this.gfnGridIsRow(this.dxGrid)) { return false; }
	if(this.dsList.rowcount < 1) { return false; }
	
	this.fnCopyExec();
}

// 상세투찰내역 버튼 클릭시 팝업화면 호출
// 체크로직 후 팝업화면 호출로 변경.
this.fnDtlBid = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	/*
	var chkRow = this.dsList.findRow("CHK","1");
	
	if(chkRow < 0){
		this.gfnAlert("선택된 행이 없습니다.");
		return false;
	}
	*/

	this.dsOpenCheck = new Dataset();
	this.dsOpenCheck.addColumn("NO_BID", "string");
	this.dsOpenCheck.addColumn("TY_CASE", "string");
	
	this.dsOpenCheck.clearData();
	
	var nrow = this.dsOpenCheck.addRow();
	this.dsOpenCheck.setColumn(nrow, "NO_BID", this.dsSearch.getColumn(0, "NO_BID"));
	this.dsOpenCheck.setColumn(nrow, "TY_CASE", this.btnDtlBid.text);

	var strSvcId    = "dtlBid_check";
	var strSvcType  = "grid";
	var inProc      = "_dsProc";
	var inData      = "open_check=dsOpenCheck";
	var outData     = "dsTest=open_check0";
	var strArg      = "";
	var callBackFnc = "fnCheckCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]	
}

// 상세투찰내역 팝업 띄우는 함수.
this.fnOpenDtlBid = function()
{
	// 선택된 row가 있을 경우에만 팝업을 띄움
	if (!this.gfnGridIsRow(this.dxGrid)) { 
		this.gfnAlert("목록에서 해당건을 선택해주세요.");
		return false; 
	}

	var nRow = this.dsList.rowposition;
	var param = {};
	param.CD_SITE = this.dsList.getColumn(nRow, "CD_SITE");
	param.DS_SITE = this.dsList.getColumn(nRow, "DS_SITE");
	param.NO_BID = this.dsList.getColumn(nRow, "NO_BID");
	param.DS_BID = this.dsList.getColumn(nRow, "DS_SUBCON");
	param.CD_VENDOR = this.dsList.getColumn(nRow, "CD_VENDOR");
	param.DS_VENDOR = this.dsList.getColumn(nRow, "DS_VENDOR");
	param.AGREE_STATUS = this.dsList.getColumn(nRow, "AGREE_STATUS");
	
	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DCB_NEGODETAILQRY_ENG", "fnOpenDtlBid_callback", param);
}

this.fnOpenDtlBid_callback = function()
{
	this.FormBtns.Select.click();
}

// 견적대비표 버튼 클릭시 팝업화면 호출
this.fnDaebiBid = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	/*
	var chkRow = this.dsList.findRow("CHK","1");
	
	if(chkRow < 0){
		this.gfnAlert("선택된 행이 없습니다.");
		return false;
	}
	*/
	
	this.dsOpenCheck = new Dataset();
	this.dsOpenCheck.addColumn("NO_BID", "string");
	this.dsOpenCheck.addColumn("TY_CASE", "string");
	
	this.dsOpenCheck.clearData();
	
	var nrow = this.dsOpenCheck.addRow();
	this.dsOpenCheck.setColumn(nrow, "NO_BID", this.dsSearch.getColumn(0, "NO_BID"));
	this.dsOpenCheck.setColumn(nrow, "TY_CASE", this.btnDaebiBid.text);

	var strSvcId    = "daeBiBid_check";
	var strSvcType  = "grid";
	var inProc      = "_dsProc";
	var inData      = "open_check=dsOpenCheck";
	var outData     = "dsTest=open_check0";
	var strArg      = "";
	var callBackFnc = "fnCheckCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]	
}

this.fnOpenDaebiBid = function()
{
	// 선택된 row가 있을 경우에만 팝업을 띄움
	if(this.dsList.rowcount < 1) { return false; }
	
	var nRow = this.dsList.rowposition;
	var param = {};
	param.CD_SITE = this.dsList.getColumn(nRow, "CD_SITE");
	param.DS_SITE = this.dsList.getColumn(nRow, "DS_SITE");
	param.NO_BID = this.dsList.getColumn(nRow, "NO_BID");
	param.DS_BID = this.dsList.getColumn(nRow, "DS_SUBCON");
	
	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DCB_HADOESTIMATIONDAEBIQRY_ENG", "", param);	
}

// 유찰(조달링크) 버튼 클릭시 팝업화면 호출
this.fnPassBid = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	// 선택된 row가 있을 경우에만 팝업을 띄움
	//if (!this.gfnGridIsRow(this.dxGrid)) { return false; }
	if (!this.fnSelectValidate()) return false;

	var param = {};
	var nRow = this.dsList.rowposition;
	
	param.CD_SITE = this.dsSearch.getColumn(0, "CD_SITE");
	param.DS_SITE = this.divSearch.form.ccfCD_SITE.form.DSTextBox.text;
	param.NO_BID = this.dsSearch.getColumn(0, "NO_BID");
	param.DS_SUBCON = this.divSearch.form.ccfNO_BID.form.DSTextBox.text;
	param.CD_SYSTEM = this.dsList.getColumn(nRow, "CD_SYSTEM");
	
	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DCB_YOUCHALDLG_EPS", "fnSuccBidCallback", param, 410, 400);
	//this.gfnAlert("조달 링크");
}

// 재입찰통보
this.fnRebidAlert = function() {
	if (!this.fnSelectValidate()) return false;
	
	this.gfnConfirm("재입찰통보를 진행하시겠습니까?", "fnRebidAlert_callback");
}

this.fnRebidAlert_callback = function(strID, val)
{
	if(val == true)
	{
		this.dsSuccal.clearData();
		this.dsSuccal.addRow();
		
		this.dsSuccal.setColumn(0, "TY_SYSTEM", "DC");
		this.dsSuccal.setColumn(0, "TY_GUBUN", "재입찰통보");
		this.dsSuccal.setColumn(0, "REF_KEY1", this.dsSearch.getColumn(0, "CD_SITE"));
		this.dsSuccal.setColumn(0, "REF_KEY2", this.dsSearch.getColumn(0, "NO_BID"));
		this.dsSuccal.setColumn(0, "REF_KEY3", "");
		this.dsSuccal.setColumn(0, "YN_MAIL", "");
		this.dsSuccal.setColumn(0, "YN_SMS", "");		
		
		if (this.dsSuccal.rowcount == 0) return;
		
		var strSvcId    = "rebid";
		var strSvcType  = "save";
		var inProc		= "_dsProc";
		var inData      = "succal=dsSuccal";
		var outData     = "";
		var strArg      = "";
		var callBackFnc = "fnCallback";
	
		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
							strSvcType , 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
							callBackFnc); // 통신방법 정의 [생략가능]
	}
}

// 낙찰사선정 버튼 클릭시 팝업화면 호출
this.fnSuccBid = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) 
{
	var chkRow = this.dsList.findRow("CHK","1");
	
	if(chkRow < 0){
		this.gfnAlert("선택된 행이 없습니다.");
		return false;
	}

	// 선택된 row가 있을 경우에만 팝업을 띄움
	if (!this.gfnGridIsRow(this.dxGrid)) { 
		this.gfnAlert("목록에서 해당건을 선택해주세요.");
		return false; 
	}
	
	var nRow = this.dsList.rowposition;
	var param = {};
	param.CD_SITE = this.dsList.getColumn(nRow, "CD_SITE");
	param.DS_SITE = this.dsList.getColumn(nRow, "DS_SITE");
	param.NO_BID = this.dsList.getColumn(nRow, "NO_BID");
	param.DS_BID = this.dsList.getColumn(nRow, "DS_SUBCON");
	param.CD_VENDOR = this.dsList.getColumn(nRow, "CD_VENDOR");
	param.DS_VENDOR = this.dsList.getColumn(nRow, "DS_VENDOR");
	param.YN_SUCCESS = "Y";
	
	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DCB_SUCCESSBIDDLG", "fnSuccBidCallback", param, 430, 310);	
}

this.fnSuccBidCallback = function(svcID, value) {	
	// 리턴값	
	if(value == true){	
		this.FormBtns.Select.click();
	}
};

// 낙찰통보 버튼 클릭 이벤트
this.fnSuccAlert = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	if(this.dsList.rowcount < 1) { return false; }
	
	this.fnSuccAlertExec();
}

// 예가관리 버튼 클릭 이벤트
this.fnYega = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	//if(!this.fnSelectValidate()) return;

	var param = {};
	param.CD_SITE = this.dsSearch.getColumn(0, "CD_SITE");
	param.DS_SITE = this.divSearch.form.ccfCD_SITE.form.DSTextBox.text;
	param.NO_BID = this.dsSearch.getColumn(0, "NO_BID");
	param.DS_SUBCON = this.divSearch.form.ccfNO_BID.form.DSTextBox.text;
	
	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DCB_ORDERPLANSR_YEGA", "", param);	
}

/*
 *	투찰가복사 처리
 */
this.fnCopyExec = function() {

	this.dsCopy.clearData();
	
	this.dsCopy.addRow();
	
	this.dsCopy.setColumn(0, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
	this.dsCopy.setColumn(0, "NO_BID", this.dsSearch.getColumn(0, "NO_BID"));
	
	if (this.dsCopy.rowcount == 0) return;
	
	var strSvcId    = "copy";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "copy=dsCopy";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	낙찰통보 처리
 */
this.fnSuccAlertExec = function() {

	this.dsSuccal1.clearData();
	this.dsSuccal1.addRow();
		
	this.dsSuccal1.setColumn(0, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
	this.dsSuccal1.setColumn(0, "NO_BID", this.dsSearch.getColumn(0, "NO_BID"));
		
	if (this.dsSuccal1.rowcount == 0) return;
	
	var strSvcId    = "succal1";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "succal1=dsSuccal1";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
this.fnAPP = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	//if (!this.gfnGridIsRow(this.dxGrid)) { return false; }
	if (this.dsList.rowcount < 1) { return false; }
	
	var param = {};
	//var nRow = this.dsList.rowposition;
	
	param.PARAM01 = this.dsSearch.getColumn(0,"CD_SITE");
	param.PARAM02 = this.dsSearch.getColumn(0, "NO_BID");
	param.ID_AP = this.dsList.getColumn(0, "NO_ELAPDOC");	// 전자결재문서번호
	param.YN_LINK = "N";	// 화면에서 팝업을 호출할경우 N, 링크를 통해서 화면을 오픈할경우 null 이다
	
	// 화면 오픈. 
	// CD_MODULE은 보통 같은 모듈에서 호출하는 경우가 많으니 this.FormInfo.CD_MODULE 사용
	// 타 모듈 화면 호출시 지정할것.
	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DCB_FIRSTSELECT_APP", "fnAprvDialogCallback", param);
	
}
*/

this.fnAprvDialogCallback = function(svcID, value) {
	// 리턴값
	if(value){
		// 결재완료, 결재취소, 결재상신 후에는 재조회를 한다
		this.FormBtns.Select.click();
	}
};

// 낙찰 취소 버튼 클릭 이벤트.
this.fnSuccBidCancel = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	if (!this.gfnGridIsRow(this.dxGrid)) { 
		this.gfnAlert("목록에서 해당건을 선택해주세요.");
		return false; 
	}
	
	var param = {};
	
	param.CD_SITE = this.dsSearch.getColumn(0, "CD_SITE");
	param.DS_SITE = this.divSearch.form.ccfCD_SITE.form.DSTextBox.text;
	param.NO_BID = this.dsSearch.getColumn(0, "NO_BID");
	param.DS_BID = this.divSearch.form.ccfNO_BID.form.DSTextBox.text;
	param.CD_VENDOR = this.dsList.getColumn(this.dsList.rowposition, "CD_VENDOR");
	param.DS_VENDOR = this.dsList.getColumn(this.dsList.rowposition, "DS_VENDOR");
	param.YN_SUCCESS = "N";

	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DCB_SUCCESSBIDDLG", "fnSuccBidCallback", param); 
}

this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
		
		if(e.columnid == "CD_SITE"){
			this.dsSearch.setColumn(0, "NO_BID", "");
			this.divSearch.form.ccfNO_BID.form.DSTextBox.set_value("");	
		}
	}
};


this.fnBtnCheckAll = function()
{
	this.gfnBtnCheck(this.btnAttach, this.dsList);
	this.gfnBtnCheck(this.btnOpen, this.dsList);
	this.gfnBtnCheck(this.btnBlind, this.dsList);
	this.gfnBtnCheck(this.btnCopy, this.dsList);
	this.gfnBtnCheck(this.btnDtlBid, this.dsList);
	this.gfnBtnCheck(this.btnDaebiBid, this.dsList);
	this.gfnBtnCheck(this.btnPassBid, this.dsList);
	this.gfnBtnCheck(this.btnRebidAlert, this.dsList);
	this.gfnBtnCheck(this.btnSuccBid, this.dsList);
	this.gfnBtnCheck(this.btnSuccAlert, this.dsList);
	this.gfnBtnCheck(this.btnYega, this.dsList);
	this.gfnBtnCheck(this.btnAPP, this.dsList);
	this.gfnBtnCheck(this.btnSuccBidCancel, this.dsList);
}   

this.divData_ondragmove = function(obj:nexacro.Div,e:nexacro.DragEventInfo)
{
	if(e.userdata == "splitter") {
		this.divData.form.divSplitter.set_top(e.clienty);
		this.divData.form.resetScroll();	
	}
};

this.divData_divSplitter_ondrag = function(obj:nexacro.Div,e:nexacro.DragEventInfo)
{
	e.set_userdata("splitter");
	return true;
};

// 모든 버튼 enable 설정.
this.fnAllBtnSetEnable = function(value)
{
	this.btnAttach.set_enable(value);		
	this.btnOpen.set_enable(value);		
	this.btnBlind.set_enable(value);		
	this.btnCopy.set_enable(value);		
	this.btnDtlBid.set_enable(value);		
	this.btnDaebiBid.set_enable(value);		
	this.btnPassBid.set_enable(value);		
	this.btnRebidAlert.set_enable(value);		
	this.btnSuccBid.set_enable(value);		
	this.btnSuccAlert.set_enable(value);		
	this.btnYega.set_enable(value);		
	this.btnAPP.set_enable(value);		
	this.btnSuccBidCancel.set_enable(value);
}

this.dsList_cancolumnchange = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	this.dsList.set_enableevent(false);
	for(var i = 0; i < this.dsList.rowcount;i++)
	{
		if(i == e.row)
		{
			this.dsList.setColumn(i, "CHK", 1);
		}else{
			this.dsList.setColumn(i, "CHK", 0);
		}
	}
	this.dsList.set_enableevent(true);
};

this.fnAPP = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) 
{
	if (!this.fnSelectValidate()) return false;

	var param = {};
	var nRow = this.dsList.rowposition;
	
	param.CD_SITE = this.dsSearch.getColumn(0, "CD_SITE");
	param.DS_SITE = this.divSearch.form.ccfCD_SITE.form.DSTextBox.text;
	param.NO_BID = this.dsSearch.getColumn(0, "NO_BID");
	param.DS_SUBCON = this.divSearch.form.ccfNO_BID.form.DSTextBox.text;
	param.CD_SYSTEM = this.dsList.getColumn(nRow, "CD_SYSTEM");
	
	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DCB_NOTICE_DLG", "fnApp_Dlg_callback", param, 710, 290);
	
	// var msg = "입찰결과통보의뢰를 진행하시겠습니까?";
	// this.gfnConfirm(msg, "fnApp_callback", "app1");
}

this.fnApp_Dlg_callback = function(strId, val) 
{
	this.fnApp_callback("app1", val);
}

this.fnApp_Dlg2_callback = function(strId, val) 
{
	this.fnApp_callback("app2", val);
}

this.fnAPP2 = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) 
{
	var chkRow = this.dsList.findRow("CHK","1");
	
	if(chkRow < 0){
		this.gfnAlert("선택된 행이 없습니다.");
		return false;
	}

	// 선택된 row가 있을 경우에만 팝업을 띄움
	if (!this.gfnGridIsRow(this.dxGrid)) { 
		this.gfnAlert("목록에서 해당건을 선택해주세요.");
		return false; 
	}
	
	if (!this.fnSelectValidate()) return false;

	var param = {};
	var nRow = this.dsList.rowposition;
	
	param.CD_SITE = this.dsSearch.getColumn(0, "CD_SITE");
	param.DS_SITE = this.divSearch.form.ccfCD_SITE.form.DSTextBox.text;
	param.NO_BID = this.dsSearch.getColumn(0, "NO_BID");
	param.DS_SUBCON = this.divSearch.form.ccfNO_BID.form.DSTextBox.text;
	param.CD_SYSTEM = this.dsList.getColumn(chkRow, "CD_SYSTEM");
	param.CD_VENDOR = this.dsList.getColumn(chkRow, "CD_VENDOR");
	param.DS_VENDOR = this.dsList.getColumn(chkRow, "DS_VENDOR");
	
	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DCB_SUCESSBID_DLG", "fnApp_Dlg2_callback", param, 710, 330);
	
	/*
	var msg = "선정의뢰를 진행하시겠습니까?";
	this.gfnConfirm(msg, "fnApp_callback", "app2");
	*/
}

this.fnApp_callback = function(strId, val) 
{
	console.log("###################");	
	console.log(strId);
	console.log(val);
	if(val == true) 
	{
		var nRowVendor = this.dsList.rowposition;
		
		this.dsAppParam.clearData();
		var nrow = this.dsAppParam.addRow();
		
		this.dsAppParam.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
		this.dsAppParam.setColumn(nrow, "NO_BID", this.dsSearch.getColumn(0, "NO_BID"));
		this.dsAppParam.setColumn(nrow, "CD_VENDOR", this.dsList.getColumn(nRowVendor, "CD_VENDOR"));
		this.dsAppParam.setColumn(nrow, "TY_GUBUN", strId);
		
		if (this.dsAppParam.rowcount == 0) return;
		
		var strSvcId    = "appChk";
		var strSvcType  = "save";
		var inProc		= "_dsProc";
		
		var inData      = "";
		if(strId == "app1"){
			inData = "appChk=dsAppParam";
		}else if(strId == "app2"){
			inData = "appChk2=dsAppParam";
		}
		var outData     = "";
		var strArg      = "";
		var callBackFnc = "fnCallback";
		
		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
							strSvcType , 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
							callBackFnc); // 통신방법 정의 [생략가능]
	}
}

this.fnAppSelect = function()
{
	var strSvcId    = "appSelect";
	var strSvcType  = "select";
	var inProc		= "_dsProc";
	
	//var url = window.location.href;
	//var end = url.indexOf("index");
	// formname은 필수. 그 뒤의 CD_MODULE과 ID_FORM은 연결할 화면.
	// 추가 파라미터는 APP_SELECT SP에서 보내줌.
	var url = this.gfnGetServerUrl();
	
	if(url == "http://localhost:8080")
	{
		url += "/erp";
	}
	
	url += "/quickview.html?formname=dzz::DZZ_POPUP_TEST.xfdl&CD_MODULE=DCB&ID_FORM=DCB_HADOESTIMATIONDAEBIQRY_ENG";
	
	this.dsAppParam.setColumn(0, "DABIE_URL", url);
	
	var inData      = "";
	var outData     = "";
	if(this.dsAppParam.getColumn(0, "TY_GUBUN") == "app1"){
		inData      = "appSelect=dsAppParam";
		outData     = "dsAppList=appSelect0";
	}else if(this.dsAppParam.getColumn(0, "TY_GUBUN") == "app2"){
		inData 		= "appSelect2=dsAppParam";
		outData     = "dsAppList=appSelect20";
	}
	
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

this.fnAppOpen = function()
{
	if(this.dsAppList.rowcount > 0) 
	{
		var nRowVendor = this.dsList.rowposition;
		var CD_SYSTEM = this.dsList.getColumn(nRowVendor, "CD_SYSTEM");
		var sApType = "";
		var sTitle  = "";
		
		var sRef03  = "";
		
		var ds_site = this.divSearch.form.ccfCD_SITE.form.DSTextBox.text;
		var ds_bid = this.divSearch.form.ccfNO_BID.form.DSTextBox.text;
		
		console.log(this.dsAppParam.getColumn(0, "TY_GUBUN"));
		
		if(this.dsAppParam.getColumn(0, "TY_GUBUN") == "app1"){
			sApType = "DC03";
			sTitle  = "[입찰결과통보/외주]" + ds_site + "/" + ds_bid;
			sRef03  = "DC";
		}else if(this.dsAppParam.getColumn(0, "TY_GUBUN") == "app2"){
			if(CD_SYSTEM == "DC")
			{
				sApType = "DC04";
				sTitle  = "[선정품의/외주]" + ds_site + "/" + ds_bid;
			}else
			{
				sApType = "DM04";
				sTitle  = "[선정품의/자재]" + ds_site + "/" + ds_bid;
			}
			sRef03  = this.dsList.getColumn(nRowVendor, "CD_VENDOR");
		}
		
		var sRef01  = this.dsSearch.getColumn(0, "CD_SITE");
		var sRef02  = this.dsSearch.getColumn(0, "NO_BID");
		var sRef04  = "";
		var oParam  = this.gfnDataSetToJson(this.dsAppList, this.dsAppList.rowposition)

		this.gfnApprove(sApType, sTitle, sRef01, sRef02, sRef03, sRef04, oParam, "fnAprvDialogCallback");
	}
}]]></Script>
    <Objects>
      <Dataset id="dsList" enableevent="false" cancolumnchange="dsList_cancolumnchange"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DCBPR_ESTIMATIONRANKING_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">copy</Col>
            <Col id="SP">DCBPR_BID_EPS_TO_ERP_COPY</Col>
          </Row>
          <Row>
            <Col id="SP">DZZPR_DBMAIL_SMS_SEND</Col>
            <Col id="TARGET">succal</Col>
          </Row>
          <Row>
            <Col id="TARGET">check</Col>
            <Col id="SP">DCBPR_BLIND_CHECK_UPDATE</Col>
          </Row>
          <Row>
            <Col id="SP">DCBPR_ESTIMATION_BLIND_RELEASE</Col>
            <Col id="TARGET">release</Col>
          </Row>
          <Row>
            <Col id="TARGET">succal1</Col>
            <Col id="SP">DCBPR_PUBLISH_BID_UPDATE</Col>
          </Row>
          <Row>
            <Col id="TARGET">open_check</Col>
            <Col id="SP">DCBPR_BIDMAGAM_CHECK_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">d_select</Col>
            <Col id="SP">DCBPR_ESTIMATION_REBID_RESULT_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">appChk</Col>
            <Col id="SP">DCBPR_APP_DC03_CHK</Col>
          </Row>
          <Row>
            <Col id="TARGET">appSelect</Col>
            <Col id="SP">DCBPR_APP_DC03_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">appChk2</Col>
            <Col id="SP">DCBPR_APP_DC04_CHK</Col>
          </Row>
          <Row>
            <Col id="TARGET">appSelect2</Col>
            <Col id="SP">DCBPR_APP_DC04_SELECT</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_SITE" type="STRING" size="256"/>
          <Column id="NO_BID" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CD_SITE"/>
            <Col id="NO_BID"/>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsTest"/>
      <Dataset id="dsListSub"/>
      <Dataset id="dsAppList" onvaluechanged="dsList_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_SITE" type="STRING" size="256"/>
          <Column id="DS_SITE" type="STRING" size="256"/>
          <Column id="NO_BID" type="STRING" size="256"/>
          <Column id="NO_HADO" type="STRING" size="256"/>
          <Column id="DS_SUBCON" type="STRING" size="256"/>
          <Column id="TY_ACCOUNT" type="STRING" size="256"/>
          <Column id="RT_TAX" type="BIGDECIMAL" size="256"/>
          <Column id="TY_TAX" type="STRING" size="256"/>
          <Column id="RT_JIBUN" type="INT" size="256"/>
          <Column id="DT_FROM" type="STRING" size="256"/>
          <Column id="DT_TO" type="STRING" size="256"/>
          <Column id="DS_FROMTO" type="STRING" size="256"/>
          <Column id="DT_REQ_SITE" type="STRING" size="256"/>
          <Column id="DT_HQRECEIPT" type="STRING" size="256"/>
          <Column id="DT_HQAPPR" type="STRING" size="256"/>
          <Column id="AM_TT_DOKUB" type="BIGDECIMAL" size="256"/>
          <Column id="AM_TT_SILHENG" type="BIGDECIMAL" size="256"/>
          <Column id="AM_REQUEST" type="BIGDECIMAL" size="256"/>
          <Column id="AM_GONGSA" type="BIGDECIMAL" size="256"/>
          <Column id="UP_PYEONG" type="INT" size="256"/>
          <Column id="CD_VENDOR" type="STRING" size="256"/>
          <Column id="CD_COSTCLASS" type="STRING" size="256"/>
          <Column id="DS_COSTCLASS" type="STRING" size="256"/>
          <Column id="CD_LICCOST" type="STRING" size="256"/>
          <Column id="DS_LICCOST" type="STRING" size="256"/>
          <Column id="CD_SPECCONST" type="STRING" size="256"/>
          <Column id="CD_AREA" type="STRING" size="256"/>
          <Column id="DS_AREA" type="STRING" size="256"/>
          <Column id="NO_RFQ" type="STRING" size="256"/>
          <Column id="DS_CONTMETHOD" type="STRING" size="256"/>
          <Column id="AREA_SITE" type="INT" size="256"/>
          <Column id="AM_BASIC" type="INT" size="256"/>
          <Column id="YN_PUBLISH_BID" type="STRING" size="256"/>
          <Column id="YN_ATTACH_ILSIK" type="STRING" size="256"/>
          <Column id="YN_HASU" type="STRING" size="256"/>
          <Column id="YN_EXFILE_SEPARATE" type="STRING" size="256"/>
          <Column id="NO_UNION_HADO" type="STRING" size="256"/>
          <Column id="NO_UNION_BID_CONNECT" type="STRING" size="256"/>
          <Column id="YN_UNION_BID" type="STRING" size="256"/>
          <Column id="YN_UNION_BID_ING" type="STRING" size="256"/>
          <Column id="CT_GONGU" type="INT" size="256"/>
          <Column id="NUM_GONGU" type="BIGDECIMAL" size="256"/>
          <Column id="AREA_SITE1" type="BIGDECIMAL" size="256"/>
          <Column id="AREA_SITE2" type="BIGDECIMAL" size="256"/>
          <Column id="AREA_SITE3" type="BIGDECIMAL" size="256"/>
          <Column id="AREA_SITE4" type="BIGDECIMAL" size="256"/>
          <Column id="AREA_SITEALL" type="BIGDECIMAL" size="256"/>
          <Column id="ID_MANAGER" type="BIGDECIMAL" size="256"/>
          <Column id="NM_MANAGER" type="STRING" size="256"/>
          <Column id="NO_MANAGERTEL" type="STRING" size="256"/>
          <Column id="ID_SITESABUN" type="STRING" size="256"/>
          <Column id="NM_SITESABUN" type="STRING" size="256"/>
          <Column id="NO_SITETEL" type="STRING" size="256"/>
          <Column id="RM_BIDREMARK" type="STRING" size="256"/>
          <Column id="RM_REMARK" type="STRING" size="256"/>
          <Column id="YN_EXPLAIN" type="STRING" size="256"/>
          <Column id="ONOFF_EXPLAIN" type="STRING" size="256"/>
          <Column id="AT_SITEEXPLAIN" type="STRING" size="256"/>
          <Column id="DT_EXPLAIN" type="STRING" size="256"/>
          <Column id="DT_EXPLAIN_GONGO" type="STRING" size="256"/>
          <Column id="DT_BIDMAGAM" type="STRING" size="256"/>
          <Column id="DT_BIDMAGAM_GONGO" type="STRING" size="256"/>
          <Column id="TY_BID" type="STRING" size="256"/>
          <Column id="DS_BID_SUCCESS" type="STRING" size="256"/>
          <Column id="ONOFF" type="STRING" size="256"/>
          <Column id="ID_BIDCOORDI" type="STRING" size="256"/>
          <Column id="NM_BIDCOORDI" type="STRING" size="256"/>
          <Column id="NO_BIDCOORDITEL" type="STRING" size="256"/>
          <Column id="EM_BIDCOORDI" type="STRING" size="256"/>
          <Column id="ID_BIDDAM1" type="STRING" size="256"/>
          <Column id="NM_BIDDAM1" type="STRING" size="256"/>
          <Column id="NO_BIDDAM1TEL" type="STRING" size="256"/>
          <Column id="EM_BIDDAM1" type="STRING" size="256"/>
          <Column id="ID_BIDDAM2" type="STRING" size="256"/>
          <Column id="NM_BIDDAM2" type="STRING" size="256"/>
          <Column id="NO_BIDDAM2TEL" type="STRING" size="256"/>
          <Column id="EM_BIDDAM2" type="STRING" size="256"/>
          <Column id="ID_QUESTION" type="STRING" size="256"/>
          <Column id="NM_QUESTION" type="STRING" size="256"/>
          <Column id="NO_QUESTIONTEL" type="STRING" size="256"/>
          <Column id="EM_QUESTION" type="STRING" size="256"/>
          <Column id="ID_INSERT" type="STRING" size="256"/>
          <Column id="NM_INSERT" type="STRING" size="256"/>
          <Column id="DT_INSERT" type="STRING" size="256"/>
          <Column id="ID_UPDATE" type="STRING" size="256"/>
          <Column id="NM_UPDATE" type="STRING" size="256"/>
          <Column id="DT_UPDATE" type="STRING" size="256"/>
          <Column id="GW_STATUS1" type="STRING" size="256"/>
          <Column id="DS_STATUS1" type="STRING" size="256"/>
          <Column id="TY_BIDSTATUS" type="STRING" size="256"/>
          <Column id="DS_BIDSTATUS" type="STRING" size="256"/>
          <Column id="CT_HOUSEHOLDS" type="BIGDECIMAL" size="256"/>
          <Column id="RT_CONTGUARANTEE" type="BIGDECIMAL" size="256"/>
          <Column id="RT_ASGUARANTEE" type="BIGDECIMAL" size="256"/>
          <Column id="DT_ASFROMTO" type="STRING" size="256"/>
          <Column id="CT_JICHAE" type="INT" size="256"/>
          <Column id="TY_RETIRE_BUGEUM" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="dsAppList2" onvaluechanged="dsList_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_SITE" type="STRING" size="256"/>
          <Column id="DS_SITE" type="STRING" size="256"/>
          <Column id="NO_BID" type="STRING" size="256"/>
          <Column id="NO_HADO" type="STRING" size="256"/>
          <Column id="DS_SUBCON" type="STRING" size="256"/>
          <Column id="TY_ACCOUNT" type="STRING" size="256"/>
          <Column id="RT_TAX" type="BIGDECIMAL" size="256"/>
          <Column id="TY_TAX" type="STRING" size="256"/>
          <Column id="RT_JIBUN" type="INT" size="256"/>
          <Column id="DT_FROM" type="STRING" size="256"/>
          <Column id="DT_TO" type="STRING" size="256"/>
          <Column id="DS_FROMTO" type="STRING" size="256"/>
          <Column id="DT_REQ_SITE" type="STRING" size="256"/>
          <Column id="DT_HQRECEIPT" type="STRING" size="256"/>
          <Column id="DT_HQAPPR" type="STRING" size="256"/>
          <Column id="AM_TT_DOKUB" type="BIGDECIMAL" size="256"/>
          <Column id="AM_TT_SILHENG" type="BIGDECIMAL" size="256"/>
          <Column id="AM_REQUEST" type="BIGDECIMAL" size="256"/>
          <Column id="AM_GONGSA" type="BIGDECIMAL" size="256"/>
          <Column id="UP_PYEONG" type="INT" size="256"/>
          <Column id="CD_VENDOR" type="STRING" size="256"/>
          <Column id="CD_COSTCLASS" type="STRING" size="256"/>
          <Column id="DS_COSTCLASS" type="STRING" size="256"/>
          <Column id="CD_LICCOST" type="STRING" size="256"/>
          <Column id="DS_LICCOST" type="STRING" size="256"/>
          <Column id="CD_SPECCONST" type="STRING" size="256"/>
          <Column id="CD_AREA" type="STRING" size="256"/>
          <Column id="DS_AREA" type="STRING" size="256"/>
          <Column id="NO_RFQ" type="STRING" size="256"/>
          <Column id="DS_CONTMETHOD" type="STRING" size="256"/>
          <Column id="AREA_SITE" type="INT" size="256"/>
          <Column id="AM_BASIC" type="INT" size="256"/>
          <Column id="YN_PUBLISH_BID" type="STRING" size="256"/>
          <Column id="YN_ATTACH_ILSIK" type="STRING" size="256"/>
          <Column id="YN_HASU" type="STRING" size="256"/>
          <Column id="YN_EXFILE_SEPARATE" type="STRING" size="256"/>
          <Column id="NO_UNION_HADO" type="STRING" size="256"/>
          <Column id="NO_UNION_BID_CONNECT" type="STRING" size="256"/>
          <Column id="YN_UNION_BID" type="STRING" size="256"/>
          <Column id="YN_UNION_BID_ING" type="STRING" size="256"/>
          <Column id="CT_GONGU" type="INT" size="256"/>
          <Column id="NUM_GONGU" type="BIGDECIMAL" size="256"/>
          <Column id="AREA_SITE1" type="BIGDECIMAL" size="256"/>
          <Column id="AREA_SITE2" type="BIGDECIMAL" size="256"/>
          <Column id="AREA_SITE3" type="BIGDECIMAL" size="256"/>
          <Column id="AREA_SITE4" type="BIGDECIMAL" size="256"/>
          <Column id="AREA_SITEALL" type="BIGDECIMAL" size="256"/>
          <Column id="ID_MANAGER" type="BIGDECIMAL" size="256"/>
          <Column id="NM_MANAGER" type="STRING" size="256"/>
          <Column id="NO_MANAGERTEL" type="STRING" size="256"/>
          <Column id="ID_SITESABUN" type="STRING" size="256"/>
          <Column id="NM_SITESABUN" type="STRING" size="256"/>
          <Column id="NO_SITETEL" type="STRING" size="256"/>
          <Column id="RM_BIDREMARK" type="STRING" size="256"/>
          <Column id="RM_REMARK" type="STRING" size="256"/>
          <Column id="YN_EXPLAIN" type="STRING" size="256"/>
          <Column id="ONOFF_EXPLAIN" type="STRING" size="256"/>
          <Column id="AT_SITEEXPLAIN" type="STRING" size="256"/>
          <Column id="DT_EXPLAIN" type="STRING" size="256"/>
          <Column id="DT_EXPLAIN_GONGO" type="STRING" size="256"/>
          <Column id="DT_BIDMAGAM" type="STRING" size="256"/>
          <Column id="DT_BIDMAGAM_GONGO" type="STRING" size="256"/>
          <Column id="TY_BID" type="STRING" size="256"/>
          <Column id="DS_BID_SUCCESS" type="STRING" size="256"/>
          <Column id="ONOFF" type="STRING" size="256"/>
          <Column id="ID_BIDCOORDI" type="STRING" size="256"/>
          <Column id="NM_BIDCOORDI" type="STRING" size="256"/>
          <Column id="NO_BIDCOORDITEL" type="STRING" size="256"/>
          <Column id="EM_BIDCOORDI" type="STRING" size="256"/>
          <Column id="ID_BIDDAM1" type="STRING" size="256"/>
          <Column id="NM_BIDDAM1" type="STRING" size="256"/>
          <Column id="NO_BIDDAM1TEL" type="STRING" size="256"/>
          <Column id="EM_BIDDAM1" type="STRING" size="256"/>
          <Column id="ID_BIDDAM2" type="STRING" size="256"/>
          <Column id="NM_BIDDAM2" type="STRING" size="256"/>
          <Column id="NO_BIDDAM2TEL" type="STRING" size="256"/>
          <Column id="EM_BIDDAM2" type="STRING" size="256"/>
          <Column id="ID_QUESTION" type="STRING" size="256"/>
          <Column id="NM_QUESTION" type="STRING" size="256"/>
          <Column id="NO_QUESTIONTEL" type="STRING" size="256"/>
          <Column id="EM_QUESTION" type="STRING" size="256"/>
          <Column id="ID_INSERT" type="STRING" size="256"/>
          <Column id="NM_INSERT" type="STRING" size="256"/>
          <Column id="DT_INSERT" type="STRING" size="256"/>
          <Column id="ID_UPDATE" type="STRING" size="256"/>
          <Column id="NM_UPDATE" type="STRING" size="256"/>
          <Column id="DT_UPDATE" type="STRING" size="256"/>
          <Column id="GW_STATUS1" type="STRING" size="256"/>
          <Column id="DS_STATUS1" type="STRING" size="256"/>
          <Column id="TY_BIDSTATUS" type="STRING" size="256"/>
          <Column id="DS_BIDSTATUS" type="STRING" size="256"/>
          <Column id="CT_HOUSEHOLDS" type="BIGDECIMAL" size="256"/>
          <Column id="RT_CONTGUARANTEE" type="BIGDECIMAL" size="256"/>
          <Column id="RT_ASGUARANTEE" type="BIGDECIMAL" size="256"/>
          <Column id="DT_ASFROMTO" type="STRING" size="256"/>
          <Column id="CT_JICHAE" type="INT" size="256"/>
          <Column id="TY_RETIRE_BUGEUM" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item2" compid="divSearch.form.ccfCD_SITE.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_SITE"/>
      <BindItem id="item0" compid="divSearch.form.ccfNO_BID.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="NO_BID"/>
    </Bind>
  </Form>
</FDL>
