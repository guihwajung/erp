<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="form" width="348" height="96" maxwidth="388" maxheight="172" titletext="은행송금명세서 급여이체" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divData" taborder="0" left="0" top="0" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <!-- 출금계좌 -->
              <Static id="staACCOUNT" taborder="3" text="출금계좌" left="0" top="0" width="87" height="30" cssclass="sta_WF_tablelabelE"/>
              <Static id="staACCOUNT_bg" taborder="4" left="staACCOUNT:-1" top="staACCOUNT:-30" width="262" height="30" cssclass="sta_WF_tablebg" onclick="sta04_onclick" textAlign="right"/>
              <Combo id="cboACCOUNT" taborder="6" left="staACCOUNT:5" top="staACCOUNT:-25" width="250" height="20" datacolumn="DS_ACCOUNT" codecolumn="NO_ACCOUNT" index="-1" value="1" onitemchanged="fnSearchInit" readonly="false" innerdataset="dsACCOUNT"/>
              <!-- 이체구분 -->
              <Static id="staTRANS" taborder="0" text="이체구분" left="0" top="staACCOUNT:-1" width="87" height="30" visible="true" cssclass="sta_WF_tablelabelE"/>
              <Static id="staTRANS_bg" taborder="1" left="staTRANS:-1" top="staTRANS:-30" width="262" height="30" cssclass="sta_WF_tablebg" visible="true"/>
              <Combo id="cboTRANS" taborder="5" left="staTRANS:5" top="staTRANS:-25" width="250" height="20" innerdataset="dsTRANS" datacolumn="DS_CODE" codecolumn="CD_CODE" index="-1" value="1" onitemchanged="fnSearchInit" readonly="false"/>
              <Div id="ccfCD_CORP" CDTextWidth="30" taborder="8" left="87" top="30" width="180" height="20" url="cmm::cmmCodeFind.xfdl" text="" CodeFindName="DAX_CFCORP2" enable="true" visible="false"/>
              <Div id="divBtns" left="120" top="staTRANS:10" width="130" height="27" taborder="2">
                <Layouts>
                  <Layout>
                    <Button id="btnOK" taborder="1" text="확인" left="0" top="0" width="60" height="27" onclick="btnOK_onclick"/>
                    <Button id="btnCANCLE" taborder="0" text="취소" left="btnOK:10" top="0" width="60" height="27" onclick="btnCANCLE_onclick"/>
                  </Layout>
                </Layouts>
              </Div>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo) {
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	this.fnInit();
    this.fnSetCombo(); 
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
	
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
	
}

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.cboACCOUNT = this.divData.form.cboACCOUNT;
	this.cboTRANS = this.divData.form.cboTRANS;
}

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	
}

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	// 저장
	this.dsInsert = new Dataset();
	this.dsInsert.addColumn("SEND_GB", "string");
	this.dsInsert.addColumn("YM_SALARY", "string");
	this.dsInsert.addColumn("TY_SALARY", "string");
	this.dsInsert.addColumn("SN_SALARY", "int");
	this.dsInsert.addColumn("CD_CORP", "string");
	this.dsInsert.addColumn("ID_SABUN", "string");
	this.dsInsert.addColumn("DT_SALARY", "string");
	this.dsInsert.addColumn("AM_SALARY", "bigdecimal");
	this.dsInsert.addColumn("NM_OWNER", "string");
	this.dsInsert.addColumn("NO_IN", "string");
	this.dsInsert.addColumn("CD_IN", "string");
	this.dsInsert.addColumn("NO_OUT", "string");
	this.dsInsert.addColumn("CD_OUT", "string");
	this.dsInsert.addColumn("ID_USER", "string");
}

/************************************************************************
 * 콤보 데이터 조회 및 설정
 ************************************************************************/
this.fnSetCombo = function() {
	// 계좌 콤보 데이터 조회
	this.dsComboAccount = new Dataset();
	this.dsComboAccount.addColumn("CD_CORP", "string");
	
	this.dsComboAccount.clearData();
	this.dsComboAccount.addRow();
	this.dsComboAccount.setColumn(0, "CD_CORP", this.dsData.getColumn(0, "CD_CORP"));
	
	// 이체구분 콤보 데이터 조회
	this.dsComboTrans = new Dataset();
	this.dsComboTrans.addColumn("TY_SEL", "string");
	this.dsComboTrans.addColumn("CD_PREFIX", "string");
	this.dsComboTrans.addColumn("CD_UPPREFIX", "string");	
	
	this.dsComboTrans.clearData();
	this.dsComboTrans.addRow();
	this.dsComboTrans.setColumn(0, "TY_SEL", "P");
	this.dsComboTrans.setColumn(0, "CD_PREFIX", "GU");
	this.dsComboTrans.setColumn(0, "CD_UPPREFIX", "");
	
	var strSvcId    = "combo";
	var strSvcType  = "select";
	var inProc		= "_dsProc";
	var inData      = "account=dsComboAccount trans=dsComboTrans";
	var outData     = "dsACCOUNT=account0 dsTRANS=trans0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction(strSvcId,		// transaction을 구분하기 위한 svc id값
						strSvcType, 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData, 		// 입력값으로 보낼 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						outData, 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc);	// 통신방법 정의 [생략가능]
}

/************************************************************************
 * 화면 및 검색영역 초기화
 ************************************************************************/
this.fnInit = function() {
 	var frame = this.getOwnerFrame();	
 	if (!this.gfnIsNull(frame.CD_CORP)) {
		this.dsData.setColumn(0, "CD_CORP"  , frame.CD_CORP);
		this.dsData.setColumn(0, "YM_SALARY", frame.YM_SALARY);
		this.dsData.setColumn(0, "TY_SALARY", frame.TY_SALARY);
		this.dsData.setColumn(0, "SN_SALARY", frame.SN_SALARY);
 	}
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 //계좌조회
// this.fnSetComboAccount = function() {
// 	this.dsComboAccount.clearData();
// 	this.dsComboAccount.addRow();
// 	this.dsComboAccount.setColumn(0, "CD_CORP", this.dsData.getColumn(0, "CD_CORP"));
// 	
// 	var strSvcId    = "account";
// 	var strSvcType  = "select";
// 	var inProc		= "_dsProc";
// 	var inData      = "account=dsComboAccount trans=dsComboTrans";
// 	var outData     = "dsACCOUNT=account0";
// 	var strArg      = "";
// 	var callBackFnc = "fnCallback";
// 	
// 	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
// 						strSvcType , 	// transaction을 요청할 구분
// 						inProc,			// Procedure 정보 Dataset 이름
// 						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
// 						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
// 						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
// 						callBackFnc); // 통신방법 정의 [생략가능]
// };

//이체구분 조회
// this.fnSetComboTrans = function() {
// 
// 	this.dsComboTrans.clearData();
// 	this.dsComboTrans.addRow();
// 	this.dsComboTrans.setColumn(0, "TY_SEL", "P");
// 	this.dsComboTrans.setColumn(0, "CD_PREFIX", "GU");
// 	this.dsComboTrans.setColumn(0, "CD_UPPREFIX", "");	
// 	
// 	var strSvcId    = "trans";
// 	var strSvcType  = "select";
// 	var inProc		= "_dsProc";
// 	var inData      = "trans=dsComboTrans";
// 	var outData     = "dsTRANS=trans0";
// 	var strArg      = "";
// 	var callBackFnc = "fnCallback";
// 	
// 	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
// 						strSvcType , 	// transaction을 요청할 구분
// 						inProc,			// Procedure 정보 Dataset 이름
// 						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
// 						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
// 						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
// 						callBackFnc); // 통신방법 정의 [생략가능]
// };

// 급여이체
this.fnSave = function() {
	if(!this.fnSaveValid()) return;

	this.dsInsert.clearData();
	
	var CD_OUT = "";
	var NO_OUT = this.dsData.getColumn(0, "NO_OUT");
	var nFindIdx = this.dsACCOUNT.findRow("NO_ACCOUNT", NO_OUT);	
	if(nFindIdx == -1){
		this.gfnAlert("계좌 은행찾기 오류");
		return;
	}else{
		CD_OUT = this.dsACCOUNT.getColumn(nFindIdx, "CD_BANK"); //은행
	}
	
	for(var i=0;i<this.getOwnerFrame().targetDs.rowcount;i++){
		if(this.gfnNvl(this.getOwnerFrame().targetDs.getColumn(i, "CHK"), "0") != "1") continue;
		
		var nrow = this.dsInsert.addRow();
					
		this.dsInsert.setColumn(nrow, "SEND_GB", this.dsData.getColumn(0, "SEND_GB")); //이체구분
		this.dsInsert.setColumn(nrow, "YM_SALARY", this.dsData.getColumn(0, "YM_SALARY"));
		this.dsInsert.setColumn(nrow, "TY_SALARY", this.dsData.getColumn(0, "TY_SALARY"));
		this.dsInsert.setColumn(nrow, "SN_SALARY", this.dsData.getColumn(0, "SN_SALARY"));
		this.dsInsert.setColumn(nrow, "CD_CORP", this.dsData.getColumn(0, "CD_CORP"));
		this.dsInsert.setColumn(nrow, "ID_SABUN", this.gfnNvl(this.getOwnerFrame().targetDs.getColumn(i, "ID_SABUN"), ""));
		this.dsInsert.setColumn(nrow, "DT_SALARY", this.gfnNvl(this.getOwnerFrame().targetDs.getColumn(i, "DT_SALARY"), ""));
		this.dsInsert.setColumn(nrow, "AM_SALARY", this.getOwnerFrame().targetDs.getColumn(i, "AM_NETPAYSUM"));//급여금액(지급총액)
		this.dsInsert.setColumn(nrow, "NM_OWNER", this.gfnNvl(this.getOwnerFrame().targetDs.getColumn(i, "NM_OWNER"), ""));
		this.dsInsert.setColumn(nrow, "NO_IN", this.gfnNvl(this.getOwnerFrame().targetDs.getColumn(i, "CD_ACCOUNT"), "")); //입금계좌
		this.dsInsert.setColumn(nrow, "CD_IN", this.gfnNvl(this.getOwnerFrame().targetDs.getColumn(i, "CD_BANK"), "")); //입금은행
		this.dsInsert.setColumn(nrow, "NO_OUT", NO_OUT); //출금계좌
		this.dsInsert.setColumn(nrow, "CD_OUT", CD_OUT); //출금은행
		this.dsInsert.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);	
	}
	
	//trace(this.dsInsert.saveXML());
	
	if (this.dsInsert.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "insert=dsInsert";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
											
}

 /************************************************************************
 * Validate
 ************************************************************************/
this.fnSaveValid = function() {
	if(this.gfnIsNull(this.dsData.getColumn(0, "NO_OUT"))) {
		this.fnValidCallback = function() {
			this.cboACCOUNT.setFocus();
		}
		this.gfnAlert("출급계좌를 선택하세요.", "fnValidCallback");
		return false;
	}
	if (this.gfnIsNull(this.dsData.getColumn(0, "SEND_GB"))) {
		this.fnValidCallback = function() {
			this.cboTRANS.form.CDTextBox.setFocus();
		}
		this.gfnAlert("이체구분을 선택하세요.", "fnValidCallback");
		return false;
	}
 	return true;
};
/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if(svcID == "combo"){
		this.cboACCOUNT.set_index(0);
		this.cboTRANS.set_index(0);
 	}
	else if(svcID == "trans"){
		this.cboTRANS.set_index(0);
	}
	else if(svcID == "save"){
		
		if (errorCode == 0) {
			this.fnSaveAfter = function(){
				this.getParentContext().close(true);
			}
			this.gfnAlert("급여이체가 완료 되었습니다.", "fnSaveAfter");
			return;
		} else {
			this.gfnAlert(errorMsg);
		}		
	}
};

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/


/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
 /************************************************************************
 * 확장버튼 이벤트
 ************************************************************************/
/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.btnOK_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo){
	this.fnSave(); 
};

this.btnCANCLE_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo){
	this.getParentContext().close(false);
};

]]></Script>
    <Objects>
      <Dataset id="dsData">
        <ColumnInfo>
          <Column id="CD_CORP" type="STRING" size="256"/>
          <Column id="NO_OUT" type="STRING" size="256"/>
          <Column id="SEND_GB" type="STRING" size="256"/>
          <Column id="YM_SALARY" type="STRING" size="256"/>
          <Column id="TY_SALARY" type="STRING" size="256"/>
          <Column id="SN_SALARY" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">insert</Col>
            <Col id="SP">DAUPR_BRANCH_INSERT</Col>
          </Row>
          <Row>
            <Col id="SP">DAUPR_SALARYBANK_COMBO</Col>
            <Col id="TARGET">account</Col>
          </Row>
          <Row>
            <Col id="TARGET">trans</Col>
            <Col id="SP">DAZPR_COMMONCODE_COMBO</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsACCOUNT">
        <ColumnInfo>
          <Column id="CD_BANK" type="STRING" size="256"/>
          <Column id="DS_BANK" type="STRING" size="256"/>
          <Column id="NO_ACCOUNT" type="STRING" size="256"/>
          <Column id="DS_ACCOUNT" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="dsTRANS">
        <ColumnInfo>
          <Column id="CD_CODE" type="STRING" size="256"/>
          <Column id="DS_CODE" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="dsList"/>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="ccfCD_CORP.form.CDTextBox" propid="value" datasetid="dsData" columnid="CD_CORP"/>
      <BindItem id="item1" compid="divData.form.cboACCOUNT" propid="value" datasetid="dsData" columnid="NO_OUT"/>
      <BindItem id="item2" compid="divData.form.cboTRANS" propid="value" datasetid="dsData" columnid="SEND_GB"/>
    </Bind>
  </Form>
</FDL>
