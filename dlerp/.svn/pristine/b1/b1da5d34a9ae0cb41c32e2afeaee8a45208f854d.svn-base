<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="form" width="1280" height="720" titletext="병합내역상세" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="0" height="0" right="0" cssclass="div_SEARCH_Bg" visible="false">
          <Layouts>
            <Layout/>
          </Layouts>
        </Div>
        <Div id="divData" taborder="1" left="0" top="divSearch:0" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();				
	//this.fnSetCombo();
	
	if ( !this.gfnIsNull(this.getOwnerFrame().CD_CORP) ) {
		this.dsSearch.set_enableevent(false);
		
		this.dsSearch.setColumn(0, "CD_CORP", this.getOwnerFrame().CD_CORP);
		this.dsSearch.setColumn(0, "CD_BANK", this.getOwnerFrame().CD_BANK);
		this.dsSearch.setColumn(0, "NO_ACCOUNT", this.getOwnerFrame().NO_ACCOUNT);
		this.dsSearch.setColumn(0, "TY_CASH", this.getOwnerFrame().TY_CASH);
		this.dsSearch.setColumn(0, "NO_TRADE", this.getOwnerFrame().NO_TRADE);
		this.dsSearch.setColumn(0, "DT_TRADE", this.getOwnerFrame().DT_TRADE);
		
		this.dsSearch.set_enableevent(true);
		
		this.FormBtns.Select.click();
	}
	
}; 

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 ************************************************************************/
this.fnSetButton = function() {
};

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btnMergeCncl = this.gfnFormButtonAdd("btnMergeCncl", "fnMergeCncl", "병합내역 취소");
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	
// 	this.ccfCD_CORP = this.divSearch.form.ccfCD_CORP;		// 법인코드
// 	this.cfCD_BANK = this.divSearch.form.cfCD_BANK;			// 은행코드
// 	this.cfNO_ACCOUNT = this.divSearch.form.cfNO_ACCOUNT;	// 계좌번호
// 	this.cboTY_CASH = this.divSearch.form.cboTY_CASH;		// 거래구분
// 	this.txtNO_TRADE = this.divSearch.form.txtNO_TRADE;		// 거래번호
// 	this.calDT_TRADE = this.divSearch.form.calDT_TRADE;		// 거래일자
	
	this.dxGrid = this.divData.form.objGrid;		// 그리드
	this.grSearch = this.FormInfo.GR_SEARCH;		// 권한?
	this.cdGroup = this.gfnIsNull(this.AuthClient.CD_GROUP) ? "" : this.AuthClient.CD_GROUP;		// 그룹코드
}

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {

// 	this.ccfCD_CORP.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
// 	this.cfCD_BANK.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
// 	this.cfNO_ACCOUNT.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
// 	
// 	this.ccfCD_CORP.AfterCDTextChanged = "fnAfterCDTextChanged";
// 	this.cfCD_BANK.AfterCDTextChanged = "fnAfterCDTextChanged";
// 	this.cfNO_ACCOUNT.AfterCDTextChanged = "fnAfterCDTextChanged";
	
	
	// 품의일자 15일전부터 현재까지 일단 설정.
// 	var vToday = this.gfnGetDate();
// 	this.dsSearch.setColumn(0, "DT_TRADE", vToday);
	
	// 그리드
	this.gfnGridInit(this.dxGrid, this.dsList, "DF", "DFL_CASHINLISTDTL");
	this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforuserDataSetParam";
	this.dxGrid.AfterCDTextChanged = "fnGrid_AfterCDTextChanged";	
	
	// 법인코드세션
// 	if (this.gfnIsNull(this.ccfCD_CORP.form.CDTextBox.value)) {
// 		this.ccfCD_CORP.form.DSTextBox.set_value(this.AuthClient.DS_CORP); 
// 		this.ccfCD_CORP.form.CDTextBox.set_value(this.AuthClient.CD_CORP);	
// 	}		
	
	
	// 권한체크 - 해당부서내역만 조회가능
// 	if (nexacro.toNumber(this.grSearch) >= 2) {
// 		this.ccfCD_CORP.set_enable(false);
// 	}	
	
	// 법인코드 포커스추가
//	this.ccfCD_CORP.form.CDTextBox.setFocus();	
}

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {

	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("DT_TRADE", "string");
	this.dsSelect.addColumn("CD_BANK", "string");
	this.dsSelect.addColumn("TY_CASH", "string");
	this.dsSelect.addColumn("NO_ACCOUNT", "string");
	this.dsSelect.addColumn("NO_TRADE", "bigdecimal");
	this.dsSelect.addColumn("CD_CORP", "string");

	this.dsMergex = new Dataset();
	this.dsMergex.addColumn("DT_TRADE", "string");
	this.dsMergex.addColumn("CD_BANK", "string");
	this.dsMergex.addColumn("TY_CASH", "string");
	this.dsMergex.addColumn("NO_ACCOUNT", "string");
	this.dsMergex.addColumn("NO_TRADE", "bigdecimal");
	this.dsMergex.addColumn("CD_CORP", "string");
	this.dsMergex.addColumn("ID_USER", "string");
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	this.dsSelect.setColumn(0, "DT_TRADE", this.dsSearch.getColumn(0, "DT_TRADE"));
	this.dsSelect.setColumn(0, "CD_BANK", this.dsSearch.getColumn(0, "CD_BANK"));
	this.dsSelect.setColumn(0, "TY_CASH", this.dsSearch.getColumn(0, "TY_CASH"));
	this.dsSelect.setColumn(0, "NO_ACCOUNT", this.dsSearch.getColumn(0, "NO_ACCOUNT"));
	this.dsSelect.setColumn(0, "NO_TRADE", this.dsSearch.getColumn(0, "NO_TRADE"));
	this.dsSelect.setColumn(0, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); 	// 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
}

/*
 *	삭제 버튼
 */
this.fnDel = function() {
}

/*
 *	저장 버튼
 */
this.fnSave = function() {

}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {
	return true;
};

/*
 *	팝업 Validate
 */
this.fnPopupValidate = function(popId) {

}
/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);
	}
	else if(svcID == "save") {
		this.getParentContext().close(true);
// 		if (errorCode == 0) {
// 			this.FormBtns.Select.click();
// 		} else {
// 			this.gfnAlert(errorMsg);
// 		}
	} else if (svcID == "combo") {
// 		//  조회조건(완료여부)
// 		var iRow = this.dsTY_CASH.insertRow(0);
// 		this.dsTY_CASH.setColumn(iRow, "CD_CODE", "");
// 		this.dsTY_CASH.setColumn(iRow, "DS_CODE", "전체");
// 		this.cboTY_CASH.set_index(2);
	}
}

// 병합내역 취소
this.fnMergeCncl = function() {
	this.dsMergex.clearData();
	var nrow = this.dsMergex.addRow();
		
	this.dsMergex.setColumn(nrow, "DT_TRADE", this.dsSearch.getColumn(0, "DT_TRADE"));
	this.dsMergex.setColumn(nrow, "CD_BANK", this.dsSearch.getColumn(0, "CD_BANK"));
	this.dsMergex.setColumn(nrow, "TY_CASH", this.dsSearch.getColumn(0, "TY_CASH"));
	this.dsMergex.setColumn(nrow, "NO_ACCOUNT", this.dsSearch.getColumn(0, "NO_ACCOUNT"));
	this.dsMergex.setColumn(nrow, "NO_TRADE", this.dsSearch.getColumn(0, "NO_TRADE"));
	this.dsMergex.setColumn(nrow, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
	this.dsMergex.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);

	if (this.dsMergex.rowcount == 0) return;
	
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "mergex=dsMergex";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); 	// 통신방법 정의 [생략가능]	
}
/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	var cdCorp = this.ccfCD_CORP.form.CDTextBox.value;
	
	// 법인코드
	if (id == "ccfCD_CORP") {
		dsUserParam.setColumn(nrow, "CD_GROUP", this.gfnIsNull(this.AuthClient.CD_GROUP) ? "" : this.AuthClient.CD_GROUP);
	}
	
	// 은행코드
	if (id == "cfCD_BANK") {
		
	}
	
	if (id == "cfNO_ACCOUNT") {
		if ( this.gfnIsNull(cdCorp) ) {
			dsUserParam.setColumn(nrow, "CD_CORP", "");	
		} else {
			dsUserParam.setColumn(nrow, "CD_CORP", cdCorp);		
		}
	}
	return true;
} 

this.fnAfterCDTextChanged = function(id) {
	switch(id) {
	
	case "ccfCD_CORP": // 법인코드
		break;
		
	case "cfCD_BANK": // 품의부서코드
		break;

	case "cfNO_ACCOUNT": // 수지코드
		break;
	default:
	}	
	return true;
} 

 
this.fnGrid_BeforuserDataSetParam = function(id, dsUserParam, nrow) {
	return true;
}

this.fnGrid_AfterCDTextChanged = function(id, codeFindData) {

};
 
/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
 
/************************************************************************
 * 기타 이벤트
 ************************************************************************/
/*
 *	조회 조건 변경시 초기화
 */
this.fnSearchInit = function(obj,e) {
	if(e == null || (e.pretext != e.posttext)) {
		this.gfnSetFormStatus(this);
		this.gfnGridClear(this.dxGrid);
	}
};

this.fnSetCombo = function() {
	
	this.dsCombo = new Dataset();
	this.dsCombo.addColumn("CD_SYSTEM", "string");
	this.dsCombo.addColumn("CD_TYPE", "string");
	
	this.dsCombo.addRow();
	this.dsCombo.setColumn(0, "CD_SYSTEM", "DF");
	this.dsCombo.setColumn(0, "CD_TYPE", "L2");
	
	var strSvcId    = "combo";
	var strSvcType  = "select";
	var inProc		= "_dsProc";
	var inData      = "combo=dsCombo";
	var outData     = "dsTY_CASH=combo0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
};

this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		//this.gfnGridClear(this.dxGrid);	
		this.dsList.clearData();
	}
};

]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DFLPR_CASHINLISTDTL_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">combo</Col>
            <Col id="SP">DZXPR_COMBO_SELECT</Col>
          </Row>
          <Row>
            <Col id="SP">DFLPR_CASHINLIST_MERGEX</Col>
            <Col id="TARGET">mergex</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsTY_CASH"/>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_CORP" type="STRING" size="256"/>
          <Column id="CD_BANK" type="STRING" size="256"/>
          <Column id="NO_ACCOUNT" type="STRING" size="256"/>
          <Column id="TY_CASH" type="STRING" size="256"/>
          <Column id="NO_TRADE" type="BIGDECIMAL" size="256"/>
          <Column id="DT_TRADE" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
    </Objects>
  </Form>
</FDL>
