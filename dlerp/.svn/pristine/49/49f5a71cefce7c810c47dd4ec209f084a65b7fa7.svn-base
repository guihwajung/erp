<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="New Form" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg" formscrolltype="none">
          <Layouts>
            <Layout>
              <Static id="staDS_SEARCH" taborder="0" text="거래처" left="0.0" top="10.0" width="79.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Radio id="crdoTYPE_SELECT" taborder="1" left="staDS_SEARCH:0.0" top="10.0" height="24.0" innerdataset="dsTYPE_SELECT" datacolumn="VALUE" codecolumn="CODE" direction="vertical" fittocontents="width" width="90" index="0" text="코드" value="C"/>
              <Edit id="ctxtDS_SEARCH" taborder="2" left="crdoTYPE_SELECT:0.0" top="10.0" width="200" height="24.0" value=""/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	this.divSearch.form.crdoTYPE_SELECT.set_index(0);
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btnCREATE = this.gfnFormButtonAdd("btnCREATE", "fnCREATE");
	this.btnCheck = this.gfnFormButtonAdd("btnCheck", "fnCheck");
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {	
	this.dxGrid = this.divData.form.objGrid;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	// 그리드 초기화
	this.gfnGridInit(this.dxGrid, this.dsList, "DQ", "DQD_CUSTOMER_SAP");
};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("TY_SELECT", "string");
	this.dsSelect.addColumn("DS_SEARCH", "string");

	this.dsInsert = new Dataset();
	this.dsInsert.addColumn("KTOKD", "string");
	this.dsInsert.addColumn("NAME1", "string");
	this.dsInsert.addColumn("SUPPL1", "string");
	this.dsInsert.addColumn("SUPPL2", "string");
	this.dsInsert.addColumn("LAND1", "string");
	this.dsInsert.addColumn("REGIO", "string");
	this.dsInsert.addColumn("STCD1", "string");
	this.dsInsert.addColumn("STCD2", "string");
	this.dsInsert.addColumn("J_1KFREPRE", "string");
	this.dsInsert.addColumn("J_1KFTBUS", "string");
	this.dsInsert.addColumn("J_1KFTIND", "string");
	this.dsInsert.addColumn("LIFNR", "string");
	this.dsInsert.addColumn("ZSALES", "string");
	this.dsInsert.addColumn("VKBUR", "string");
	this.dsInsert.addColumn("INCO1", "string");
	this.dsInsert.addColumn("ZTERM", "string");
	this.dsInsert.addColumn("TAXKD", "string");
	this.dsInsert.addColumn("ZSUBRC", "string");
	this.dsInsert.addColumn("TXT", "string");

	this.dsUpdate = new Dataset();
	this.dsUpdate.addColumn("SN_ID", "string");
	this.dsUpdate.addColumn("KTOKD", "string");
	this.dsUpdate.addColumn("NAME1", "string");
	this.dsUpdate.addColumn("SUPPL1", "string");
	this.dsUpdate.addColumn("SUPPL2", "string");
	this.dsUpdate.addColumn("LAND1", "string");
	this.dsUpdate.addColumn("REGIO", "string");
	this.dsUpdate.addColumn("STCD1", "string");
	this.dsUpdate.addColumn("STCD2", "string");
	this.dsUpdate.addColumn("J_1KFREPRE", "string");
	this.dsUpdate.addColumn("J_1KFTBUS", "string");
	this.dsUpdate.addColumn("J_1KFTIND", "string");
	this.dsUpdate.addColumn("LIFNR", "string");
	this.dsUpdate.addColumn("ZSALES", "string");
	this.dsUpdate.addColumn("VKBUR", "string");
	this.dsUpdate.addColumn("INCO1", "string");
	this.dsUpdate.addColumn("ZTERM", "string");
	this.dsUpdate.addColumn("TAXKD", "string");
	this.dsUpdate.addColumn("ZSUBRC", "string");
	this.dsUpdate.addColumn("TXT", "string");

	this.dsDelete = new Dataset();
	this.dsDelete.addColumn("SN_ID", "string");
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	
	this.dsSelect.setColumn(0, "TY_SELECT", this.dsSearch.getColumn(0, "TY_SELECT"));
	this.dsSelect.setColumn(0, "DS_SEARCH", this.dsSearch.getColumn(0, "DS_SEARCH"));
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	var nrow = this.gfnGridAdd(this.dxGrid); // top (default), bottom, current
}

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}

/*
 *	저장 버튼
 */
this.fnSave = function() {
	// 그리드 필수항목 체크
	if (!this.gfnGridValidate(this.dxGrid)) return;	

	this.dxGrid.updateToDataset();
		
	this.dsInsert.clearData();
	this.dsUpdate.clearData();
	this.dsDelete.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "I":
				var nrow = this.dsInsert.addRow();
				this.dsInsert.setColumn(nrow, "KTOKD", this.dsList.getColumn(i, "KTOKD"));
				this.dsInsert.setColumn(nrow, "NAME1", this.dsList.getColumn(i, "NAME1"));
				this.dsInsert.setColumn(nrow, "SUPPL1", this.dsList.getColumn(i, "SUPPL1"));
				this.dsInsert.setColumn(nrow, "SUPPL2", this.dsList.getColumn(i, "SUPPL2"));
				this.dsInsert.setColumn(nrow, "LAND1", this.dsList.getColumn(i, "LAND1"));
				this.dsInsert.setColumn(nrow, "REGIO", this.dsList.getColumn(i, "REGIO"));
				this.dsInsert.setColumn(nrow, "STCD1", this.dsList.getColumn(i, "STCD1"));
				this.dsInsert.setColumn(nrow, "STCD2", this.dsList.getColumn(i, "STCD2"));
				this.dsInsert.setColumn(nrow, "J_1KFREPRE", this.dsList.getColumn(i, "J_1KFREPRE"));
				this.dsInsert.setColumn(nrow, "J_1KFTBUS", this.dsList.getColumn(i, "J_1KFTBUS"));
				this.dsInsert.setColumn(nrow, "J_1KFTIND", this.dsList.getColumn(i, "J_1KFTIND"));
				this.dsInsert.setColumn(nrow, "LIFNR", this.dsList.getColumn(i, "LIFNR"));
				this.dsInsert.setColumn(nrow, "ZSALES", this.dsList.getColumn(i, "ZSALES"));
				this.dsInsert.setColumn(nrow, "VKBUR", this.dsList.getColumn(i, "VKBUR"));
				this.dsInsert.setColumn(nrow, "INCO1", this.dsList.getColumn(i, "INCO1"));
				this.dsInsert.setColumn(nrow, "ZTERM", this.dsList.getColumn(i, "ZTERM"));
				this.dsInsert.setColumn(nrow, "TAXKD", this.dsList.getColumn(i, "TAXKD"));
				this.dsInsert.setColumn(nrow, "ZSUBRC", this.dsList.getColumn(i, "ZSUBRC"));
				this.dsInsert.setColumn(nrow, "TXT", this.dsList.getColumn(i, "TXT"));
				break;
				
			case "U":
				var nrow = this.dsUpdate.addRow();
				this.dsUpdate.setColumn(nrow, "SN_ID", this.dsList.getColumn(i, "SN_ID"));
				this.dsUpdate.setColumn(nrow, "KTOKD", this.dsList.getColumn(i, "KTOKD"));
				this.dsUpdate.setColumn(nrow, "NAME1", this.dsList.getColumn(i, "NAME1"));
				this.dsUpdate.setColumn(nrow, "SUPPL1", this.dsList.getColumn(i, "SUPPL1"));
				this.dsUpdate.setColumn(nrow, "SUPPL2", this.dsList.getColumn(i, "SUPPL2"));
				this.dsUpdate.setColumn(nrow, "LAND1", this.dsList.getColumn(i, "LAND1"));
				this.dsUpdate.setColumn(nrow, "REGIO", this.dsList.getColumn(i, "REGIO"));
				this.dsUpdate.setColumn(nrow, "STCD1", this.dsList.getColumn(i, "STCD1"));
				this.dsUpdate.setColumn(nrow, "STCD2", this.dsList.getColumn(i, "STCD2"));
				this.dsUpdate.setColumn(nrow, "J_1KFREPRE", this.dsList.getColumn(i, "J_1KFREPRE"));
				this.dsUpdate.setColumn(nrow, "J_1KFTBUS", this.dsList.getColumn(i, "J_1KFTBUS"));
				this.dsUpdate.setColumn(nrow, "J_1KFTIND", this.dsList.getColumn(i, "J_1KFTIND"));
				this.dsUpdate.setColumn(nrow, "LIFNR", this.dsList.getColumn(i, "LIFNR"));
				this.dsUpdate.setColumn(nrow, "ZSALES", this.dsList.getColumn(i, "ZSALES"));
				this.dsUpdate.setColumn(nrow, "VKBUR", this.dsList.getColumn(i, "VKBUR"));
				this.dsUpdate.setColumn(nrow, "INCO1", this.dsList.getColumn(i, "INCO1"));
				this.dsUpdate.setColumn(nrow, "ZTERM", this.dsList.getColumn(i, "ZTERM"));
				this.dsUpdate.setColumn(nrow, "TAXKD", this.dsList.getColumn(i, "TAXKD"));
				this.dsUpdate.setColumn(nrow, "ZSUBRC", this.dsList.getColumn(i, "ZSUBRC"));
				this.dsUpdate.setColumn(nrow, "TXT", this.dsList.getColumn(i, "TXT"));
				break;
				
			case "D":
				var nrow = this.dsDelete.addRow();
				this.dsDelete.setColumn(nrow, "SN_ID", this.dsList.getColumn(i, "SN_ID"));
				break;
		}
	}
	
	if (this.dsInsert.rowcount == 0 && this.dsUpdate.rowcount == 0 && this.dsDelete.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "insert=dsInsert update=dsUpdate delete=dsDelete";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {
	var validate = true;
	/*
	if (this.gfnIsNull(this.dsSearch.getColumn(0,"CD_SYSTEM"))) {
		validate = false;
		// Alert후 실행할 처리
		this.fnVaidateCallback = function() {
			this.ccfCD_SYSTEM.form.CDTextBox.setFocus();
		}
		this.gfnAlert("시스템을 입력하세요.", "fnVaidateCallback");
	}
	*/
	return validate;
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);	
	}
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "sap") {
		if (errorCode == 0) {
			//this.FormBtns.Select.click();
			this.fnSapUpdate();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "update_sap")
	{
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "sap_check")
	{
		if (errorCode == 0) {
			if(this.dsExport.getColumn(0, "EV_RETURN_CODE") == "E")
			{
				this.gfnAlert(this.dsExport.getColumn(0, "EV_ERROR_MSG"));
			}
			else
			{
				var msg = "";
				msg += "고객번호 : " + this.dsList1.getColumn(0, "KUNNR") + "\n";
				msg += "고객명 : " +this.dsList1.getColumn(0, "NAME1");
				this.gfnAlert(msg);
			}
			
		} else {
			this.gfnAlert(errorMsg);
		}
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
 
/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
	}
};

this.fnCREATE = function(strId, val) {
	if(this.dsList.rowcount < 1 || this.dsList.rowposition < 0) 
	{
		this.gfnAlert("조회 후 데이터를 선택해주세요.");
		return;
	}
	
	if(this.dsList.getColumn(this.dsList.rowposition, "CHK") == 1)
	{
		this.gfnAlert("이미 거래처코드가 존재하는 데이터입니다.");
		return;
	}
	
	this.fnSapCreate();
}

this.fnCheck = function(strId, val) {
	if(this.dsList.rowcount < 1 || this.dsList.rowposition < 0) 
	{
		this.gfnAlert("조회 후 데이터를 선택해주세요.");
		return;
	}
	
	this.fnSapCheck();
}

this.fnSapCreate = function() {

	this._dsProcSap.clearData();
	var nrow = this._dsProcSap.addRow();
	this._dsProcSap.setColumn(nrow, "TARGET", "select");
	this._dsProcSap.setColumn(nrow, "SP", "ZSD_CUSTOMER_FD01");
	
	this.dsSap = new Dataset();
	
	this.dsSelectSap.clearData();
	nrow = this.dsSelectSap.addRow();
	
	// IN 파라미터 셋팅
	this.dsSelectSap.setColumn(nrow, "KTOKD", this.dsList.getColumn(this.dsList.rowposition, "KTOKD"));
	this.dsSelectSap.setColumn(nrow, "NAME1", this.dsList.getColumn(this.dsList.rowposition, "NAME1"));
	this.dsSelectSap.setColumn(nrow, "SUPPL1", this.dsList.getColumn(this.dsList.rowposition, "SUPPL1"));
	this.dsSelectSap.setColumn(nrow, "SUPPL2", this.dsList.getColumn(this.dsList.rowposition, "SUPPL2"));
	this.dsSelectSap.setColumn(nrow, "LAND1", this.dsList.getColumn(this.dsList.rowposition, "LAND1"));
	this.dsSelectSap.setColumn(nrow, "REGIO", this.dsList.getColumn(this.dsList.rowposition, "REGIO"));
	this.dsSelectSap.setColumn(nrow, "STCD1", this.dsList.getColumn(this.dsList.rowposition, "STCD1"));
	this.dsSelectSap.setColumn(nrow, "STCD2", this.dsList.getColumn(this.dsList.rowposition, "STCD2"));
	this.dsSelectSap.setColumn(nrow, "J_1KFREPRE", this.dsList.getColumn(this.dsList.rowposition, "J_1KFREPRE"));
	this.dsSelectSap.setColumn(nrow, "J_1KFTBUS", this.dsList.getColumn(this.dsList.rowposition, "J_1KFTBUS"));
	this.dsSelectSap.setColumn(nrow, "J_1KFTIND", this.dsList.getColumn(this.dsList.rowposition, "J_1KFTIND"));
	this.dsSelectSap.setColumn(nrow, "LIFNR", this.dsList.getColumn(this.dsList.rowposition, "LIFNR"));
	this.dsSelectSap.setColumn(nrow, "ZSALES", this.dsList.getColumn(this.dsList.rowposition, "ZSALES"));
	this.dsSelectSap.setColumn(nrow, "VKBUR", this.dsList.getColumn(this.dsList.rowposition, "VKBUR"));
	this.dsSelectSap.setColumn(nrow, "INCO1", this.dsList.getColumn(this.dsList.rowposition, "INCO1"));
	this.dsSelectSap.setColumn(nrow, "ZTERM", this.dsList.getColumn(this.dsList.rowposition, "ZTERM"));
	this.dsSelectSap.setColumn(nrow, "TAXKD", this.dsList.getColumn(this.dsList.rowposition, "TAXKD"));
	this.dsSelectSap.setColumn(nrow, "ZSUBRC", this.dsList.getColumn(this.dsList.rowposition, "ZSUBRC"));
	this.dsSelectSap.setColumn(nrow, "TXT", this.dsList.getColumn(this.dsList.rowposition, "TXT"));

	// SAP 호출
	var strSvcId    = "sap";
	var strSvcType  = "sap";
	var inProc		= "_dsProcSap";
	var inData      = "select=dsSap IN_TI_FD01=dsSelectSap";
	var outData     = "dsExport=export dsList1=TO_FD01";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

this.fnSapCheck = function()
{
	this._dsProcSap.clearData();
	var nrow = this._dsProcSap.addRow();
	this._dsProcSap.setColumn(nrow, "TARGET", "select");
	this._dsProcSap.setColumn(nrow, "SP", "ZFIFM_CUSTOMER_INFO_HDS");
	
	this.dsSap = new Dataset();
	
	this.dsCheckSap.clearData();
	nrow = this.dsCheckSap.addRow();
	
	// IN 파라미터 셋팅
	this.dsCheckSap.setColumn(nrow, "IV_KUNNR", this.dsList.getColumn(this.dsList.rowposition, "LIFNR"));
	this.dsCheckSap.setColumn(nrow, "IV_NAME1", this.dsList.getColumn(this.dsList.rowposition, "NAME1"));
	
	// SAP 호출
	var strSvcId    = "sap_check";
	var strSvcType  = "sap";
	var inProc		= "_dsProcSap";
	var inData      = "select=dsCheckSap";
	var outData     = "dsExport=export dsList1=T_RESULT";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

this.fnSapUpdate = function()
{
	this.dsSapUpdate = new Dataset();
	this.dsSapUpdate.addColumn("SN_ID", "string");
	this.dsSapUpdate.addColumn("KTOKD", "string");
	this.dsSapUpdate.addColumn("NAME1", "string");
	this.dsSapUpdate.addColumn("SUPPL1", "string");
	this.dsSapUpdate.addColumn("SUPPL2", "string");
	this.dsSapUpdate.addColumn("LAND1", "string");
	this.dsSapUpdate.addColumn("STCD1", "string");
	this.dsSapUpdate.addColumn("STCD2", "string");
	this.dsSapUpdate.addColumn("REGIO", "string");
	this.dsSapUpdate.addColumn("J_1KFREPRE", "string");
	this.dsSapUpdate.addColumn("J_1KFTBUS", "string");
	this.dsSapUpdate.addColumn("J_1KFTIND", "string");
	this.dsSapUpdate.addColumn("LIFNR", "string");
	this.dsSapUpdate.addColumn("ZSALES", "string");
	this.dsSapUpdate.addColumn("VKBUR", "string");
	this.dsSapUpdate.addColumn("INCO1", "string");
	this.dsSapUpdate.addColumn("ZTERM", "string");
	this.dsSapUpdate.addColumn("TAXKD", "string");
	this.dsSapUpdate.addColumn("ZSUBRC", "string");
	this.dsSapUpdate.addColumn("TXT", "string");
	
	this.dsSapUpdate.clearData();
	
	var nrow = this.dsSapUpdate.addRow();
	
	// 다건일 경우에는 처리방법을 고민 해 봐야함.. 우선은 단건이라고 함.
	this.dsSapUpdate.copyRow(0, this.dsList1, 0);
	this.dsSapUpdate.setColumn(0, "SN_ID", this.dsList.getColumn(this.dsList.rowposition, "SN_ID"));

	if (this.dsSapUpdate.rowcount == 0) return;

	// 단건이라고 생각하고 진행함.
	if(this.dsSapUpdate.getColumn(0, "ZSUBRC") == "S" || this.dsSapUpdate.getColumn(0, "ZSUBRC") == "D")
	{
		//성공여부가 S와 D일때 TXT 컬럼의 첫번째가 VENDOR코드.
		var lifnr = this.dsSapUpdate.getColumn(0, "TXT").split(" ", 1);
		this.dsSapUpdate.setColumn(0, "LIFNR", lifnr);
	}
	

	var strSvcId    = "update_sap";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "update_sap=dsSapUpdate";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DQDPR_CUSTOMER_IF_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">insert</Col>
            <Col id="SP">DQDPR_CUSTOMER_IF_INSERT</Col>
          </Row>
          <Row>
            <Col id="TARGET">update</Col>
            <Col id="SP">DQDPR_CUSTOMER_IF_UPDATE</Col>
          </Row>
          <Row>
            <Col id="TARGET">delete</Col>
            <Col id="SP">DQDPR_CUSTOMER_IF_DELETE</Col>
          </Row>
          <Row>
            <Col id="TARGET">update_sap</Col>
            <Col id="SP">DQDPR_CUTOMER_IF_RETURN_UPDATE</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="TY_SELECT" type="STRING" size="256"/>
          <Column id="DS_SEARCH" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
      <Dataset id="dsTYPE_SELECT">
        <ColumnInfo>
          <Column id="CODE" type="STRING" size="256"/>
          <Column id="VALUE" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CODE">C</Col>
            <Col id="VALUE">코드</Col>
          </Row>
          <Row>
            <Col id="CODE">N</Col>
            <Col id="VALUE">명칭</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="_dsProcSap">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="dsSelectSap">
        <ColumnInfo>
          <Column id="KTOKD" type="STRING" size="256"/>
          <Column id="NAME1" type="STRING" size="256"/>
          <Column id="SUPPL1" type="STRING" size="256"/>
          <Column id="SUPPL2" type="STRING" size="256"/>
          <Column id="LAND1" type="STRING" size="256"/>
          <Column id="REGIO" type="STRING" size="256"/>
          <Column id="STCD1" type="STRING" size="256"/>
          <Column id="STCD2" type="STRING" size="256"/>
          <Column id="J_1KFREPRE" type="STRING" size="256"/>
          <Column id="J_1KFTBUS" type="STRING" size="256"/>
          <Column id="J_1KFTIND" type="STRING" size="256"/>
          <Column id="LIFNR" type="STRING" size="256"/>
          <Column id="ZSALES" type="STRING" size="256"/>
          <Column id="VKBUR" type="STRING" size="256"/>
          <Column id="INCO1" type="STRING" size="256"/>
          <Column id="ZTERM" type="STRING" size="256"/>
          <Column id="TAXKD" type="STRING" size="256"/>
          <Column id="ZSUBRC" type="STRING" size="256"/>
          <Column id="TXT" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="dsExport"/>
      <Dataset id="dsList1"/>
      <Dataset id="dsCheckSap">
        <ColumnInfo>
          <Column id="IV_KUNNR" type="STRING" size="256"/>
          <Column id="IV_NAME1" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.crdoTYPE_SELECT" propid="value" datasetid="dsSearch" columnid="TY_SELECT"/>
      <BindItem id="item1" compid="divSearch.form.ctxtDS_SEARCH" propid="value" datasetid="dsSearch" columnid="DS_SEARCH"/>
    </Bind>
  </Form>
</FDL>
