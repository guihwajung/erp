<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="New Form" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg">
          <Layouts>
            <Layout>
              <Static id="staCODE_DC_03" taborder="1" text="현장코드" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfCD_SITE" CodeFindName="DZX_CFSITE" CDTextWidth="80" taborder="0" left="staCODE_DC_03:0.0" top="10.0" width="250" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
              <Static id="staYM_WORK" taborder="2" text="작업년월" left="ccfCD_SITE:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ctclYM_WORK" taborder="3" left="staYM_WORK:0.0" top="10.0" width="80" height="24.0" url="cmm::cmmCalMM.xfdl"/>
            </Layout>
          </Layouts>
        </Div>
        <Static id="staMsg00" taborder="1" text="(단위 :백만원)" right="0" top="divSearch:0" width="90" height="25" textDecoration="none" font="bold 12px/normal &quot;Dotum&quot;"/>
        <Div id="divData" taborder="0" left="0" top="staMsg00:0" bottom="0" right="0" cssclass="div_DATA_Bg" ondragmove="divData_ondragmove">
          <Layouts>
            <Layout>
              <Div id="divDataTop" taborder="1" left="0" top="0" right="0" height="120">
                <Layouts>
                  <Layout>
                    <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0"/>
                  </Layout>
                </Layouts>
              </Div>
              <Div id="divDataBottom" taborder="0" left="0" top="divDataTop:15" right="0" height="212">
                <Layouts>
                  <Layout>
                    <Grid id="objGridSub" sub="true" taborder="0" left="0" top="0" bottom="0" right="0"/>
                  </Layout>
                </Layouts>
              </Div>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	if(!this.gfnIsNull(this.getOwnerFrame().CD_SITE) && !this.gfnIsNull(this.getOwnerFrame().YM_WORK))
	{
		this.dsSearch.setColumn(0,"CD_SITE", this.getOwnerFrame().CD_SITE);
		this.dsSearch.setColumn(0,"YM_WORK", this.getOwnerFrame().YM_WORK);
		this.ccfSite.form.DSTextBox.set_value(this.getOwnerFrame().DS_SITE);
		
		this.FormBtns.Select.click();
	}else{
		var today = this.gfnGetDate();
		this.dsSearch.setColumn(0,"YM_WORK",today.substr(0,6));
	}
	
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 ************************************************************************/
this.fnSetButton = function() {
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btnHqSend = this.gfnFormButtonAdd("btnHqSend", "fnHqSend");
	this.btnAPP = this.gfnFormButtonAdd("btnAPP", "fnAPP");
	this.btnHqSendCnc = this.gfnFormButtonAdd("btnHqSendCnc", "fnHqSendCnc");
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.ccfSite = this.divSearch.form.ccfCD_SITE;
	this.dxGrid = this.divData.form.divDataTop.form.objGrid;
	this.dxGridSub = this.divData.form.divDataBottom.form.objGridSub;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	this.gfnGridInit(this.dxGrid, this.dsList, "DW", "DWD_FNDREQDPLN_A");	
	this.gfnGridInit(this.dxGridSub, this.dsListSub, "DW", "DWD_FNDREQDPLN_B");
	this.dxGrid.EnterCell = "fnGrid_EnterCell";
	this.dxGridSub.EnterCell = "fnGrid_EnterCell";
	this.dxGridSub.AfterEdit = "fnSubGrid_AfterEdit";
};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {

	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("TY_WRK", "string");
	this.dsSelect.addColumn("CD_SITE", "string");
	this.dsSelect.addColumn("YM_WORK", "string");
	this.dsSelect.addColumn("CD_CLS", "string");
	
	this.dsSelectD = new Dataset();
	this.dsSelectD.addColumn("TY_WRK", "string");
	this.dsSelectD.addColumn("CD_SITE", "string");
	this.dsSelectD.addColumn("YM_WORK", "string");
	this.dsSelectD.addColumn("CD_CLS", "string");

	this.dsSave = new Dataset();
	this.dsSave.addColumn("TY_WRK", "string");
	this.dsSave.addColumn("ID_USER", "string");
	this.dsSave.addColumn("CD_SITE", "string");
	this.dsSave.addColumn("YM_WORK", "string");
	this.dsSave.addColumn("CD_CLS", "string");
	this.dsSave.addColumn("CD_DIV", "string");
	this.dsSave.addColumn("AM_CASHOCO", "bigdecimal");
	this.dsSave.addColumn("AM_NOTEOCO", "bigdecimal");
	this.dsSave.addColumn("AM_CASHOTHCO", "bigdecimal");
	this.dsSave.addColumn("AM_NOTEOTHCO", "bigdecimal");
	this.dsSave.addColumn("DS_RMKS", "string");
	this.dsSave.addColumn("CD_PRGS", "string");

	this.dsExec = new Dataset();
	this.dsExec.addColumn("TY_WRK", "string");
	this.dsExec.addColumn("ID_USER", "string");
	this.dsExec.addColumn("CD_SITE", "string");
	this.dsExec.addColumn("YM_WORK", "string");

};

/************************************************************************
 * 버튼 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if(!this.fnValidate()) return;	
	
	this.gfnGridBeforeSelect(this.dxGrid);
	this.gfnGridBeforeSelect(this.dxGridSub);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	this.dsSelect.setColumn(0, "TY_WRK", "Q");
	this.dsSelect.setColumn(0, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
	this.dsSelect.setColumn(0, "YM_WORK", this.dsSearch.getColumn(0, "YM_WORK").substr(0,6));
	this.dsSelect.setColumn(0, "CD_CLS", "A");
	
	this.dsSelectD.clearData();
	this.dsSelectD.addRow();
	this.dsSelectD.setColumn(0, "TY_WRK", "Q");
	this.dsSelectD.setColumn(0, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
	this.dsSelectD.setColumn(0, "YM_WORK", this.dsSearch.getColumn(0, "YM_WORK").substr(0,6));
	this.dsSelectD.setColumn(0, "CD_CLS", "B");

	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect selectd=dsSelectD";
	var outData     = "dsList=select0 dsListSub=selectd0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	this.gfnGridAdd(this.dxGrid);
}

/*
 *	삭제 버튼
 */ 
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}

/*
 *	저장 버튼
 */ 
this.fnSave = function() {
	if (!this.gfnGridValidate(this.dxGrid)) return;
	if (!this.gfnGridValidate(this.dxGridSub)) return;
	
	this.dxGrid.updateToDataset();
	this.dxGridSub.updateToDataset();
	
	this.dsSave.clearData();
	
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "I":			
			case "U":		
			case "D":
				var nrow = this.dsSave.addRow();
				this.dsSave.setColumn(nrow, "TY_WRK", flag);
				this.dsSave.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
				this.dsSave.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
				this.dsSave.setColumn(nrow, "YM_WORK", this.dsSearch.getColumn(0, "YM_WORK").substr(0,6));
				this.dsSave.setColumn(nrow, "CD_CLS", this.dsList.getColumn(i, "CD_CLS"));
				this.dsSave.setColumn(nrow, "CD_DIV", this.dsList.getColumn(i, "CD_DIV"));
				this.dsSave.setColumn(nrow, "AM_CASHOCO", this.dsList.getColumn(i, "AM_CASHOCO"));
				this.dsSave.setColumn(nrow, "AM_CASHOTHCO", this.dsList.getColumn(i, "AM_CASHOTHCO"));
				this.dsSave.setColumn(nrow, "DS_RMKS", this.dsList.getColumn(i, "DS_RMKS"));
				this.dsSave.setColumn(nrow, "CD_PRGS", this.dsList.getColumn(i, "CD_PRGS"));
			break;
		}
	}
	for (var i = 0; i < this.dsListSub.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsListSub, i);
		switch(flag) {
			case "I":			
			case "U":		
			case "D":
				var nrow = this.dsSave.addRow();
				this.dsSave.setColumn(nrow, "TY_WRK", flag);
				this.dsSave.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
				this.dsSave.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
				this.dsSave.setColumn(nrow, "YM_WORK", this.dsSearch.getColumn(0, "YM_WORK").substr(0,6));
				this.dsSave.setColumn(nrow, "CD_CLS", this.dsListSub.getColumn(i, "CD_CLS"));
				this.dsSave.setColumn(nrow, "CD_DIV", this.dsListSub.getColumn(i, "CD_DIV"));
				this.dsSave.setColumn(nrow, "AM_CASHOCO", this.dsListSub.getColumn(i, "AM_CASHOCO"));
				this.dsSave.setColumn(nrow, "AM_NOTEOCO", this.dsListSub.getColumn(i, "AM_NOTEOCO"));
				this.dsSave.setColumn(nrow, "AM_CASHOTHCO", this.dsListSub.getColumn(i, "AM_CASHOTHCO"));
				this.dsSave.setColumn(nrow, "AM_NOTEOTHCO", this.dsListSub.getColumn(i, "AM_NOTEOTHCO"));
				this.dsSave.setColumn(nrow, "DS_RMKS", this.dsListSub.getColumn(i, "DS_RMKS"));
				this.dsSave.setColumn(nrow, "CD_PRGS", this.dsListSub.getColumn(i, "CD_PRGS"));
			break;
		}
	}
	if (this.dsSave.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "save=dsSave";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
 	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
 						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */ 
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}
 
/************************************************************************
 * 서브 버튼 이벤트
 ************************************************************************/

/************************************************************************
 * Validate
 ************************************************************************/
this.fnValidate = function() {

	if (this.gfnIsNull(this.dsSearch.getColumn(0, "CD_SITE"))) {
		this.fnVaidateCallback = function() {
			this.ccfSite.form.CDTextBox.setFocus();
		}
		this.gfnAlert("현장코드는 필수입력 값입니다.", "fnVaidateCallback");
		return false;
	}else if(this.gfnIsNull(this.dsSearch.getColumn(0, "YM_WORK"))){
		this.gfnAlert("작업년월은 필수입력 값입니다.");
		return false;
	}
	
	return true;
};
/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);
		this.gfnGridAfterSelect(this.dxGridSub);
		
		if(this.dsList.getColumn(0, "YN_EDIT") == "Y"){
			this.btnAPP.set_enable(false);
		}else{
			this.btnAPP.set_enable(true);
		}
		
		this.fnBtnCheckAll();
	}	
	/*
	else if(svcID == "exec"){
		if (errorCode == 0) {
			this.gfnAlert("본사송부가 정상 처리되었습니다.");
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}*/
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "HQSEND") {
		if (errorCode == 0) {
			this.gfnAlert("본사송부가 정상 처리되었습니다.");
 			this.FormBtns.Select.click();
 		} else {
 			this.gfnAlert(errorMsg);
 		}
 	}
 	else if(svcID == "SENDCNC") {
 		if (errorCode == 0) {
 			this.gfnAlert("본사송부취소가 정상 처리되었습니다.");
 			this.FormBtns.Select.click();
 		} else {
 			this.gfnAlert(errorMsg);
 		}
 	}
};

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
 this.fnGrid_EnterCell = function(obj:nexacro.Grid, row, cell){
	
	if(obj.name == "objGrid"){
		if(this.dsList.getColumn(row, "YN_EDIT") == "Y"){
			if(obj.getBindCellIndex("body", "AM_CASHOTHCO") == cell){
				if(this.dsList.getColumn(row, "YN_EDIT_OTH") == "Y"){
					return true;
				}else{
					return false;
				}
			}
		}
	}else if(obj.name == "objGridSub"){
		if(this.dsListSub.getColumn(row, "YN_EDIT") == "Y"){
			if(obj.getBindCellIndex("body", "AM_CASHOTHCO") == cell || obj.getBindCellIndex("body", "AM_NOTEOTHCO") == cell){
				if(this.dsListSub.getColumn(row, "YN_EDIT_OTH") == "Y"){
					return true;
				}else{
					return false;
				}
			}
		}
	}
 };

this.fnSubGrid_AfterEdit = function(obj:nexacro.NormalDataset, e:nexacro.DSColChangeEventInfo){
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this, "U");
	};
};
/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.fnSearchInit = function(obj,e) {
	if(e == null || (e.pretext != e.posttext)) {
		this.gfnSetFormStatus(this);
		this.gfnGridClear(this.dxGrid);
		this.gfnGridClear(this.dxGridSub);
	}
};


this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
		this.gfnGridClear(this.dxGridSub);
	}
};


this.dsList_oncolumnchanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue){
		if(e.columnid == "AM_CASHOCO" || e.columnid == "AM_CASHOTHCO"){
			this.dsList.setColumn(e.row, "AM_CASHTOT", this.dsList.getColumn(e.row, "AM_CASHOCO")+this.dsList.getColumn(e.row, "AM_CASHOTHCO"));
		}
	}
};


this.dsListSub_oncolumnchanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue){
		if(e.columnid == "AM_CASHOCO" || e.columnid == "AM_CASHOTHCO"){
			this.dsListSub.setColumn(e.row, "AM_CASHTOT", this.dsListSub.getColumn(e.row, "AM_CASHOCO")+this.dsListSub.getColumn(e.row, "AM_CASHOTHCO"));
		}else if(e.columnid == "AM_NOTEOCO" || e.columnid == "AM_NOTEOTHCO"){
			this.dsListSub.setColumn(e.row, "AM_NOTETOT", this.dsListSub.getColumn(e.row, "AM_NOTEOCO")+this.dsListSub.getColumn(e.row, "AM_NOTEOTHCO"));
		}
	}
};
/*
this.fnHqSend = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	this.gfnConfirm("분사송부 후 데이타수정은 불가능 합니다. \n\n본사송부 처리하시겠습니까?", "fnGoHqSend");	
};

this.fnGoHqSend = function(strId, val){
	if(val == false){
		return false;
	}
	this.dsExec.clearData();
	this.dsExec.addRow();
	this.dsExec.setColumn(0, "TY_WRK", "HQSEND");
	this.dsSave.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
	this.dsExec.setColumn(0, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
	this.dsExec.setColumn(0, "YM_WORK", this.dsSearch.getColumn(0, "YM_WORK").substr(0,6));
		
	var strSvcId    = "exec";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "save=dsSave";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
 	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
 						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
};

*/

this.fnExec = function(strID) {
   this.dsExec.clearData();
   
   var nrow = this.dsExec.addRow();
   this.dsExec.setColumn(nrow, "TY_WRK", strID);
   this.dsSave.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
   this.dsExec.setColumn(0, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
   this.dsExec.setColumn(0, "YM_WORK", this.dsSearch.getColumn(0, "YM_WORK").substr(0,6));

   if (this.dsExec.rowcount == 0) return;

   var strSvcId    = strID;
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "exec=dsExec";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc);   // 통신방법 정의 [생략가능]

}


this.fnHqSend = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {

	var msg = "본사송부 후 데이타수정은 불가능 합니다. \n\n본사송부 처리하시겠습니까?";

	this.gfnConfirm(msg, "fnExec_callback", "HQSEND");

}


this.fnHqSendCnc = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {

	var msg = "본사송부취소 후 데이타수정이 가능합니다. \n\n본사송부취소 하시겠습니까?";

	this.gfnConfirm(msg, "fnExec_callback", "SENDCNC");

}

this.fnExec_callback = function(strID, val) {
   if(val == true) {
      this.fnExec(strID);
   }
}

this.fnAPP = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	//if (!this.gfnGridIsRow(this.dxGrid)) { return false; }
	if (this.dsList.rowcount < 1) { return false; }
	
	var param = {};
	//var nRow = this.dsList.rowposition;
	
	param.PARAM01 = this.dsSearch.getColumn(0,"CD_SITE");
	param.PARAM02 = this.dsSearch.getColumn(0, "YM_WORK").substr(0,6);
	param.ID_AP = this.dsList.getColumn(0, "NO_ELAPDOC");	// 전자결재문서번호
	param.YN_LINK = "N";	// 화면에서 팝업을 호출할경우 N, 링크를 통해서 화면을 오픈할경우 null 이다
	
	// 화면 오픈. 
	// CD_MODULE은 보통 같은 모듈에서 호출하는 경우가 많으니 this.FormInfo.CD_MODULE 사용
	// 타 모듈 화면 호출시 지정할것.
	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DWD_FNDREQDPLN_APP", "fnAprvDialogCallback", param);
	
}

 this.fnAprvDialogCallback = function(svcID, value) {
	// 리턴값
	if(value){
		// 결재완료, 결재취소, 결재상신 후에는 재조회를 한다
		this.FormBtns.Select.click();
	}
};

this.fnBtnCheckAll = function() {
	this.gfnBtnCheck(this.btnHqSend, this.dsList);
	this.gfnBtnCheck(this.btnHqSendCnc, this.dsList);
}]]></Script>
    <Objects>
      <Dataset id="dsList" oncolumnchanged="dsList_oncolumnchanged"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DWDPR_FNDREQDPLN_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">save</Col>
            <Col id="SP">DWDPR_FNDREQDPLN_SAVE</Col>
          </Row>
          <Row>
            <Col id="TARGET">exec</Col>
            <Col id="SP">DWDPR_FNDREQDPLN_EXECUTE</Col>
          </Row>
          <Row>
            <Col id="TARGET">selectd</Col>
            <Col id="SP">DWDPR_FNDREQDPLN_SELECT</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsListSub" oncolumnchanged="dsListSub_oncolumnchanged"/>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_SITE" type="STRING" size="256"/>
          <Column id="YM_WORK" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CD_SITE"/>
            <Col id="YM_WORK"/>
          </Row>
        </Rows>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ctclYM_WORK.form.TextBox" propid="value" datasetid="dsSearch" columnid="YM_WORK"/>
      <BindItem id="item1" compid="divSearch.form.ccfCD_SITE.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_SITE"/>
    </Bind>
  </Form>
</FDL>
