<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="전도금현황표" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="1" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg" formscrolltype="none">
          <Layouts>
            <Layout>
              <Static id="sta00" taborder="0" text="법인코드" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfCORP" CDTextWidth="70" taborder="1" left="sta00:0.0" top="10.0" width="300" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
              <Static id="staYM_WORK" taborder="2" text="회계년월" left="ccfCORP:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ctclYM_WORK" taborder="3" left="staYM_WORK:0.0" top="10.0" width="80" height="24.0" url="cmm::cmmCalMM.xfdl"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0">
                <Formats>
                  <Format id="default"/>
                </Formats>
              </Grid>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();

	// 법인코드
	if (!this.gfnIsNull(this.getOwnerFrame().CD_CORP)) {
		this.dsSearch.setColumn(0, "CD_CORP", this.getOwnerFrame().CD_CORP);
		this.dsSearch.setColumn(0, "DS_CORP", this.getOwnerFrame().DS_CORP);
		this.btnJundoReqExec.set_visible(true);
	}else{
		this.ccfCORP.form.CDTextBox.set_value(this.AuthClient.CD_CORP);
		this.ccfCORP.form.DSTextBox.set_value(this.AuthClient.DS_CORP);
		this.btnJundoReqExec.set_visible(false);
	}

	// 회계년월
	if (!this.gfnIsNull(this.getOwnerFrame().YM_ACCOUNT)) {
		this.dsSearch.setColumn(0, "YM_ACCOUNT", this.getOwnerFrame().YM_ACCOUNT);
	}else{
		// 회계년월(현재일자)
		this.ctclYM_WORK.form.TextBox.set_value(this.gfnGetDate().substr(0,6));
	}
	//this.ccfCORP.setFocus();
	this.FormBtns.Select.click();

};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
	// Select, Add, Del, Save, Excel, Print
	// SubSelect, SubAdd, SubDel, SuubSave, SubExcel
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btnJundoReqExec = this.gfnFormButtonAdd("JundoReqExec", "fnJundoReqExec");
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.ccfCORP = this.divSearch.form.ccfCORP;
	this.ctclYM_WORK = this.divSearch.form.ctclYM_WORK;

	this.dxGrid = this.divData.form.objGrid;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	this.ccfCORP.CodeFindName = "DHX_CFCORP";
	this.ccfCORP.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	//this.ccfCORP.AfterCDTextChanged = "fnAfterCDTextChanged";

	// 그리드 초기화
	this.fnGridInit();
	//this.gfnGridInit(this.dxGrid, this.dsList, "DH", "DHA_JUNDOREQ_EXEC");
	//this.dxGrid.set_selecttype("cell");
	
	//검색조건 변경 이벤트
	this.dsSearch.addEventHandler("onvaluechanged", this.dsSearch_Valuechanged, this);
};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {

	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_CORP", "string");
	this.dsSelect.addColumn("YM_ACCOUNT", "string");
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	this.dsSelect.setColumn(0, "CD_CORP"		, this.dsSearch.getColumn(0, "CD_CORP"));
	this.dsSelect.setColumn(0, "YM_ACCOUNT"		, this.dsSearch.getColumn(0, "YM_ACCOUNT"));
	
	var strSvcId    = "header";
	var strSvcType  = "select";
	var inProc		= "_dsProc";
	var inData      = "selectHeader=dsSelect";
	var outData     = "dsHeader=selectHeader0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	
}

/*
 *	삭제 버튼
 */
this.fnDel = function() {

}

/*
 *	저장 버튼
 */
this.fnSave = function() {

}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {
	var validate = true;

	if (this.gfnIsNull(this.ccfCORP.form.CDTextBox.text)) {
		this.gfnAlert("법인코드가 입력되지 않았습니다.");
		this.ccfCORP.form.CDTextBox.setFocus();
		validate = false;
	}
	
	if (this.gfnIsNull(this.ctclYM_WORK.form.TextBox.value)) {
		this.gfnAlert("회계년월은 필수입력 값입니다.");
		this.ctclYM_WORK.form.TextBox.setFocus();
		validate = false;
	}
	
	return validate;
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if(svcID == "header"){	
		//그리드 데이터 셋팅 작업
		this.fnGridDataSetting();
		
		//데이터 조회 처리
		this.fnDataSelect();

	} else if (svcID == "select") {	
		this.gfnGridAfterSelect(this.dxGrid);	
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnAfterCDTextChanged = function(id, codeFindData) {
	switch(id) {
		case "ccfCORP":	//법인코드
		break;
	}
}

this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	var cdCorp = this.ccfCORP.form.CDTextBox.value;
	switch(id) {
		case "ccfCORP":		//법인코드
			dsUserParam.setColumn(nrow, "ID_SABUN", this.AuthClient.ID_USER);
		break;
		case "ccfCD_DEPT_ACNT":		//귀속부서
			if (!this.gfnIsNull(cdCorp)) {
				dsUserParam.setColumn(nrow, "CD_DEPT_UPPER"	, "");			//상위부서
				dsUserParam.setColumn(nrow, "YN_SLIPACCEPT"	, "");			//전표발행여부
				dsUserParam.setColumn(nrow, "CD_CORP"		, cdCorp);		//법인코드
				dsUserParam.setColumn(nrow, "YN_USE"		, "Y");			//사용여부
				dsUserParam.setColumn(nrow, "GR_DEPT_ACNT"	, "");			//현장/본사여부
			}else{
				this.gfnAlert("법인코드는 필수입력 값입니다.");
				return false;
			}
		break;
		case "ccfCD_VENDOR":	//거래처
			if (!this.gfnIsNull(cdCorp)) {
				dsUserParam.setColumn(nrow, "CD_CORP" , cdCorp);	
			}else{
				this.gfnAlert("법인코드는 필수입력 값입니다.");
				return false;
			}
			
		break;
	}
	return true;
}; 



/************************************************************************
 * 그리드 이벤트
 ************************************************************************/

/************************************************************************
 * 기타 이벤트
 ************************************************************************/
//데이터 조회 처리
this.fnDataSelect = function()
{

	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}	

//그리드 셋팅
this.fnGridDataSetting = function (){

	var colDS_VERIFICATION = this.dxGrid.getBindCellIndex("body", "DS_VERIFICATION");	// 검증
	this.dxGrid.set_enableredraw(false);
	this.dsList.set_enableevent(false);

	//컬럼 삭제
	for(var i=0;i<this.dsHeader.rowcount;i++){	
		//데이터셋 컬럼 삭제 처리
		this.dsList.deleteColumn(this.dsHeader.getColumn(i, "CD_BISEMOK"));
	}
	
	var colCnt = this.dxGrid.getCellCount("body");
	
	//그리드 컬럼 삭제 처리(초기화용)
	var delCnt = 0, delIdx = 0;
	for(var i=0;i<colCnt;i++){
		if(i > colDS_VERIFICATION){
			delIdx = ((colCnt-1)-delCnt);
			this.dxGrid.deleteContentsCol("body", delIdx, false);
			delCnt++;
		}
	}

// 	// 재조회할때 이전 조회한 컬럼정보를 지우고 다시 셋팅함
// 	for ( var i =this.dxGrid.getCellCount("body")-1; 1 < i ; i--){
//  		if( this.gfnGridGetBindColumnNameByIndex( this.dxGrid, i).search("CD_") > -1 ){
//  			this.dxGrid.deleteContentsCol("body",i);
//  		}		
//  	}


	var colIdx = (colDS_VERIFICATION);
	var cols = 0; // merge 되면서 cell index가 조정된다.
	var bTotCnt = this.dsHeader.getCaseCount("CD_BISEMOK != ''");
	var cellIndex = colIdx;	

	var arrBimok = [], arrSemok = [];
	var sDsBimok = "";
	var sDsSemok = "";
		
	var startIdx = 0;
	var endIdx = 0;


	//헤더 컬럼 데이터 
	for(var h=0;h<this.dsHeader.rowcount;h++){
		
		var ds_header1 = this.dsHeader.getColumn(h, "DS_BIMOK");
		
		sDsBimok = this.dsHeader.getColumn(h, "DS_BIMOK");
		sDsSemok = this.dsHeader.getColumn(h, "DS_SEMOK");
		
		//계정 컬럼 추가(데이터셋)
		this.dsList.addColumn(this.dsHeader.getColumn(h, "CD_BISEMOK"), "BIGDECIMAL");
		
		//그리드 컬럼 추가(계 제외)
		cellIndex = this.dxGrid.appendContentsCol("body");
		
		this.dxGrid.setCellProperty("body", cellIndex, "text", "bind:"+this.dsHeader.getColumn(h, "CD_BISEMOK"));	//바인딩 처리	
		this.dxGrid.setCellProperty("body", cellIndex, "displaytype", "mask");
		this.dxGrid.setCellProperty("body", cellIndex, "maskeditformat", "#,##0");
		this.dxGrid.setCellProperty("body", cellIndex, "cssclass", "expr:dataset.getRowLevel(currow) == 1 ? 'subtotal': nx_flag == '#' ? 'filter' : ''");
		this.dxGrid.setCellProperty("body", cellIndex, "edittype", "expr:nx_flag=='#'?'text':'none'");
		
		//this.dxGrid.setCellProperty("head", cellIndex, "text", sDsBimok);
		this.dxGrid.setCellProperty("summ", cellIndex, "text", "expr:dataset.getSum('"+this.dsHeader.getColumn(h, "CD_BISEMOK")+"')");
		this.dxGrid.setCellProperty("summ", cellIndex, "displaytype", "mask");
		this.dxGrid.setCellProperty("summ", cellIndex, "maskeditformat", "#,###");
		this.dxGrid.setFormatColProperty(cellIndex, "size", 140); 		//컬럼 사이즈
		
		//헤더 셋팅용 데이터 담기
		arrSemok[arrSemok.length] = this.dsHeader.getColumn(h, "DS_SEMOK");
//		arrBimok[arrBimok.length] = this.dsHeader.getColumn(h, "DS_BIMOK");
// 		if(colIdx != cellIndex) {
// 			cellIndex = (cellIndex+1);
// 			//arrBimok[arrBimok.length]  = this.dsHeader.getColumn(h, "DS_BIMOK");
// 		}

// 		//var HeaderIdx = (colDS_VERIFICATION)+cellIndex-1;
  		var no_colspan = nexacro.toNumber(this.dsHeader.getColumn(h, "NO_COLSPAN"),0) ;
  		var semokCnt = nexacro.toNumber(this.dsHeader.getColumn(h, "NO_SEMOK"),0) ;
  		var endCol = nexacro.toNumber(cellIndex+colspan,0);	
    	if(no_colspan > 1){
//   			if(semokCnt == 1){startIdx = cellIndex;}
   			if(semokCnt == no_colspan){
// 				var rtn = this.dxGrid.mergeContentsCell("head", 0, startIdx, 0, nexacro.toNumber(cellIndex) , startIdx, false);
  				arrBimok[arrBimok.length]  = this.dsHeader.getColumn(h, "DS_BIMOK");
   			}
// 			if(rtn > -1) {
// 				cols = cols + 1;
// 			}
   		}else{
  			arrBimok[arrBimok.length]  = this.dsHeader.getColumn(h, "DS_BIMOK");
   		}

		colIdx ++;
		cellIndex++;
	}

// 	// 헤더 텍스트 처리
   	var HeaderIdx = (colDS_VERIFICATION)+1;
 	var totBCnt = arrBimok.length;
   	var totSCnt = arrSemok.length;
	for(var i=0;i<totSCnt;i++){
		this.dxGrid.setCellProperty( "head", (HeaderIdx + totSCnt + 2), "text", arrSemok[i]);
		HeaderIdx++;
	}

	var objGrid = this.dxGrid;
	var objSpec = this.dsHeader;
	var grid_headerrows = 2;

	var cols = 0; // merge 되면서 cell index가 조정된다.
	for(var i = 0; i < objSpec.rowcount; i++) {
		var ds_header1 = objSpec.getColumn(i, "DS_BIMOK");
		var ds_header2 = objSpec.getColumn(i, "DS_SEMOK");		
		if (ds_header1 == ds_header2) {
			var colspan = 0;
			for(var j = (i + 1); j < objSpec.rowcount; j++) {
				if(ds_header1 == objSpec.getColumn(j, "DS_BIMOK") && ds_header2 == objSpec.getColumn(j, "DS_SEMOK")) {
					colspan++;
				} else {
					break;
				}
			}

			var rtn = objGrid.mergeContentsCell("head", 0, i, 1, i+colspan, i-cols, false);
			if(rtn > -1) {
				cols = cols + colspan;
				i += colspan;
			}
		}
		else if (ds_header1 != ds_header2) {
			var colspan = 0;
			for(var j = (i + 1); j < objSpec.rowcount; j++) {
				if(ds_header1 == objSpec.getColumn(j, "DS_BIMOK")) {
					colspan++;
				}else {
					break;
				}
			}
			if(colspan > 0) {
				var addCol = colDS_VERIFICATION + 1;
				var nStartCol = i + addCol;
				var nEndCol = nexacro.toNumber(i) +  nexacro.toNumber(colspan) + addCol;
				var nFirstCell = i + addCol - nexacro.toNumber(cols);
				var rtn = objGrid.mergeContentsCell("head", 0, nStartCol, 0, nEndCol, nFirstCell, false);
				if(rtn > -1) {
					cols = cols + colspan;
				}
			}
		}
	}
	
 	HeaderIdx = (colDS_VERIFICATION);
 	for(var i=0;i<totBCnt;i++){
		this.dxGrid.setCellProperty( "head", HeaderIdx, "text", arrBimok[i]);
		HeaderIdx++;
 	}

	this.dsList.set_enableevent(true);
	this.dxGrid.set_enableredraw(true);
};

//검색조건 변경 이벤트
this.dsSearch_Valuechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{	
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
		// 그리드 초기화	
		this.fnGridInit();
	}
};

this.divData_objGrid_onheadclick = function(obj:nexacro.Grid,e:nexacro.GridClickEventInfo)
{
 	trace("col >> "+e.col + "\n" +  	"cell >> "+e.cell+ "\n" + "row >> "+e.row+ "\n" + "subrow >> "+e.subrow);
};

// 전표금 현황표 
this.fnJundoReqExec = function (obj:nexacro.Button,e:nexacro.ClickEventInfo){
	//trace(this.dsList.saveXML());

	var nChkRowCnt = this.dsList.getCaseCount( "CHK == 1" );
	if (nChkRowCnt <= 0){
		this.gfnAlert("선택한 자료가 없습니다. 전도금신청 대상 선택하세요!");
		return;
	}

	this.dsJundoReqList.clearData();
	this.dsList.filter("CHK == 1 && AM_PAY > 0");
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var nrow = this.dsJundoReqList.addRow();
		this.dsJundoReqList.setColumn(nrow, "CD_DEPTOFFICER", this.dsList.getColumn(i, "CD_DEPTOFFICER"));
		this.dsJundoReqList.setColumn(nrow, "DS_DEPTOFFICER", this.dsList.getColumn(i, "DS_DEPTOFFICER"));
		this.dsJundoReqList.setColumn(nrow, "AM_THISMON_PAY", this.dsList.getColumn(i, "AM_THISMON_PAY"));
	}
	this.dsList.filter("");

	var json = {};
	json.DS_JUNDOREQ =  this.dsJundoReqList.saveCSV();
	this.getParentContext().close(JSON.stringify(json));
	//this.getParentContext().close(true);
};

this.fnGridInit = function (){
	// 그리드 초기화
	this.gfnGridInit(this.dxGrid, this.dsList, "DH", "DHA_JUNDOREQ_EXEC");
	
	var exprStr = "expr: nx_flag !='#' && dataset.getColumn(currow,'AM_PAY') == 0 ?'none':";
	this.dxGrid.setCellProperty("body",this.dxGrid.getBindCellIndex("body","CHK"),"edittype",exprStr+"'checkbox'");
	this.dxGrid.setCellProperty("body",this.dxGrid.getBindCellIndex("body","CHK"),"displaytype",exprStr+"'checkboxcontrol'");
}]]></Script>
    <Objects>
      <Dataset id="dsList" oncolumnchanged="dsList_oncolumnchanged"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DHAPR_JUNDOREQ_EXEC_SELECT</Col>
          </Row>
          <Row>
            <Col id="SP">DHAPR_JUNDOREQ_EXEC_HEADER_SELECT</Col>
            <Col id="TARGET">selectHeader</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsHeader" oncolumnchanged="dsList_oncolumnchanged"/>
      <Dataset id="dsSearch">
        <ColumnInfo>
          <Column id="CD_CORP" type="STRING" size="256"/>
          <Column id="DS_CORP" type="STRING" size="256"/>
          <Column id="YM_ACCOUNT" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CD_CORP"/>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsJundoReqList" oncolumnchanged="dsList_oncolumnchanged">
        <ColumnInfo>
          <Column id="CD_DEPTOFFICER" type="STRING" size="256" description="부서코드"/>
          <Column id="DS_DEPTOFFICER" type="STRING" size="256" description="부서명"/>
          <Column id="AM_THISMON_PAY" type="STRING" size="256" description="금회지급액"/>
        </ColumnInfo>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfCORP.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_CORP"/>
      <BindItem id="item1" compid="divSearch.form.ccfCORP.form.DSTextBox" propid="value" datasetid="dsSearch" columnid="DS_CORP"/>
      <BindItem id="item2" compid="divSearch.form.ctclYM_WORK.form.TextBox" propid="value" datasetid="dsSearch" columnid="YM_ACCOUNT"/>
    </Bind>
  </Form>
</FDL>
