<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="인적사항 관리" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg" text="">
          <Layouts>
            <Layout>
              <Static id="staCD_SITE" taborder="1" text="현장/부서 코드" left="0.0" top="10.0" width="144.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfCD_SITE" CodeFindName="DZX_CFDEPTCORP" CDTextWidth="80" taborder="0" left="staCD_SITE:0.0" top="10.0" width="250" height="24.0" url="cmm::cmmCodeFind.xfdl" text=""/>
              <Static id="staCD_VENDOR" taborder="3" text="협력업체" left="ccfCD_SITE:0.0" top="10.0" width="144.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Div id="ccfCD_VENDOR" CodeFindName="DSX_CFVENDOR" CDTextWidth="80" taborder="0" left="staCD_VENDOR:0.0" top="10.0" width="250" height="24.0" url="cmm::cmmCodeFind.xfdl" text=""/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg" ondragmove="divData_ondragmove">
          <Layouts>
            <Layout>
              <Div id="divDataLeft" taborder="0" left="0" top="0" bottom="0" right="0">
                <Layouts>
                  <Layout>
                    <Static id="sta01" taborder="0" text="근로자 목록" left="0" top="0" width="100.00%" height="22" cssclass="sta_TITLE_Bg"/>
                    <Grid id="objGrid" taborder="0" left="0" top="sta01:5" bottom="0" right="0"/>
                  </Layout>
                </Layouts>
              </Div>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	this.fnSetCombo();
	
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 ************************************************************************/
this.fnSetButton = function() {
	this.FormBtns.Save.set_enable(true);
	// 서브 버튼 사용(2개 그리드 중간에 있는 파란선) 상단에 공통 셋트가 하나더 생긴다
	//this.gfnUseSubBtn(true, this.divData, this.divData.form.divSplitter); // divSplitter sync
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결
 ************************************************************************/
this.fnSetExtendButton = function() {
// 	this.btn1 = this.gfnFormButtonAdd("BTN_PAYCHANGE", "fnPaychange");
// 	this.btn2 = this.gfnFormButtonAdd("BTN_OTHERCOMPANY", "fnOthercompany");
// 	this.btn3 = this.gfnFormButtonAdd("BTN_EXTENSION", "fnExtension");
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	
	this.ccfCD_SITE = this.divSearch.form.ccfCD_SITE;
	this.ccfCD_VENDOR = this.divSearch.form.ccfCD_VENDOR;
	
	this.dxGrid = this.divData.form.divDataLeft.form.objGrid;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	// 190627 - 코드파인드 변경에 따른 주석 처리.
	this.ccfCD_SITE.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.ccfCD_SITE.AfterCDTextChanged = "fnAfterCDTextChanged";
	this.ccfCD_VENDOR.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	
	this.gfnGridInit(this.dxGrid, this.dsList, "DS", "DSK_VENDOR_USER");	
	this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforeUserDataSetParam";
	this.dxGrid.set_selecttype("cell");	
}

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {

	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_SITE", "string");
	this.dsSelect.addColumn("CD_VENDOR", "string");
		
	this.dsInsert = new Dataset();
	this.dsInsert.addColumn("CD_VENDOR", "string");
	this.dsInsert.addColumn("DS_VENDOR", "string");
	this.dsInsert.addColumn("CD_SITE", "string");
	this.dsInsert.addColumn("DS_SITE", "string");
	this.dsInsert.addColumn("NO_PO", "string");
	this.dsInsert.addColumn("NO_ID", "string");
	this.dsInsert.addColumn("NO_JUMIN", "string");
	this.dsInsert.addColumn("DS_NAME", "string");
	this.dsInsert.addColumn("TY_WOIGUG", "string");
	this.dsInsert.addColumn("CD_JIKJONG", "string");
	this.dsInsert.addColumn("CD_COST", "string");
	this.dsInsert.addColumn("DS_COST", "string");
	this.dsInsert.addColumn("DS_COUNTRY", "string");
	this.dsInsert.addColumn("NO_TEL", "string");
	this.dsInsert.addColumn("CD_ZIP", "string");
	this.dsInsert.addColumn("TY_IDCARD", "string");
	this.dsInsert.addColumn("DS_ADDRESS", "string");
	this.dsInsert.addColumn("CD_RETIRE", "string");
	this.dsInsert.addColumn("CD_RETIRE_EVIDENCE", "string");
	this.dsInsert.addColumn("CD_GOYONG", "string");
	this.dsInsert.addColumn("CD_GOYONG_EVIDENCE", "string");
	this.dsInsert.addColumn("YN_SAFE_EDU", "string");
	this.dsInsert.addColumn("YN_MEDICARE", "string");
	this.dsInsert.addColumn("ID_INSERT", "string");
	this.dsInsert.addColumn("DT_IPSA", "string");
	this.dsInsert.addColumn("DT_TOIJK", "string");
	this.dsInsert.addColumn("AM_DANGA", "bigdecimal");
	this.dsInsert.addColumn("DT_MEDICARE", "string");
	this.dsInsert.addColumn("TY_APPROVAL", "string");

	this.dsUpdate = new Dataset();
	this.dsUpdate.addColumn("CD_VENDOR", "string");
	this.dsUpdate.addColumn("DS_VENDOR", "string");
	this.dsUpdate.addColumn("CD_SITE", "string");
	this.dsUpdate.addColumn("DS_SITE", "string");
	this.dsUpdate.addColumn("NO_PO", "string");
	this.dsUpdate.addColumn("NO_ID", "string");
	this.dsUpdate.addColumn("NO_JUMIN", "string");
	this.dsUpdate.addColumn("DS_NAME", "string");
	this.dsUpdate.addColumn("TY_WOIGUG", "string");
	this.dsUpdate.addColumn("CD_JIKJONG", "string");
	this.dsUpdate.addColumn("CD_COST", "string");
	this.dsUpdate.addColumn("DS_COST", "string");
	this.dsUpdate.addColumn("DS_COUNTRY", "string");
	this.dsUpdate.addColumn("NO_TEL", "string");
	this.dsUpdate.addColumn("CD_ZIP", "string");
	this.dsUpdate.addColumn("TY_IDCARD", "string");
	this.dsUpdate.addColumn("DS_ADDRESS", "string");
	this.dsUpdate.addColumn("CD_RETIRE", "string");
	this.dsUpdate.addColumn("CD_RETIRE_EVIDENCE", "string");
	this.dsUpdate.addColumn("CD_GOYONG", "string");
	this.dsUpdate.addColumn("CD_GOYONG_EVIDENCE", "string");
	this.dsUpdate.addColumn("YN_SAFE_EDU", "string");
	this.dsUpdate.addColumn("YN_MEDICARE", "string");
	this.dsUpdate.addColumn("ID_INSERT", "string");
	this.dsUpdate.addColumn("DT_IPSA", "string");
	this.dsUpdate.addColumn("DT_TOIJK", "string");
	this.dsUpdate.addColumn("AM_DANGA", "bigdecimal");
	this.dsUpdate.addColumn("DT_MEDICARE", "string");
	this.dsUpdate.addColumn("TY_APPROVAL", "string");

	this.dsDelete = new Dataset();
	this.dsDelete.addColumn("CD_SITE", "string");
	this.dsDelete.addColumn("CD_VENDOR", "string");
	this.dsDelete.addColumn("NO_PO", "string");
	this.dsDelete.addColumn("NO_ID", "string");
}

/************************************************************************
 * 버튼 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {	
	if (!this.fnSelectValidate()) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();	
	
	this.dsSelect.setColumn(0, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
	this.dsSelect.setColumn(0, "CD_VENDOR", this.dsSearch.getColumn(0, "CD_VENDOR"));
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {	
	if (this.gfnIsNull(this.dsSearch.getColumn(0,"CD_SITE"))) {
		this.fnVaidateCallback = function() {
			this.ccfCD_SITE.form.CDTextBox.setFocus();			
		}
		this.gfnAlert("현장코드를 먼저 입력 하셔야 등록 가능합니다.", "fnVaidateCallback");
		return;
	}else if (this.gfnIsNull(this.dsSearch.getColumn(0,"CD_VENDOR"))) {
		this.fnVaidateCallback = function() {
			this.ccfCD_SITE.form.CDTextBox.setFocus();			
		}
		this.gfnAlert("협력업체를 먼저 입력 하셔야 등록 가능합니다.", "fnVaidateCallback");
		return;
	}
	
	var nrow = this.gfnGridAdd(this.dxGrid);
}

/*
 *	삭제 버튼
 */ 
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}

/*
 *	저장 버튼
 */ 
this.fnSave = function() {

	// 그리드 필수항목 체크
    if (!this.gfnGridValidate(this.dxGrid)) return;
	
	this.dsInsert.clearData();	
	this.dsUpdate.clearData();	
	this.dsDelete.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		if(flag == "I"){
			var nrow = this.dsInsert.addRow();			
			this.dsInsert.setColumn(nrow, "CD_VENDOR", this.dsSearch.getColumn(0, "CD_VENDOR"));
			this.dsInsert.setColumn(nrow, "DS_VENDOR", this.divSearch.form.ccfCD_VENDOR.form.DSTextBox.text);
			this.dsInsert.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
			this.dsInsert.setColumn(nrow, "DS_SITE", this.divSearch.form.ccfCD_SITE.form.DSTextBox.text);
			this.dsInsert.setColumn(nrow, "NO_PO", this.dsList.getColumn(i, "NO_PO"));
			this.dsInsert.setColumn(nrow, "NO_ID", this.dsList.getColumn(i, "NO_ID"));
			this.dsInsert.setColumn(nrow, "NO_JUMIN", this.dsList.getColumn(i, "NO_JUMIN"));
			this.dsInsert.setColumn(nrow, "DS_NAME", this.dsList.getColumn(i, "DS_NAME"));
			this.dsInsert.setColumn(nrow, "TY_WOIGUG", this.dsList.getColumn(i, "TY_WOIGUG"));
			this.dsInsert.setColumn(nrow, "CD_JIKJONG", this.dsList.getColumn(i, "CD_JIKJONG"));
			this.dsInsert.setColumn(nrow, "CD_COST", this.dsList.getColumn(i, "CD_COST"));
			this.dsInsert.setColumn(nrow, "DS_COST", this.dsList.getColumn(i, "DS_COST"));
			this.dsInsert.setColumn(nrow, "DS_COUNTRY", this.dsList.getColumn(i, "DS_COUNTRY"));
			this.dsInsert.setColumn(nrow, "NO_TEL", this.dsList.getColumn(i, "NO_TEL"));
			this.dsInsert.setColumn(nrow, "CD_ZIP", this.dsList.getColumn(i, "CD_ZIP"));
			this.dsInsert.setColumn(nrow, "TY_IDCARD", this.dsList.getColumn(i, "TY_IDCARD"));
			this.dsInsert.setColumn(nrow, "DS_ADDRESS", this.dsList.getColumn(i, "DS_ADDRESS"));
			this.dsInsert.setColumn(nrow, "CD_RETIRE", this.dsList.getColumn(i, "CD_RETIRE"));
			this.dsInsert.setColumn(nrow, "CD_RETIRE_EVIDENCE", this.dsList.getColumn(i, "CD_RETIRE_EVIDENCE"));
			this.dsInsert.setColumn(nrow, "CD_GOYONG", this.dsList.getColumn(i, "CD_GOYONG"));
			this.dsInsert.setColumn(nrow, "CD_GOYONG_EVIDENCE", this.dsList.getColumn(i, "CD_GOYONG_EVIDENCE"));
			this.dsInsert.setColumn(nrow, "YN_SAFE_EDU", this.dsList.getColumn(i, "YN_SAFE_EDU"));
			this.dsInsert.setColumn(nrow, "YN_MEDICARE", this.dsList.getColumn(i, "YN_MEDICARE"));
			this.dsInsert.setColumn(nrow, "ID_INSERT", this.objApp.gdsUserInfo.getColumn(i, "ID_USER"));
			this.dsInsert.setColumn(nrow, "DT_IPSA", this.dsList.getColumn(i, "DT_IPSA"));
			this.dsInsert.setColumn(nrow, "DT_TOIJK", this.dsList.getColumn(i, "DT_TOIJK"));
			this.dsInsert.setColumn(nrow, "AM_DANGA", this.dsList.getColumn(i, "AM_DANGA"));
			this.dsInsert.setColumn(nrow, "DT_MEDICARE", this.dsList.getColumn(i, "DT_MEDICARE"));
			this.dsInsert.setColumn(nrow, "TY_APPROVAL", this.dsList.getColumn(i, "TY_APPROVAL"));
		}
		else if(flag == "U")
		{
			var nrow = this.dsUpdate.addRow();			
			this.dsUpdate.setColumn(nrow, "CD_VENDOR", this.dsList.getColumn(i, "CD_VENDOR"));
			this.dsUpdate.setColumn(nrow, "DS_VENDOR", this.dsList.getColumn(i, "DS_VENDOR"));
			this.dsUpdate.setColumn(nrow, "CD_SITE", this.dsList.getColumn(i, "CD_SITE"));
			this.dsUpdate.setColumn(nrow, "DS_SITE", this.dsList.getColumn(i, "DS_SITE"));
			this.dsUpdate.setColumn(nrow, "NO_PO", this.dsList.getColumn(i, "NO_PO"));
			this.dsUpdate.setColumn(nrow, "NO_ID", this.dsList.getColumn(i, "NO_ID"));
			this.dsUpdate.setColumn(nrow, "NO_JUMIN", this.dsList.getColumn(i, "NO_JUMIN"));
			this.dsUpdate.setColumn(nrow, "DS_NAME", this.dsList.getColumn(i, "DS_NAME"));
			this.dsUpdate.setColumn(nrow, "TY_WOIGUG", this.dsList.getColumn(i, "TY_WOIGUG"));
			this.dsUpdate.setColumn(nrow, "CD_JIKJONG", this.dsList.getColumn(i, "CD_JIKJONG"));
			this.dsUpdate.setColumn(nrow, "CD_COST", this.dsList.getColumn(i, "CD_COST"));
			this.dsUpdate.setColumn(nrow, "DS_COST", this.dsList.getColumn(i, "DS_COST"));
			this.dsUpdate.setColumn(nrow, "DS_COUNTRY", this.dsList.getColumn(i, "DS_COUNTRY"));
			this.dsUpdate.setColumn(nrow, "NO_TEL", this.dsList.getColumn(i, "NO_TEL"));
			this.dsUpdate.setColumn(nrow, "CD_ZIP", this.dsList.getColumn(i, "CD_ZIP"));
			this.dsUpdate.setColumn(nrow, "TY_IDCARD", this.dsList.getColumn(i, "TY_IDCARD"));
			this.dsUpdate.setColumn(nrow, "DS_ADDRESS", this.dsList.getColumn(i, "DS_ADDRESS"));
			this.dsUpdate.setColumn(nrow, "CD_RETIRE", this.dsList.getColumn(i, "CD_RETIRE"));
			this.dsUpdate.setColumn(nrow, "CD_RETIRE_EVIDENCE", this.dsList.getColumn(i, "CD_RETIRE_EVIDENCE"));
			this.dsUpdate.setColumn(nrow, "CD_GOYONG", this.dsList.getColumn(i, "CD_GOYONG"));
			this.dsUpdate.setColumn(nrow, "CD_GOYONG_EVIDENCE", this.dsList.getColumn(i, "CD_GOYONG_EVIDENCE"));
			this.dsUpdate.setColumn(nrow, "YN_SAFE_EDU", this.dsList.getColumn(i, "YN_SAFE_EDU"));
			this.dsUpdate.setColumn(nrow, "YN_MEDICARE", this.dsList.getColumn(i, "YN_MEDICARE"));
			this.dsUpdate.setColumn(nrow, "ID_UPDATE", this.objApp.gdsUserInfo.getColumn(i, "ID_USER"));
			this.dsUpdate.setColumn(nrow, "DT_IPSA", this.dsList.getColumn(i, "DT_IPSA"));
			this.dsUpdate.setColumn(nrow, "DT_TOIJK", this.dsList.getColumn(i, "DT_TOIJK"));
			this.dsUpdate.setColumn(nrow, "AM_DANGA", this.dsList.getColumn(i, "AM_DANGA"));
			this.dsUpdate.setColumn(nrow, "DT_MEDICARE", this.dsList.getColumn(i, "DT_MEDICARE"));
			this.dsUpdate.setColumn(nrow, "TY_APPROVAL", this.dsList.getColumn(i, "TY_APPROVAL"));
		}
		else if(flag == "D")
		{
			var nrow = this.dsDelete.addRow();
			this.dsDelete.setColumn(nrow, "CD_SITE", this.dsList.getColumn(i, "CD_SITE"));
			this.dsDelete.setColumn(nrow, "CD_VENDOR", this.dsList.getColumn(i, "CD_VENDOR"));
			this.dsDelete.setColumn(nrow, "NO_PO", this.dsList.getColumn(i, "NO_PO"));
			this.dsDelete.setColumn(nrow, "NO_ID", this.dsList.getColumn(i, "NO_ID"));
		}
	}
	
	if (this.dsInsert.rowcount == 0 && this.dsUpdate.rowcount == 0 && this.dsDelete.rowcount == 0) return;
	
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "insert=dsInsert update=dsUpdate delete=dsDelete";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
	
}

/*
 *	엑셀 버튼
 */ 
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}
 
/************************************************************************
 * 서브 버튼 이벤트
 ************************************************************************/

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {	
	var validate = true;
	
	if (this.gfnIsNull(this.dsSearch.getColumn(0, "CD_SITE"))) {
		validate = false;
		// Alert후 실행할 처리
		this.fnVaidateCallback = function() {
			this.ccfCD_SITE.form.CDTextBox.setFocus();
		}
		this.gfnAlert("현장코드는 반드시 입력 하셔야 합니다.", "fnVaidateCallback");
	}
	
	return validate;
	
};

this.fnSaveValidate = function() {	
	var validate = true;	
	return validate;
}
/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {	
		
		var TY_WOIGUG 	= this.dxGrid.getBindCellIndex("body", "TY_WOIGUG");
		var DS_NAME 	= this.dxGrid.getBindCellIndex("body", "DS_NAME");
		var NO_JUMIN 	= this.dxGrid.getBindCellIndex("body", "NO_JUMIN");
		var CD_JIKJONG 	= this.dxGrid.getBindCellIndex("body", "CD_JIKJONG");
		var DT_IPSA 	= this.dxGrid.getBindCellIndex("body", "DT_IPSA");
		var DT_TOIJK 	= this.dxGrid.getBindCellIndex("body", "DT_TOIJK");
		var AM_DANGA 	= this.dxGrid.getBindCellIndex("body", "AM_DANGA");
		var DT_MEDICARE = this.dxGrid.getBindCellIndex("body", "DT_MEDICARE");
		
		this.dxGrid.setCellProperty("body", TY_WOIGUG, "edittype", "expr:YN_APPROVAL == 'Y' ? 'none' : 'checkbox'");
		this.dxGrid.setCellProperty("body", DS_NAME,   "edittype", "expr:YN_APPROVAL == 'Y' ? 'none' : 'text'");
		this.dxGrid.setCellProperty("body", NO_JUMIN, "edittype", "expr:YN_APPROVAL == 'Y' ? 'none' : 'text'");
		this.dxGrid.setCellProperty("body", CD_JIKJONG, "edittype", "expr:YN_APPROVAL == 'Y' ? 'none' : 'text'");
		this.dxGrid.setCellProperty("body", DT_IPSA, "edittype", "expr:YN_APPROVAL == 'Y' ? 'none' : 'date'");
		this.dxGrid.setCellProperty("body", DT_TOIJK, "edittype", "expr:YN_APPROVAL == 'Y' ? 'none' : 'date'");
		this.dxGrid.setCellProperty("body", AM_DANGA, "edittype", "expr:YN_APPROVAL == 'Y' ? 'none' : 'mask'");
		this.dxGrid.setCellProperty("body", DT_MEDICARE, "edittype", "expr:YN_APPROVAL == 'Y' ? 'none' : 'date'");
		
		this.gfnGridAfterSelect(this.dxGrid);		
	}
	else if (svcID == "detail") {
		// 변경된 데이터가 있다는 메시지가 나오지 않도록 폼상태를 초기화시킨다
		this.gfnSetFormStatus(this, "Q");	// 이부분 처리하지 않으면 저장후에 바로 화면 닫을때 변경된 데이터있다고 메시지 나옴
	}
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
			//this.FormBtns.SubSelect.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
//코드파인드의 파라미터 값을 넘겨줄때 사용하는 함수
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	if (id == "ccfCD_SITE"){
		dsUserParam.setColumn(nrow, "CD_CORP", this.objApp.gdsUserInfo.getColumn(0, "CD_CORP"));	
	} else if (id == "ccfCD_VENDOR") {
		if(this.gfnIsNull(this.dsSearch.getColumn(0, "CD_SITE")))
		{
			this.gfnAlert("현장코드를 입력해주세요.");
			return false;
		}		
		dsUserParam.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
	}	
	return true;
}

this.fnGrid_BeforeUserDataSetParam = function(id, dsUserParam, nrow) 
 {
	if(id == "DSX_CFJIKJONG_SITE"){
		dsUserParam.setColumn(nrow, "CD_SITE", this.dsSelect.getColumn(0, "CD_SITE"));
	}	
	return true;
 }

this.fnAfterCDTextChanged = function(id, codeFindData) {
	if(id == "ccfCD_SITE") {
		// 현장코드 변경시 초기화
		this.ccfCD_VENDOR.form.fnCodeFindClear();
	}
	else if(id == "ccfCD_VENDOR") {
		this.ccfNO_PO.form.fnCodeFindClear();
	}
}

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/

this.fnDel_callback = function(strId, val) 
{
	if(val == true) {
		this.dsDelete.clearData();	
		
		var nrow = this.dsDelete.addRow();
		
		this.dsDelete.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
		this.dsDelete.setColumn(nrow, "CD_VENDOR", this.dsList.getColumn(this.dsList.rowposition, "CD_VENDOR"));
		this.dsDelete.setColumn(nrow, "NO_PO", this.dsList.getColumn(this.dsList.rowposition, "NO_PO"));
		this.dsDelete.setColumn(nrow, "NO_ID", this.dsList.getColumn(this.dsList.rowposition, "NO_ID"));

		if (this.dsDelete.rowcount == 0) return;
		
		var strSvcId    = "save";
		var strSvcType  = "save";
		var inProc		= "_dsProc";
		var inData      = "delete=dsDelete";
		var outData     = "";
		var strArg      = "";
		var callBackFnc = "fnCallback";
		
		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
							strSvcType , 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
							callBackFnc); // 통신방법 정의 [생략가능]

	}	
}
/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.fnSearchInit = function(obj,e) {
	if(e == null || (e.pretext != e.posttext)) {
		this.gfnSetFormStatus(this);
		this.gfnGridClear(this.dxGrid);
	}
};

this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue){
		this.gfnGridClear(this.dxGrid);
	}
};

this.fnSetCombo = function() {	
};



this.dsListSub_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(this.gfnGetFormStatus(this) != "I")
		this.gfnSetFormStatus(this, "U");
};
]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DSKPR_VENDOR_USER_LIST_SELECT</Col>
          </Row>
          <Row>
            <Col id="SP">DSKPR_VENDOR_USER_UPDATE</Col>
            <Col id="TARGET">update</Col>
          </Row>
          <Row>
            <Col id="TARGET">delete</Col>
            <Col id="SP">DSKPR_VENDOR_USER_DELETE</Col>
          </Row>
          <Row>
            <Col id="TARGET">insert</Col>
            <Col id="SP">DSKPR_VENDOR_USER_INSERT</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_SITE" type="STRING" size="256"/>
          <Column id="CD_VENDOR" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfCD_SITE.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_SITE"/>
      <BindItem id="item1" compid="divSearch.form.ccfCD_VENDOR.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_VENDOR"/>
    </Bind>
  </Form>
</FDL>
