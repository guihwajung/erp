<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="안분전표발행" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg">
          <Layouts>
            <Layout>
              <Static id="staCD_SITE" taborder="1" text="현장코드" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfCD_SITE" CodeFindName="DZX_CFSITE" CDTextWidth="80" taborder="0" left="staCD_SITE:0.0" top="10.0" width="200" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
              <Static id="staYM_WORK" taborder="6" text="작업년월" left="ccfCD_SITE:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ctclYM_WORK" taborder="1" left="staYM_WORK:0.0" top="10.0" width="80" height="24.0" url="cmm::cmmCalMM.xfdl"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg" ondragmove="divData_ondragmove">
          <Layouts>
            <Layout>
              <Div id="divSplitter" taborder="1" left="0" top="44.12%" width="100.00%" height="5" background="skyblue" cursor="ns-resize" ondrag="divData_divSplitter_ondrag"/>
              <Div id="divDataTop" taborder="0" left="0" top="0" bottom="divSplitter:5" right="0">
                <Layouts>
                  <Layout>
                    <Grid id="objGrid" taborder="0" left="0" top="5" bottom="0" right="0" oncellposchanged="divData_divDataTop_objGrid_oncellposchanged" oncelldblclick="divData_divDataTop_objGrid_oncelldblclick"/>
                  </Layout>
                </Layouts>
              </Div>
              <Div id="divDataBottom" taborder="0" left="0" top="divSplitter:5" bottom="0" right="0">
                <Layouts>
                  <Layout>
                    <Grid id="objGridSub" taborder="0" left="0" top="20" bottom="0" right="0"/>
                  </Layout>
                </Layouts>
              </Div>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[include 'lib::libCommon.xjs'
this.objApp = this.gfnGetApplication();
this.selSlipNo;
this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	if(!this.gfnIsNull(this.getOwnerFrame().CD_SITE) && !this.gfnIsNull(this.getOwnerFrame().YM_WORK)){
		this.dsSearch.setColumn(0, "CD_SITE", this.getOwnerFrame().CD_SITE);
		this.divSearch.form.ccfCD_SITE.form.DSTextBox.set_value(this.getOwnerFrame().DS_SITE);
		this.dsSearch.setColumn(0, "YM_WORK", (this.getOwnerFrame().YM_WORK).substr(0,6));
		
		this.FormBtns.Select.click();
	}else{
		var today = this.gfnGetDate();
		this.dsSearch.setColumn(0, "YM_WORK", today.substr(0,6));
	}

};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 ************************************************************************/
this.fnSetButton = function() {
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btnApp = this.gfnFormButtonAdd("btnApp", "fnApp");
	this.btnCancelApp = this.gfnFormButtonAdd("btnAppCancel", "fnAppCancel");
	this.btnSlipIssue = this.gfnFormButtonAdd("btnSlipIssue", "fnSlipIssue");
	this.btnSlipSearch = this.gfnFormButtonAdd("btnSlipSearch", "fnSlipSearch");
	this.btnSlipCancel = this.gfnFormButtonAdd("btnSlipCancel", "fnSlipCancel");
	this.btnSlipIssueSap = this.gfnFormButtonAdd("btnSlipIssueSap", "fnSlipIssueSap");
	this.btnSlipCancelSap = this.gfnFormButtonAdd("btnSlipCancelSap", "fnSlipCancelSap");
	this.btnAddfile = this.gfnFormButtonAdd("btnAddfile", "fnAddfile");
	this.btnMagamEXE = this.gfnFormButtonAdd("btnMagamEXE", "fnMagamEXE");	// 공동도급마감
	this.btnMagamCNC = this.gfnFormButtonAdd("btnMagamCNC", "fnMagamCNC");	// 마감취소
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.dxGrid = this.divData.form.divDataTop.form.objGrid;
	this.dxGridSub = this.divData.form.divDataBottom.form.objGridSub;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {	
	this.gfnGridInit(this.dxGrid, this.dsList, "DW", "DWD_JTSLIP");
	this.dxGrid.set_selecttype("cell");	
	this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforeUserDataSetParam";
	this.dxGrid.addEventHandler("onselectchanged", this.fnGrid_RowCellChanged, this);
	//this.dsList.addEventHandler("canrowposchange", this.dsList_canrowposchange, this);
		
	this.gfnGridInit(this.dxGridSub, this.dsListSub, "DW", "DWD_JTDIVDETAIL");
	this.dxGridSub.addEventHandler("onselectchanged", this.fnGridSub_RowCellChanged, this);
	// 셀 수정가능 여부
	this.dxGridSub.EnterCell = "fnGridSub_EnterCell";
	
	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "AM_STAXBILL2"), "edittype", "expr:!dataset.parent.gfnIsNull(NO_SLIP)? 'none':'mask'");
	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "AM_SVAT2"), "edittype", "expr:!dataset.parent.gfnIsNull(NO_SLIP)? 'none':'mask'");
	
}

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("TY_WRK", "string");
	this.dsSelect.addColumn("CD_SITE", "string");
	this.dsSelect.addColumn("YM_WORK", "string");
		
	this.dsSelectSub = new Dataset();
	this.dsSelectSub.addColumn("TY_WRK", "string");
	this.dsSelectSub.addColumn("CD_SITE", "string");
	this.dsSelectSub.addColumn("YM_WORK", "string");
	this.dsSelectSub.addColumn("CD_VENDOR", "string");
	
	this.dsSave = new Dataset();
	this.dsSave.addColumn("TY_WRK", "string");
	this.dsSave.addColumn("ID_USER", "string");
	this.dsSave.addColumn("CD_SITE", "string");
	this.dsSave.addColumn("YM_WORK", "string");
	this.dsSave.addColumn("CD_VENDOR", "string");
	this.dsSave.addColumn("AM_STAXBILL1", "bigdecimal");
	this.dsSave.addColumn("AM_SVAT1", "bigdecimal");
	this.dsSave.addColumn("AM_STAXBILL2", "bigdecimal");
	this.dsSave.addColumn("AM_SVAT2", "bigdecimal");
	this.dsSave.addColumn("CD_COST", "string");
	this.dsSave.addColumn("DT_SLIP", "string");
	this.dsSave.addColumn("DT_ESTIMATE", "string");
	this.dsSave.addColumn("DT_VATPROOF", "string");
	this.dsSave.addColumn("RM_BIGO", "string");
	
	this.dsExecute = new Dataset();
	this.dsExecute.addColumn("TY_WRK", "string");
	this.dsExecute.addColumn("ID_USER", "string");
	this.dsExecute.addColumn("CD_SITE", "string");
	this.dsExecute.addColumn("YM_WORK", "string");
	this.dsExecute.addColumn("CD_VENDOR", "string");
	this.dsExecute.addColumn("CD_DEPT", "string");
	this.dsExecute.addColumn("NO_SLIP", "string");
	
	this.dsSapAuto = new Dataset();
	this.dsSapAuto.addColumn("TY_WRK", "string");
	this.dsSapAuto.addColumn("CD_AUTOSLIP", "string");
	this.dsSapAuto.addColumn("NO_ERPKEY", "string");
	
	this.dsAppParam = new Dataset();
	this.dsAppParam.addColumn("ID_USER", "string");
	this.dsAppParam.addColumn("CD_SITE", "string");
	this.dsAppParam.addColumn("YM_WORK", "string");
	this.dsAppParam.addColumn("CD_VENDOR", "string");
	this.dsAppParam.addColumn("ID_AP_TYPE", "string");

	this.dsMagam = new Dataset();
	this.dsMagam.addColumn("CD_SITE", "string");
	this.dsMagam.addColumn("YM_WORK", "string");
	this.dsMagam.addColumn("CD_VENDOR", "string");
	this.dsMagam.addColumn("ID_USER", "string");
}

/************************************************************************
 * 버튼 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;

	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	this.dsSelect.setColumn(0, "TY_WRK", "Q");
	this.dsSelect.setColumn(0, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
	this.dsSelect.setColumn(0, "YM_WORK", this.dsSearch.getColumn(0, "YM_WORK").substr(0,6));

	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	//this.gfnGridAdd(this.dxGrid);
}

/*
 *	삭제 버튼
 */ 
this.fnDel = function() {
	//this.gfnGridDel(this.dxGrid);
}

/*
 *	저장 버튼
 */ 
this.fnSave = function() {
	// 저장을 하단 그리드로 진행함.
	if (!this.gfnGridValidate(this.dxGrid)) return;

	this.dxGrid.updateToDataset();
	
	this.dsSave.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "I":
			case "U":
			case "D":
				var nrow = this.dsSave.addRow();
				this.dsSave.setColumn(nrow, "TY_WRK", flag);
				this.dsSave.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
				this.dsSave.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
				this.dsSave.setColumn(nrow, "YM_WORK", this.dsSearch.getColumn(0, "YM_WORK").substr(0,6));
				this.dsSave.setColumn(nrow, "CD_VENDOR", this.dsList.getColumn(i, "CD_VENDOR"));
				this.dsSave.setColumn(nrow, "AM_STAXBILL1", this.dsList.getColumn(i, "AM_STAXBILL1"));
				this.dsSave.setColumn(nrow, "AM_SVAT1", this.dsList.getColumn(i, "AM_SVAT1"));
				this.dsSave.setColumn(nrow, "AM_STAXBILL2", this.dsList.getColumn(i, "AM_STAXBILL2"));
				this.dsSave.setColumn(nrow, "AM_SVAT2", this.dsList.getColumn(i, "AM_SVAT2"));
				this.dsSave.setColumn(nrow, "CD_COST", this.dsList.getColumn(i, "CD_COST"));
				this.dsSave.setColumn(nrow, "DT_SLIP", this.dsList.getColumn(i, "DT_SLIP"));
				this.dsSave.setColumn(nrow, "DT_ESTIMATE", this.dsList.getColumn(i, "DT_ESTIMATE"));
				this.dsSave.setColumn(nrow, "DT_VATPROOF", this.dsList.getColumn(i, "DT_VATPROOF"));
				this.dsSave.setColumn(nrow, "RM_BIGO", this.dsList.getColumn(i, "RM_BIGO"));

				break;
		}
	}
		
	if (this.dsSave.rowcount == 0) return;

	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "save=dsSave";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */ 
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}
 
/************************************************************************
 * 서브 버튼 이벤트
 ************************************************************************/
this.fnSelectSub = function() {
	if (this.dxGrid.rowcount == 0 || this.dxGrid.currentrow < 0) return false;
	
	this.dsListSub.clearData();
	
	var cd_vendor = this.dsList.getColumn(this.dsList.rowposition, "CD_VENDOR");
	if (this.gfnIsNull(cd_vendor)) {
		return false;
	}
	
	this.gfnGridBeforeSelect(this.dxGridSub);
	
	this.dsSelectSub.clearData();
	this.dsSelectSub.addRow();
	this.dsSelectSub.setColumn(0, "TY_WRK", "S");
	this.dsSelectSub.setColumn(0, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
	this.dsSelectSub.setColumn(0, "YM_WORK", this.dsSearch.getColumn(0, "YM_WORK").substr(0,6));
	this.dsSelectSub.setColumn(0, "CD_VENDOR", this.dsList.getColumn(this.dsList.rowposition, "CD_VENDOR"));

	var strSvcId    = "detail";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "d_select=dsSelectSub";
	var outData     = "dsListSub=d_select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

this.fnExcelSub = function() {
	this.gfnExcelExport(this.dxGridSub);
}

/************************************************************************
 * Validate
 ************************************************************************/
this.fnSelectValidate = function() {
	var validate = true;
	
	if (this.gfnIsNull(this.dsSearch.getColumn(0, "CD_SITE"))) {
		validate = false;
		
		this.fnVaidateCallback = function() {
			this.divSearch.form.ccfCD_SITE.form.CDTextBox.setFocus();
		}
		this.gfnAlert("현장코드를 입력하세요.", "fnVaidateCallback");
	}
	
	if (this.gfnIsNull(this.dsSearch.getColumn(0, "YM_WORK"))) {
		validate = false;
		
		this.fnVaidateCallback = function() {
			this.divSearch.form.ctclYM_WORK.setFocus();
		}
		this.gfnAlert("작업년월를 입력하세요.", "fnVaidateCallback");
	}
	
	return validate;
};
/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg, strArg)
{
	if (svcID == "select") {		
		this.gfnGridAfterSelect(this.dxGrid);	
		
		this.fnBtnCheckAll();
		
		if(this.dsList.rowcount == 0)
		{
			this.gfnGridClear(this.dxGridSub);	
		}
	}
	else if (svcID == "detail") {			
		this.gfnGridAfterSelect(this.dxGridSub);	
	}
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
			/*this.fnSelectSub();*/
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "execute") {
		if (errorCode == 0) {
			var json = this.gfnArgsToJson(strArg);
			strArg = json.gubun;
			
			var msg = "";
			switch(strArg)
			{
				case "SLPPUB" :
					msg += "전표발행이 ";
					break;
				case "SLPCNC" :
					msg += "전표취소가 ";
					break;
			}
			
			msg += "정상 처리되었습니다.";
			
			this.gfnAlert(msg);
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "magam") {
		if (errorCode == 0) {
			var json = this.gfnArgsToJson(strArg);
			strArg = json.gubun;

			var msg = "";
			switch(strArg)
			{
				case "MagamEXE" :
					msg += "공동도급 마감이 ";
					break;
				case "MagamCNC" :
					msg += "공동도급 마감취소가 ";
					break;
			}
			
			msg += "정상 처리되었습니다.";
			
			this.gfnAlert(msg);
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	
	else if(svcID == "appChk") 
	{
		if (errorCode == 0) 
		{
			this.fnAppSelect();
		}
		else
		{	
			this.gfnAlert(errorMsg);
		}
	}else if(svcID == "appSelect") {
		
		if (errorCode == 0) 
		{
			this.fnAppOpen();
		}
		else
		{
			this.gfnAlert(errorMsg);
		}
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
 this.fnGrid_BeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	if(id == "DWX_CFCOST_TASA")
		{
			dsUserParam.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
	// 		dsUserParam.setColumn(nrow, "CD_GBIMOK", "");
	// 		dsUserParam.setColumn(nrow, "CD_STDAGG", "JIK");
			dsUserParam.setColumn(nrow, "NO_HADOCONT", "직영");
			dsUserParam.setColumn(nrow, "TY_TASA", "Y");
		}
	return true;
  }
  
 // cell 클릭했을때 이벤트(해당 cell에 대한 이벤트를 건다)
this.fnGridSub_EnterCell = function(obj:nexacro.Grid, row, cell) {
	// 하단 그리드는 읽기 전용상태로셋팅한다(다른쪽 화면에서 같은 그리드ID를 같이 사용하기때문에 여기서 읽기전용으로 셋팅한다)
	return false;
	
}

this.fnGrid_RowCellChanged = function(obj:nexacro.Grid,e:nexacro.GridSelectEventInfo)
{
    if ((obj.oldrow > -1 && obj.oldrow == e.row)
		|| (obj.oldrow == -1 && e.oldrow != e.row)) {
		//this.FormBtns.SubSelect.click();
		
		// 전표발행, 전표조회, 전표취소 활성화 or 비활성화 처리
// 		var nRow = this.dsList.rowposition;
// 		if(this.dsList.getColumn(nRow, "YN_SLIPISSUE") == "Y"){
// 			this.btnSlipIssue.set_enable(true);
// 		}else{
// 			this.btnSlipIssue.set_enable(false);
// 		}
// 		if(this.dsList.getColumn(nRow, "YN_SLIPVIEW") == "Y"){
// 			this.btnSlipSearch.set_enable(true);
// 		}else{
// 			this.btnSlipSearch.set_enable(false);
// 		}
// 		if(this.dsList.getColumn(nRow, "YN_SLIPCANCEL") == "Y"){
// 			this.btnSlipCancel.set_enable(true);
// 		}else{
// 			this.btnSlipCancel.set_enable(false);
// 		}

		this.fnBtnCheckAll();
		
		this.fnSelectSub();
		obj.oldrow = -1;
	}
};

this.fnGridSub_RowCellChanged = function(obj:nexacro.Grid,e:nexacro.GridSelectEventInfo)
{	
	var colmn = this.gfnGridGetBindColumnNameByIndex(this.dxGridSub, e.cell);
	var rows = obj.getSelectedDatasetRows();
	var sum = 0;
	var bRet = "";
	
	for(var i = 0; i < rows.length; i++) {
		/*var am = this.dsListSub.getColumn(rows[i], colmn);*/
		var am = this.gfnIsNull( this.dsListSub.getColumn(rows[i], colmn)) ? 0 :  this.dsListSub.getColumn(rows[i], colmn);
		
		bRet = isNaN(am); // 문자:true, 숫자:false
		
		if(bRet){
			break;
		}
		
		if(!this.gfnIsNull(am)) {
			sum += am;
		}
	}
	
	var colDS_ACCOUNT = this.dxGridSub.getBindCellIndex("body", "DS_ACCOUNT");
	
	if(!bRet)
	{
		this.dxGridSub.setCellProperty("summ", colDS_ACCOUNT, "text", "선택합계=" + this.gfnAppendComma(sum));
	}else{
		this.dxGridSub.setCellProperty("summ", colDS_ACCOUNT, "text", "");
	}
// 	if(sum > 0){
// 		this.dxGridSub.setCellProperty("summ", colDS_ACCOUNT, "text", "선택합계=" + this.gfnAppendComma(sum));
// 	}else{
// 		this.dxGridSub.setCellProperty("summ", colDS_ACCOUNT, "text", "");
// 	}
}


/************************************************************************
 * 확장버튼 이벤트
 ************************************************************************/
this.fnAddfile = function() {
	var fileManager = {};
	fileManager.CD_GUBUN = "DW17";
	fileManager.CD_DIR = [this.dsSearch.getColumn(0,"CD_SITE"), this.dsSearch.getColumn(0, "YM_WORK")];
	
	var NO_SLIP = this.dsList.getColumn(0, "NO_SLIP");
	var bReadOnly = this.gfnIsNull(NO_SLIP) ? false : true;
	fileManager.IS_READONLY = bReadOnly;
	
// 	if(this.dsList.getColumn(this.dsList.rowposition, "BTN_ATTACHFILE_AUTH") == "R") {
// 			fileManager.IS_READONLY = true;
// 	} else {
// 			fileManager.IS_READONLY = false;
// 	}
		
	this.gfnFileManager(fileManager, "fnFileCallback");
}

this.fnFileCallback = function(strID, val) {
	// val.IsChange : 변경여부, val.Cnt : 파일개수
		
	// 파일개수를 다시 셋팅
	//this.dsList.set_enableevent(false);
	/*
	if(val.Cnt == 0) {
		this.btn3.set_text("첨부(0)");
	} else {
		this.btn3.set_text("첨부(" + val.Cnt + ")");
	}
	*/
	//this.dsList.setColumn(this.dsList.rowposition, "URL_PROOF", "첨부(" + val.Cnt + ")");
	//this.dsList.set_enableevent(true);
};

// 공동도급마감
this.fnMagamEXE = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	this.gfnConfirm("공동도급마감 하시겠습니까?", "fnExecMagam", "MagamEXE");
}

// 마감취소
this.fnMagamCNC = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	this.gfnConfirm("공동도급마감취소 하시겠습니까?", "fnExecMagam", "MagamCNC");
}

// 공동도급 마감/마감취소
this.fnExecMagam = function(strId, val){
	var sTyMagam = strId;
	
	// 저장을 하단 그리드로 진행함.
	//if (!this.gfnGridValidate(this.dxGrid)) return;

	this.dxGrid.updateToDataset();

	this.dsMagam.clearData();	
	var nrow = this.dsMagam.addRow();
	this.dsMagam.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
	this.dsMagam.setColumn(nrow, "YM_WORK", this.dsSearch.getColumn(0, "YM_WORK").substr(0,6));
	this.dsMagam.setColumn(nrow, "CD_VENDOR", "");
	this.dsMagam.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
		
	if (this.dsMagam.rowcount == 0) return;

	var strSvcId    = "magam";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	//var inData      = "save=dsSave";
	var inData      = sTyMagam+"=dsMagam";
	var outData     = "";
	//var strArg      = "";
	var strArg      = "gubun=" + sTyMagam;	
	
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
		this.gfnGridClear(this.dxGridSub);	
	}
};

this.divData_ondragmove = function(obj:nexacro.Div,e:nexacro.DragEventInfo)
{
	if(e.userdata == "splitter") {
		this.divData.form.divSplitter.set_top(e.clienty);
		this.divData.form.resetScroll();	
	}
};

this.divData_divSplitter_ondrag = function(obj:nexacro.Div,e:nexacro.DragEventInfo)
{
	e.set_userdata("splitter");
	return true;
};


// 부가세 컬럼 입력시 합계 컬럼 자동 산식
this.dsList_oncolumnchanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.columnid == "AM_VAT"){		// 부가세
		// 현재 row의 합계 컬럼
		this.dsList.setColumn(e.row, "AM_SUM", nexacro.toNumber(this.dsList.getColumn(e.row, "AM_TAXBILL"),0) + nexacro.toNumber(this.dsList.getColumn(e.row, "AM_VAT"),0) + nexacro.toNumber(this.dsList.getColumn(e.row, "AM_BILL"),0) + nexacro.toNumber(this.dsList.getColumn(e.row, "AM_ETC"),0));
	}
};

// 전표발행 확장버튼.
this.fnSlipIssue = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	// 선택된 row가 있을 경우에만 팝업을 띄움
	if (!this.gfnGridIsRow(this.dxGrid)) { return false; }
	
	var msg = "현장코드 : [" + this.dsSearch.getColumn(0, "CD_SITE") + "] " + this.divSearch.form.ccfCD_SITE.form.DSTextBox.text
			+ "\n작업년월 : [" + this.dsSearch.getColumn(0, "YM_WORK").substr(0,6) + "]"
			+ "\n공동도급사 : [" + this.dsList.getColumn(this.dsList.rowposition, "CD_VENDOR") + "] " + this.dsList.getColumn(this.dsList.rowposition, "DS_VENDOR")
			+ "\n\n안분전표 발행 하시겠습니까?";
			
	this.gfnConfirm(msg, "fnJt_callback", "SLPPUB");
}

// 전표조회 확장버튼.
this.fnSlipSearch = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	// 선택된 row가 있을 경우에만 팝업을 띄움
	if (!this.gfnGridIsRow(this.dxGrid)) { return false; }
	
	var param = {};
	
	//param.NO_ERPKEY = this.dsList.getColumn(this.dsList.rowposition, "NO_ERPKEY");
	var no_slip = this.gfnIsNull(this.selSlipNo) ?  this.dsList.getColumn(this.dsList.rowposition, "NO_SLIP") : this.selSlipNo;
	param.CD_TRADE = no_slip; //this.dsList.getColumn(this.dsList.rowposition, "NO_SLIP");
	trace("param.CD_TRADE:"+param.CD_TRADE);

	
	//this.gfnFormOpen("DHA", "DHA_ERPKEY_SLIP", "", param); 
	this.gfnFormOpen("DHA", "DHA_ISSUESLIP", "", param); 
}

// 전표취소 확장버튼.
this.fnSlipCancel = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	// 선택된 row가 있을 경우에만 팝업을 띄움
	if (!this.gfnGridIsRow(this.dxGrid)) { return false; }
	
	var msg = "현장코드 : [" + this.dsSearch.getColumn(0, "CD_SITE") + "]" + this.divSearch.form.ccfCD_SITE.form.DSTextBox.text
			+ "\n작업년월 : [" + this.dsSearch.getColumn(0, "YM_WORK").substr(0,6) + "]"
			+ "\n공동도급사 : [" + this.dsList.getColumn(this.dsList.rowposition, "CD_VENDOR") + "] " + this.dsList.getColumn(this.dsList.rowposition, "DS_VENDOR")
			+ "\n\n안분전표취소 하시겠습니까?";
			
	this.gfnConfirm(msg, "fnJt_callback", "SLPCNC");
}

// 전표 발행 or 취소 처리
this.fnJt_callback = function(strId, val) {
	if(val == true)
	{
		this.dsExecute.clearData();
		var nrow = this.dsExecute.addRow();
		
		this.dsExecute.setColumn(nrow, "TY_WRK", strId);
		this.dsExecute.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
		this.dsExecute.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
		this.dsExecute.setColumn(nrow, "YM_WORK", this.dsSearch.getColumn(0, "YM_WORK").substr(0,6));
		this.dsExecute.setColumn(nrow, "CD_VENDOR", this.dsList.getColumn(this.dsList.rowposition, "CD_VENDOR"));
		this.dsExecute.setColumn(nrow, "CD_DEPT", this.AuthClient.CD_DEPT);
		this.dsExecute.setColumn(nrow, "NO_SLIP", this.dsList.getColumn(this.dsList.rowposition, "NO_SLIP"));

		if (this.dsExecute.rowcount == 0) return;
			
		var strSvcId    = "execute";
		var strSvcType  = "save";
		var inProc		= "_dsProc";
		var inData      = "execute=dsExecute";
		var outData     = "";
		var strArg      = "gubun=" + strId;
		var callBackFnc = "fnCallback";

		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
							strSvcType , 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
							callBackFnc); 	// 통신방법 정의 [생략가능]
	}
}


/*
 *	전표발행(SAP)
 */ 
this.fnSlipIssueSap = function() {
	if (!this.gfnGridIsRow(this.dxGrid)) { return false; }
	var cdSite = this.dsSearch.getColumn(0, "CD_SITE");	// 현장코드
	var dsSite = this.divSearch.form.ccfCD_SITE.form.DSTextBox.value;
	
	var msg = "현장코드 : [" + cdSite + "] " + dsSite 
			+ "\n작업년월 : [" + this.dsSearch.getColumn(0, "YM_WORK").substr(0,6) + "]"
			+ "\n공동도급사 : [" + this.dsList.getColumn(this.dsList.rowposition, "CD_VENDOR") + "] " + this.dsList.getColumn(this.dsList.rowposition, "DS_VENDOR")
			+  "\r\n \r\n안분전표발행(SAP) 하시겠습니까?";
	
	this.gfnConfirm(msg, "fnSlipIssueSap_callback");
}

this.fnSlipIssueSap_callback = function(strId, val) {
	if(val == true) {
		this.dsSapAuto.clearData();
		var nrow = this.dsSapAuto.addRow();

		this.dsSapAuto.setColumn(nrow, "TY_WRK", "Q");
		this.dsSapAuto.setColumn(nrow, "CD_AUTOSLIP", "DWD0002");
		this.dsSapAuto.setColumn(nrow, "NO_ERPKEY", this.dsList.getColumn(this.dsList.rowposition, "NO_ERPKEY"));
		
		var strSvcId    = "sapauto";
		var strSvcType  = "select";
		var inProc		= "_dsProc";
		var inData      = "sapauto=dsSapAuto";
		var outData     = "dsListSap=sapauto0";
		var strArg      = "";
		var callBackFnc = "fnSlipIssueSap_Callback";
		
		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
							strSvcType , 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
							callBackFnc); // 통신방법 정의 [생략가능]
	}
}

/*
 *	전표취소(SAP)
 */ 
this.fnSlipCancelSap = function() {
	if (!this.gfnGridIsRow(this.dxGrid)) { return false; }
	var cdSite = this.dsSearch.getColumn(0, "CD_SITE");	// 현장코드
	var dsSite = this.divSearch.form.ccfCD_SITE.form.DSTextBox.value;
	
	var msg = "현장코드 : [" + cdSite + "] " + dsSite 
			+ "\n작업년월 : [" + this.dsSearch.getColumn(0, "YM_WORK").substr(0,6) + "]"
			+ "\n공동도급사 : [" + this.dsList.getColumn(this.dsList.rowposition, "CD_VENDOR") + "] " + this.dsList.getColumn(this.dsList.rowposition, "DS_VENDOR")
			+  "\r\n \r\n안분전표발행취소(SAP) 하시겠습니까?";
	
	this.gfnConfirm(msg, "fnSlipCancelSap_callback");
}

this.fnSlipCancelSap_callback = function(strId, val) {
	if(val == true) {
		this.dsSapAuto.clearData();
		this.dsSapAuto.addRow();

		this.dsSapAuto.setColumn(0, "TY_WRK", "Q");
		this.dsSapAuto.setColumn(0, "CD_AUTOSLIP", "DWD0002");
		this.dsSapAuto.setColumn(0, "NO_ERPKEY", this.dsList.getColumn(this.dsList.rowposition, "NO_ERPKEY"));
		
		var strSvcId    = "sapcancel";
		var strSvcType  = "select";
		var inProc		= "_dsProc";
		var inData      = "sapcancel=dsSapAuto";
		var outData     = "dsListSap=sapcancel0";
		var strArg      = "";
		var callBackFnc = "fnSlipIssueSap_Callback";
		
		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
							strSvcType , 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
							callBackFnc); // 통신방법 정의 [생략가능]
	}
}

/*
 *	전표(SAP) CALLBACK
 */ 
this.fnSlipIssueSap_Callback = function(svcID, errorCode, errorMsg) {
	if(errorCode != 0) {
		this.gfnAlert(errorMsg);
		return false;
	}
	
	if(svcID == "sapauto") {
		if (this.dsListSap.rowcount > 0) {
			// 전표발행(SAP) 다중건 처리용 Dataset 생성
			var ds = new Dataset();
			ds.addColumn("NO_ERPKEY", "string");
			ds.addColumn("CD_TRADE", "string");
			ds.addColumn("ID_USER", "string");
			
			for(var i = 0; i < this.dsListSap.rowcount; i++) {
				var nrow = ds.addRow(); 
				ds.setColumn(nrow, "NO_ERPKEY", this.dsListSap.getColumn(i, "NO_ERPKEY"));
				ds.setColumn(nrow, "CD_TRADE", this.dsListSap.getColumn(i, "CD_TRADE"));
				ds.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
			}
			
			// 전표발행(SAP) 다중건 처리
			this.gfnSlipIssueDs(ds, "fnSlipIssueSap_Complete");
		}
	}
	else if(svcID == "sapcancel") {
		if (this.dsListSap.rowcount > 0) {
			// 전표취소(SAP) 다중건 처리용 Dataset 생성
			var ds = new Dataset();
			ds.addColumn("NO_ERPKEY", "string");
			ds.addColumn("CD_TRADE", "string");
			ds.addColumn("ID_USER", "string");
			ds.addColumn("BUKRS", "string");
			ds.addColumn("BELNR", "string");
			ds.addColumn("GJAHR", "string");
			
			for(var i = 0; i < this.dsListSap.rowcount; i++) {
				var nrow = ds.addRow(); 
				ds.setColumn(nrow, "NO_ERPKEY", this.dsListSap.getColumn(i, "NO_ERPKEY"));
				ds.setColumn(nrow, "CD_TRADE", this.dsListSap.getColumn(i, "CD_TRADE"));
				ds.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
				ds.setColumn(nrow, "BUKRS", this.dsListSap.getColumn(i, "BUKRS"));
				ds.setColumn(nrow, "BELNR", this.dsListSap.getColumn(i, "BELNR"));
				ds.setColumn(nrow, "GJAHR", this.dsListSap.getColumn(i, "GJAHR"));
			}
			
			// 전표취소(SAP) 다중건 처리
			this.gfnSlipCancelDs(ds, "fnSlipCancelSap_Complete");
		}
	}
}

this.fnSlipIssueSap_Complete = function() {
	this.fnSelect();
}

this.fnSlipCancelSap_Complete = function() {
	this.fnSelect();
}

this.fnBtnCheckAll = function()
{
	this.gfnBtnCheck(this.btnSlipIssue, this.dsList);
	this.gfnBtnCheck(this.btnSlipSearch, this.dsList);
	this.gfnBtnCheck(this.btnSlipCancel, this.dsList);
	this.gfnBtnCheck(this.btnSlipIssueSap, this.dsList);
	this.gfnBtnCheck(this.btnSlipCancelSap, this.dsList);
}   








this.divData_divDataTop_objGrid_oncellposchanged = function(obj:nexacro.Grid,e:nexacro.GridSelectEventInfo)
{

	var colnm = this.gfnGridGetBindColumnNameByIndex(this.dxGrid, e.cell);

	//if(e.cell == "20"||e.cell == "21"||e.cell == "22"||e.cell == "30"){
	if(colnm == "NO_SLIP"||colnm == "NO_SLIP2"||colnm == "NO_SLIP3"||colnm == "NO_SLIP_TS1"||colnm == "NO_SLIP_TS2"||colnm == "NO_SLIP_TS3"){
		this.selSlipNo = this.dsList.getColumn(e.row,colnm);
	}
	
	
};

this.divData_divDataTop_objGrid_oncelldblclick = function(obj:nexacro.Grid,e:nexacro.GridClickEventInfo)
{
	this.fnSlipSearch();
};


//전자결재
this.fnApp = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) 
{
// 	this.gfnAlert("서버작업진행중입니다.");
// 	return false;
	
	if(this.dsSearch.getColumn(0, "YM_WORK").substr(0,6) < "202006"){
		this.gfnAlert("2020년6월 이전자료는 이관된 자료라 작업을 할 수 없습니다");
		return false;
	}
	//if(this.dsList.findRow("CHK", "1") < 0){
	if(this.dsListSub.rowposition < 0){
		this.gfnAlert("전표결재 하실 정보를 선택하시기 바랍니다.");
		return false;
	}
	
// 	var chkCnt = 0;
// 	for (var i = 0; i < this.dsList.rowcount; i++) {
// 		if(this.dsList.getColumn(i, "CHK") == "1"){
// 			chkCnt = chkCnt + 1;
// 		}
// 	}
	
	var msg = "현장코드 : [" + this.dsList.getColumn(0, "CD_SITE") + "] " + this.divSearch.form.ccfCD_SITE.form.DSTextBox.text
			+ "\n작업년월 : [" + this.dsList.getColumn(0, "YM_WORK")+ "]"
			+ "\n회원사명 : [" + this.dsList.getColumn(0, "DS_VENDOR")+ "]"
			+ "\n\n안분전표 전자결재를 하시겠습니까?";
	this.gfnConfirm(msg, "fnApp_callback", "");
}

//전자결재취소
this.fnAppCancel = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) 
{
	if(this.dsSearch.getColumn(0, "YM_WORK").substr(0,6) < "202006"){
		this.gfnAlert("2020년6월 이전자료는 이관된 자료라 작업을 할 수 없습니다");
		return false;
	}
	/*if(this.dsList.findRow("CHK", "1") < 0){*/
	if(this.dsListSub.rowposition < 0){
		this.gfnAlert("전표결재 하실 정보를 선택하시기 바랍니다.");
		return false;
	}
	
// 	var chkCnt = 0;
// 	for (var i = 0; i < this.dsList.rowcount; i++) {
// 		if(this.dsList.getColumn(i, "CHK") == "1"){
// 			chkCnt = chkCnt + 1;
// 		}
// 	}
	
	var msg = "현장코드 : [" + this.dsList.getColumn(0, "CD_SITE") + "] " + this.divSearch.form.ccfCD_SITE.form.DSTextBox.text
			+ "\n작업년월 : [" + this.dsList.getColumn(0, "YM_WORK")+ "]"
			+ "\n회원사명 : [" + this.dsList.getColumn(0, "DS_VENDOR")+ "]"
			+ "\n\n안분전표 취소전자결재를 하시겠습니까?";
	this.gfnConfirm(msg, "fnAppCancel_callback", "");
}

//전자결재 체크로직
this.fnApp_callback = function(strId, val) 
{
	if(val == true) 
	{	
		
		
		var vendors ="";
		for(var i=0;i < this.dsList.rowcount;i++){
			if(this.dsList.getColumn(i, "CHK") == "1"){
				if(vendors != ""){
					vendors += ",";
				}
				vendors += this.dsList.getColumn(i, "CD_VENDOR");
			}
		}
		if(vendors == ""){
			this.gfnAlert("전자결재 대상업체를 선택해주세요");
			return;
		}

		this.dsAppParam.clearData();
		
		var nrow = this.dsAppParam.addRow();
		
		//this.dsAppParam.setColumn(nrow, "TY_WRK", flg);
		
		
		
		this.dsAppParam.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
		this.dsAppParam.setColumn(nrow, "CD_SITE", this.dsList.getColumn(this.dsList.rowposition, "CD_SITE"));
		this.dsAppParam.setColumn(nrow, "YM_WORK", this.dsList.getColumn(this.dsList.rowposition, "YM_WORK"));
		//this.dsAppParam.setColumn(nrow, "CD_VENDOR", this.dsList.getColumn(this.dsList.rowposition, "CD_VENDOR"));
		this.dsAppParam.setColumn(nrow, "CD_VENDOR", vendors);
		this.dsAppParam.setColumn(nrow, "ID_AP_TYPE", "DW05");
		
		
		
		//this.dsAppParam.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
		
	
		if (this.dsAppParam.rowcount == 0) return;
		
		var strSvcId    = "appChk";
		var strSvcType  = "save";
		var inProc		= "_dsProc";
		var inData      = "appChk=dsAppParam";
		var outData     = "";
		var strArg      = "";
		var callBackFnc = "fnCallback";
		
		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
							strSvcType , 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
							callBackFnc); // 통신방법 정의 [생략가능]
	}
}

//전자결재취소 체크로직
this.fnAppCancel_callback = function(strId, val) 
{
// 	this.gfnAlert("서버작업진행중입니다.");
// 	return false;
	
	if(val == true) 
	{	
		
		
		var vendors ="";
		for(var i=0;i < this.dsList.rowcount;i++){
			if(this.dsList.getColumn(i, "CHK") == "1"){
				if(vendors != ""){
					vendors += ",";
				}
				vendors += this.dsList.getColumn(i, "CD_VENDOR");
			}
		}
		if(vendors == ""){
			this.gfnAlert("전자결재 대상업체를 선택해주세요");
			return;
		}
		this.dsAppParam.clearData();
		
		var nrow = this.dsAppParam.addRow();
		
		//this.dsAppParam.setColumn(nrow, "TY_WRK", flg);
	
		this.dsAppParam.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
		this.dsAppParam.setColumn(nrow, "CD_SITE", this.dsList.getColumn(this.dsList.rowposition, "CD_SITE"));
		this.dsAppParam.setColumn(nrow, "YM_WORK", this.dsList.getColumn(this.dsList.rowposition, "YM_WORK"));
		/*this.dsAppParam.setColumn(nrow, "CD_VENDOR", this.dsList.getColumn(this.dsList.rowposition, "CD_VENDOR"));*/
		this.dsAppParam.setColumn(nrow, "CD_VENDOR", vendors);
		this.dsAppParam.setColumn(nrow, "ID_AP_TYPE", "DW06");
		
		
		
		//this.dsAppParam.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
		
	
		if (this.dsAppParam.rowcount == 0) return;
		
		var strSvcId    = "appChk";
		var strSvcType  = "save";
		var inProc		= "_dsProc";
		var inData      = "appChk=dsAppParam";
		var outData     = "";
		var strArg      = "";
		var callBackFnc = "fnCallback";
		
		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
							strSvcType , 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
							callBackFnc); // 통신방법 정의 [생략가능]
	}
}

//전자결재 대상조회
this.fnAppSelect = function()
{
	var strSvcId    = "appSelect";
	var strSvcType  = "select";
	var inProc		= "_dsProc";
	var inData      = "appSelect=dsAppParam";
	var outData     = "dsAppList=appSelect0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

//그룹웨어 팝업 호출
this.fnAppOpen = function()
{

	if(this.dsAppList.rowcount > 0) 
	{

		var sApType = "";
	
		var sTitle  = "";
	
		sApType = this.dsAppParam.getColumn(0,"ID_AP_TYPE");
	
		if(sApType == "DW05"){
			sTitle = "안분전표 ["+this.divSearch.form.ccfCD_SITE.form.DSTextBox.value+']';
		}else if(sApType == "DW06"){
			sTitle = "안분전표 취소 ["+this.divSearch.form.ccfCD_SITE.form.DSTextBox.value+']';
		}
	
		
		var sRef01  = this.dsAppParam.getColumn(0, "CD_SITE");
		var sRef02  = this.dsAppParam.getColumn(0, "YM_WORK");
		var sRef03  = this.dsAppParam.getColumn(0,"CD_VENDOR");	//계약번호 ,로 구분하여 n건 발송
		var sRef04  = "";
		
		var oParam  = this.gfnDataSetToJson(this.dsAppList, this.dsAppList.rowposition)
		
		console.info("================ oParam");
		console.info(oParam);
	
		console.info("================ sRef01"+sRef01);
		console.info("================ sRef02"+sRef02);
		console.info("================ sRef03"+sRef03);
		
		this.gfnApprove(sApType, sTitle, sRef01, sRef02, sRef03, "", oParam, "fnAprvDialogCallback");
	}
}

this.fnAprvDialogCallback = function() 
{
	if (obj.getCellPropertyValue(e.row, e.cell, 'cssclass') != 'BACK_ReadOnly')
	{
		return false;
	}
	// 결재완료, 결재취소, 결재상신 후에는 재조회를 한다
	this.FormBtns.Select.click();
};
this.dsList_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if (e.oldvalue != e.newvalue) {
		this.dsList.set_enableevent(false);
		switch (e.columnid) {
			case "CHK":
				if(this.dsList.getColumn(e.row, "YN_JUGAN") =="Y"){
					this.dsList.setColumn(e.row, "CHK",0);
					return false;
				}
			break;
			case "AM_STAXBILL2":
				var amStaxBill = nexacro.toNumber(this.gfnNvl(this.dsList.getColumn(e.row, "AM_STAXBILL"), 0));		// 안분금액 세금계산서
				var amStaxBill2 = nexacro.toNumber(this.gfnNvl(this.dsList.getColumn(e.row, "AM_STAXBILL2"), 0)); 	// 안분금액 세금계산서2

				var amStaxBill1 = amStaxBill - amStaxBill2;
				this.dsList.setColumn(e.row, "AM_STAXBILL1", amStaxBill1);	// 안분금액 세금계산서1
			break;
			case "AM_SVAT2":
				var amSvat = nexacro.toNumber(this.gfnNvl(this.dsList.getColumn(e.row, "AM_SVAT"), 0));	//안분금액 부가세
				var amSvat2 = nexacro.toNumber(this.gfnNvl(this.dsList.getColumn(e.row, "AM_SVAT2"), 0));	// 안분금액 부가세2
				var amSvat1 = amSvat - amSvat2;
				this.dsList.setColumn(e.row, "AM_SVAT1", amSvat1);	// 안분금액 부가세1
			break;

		}
		this.dsList.set_enableevent(true);
	}
};
]]></Script>
    <Objects>
      <Dataset id="dsList" onvaluechanged="dsList_onvaluechanged"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DWDPR_JTSLIP_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">d_select</Col>
            <Col id="SP">DWDPR_JTCOSTDIVDETAIL_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">save</Col>
            <Col id="SP">DWDPR_JTSLIP_SAVE</Col>
          </Row>
          <Row>
            <Col id="TARGET">execute</Col>
            <Col id="SP">DWDPR_JTSLIP_EXECUTE</Col>
          </Row>
          <Row>
            <Col id="TARGET">sapauto</Col>
            <Col id="SP">DWZPR_SAP_AUTOSLIP_ISSUE_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">sapcancel</Col>
            <Col id="SP">DWZPR_SAP_AUTOSLIP_CANCEL_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">appSelect</Col>
            <Col id="SP">DWDPR_APP_DW05_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">appChk</Col>
            <Col id="SP">DWDPR_APP_DW05_CHK</Col>
          </Row>
          <Row>
            <Col id="TARGET">MagamEXE</Col>
            <Col id="SP">DWZPR_AUTOSLIP_AFTEREXECUTE_ISSUE </Col>
          </Row>
          <Row>
            <Col id="TARGET">MagamCNC</Col>
            <Col id="SP">DWZPR_AUTOSLIP_AFTEREXECUTE_CANCEL</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsListSub"/>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_SITE" type="STRING" size="256"/>
          <Column id="YM_WORK" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CD_SITE"/>
            <Col id="YM_WORK"/>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsListSap"/>
      <Dataset id="dsAppList" onvaluechanged="dsList_onvaluechanged"/>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfCD_SITE.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_SITE"/>
      <BindItem id="item1" compid="divSearch.form.ctclYM_WORK.form.TextBox" propid="value" datasetid="dsSearch" columnid="YM_WORK"/>
    </Bind>
  </Form>
</FDL>
