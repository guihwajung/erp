<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="전도금신청" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg" formscrolltype="none">
          <Layouts>
            <Layout>
              <Radio id="rdo00" taborder="6" left="0.0" top="10.0" width="280" height="24.0"/>
              <Static id="sta00" taborder="0" text="법인코드" left="rdo00:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Div id="ccfCORP" CDTextWidth="70" taborder="1" left="sta00:0.0" top="10.0" width="269" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
              <Static id="sta01" taborder="2" text="신청부서" left="ccfCORP:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfDEPT" CDTextWidth="70" taborder="3" left="sta01:0.0" top="10.0" width="250" height="24.0" url="cmm::cmmCodeFind.xfdl" text=""/>
              <Static id="staYM_REQ" taborder="4" text="청구년월" left="ccfDEPT:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ctclYM_REQ" taborder="5" left="staYM_REQ:0.0" top="10.0" width="80" height="24.0" url="cmm::cmmCalMM.xfdl"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	this.ccfCORP.setFocus();
	//작업년월(현재월)
	this.ctclYM_REQ.form.TextBox.set_value(this.gfnGetDate().substr(0,6));
	//법인코드 세션에 코드로 셋팅
	this.ccfCORP.form.DSTextBox.set_value(this.AuthClient.DS_CORP); 
	this.ccfCORP.form.CDTextBox.set_value(this.AuthClient.CD_CORP);	

	//if (nexacro.toNumber(this.FormInfo.GR_SEARCH) >= 7) {
		this.ccfDEPT.form.CDTextBox.set_value(this.AuthClient.CD_DEPT);	
		this.ccfDEPT.form.DSTextBox.set_value(this.AuthClient.DS_DEPT); 
	//}
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
	// Select, Add, Del, Save, Excel, Print
	// SubSelect, SubAdd, SubDel, SuubSave, SubExcel

}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btnStateIssue = this.gfnFormButtonAdd("StateIssue", "fnStateIssue"); 		//전표발행 버튼
	this.btnStateCancel = this.gfnFormButtonAdd("StateCancel", "fnStateCancel"); 	//전표취소 버튼
	this.btnStateSearch = this.gfnFormButtonAdd("StateSearch", "fnStateSearch");	//전표조회 버튼
	this.btnElctrncPmnt = this.gfnFormButtonAdd("btnElctrncPmnt", "fnElctrncPmnt", "전자결재");
	this.btnJundoReq = this.gfnFormButtonAdd("JundoReq", "fnJundoReq"); 				//전도금현황표
	//this.btnPaySangsin = this.gfnFormButtonAdd("PaySangsin", "fnPaySangsin"); 		//결재상신 버튼
	//this.btnPayDoc = this.gfnFormButtonAdd("PayDoc", "fnPayDoc"); 					//결재문서 버튼
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.ccfCORP = this.divSearch.form.ccfCORP;
	this.ccfDEPT = this.divSearch.form.ccfDEPT;
	this.ctclYM_REQ = this.divSearch.form.ctclYM_REQ;
	this.dxGrid = this.divData.form.objGrid;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	this.ccfCORP.CodeFindName = "DHX_CFCORP";
	this.ccfCORP.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.ccfCORP.AfterCDTextChanged = "fnAfterCDTextChanged";
	
	this.ccfDEPT.CodeFindName = "DHX_CFACNTUNIT";   //DHX_CFDEPT_02
	this.ccfDEPT.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	
	// 그리드 초기화
	this.gfnGridInit(this.dxGrid, this.dsList, "DH", "DHA_JUNDOREQLIST");

	this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforeUserDataSetParam";
	//this.dxGrid.AfterEdit = "fnGrid_AfterEdit";
	//this.dxGrid.EnterCell = "fnGrid_EnterCell";
	//this.dxGrid.set_selecttype("cell");

	//검색조건 변경 이벤트
	this.dsSearch.addEventHandler("onvaluechanged", this.dsSearch_Valuechanged, this);
};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {

	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_CORP", "string");
	this.dsSelect.addColumn("CD_DEPT_BH", "string");
	this.dsSelect.addColumn("YM_REQFROM", "string");

	this.dsInsert = new Dataset();
	this.dsInsert.addColumn("CD_CORP", "string");
	this.dsInsert.addColumn("CD_DEPT_BH", "string");
	this.dsInsert.addColumn("CD_DEPT", "string");
	this.dsInsert.addColumn("YM_REQ", "string");
	this.dsInsert.addColumn("DT_REQ", "string");
	this.dsInsert.addColumn("DT_REQPAY", "string");
	this.dsInsert.addColumn("CD_ACCOUNT", "string");
	this.dsInsert.addColumn("CD_VENDOR", "string");
	this.dsInsert.addColumn("AM_REQ", "bigdecimal");
	this.dsInsert.addColumn("DS_REMARK", "string");
	this.dsInsert.addColumn("NO_ACCOUNT", "string");
	this.dsInsert.addColumn("ID_INSERT", "string");

	this.dsUpdate = new Dataset();
	this.dsUpdate.addColumn("NO_REQUEST", "string");
	this.dsUpdate.addColumn("CD_DEPT", "string");
	this.dsUpdate.addColumn("YM_REQ", "string");
	this.dsUpdate.addColumn("DT_REQ", "string");
	this.dsUpdate.addColumn("DT_REQPAY", "string");
	this.dsUpdate.addColumn("CD_ACCOUNT", "string");
	this.dsUpdate.addColumn("CD_VENDOR", "string");
	this.dsUpdate.addColumn("AM_REQ", "bigdecimal");
	this.dsUpdate.addColumn("DS_REMARK", "string");
	this.dsUpdate.addColumn("NO_ACCOUNT", "string");
	this.dsUpdate.addColumn("ID_INSERT", "string");

	this.dsDelete = new Dataset();
	this.dsDelete.addColumn("NO_REQUEST", "string");
	
	this.dsCreate = new Dataset();
	this.dsCreate.addColumn("NO_SLIPKEY", "string");
	this.dsCreate.addColumn("ID_USER", "string");
	this.dsCreate.addColumn("CD_DEPT", "string");
	this.dsCreate.addColumn("CD_TRADE", "string");
	this.dsCreate.addColumn("CD_CORP", "string");
	
	this.dsCancel = new Dataset();
	this.dsCancel.addColumn("CD_SLIP", "string");

}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	
	this.dsSelect.setColumn(0, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
	this.dsSelect.setColumn(0, "CD_DEPT_BH", this.dsSearch.getColumn(0, "CD_DEPT"));
	this.dsSelect.setColumn(0, "YM_REQFROM", this.dsSearch.getColumn(0, "YM_REQ"));
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	var nNewRow = this.gfnGridAdd(this.dxGrid);
	this.dsList.setColumn(nNewRow, "CD_ACCOUNT", "01");
	
}

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}

/*
 *	저장 버튼
 */
this.fnSave = function() {
	// 그리드 필수항목 체크
	if (!this.gfnGridValidate(this.dxGrid)) return;
	this.dxGrid.updateToDataset();	
	this.dsInsert.clearData();
	this.dsUpdate.clearData();
	this.dsDelete.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "I":
				var nrow = this.dsInsert.addRow();
				this.dsInsert.setColumn(nrow, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
				/*this.dsInsert.setColumn(nrow, "CD_DEPT_BH", this.dsList.getColumn(i, "CD_DEPT_BH"));*/
				this.dsInsert.setColumn(nrow, "CD_DEPT_BH", this.dsSearch.getColumn(0, "CD_DEPT"));
				this.dsInsert.setColumn(nrow, "CD_DEPT", this.dsList.getColumn(i, "CD_DEPT"));
				this.dsInsert.setColumn(nrow, "YM_REQ", this.dsSearch.getColumn(0, "YM_REQ"));
				this.dsInsert.setColumn(nrow, "DT_REQ", this.dsList.getColumn(i, "DT_REQ"));
				this.dsInsert.setColumn(nrow, "DT_REQPAY", this.dsList.getColumn(i, "DT_REQPAY"));
				this.dsInsert.setColumn(nrow, "CD_ACCOUNT", this.dsList.getColumn(i, "CD_ACCOUNT"));
				this.dsInsert.setColumn(nrow, "CD_VENDOR", this.dsList.getColumn(i, "CD_VENDOR"));
				this.dsInsert.setColumn(nrow, "AM_REQ", this.dsList.getColumn(i, "AM_REQ"));
				this.dsInsert.setColumn(nrow, "DS_REMARK", this.dsList.getColumn(i, "DS_REMARK"));
				this.dsInsert.setColumn(nrow, "NO_ACCOUNT", this.dsList.getColumn(i, "NO_ACCOUNT"));
				this.dsInsert.setColumn(nrow, "ID_INSERT", this.AuthClient.ID_USER);
			break;
			case "U":
				var nrow = this.dsUpdate.addRow();
				this.dsUpdate.setColumn(nrow, "NO_REQUEST", this.dsList.getColumn(i, "NO_REQUEST"));
				this.dsUpdate.setColumn(nrow, "CD_DEPT", this.dsList.getColumn(i, "CD_DEPT"));
				this.dsUpdate.setColumn(nrow, "YM_REQ", this.dsSearch.getColumn(0, "YM_REQ"));			
				this.dsUpdate.setColumn(nrow, "DT_REQ", this.dsList.getColumn(i, "DT_REQ"));
				this.dsUpdate.setColumn(nrow, "DT_REQPAY", this.dsList.getColumn(i, "DT_REQPAY"));
				this.dsUpdate.setColumn(nrow, "CD_ACCOUNT", this.dsList.getColumn(i, "CD_ACCOUNT"));
				this.dsUpdate.setColumn(nrow, "CD_VENDOR", this.dsList.getColumn(i, "CD_VENDOR"));
				this.dsUpdate.setColumn(nrow, "AM_REQ", this.dsList.getColumn(i, "AM_REQ"));
				this.dsUpdate.setColumn(nrow, "DS_REMARK", this.dsList.getColumn(i, "DS_REMARK"));
				this.dsUpdate.setColumn(nrow, "NO_ACCOUNT", this.dsList.getColumn(i, "NO_ACCOUNT"));
				this.dsUpdate.setColumn(nrow, "ID_INSERT", this.AuthClient.ID_USER);
			break;
			case "D":
				var nrow = this.dsDelete.addRow();
				this.dsDelete.setColumn(nrow, "NO_REQUEST", this.dsList.getColumn(i, "NO_REQUEST"));
			break;
		}
	}

	if (this.dsInsert.rowcount == 0 && this.dsUpdate.rowcount == 0 && this.dsDelete.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "insert=dsInsert update=dsUpdate delete=dsDelete";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {
	var validate = true;

// 	if (this.gfnIsNull(this.ccfCORP.form.CDTextBox.text)) {
// 		this.gfnAlert("법인코드가 입력되지 않았습니다.");
// 		this.ccfCORP.form.CDTextBox.setFocus();
// 		validate = false;
// 	}
	
	if (this.gfnIsNull(this.gfnTrim(this.ccfDEPT.form.CDTextBox.value))) {
		this.gfnAlert("신청부서가 입력되지 않았습니다.");
		this.ccfDEPT.form.CDTextBox.setFocus();
		return;
	}

	if (this.gfnIsNull(this.ctclYM_REQ.form.TextBox.value)) {
		this.gfnAlert("청구년월이 입력되지 않았습니다.");
		this.ctclYM_REQ.form.TextBox.setFocus();
		validate = false;
	}

	return validate;
};

/*
 *	전자결재 Validate
 */
this.fnElctrncPmntValidate = function() {
	var validate = true;

	if (this.gfnIsNull(this.ccfCORP.form.CDTextBox.text)) {
		this.gfnAlert("법인코드가 입력되지 않았습니다.");
		this.ccfCORP.form.CDTextBox.setFocus();
		validate = false;
	}
	
	if (this.gfnIsNull(this.gfnTrim(this.ccfDEPT.form.CDTextBox.value))) {
		this.gfnAlert("신청부서가 입력되지 않았습니다.");
		this.ccfDEPT.form.CDTextBox.setFocus();
		return;
	}

	if (this.gfnIsNull(this.ctclYM_REQ.form.TextBox.value)) {
		this.gfnAlert("청구년월이 입력되지 않았습니다.");
		this.ctclYM_REQ.form.TextBox.setFocus();
		validate = false;
	}

	return validate;
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	switch(svcID) {
	case "select" :
		this.gfnGridAfterSelect(this.dxGrid);
		break;
	case "save" :
		if (errorCode == 0) {
			//this.gfnAlert("생성되었습니다.");
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
		break;
	case "create" :
		if (errorCode == 0) {
			this.gfnAlert("전표가 발행 되었습니다.");
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
		break;

	case "cancel" :
		if (errorCode == 0) {
			this.gfnAlert("전표가 취소 되었습니다.");
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
		break;
	}	
	
			//발행된 전표가 있을경우 자료생성 버튼 비활성 처리
// 		if(this.dsList.rowcount > 0){
// 			if(this.dsList.findRowExpr("!dataset.parent.gfnIsNull(CD_SLIP) && nx_flag != '#'") == -1){
// 				this.gfnSetEnable(this.btnDataCreate, true);
// 			}else{
// 				this.gfnSetEnable(this.btnDataCreate, false);
// 			}
// 		}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	var cdCorp = this.dsSearch.getColumn(0, "CD_CORP");
	if (id == "ccfCORP") {
		dsUserParam.setColumn(nrow, "ID_SABUN", this.AuthClient.ID_USER);
	}

	if (id == "ccfDEPT") {	//현장
		if(this.gfnIsNull(cdCorp)){
			this.gfnAlert("법인코드를 선택하세요.");
			return false;
		}
		dsUserParam.setColumn(nrow, "CD_DEPT_UPPER"	, "");						//상위부서
		dsUserParam.setColumn(nrow, "YN_SLIPACCEPT"	, "Y");						//전표발행여부
		dsUserParam.setColumn(nrow, "CD_CORP"		, cdCorp);					//법인코드
		dsUserParam.setColumn(nrow, "YN_USE"		, "Y");						//사용여부
		dsUserParam.setColumn(nrow, "GR_DEPT_ACNT"	, "");						//현장/본사여부	
		dsUserParam.setColumn(nrow, "ID_USER"	    , this.AuthClient.ID_USER);
		dsUserParam.setColumn(nrow, "GR_SEARCH"     , this.FormInfo.GR_SEARCH);
		dsUserParam.setColumn(nrow, "CD_DEPT"	    , this.AuthClient.CD_DEPT);	


	// 		var cdCorp = this.ccfCORP.form.CDTextBox.text;
	// 		if(this.gfnIsNull(cdCorp)){
	// 			this.gfnAlert("법인코드를 먼저 선택하세요.");
	// 			return false;
	// 		}	
	// 		dsUserParam.setColumn(nrow, "TY_GUBUN"	, "01");			//구분
	// 		dsUserParam.setColumn(nrow, "CD_CORP"	, cdCorp);			//법인코드

	}
	return true;
}; 

this.fnAfterCDTextChanged = function(id, codeFindData) {

	switch(id) {
		case "ccfCORP":	//법인코드
			this.ccfDEPT.form.fnCodeFindClear();
		break;
	}
}

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
//그리드 코드파인드
this.fnGrid_BeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	var cdCorp = this.dsSearch.getColumn(0, "CD_CORP");

	if(id == "DHX_CFDEPT_02") {	
		dsUserParam.setColumn(nrow, "CD_DEPT", this.dsSearch.getColumn(0, "CD_CORP"));	//법인코드		
	}else if(id == "DHX_CFACNTUNIT") {
		if(this.gfnIsNull(cdCorp)){
			this.gfnAlert("법인코드를 선택하세요.");
			return false;
		}

		dsUserParam.setColumn(nrow, "CD_DEPT_UPPER"	, "");						//상위부서
		dsUserParam.setColumn(nrow, "YN_SLIPACCEPT"	, "Y");						//전표발행여부
		dsUserParam.setColumn(nrow, "CD_CORP"		, cdCorp);					//법인코드
		dsUserParam.setColumn(nrow, "YN_USE"		, "Y");						//사용여부
		dsUserParam.setColumn(nrow, "GR_DEPT_ACNT"	, "");						//현장/본사여부	
		//dsUserParam.setColumn(nrow, "ID_USER"	    , this.AuthClient.ID_USER);
		//dsUserParam.setColumn(nrow, "GR_SEARCH"     , this.FormInfo.GR_SEARCH);
		//dsUserParam.setColumn(nrow, "CD_DEPT"	    , this.AuthClient.CD_DEPT);	
	}else if(id == "DFX_CFACCOUNTMATCH") {	
		dsUserParam.setColumn(nrow, "TY_PAYMENT", "AA");
		dsUserParam.setColumn(nrow, "DS_GUBUN", "거래처");
		dsUserParam.setColumn(nrow, "CD_PAY", this.dsList.getColumn(this.dsList.rowposition, "CD_DEPT"));
		dsUserParam.setColumn(nrow, "TY_VENDOR", "J");
		dsUserParam.setColumn(nrow, "SEQ_EXEC", "");
		dsUserParam.setColumn(nrow, "TY_CASH", "현금");
		dsUserParam.setColumn(nrow, "CD_CORP", cdCorp);
	}
	return true;
}

/************************************************************************
 * 기타 이벤트
 ************************************************************************/
//전표발행
 this.fnStateIssue = function (obj:nexacro.Button,e:nexacro.ClickEventInfo)
 {
 	var nChkRow = this.dsList.getCaseCount( "CHK == '1'" );
	if (nChkRow <= 0){
		this.gfnAlert("체크된 항목이 없습니다.");
		return;
	}

	var CD_SLIP = this.gfnTrim(this.dsList.getColumn(this.dsList.rowposition, "CD_SLIP"));
	if (this.gfnIsNull(CD_SLIP) == false) {
 	//if (this.gfnIsNull(this.gfnTrim(this.dsList.rowposition, "CD_SLIP")== false)) {
 		this.gfnAlert("전표발행된 항목이 체크되어 있습니다."); 		
 		return;
 	}	
	this.gfnConfirm("전표 발행하시겠습니까?", "fndataCreate_callback");
};

//전표취소
 this.fnStateCancel = function (obj:nexacro.Button,e:nexacro.ClickEventInfo)
 {
 	var nChkRow = this.dsList.getCaseCount( "CHK == '1'" );
	if (nChkRow <= 0){
		this.gfnAlert("체크된 항목이 없습니다.");
		return;
	}
	
	var CD_SLIP = this.gfnTrim(this.dsList.getColumn(this.dsList.rowposition, "CD_SLIP"));
	if (this.gfnIsNull(CD_SLIP)) {
 	//if (this.gfnIsNull(this.gfnTrim(this.dsList.rowposition, "CD_SLIP"))) {
 		this.gfnAlert("전표발행되지않은 항목이 체크되어 있습니다.");
 		return;
 	}	
	this.gfnConfirm("전표 취소하시겠습니까?", "fndataCancel_callback");
};

 this.fndataCreate_callback = function(strId, val) {
 	if(val == true) {
	
		//var strNoSlipKey = this.dsList.getColumn(i, "NO_REQUEST").toString().trim();		
		//var strNoSlipKey = this.gfnTrim(this.dsList.getColumn(this.dsList.rowposition, "NO_REQUEST"));
		var strNoSlipKey = "";
		var sDelimiter = "";
		var nLoopcnt = 0;
		for(var r = 0; r < this.dsList.rowcount; r++) {
			if(this.dsList.getColumn(r, this.ucFlag) != '#' && this.dsList.getColumn(r, "CHK") == 1){
				sDelimiter = ( nLoopcnt == 0) ? "" : ";";
				strNoSlipKey += (sDelimiter + this.dsList.getColumn(r, "NO_REQUEST"));
				nLoopcnt++;
			}
		}	
		
		//처리할 데이터 담기

 		this.dsCreate.clearData();
 		var nRow = this.dsCreate.addRow();
		this.dsCreate.setColumn(nRow, "NO_SLIPKEY", strNoSlipKey);
		this.dsCreate.setColumn(nRow, "ID_USER", this.AuthClient.ID_USER);
		this.dsCreate.setColumn(nRow, "CD_DEPT", this.dsSearch.getColumn(0, "CD_DEPT"));
		this.dsCreate.setColumn(nRow, "CD_TRADE", "");
		this.dsCreate.setColumn(nRow, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
	
 		var strSvcId    = "create";
 		var strSvcType  = "save";
 		var inProc		= "_dsProc";
 		var inData      = "create=dsCreate";
 		var outData     = "";
 		var strArg      = "";
 		var callBackFnc = "fnCallback";
 		
 		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
 							strSvcType , 	// transaction을 요청할 구분
 							inProc,			// Procedure 정보 Dataset 이름
 							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
 							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
 							strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
 							callBackFnc); 	// 통신방법 정의 [생략가능]
 	}
 };

this.fndataCancel_callback = function(strId, val) 
{
	if(val == true) {
		var strNoSlipKey = "";
		var sDelimiter = "";
		var nLoopcnt = 0;
		for(var r = 0; r < this.dsList.rowcount; r++) {
			if(this.dsList.getColumn(r, this.ucFlag) != '#' && this.dsList.getColumn(r, "CHK") == 1){
				sDelimiter = ( nLoopcnt == 0) ? "" : ";";			
				strNoSlipKey += ( sDelimiter + this.dsList.getColumn(r, "CD_SLIP") );
				nLoopcnt++;
			}
		}

 		this.dsCancel.clearData();
 		var nRow = this.dsCancel.addRow();
		this.dsCancel.setColumn(nRow, "CD_SLIP", strNoSlipKey);
 		
 		var strSvcId    = "cancel";
 		var strSvcType  = "save";
 		var inProc		= "_dsProc";
 		var inData      = "cancel=dsCancel";
 		var outData     = "";
 		var strArg      = "";
 		var callBackFnc = "fnCallback";
 		
 		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
 							strSvcType , 	// transaction을 요청할 구분
 							inProc,			// Procedure 정보 Dataset 이름
 							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
 							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
 							strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
 							callBackFnc); 	// 통신방법 정의 [생략가능]
 	}
};
 
//전표 조회 
this.fnStateSearch = function (obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	if (this.gfnIsNull(this.gfnTrim(this.dsList.getColumn(this.dsList.rowposition, "CD_SLIP")))) {
		this.gfnAlert("전표번호는 필수입니다.");
		return;
	}
	
	var cdSlip = this.gfnTrim(this.dsList.getColumn(this.dsList.rowposition, "CD_SLIP"));
	var param = {};
	param.IUD_FLAG = "S";
	param.CD_TRADE = cdSlip;
	this.gfnFormOpen("DHA", "DHA_ISSUESLIP", "fnPopupCallBack", param, this.getOffsetWidth(), this.getOffsetHeight());
	
};


this.fnPopupCallBack = function(strId, val) {
	this.FormBtns.Select.click();
}

// 전표금 현황표 
this.fnJundoReq = function (obj:nexacro.Button,e:nexacro.ClickEventInfo){
	var param = {};
	param.CD_CORP = this.dsSearch.getColumn(0, "CD_CORP");
	param.DS_CORP = this.dsSearch.getColumn(0, "DS_CORP");	
	param.YM_ACCOUNT = this.dsSearch.getColumn(0, "YM_REQ");
	
	this.gfnFormOpen("DHA", "DHA_JUNDOREQ_EXEC", "fnPopupJundoReqCallBack", param);
};

this.fnPopupJundoReqCallBack = function(strId, val) {
	if(!this.gfnIsNull(val) && val) {
		var json = JSON.parse(val);		
		var val = json.DS_JUNDOREQ;
		this.dsJundoReqList.clearData();
		this.dsJundoReqList.loadCSV(val);

		for (var i = 0; i < this.dsJundoReqList.rowcount; i++) {
			var nNewRow = this.gfnGridAdd(this.dxGrid);
			this.dsList.set_enableevent(false);
			//var nNewRow = this.dsList.addRow();
			this.dsList.setColumn(nNewRow, "CD_ACCOUNT", "01");
			this.dsList.setColumn(nNewRow, "CD_DEPT", this.dsJundoReqList.getColumn(i, "CD_DEPTOFFICER"));
			this.dsList.setColumn(nNewRow, "DS_DEPT_ACNT", this.dsJundoReqList.getColumn(i, "DS_DEPTOFFICER"));
			this.dsList.setColumn(nNewRow, "DT_REQ", this.gfnGetDate());		// 청구일자
			this.dsList.setColumn(nNewRow, "DT_REQPAY", this.gfnGetDate());		// 지급요청일자
			this.dsList.setColumn(nNewRow, "AM_REQ", this.dsJundoReqList.getColumn(i, "AM_THISMON_PAY"));
			
			//trace("DS_DEPTOFFICER->" + this.dsJundoReqList.getColumn(i, "DS_DEPTOFFICER"));
			//trace("CD_DEPTOFFICER->" + this.dsJundoReqList.getColumn(i, "CD_DEPTOFFICER"));
			this.gfnSetFormStatus(this, "I");
			this.dsList.set_enableevent(true);	
		}	
	}
}



// 전자결재
this.fnElctrncPmnt = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {

	if( (this.dsList.rowcount == 1 && this.gfnNvl(this.dsList.getColumn(0, this.ucFlag),"#") == "#") || this.dsList.rowcount == 0){
		this.gfnAlert("조회후 작업하세요!");
		return;
	}
	
	if (!this.fnElctrncPmntValidate()) return false;

	var sYmReq = this.dsSearch.getColumn(0, "YM_REQ");
	var sYrReq = sYmReq.substr(0,4);
	var sMmReq = sYmReq.substr(4,2);

	var param = {};
	param.V1 = this.dsSearch.getColumn(0, "CD_CORP");
	param.V2 = this.dsSearch.getColumn(0, "CD_DEPT");
	param.V3 = this.dsSearch.getColumn(0, "YM_REQ");
	param.V4 = "";
	param.ID_AP = this.dsList.getColumn(this.dsList.rowposition, "NO_DOC");	// 전자결재문서번호
	param.DS_ETITLE = "■ " + sYrReq +"년 "+ sMmReq+"월 본사 전도금 지출현황 및 지급액";

	this.gfnFormOpen("DHA", "DHA_JUNDOREQ_APP", "fnAprvDialogCallback", param, 1200, 700);
}

 this.fnAprvDialogCallback = function(svcID, value) {
	// 리턴값
	//if(value){
		// 결재완료, 결재취소, 결재상신 후에는 재조회를 한다
		this.FormBtns.Select.click();
	//}
};

// //전표 조회 
// this.fnStateSearch = function (obj:nexacro.Button,e:nexacro.ClickEventInfo)
// {
// 	if (this.gfnIsNull(this.gfnTrim(this.txtCD_TRADE.value))) {
// 		this.gfnAlert("전표번호는 필수입니다.");
// 		this.txtCD_TRADE.setFocus();
// 		return;
// 	}
// 	
// 	var param = {};
// 	param.IUD_FLAG = "S";
// 	param.CD_TRADE = this.gfnTrim(this.txtCD_TRADE.value);
// 	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DHA_ISSUESLIP", "fnPopupCallBack", param, this.getOffsetWidth(), this.getOffsetHeight());
// 	
// };


// 	if (this.gfnIsNull(this.gfnTrim(this.ccfDEPT.form.CDTextBox.value))) {
// 		this.gfnAlert("현장은 필수입니다.");
// 		this.ccfDEPT.form.CDTextBox.setFocus();
// 		return;
// 	}
// 
// 	if(this.gfnIsNull(this.ctclYM_REQ.form.TextBox.value)){
// 		this.gfnAlert("작업년월은 필수입니다.");
// 		this.ctclYM_REQ.form.TextBox.setFocus();
// 		return;
// 	}
// 	
// 	this.gfnConfirm("생성 하시겠습니까?", "dataCreate_callback");
// 	
// };
// //검색조건 변경 이벤트
// this.dsSearch_Valuechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
// {	
// 	if(e.oldvalue != e.newvalue) {
// 		this.gfnSetFormStatus(this);	// 폼상태 초기화
// 		this.gfnGridClear(this.dxGrid);	
// 	}
// };
// 
]]></Script>
    <Objects>
      <Dataset id="dsList" oncolumnchanged="dsList_oncolumnchanged"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DHAPR_JUNDO_REQLIST_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">insert</Col>
            <Col id="SP">DHAPR_JUNDO_REQLIST_INSERT</Col>
          </Row>
          <Row>
            <Col id="TARGET">update</Col>
            <Col id="SP">DHAPR_JUNDO_REQLIST_UPDATE</Col>
          </Row>
          <Row>
            <Col id="TARGET">delete</Col>
            <Col id="SP">DHAPR_JUNDO_REQLIST_DELETE</Col>
          </Row>
          <Row>
            <Col id="TARGET">create</Col>
            <Col id="SP">DHAPR_JUNDO_REQLIST_AUTOSLIP_ISSUE</Col>
          </Row>
          <Row>
            <Col id="TARGET">cancel</Col>
            <Col id="SP">DHAPR_JUNDO_REQLIST_AUTOSLIP_CANCEL</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch">
        <ColumnInfo>
          <Column id="CD_CORP" type="STRING" size="256"/>
          <Column id="CD_DEPT" type="STRING" size="256"/>
          <Column id="YM_REQ" type="STRING" size="256"/>
          <Column id="DS_CORP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CD_CORP"/>
            <Col id="CD_DEPT"/>
            <Col id="YM_REQ"/>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsJundoReqList" oncolumnchanged="dsList_oncolumnchanged"/>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfCORP.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_CORP"/>
      <BindItem id="item1" compid="divSearch.form.ccfCORP.form.DSTextBox" propid="value" datasetid="dsSearch" columnid="DS_CORP"/>
      <BindItem id="item2" compid="divSearch.form.ccfDEPT.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_DEPT"/>
      <BindItem id="item3" compid="divSearch.form.ctclYM_REQ.form.TextBox" propid="value" datasetid="dsSearch" columnid="YM_REQ"/>
    </Bind>
  </Form>
</FDL>
