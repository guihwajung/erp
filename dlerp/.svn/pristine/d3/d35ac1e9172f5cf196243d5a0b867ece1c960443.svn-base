<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="form" width="1280" height="720" titletext="연말정산 이관" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0" top="0" height="46.0" right="0" cssclass="div_SEARCH_Bg">
          <Layouts>
            <Layout>
              <Static id="staCD_CORP" taborder="0" text="법인" left="0" top="10.0" width="66" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfCD_CORP" CDTextWidth="50" taborder="1" left="staCD_CORP:0.0" top="10.0" width="200" height="24.0" url="cmm::cmmCodeFind.xfdl" CodeFindName="DAX_CFCORP2" BeforeUserDataSetParam="fnBeforeUserDataSetParam" AfterCDTextChanged="fnAfterCDTextChanged"/>
              <Static id="staYY_BASE" taborder="5" text="귀속년도" left="ccfCD_CORP:0.0" top="10.0" width="95.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ctclYY_BASE" taborder="2" left="staYY_BASE:0.0" top="10.0" width="80" height="24.0" url="cmm::cmmCalYY.xfdl" enableevent="true"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0" oncellclick="divData_objGrid_oncellclick"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Objects>
      <Dataset id="dsList" onvaluechanged="dsList_onvaluechanged">
        <ColumnInfo>
          <Column id="YY_BASE" type="STRING" size="256"/>
          <Column id="MM_BASE" type="STRING" size="256"/>
          <Column id="DS_ORG2" type="STRING" size="256"/>
          <Column id="ID_SABUN" type="STRING" size="256"/>
          <Column id="DS_HNAME" type="STRING" size="256"/>
          <Column id="DS_POSITION" type="STRING" size="256"/>
          <Column id="ID_RESIDENT" type="STRING" size="256"/>
          <Column id="GUBUN" type="STRING" size="256"/>
          <Column id="DT_GROUPJOIN" type="STRING" size="256"/>
          <Column id="DT_RETIRE" type="STRING" size="256"/>
          <Column id="AM_CURTOTAL" type="BIGDECIMAL" size="256"/>
          <Column id="AM_PRE1PBSUM" type="BIGDECIMAL" size="256"/>
          <Column id="AM_PRE2PBSUM" type="BIGDECIMAL" size="256"/>
          <Column id="TAXATION" type="BIGDECIMAL" size="256"/>
          <Column id="AM_TOTALPAYBONUS" type="BIGDECIMAL" size="256"/>
          <Column id="AM_CURNTAXSUM" type="BIGDECIMAL" size="256"/>
          <Column id="AM_PRE1NTAXSUM" type="BIGDECIMAL" size="256"/>
          <Column id="AM_PRE2NTAXSUM" type="BIGDECIMAL" size="256"/>
          <Column id="NTAXATION" type="BIGDECIMAL" size="256"/>
          <Column id="SUM_NTAXSUM" type="BIGDECIMAL" size="256"/>
          <Column id="AM_LABORINCOME" type="BIGDECIMAL" size="256"/>
          <Column id="AM_LABORINCSUBST" type="BIGDECIMAL" size="256"/>
          <Column id="AM_NETLABORINCOME" type="BIGDECIMAL" size="256"/>
          <Column id="AM_SELF" type="BIGDECIMAL" size="256"/>
          <Column id="AM_WIFE" type="BIGDECIMAL" size="256"/>
          <Column id="AM_CHILDPARENT" type="BIGDECIMAL" size="256"/>
          <Column id="AM_OLD" type="BIGDECIMAL" size="256"/>
          <Column id="AM_HANDICAP" type="BIGDECIMAL" size="256"/>
          <Column id="AM_WOMAN" type="BIGDECIMAL" size="256"/>
          <Column id="AM_ONEPARENTS" type="BIGDECIMAL" size="256"/>
          <Column id="AM_ANNUITY" type="BIGDECIMAL" size="256"/>
          <Column id="AM_PUBLICPENSION" type="BIGDECIMAL" size="256"/>
          <Column id="AM_MILITARYPENSION" type="BIGDECIMAL" size="256"/>
          <Column id="AM_TEACHERSPENSION" type="BIGDECIMAL" size="256"/>
          <Column id="AM_POSTPENSION" type="BIGDECIMAL" size="256"/>
          <Column id="AM_HEALTHSUBST" type="BIGDECIMAL" size="256"/>
          <Column id="AM_HIRESUBST" type="BIGDECIMAL" size="256"/>
          <Column id="AM_HOUSESUM2" type="BIGDECIMAL" size="256"/>
          <Column id="AM_HOUSESUM7" type="BIGDECIMAL" size="256"/>
          <Column id="AM_HOUSESUM3" type="BIGDECIMAL" size="256"/>
          <Column id="AM_HOUSESUM29" type="BIGDECIMAL" size="256"/>
          <Column id="AM_HOUSESUM30" type="BIGDECIMAL" size="256"/>
          <Column id="AM_HOUSESUM12" type="BIGDECIMAL" size="256"/>
          <Column id="AM_HOUSESUM12_1" type="BIGDECIMAL" size="256"/>
          <Column id="AM_HOUSESUM2015_1" type="BIGDECIMAL" size="256"/>
          <Column id="AM_HOUSESUM2015_2" type="BIGDECIMAL" size="256"/>
          <Column id="AM_HOUSESUM2015_3" type="BIGDECIMAL" size="256"/>
          <Column id="AM_HOUSESUM2015_4" type="BIGDECIMAL" size="256"/>
          <Column id="AM_GIVESUBST" type="BIGDECIMAL" size="256"/>
          <Column id="AM_SPECIALSUBSTSUM" type="BIGDECIMAL" size="256"/>
          <Column id="AM_CHAGAMSODUK2" type="BIGDECIMAL" size="256"/>
          <Column id="AM_PENSIONSUBST1" type="BIGDECIMAL" size="256"/>
          <Column id="AM_SMALLBUSIDEU" type="BIGDECIMAL" size="256"/>
          <Column id="AM_HOUSESUM1_1" type="BIGDECIMAL" size="256"/>
          <Column id="AM_HOUSESUM1_2" type="BIGDECIMAL" size="256"/>
          <Column id="AM_HOUSESUM1_4" type="BIGDECIMAL" size="256"/>
          <Column id="AM_INVEST1" type="BIGDECIMAL" size="256"/>
          <Column id="AM_CARDSUBST" type="BIGDECIMAL" size="256"/>
          <Column id="AM_WOORISAJU" type="BIGDECIMAL" size="256"/>
          <Column id="AM_EMPDISABILITY" type="BIGDECIMAL" size="256"/>
          <Column id="AM_LONGHAPSTOCKSUBST" type="BIGDECIMAL" size="256"/>
          <Column id="AM_YOUNGINVEST" type="BIGDECIMAL" size="256"/>
          <Column id="AM_ETCSUBSTSUM" type="BIGDECIMAL" size="256"/>
          <Column id="AM_SPECIALlIMIT" type="BIGDECIMAL" size="256"/>
          <Column id="AM_STDTAX" type="BIGDECIMAL" size="256"/>
          <Column id="AM_CALCTAX" type="BIGDECIMAL" size="256"/>
          <Column id="AM_TAXLAWREDUCTION " type="BIGDECIMAL" size="256"/>
          <Column id="AM_RESTTAXTACT" type="BIGDECIMAL" size="256"/>
          <Column id="AM_RESTTAXTACT30" type="BIGDECIMAL" size="256"/>
          <Column id="AM_TAXREDUCTION" type="BIGDECIMAL" size="256"/>
          <Column id="AM_TAXREDSUM" type="BIGDECIMAL" size="256"/>
          <Column id="AM_LABORINCTAXSUBST" type="BIGDECIMAL" size="256"/>
          <Column id="NO_CHILDTAXCOUNT" type="BIGDECIMAL" size="256"/>
          <Column id="AM_CHILDTAXSUBST" type="BIGDECIMAL" size="256"/>
          <Column id="NO_BORNTAXCOUNT" type="BIGDECIMAL" size="256"/>
          <Column id="AM_BORNTAXSUBST" type="BIGDECIMAL" size="256"/>
          <Column id="AM_PENSTAXSUBST" type="BIGDECIMAL" size="256"/>
          <Column id="AM_PENRTAXSUBST" type="BIGDECIMAL" size="256"/>
          <Column id="AM_PENPTAXSUBST" type="BIGDECIMAL" size="256"/>
          <Column id="AM_ISAADD" type="BIGDECIMAL" size="256"/>
          <Column id="AM_INSURETAXSUBST" type="BIGDECIMAL" size="256"/>
          <Column id="AM_HANDITAXSUBST" type="BIGDECIMAL" size="256"/>
          <Column id="AM_MEDITAXSUBST" type="BIGDECIMAL" size="256"/>
          <Column id="AM_EDUTAXSUBST" type="BIGDECIMAL" size="256"/>
          <Column id="AM_GIVE20_1TAXSUBST" type="BIGDECIMAL" size="256"/>
          <Column id="AM_GIVE20_2TAXSUBST" type="BIGDECIMAL" size="256"/>
          <Column id="AM_GIVE42TAXSUBST" type="BIGDECIMAL" size="256"/>
          <Column id="AM_GIVE43TAXSUBST" type="BIGDECIMAL" size="256"/>
          <Column id="AM_GIVE10TAXSUBST" type="BIGDECIMAL" size="256"/>
          <Column id="AM_GIVEWOORISAJU" type="BIGDECIMAL" size="256"/>
          <Column id="AM_GIVE40TAXSUBST" type="BIGDECIMAL" size="256"/>
          <Column id="AM_GIVE41TAXSUBST" type="BIGDECIMAL" size="256"/>
          <Column id="AM_SPECIALTAXSUBSTSUM" type="BIGDECIMAL" size="256"/>
          <Column id="AM_STDTAXSUBST" type="BIGDECIMAL" size="256"/>
          <Column id="AM_TAXASSOCIATION" type="BIGDECIMAL" size="256"/>
          <Column id="AM_HOUSREFUNDSUBST" type="BIGDECIMAL" size="256"/>
          <Column id="AM_FOREIGNSUBST" type="BIGDECIMAL" size="256"/>
          <Column id="AM_MONTHTAXSUBST" type="BIGDECIMAL" size="256"/>
          <Column id="AM_TAXSUBSTSUM" type="BIGDECIMAL" size="256"/>
          <Column id="AM_FIXEDINCOMETAX" type="BIGDECIMAL" size="256"/>
          <Column id="AM_FIXEDRESIDENTTAX" type="BIGDECIMAL" size="256"/>
          <Column id="AM_FIXEDAGRTAX" type="BIGDECIMAL" size="256"/>
          <Column id="AM_PRE1INCTAXBEF" type="BIGDECIMAL" size="256"/>
          <Column id="AM_PRE1RESTAXBEF" type="BIGDECIMAL" size="256"/>
          <Column id="AM_PRE2INCTAXBEF" type="BIGDECIMAL" size="256"/>
          <Column id="AM_PRE2RESTAXBEF" type="BIGDECIMAL" size="256"/>
          <Column id="AM_PRE3INCTAXBEF" type="BIGDECIMAL" size="256"/>
          <Column id="AM_PRE3RESTAXBEF" type="BIGDECIMAL" size="256"/>
          <Column id="AM_INCTAXBEF" type="BIGDECIMAL" size="256"/>
          <Column id="AM_RESTAXBEF" type="BIGDECIMAL" size="256"/>
          <Column id="AM_SPECIALINCTAX" type="BIGDECIMAL" size="256"/>
          <Column id="AM_SPECIALRESTAX" type="BIGDECIMAL" size="256"/>
          <Column id="AM_DEDCOLLECTINCTAX" type="BIGDECIMAL" size="256"/>
          <Column id="AM_DEDCOLLECTRESTAX" type="BIGDECIMAL" size="256"/>
          <Column id="RT_TAXRDT2" type="BIGDECIMAL" size="256"/>
          <Column id="TY_TAXRDT2" type="BIGDECIMAL" size="256"/>
          <Column id="NM_FILE_LIST" type="STRING" size="256"/>
          <Column id="DS_FILE_NAME" type="STRING" size="256"/>
          <Column id="DS_VENDOR_PRE1" type="STRING" size="256"/>
          <Column id="NO_SJC_PRE1" type="STRING" size="256"/>
          <Column id="DS_TERM_PRE1" type="STRING" size="256"/>
          <Column id="DS_VENDOR_PRE2" type="STRING" size="256"/>
          <Column id="NO_SJC_PRE2" type="STRING" size="256"/>
          <Column id="DS_TERM_PRE2" type="STRING" size="256"/>
          <Column id="DS_VENDOR_PRE3" type="STRING" size="256"/>
          <Column id="NO_SJC_PRE3" type="STRING" size="256"/>
          <Column id="DS_TERM_PRE3" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DAVPR_YEAREND_TRAN_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">save</Col>
            <Col id="SP">DAVPR_YEAREND_TRAN_SAVE</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_CORP" type="STRING" size="256"/>
          <Column id="DS_CORP" type="STRING" size="256"/>
          <Column id="YY_BASE" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CD_CORP"/>
            <Col id="DS_CORP"/>
          </Row>
        </Rows>
      </Dataset>
    </Objects>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);
	this.gfnFormInfo(this);
	// ---------------------------//

	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();

	// 법인코드 및 법인명 기본세팅
	this.ccfCD_CORP.form.CDTextBox.set_value(this.AuthClient.CD_CORP);
    this.ccfCD_CORP.form.DSTextBox.set_value(this.AuthClient.DS_CORP);
	var beforeYear = this.gfnAddDate(this.gfnGetDate(), -365).substr(0,4);
	
	//trace(" beforeYear=>" +beforeYear );
	this.ctclYY_BASE.form.TextBox.set_value(beforeYear);	
	this.dsSearch.setColumn(0, "YY_BASE", beforeYear);
	
	//this.FormBtns.Select.click();

};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
	// Select, Add, Del, Save, Excel, Print
	// SubSelect, SubAdd, SubDel, SuubSave, SubExcel
	// this.FormBtns.Add.set_enable(false);
	// this.FormBtns.Del.set_enable(false);
	//this.FormBtns.Reset.set_enable(true);
};

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btnFormButton = this.gfnFormButtonAdd("ExcelUpload", "fnExcelUpload", "엑셀 업로드");
	this.btnFileUpload = this.gfnFormButtonAdd("btnFileUpload", "fnFileDirUpload");
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.ccfCD_CORP = this.divSearch.form.ccfCD_CORP; 			// 법인코드
	this.ctclYY_BASE = this.divSearch.form.ctclYY_BASE;   		// 귀속년도

	this.dxGrid = this.divData.form.objGrid;

	this.grSearch = this.FormInfo.GR_SEARCH;					// 권한
	this.cdGroup = this.AuthClient.CD_GROUP;					// 그룹코드
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {

	this.gfnGridInit(this.dxGrid, this.dsList, "DA", "DAV_YEAREND_TRAN");
	this.dxGrid.ExpandUp = "fnGrid_ExpandUp";

	//그리드 코드파인드
	this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforeUserDataSetParam";
	this.dxGrid.AfterCDTextChanged = "fnGrid_AfterCDTextChanged";
 	this.dxGrid.EnterCell = "fnGrid_EnterCell";

};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	// sp의 input 파라미터
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_CORP", "string");   //법인
	this.dsSelect.addColumn("YY_BASE", "string");  	//귀속년도
	//this.dsSelect.addColumn("YN_DELETE", "string"); //사용여부

	this.dsSave = new Dataset();
	this.dsSave.addColumn("TY_SAVE", "string");
	this.dsSave.addColumn("CD_CORP", "string");
	this.dsSave.addColumn("YY_BASE", "string");
	this.dsSave.addColumn("MM_BASE", "string");
	this.dsSave.addColumn("NO_APPLY", "int");
	this.dsSave.addColumn("YN_MID", "string");
	this.dsSave.addColumn("ID_SABUN", "string");
	this.dsSave.addColumn("DS_HNAME", "string");
	this.dsSave.addColumn("CD_DEPT", "string");
	this.dsSave.addColumn("ID_RESIDENT", "string");
	this.dsSave.addColumn("AM_CURTOTAL", "bigdecimal");
	this.dsSave.addColumn("AM_PRE1PBSUM", "bigdecimal");
	this.dsSave.addColumn("AM_PRE2PBSUM", "bigdecimal");
	this.dsSave.addColumn("TAXATION", "bigdecimal");
	this.dsSave.addColumn("AM_TOTALPAYBONUS", "bigdecimal");
	this.dsSave.addColumn("AM_CURNTAXSUM", "bigdecimal");
	this.dsSave.addColumn("AM_PRE1NTAXSUM", "bigdecimal");
	this.dsSave.addColumn("AM_PRE2NTAXSUM", "bigdecimal");
	this.dsSave.addColumn("NTAXATION", "bigdecimal");
	this.dsSave.addColumn("SUM_NTAXSUM", "bigdecimal");
	this.dsSave.addColumn("AM_LABORINCOME", "bigdecimal");
	this.dsSave.addColumn("AM_LABORINCSUBST", "bigdecimal");
	this.dsSave.addColumn("AM_NETLABORINCOME", "bigdecimal");
	this.dsSave.addColumn("AM_SELF", "bigdecimal");
	this.dsSave.addColumn("AM_WIFE", "bigdecimal");
	this.dsSave.addColumn("AM_CHILDPARENT", "bigdecimal");
	this.dsSave.addColumn("AM_OLD", "bigdecimal");
	this.dsSave.addColumn("AM_HANDICAP", "bigdecimal");
	this.dsSave.addColumn("AM_WOMAN", "bigdecimal");
	this.dsSave.addColumn("AM_ONEPARENTS", "bigdecimal");
	this.dsSave.addColumn("AM_ANNUITY", "bigdecimal");
	this.dsSave.addColumn("AM_PUBLICPENSION", "bigdecimal");
	this.dsSave.addColumn("AM_MILITARYPENSION", "bigdecimal");
	this.dsSave.addColumn("AM_TEACHERSPENSION", "bigdecimal");
	this.dsSave.addColumn("AM_POSTPENSION", "bigdecimal");
	this.dsSave.addColumn("AM_HEALTHSUBST", "bigdecimal");
	this.dsSave.addColumn("AM_HIRESUBST", "bigdecimal");
	this.dsSave.addColumn("AM_HOUSESUM2", "bigdecimal");
	this.dsSave.addColumn("AM_HOUSESUM7", "bigdecimal");
	this.dsSave.addColumn("AM_HOUSESUM3", "bigdecimal");
	this.dsSave.addColumn("AM_HOUSESUM29", "bigdecimal");
	this.dsSave.addColumn("AM_HOUSESUM30", "bigdecimal");
	this.dsSave.addColumn("AM_HOUSESUM12", "bigdecimal");
	this.dsSave.addColumn("AM_HOUSESUM12_1", "bigdecimal");
	this.dsSave.addColumn("AM_HOUSESUM2015_1", "bigdecimal");
	this.dsSave.addColumn("AM_HOUSESUM2015_2", "bigdecimal");
	this.dsSave.addColumn("AM_HOUSESUM2015_3", "bigdecimal");
	this.dsSave.addColumn("AM_HOUSESUM2015_4", "bigdecimal");
	this.dsSave.addColumn("AM_GIVESUBST", "bigdecimal");
	this.dsSave.addColumn("AM_SPECIALSUBSTSUM", "bigdecimal");
	this.dsSave.addColumn("AM_CHAGAMSODUK2", "bigdecimal");
	this.dsSave.addColumn("AM_PENSIONSUBST1", "bigdecimal");
	this.dsSave.addColumn("AM_SMALLBUSIDEU", "bigdecimal");
	this.dsSave.addColumn("AM_HOUSESUM1_1", "bigdecimal");
	this.dsSave.addColumn("AM_HOUSESUM1_2", "bigdecimal");
	this.dsSave.addColumn("AM_HOUSESUM1_4", "bigdecimal");
	this.dsSave.addColumn("AM_INVEST1", "bigdecimal");
	this.dsSave.addColumn("AM_CARDSUBST", "bigdecimal");
	this.dsSave.addColumn("AM_WOORISAJU", "bigdecimal");
	this.dsSave.addColumn("AM_EMPDISABILITY", "bigdecimal");
	this.dsSave.addColumn("AM_LONGHAPSTOCKSUBST", "bigdecimal");
	this.dsSave.addColumn("AM_YOUNGINVEST", "bigdecimal");
	this.dsSave.addColumn("AM_ETCSUBSTSUM", "bigdecimal");
	this.dsSave.addColumn("AM_SPECIALLIMIT", "bigdecimal");
	this.dsSave.addColumn("AM_STDTAX", "bigdecimal");
	this.dsSave.addColumn("AM_CALCTAX", "bigdecimal");
	this.dsSave.addColumn("AM_TAXLAWREDUCTION", "bigdecimal");
	this.dsSave.addColumn("AM_RESTTAXTACT", "bigdecimal");
	this.dsSave.addColumn("AM_RESTTAXTACT30", "bigdecimal");
	this.dsSave.addColumn("AM_TAXREDUCTION", "bigdecimal");
	this.dsSave.addColumn("AM_TAXREDSUM", "bigdecimal");
	this.dsSave.addColumn("AM_LABORINCTAXSUBST", "bigdecimal");
	this.dsSave.addColumn("NO_CHILDTAXCOUNT", "bigdecimal");
	this.dsSave.addColumn("AM_CHILDTAXSUBST", "bigdecimal");
	this.dsSave.addColumn("NO_BORNTAXCOUNT", "bigdecimal");
	this.dsSave.addColumn("AM_BORNTAXSUBST", "bigdecimal");
	this.dsSave.addColumn("AM_PENSTAXSUBST", "bigdecimal");
	this.dsSave.addColumn("AM_PENRTAXSUBST", "bigdecimal");
	this.dsSave.addColumn("AM_PENPTAXSUBST", "bigdecimal");
	this.dsSave.addColumn("AM_ISAADD", "bigdecimal");
	this.dsSave.addColumn("AM_INSURETAXSUBST", "bigdecimal");
	this.dsSave.addColumn("AM_HANDITAXSUBST", "bigdecimal");
	this.dsSave.addColumn("AM_MEDITAXSUBST", "bigdecimal");
	this.dsSave.addColumn("AM_EDUTAXSUBST", "bigdecimal");
	this.dsSave.addColumn("AM_GIVE20_1TAXSUBST", "bigdecimal");
	this.dsSave.addColumn("AM_GIVE20_2TAXSUBST", "bigdecimal");
	this.dsSave.addColumn("AM_GIVE42TAXSUBST", "bigdecimal");
	this.dsSave.addColumn("AM_GIVE43TAXSUBST", "bigdecimal");
	this.dsSave.addColumn("AM_GIVE10TAXSUBST", "bigdecimal");
	this.dsSave.addColumn("AM_GIVEWOORISAJU", "bigdecimal");
	this.dsSave.addColumn("AM_GIVE40TAXSUBST", "bigdecimal");
	this.dsSave.addColumn("AM_GIVE41TAXSUBST", "bigdecimal");
	this.dsSave.addColumn("AM_SPECIALTAXSUBSTSUM", "bigdecimal");
	this.dsSave.addColumn("AM_STDTAXSUBST", "bigdecimal");
	this.dsSave.addColumn("AM_TAXASSOCIATION", "bigdecimal");
	this.dsSave.addColumn("AM_HOUSREFUNDSUBST", "bigdecimal");
	this.dsSave.addColumn("AM_FOREIGNSUBST", "bigdecimal");
	this.dsSave.addColumn("AM_MONTHTAXSUBST", "bigdecimal");
	this.dsSave.addColumn("AM_TAXSUBSTSUM", "bigdecimal");
	this.dsSave.addColumn("AM_FIXEDINCOMETAX", "bigdecimal");
	this.dsSave.addColumn("AM_FIXEDRESIDENTTAX", "bigdecimal");
	this.dsSave.addColumn("AM_FIXEDAGRTAX", "bigdecimal");
	this.dsSave.addColumn("AM_PRE1INCTAXBEF", "bigdecimal");
	this.dsSave.addColumn("AM_PRE1RESTAXBEF", "bigdecimal");
	this.dsSave.addColumn("AM_PRE2INCTAXBEF", "bigdecimal");
	this.dsSave.addColumn("AM_PRE2RESTAXBEF", "bigdecimal");
	this.dsSave.addColumn("AM_PRE3INCTAXBEF", "bigdecimal");
	this.dsSave.addColumn("AM_PRE3RESTAXBEF", "bigdecimal");
	this.dsSave.addColumn("AM_INCTAXBEF", "bigdecimal");
	this.dsSave.addColumn("AM_RESTAXBEF", "bigdecimal");
	this.dsSave.addColumn("AM_SPECIALINCTAX", "bigdecimal");
	this.dsSave.addColumn("AM_SPECIALRESTAX", "bigdecimal");
	this.dsSave.addColumn("AM_DEDCOLLECTINCTAX", "bigdecimal");
	this.dsSave.addColumn("AM_DEDCOLLECTRESTAX", "bigdecimal");
	this.dsSave.addColumn("RT_TAXRDT2", "int");
	this.dsSave.addColumn("TY_TAXRDT2", "int");
	this.dsSave.addColumn("ID_INSERT", "string");
	this.dsSave.addColumn("DS_VENDOR_PRE1", "string");
	this.dsSave.addColumn("NO_SJC_PRE1", "string");
	this.dsSave.addColumn("DS_TERM_PRE1", "string");
	this.dsSave.addColumn("DS_VENDOR_PRE2", "string");
	this.dsSave.addColumn("NO_SJC_PRE2", "string");
	this.dsSave.addColumn("DS_TERM_PRE2", "string");
	this.dsSave.addColumn("DS_VENDOR_PRE3", "string");
	this.dsSave.addColumn("NO_SJC_PRE3", "string");
	this.dsSave.addColumn("DS_TERM_PRE3", "string");
};

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {

	if (!this.fnSelectValidate()) return false;

	this.gfnGridBeforeSelect(this.dxGrid);

	this.dsSelect.clearData();
	this.dsSelect.addRow();
	
	//trace("YY_BASE =>" + this.dsSearch.getColumn(0, "YY_BASE"));

	this.dsSelect.setColumn(0, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
	this.dsSelect.setColumn(0, "YY_BASE", this.dsSearch.getColumn(0, "YY_BASE"));

	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";

	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// trabsaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 	    // 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); 	// 통신방법 정의 [생략가능]
};

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	//this.gfnGridAdd(this.dxGrid);
	var nrow = this.gfnGridAdd(this.dxGrid,"Top");
	this.dsList.setColumn(nrow, "CD_CORP"   , this.dsSearch.getColumn(0, "CD_CORP"));
	this.dsList.setColumn(nrow, "DS_CORP"   , this.dsSearch.getColumn(0, "DS_CORP"));
};

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
};

/*
 *	저장 버튼
 */
this.fnSave = function() {
	// 그리드 필수항목 체크
	if (!this.gfnGridValidate(this.dxGrid)) return;

	this.dxGrid.updateToDataset();

	this.dsSave.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "I":
			case "U":
			case "D":
				var nrow = this.dsSave.addRow();				
				this.dsSave.setColumn(nrow, "TY_SAVE", flag);
				this.dsSave.setColumn(nrow, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
				this.dsSave.setColumn(nrow, "YY_BASE", this.dsList.getColumn(i, "YY_BASE"));
				this.dsSave.setColumn(nrow, "MM_BASE", this.dsList.getColumn(i, "MM_BASE"));
				this.dsSave.setColumn(nrow, "NO_APPLY", this.dsList.getColumn(i, "NO_APPLY"));
				this.dsSave.setColumn(nrow, "YN_MID", this.dsList.getColumn(i, "YN_MID"));
				this.dsSave.setColumn(nrow, "ID_SABUN", this.dsList.getColumn(i, "ID_SABUN"));
				this.dsSave.setColumn(nrow, "DS_HNAME", this.dsList.getColumn(i, "DS_HNAME"));
				this.dsSave.setColumn(nrow, "CD_DEPT", this.dsList.getColumn(i, "CD_DEPT"));
				this.dsSave.setColumn(nrow, "ID_RESIDENT", this.dsList.getColumn(i, "ID_RESIDENT"));
				this.dsSave.setColumn(nrow, "AM_CURTOTAL", this.dsList.getColumn(i, "AM_CURTOTAL"));
				this.dsSave.setColumn(nrow, "AM_PRE1PBSUM", this.dsList.getColumn(i, "AM_PRE1PBSUM"));
				this.dsSave.setColumn(nrow, "AM_PRE2PBSUM", this.dsList.getColumn(i, "AM_PRE2PBSUM"));
				this.dsSave.setColumn(nrow, "TAXATION", this.dsList.getColumn(i, "TAXATION"));
				this.dsSave.setColumn(nrow, "AM_TOTALPAYBONUS", this.dsList.getColumn(i, "AM_TOTALPAYBONUS"));
				this.dsSave.setColumn(nrow, "AM_CURNTAXSUM", this.dsList.getColumn(i, "AM_CURNTAXSUM"));
				this.dsSave.setColumn(nrow, "AM_PRE1NTAXSUM", this.dsList.getColumn(i, "AM_PRE1NTAXSUM"));
				this.dsSave.setColumn(nrow, "AM_PRE2NTAXSUM", this.dsList.getColumn(i, "AM_PRE2NTAXSUM"));
				this.dsSave.setColumn(nrow, "NTAXATION", this.dsList.getColumn(i, "NTAXATION"));
				this.dsSave.setColumn(nrow, "SUM_NTAXSUM", this.dsList.getColumn(i, "SUM_NTAXSUM"));
				this.dsSave.setColumn(nrow, "AM_LABORINCOME", this.dsList.getColumn(i, "AM_LABORINCOME"));
				this.dsSave.setColumn(nrow, "AM_LABORINCSUBST", this.dsList.getColumn(i, "AM_LABORINCSUBST"));
				this.dsSave.setColumn(nrow, "AM_NETLABORINCOME", this.dsList.getColumn(i, "AM_NETLABORINCOME"));
				this.dsSave.setColumn(nrow, "AM_SELF", this.dsList.getColumn(i, "AM_SELF"));
				this.dsSave.setColumn(nrow, "AM_WIFE", this.dsList.getColumn(i, "AM_WIFE"));
				this.dsSave.setColumn(nrow, "AM_CHILDPARENT", this.dsList.getColumn(i, "AM_CHILDPARENT"));
				this.dsSave.setColumn(nrow, "AM_OLD", this.dsList.getColumn(i, "AM_OLD"));
				this.dsSave.setColumn(nrow, "AM_HANDICAP", this.dsList.getColumn(i, "AM_HANDICAP"));
				this.dsSave.setColumn(nrow, "AM_WOMAN", this.dsList.getColumn(i, "AM_WOMAN"));
				this.dsSave.setColumn(nrow, "AM_ONEPARENTS", this.dsList.getColumn(i, "AM_ONEPARENTS"));
				this.dsSave.setColumn(nrow, "AM_ANNUITY", this.dsList.getColumn(i, "AM_ANNUITY"));
				this.dsSave.setColumn(nrow, "AM_PUBLICPENSION", this.dsList.getColumn(i, "AM_PUBLICPENSION"));
				this.dsSave.setColumn(nrow, "AM_MILITARYPENSION", this.dsList.getColumn(i, "AM_MILITARYPENSION"));
				this.dsSave.setColumn(nrow, "AM_TEACHERSPENSION", this.dsList.getColumn(i, "AM_TEACHERSPENSION"));
				this.dsSave.setColumn(nrow, "AM_POSTPENSION", this.dsList.getColumn(i, "AM_POSTPENSION"));
				this.dsSave.setColumn(nrow, "AM_HEALTHSUBST", this.dsList.getColumn(i, "AM_HEALTHSUBST"));
				this.dsSave.setColumn(nrow, "AM_HIRESUBST", this.dsList.getColumn(i, "AM_HIRESUBST"));
				this.dsSave.setColumn(nrow, "AM_HOUSESUM2", this.dsList.getColumn(i, "AM_HOUSESUM2"));
				this.dsSave.setColumn(nrow, "AM_HOUSESUM7", this.dsList.getColumn(i, "AM_HOUSESUM7"));
				this.dsSave.setColumn(nrow, "AM_HOUSESUM3", this.dsList.getColumn(i, "AM_HOUSESUM3"));
				this.dsSave.setColumn(nrow, "AM_HOUSESUM29", this.dsList.getColumn(i, "AM_HOUSESUM29"));
				this.dsSave.setColumn(nrow, "AM_HOUSESUM30", this.dsList.getColumn(i, "AM_HOUSESUM30"));
				this.dsSave.setColumn(nrow, "AM_HOUSESUM12", this.dsList.getColumn(i, "AM_HOUSESUM12"));
				this.dsSave.setColumn(nrow, "AM_HOUSESUM12_1", this.dsList.getColumn(i, "AM_HOUSESUM12_1"));
				this.dsSave.setColumn(nrow, "AM_HOUSESUM2015_1", this.dsList.getColumn(i, "AM_HOUSESUM2015_1"));
				this.dsSave.setColumn(nrow, "AM_HOUSESUM2015_2", this.dsList.getColumn(i, "AM_HOUSESUM2015_2"));
				this.dsSave.setColumn(nrow, "AM_HOUSESUM2015_3", this.dsList.getColumn(i, "AM_HOUSESUM2015_3"));
				this.dsSave.setColumn(nrow, "AM_HOUSESUM2015_4", this.dsList.getColumn(i, "AM_HOUSESUM2015_4"));
				this.dsSave.setColumn(nrow, "AM_GIVESUBST", this.dsList.getColumn(i, "AM_GIVESUBST"));
				this.dsSave.setColumn(nrow, "AM_SPECIALSUBSTSUM", this.dsList.getColumn(i, "AM_SPECIALSUBSTSUM"));
				this.dsSave.setColumn(nrow, "AM_CHAGAMSODUK2", this.dsList.getColumn(i, "AM_CHAGAMSODUK2"));
				this.dsSave.setColumn(nrow, "AM_PENSIONSUBST1", this.dsList.getColumn(i, "AM_PENSIONSUBST1"));
				this.dsSave.setColumn(nrow, "AM_SMALLBUSIDEU", this.dsList.getColumn(i, "AM_SMALLBUSIDEU"));
				this.dsSave.setColumn(nrow, "AM_HOUSESUM1_1", this.dsList.getColumn(i, "AM_HOUSESUM1_1"));
				this.dsSave.setColumn(nrow, "AM_HOUSESUM1_2", this.dsList.getColumn(i, "AM_HOUSESUM1_2"));
				this.dsSave.setColumn(nrow, "AM_HOUSESUM1_4", this.dsList.getColumn(i, "AM_HOUSESUM1_4"));
				this.dsSave.setColumn(nrow, "AM_INVEST1", this.dsList.getColumn(i, "AM_INVEST1"));
				this.dsSave.setColumn(nrow, "AM_CARDSUBST", this.dsList.getColumn(i, "AM_CARDSUBST"));
				this.dsSave.setColumn(nrow, "AM_WOORISAJU", this.dsList.getColumn(i, "AM_WOORISAJU"));
				this.dsSave.setColumn(nrow, "AM_EMPDISABILITY", this.dsList.getColumn(i, "AM_EMPDISABILITY"));
				this.dsSave.setColumn(nrow, "AM_LONGHAPSTOCKSUBST", this.dsList.getColumn(i, "AM_LONGHAPSTOCKSUBST"));
				this.dsSave.setColumn(nrow, "AM_YOUNGINVEST", this.dsList.getColumn(i, "AM_YOUNGINVEST"));
				this.dsSave.setColumn(nrow, "AM_ETCSUBSTSUM", this.dsList.getColumn(i, "AM_ETCSUBSTSUM"));
				this.dsSave.setColumn(nrow, "AM_SPECIALLIMIT", this.dsList.getColumn(i, "AM_SPECIALLIMIT"));
				this.dsSave.setColumn(nrow, "AM_STDTAX", this.dsList.getColumn(i, "AM_STDTAX"));
				this.dsSave.setColumn(nrow, "AM_CALCTAX", this.dsList.getColumn(i, "AM_CALCTAX"));
				this.dsSave.setColumn(nrow, "AM_TAXLAWREDUCTION", this.dsList.getColumn(i, "AM_TAXLAWREDUCTION"));
				this.dsSave.setColumn(nrow, "AM_RESTTAXTACT", this.dsList.getColumn(i, "AM_RESTTAXTACT"));
				this.dsSave.setColumn(nrow, "AM_RESTTAXTACT30", this.dsList.getColumn(i, "AM_RESTTAXTACT30"));
				this.dsSave.setColumn(nrow, "AM_TAXREDUCTION", this.dsList.getColumn(i, "AM_TAXREDUCTION"));
				this.dsSave.setColumn(nrow, "AM_TAXREDSUM", this.dsList.getColumn(i, "AM_TAXREDSUM"));
				this.dsSave.setColumn(nrow, "AM_LABORINCTAXSUBST", this.dsList.getColumn(i, "AM_LABORINCTAXSUBST"));
				this.dsSave.setColumn(nrow, "NO_CHILDTAXCOUNT", this.dsList.getColumn(i, "NO_CHILDTAXCOUNT"));
				this.dsSave.setColumn(nrow, "AM_CHILDTAXSUBST", this.dsList.getColumn(i, "AM_CHILDTAXSUBST"));
				this.dsSave.setColumn(nrow, "NO_BORNTAXCOUNT", this.dsList.getColumn(i, "NO_BORNTAXCOUNT"));
				this.dsSave.setColumn(nrow, "AM_BORNTAXSUBST", this.dsList.getColumn(i, "AM_BORNTAXSUBST"));
				this.dsSave.setColumn(nrow, "AM_PENSTAXSUBST", this.dsList.getColumn(i, "AM_PENSTAXSUBST"));
				this.dsSave.setColumn(nrow, "AM_PENRTAXSUBST", this.dsList.getColumn(i, "AM_PENRTAXSUBST"));
				this.dsSave.setColumn(nrow, "AM_PENPTAXSUBST", this.dsList.getColumn(i, "AM_PENPTAXSUBST"));
				this.dsSave.setColumn(nrow, "AM_ISAADD", this.dsList.getColumn(i, "AM_ISAADD"));
				this.dsSave.setColumn(nrow, "AM_INSURETAXSUBST", this.dsList.getColumn(i, "AM_INSURETAXSUBST"));
				this.dsSave.setColumn(nrow, "AM_HANDITAXSUBST", this.dsList.getColumn(i, "AM_HANDITAXSUBST"));
				this.dsSave.setColumn(nrow, "AM_MEDITAXSUBST", this.dsList.getColumn(i, "AM_MEDITAXSUBST"));
				this.dsSave.setColumn(nrow, "AM_EDUTAXSUBST", this.dsList.getColumn(i, "AM_EDUTAXSUBST"));
				this.dsSave.setColumn(nrow, "AM_GIVE20_1TAXSUBST", this.dsList.getColumn(i, "AM_GIVE20_1TAXSUBST"));
				this.dsSave.setColumn(nrow, "AM_GIVE20_2TAXSUBST", this.dsList.getColumn(i, "AM_GIVE20_2TAXSUBST"));
				this.dsSave.setColumn(nrow, "AM_GIVE42TAXSUBST", this.dsList.getColumn(i, "AM_GIVE42TAXSUBST"));
				this.dsSave.setColumn(nrow, "AM_GIVE43TAXSUBST", this.dsList.getColumn(i, "AM_GIVE43TAXSUBST"));
				this.dsSave.setColumn(nrow, "AM_GIVE10TAXSUBST", this.dsList.getColumn(i, "AM_GIVE10TAXSUBST"));
				this.dsSave.setColumn(nrow, "AM_GIVEWOORISAJU", this.dsList.getColumn(i, "AM_GIVEWOORISAJU"));
				this.dsSave.setColumn(nrow, "AM_GIVE40TAXSUBST", this.dsList.getColumn(i, "AM_GIVE40TAXSUBST"));
				this.dsSave.setColumn(nrow, "AM_GIVE41TAXSUBST", this.dsList.getColumn(i, "AM_GIVE41TAXSUBST"));
				this.dsSave.setColumn(nrow, "AM_SPECIALTAXSUBSTSUM", this.dsList.getColumn(i, "AM_SPECIALTAXSUBSTSUM"));
				this.dsSave.setColumn(nrow, "AM_STDTAXSUBST", this.dsList.getColumn(i, "AM_STDTAXSUBST"));
				this.dsSave.setColumn(nrow, "AM_TAXASSOCIATION", this.dsList.getColumn(i, "AM_TAXASSOCIATION"));
				this.dsSave.setColumn(nrow, "AM_HOUSREFUNDSUBST", this.dsList.getColumn(i, "AM_HOUSREFUNDSUBST"));
				this.dsSave.setColumn(nrow, "AM_FOREIGNSUBST", this.dsList.getColumn(i, "AM_FOREIGNSUBST"));
				this.dsSave.setColumn(nrow, "AM_MONTHTAXSUBST", this.dsList.getColumn(i, "AM_MONTHTAXSUBST"));
				this.dsSave.setColumn(nrow, "AM_TAXSUBSTSUM", this.dsList.getColumn(i, "AM_TAXSUBSTSUM"));
				this.dsSave.setColumn(nrow, "AM_FIXEDINCOMETAX", this.dsList.getColumn(i, "AM_FIXEDINCOMETAX"));
				this.dsSave.setColumn(nrow, "AM_FIXEDRESIDENTTAX", this.dsList.getColumn(i, "AM_FIXEDRESIDENTTAX"));
				this.dsSave.setColumn(nrow, "AM_FIXEDAGRTAX", this.dsList.getColumn(i, "AM_FIXEDAGRTAX"));
				this.dsSave.setColumn(nrow, "AM_PRE1INCTAXBEF", this.dsList.getColumn(i, "AM_PRE1INCTAXBEF"));
				this.dsSave.setColumn(nrow, "AM_PRE1RESTAXBEF", this.dsList.getColumn(i, "AM_PRE1RESTAXBEF"));
				this.dsSave.setColumn(nrow, "AM_PRE2INCTAXBEF", this.dsList.getColumn(i, "AM_PRE2INCTAXBEF"));
				this.dsSave.setColumn(nrow, "AM_PRE2RESTAXBEF", this.dsList.getColumn(i, "AM_PRE2RESTAXBEF"));
				this.dsSave.setColumn(nrow, "AM_PRE3INCTAXBEF", this.dsList.getColumn(i, "AM_PRE3INCTAXBEF"));
				this.dsSave.setColumn(nrow, "AM_PRE3RESTAXBEF", this.dsList.getColumn(i, "AM_PRE3RESTAXBEF"));
				this.dsSave.setColumn(nrow, "AM_INCTAXBEF", this.dsList.getColumn(i, "AM_INCTAXBEF"));
				this.dsSave.setColumn(nrow, "AM_RESTAXBEF", this.dsList.getColumn(i, "AM_RESTAXBEF"));
				this.dsSave.setColumn(nrow, "AM_SPECIALINCTAX", this.dsList.getColumn(i, "AM_SPECIALINCTAX"));
				this.dsSave.setColumn(nrow, "AM_SPECIALRESTAX", this.dsList.getColumn(i, "AM_SPECIALRESTAX"));
				this.dsSave.setColumn(nrow, "AM_DEDCOLLECTINCTAX", this.dsList.getColumn(i, "AM_DEDCOLLECTINCTAX"));
				this.dsSave.setColumn(nrow, "AM_DEDCOLLECTRESTAX", this.dsList.getColumn(i, "AM_DEDCOLLECTRESTAX"));
				this.dsSave.setColumn(nrow, "RT_TAXRDT2", this.dsList.getColumn(i, "RT_TAXRDT2"));
				this.dsSave.setColumn(nrow, "TY_TAXRDT2", this.dsList.getColumn(i, "TY_TAXRDT2"));
				this.dsSave.setColumn(nrow, "ID_INSERT", this.AuthClient.ID_USER);
				this.dsSave.setColumn(nrow, "DS_VENDOR_PRE1", this.dsList.getColumn(i, "DS_VENDOR_PRE1"));
				this.dsSave.setColumn(nrow, "NO_SJC_PRE1", this.dsList.getColumn(i, "NO_SJC_PRE1"));
				this.dsSave.setColumn(nrow, "DS_TERM_PRE1", this.dsList.getColumn(i, "DS_TERM_PRE1"));
				this.dsSave.setColumn(nrow, "DS_VENDOR_PRE2", this.dsList.getColumn(i, "DS_VENDOR_PRE2"));
				this.dsSave.setColumn(nrow, "NO_SJC_PRE2", this.dsList.getColumn(i, "NO_SJC_PRE2"));
				this.dsSave.setColumn(nrow, "DS_TERM_PRE2", this.dsList.getColumn(i, "DS_TERM_PRE2"));
				this.dsSave.setColumn(nrow, "DS_VENDOR_PRE3", this.dsList.getColumn(i, "DS_VENDOR_PRE3"));
				this.dsSave.setColumn(nrow, "NO_SJC_PRE3", this.dsList.getColumn(i, "NO_SJC_PRE3"));
				this.dsSave.setColumn(nrow, "DS_TERM_PRE3", this.dsList.getColumn(i, "DS_TERM_PRE3"));
				break;		
		}
	}

	if (this.dsSave.rowcount == 0) return;

	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "save=dsSave";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";

	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); 	// 통신방법 정의 [생략가능]
};

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
};

/*
 *	출력 버튼
 */
this.fnPrint = function() {
};

/*
 *	Reset 버튼
 */
this.fnReset = function() {

	this.ccfCD_CORP.form.CDTextBox.set_value("");
	this.ccfCD_CORP.form.DSTextBox.set_value("");
	
	this.divSearch.form.calFrStartSure.set_value("");
	this.divSearch.form.calToStartSure.set_value("");
	
	this.fnSearchInit();
};
/************************************************************************
 * Validate
 ************************************************************************/
this.fnSelectValidate = function() {

 	if (this.gfnIsNull(this.ccfCD_CORP.form.CDTextBox.value)) {
 		this.fnVaidateCallback = function() {
 			this.ccfCD_CORP.form.CDTextBox.setFocus();
 		}
 		this.gfnAlert("법인코드를 입력하세요.", "fnVaidateCallback");
 		return false;
 	}
	
	//적용년도
	if (this.gfnIsNull(this.ctclYY_BASE.form.TextBox.value)) {
		this.fnVaidateCallback = function() {
			this.ctclYY_BASE.form.TextBox.setFocus();
		}
		this.gfnAlert("귀속년도를 입력하세요.");
		return false;
	}

	return true;
};
/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);
		this.fnSetButton();
	}
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
};

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {

 	switch(id) {
	case "ccfCD_CORP": // 법인코드
		dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
		dsUserParam.setColumn(nrow, "CD_DEPT", this.AuthClient.CD_DEPT);
 		break;

 	default:
 	}
 	return true;
};

this.fnAfterCDTextChanged = function(id, codeFindData) {
	this.fnSearchInit();
};
//그리드 코드 파인드
this.fnGrid_BeforeUserDataSetParam = function(id, dsUserParam, nrow){

	switch(id) {
		case "DAX_CFCORP2":
			dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
			dsUserParam.setColumn(nrow, "CD_DEPT", this.AuthClient.CD_DEPT);
			break;
		case "DAX_CFBASEINFO_ALL":
			dsUserParam.setColumn(nrow, "CD_CORP", this.AuthClient.CD_CORP);
			dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
			dsUserParam.setColumn(nrow, "CD_DEPT", "%");
			dsUserParam.setColumn(nrow, "YN_CORP", "Y");
			dsUserParam.setColumn(nrow, "TY_RETIRE", "%");	// 재직구분
			break;

		default:
	}

	return true;
};

this.fnGrid_AfterCDTextChanged = function(id, codeFindData) {

	//그리드 Rowposition - 정창우
	var arr = codeFindData;

	switch(id) {
		case "DAX_CFCORP2":
			this.dsList.setColumn(this.dsList.rowposition, "CD_DEPT", "");
			this.dsList.setColumn(this.dsList.rowposition, "DS_DEPT", "");
			this.dsList.setColumn(this.dsList.rowposition, "ID_SABUN", "");
			this.dsList.setColumn(this.dsList.rowposition, "DS_HNAME", "");
			break;
		case "DAX_CFBASEINFO_ALL":
 			this.dsList.setColumn(this.dsList.rowposition, "CD_CORP", arr[0]["CD_CORP"]);
 			this.dsList.setColumn(this.dsList.rowposition, "DS_CORP", arr[0]["DS_CORP"]);
			break;
		default:
	}

};


this.fnGrid_EnterCell = function(obj:nexacro.Grid, row, cell) {

	var colnm = this.gfnGridGetBindColumnNameByIndex(obj, cell); 
	var objDs = obj.getBindDataset();
	var flag = this.gfnGetFlag(this.dsList, row);
	
};

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
//첨부파일 팝업
this.fnGrid_ExpandUp = function(obj:nexacro.Grid, e:nexacro.GridMouseEventInfo){
 	var colnm = this.gfnGridGetBindColumnNameByIndex(obj, e.cell);
	if(colnm == "DS_FILE_NAME") {
		// 최초 작성시엔 NO_SEQ가 없기 때문에 저장 후에 파일 첨부를 진행하여야 함.
		// CD_DIR에 넣어줄 값이 없기에 저장 후 진행!
// 		if(this.gfnGetFlag(dataset, e.row) == "I"){
// 			this.gfnAlert("저장 후 파일첨부 진행.");
// 			return false;
// 		}
	
		var fileManager = {};
		fileManager.CD_GUBUN = "DA20";
		fileManager.CD_DIR = [this.dsSearch.getColumn(0, "CD_CORP"), this.dsList.getColumn(e.row, "YY_BASE"), this.dsList.getColumn(e.row, "ID_SABUN")];	
		// 권한설정
		if (this.FormInfo.GR_SEARCH == "1") {
			fileManager.IS_READONLY = false;
		} else {
			fileManager.IS_READONLY = true;
		}
		this.gfnFileManager(fileManager, "fnFileCallback");
	}
}		
 /************************************************************************
 * 확장버튼 이벤트
 ************************************************************************/

/************************************************************************
 * 기타 이벤트
 ************************************************************************/
/*
 *	조회 조건 변경시 초기화
 */
this.fnSearchInit = function(obj,e) {
	if(e == null || (e.pretext != e.posttext)) {
		// 폼상태 초기화
		this.gfnSetFormStatus(this);
		this.gfnGridClear(this.dxGrid);
	}
};

this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
	}
};

/*
 *	엑셀업로드
 */
this.fnExcelUpload = function() {
	// this.gfnExcelImport("적용할Dataset명","sheet명","데이터시작좌표","콜백함수명","구분ID",현재폼);
	// sheet명 없으면 첫번째 sheet
	this.dsList.clearData();	
	this.gfnGridClear(this.dxGrid);	
	this.gfnExcelImport("dsList","Sheet1","A2","fnExcelImportCallback","import",this);
};

this.fnExcelImportCallback = function(sImportId, dsOut, dsSheet) {
   // 다중 시트 처리시 양식의 해당 시트여부를 체크하고자 할땐 dsSheet 시트명 체크
//    if (dsSheet.rowcount > 1) {
//       trace(dsSheet.getColumn(1, "sheetname"));
//    }

   // 엑셀 양식과 그리드 컬럼이 그대로 일치 하는경우 아래와 같이 처리.
   // 아닌경우는 이부분 주석처리
//    for (var i=0; i< this.dsList.getColCount(); i++)
//    {
//       sColumnId = "Column"+i;
//       var sColumnNm = this.gfnGridGetBindColumnNameByIndex(this.dxGrid, i);
//       if (sColumnNm != "" && sColumnId != sColumnNm)
//       {
//          dsOut.updateColID(sColumnId, sColumnNm);
//       }
//    }

	// 양식이 일치하고 엑셀내역을 기존데이터에 Insert하지 않고
	// 엑셀내역 그대로 그리드 반영할 시 copyData
	//this.dsList.copyData(dsOut);

	//Import 된 사번 검증하기 위해
	//this.dsList.set_enableevent(false);	
	
	//var cd_corp = this.ccfCD_CORP.form.CDTextBox.value;
	var cd_corp = this.dsSearch.getColumn(0, "CD_CORP");
	var ds_corp = this.dsSearch.getColumn(0, "DS_CORP");
	
	for (var i=0; i<dsOut.rowcount; i++) {
		var nrow = this.dsList.addRow();
		this.dsList.setColumn(nrow, this.ucFlag, "I");

// 		for (var j=0; j< dsOut.colcount; j++) {
// 			if (!this.gfnIsNull(dsOut.getColumn(i,j)) ){
// 				dsOut.setColumn(i,j,nexacro.trim(dsOut.getColumn(i,j)));
// 				var strColID = dsOut.getColID( j );
// 				//날짜 형식 수정
// 				if ( strColID == "Column10" || strColID == "Column11"){
// 					dsOut.setColumn(i,j,dsOut.getColumn(i,j).replace(/[^0-9]/g,''));
// 				}
// 			}
// 		}
		// 양식이 일치하는 경우 copyRow
		//this.dsList.copyRow(nrow, dsOut, i);

		// 조회 조건에 있는 법인명으로 셋팅....			
		// 양식과 일치하지 않는 경우 아래와 같이 컬럼별로 처리.
	   
		this.dsList.setColumn(nrow, "YY_BASE", dsOut.getColumn(i, "Column6").substr(0,4));
		this.dsList.setColumn(nrow, "MM_BASE", dsOut.getColumn(i, "Column6").substr(5,2));
		this.dsList.setColumn(nrow, "ID_SABUN", dsOut.getColumn(i, "Column7"));
		this.dsList.setColumn(nrow, "DS_HNAME", dsOut.getColumn(i, "Column8"));
		this.dsList.setColumn(nrow, "DS_ORG2", dsOut.getColumn(i, "Column3"));
		this.dsList.setColumn(nrow, "ID_RESIDENT", dsOut.getColumn(i, "Column9").replace(/[^0-9]/g,''));
//		this.dsList.setColumn(nrow, "GUBUN", dsOut.getColumn(i, "Column10"));
//		this.dsList.setColumn(nrow, "DS_FOREIGNER", dsOut.getColumn(i, "Column11"));
		this.dsList.setColumn(nrow, "DT_GROUPJOIN", dsOut.getColumn(i, "Column12"));
		this.dsList.setColumn(nrow, "DT_RETIRE", dsOut.getColumn(i, "Column13"));
		
// 		this.dsList.setColumn(nrow, "AM_CURTOTAL", dsOut.getColumn(i, "Column14"));	// 과세-현근무지		
// 		this.dsList.setColumn(nrow, "AM_PRE1PBSUM", dsOut.getColumn(i, "Column15"));	// 과세-전근무지		
// 		this.dsList.setColumn(nrow, "AM_PRE2PBSUM", dsOut.getColumn(i, "Column16"));	// 과세-전전근무지		
// 		this.dsList.setColumn(nrow, "TAXATION", dsOut.getColumn(i, "Column17"));	// 과세-납세조항
 		this.dsList.setColumn(nrow, "AM_TOTALPAYBONUS", dsOut.getColumn(i, "Column18"));	// 과세-총계
// 		this.dsList.setColumn(nrow, "AM_CURNTAXSUM", dsOut.getColumn(i, "Column19"));	// 신고비과세-현근무지
// 		this.dsList.setColumn(nrow, "AM_PRE1NTAXSUM", dsOut.getColumn(i, "Column20"));	// 신고비과세-전근무지
// 		this.dsList.setColumn(nrow, "AM_PRE2NTAXSUM", dsOut.getColumn(i, "Column21"));	// 신고비과세-전전근무지
// 		this.dsList.setColumn(nrow, "NTAXATION", dsOut.getColumn(i, "Column22"));	// 신고비과세-납세조항
 		this.dsList.setColumn(nrow, "SUM_NTAXSUM", dsOut.getColumn(i, "Column23"));	// 신고비과세-총계	
 		this.dsList.setColumn(nrow, "AM_LABORINCOME", dsOut.getColumn(i, "Column24"));	// 21)총급여
// 		this.dsList.setColumn(nrow, "AM_LABORINCSUBST", dsOut.getColumn(i, "Column25"));	// 22)근로소득공제
// 		this.dsList.setColumn(nrow, "AM_NETLABORINCOME", dsOut.getColumn(i, "Column26"));	// 23)근로소득금액
// 		this.dsList.setColumn(nrow, "AM_SELF", dsOut.getColumn(i, "Column27"));	// 24)기본공제-본인
// 		this.dsList.setColumn(nrow, "AM_WIFE", dsOut.getColumn(i, "Column28"));	// 25)기본공제-배우자
// 		this.dsList.setColumn(nrow, "AM_CHILDPARENT", dsOut.getColumn(i, "Column29"));	// 26)기본공제-부양가족	AM_CHILD + AM_PARENT		
// 		this.dsList.setColumn(nrow, "AM_OLD", dsOut.getColumn(i, "Column30"));	// 27)기본공제-경로우대
// 		this.dsList.setColumn(nrow, "AM_HANDICAP", dsOut.getColumn(i, "Column31"));	// 28)기본공제-장애인
// 		this.dsList.setColumn(nrow, "AM_WOMAN", dsOut.getColumn(i, "Column32"));	// 29)기본공제-부녀자
// 		this.dsList.setColumn(nrow, "AM_ONEPARENTS", dsOut.getColumn(i, "Column33"));	// 30)기본공제-한부모가족
// 		this.dsList.setColumn(nrow, "AM_ANNUITY", dsOut.getColumn(i, "Column34"));	// 31)국민연금보험료-공제금액
// 		this.dsList.setColumn(nrow, "AM_PUBLICPENSION", dsOut.getColumn(i, "Column35"));	// 32-가)공무원연금-공제금액
// 		this.dsList.setColumn(nrow, "AM_MILITARYPENSION", dsOut.getColumn(i, "Column36"));	// 32-나)군인연금-공제금액
// 		this.dsList.setColumn(nrow, "AM_TEACHERSPENSION", dsOut.getColumn(i, "Column37"));	// 32-다)사립학교교직원연금-공제금액
// 		this.dsList.setColumn(nrow, "AM_POSTPENSION", dsOut.getColumn(i, "Column38"));	// 32-라)별정우체국연금-공제금액
// 		this.dsList.setColumn(nrow, "AM_HEALTHSUBST", dsOut.getColumn(i, "Column39"));	// 33-가)보험료-건강보험료-공제금액
// 		this.dsList.setColumn(nrow, "AM_HIRESUBST", dsOut.getColumn(i, "Column40"));	// 33-나)보험료-고용보험료-공제금액
// 		this.dsList.setColumn(nrow, "AM_HOUSESUM2", dsOut.getColumn(i, "Column41"));	// 34-가)주택임차차입금원리금-대출기관
// 		this.dsList.setColumn(nrow, "AM_HOUSESUM7", dsOut.getColumn(i, "Column42"));	// 34-가)주택임차차입금원리금-거주자
// 		this.dsList.setColumn(nrow, "AM_HOUSESUM3", dsOut.getColumn(i, "Column43"));	// 34-나)장기주택저당차입금이자-15년미만
// 		this.dsList.setColumn(nrow, "AM_HOUSESUM29", dsOut.getColumn(i, "Column44"));	// 34-나)장기주택저당차입금이자-15~29년	
// 		this.dsList.setColumn(nrow, "AM_HOUSESUM30", dsOut.getColumn(i, "Column45"));	// 34-나)장기주택저당차입금이자-30년이상	
// 		this.dsList.setColumn(nrow, "AM_HOUSESUM12", dsOut.getColumn(i, "Column46"));	// 34-나)장기주택저당차입금이자-고정금리	
// 		this.dsList.setColumn(nrow, "AM_HOUSESUM12_1", dsOut.getColumn(i, "Column47"));	// 34-나)장기주택저당차입금이자-기타대출	
// 		this.dsList.setColumn(nrow, "AM_HOUSESUM2015_1", dsOut.getColumn(i, "Column48"));	// 34-나)장기주택저당차입금이자-2015(15:1)	
// 		this.dsList.setColumn(nrow, "AM_HOUSESUM2015_2", dsOut.getColumn(i, "Column49"));	// 34-나)장기주택저당차입금이자-2015(15:2)	
// 		this.dsList.setColumn(nrow, "AM_HOUSESUM2015_3", dsOut.getColumn(i, "Column50"));	// 34-나)장기주택저당차입금이자-2015(15:3)	
// 		this.dsList.setColumn(nrow, "AM_HOUSESUM2015_4", dsOut.getColumn(i, "Column51"));	// 34-나)장기주택저당차입금이자-2015(10~15)	
// 		this.dsList.setColumn(nrow, "AM_GIVESUBST", dsOut.getColumn(i, "Column52"));	// 35)기부금(이월분)	
// 		this.dsList.setColumn(nrow, "AM_SPECIALSUBSTSUM", dsOut.getColumn(i, "Column53"));	// 36)특별소득공제계
// 		this.dsList.setColumn(nrow, "AM_CHAGAMSODUK2", dsOut.getColumn(i, "Column54"));	// 37)차감소득금액	
// 		this.dsList.setColumn(nrow, "AM_PENSIONSUBST1", dsOut.getColumn(i, "Column55"));	// 38)개인연금저축	
// 		this.dsList.setColumn(nrow, "AM_SMALLBUSIDEU", dsOut.getColumn(i, "Column56"));	// 39)소기업소상공인공제부금	
// 		this.dsList.setColumn(nrow, "AM_HOUSESUM1_1", dsOut.getColumn(i, "Column57"));	// 40-가)주택마련저축-청약저축	
// 		this.dsList.setColumn(nrow, "AM_HOUSESUM1_2", dsOut.getColumn(i, "Column58"));	// 40-나)주택마련저축-주택청약종합저축	
// 		this.dsList.setColumn(nrow, "AM_HOUSESUM1_4", dsOut.getColumn(i, "Column59"));	// 40-다)주택마련저축-근로자주택마련저축	
// 		this.dsList.setColumn(nrow, "AM_INVEST1", dsOut.getColumn(i, "Column60"));	// 41)투자조합출자등	+ AM_INVEST2
// 		this.dsList.setColumn(nrow, "AM_CARDSUBST", dsOut.getColumn(i, "Column61"));	// 42)신용카드등사용액	
// 		this.dsList.setColumn(nrow, "AM_WOORISAJU", dsOut.getColumn(i, "Column62"));	// 43)우리사주조합출연금	
// 		this.dsList.setColumn(nrow, "AM_EMPDISABILITY", dsOut.getColumn(i, "Column63"));	// 44)고용유지중소기업근로자	
// 		this.dsList.setColumn(nrow, "AM_LONGHAPSTOCKSUBST", dsOut.getColumn(i, "Column64"));	// 45-1)장기집합투자증권저축	
// 		this.dsList.setColumn(nrow, "AM_YOUNGINVEST", dsOut.getColumn(i, "Column65"));	// 45-2)청년형장기집합투자증권저축	
// 		this.dsList.setColumn(nrow, "AM_ETCSUBSTSUM", dsOut.getColumn(i, "Column66"));	// 46)그밖의소득공제계		
// 		this.dsList.setColumn(nrow, "AM_SPECIALlIMIT", dsOut.getColumn(i, "Column67"));	// 47)특별공제종합한도초과액	
// 		this.dsList.setColumn(nrow, "AM_STDTAX", dsOut.getColumn(i, "Column68"));	// 48)종합소득과세표준	
// 		this.dsList.setColumn(nrow, "AM_CALCTAX", dsOut.getColumn(i, "Column69"));	// 49)산출세액	
// 		this.dsList.setColumn(nrow, "AM_TAXLAWREDUCTION", dsOut.getColumn(i, "Column70"));	// 50)세액감면-소득세법	
// 		this.dsList.setColumn(nrow, "AM_RESTTAXTACT", dsOut.getColumn(i, "Column71"));	// 51)세액감면-조세특례제한법	
// 		this.dsList.setColumn(nrow, "AM_RESTTAXTACT30", dsOut.getColumn(i, "Column72"));	// 52)세액감면-조세특례제한법30조	
// 		this.dsList.setColumn(nrow, "AM_TAXREDUCTION", dsOut.getColumn(i, "Column73"));	// 53)세액감면-조세조약	
// 		this.dsList.setColumn(nrow, "AM_TAXREDSUM", dsOut.getColumn(i, "Column74"));	// 54)세액감면-계			
// 		this.dsList.setColumn(nrow, "AM_LABORINCTAXSUBST", dsOut.getColumn(i, "Column75"));	// 55)세액공제-근로소득	
// 		this.dsList.setColumn(nrow, "NO_CHILDTAXCOUNT", dsOut.getColumn(i, "Column76"));	// 56)세액공제-자녀-인원	
// 		this.dsList.setColumn(nrow, "AM_CHILDTAXSUBST", dsOut.getColumn(i, "Column77"));	// 56)세액공제-자녀-세액공제	
// 		this.dsList.setColumn(nrow, "NO_BORNTAXCOUNT", dsOut.getColumn(i, "Column78"));	// 56)세액공제-출산입양-인원	
// 		this.dsList.setColumn(nrow, "AM_BORNTAXSUBST", dsOut.getColumn(i, "Column79"));	// 56)세액공제-출산입양-세액공제
// 		this.dsList.setColumn(nrow, "AM_PENSTAXSUBST", dsOut.getColumn(i, "Column80"));	// 57)세액공제-과학기술인공제	
// 		this.dsList.setColumn(nrow, "AM_PENRTAXSUBST", dsOut.getColumn(i, "Column81"));	// 58)세액공제-근로자퇴직급여보장법	
// 		this.dsList.setColumn(nrow, "AM_PENPTAXSUBST", dsOut.getColumn(i, "Column82"));	// 59)세액공제-연금저축	
// 		this.dsList.setColumn(nrow, "AM_ISAADD", dsOut.getColumn(i, "Column83"));	// 59)세액공제-ISA 추가납입액	
// 		this.dsList.setColumn(nrow, "AM_INSURETAXSUBST", dsOut.getColumn(i, "Column84"));	// 60)세액공제-보장성보험료	
// 		this.dsList.setColumn(nrow, "AM_HANDITAXSUBST", dsOut.getColumn(i, "Column85"));	// 60)세액공제-장애인보험료	
// 		this.dsList.setColumn(nrow, "AM_MEDITAXSUBST", dsOut.getColumn(i, "Column86"));	// 61)세액공제-의료비	
// 		this.dsList.setColumn(nrow, "AM_EDUTAXSUBST", dsOut.getColumn(i, "Column87"));	// 62)세액공제-교육비	
// 		this.dsList.setColumn(nrow, "AM_GIVE20_1TAXSUBST", dsOut.getColumn(i, "Column88"));	// 63)세액공제-기부금-정치자금-10만원이하	
// 		this.dsList.setColumn(nrow, "AM_GIVE20_2TAXSUBST", dsOut.getColumn(i, "Column89"));	// 63)세액공제-기부금-정치자금-10만원초과	
// 		this.dsList.setColumn(nrow, "AM_GIVE42TAXSUBST", dsOut.getColumn(i, "Column90"));	// 63)세액공제-기부금-고향사랑-10만원이하	
// 		this.dsList.setColumn(nrow, "AM_GIVE43TAXSUBST", dsOut.getColumn(i, "Column91"));	// 63)세액공제-기부금-고향사랑-10만원초과	
// 		this.dsList.setColumn(nrow, "AM_GIVE10TAXSUBST", dsOut.getColumn(i, "Column92"));	// 63)세액공제-기부금-법정기부금
// 		this.dsList.setColumn(nrow, "AM_GIVEWOORISAJU", dsOut.getColumn(i, "Column93"));	// 63)세액공제-기부금-우리사주조합기부금	
// 		this.dsList.setColumn(nrow, "AM_GIVE40TAXSUBST", dsOut.getColumn(i, "Column94"));	// 63)세액공제-기부금-지정기부금-종교단체외	
// 		this.dsList.setColumn(nrow, "AM_GIVE41TAXSUBST", dsOut.getColumn(i, "Column95"));	// 63)세액공제-기부금-지정기부금-종교단체	
// 		this.dsList.setColumn(nrow, "AM_SPECIALTAXSUBSTSUM", dsOut.getColumn(i, "Column96"));	// 64)세액공제-특별세액공제계	
// 		this.dsList.setColumn(nrow, "AM_STDTAXSUBST", dsOut.getColumn(i, "Column97"));	// 65)세액공제-표준세액공제	
// 		this.dsList.setColumn(nrow, "AM_TAXASSOCIATION", dsOut.getColumn(i, "Column98"));	// 66)납세조합공제	
// 		this.dsList.setColumn(nrow, "AM_HOUSREFUNDSUBST", dsOut.getColumn(i, "Column99"));	// 67)주택차입금	
// 		this.dsList.setColumn(nrow, "AM_FOREIGNSUBST", dsOut.getColumn(i, "Column100"));	// 68)외국납부	AM_FOREIGNSUBST
// 		this.dsList.setColumn(nrow, "AM_MONTHTAXSUBST", dsOut.getColumn(i, "Column101"));	// 69)월세액공제	
// 		this.dsList.setColumn(nrow, "AM_TAXSUBSTSUM", dsOut.getColumn(i, "Column102"));	// 70)세액공제계	
 		this.dsList.setColumn(nrow, "AM_FIXEDINCOMETAX", dsOut.getColumn(i, "Column103"));	// 72)결정세액	
 		this.dsList.setColumn(nrow, "AM_FIXEDRESIDENTTAX", dsOut.getColumn(i, "Column104"));	// 72)지방소득세	
// 		this.dsList.setColumn(nrow, "AM_FIXEDAGRTAX", dsOut.getColumn(i, "Column105"));	// 72)농특세
 		this.dsList.setColumn(nrow, "AM_PRE1INCTAXBEF", dsOut.getColumn(i, "Column106"));	// 75)전근무지납부세액-소득세	
// 		this.dsList.setColumn(nrow, "AM_PRE1RESTAXBEF", dsOut.getColumn(i, "Column107"));	// 75)전근무지납부세액-지방소득세	
 		this.dsList.setColumn(nrow, "AM_PRE2INCTAXBEF", dsOut.getColumn(i, "Column108"));	// 75)전전근무지납부세액-소득세	
// 		this.dsList.setColumn(nrow, "AM_PRE2RESTAXBEF", dsOut.getColumn(i, "Column109"));	// 75)전전근무지납부세액-지방소득세	
// 		this.dsList.setColumn(nrow, "AM_PRE3INCTAXBEF", dsOut.getColumn(i, "Column110"));	// 75)전전전근무지납부세액-소득세	
// 		this.dsList.setColumn(nrow, "AM_PRE3RESTAXBEF", dsOut.getColumn(i, "Column111"));	// 75)전전전근무지납부세액-지방소득세	
 		this.dsList.setColumn(nrow, "AM_INCTAXBEF", dsOut.getColumn(i, "Column112"));	// 75)현근무지납부세액-소득세	
// 		this.dsList.setColumn(nrow, "AM_RESTAXBEF", dsOut.getColumn(i, "Column113"));	// 75)현근무지납부세액-지방소득세	
// 		this.dsList.setColumn(nrow, "AM_SPECIALINCTAX", dsOut.getColumn(i, "Column114"));	// 76)납부특례세액-소득세	
// 		this.dsList.setColumn(nrow, "AM_SPECIALRESTAX", dsOut.getColumn(i, "Column115"));	// 76)납부특례세액-지방소득세	
		this.dsList.setColumn(nrow, "AM_DEDCOLLECTINCTAX", dsOut.getColumn(i, "Column116"));	// 77)차감납부(환급)세액-소득세	
		this.dsList.setColumn(nrow, "AM_DEDCOLLECTRESTAX", dsOut.getColumn(i, "Column117"));	// 77)차감납부(환급)세액-지방소득세
// 		this.dsList.setColumn(nrow, "RT_TAXRDT2", dsOut.getColumn(i, "Column118"));	// 간이세액(80,100)	
 		this.dsList.setColumn(nrow, "TY_TAXRDT2", dsOut.getColumn(i, "Column119"));	// 분할신청		
 		this.dsList.setColumn(nrow, "DS_VENDOR_PRE1", dsOut.getColumn(i, "Column122"));	// 전근무지_근무지명		
 		this.dsList.setColumn(nrow, "NO_SJC_PRE1", dsOut.getColumn(i, "Column123"));	// 전근무지_사업자등록번호		
 		this.dsList.setColumn(nrow, "DS_TERM_PRE1", dsOut.getColumn(i, "Column124"));	// 전근무지_근무기간	
 		this.dsList.setColumn(nrow, "DS_VENDOR_PRE2", dsOut.getColumn(i, "Column125"));	// 전전근무지_근무지명		
 		this.dsList.setColumn(nrow, "NO_SJC_PRE2", dsOut.getColumn(i, "Column126"));	// 전전근무지_사업자등록번호		
 		this.dsList.setColumn(nrow, "DS_TERM_PRE2", dsOut.getColumn(i, "Column127"));	// 전전근무지_근무기간	
 		this.dsList.setColumn(nrow, "DS_VENDOR_PRE3", dsOut.getColumn(i, "Column128"));	// 전전전근무지_근무지명		
 		this.dsList.setColumn(nrow, "NO_SJC_PRE3", dsOut.getColumn(i, "Column129"));	// 전전전근무지_사업자등록번호		
 		this.dsList.setColumn(nrow, "DS_TERM_PRE3", dsOut.getColumn(i, "Column130"));	// 전전전근무지_근무기간	

   }
   //Import 된 사번 검증하기 위해
   //this.dsList.set_enableevent(true);
   this.gfnSetFormStatus(this, "I");
};

this.dsList_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	this.fnSetButton();
};

//원천징수영수증 파일 전체 업로드  CBC ~ _  까지 잘라서 dir 만듬. 
this.fnFileDirUpload = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	if(!this.gfnGridIsRow(this.dxGrid)) return;
	
	if(this.gfnIsNull(this.AuthClient.CD_GUBUN)) {  // 사번구분자 cbc 가 없으면 업로드 안됨. 
		this.gfnAlert(" 사번 구분자가 없습니다. 첨부파일 전체를 업로드 할 수 없습니다.");
	} 
			
	this.fileGubun = "DA20";	
	
	var fileManager = {};
	fileManager.CD_GUBUN = this.fileGubun;
	fileManager.CD_DIR = [this.dsSearch.getColumn(0, "CD_CORP"), this.dsSearch.getColumn(0, "YY_BASE")];  
	fileManager.IS_READONLY = false;
	fileManager.CD_REF = [this.dsSearch.getColumn(0, "CD_CORP"), this.dsSearch.getColumn(0, "YY_BASE")]; 
	fileManager.DS_FIND = [this.AuthClient.CD_GUBUN, "_"]; // 사번조회를 위한 값 CD_REF3 의 값에 파일명에서 읽어온 사번이 적용 start, end

	this.gfnFileDirManager(fileManager, "fnFileCallback");	
	
}

this.fnFileCallback = function(strID, val) {
	// val.IsChange : 변경여부, val.Cnt : 파일개수
		
	// 파일개수를 다시 셋팅
	trace("fnFileCallback strID =>" + strID);
	
	this.FormBtns.Select.click();
};
]]></Script>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfCD_CORP.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_CORP"/>
      <BindItem id="item1" compid="divSearch.form.ccfCD_CORP.form.DSTextBox" propid="value" datasetid="dsSearch" columnid="DS_CORP"/>
      <BindItem id="item3" compid="divSearch.form.ctclYY_BASE.form.TextBox" propid="value" datasetid="dsSearch" columnid="YY_BASE"/>
    </Bind>
  </Form>
</FDL>
