<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="등록심의" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="78.0" right="0" cssclass="div_SEARCH_Bg" formscrolltype="none">
          <Layouts>
            <Layout>
              <Static id="staYR_JUDGE" taborder="0" text="평가년도" left="0.0" top="10.0" width="105.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ctclYR_JUDGE" taborder="1" left="staYR_JUDGE:0.0" top="10.0" width="60" height="24.0" url="cmm::cmmCalYY.xfdl"/>
              <Static id="staCD_LICCOST" taborder="2" text="품목" left="ctclYR_JUDGE:0.0" top="10.0" width="105.0" height="24.0" textDecoration="none" cssclass="sta_WF_SchLabel"/>
              <Combo id="ccboCD_BUMUN" taborder="3" left="staCD_LICCOST:0.0" top="10.0" width="100" height="24.0" innerdataset="dsCD_BUMUN" onitemchanged="divSearch_ccboCD_BUMUN_onitemchanged" codecolumn="CD_CODE" datacolumn="DS_CODE"/>
              <Combo id="ccboCD_LICCOST" taborder="4" left="ccboCD_BUMUN:0.0" top="10.0" width="100" height="24.0" innerdataset="dsCD_LICCOST" codecolumn="CD_CODE" datacolumn="DS_CODE"/>
              <Static id="staID_DAM" taborder="5" text="평가담당자" left="ccboCD_LICCOST:0.0" top="10.0" width="105.0" height="24.0" textDecoration="none" cssclass="sta_WF_SchLabel"/>
              <Combo id="ccboID_DAM" taborder="6" left="staID_DAM:0.0" top="10.0" width="100" height="24.0" innerdataset="dsID_DAM" codecolumn="CD_CODE" datacolumn="DS_CODE"/>
              <Static id="staDS_VENDOR" taborder="7" text="회사명" left="0.0" top="staYR_JUDGE:10.0" width="105.0" height="24.0" textDecoration="none" cssclass="sta_WF_SchLabel"/>
              <Edit id="ctxtDS_VENDOR" taborder="8" left="staDS_VENDOR:0.0" top="staYR_JUDGE:10.0" width="100" height="24.0" value=""/>
              <Static id="staTY_REVIEW" taborder="9" text="심의결과" left="ctxtDS_VENDOR:0.0" top="staYR_JUDGE:10.0" width="105.0" height="24.0" textDecoration="none" cssclass="sta_WF_SchLabel"/>
              <Combo id="ccboTY_SELECTION" taborder="10" left="staTY_REVIEW:0.0" top="staYR_JUDGE:10.0" width="100" height="24.0" innerdataset="dsTY_SELECTION" codecolumn="CD_CODE" datacolumn="DS_CODE" index="0" text="전체" value=""/>
              <Static id="staTY_RESULT" taborder="11" text="평과결과" left="ccboTY_SELECTION:0.0" top="staYR_JUDGE:10.0" width="105.0" height="24.0" textDecoration="none" cssclass="sta_WF_SchLabel"/>
              <Combo id="ccboTY_RESULT" taborder="12" left="staTY_RESULT:0.0" top="staYR_JUDGE:10.0" width="100" height="24.0" innerdataset="dsTY_RESULT" codecolumn="CD_CODE" datacolumn="DS_CODE" index="0" text="전체" value=""/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	this.fnSetCombo();
	
	this.dsSearch.setColumn(0, "YR_JUDGE", this.gfnGetDate().substr(0,4));
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
	this.FormBtns.Add.set_enable(false);
	this.FormBtns.Del.set_enable(false);
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btnDetail = this.gfnFormButtonAdd("btnDetail", "fnDetail");  
	this.btnAutoJudge = this.gfnFormButtonAdd("btnAutoJudge", "fnAutoJudge");  
	this.btnTalak = this.gfnFormButtonAdd("btnTalak", "fnTalak");  
	this.btnRegistApp = this.gfnFormButtonAdd("btnRegistApp", "fnRegistApp");  

};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {	
	this.dxGrid = this.divData.form.objGrid;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	// 그리드 초기화
	this.gfnGridInit(this.dxGrid, this.dsList, "DC", "DCA_JUDGE_REGULAR_RESULT_LIST_DC");
};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("YR_JUDGE", "string");
	this.dsSelect.addColumn("TY_TYPE", "string");
	this.dsSelect.addColumn("CD_LICCOST", "string");
	this.dsSelect.addColumn("ID_DAM", "string");
	this.dsSelect.addColumn("ID_USER", "string");
	this.dsSelect.addColumn("TY_SELECTION", "string");
	
	this.dsAutoJudge = new Dataset();
	this.dsAutoJudge.addColumn("NO_ID", "string");
	this.dsAutoJudge.addColumn("YR_JUDGE", "string");
	this.dsAutoJudge.addColumn("CD_VENDOR", "string");
	this.dsAutoJudge.addColumn("CD_JUDGEKIND", "string");
	this.dsAutoJudge.addColumn("CD_LICCOST", "string");
	this.dsAutoJudge.addColumn("ID_USER", "string");
	
	this.dsTalak = new Dataset();
	this.dsTalak.addColumn("NO_ID", "string");
	this.dsTalak.addColumn("YR_JUDGE", "string");
	this.dsTalak.addColumn("CD_VENDOR", "string");
	this.dsTalak.addColumn("CD_JUDGEKIND", "string");
	this.dsTalak.addColumn("CD_LICCOST", "string");
	this.dsTalak.addColumn("RM_ETC_REASON", "string");
	this.dsTalak.addColumn("ID_USER", "string");
	
	this.dsRegist = new Dataset();
	this.dsRegist.addColumn("NO_ID", "string");
	this.dsRegist.addColumn("YR_JUDGE", "string");
	this.dsRegist.addColumn("CD_VENDOR", "string");
	this.dsRegist.addColumn("CD_JUDGEKIND", "string");
	this.dsRegist.addColumn("CD_LICCOST", "string");
	this.dsRegist.addColumn("RM_ETC_REASON", "string");
	this.dsRegist.addColumn("ID_USER", "string");
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	
	this.dsSelect.setColumn(0, "YR_JUDGE", this.dsSearch.getColumn(0, "YR_JUDGE"));
	this.dsSelect.setColumn(0, "TY_TYPE", "");
	this.dsSelect.setColumn(0, "CD_LICCOST", this.dsSearch.getColumn(0, "CD_LICCOST"));
	this.dsSelect.setColumn(0, "ID_DAM", this.dsSearch.getColumn(0, "ID_DAM"));
	this.dsSelect.setColumn(0, "ID_USER", this.AuthClient.ID_USER);
	this.dsSelect.setColumn(0, "TY_SELECTION", this.dsSearch.getColumn(0, "TY_SELECTION"));

	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	//var nrow = this.gfnGridAdd(this.dxGrid); // top (default), bottom, current
}

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	//this.gfnGridDel(this.dxGrid);
}

/*
 *	저장 버튼
 */
this.fnSave = function() {
	// 그리드 필수항목 체크
// 	if (!this.gfnGridValidate(this.dxGrid)) return;	
// 
// 	this.dxGrid.updateToDataset();
// 	this.dsUpdate.clearData();
// 	
// 	for (var i = 0; i < this.dsList.rowcount; i++) {
// 		var flag = this.gfnGetFlag(this.dsList, i);
// 		switch(flag) {
// 			case "U":
// 				var nrow = this.dsUpdate.addRow();
// 				this.dsUpdate.setColumn(nrow, "YR_JUDGE", this.dsList.getColumn(i, "YR_JUDGE"));
// 				this.dsUpdate.setColumn(nrow, "CD_VENDOR", this.dsList.getColumn(i, "CD_VENDOR"));
// 				this.dsUpdate.setColumn(nrow, "CD_LICCOST", this.dsList.getColumn(i, "CD_LICCOST"));
// 				this.dsUpdate.setColumn(nrow, "CD_JUDGEKIND", this.dsList.getColumn(i, "CD_JUDGEKIND"));
// 				this.dsUpdate.setColumn(nrow, "ID_DAM", this.dsList.getColumn(i, "ID_JUDGE"));
// 				this.dsUpdate.setColumn(nrow, "RM_ETC_REASON", this.dsList.getColumn(i, "RM_ETC_REASON"));
// 				this.dsUpdate.setColumn(nrow, "RM_BIGO_RESULT", this.dsList.getColumn(i, "RM_BIGO_RESULT"));
// 				this.dsUpdate.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
// 				break;
// 		}
// 	}
// 	
// 	if (this.dsUpdate.rowcount == 0) return;
// 		
// 	var strSvcId    = "save";
// 	var strSvcType  = "save";
// 	var inProc		= "_dsProc";
// 	var inData      = "update=dsUpdate";
// 	var outData     = "";
// 	var strArg      = "";
// 	var callBackFnc = "fnCallback";
// 	
// 	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
// 						strSvcType , 	// transaction을 요청할 구분
// 						inProc,			// Procedure 정보 Dataset 이름
// 						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
// 						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
// 						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
// 						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {
	var validate = true;
	
	if (this.gfnIsNull(this.dsSearch.getColumn(0,"YR_JUDGE"))) {
		validate = false;
		// Alert후 실행할 처리
		this.fnVaidateCallback = function() {
			this.divSearch.form.form.ctclYR_JUDGE.form.TextBox.setFocus();
		}
		this.gfnAlert("평가년도를 입력하세요.", "fnVaidateCallback");
	}
	return validate;
};

/************************************************************************
 * 콤보 이벤트 설정
 ************************************************************************/
this.fnSetCombo = function()
{
	this.dsCombo = new Dataset();
	this.dsCombo.addColumn("CD_SYSTEM", "string");
	this.dsCombo.addColumn("CD_TYPE", "string");

	this.dsCombo.addRow();
	this.dsCombo.setColumn(0, "CD_SYSTEM", "DM");
	this.dsCombo.setColumn(0, "CD_TYPE", "H07");
	
	this.dsCombo.addRow();
	this.dsCombo.setColumn(1, "CD_SYSTEM", "DC");
	this.dsCombo.setColumn(1, "CD_TYPE", "C01");
	
	var strSvcId    = "combo";
	var strSvcType  = "select";
	var inProc		= "_dsProc";
	var inData      = "combo=dsCombo";
	var outData     = "dsID_DAM=combo0 dsCD_BUMUN=combo1";
	var strArg      = "";
	var callBackFnc = "fnCallbackCombo";

	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

this.fnCallbackCombo = function(svcID, errorCode, errorMsg)
{
	if(svcID == "combo") {		
		this.dsID_DAM.insertRow(0);		
		this.dsID_DAM.setColumn(0, "CD_CODE", "");
		this.dsID_DAM.setColumn(0, "DS_CODE", "전체");
		this.divSearch.form.ccboID_DAM.set_index(0);
		
		this.dsCD_BUMUN.insertRow(0);		
		this.dsCD_BUMUN.setColumn(0, "CD_CODE", "");
		this.dsCD_BUMUN.setColumn(0, "DS_CODE", "전체");
 		this.divSearch.form.ccboCD_BUMUN.set_index(0);
	}
	else if(svcID == "combo1") {		
		this.dsCD_LICCOST.insertRow(0);		
		this.dsCD_LICCOST.setColumn(0, "CD_CODE", "");
		this.dsCD_LICCOST.setColumn(0, "DS_CODE", "전체");
	}
};


this.fnSetCombo1 = function(cd_bumun)
{
   this.dsCombo1 = new Dataset();
   this.dsCombo1.addColumn("CD_BUMUN", "string");

   //품목
   this.dsCombo1.addRow();
   this.dsCombo1.setColumn(0, "CD_BUMUN", cd_bumun);
   
   var strSvcId    = "combo1";
   var strSvcType  = "select";
   var inProc      = "_dsProc";
   var inData      = "combo1=dsCombo1";
   var outData     = "dsCD_LICCOST=combo10";
   var strArg      = "";
   var callBackFnc = "fnCallbackCombo";

   this.gfnTransaction( strSvcId ,    // transaction을 구분하기 위한 svc id값
                  strSvcType ,    // transaction을 요청할 구분
                  inProc,         // Procedure 정보 Dataset 이름
                  inData ,       // 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
                  outData ,       // 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
                  strArg,       // 입력값으로 보낼 arguments, strFormData="20120607"
                  callBackFnc); // 통신방법 정의 [생략가능]
}
/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);	
	}
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "auto") {
		if (errorCode == 0) {
			this.fnValidate = function() 
			{
				this.FormBtns.Select.click();
			}
			
			this.gfnAlert("등록심의취소가 정상 처리되었습니다.", "fnValidate");
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "talak") {
		if (errorCode == 0) {
			this.fnValidate = function() 
			{
				this.FormBtns.Select.click();
			}
			
			this.gfnAlert("탈락 처리가 정상적으로 처리되었습니다.", "fnValidate");
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "regist") {
		if (errorCode == 0) {
			this.fnValidate = function() 
			{
				this.FormBtns.Select.click();
			}
			
			this.gfnAlert("등록처리가 정상적으로 처리되었습니다.", "fnValidate");
		} else {
			this.gfnAlert(errorMsg);
		}
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
 
/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
	}
};

this.divSearch_ccboCD_BUMUN_onitemchanged = function(obj:nexacro.Combo,e:nexacro.ItemChangeEventInfo)
{
	if(e.prevalue != e.postvalue) {
      this.fnSetCombo1(e.postvalue);
   }
};

this.fnAutoJudge = function() {
	if (!this.gfnGridIsRow(this.dxGrid)) { return false; }
	
	this.gfnConfirm("등록심의취소를 진행 하시겠습니까?", "fnAutoJudge_CallBack");
}

this.fnTalak = function() {
	if (!this.gfnGridIsRow(this.dxGrid)) { return false; }
	
	this.gfnConfirm("해당건을 탈락처리 하시겠습니까?", "fnTalak_CallBack");
}

this.fnRegistApp = function() {
	if (!this.gfnGridIsRow(this.dxGrid)) { return false; }
	
	this.gfnConfirm("해당건을 등록심의 하시겠습니까?", "fnRegistApp_CallBack");
}

this.fnDetail = function() {
	var param = {};
	param.YR_JUDGE = this.dsSearch.getColumn(0, "YR_JUDGE");
	param.CD_VENDOR = this.dsList.getColumn(this.dsList.rowposition, "CD_VENDOR");
	param.DS_VENDOR = this.dsList.getColumn(this.dsList.rowposition, "DS_VENDOR");
	param.CD_LICCOST = this.dsList.getColumn(this.dsList.rowposition, "CD_LICCOST");
	param.CD_JUDGEKIND = this.dsList.getColumn(this.dsList.rowposition, "CD_JUDGEKIND");
	
	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DCA_JUDGE", "fnDetail_callback", param);
}

this.fnDetail_callback = function()
{
	this.FormBtns.Select.click();
}

this.fnAutoJudge_CallBack = function(strId, val) {
	if(val == true)
	{
		this.dsAutoJudge.clearData();
	
		for(var row = 0; row < this.dsList.rowcount; row++)
		{
			if(this.dsList.getColumn(row, "CHK") == "Y")
			{
				var nrow = this.dsAutoJudge.addRow();
				this.dsAutoJudge.setColumn(nrow, "NO_ID", this.dsList.getColumn(row, "NO_ID"));
				this.dsAutoJudge.setColumn(nrow, "YR_JUDGE", this.dsList.getColumn(row, "YR_JUDGE"));
				this.dsAutoJudge.setColumn(nrow, "CD_VENDOR", this.dsList.getColumn(row, "CD_VENDOR"));
				this.dsAutoJudge.setColumn(nrow, "CD_JUDGEKIND", this.dsList.getColumn(row, "CD_JUDGEKIND"));
				this.dsAutoJudge.setColumn(nrow, "CD_LICCOST", this.dsList.getColumn(row, "CD_LICCOST"));
				this.dsAutoJudge.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
			}
		}
		var strSvcId    = "auto";
		var strSvcType  = "save";
		var inProc		= "_dsProc";
		var inData      = "auto=dsAutoJudge";
		var outData     = "";
		var strArg      = "";
		var callBackFnc = "fnCallback";
		
		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
							strSvcType , 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
							callBackFnc); // 통신방법 정의 [생략가능]
	}
}

this.fnTalak_CallBack = function(strId, val) {
	if(val == true)
	{
		this.dsTalak.clearData();
		
		for(var row = 0; row < this.dsList.rowcount; row++)
		{
			if(this.dsList.getColumn(row, "CHK") == "Y")
			{
				var nrow = this.dsTalak.addRow();
				this.dsTalak.setColumn(nrow, "NO_ID", this.dsList.getColumn(row, "NO_ID"));
				this.dsTalak.setColumn(nrow, "YR_JUDGE", this.dsList.getColumn(row, "YR_JUDGE"));
				this.dsTalak.setColumn(nrow, "CD_VENDOR", this.dsList.getColumn(row, "CD_VENDOR"));
				this.dsTalak.setColumn(nrow, "CD_JUDGEKIND", this.dsList.getColumn(row, "CD_JUDGEKIND"));
				this.dsTalak.setColumn(nrow, "CD_LICCOST", this.dsList.getColumn(row, "CD_LICCOST"));
				this.dsTalak.setColumn(nrow, "RM_ETC_REASON", this.dsList.getColumn(row, "RM_ETC_REASON"));
				this.dsTalak.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
			}
		}
		var strSvcId    = "talak";
		var strSvcType  = "save";
		var inProc		= "_dsProc";
		var inData      = "talak=dsTalak";
		var outData     = "";
		var strArg      = "";
		var callBackFnc = "fnCallback";
		
		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
							strSvcType , 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
							callBackFnc); // 통신방법 정의 [생략가능]
	}
}

this.fnRegistApp_CallBack = function(strId, val) {
	if(val == true)
	{
		this.dsRegist.clearData();
		
		for(var row = 0; row < this.dsList.rowcount; row++)
		{
			if(this.dsList.getColumn(row, "CHK") == "Y")
			{
				var nrow = this.dsRegist.addRow();
				this.dsRegist.setColumn(nrow, "NO_ID", this.dsList.getColumn(row, "NO_ID"));
				this.dsRegist.setColumn(nrow, "YR_JUDGE", this.dsList.getColumn(row, "YR_JUDGE"));
				this.dsRegist.setColumn(nrow, "CD_VENDOR", this.dsList.getColumn(row, "CD_VENDOR"));
				this.dsRegist.setColumn(nrow, "CD_JUDGEKIND", this.dsList.getColumn(row, "CD_JUDGEKIND"));
				this.dsRegist.setColumn(nrow, "CD_LICCOST", this.dsList.getColumn(row, "CD_LICCOST"));
				this.dsRegist.setColumn(nrow, "RM_ETC_REASON", this.dsList.getColumn(row, "RM_ETC_REASON"));
				this.dsRegist.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
			}
		}
		var strSvcId    = "regist";
		var strSvcType  = "save";
		var inProc		= "_dsProc";
		var inData      = "regist=dsRegist";
		var outData     = "";
		var strArg      = "";
		var callBackFnc = "fnCallback";
		
		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
							strSvcType , 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
							callBackFnc); // 통신방법 정의 [생략가능]
	}
}
]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DCAPR_JUDGE_REGULAR_RESULT_LIST_DM_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">talak</Col>
            <Col id="SP">DCAPR_JUDGE_REGULAR_RESULT_LIST_DM_TALAK</Col>
          </Row>
          <Row>
            <Col id="TARGET">auto</Col>
            <Col id="SP">DCAPR_JUDGE_REGULAR_RESULT_LIST_DM_REGIST_CANCEL</Col>
          </Row>
          <Row>
            <Col id="SP">DCAPR_JUDGE_REGULAR_RESULT_LIST_DM_APPLY</Col>
            <Col id="TARGET">regist</Col>
          </Row>
          <Row>
            <Col id="TARGET">combo</Col>
            <Col id="SP">DZXPR_COMBO_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">combo1</Col>
            <Col id="SP">DMXPR_LICCOST_COMBO_SELECT</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsID_DAM">
        <ColumnInfo>
          <Column id="CD_CODE" type="STRING" size="256"/>
          <Column id="DS_CODE" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="dsCD_BUMUN">
        <ColumnInfo>
          <Column id="CD_CODE" type="STRING" size="256"/>
          <Column id="DS_CODE" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="dsCD_LICCOST">
        <ColumnInfo>
          <Column id="CD_CODE" type="STRING" size="256"/>
          <Column id="DS_CODE" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CD_CODE"/>
            <Col id="DS_CODE">전체</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsTY_RESULT">
        <ColumnInfo>
          <Column id="CD_CODE" type="STRING" size="256"/>
          <Column id="DS_CODE" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="DS_CODE">전체</Col>
            <Col id="CD_CODE"/>
          </Row>
          <Row>
            <Col id="DS_CODE">미평가</Col>
            <Col id="CD_CODE">0</Col>
          </Row>
          <Row>
            <Col id="DS_CODE">평가중</Col>
            <Col id="CD_CODE">1</Col>
          </Row>
          <Row>
            <Col id="DS_CODE">탈락</Col>
            <Col id="CD_CODE">2</Col>
          </Row>
          <Row>
            <Col id="DS_CODE">평가제외</Col>
            <Col id="CD_CODE">3</Col>
          </Row>
          <Row>
            <Col id="DS_CODE">등록심의</Col>
            <Col id="CD_CODE">4</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="YR_JUDGE" type="STRING" size="256"/>
          <Column id="CD_BUMUN" type="STRING" size="256"/>
          <Column id="CD_LICCOST" type="STRING" size="256"/>
          <Column id="ID_DAM" type="STRING" size="256"/>
          <Column id="DS_VENDOR" type="STRING" size="256"/>
          <Column id="TY_RESULT" type="STRING" size="256"/>
          <Column id="TY_SELECTION" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CD_LICCOST"/>
            <Col id="TY_RESULT"/>
            <Col id="TY_SELECTION"/>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsTY_SELECTION">
        <ColumnInfo>
          <Column id="CD_CODE" type="STRING" size="256"/>
          <Column id="DS_CODE" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CD_CODE"/>
            <Col id="DS_CODE">전체</Col>
          </Row>
          <Row>
            <Col id="CD_CODE">등록</Col>
            <Col id="DS_CODE">등록</Col>
          </Row>
          <Row>
            <Col id="CD_CODE">탈락</Col>
            <Col id="DS_CODE">탈락</Col>
          </Row>
          <Row>
            <Col id="CD_CODE">평가제외</Col>
            <Col id="DS_CODE">평가제외</Col>
          </Row>
        </Rows>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ctclYR_JUDGE.form.TextBox" propid="value" datasetid="dsSearch" columnid="YR_JUDGE"/>
      <BindItem id="item1" compid="divSearch.form.ccboCD_BUMUN" propid="value" datasetid="dsSearch" columnid="CD_BUMUN"/>
      <BindItem id="item2" compid="divSearch.form.ccboCD_LICCOST" propid="value" datasetid="dsSearch" columnid="CD_LICCOST"/>
      <BindItem id="item3" compid="divSearch.form.ccboID_DAM" propid="value" datasetid="dsSearch" columnid="ID_DAM"/>
      <BindItem id="item4" compid="divSearch.form.ctxtDS_VENDOR" propid="value" datasetid="dsSearch" columnid="DS_VENDOR"/>
      <BindItem id="item5" compid="divSearch.form.ccboTY_SELECTION" propid="value" datasetid="dsSearch" columnid="TY_SELECTION"/>
    </Bind>
  </Form>
</FDL>
