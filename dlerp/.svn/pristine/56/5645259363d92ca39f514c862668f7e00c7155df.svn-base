<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="DWB_HDGISUNGMONTH" width="1280" height="720" titletext="기성실적입력" onload="DWB_HDGISUNGMONTH_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="1" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg" text="">
          <Layouts>
            <Layout>
              <Static id="staCD_SITE" taborder="4" text="현장코드" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Div id="ccfCD_SITE" CodeFindName="DZX_CFSITE" CDTextWidth="80" taborder="0" left="staCD_SITE:0.0" top="10.0" width="250" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
              <Static id="staYM_WORK" taborder="1" text="기성년월" left="ccfCD_SITE:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ctclYM_WORK" taborder="3" left="staYM_WORK:0.0" top="10.0" width="80" height="24.0" dateformat="yyyy-mm" editformat="yyyymm" url="cmm::cmmCalMM.xfdl"/>
              <CheckBox id="chk_GISUNG" taborder="2" text="잔여기성" left="ctclYM_WORK:0.0" top="10.0" width="100" height="24.0" truevalue="1" falsevalue="0" value="0" visible="false"/>
              <CheckBox id="chk_GISUNGREQ" taborder="6" text="당월기성분" top="10.0" width="89" height="24.0" value="true" left="chk_GISUNG:0.0" onchanged="divSearch_cchkHADOGS_GISUNGTOT_onchanged" falsevalue="0" truevalue="1" visible="true"/>
              <Static id="sta00" taborder="7" text="[청구요청건]만 협력업체가 기성청구 가능하며 현장에서 기성작업 가능" left="chk_GISUNGREQ:0.0" top="10.0" width="92.0" height="24.0" color="red" visible="false" cssclass="sta_WF_SchLabel"/>
              <Combo id="cboNO_DGR" taborder="5" left="sta00:0.0" top="10.0" width="30" height="24.0" innerdataset="dsNO_DGR" datacolumn="DS_DGR" codecolumn="NO_DGR" value="" index="-1" visible="false"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" right="0" cssclass="div_DATA_Bg" ondragmove="divData_ondragmove" bottom="0">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0" oncelldblclick="divData_divDataLeft_objGrid_oncelldblclick">
                <Formats>
                  <Format id="default"/>
                </Formats>
              </Grid>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DWBPR_HDGISUNGMONTH_MONTH_SELECT</Col>

            <Col id="SP">DWBPR_HDGISUNGMONTH_SELECT</Col>

          </Row>
          <Row>
            <Col id="TARGET">combo</Col>
            <Col id="SP">DWBPR_HDGISUNGMONTH_MAX_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">execute</Col>
            <Col id="SP">DWBPR_HDGISUNGMONTH_EXECUTE</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_SITE" type="STRING" size="256"/>
          <Column id="YM_WORK" type="STRING" size="256"/>
          <Column id="CHK_GISUNG" type="STRING" size="256"/>
          <Column id="NO_DGR" type="STRING" size="256"/>
          <Column id="CHK_REQ" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CD_SITE"/>
            <Col id="YM_WORK"/>
            <Col id="CHK_GISUNG">0</Col>
            <Col id="NO_DGR"/>
            <Col id="CHK_REQ">1</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsNO_DGR"/>
      <Dataset id="dsListSubCal" oncolumnchanged="dsListSubCal_oncolumnchanged">
        <ColumnInfo>
          <Column id="DT_HDGISUNG" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item1" compid="divSearch.form.ccfCD_SITE.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_SITE"/>
      <BindItem id="item2" compid="divSearch.form.cboNO_DGR" propid="value" datasetid="dsSearch" columnid="NO_DGR"/>
      <BindItem id="item3" compid="divSearch.form.ctclYM_WORK.form.TextBox" propid="value" datasetid="dsSearch" columnid="YM_WORK"/>
      <BindItem id="item4" compid="divSearch.form.chk_GISUNG" propid="value" datasetid="dsSearch" columnid="CHK_GISUNG"/>
      <BindItem id="item0" compid="divSearch.form.chk_GISUNGREQ" propid="value" datasetid="dsSearch" columnid="CHK_REQ"/>
    </Bind>
    <Script type="xscript5.1"><![CDATA[this.DWB_HDGISUNGMONTH_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
   // -- 필수 -------------------//
   this.gfnFormOnLoad(this);   
   this.gfnFormInfo(this);      
   // ---------------------------//
   
   this.fnSetButton();
   this.fnSetExtendButton();
   this.fnSetVariable();
   this.fnSetEvent();
   this.fnSetParameter();
   
   this.fnSetLoad();
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 ************************************************************************/
this.fnSetButton = function() {
   // 서브 버튼 사용
   //this.gfnUseSubBtn(true, this.divData, this.divData.form.divSplitter); // divSplitter sync
	this.FormBtns.Add.set_enable(false);
	this.FormBtns.Del.set_enable(false);
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결
 ************************************************************************/
this.fnSetExtendButton = function() {

   this.btnApp = this.gfnFormButtonAdd("btnApp", "fnApp");
/*
   this.btnLedger = this.gfnFormButtonAdd("btnLedger", "fnLedger");
   this.btnDetail = this.gfnFormButtonAdd("btnDetail", "fnDetail");   
   this.btnHdLdgrDdct = this.gfnFormButtonAdd("btnHdLdgrDdct", "fnHdLdgrDdct");   
   this.btnConfirm = this.gfnFormButtonAdd("btnConfirm", "fnConfirm");
   this.btnCancel = this.gfnFormButtonAdd("btnCancel", "fnCancel");
   this.btnHdLdgrReq = this.gfnFormButtonAdd("btnHdLdgrReq", "fnHdLdgrReq");
   this.btnSgnReq = this.gfnFormButtonAdd("btnSgnReq", "fnSgnReq");
   this.btnSgnReqCnc = this.gfnFormButtonAdd("btnSgnReqCnc", "fnSgnReqCnc");
   this.btnAtchB2b = this.gfnFormButtonAdd("btnAtchB2b", "fnAtchB2b");
   this.btnPrintGisung = this.gfnFormButtonAdd("btnPrintGisung", "fnSetDay");
   this.btnPrintGisung2 = this.gfnFormButtonAdd("btnPrintGisung2", "fnSetDay2");
   */
   
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
   this.ccfCD_SITE = this.divSearch.form.ccfCD_SITE;
   this.ctclYM_WORK = this.divSearch.form.ctclYM_WORK;
   //this.chk_GISUNG = this.divSearch.form.chk_GISUNG;
   //this.chk_REQ = this.divSearch.form.chk_REQ;
   this.cboNO_DGR = this.divSearch.form.cboNO_DGR;

   this.dxGrid = this.divData.form.objGrid;
   
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {   

   this.gfnGridInit(this.dxGrid, this.dsList, "DW", "DWB_HDGISUNG_LIST");
   this.dxGrid.addEventHandler("onselectchanged", this.dxGrid_RowCellChanged, this);
   
   //this.dxGrid.set_selecttype("cell");   
  // this.dxGrid.addEventHandler("onselectchanged", this.fnGrid_RowCellChanged, this);
   //this.dsList.addEventHandler("canrowposchange", this.dsList_canrowposchange, this);
      
   //this.gfnGridInit(this.dxGridSub, this.dsListSub, "DW", "DWB_HDGISUNGMONTHDTL");
     
//    this.gfnGridColumnColor(this.dxGridSub, "AM_SUPPLY", "", "YN_EDIT == 'Y' && YN_EDIT_P == 'Y'");	// 공급가가 해당조건에 맞으면 배경색을 흰색으로 변경(수정가능상태)
//    this.gfnGridColumnColor(this.dxGridSub, "AM_VAT", "", "YN_EDIT == 'Y' && YN_EDIT_V == 'Y'");		// 부가세가 해당조건에 맞으면 배경색을 흰색으로 변경(수정가능상태)
   //this.gfnGridColumnColor(this.dxGridSub, "AM_SUPPLY", "BACK_ReadOnly", "YN_EDIT != 'Y' || YN_EDIT_P != 'Y'");	// 공급가가 해당조건에 맞으면 배경색을 흰색으로 변경(수정가능상태)
   //this.gfnGridColumnColor(this.dxGridSub, "AM_VAT", "BACK_ReadOnly", "YN_EDIT != 'Y' || YN_EDIT_V != 'Y'");		// 부가세가 해당조건에 맞으면 배경색을 흰색으로 변경(수정가능상태)
   
   // 셀 수정가능 여부
	//this.dxGridSub.EnterCell = "fnGrid_EnterCell";
}

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {

   this.dsSelect = new Dataset();
   this.dsSelect.addColumn("CD_SITE", "string");
   this.dsSelect.addColumn("YM_WORK", "string");
   this.dsSelect.addColumn("CHK_GISUNG", "string");
   this.dsSelect.addColumn("CHK_REQ", "string");
   this.dsSelect.addColumn("NO_DGR", "string");
   this.dsSelect.addColumn("DS_CONTMETHOD", "string");

    
   /*
   	this.dsUpdate = new Dataset();
	this.dsUpdate.addColumn("CD_SITE", "string");
	this.dsUpdate.addColumn("YM_WORK", "string");
	this.dsUpdate.addColumn("NO_HADOCONT", "string");
	this.dsUpdate.addColumn("AM_HDGSPROA_NOW", "bigdecimal");
	this.dsUpdate.addColumn("AM_HDGSPROS_NOW", "bigdecimal");
	this.dsUpdate.addColumn("AM_HDGSPROVTXFR_NOW", "bigdecimal");
	this.dsUpdate.addColumn("AM_HDGSVAT_NOW", "bigdecimal");
	this.dsUpdate.addColumn("AM_HDGSVATA_NOW", "bigdecimal");
	this.dsUpdate.addColumn("AM_HDGSVATS_NOW", "bigdecimal");
	this.dsUpdate.addColumn("AM_PREPAYPROV_NOW", "bigdecimal");
	this.dsUpdate.addColumn("AM_PREPAYVAT_NOW", "bigdecimal");
	this.dsUpdate.addColumn("AM_PREPAYTX_NOW", "bigdecimal");
	this.dsUpdate.addColumn("AM_PREPAYTXFR_NOW", "bigdecimal");
	
	
	this.dsUpdate.addColumn("AM_JIKBUL", "bigdecimal");
	this.dsUpdate.addColumn("AM_GONGJAE1PROV_NOW", "bigdecimal");
	this.dsUpdate.addColumn("AM_GONGJAE2PROV_NOW", "bigdecimal");
	this.dsUpdate.addColumn("AM_GONGJAE3PROV_NOW", "bigdecimal");
	this.dsUpdate.addColumn("AM_GONGJAE3VAT_NOW", "bigdecimal");
	this.dsUpdate.addColumn("AM_GONGJAE4PROV_NOW", "bigdecimal");
	this.dsUpdate.addColumn("AM_GONGJAE5PROV_NOW", "bigdecimal");
	this.dsUpdate.addColumn("AM_GONGJAE6PROV_NOW", "bigdecimal");
	this.dsUpdate.addColumn("AM_GONGJAE6VAT_NOW", "bigdecimal");
	this.dsUpdate.addColumn("DT_HDGISUNG", "string");
	this.dsUpdate.addColumn("NO_DGR", "string");
	this.dsUpdate.addColumn("ID_USER", "string");
	this.dsUpdate.addColumn("CD_VENDOR", "string");
	*/
//    this.dsExec = new Dataset();
//    this.dsExec.addColumn("CD_SITE", "string");
//    this.dsExec.addColumn("NO_HADOCONT", "string");
//    this.dsExec.addColumn("YM_WORK", "string");
//    this.dsExec.addColumn("YN_HDGISUNGB2B", "string");
//    this.dsExec.addColumn("ID_UPDATE", "string");
//    this.dsExec.addColumn("NO_DGR", "string");

    this.dsExecute = new Dataset();
	this.dsExecute.addColumn("TY_WRK", "string");
	this.dsExecute.addColumn("ID_USER", "string");
	this.dsExecute.addColumn("CD_SITE", "string");
	this.dsExecute.addColumn("NO_HADOCONT", "string");
	this.dsExecute.addColumn("YM_WORK", "string");
	this.dsExecute.addColumn("NO_DGR", "string");
	this.dsExecute.addColumn("CD_VENDOR", "string");	
   
   this.dsCombo = new Dataset();
   this.dsCombo.addColumn("CD_SITE", "string");
   this.dsCombo.addColumn("YM_WORK", "string");
   this.dsCombo.addColumn("DS_CONTMETHOD", "string");
}


/************************************************************************
 * 버튼 이벤트
 ************************************************************************/
 /*
  *   조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);
	this.dsSelect.clearData();
	this.dsSelect.addRow();

	this.dsSelect.setColumn(0, "CD_SITE", this.divSearch.form.ccfCD_SITE.form.CDTextBox.value);
	this.dsSelect.setColumn(0, "YM_WORK", this.divSearch.form.ctclYM_WORK.form.TextBox.value);
	this.dsSelect.setColumn(0, "CHK_GISUNG",this.dsSearch.getColumn(0, "CHK_GISUNG"));
	this.dsSelect.setColumn(0, "CHK_REQ",this.dsSearch.getColumn(0, "CHK_REQ"));
	this.dsSelect.setColumn(0, "NO_DGR", this.dsSearch.getColumn(0, "NO_DGR"));
	if(!this.gfnIsNull(this.getOwnerFrame().DS_CONTMETHOD)){
		this.dsSelect.setColumn(0, "DS_CONTMETHOD", this.getOwnerFrame().DS_CONTMETHOD);
	}else{
		this.dsSelect.setColumn(0, "DS_CONTMETHOD", this.FormInfo.DS_PARAM);
	}
	
	if(this.dsSearch.getColumn(0, "CHK_GISUNG") == "0") {
		this.dsSelect.setColumn(0, "CHK_GISUNG", "");
	}else{
		this.dsSelect.setColumn(0, "CHK_GISUNG", this.dsSearch.getColumn(0, "CHK_GISUNG"));
	}
   
   
   if(this.dsSearch.getColumn(0, "CHK_REQ") == "0") {
		this.dsSelect.setColumn(0, "CHK_REQ", "");
	}else{
		this.dsSelect.setColumn(0, "CHK_REQ", this.dsSearch.getColumn(0, "CHK_REQ"));
	}
   var strSvcId    = "select";
   var strSvcType  = "grid";
   var inProc      = "_dsProc";
   var inData      = "select=dsSelect";
   var outData     = "dsList=select0";
   var strArg      = "";
   var callBackFnc = "fnCallback";
   
   this.gfnTransaction( strSvcId ,    // transaction을 구분하기 위한 svc id값
                  strSvcType ,    // transaction을 요청할 구분
                  inProc,         // Procedure 정보 Dataset 이름
                  inData ,       // 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
                  outData ,       // 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
                  strArg,          // 입력값으로 보낼 arguments, strFormData="20120607"
                  callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *   입력 버튼
 */
this.fnAdd = function() {
   //this.gfnGridAdd(this.dxGrid);
}

/*
 *   삭제 버튼
 */ 
this.fnDel = function() {
   //this.gfnGridDel(this.dxGrid);
}

/*
 *	저장 버튼
 */
this.fnSave = function() {
	// 그리드 필수항목 체크
	//if (!this.gfnGridValidate(this.dxGrid)) return;	
/*
//this.dxGridSub.updateToDataset();
	this.dsUpdate.clearData();

	var flagUpYn = "N";
	for (var i = 0; i < this.dsListSub.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsListSub, i);
		if(flag == "U"){
			flagUpYn = "Y";		
			break;
		}
	}
	
	// 디테일 그리드 및 회계일자 캘린더 수정시 업데이트 가능하게 처리
	if (flagUpYn == "Y" || this.dsListSubCal.getRowType(0) == 4){
		var nrow = this.dsUpdate.addRow();
		this.dsUpdate.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
		this.dsUpdate.setColumn(nrow, "YM_WORK", this.dsSearch.getColumn(0, "YM_WORK"));
		this.dsUpdate.setColumn(nrow, "NO_HADOCONT", this.dsList.getColumn(this.dsList.rowposition, "NO_HADOCONT"));
		this.dsUpdate.setColumn(nrow, "AM_HDGSPROA_NOW", this.dsListSub.lookup("CD_TYPE", "A301", "AM_SUPPLY")); 		//우측 그리드 CD_TYPE = 'A301' FindRow 의 공급가(AM_SUPPLY)
		this.dsUpdate.setColumn(nrow, "AM_HDGSPROS_NOW", this.dsListSub.lookup("CD_TYPE", "A302", "AM_SUPPLY")); 		//우측 그리드 CD_TYPE = 'A302' FindRow 의 공급가(AM_SUPPLY)
		this.dsUpdate.setColumn(nrow, "AM_HDGSPROVTXFR_NOW", this.dsListSub.lookup("CD_TYPE", "A303", "AM_SUPPLY")); 	//우측 그리드 CD_TYPE = 'A303' FindRow 의 공급가(AM_SUPPLY)
		this.dsUpdate.setColumn(nrow, "AM_HDGSVAT_NOW", this.dsListSub.lookup("CD_TYPE", "A3", "AM_VAT")); 				//우측 그리드 CD_TYPE = 'A3' FindRow 의 부가세(AM_VAT)
		this.dsUpdate.setColumn(nrow, "AM_HDGSVATA_NOW", this.dsListSub.lookup("CD_TYPE", "A301", "AM_VAT")); 			//우측 그리드 CD_TYPE = 'A301' FindRow 의 부가세(AM_VAT)
		this.dsUpdate.setColumn(nrow, "AM_HDGSVATS_NOW", this.dsListSub.lookup("CD_TYPE", "A302", "AM_VAT")); 			//우측 그리드 CD_TYPE = 'A302' FindRow 의 부가세(AM_VAT)

		this.dsUpdate.setColumn(nrow, "AM_PREPAYPROV_NOW", this.dsListSub.lookup("CD_TYPE", "B3", "AM_SUPPLY"));		//우측 그리드 CD_TYPE = 'B3' FindRow 의 공급가(AM_SUPPLY)
		this.dsUpdate.setColumn(nrow, "AM_PREPAYVAT_NOW", this.dsListSub.lookup("CD_TYPE", "B3", "AM_VAT")); 			//우측 그리드 CD_TYPE = 'B3' FindRow 의 부가세(AM_VAT)
			
		this.dsUpdate.setColumn(nrow, "AM_PREPAYTX_NOW", this.dsListSub.lookup("CD_TYPE", "B301", "AM_SUPPLY")); 		//우측 그리드 CD_TYPE = 'B301' FindRow 의 공급가(AM_SUPPLY)
		this.dsUpdate.setColumn(nrow, "AM_PREPAYTXFR_NOW", this.dsListSub.lookup("CD_TYPE", "B302", "AM_SUPPLY")); 		//우측 그리드 CD_TYPE = 'B302' FindRow 의 공급가(AM_SUPPLY)
		
		this.dsUpdate.setColumn(nrow, "AM_JIKBUL", "0");
		this.dsUpdate.setColumn(nrow, "AM_GONGJAE1PROV_NOW", this.dsListSub.lookup("CD_TYPE", "D102", "AM_SUPPLY")); 	//우측 그리드 CD_TYPE = 'D102' FindRow 의 공급가(AM_SUPPLY)
		this.dsUpdate.setColumn(nrow, "AM_GONGJAE2PROV_NOW", "0");
		this.dsUpdate.setColumn(nrow, "AM_GONGJAE3PROV_NOW", "0");
		this.dsUpdate.setColumn(nrow, "AM_GONGJAE3VAT_NOW", "0");
		this.dsUpdate.setColumn(nrow, "AM_GONGJAE4PROV_NOW", "0");
		this.dsUpdate.setColumn(nrow, "AM_GONGJAE5PROV_NOW", "0");
		this.dsUpdate.setColumn(nrow, "AM_GONGJAE6PROV_NOW", "0");
		this.dsUpdate.setColumn(nrow, "AM_GONGJAE6VAT_NOW", "0");
		this.dsUpdate.setColumn(nrow, "DT_HDGISUNG", this.divData.form.tclDT_HDGISUNG.value);	//하단의 회계일자
		this.dsUpdate.setColumn(nrow, "NO_DGR", this.dsSearch.getColumn(0, "NO_DGR"));
		this.dsUpdate.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
		this.dsUpdate.setColumn(nrow, "CD_VENDOR", this.dsList.getColumn(this.dsList.rowposition, "CD_VENDOR"));
	}

	if(this.dsUpdate.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "update=dsUpdate";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
						*/
	
}



/*
 *   엑셀 버튼
 */ 
this.fnExcel = function() {
   this.gfnExcelExport(this.dxGrid);
}

/*
 *   출력 버튼
 */
this.fnPrint = function() {
}
 
/************************************************************************
 * 서브 버튼 이벤트
 ************************************************************************/
 /*
this.fnSelectSub = function() {
    if (this.dsSearch.getColumn(0,"CD_SITE") == "") {
      //this.gfnAlert("현장코드를 입력하세요.");
		return;
   }
   
   if (this.dxGrid.rowcount == 0 || this.dxGrid.currentrow < 0) return false;
   
   this.gfnGridBeforeSelect(this.dxGridSub);
   
   
   // 디테일 파마리터 데이터셋 셋팅
   this.dsSelectSub.clearData();
   this.dsSelectSub.addRow();
   
   this.dsSelectSub.setColumn(0, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
   this.dsSelectSub.setColumn(0, "YM_WORK",  this.dsSearch.getColumn(0, "YM_WORK"));
   this.dsSelectSub.setColumn(0, "NO_HADOCONT", this.dsList.getColumn(this.dsList.rowposition, "NO_HADOCONT"));
   this.dsSelectSub.setColumn(0, "NO_DGR", this.dsSearch.getColumn(0, "NO_DGR"));
   this.dsSelectSub.setColumn(0, "CD_VENDOR", this.dsList.getColumn(this.dsList.rowposition, "CD_VENDOR"));

   var strSvcId    = "detail";
   var strSvcType  = "grid";
   var inProc      = "_dsProc";
   var inData      = "d_select=dsSelectSub";
   var outData     = "dsListSub=d_select0 dsListSubCal=d_select1";
   //var outData     = "dsListSub=d_select0";
   var strArg      = "";
   var callBackFnc = "fnCallback";
   
   this.gfnTransaction( strSvcId ,    // transaction을 구분하기 위한 svc id값
                  strSvcType ,    // transaction을 요청할 구분
                  inProc,         // Procedure 정보 Dataset 이름
                  inData ,       // 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
                  outData ,       // 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
                  strArg,          // 입력갑스로 보낼 arguments, strFormData="20120607"
                  callBackFnc); // 통신방법 정의 [생략가능]
}


this.fnAddSub = function() {
   this.gfnGridAdd(this.dxGridSub);
}

this.fnDelSub = function() {
   this.gfnGridDel(this.dxGridSub);
}

this.fnSaveSub = function() {
}

this.fnExcelSub = function() {
   this.gfnExcelExport(this.dxGridSub);
}
*/

/************************************************************************
 * Validate
 ************************************************************************/
this.fnSelectValidate = function() {
	var validate = true;
	
// 	if (this.gfnIsNull(this.dsSearch.getColumn(0,"CD_SITE"))) {
// 		validate = false;
// 	
// 		this.fnVaidateCallback = function() {
// 			this.ccfCD_SITE.form.CDTextBox.setFocus();
// 		}
// 		this.gfnAlert("현장코드를 입력하세요.", "fnVaidateCallback");
// 	}else 
	
	if(this.gfnIsNull(this.dsSearch.getColumn(0,"YM_WORK"))){
		validate = false;
	
		this.fnVaidateCallback = function() {
			this.divSearch.form.ctclYM_WORK.form.TextBox.setFocus();
		}
		this.gfnAlert("기성년월을 입력하세요.", "fnVaidateCallback");
	}
	
	return validate;
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
this.fnCallback = function(svcID, errorCode, errorMsg, strArg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);	
		
// 		if(this.dsList.rowcount == 0)
// 		{
// 			this.btnLedger.set_enable(false);
// 			this.btnDetail.set_enable(false);
// 		}
	}
	/*
	else if(svcID == "detail") {
		if (errorCode == 0) {
			this.gfnSetFormStatus(this, "Q");
			//this.gfnGridAfterSelect(this.dxGridSub);	
			
			if(this.dsList.getColumn(this.dsList.rowposition, "YN_EDIT") == "Y")
			{
				this.divData.form.tclDT_HDGISUNG.set_enable(true);
			}
			else
			{
				this.divData.form.tclDT_HDGISUNG.set_enable(false);
			}
			
			
			// 회계일자 조회데이터 없을때 입력가능하게 하기
			if(this.dsListSub.rowcount > 0){
				if(this.dsListSubCal.rowcount < 1){
					this.dsListSubCal.addRow();					
				}
			}
			
			
			//var amSupply = this.dxGridSub.getBindCellIndex("body", "AM_SUPPLY");			
			//this.gfnGridColumnColor(this.dxGridSub, "AM_SUPPLY", "Red", "AM_SUPPLY == '0'");			
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	*/
	else if(svcID == "execute") {
		if (errorCode == 0) {
			this.fnExecuteCallback = function()
			{
				this.FormBtns.Select.click();
			}
		
			var json = this.gfnArgsToJson(strArg);
			strArg = json.gubun;
			
			var msg = "";
			switch(strArg)
			{
				case "DCC" : msg = "기성확정이 "; break;
				case "DCNCNC" : msg = "기성확정취소가 "; break;
				case "SGN" : msg = "서명요청이 "; break;
				case "SGNCNC" : msg = "서명요청취소가 "; break;
			}
			
			msg += "정상 처리되었습니다.";
			this.gfnAlert(msg, "fnExecuteCallback");
		}else {
 			this.gfnAlert(errorMsg);
 		}
	}
}
// 	else if(svcID == "exec_ok") {
// 		if (errorCode == 0) {
// 			this.gfnAlert("기성확정이 정상 처리되었습니다.");
// 			this.FormBtns.Select.click();
// 		} else {
// 			this.gfnAlert(errorMsg);
// 		}
// 	}
// 	else if(svcID == "exec_canc") {
// 		if (errorCode == 0) {
// 			this.gfnAlert("확정취소가 정상 처리되었습니다.");
// 			this.FormBtns.Select.click();
// 		} else {
// 			this.gfnAlert(errorMsg);
// 		}
// 	}	
/*
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.SubSelect.click();
			//this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
}
*/
/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/

 
/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
 this.dxGrid_RowCellChanged = function(obj:nexacro.Grid,e:nexacro.GridSelectEventInfo)
{
	var colnm = this.gfnGridGetBindColumnNameByIndex(this.dxGrid, e.cell);	// 컬럼 인덱스로 컬럼명 가져오기
	var rows = obj.getSelectedDatasetRows();
	var sum = 0;
	var bRet = "";
	var curCellIdx = obj.currentcell;
	
	for(var i = 0; i < rows.length; i++) {
		if(obj.getCellProperty("body", curCellIdx, "edittype") == "mask" || obj.getCellProperty("body", curCellIdx, "edittype") == "int"){
			var am = obj.getBindDataset().getColumn(rows[i], colnm);
			
			//bRet = nexacro.isNumeric(am); 
			bRet = isNaN(am); // 문자:true, 숫자:false
			
			//alert(am+":::"+bRet);
			if(bRet){
				break;
			}
			
			if(!this.gfnIsNull(am)) {
				sum += am;
			}
		}else{
			bRet = true;
		}
	}
	
	var colDS_HADOCONT = this.dxGrid.getBindCellIndex("body", "DS_HADOCONT");

	if(!bRet){	// 숫자면 합계표시, 문자면 null
		this.dxGrid.setCellProperty("summ", colDS_HADOCONT, "text",  "선택합계=" + this.gfnAppendComma(sum));
	}else{
		this.dxGrid.setCellProperty("summ", colDS_HADOCONT, "text", "");
	}
}

// cell 클릭했을때 이벤트(해당 cell에 대한 이벤트를 건다)

//this.fnGrid_EnterCell = function(obj:nexacro.Grid, row, cell) {
	// 수정가능 true, false 처리하려는 컬럼에 대해서만 return 처리할것. 
	//var colnm = this.gfnGridGetBindColumnNameByIndex(this.dxGridSub, cell);	// 클릭한 cell의 컬럼명	
	
	//this.gfnGridColumnColor(this.dxGridSub, "DS_TYPE", "BOLD,RED", "ROW_GUBUN=='B'");
    //this.gfnGridColumnColor(this.dxGridSub, "DS_TYPE", "BOLD,BLUE", "ROW_GUBUN=='A'");
	//this.gfnGridColumnColor(this.dxGridSub, "AM_VAT", "BACK_ReadOnly", "CD_TYPE== 'B303'");		// 부가세가 해당조건에 맞으면 배경색을 흰색으로 변경(수정가능상태)
	
	// 클릭했을때 클릭한 cell을 수정 가능 or 불가능 상태로 만든다.
	// YN_EDIT 값이 Y일때만 수정가능상태
	// 왼쪽 그리드의 YN_EDIT 컬럼값이 'Y' 일경우 수정가능
//	if(this.dsList.getColumn(this.dsList.rowposition, "YN_EDIT") == "N") {
//		return false;
	
//	}	
//}

/*
this.fnGrid_RowCellChanged = function(obj:nexacro.Grid,e:nexacro.GridSelectEventInfo)
{
    if ((obj.oldrow > -1 && obj.oldrow == e.row)
      || (obj.oldrow == -1 && e.oldrow != e.row)) {
      this.FormBtns.SubSelect.click();
      obj.oldrow = -1;
   }
};
*/
/*
this.dsList_canrowposchange = function(obj:nexacro.NormalDataset,e:nexacro.DSRowPosChangeEventInfo) {
   var can_rowchange = true;
   for (var i = 0; i < this.dsListSub.rowcount; i++) {
      var flag = this.gfnGetFlag(this.dsListSub, i);
      if (flag == "I" || flag == "U" || flag == "D") {
         can_rowchange = false;
      }
   }
   if(!can_rowchange) {
      this._row = e.newrow;
      this.gfnConfirm("변경된 데이터가 있습니다.\r\n계속 진행하시겠습니까?", "dsList_canrowposchange_callback");
   }
   return can_rowchange;
}

this.dsList_canrowposchange_callback = function(strId, val) 
{
   if(val == true) {
      this.dsList.set_enableevent(false);
      this.dsList.set_rowposition(this._row);
      this.dsList.set_enableevent(true);
   }   
}
*/
/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.fnSearchInit = function(obj,e) {
   if(e == null || (e.pretext != e.posttext)) {
      this.gfnSetFormStatus(this);
      this.gfnGridClear(this.dxGrid);
     // this.gfnGridClear(this.dxGridSub);
	 
   }
}


this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
   if(e.oldvalue != e.newvalue){
	  this.gfnGridClear(this.dxGrid);
	  //this.gfnGridClear(this.dxGridSub);
   }
   
   if(e.columnid == "CD_SITE" || e.columnid == "YM_WORK"){
	  this.fnSetCombo();
   }
}

this.fnSetLoad =  function()
{
	// 기성년월 초기값 추가.
	if(this.gfnIsNull(this.getOwnerFrame().YM_WORK))
	{
		var today = this.gfnGetDate();
		this.dsSearch.setColumn(0,"YM_WORK",today.substr(0,6));
	}
   
    // 이전 화면에서 넘어 온 값이 있으면 배치
    if(!this.gfnIsNull(this.getOwnerFrame().CD_SITE) && !this.gfnIsNull(this.getOwnerFrame().YM_WORK))
	{
		this.dsSearch.setColumn(0, "CD_SITE", this.getOwnerFrame().CD_SITE);
		this.ccfCD_SITE.form.DSTextBox.set_value(this.getOwnerFrame().DS_SITE);
		this.dsSearch.setColumn(0, "YM_WORK", this.getOwnerFrame().YM_WORK);
	}

	
	this.YN_DGR = this.gfnGetConfig("DW" , "YN_DGR");

	if(this.YN_DGR == "Y")
	{
		this.divSearch.form.cboNO_DGR.set_width(100);
		this.divSearch.form.cboNO_DGR.set_readonly(false);
	}
	else
	{
		this.divSearch.form.cboNO_DGR.set_width(0);
		this.divSearch.form.cboNO_DGR.set_readonly(true);
	}
	
	this.divSearch.form.resetScroll();
   
   //색상구분추가
    //this.gfnGridColumnColor(this.dxGridSub, "DS_TYPE", "BOLD,RED", "ROW_GUBUN=='B'");
    //this.gfnGridColumnColor(this.dxGridSub, "DS_TYPE", "BOLD,BLUE", "ROW_GUBUN=='A'");
	//this.gfnGridColumnColor(this.dxGridSub, "AM_VAT", "BACK_ReadOnly", "CD_TYPE== 'B302'");		// 부가세가 해당조건에 맞으면 배경색을 흰색으로 변경(수정가능상태)
//var rtn = this.divData.form.divDataRight.form.objGridSub.setCellProperty("body", 7, "edittype", "expr:CD_TYPE=='A301' || CD_TYPE=='B301' ?'text':'none'");
	
}

this.fnApp = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {

  
	
	// 선택된 row가 있을 경우에만 팝업을 띄움
	if (!this.gfnGridIsRow(this.dxGrid)) { return false; }
	
	
	var param = {};
	param.V1 = this.dsSearch.getColumn(0,"CD_SITE");
	param.V2 = this.dsSearch.getColumn(0, "YM_WORK");
	param.V3 = "";
	param.V4 = "";
	param.ID_AP = ""; //결재번호
	param.DS_ETITLE = "기성원가품의";
	param.YN_LINK = "N";
	trace("ID_AP>>>" + param.ID_AP);
	
	this.gfnFormOpen("DWB", "DWB_HDGISUNG_ELAP", "fnAprvDialogCallback", param, 1200, 700);
} 



 this.fnAprvDialogCallback = function(svcID, value) {
	// 리턴값
	//if(value){
		// 결재완료, 결재취소, 결재상신 후에는 재조회를 한다
		this.FormBtns.Select.click();
	//}
};




this.fnDetail = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	var param = {};
	var rowposition = this.dsList.rowposition;
	
	param.CD_SITE = this.dsSearch.getColumn(0, "CD_SITE");
	param.DS_SITE = this.divSearch.form.ccfCD_SITE.form.DSTextBox.text;
	param.YM_WORK = this.dsSearch.getColumn(0, "YM_WORK");
	
	if(rowposition > -1){
		param.NO_HADOCONT = this.dsList.getColumn(rowposition, "NO_HADOCONT");
		param.DS_HADOCONT = this.dsList.getColumn(rowposition, "DS_HADOCONT");
		
		param.CD_VENDOR = this.dsList.getColumn(rowposition, "CD_VENDOR");
		param.DS_VENDOR = this.dsList.getColumn(rowposition, "DS_VENDOR");
		
		
		param.DS_STATUS1 = this.dsList.getColumn(rowposition, "DS_PERMITB2B");
		param.DS_STATUS2 = this.dsList.getColumn(rowposition, "DS_PERMIT");
		param.DS_STATUS3 = this.dsList.getColumn(rowposition, "DS_PERMITPM");
		
	}
	param.NO_DGR = this.dsSearch.getColumn(0, "NO_DGR");
	param.DS_CONTMETHOD = this.FormInfo.DS_PARAM;
	
	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DWB_HDGISUNGMONTH_DETAIL", "fnDialogCallback", param); 
}

this.fnDialogCallback = function(svcID, value) {
	this.FormBtns.Select.click();
};


this.fnHdLdgrDdct = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	var param = {};
	var rowposition = this.dsList.rowposition;
	
	param.CD_SITE = this.dsSearch.getColumn(0, "CD_SITE");
	param.DS_SITE = this.divSearch.form.ccfCD_SITE.form.DSTextBox.text;
	param.YM_WORK = this.dsSearch.getColumn(0, "YM_WORK");
	
	if(rowposition > -1){
		param.NO_HADOCONT = this.dsList.getColumn(rowposition, "NO_HADOCONT");
		param.DS_HADOCONT = this.dsList.getColumn(rowposition, "DS_HADOCONT");
		
		param.CD_VENDOR = this.dsList.getColumn(rowposition, "CD_VENDOR");
		param.DS_VENDOR = this.dsList.getColumn(rowposition, "DS_VENDOR");
	}
	param.NO_DGR = this.dsSearch.getColumn(0, "NO_DGR");
	param.DS_CONTMETHOD = this.FormInfo.DS_PARAM;
	
	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DWB_HDLDGRDDCT", "", param); 
}

this.fnHdLdgrReq = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	var param = {};
	var rowposition = this.dsList.rowposition;
	
	param.CD_SITE = this.dsSearch.getColumn(0, "CD_SITE");
	param.DS_SITE = this.divSearch.form.ccfCD_SITE.form.DSTextBox.text;
	param.YM_WORK = this.dsSearch.getColumn(0, "YM_WORK");
	param.NO_DGR = this.dsSearch.getColumn(0, "NO_DGR");
	param.DS_CONTMETHOD = this.FormInfo.DS_PARAM;
	
	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DWB_HDLDGRREQ", "", param); 
}

// 기성확정 버튼 클릭 이벤트
this.fnConfirm = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	//this.fnExecute("DCN");
	var msg = "현장코드 : [" + this.dsSearch.getColumn(0, "CD_SITE") + "] " + this.divSearch.form.ccfCD_SITE.form.DSTextBox.text
			+ "\n기성년월 : [" + this.dsSearch.getColumn(0, "YM_WORK").substr(0,6) + "]"
			+ "\n기성확정상태가 [미확정]인 건만 [확정]처리 됩니다."
			+ "\n당월기성금액이 0원인 건은 처리되지 않습니다."
			
			+ "\n\n[기성확정] 하시겠습니까?";
			
	this.gfnConfirm(msg, "fnExecute", "DCN");
	
	
	// 190702 - sp 변경에 따른 로직 변경
// 	if(this.dsList.findRow("CHK", "1") < 0){
// 		this.gfnAlert("기성확정 하실 정보를 선택하시기 바랍니다.");
// 		return false;
// 	}
	
// 	this.dsExec.clearData();	
// 	this.dsExec.addRow();	
// 	var nRow = this.dsList.rowposition;
// 
// 	this.dsExec.setColumn(0, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
// 	this.dsExec.setColumn(0, "NO_HADOCONT", this.dsList.getColumn(nRow, "NO_HADOCONT"));
// 	this.dsExec.setColumn(0, "YM_WORK", this.dsSearch.getColumn(0, "YM_WORK"));
// 	this.dsExec.setColumn(0, "YN_HDGISUNGB2B", this.dsList.getColumn(nRow, "YN_HDGISUNGB2B"));
// 	this.dsExec.setColumn(0, "ID_UPDATE", this.AuthClient.ID_USER);
// 	this.dsExec.setColumn(0, "NO_DGR", this.dsSearch.getColumn(0, "NO_DGR"));	
// 	
// 	if (this.dsExec.rowcount == 0) return;
// 	
// 	var strSvcId    = "exec_ok";
// 	var strSvcType  = "save";
// 	var inProc		= "_dsProc";
// 	var inData      = "exec_ok=dsExec";
// 	var outData     = "";
// 	var strArg      = "";
// 	var callBackFnc = "fnCallback";
// 	
// 	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
// 						strSvcType , 	// transaction을 요청할 구분
// 						inProc,			// Procedure 정보 Dataset 이름
// 						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
// 						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
// 						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
// 						callBackFnc); // 통신방법 정의 [생략가능]
}

// 확정취소 버튼 클릭 이벤트
this.fnCancel = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	//this.fnExecute("DCNCNC");
	var msg = "현장코드 : [" + this.dsSearch.getColumn(0, "CD_SITE") + "] " + this.divSearch.form.ccfCD_SITE.form.DSTextBox.text
			+ "\n기성년월 : [" + this.dsSearch.getColumn(0, "YM_WORK").substr(0,6) + "]"
			+ "\n기성확정상태가 [확정]인 건만 [확정취소]처리 됩니다."
			+ "\n\n[확정취소] 하시겠습니까?";
			
	this.gfnConfirm(msg, "fnExecute", "DCNCNC");

	// 190702 - sp 변경에 따른 로직 변경
// 	if(this.dsList.findRow("CHK", "1") < 0){
// 		this.gfnAlert("확정취소 하실 정보를 선택하시기 바랍니다.");
// 		return false;
// 	}
	
// 	this.dsExec.clearData();	
// 	this.dsExec.addRow();	
// 	var nRow = this.dsList.rowposition;
// 
// 	this.dsExec.setColumn(0, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
// 	this.dsExec.setColumn(0, "NO_HADOCONT", this.dsList.getColumn(nRow, "NO_HADOCONT"));
// 	this.dsExec.setColumn(0, "YM_WORK", this.dsSearch.getColumn(0, "YM_WORK"));
// 	this.dsExec.setColumn(0, "YN_HDGISUNGB2B", this.dsList.getColumn(nRow, "YN_HDGISUNGB2B"));
// 	this.dsExec.setColumn(0, "ID_UPDATE", this.AuthClient.ID_USER);
// 	this.dsExec.setColumn(0, "NO_DGR", this.dsSearch.getColumn(0, "NO_DGR"));	
// 	
// 	if (this.dsExec.rowcount == 0) return;
// 	
// 	var strSvcId    = "exec_canc";
// 	var strSvcType  = "save";
// 	var inProc		= "_dsProc";
// 	var inData      = "exec_canc=dsExec";
// 	var outData     = "";
// 	var strArg      = "";
// 	var callBackFnc = "fnCallback";
// 	
// 	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
// 						strSvcType , 	// transaction을 요청할 구분
// 						inProc,			// Procedure 정보 Dataset 이름
// 						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
// 						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
// 						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
// 						callBackFnc); // 통신방법 정의 [생략가능]
}

// 서명 요청
this.fnSgnReq = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	//this.fnExecute("SGN");
	this.fnExecjodal("SGN");
}
// 서명 요청 취소
this.fnSgnReqCnc = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	this.fnExecute("SGNCNC");
}

// 기성내역및첨부관리
this.fnAtchB2b = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	this.fnExecjodal("ATCH");
}

// 전자조달화면 호출
this.fnExecjodal = function(ty_wrk)
{
	var url = "";
	var param = "";
	var nRow = this.dsList.rowposition;
	
	if(ty_wrk == "SGN"){
		url = "/buyer/earned/earned_claim_result_notice_buyer_pop.do";	
		param += "&IN_LGORT=" + this.dsSearch.getColumn(0, "CD_SITE");
		param += "&IN_MONTH=" + this.dsSearch.getColumn(0, "YM_WORK").substr(0,6);				
		param += "&IN_EMAIL=" + "";
	}else if(ty_wrk == "ATCH"){
		// 선택된 row가 있을 경우에만 팝업을 띄움
		if (!this.gfnGridIsRow(this.dxGrid)) { return false; }
		
		if(this.dsList.getColumn(nRow, "YN_HDGISUNGB2B") != "Y"){
			return;
		}
		
		url = "/buyer/earned/earned_edit_pop.do";			
		param += "&poNo=" + this.dsList.getColumn(nRow, "NO_HADOCONT");
		//param += "&aeDate=" + this.dsSearch.getColumn(0, "YM_WORK").substr(0,6);				
		//param += "&vendorCd=" + this.dsList.getColumn(nRow, "CD_VENDOR");	
		param += "&aeDate=" + this.dsList.getColumn(nRow, "DT_HDGISUNG");				
		param += "&vendorCd=" + this.dsList.getColumn(nRow, "CD_VENDOR_SAP");		
		param += "&siteCd=" + this.dsSearch.getColumn(0, "CD_SITE");
	}

	this.gfnOpenEPS(url, param);
}

this.fnExecute = function(ty_wrk ,val)
{
	if(val != true){
		return;
	}
	
	if(this.dsList.findRow("CHK", "Y") < 0){
		this.gfnAlert("선택된 행이 없습니다.");
		return false;
	}

	this.dsExecute.clearData();	
	
	for(var i = 0 ; i < this.dsList.rowcount ; i++) {
		if(this.dsList.getColumn(i, "CHK") == "Y") {
			if(ty_wrk == "SGN" || ty_wrk == "SGNCNC")
			{
				if(this.dsList.getColumn(i, "YN_HDGISUNGB2B") != "Y") 
				{
					continue; 
				}
			}
			
			var nrow = this.dsExecute.addRow();
			this.dsExecute.setColumn(nrow, "TY_WRK", ty_wrk);
			this.dsExecute.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
			this.dsExecute.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
			this.dsExecute.setColumn(nrow, "NO_HADOCONT", this.dsList.getColumn(i, "NO_HADOCONT"));
			this.dsExecute.setColumn(nrow, "YM_WORK", this.dsSearch.getColumn(0, "YM_WORK"));
			this.dsExecute.setColumn(nrow, "NO_DGR", this.dsSearch.getColumn(0, "NO_DGR"));
			this.dsExecute.setColumn(nrow, "CD_VENDOR", this.dsList.getColumn(i, "CD_VENDOR"));
		}
	}
	
	if (this.dsExecute.rowcount == 0) 
	{
		if(ty_wrk == "SGN" || ty_wrk == "SGNCNC")
		{
			this.gfnAlert("전자서명건이 없습니다.");
		}
		return;
	}
	
	
	var strSvcId    = "execute";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "execute=dsExecute";
	var outData     = "";
	var strArg      = "gubun=" + ty_wrk;
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

// 기성차수 콤보 셋팅
this.fnSetCombo = function() {
	
	this.dsCombo.clearData();
	
	this.dsCombo.addRow();
	this.dsCombo.setColumn(0, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
	this.dsCombo.setColumn(0, "YM_WORK", this.dsSearch.getColumn(0, "YM_WORK").substr(0,6));
	if(!this.gfnIsNull(this.getOwnerFrame().DS_CONTMETHOD)){
		this.dsCombo.setColumn(0, "DS_CONTMETHOD", this.getOwnerFrame().DS_CONTMETHOD);
	}else{
		this.dsCombo.setColumn(0, "DS_CONTMETHOD", this.FormInfo.DS_PARAM);
	}
	
	var strSvcId    = "combo";
	var strSvcType  = "select";
	var inProc		= "_dsProc";
	var inData      = "combo=dsCombo";
	var outData     = "dsNO_DGR=combo0";
	var strArg      = "";
	var callBackFnc = "fnCallbackCombo";

	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
};

this.fnCallbackCombo = function(svcID, errorCode, errorMsg)
{
	if(svcID == "combo") {		
		/*
		this.dsNO_DGR.insertRow(0);		
		this.dsNO_DGR.setColumn(0, "CD_DGR", "");
		this.dsNO_DGR.setColumn(0, "DS_DGR", "전체");
 		*/
		this.divSearch.form.cboNO_DGR.set_index(0);
		
	}
};



// 오른쪽 그리드 공급가 or 부가세 값 변경시 자동 산식 처리
this.dsListSub_oncolumnchanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.columnid == "AM_SUPPLY"){		// 공급가
		if(this.gfnIsNull(this.dsListSub.getColumn(e.row, "DS_CALC"))){
			// YN_EDIT_V 컬럼값이 Y 일경우만 부가세 자동산식 
			if(this.dsListSub.getColumn(e.row, "YN_EDIT_V") == "Y"){
				// 현재 row의 부가세 컬럼
                var B301Row = this.dsListSub.findRow("CD_TYPE", "B301");
				if(e.row != B301Row){
					this.dsListSub.setColumn(e.row, "AM_VAT", nexacro.floor(nexacro.toNumber(this.dsListSub.getColumn(e.row, "AM_SUPPLY"),0) * 0.1));
				}
			}	
			// 현재 row의 합계 컬럼
			this.dsListSub.setColumn(e.row, "AM_TOT", nexacro.toNumber(this.dsListSub.getColumn(e.row, "AM_SUPPLY"),0) + nexacro.toNumber(this.dsListSub.getColumn(e.row, "AM_VAT"),0));
		
			var a3Row = this.dsListSub.findRow("CD_TYPE", "A3");
			var a301Row = this.dsListSub.findRow("CD_TYPE", "A301");
			var a302Row = this.dsListSub.findRow("CD_TYPE", "A302");
			var a303Row = this.dsListSub.findRow("CD_TYPE", "A303");
			var a3RowSupply = nexacro.toNumber(this.dsListSub.getColumn(a3Row, "AM_SUPPLY"),0);
			var a301RowSupply = nexacro.toNumber(this.dsListSub.getColumn(a301Row, "AM_SUPPLY"),0);
			var a302RowSupply = nexacro.toNumber(this.dsListSub.getColumn(a302Row, "AM_SUPPLY"),0);
			var a303RowSupply = nexacro.toNumber(this.dsListSub.getColumn(a303Row, "AM_SUPPLY"),0);
			var a3RowVAT = nexacro.toNumber(this.dsListSub.getColumn(a3Row, "AM_VAT"),0);
			var a301RowVAT = nexacro.toNumber(this.dsListSub.getColumn(a301Row, "AM_VAT"),0);
			var a302RowVAT = nexacro.toNumber(this.dsListSub.getColumn(a302Row, "AM_VAT"),0);
			var a303RowVAT = nexacro.toNumber(this.dsListSub.getColumn(a303Row, "AM_VAT"),0);
			
			//301이 바뀌면 303변경
			if(e.row == a301Row){
			  this.dsListSub.setColumn(a303Row, "AM_SUPPLY", a3RowSupply - a301RowSupply - a302RowSupply);
			  //this.dsListSub.setColumn(a303Row, "AM_VAT", a3RowVAT - a301RowVAT - a302RowVAT);
			  this.dsListSub.setColumn(a303Row, "AM_TOT", a303RowSupply +nexacro.toNumber(this.dsListSub.getColumn(a303Row, "AM_VAT"),0));
			}
			//302가 바뀌면 301변경
			if(e.row == a302Row){
			  this.dsListSub.setColumn(a301Row, "AM_SUPPLY", a3RowSupply - a302RowSupply - a303RowSupply);
			  this.dsListSub.setColumn(a301Row, "AM_VAT", a3RowVAT - a302RowVAT - a303RowVAT);
			  this.dsListSub.setColumn(a301Row, "AM_TOT", a301RowSupply + nexacro.toNumber(this.dsListSub.getColumn(a301Row, "AM_VAT"),0));
			}
		}
		
		this.fnDsCalcNotNullProc();
		
	}else if(e.columnid == "AM_VAT"){	// 부가세
		if(this.gfnIsNull(this.dsListSub.getColumn(e.row, "DS_CALC"))){
			// 현재 선택된 row의 합계 컬럼
			this.dsListSub.setColumn(e.row, "AM_TOT", nexacro.toNumber(this.dsListSub.getColumn(e.row, "AM_SUPPLY"),0) + nexacro.toNumber(this.dsListSub.getColumn(e.row, "AM_VAT"),0));
			
			//var a3Row = this.dsListSub.findRow("CD_TYPE", "A3");
			//var a301Row = this.dsListSub.findRow("CD_TYPE", "A301");
			var a302Row = this.dsListSub.findRow("CD_TYPE", "A302");
			
			// 구분이 면세분인 합계 컬럼(면세분의 합계는 면세분의 row의 공급가와 부가세를 합한금액이다)
			this.dsListSub.setColumn(a303Row, "AM_TOT", nexacro.toNumber(this.dsListSub.getColumn(a303Row, "AM_SUPPLY"),0) - nexacro.toNumber(this.dsListSub.getColumn(a303Row, "AM_VAT"),0));
		}
		
		this.fnDsCalcNotNullProc();
	}
	
	
};

// DsCalc 컬럼값이 null이 아닐때 처리(DS_CALC 값인 수식을 각각 해당 CD_TYPE 값을 찾아서 치환해서 eval()함수를 이용해서 계산처리한값을 셋팅함)
this.fnDsCalcNotNullProc = function() {	
	for (var i = 0; i < this.dsListSub.rowcount; i++) {
		var dsCalc = this.dsListSub.getColumn(i, "DS_CALC");		// split 전용	
		var dsCalcSupply = this.dsListSub.getColumn(i, "DS_CALC");	// 공급가 치환용
		var dsCalcVat = this.dsListSub.getColumn(i, "DS_CALC");		// 부가세 치환용
		var dsCalcTot = this.dsListSub.getColumn(i, "DS_CALC");		// 합계 치환용
		
		//this.dsListSub.set_enableevent(false);
		if(!this.gfnIsNull(dsCalc)){
			
			var dsCalcCha = nexacro.replaceAll(dsCalc, "+", "/");		// 값에서 + 변환(split 사용하기위해서)
			var dsCalcCha = nexacro.replaceAll(dsCalcCha, "-", "/");	// 값에서 - 변환(split 사용하기위해서)
			var dscalcArr = dsCalcCha.split("/");

			for (var j = 0; j < dscalcArr.length; j++) {
				var nRow = this.dsListSub.findRow("CD_TYPE", dscalcArr[j]);		// 해당 CD_TYPE 값이있는 row 인덱스를 찾는다
				
				var rowAmSupply = 0;
				var rowAmVat = 0;
				var rowAmTot = 0;
				
				// nRow값이 -1 이면 해당 데이터가 없기때문에 0 으로 셋팅한다(있을경우에만 있는 값을 셋팅함)
				if(nRow >= 0){
					rowAmSupply = this.dsListSub.getColumn(nRow, "AM_SUPPLY");
					rowAmVat = this.dsListSub.getColumn(nRow, "AM_VAT");
					rowAmTot = this.dsListSub.getColumn(nRow, "AM_TOT");
				}
				
				dsCalcSupply = nexacro.replaceAll(dsCalcSupply, dscalcArr[j], rowAmSupply);		// 해당 CD_TYPE 값을 찾아서 변환한다(공급가)
				dsCalcVat = nexacro.replaceAll(dsCalcVat, dscalcArr[j], rowAmVat);				// 해당 CD_TYPE 값을 찾아서 변환한다(부가세)
				dsCalcTot = nexacro.replaceAll(dsCalcTot, dscalcArr[j], rowAmTot);				// 해당 CD_TYPE 값을 찾아서 변환한다(합계)
			}		
			
			// CD_TYPE이 지급확정(E1) 이면 합계 컬럼만 셋팅한다(공급가와 부가세는 셋팅 않한다)

			if(this.dsListSub.getColumn(i, "CD_TYPE") != "E1"){
				this.dsListSub.setColumn(i, "AM_SUPPLY", eval(dsCalcSupply));	// 공급가
				this.dsListSub.setColumn(i, "AM_VAT", eval(dsCalcVat));			// 부가세
			}			
			this.dsListSub.setColumn(i, "AM_TOT", eval(dsCalcTot));				// 합계
		}
		//this.dsListSub.set_enableevent(true);		
	}
	
}

// 회계일자 변경시 저장 버튼 활성화시키기 위해 폼상태 변경함
this.dsListSubCal_oncolumnchanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	this.gfnSetFormStatus(this, "U");
};

this.divData_divDataLeft_objGrid_oncelldblclick = function(obj:nexacro.Grid,e:nexacro.GridClickEventInfo)
{
	this.fnDetail();
};



this.fnPrintGisung = function(gubun,day){
	
	/*if(this.dsList.rowcount < 1) { return; }*/

	var param = {};
	/*var row = this.dsList.rowposition;*/
	
	var sitecd = this.dsSearch.getColumn(0, "CD_SITE");
	var sitenm = this.ccfCD_SITE.form.DSTextBox.value ;
	var ymWork = this.dsSearch.getColumn(0, "YM_WORK");
	//var noCont = this.dsList.getColumn(row, "NO_HADOCONT")
	//var cdVendor = this.dsList.getColumn(row, "CD_VENDOR")
	var cdVendor = "";
	var userNm = this.AuthClient.DS_HNAME;
	
	var strReportName = "";
	//var strReportName = "/dp/sccb0310.ozr";
	var today = this.gfnGetDate();
	var reqdate =day;//=today;
	var paramDemand ="";
	if(gubun == "J"){
		strReportName = "/dp/sccb0310.ozr";
		paramDemand ="정기 청구";
	}else{
		strReportName = "/dp/sccb0310_1.ozr";
		paramDemand ="수시 청구";
	}
	
	var dsContMethod = "" //외주:SU,자재:MM
	if(!this.gfnIsNull(this.getOwnerFrame().DS_CONTMETHOD)){
		dsContMethod = this.getOwnerFrame().DS_CONTMETHOD;
	}else{
		dsContMethod = this.FormInfo.DS_PARAM;
	}
	

	param.REPORT_NAME = strReportName;	
	param.JSONPARAM = "{\"sitecd\":\""+ sitecd + "\", \"ymWork\":\"" + ymWork + "\", \"cdVendor\":\"" + cdVendor + "\", \"sitenm\":\"" + sitenm +"\", \"reqdate\":\"" + reqdate +"\", \"userNm\":\"" + userNm +"\", \"dsContMethod\":\"" + dsContMethod +"\", \"paramDemand\":\"" + paramDemand +"\"}";
	console.log(param);
	this.gfnFormOpenNonAuth("DZU", "DZU_OZ", "", param, 900, 650);

}

this.fnPrintGisung2 = function(gubun,day){
	
	/*if(this.dsList.rowcount < 1) { return; }*/

	var param = {};
	//var row = this.dsList.rowposition;
	
	var sitecd = this.dsSearch.getColumn(0, "CD_SITE");
	var sitenm = this.ccfCD_SITE.form.DSTextBox.value ;
	var ymWork = this.dsSearch.getColumn(0, "YM_WORK");

	var cdVendor = "";
	var userNm = this.AuthClient.DS_HNAME;
	
	var strReportName = "/dp/poacc1000_1prt.ozr";
	var today = this.gfnGetDate();
	var achk =""; // = "정기";

	var slipym =day;//=today;
	var paramDemand ="";
	if(gubun == "J"){
		paramDemand ="정기 청구";
		achk = "정기";
	}else{
		paramDemand ="수시 청구";
		achk = "수시";
	}
	
	var dsContMethod = "" //외주:SU,자재:MM
	if(!this.gfnIsNull(this.getOwnerFrame().DS_CONTMETHOD)){
		dsContMethod = this.getOwnerFrame().DS_CONTMETHOD;
	}else{
		dsContMethod = this.FormInfo.DS_PARAM;
	}
	
	param.REPORT_NAME = strReportName;	
	param.JSONPARAM = "{\"sitecd\":\""+ sitecd + "\", \"ymWork\":\"" + ymWork + "\", \"cdVendor\":\"" + cdVendor + "\", \"sitenm\":\"" + sitenm +"\", \"slipym\":\"" + slipym+"\", \"achk\":\"" + achk +"\", \"userNm\":\"" + userNm +"\", \"dsContMethod\":\"" + dsContMethod +"\", \"paramDemand\":\"" + paramDemand +"\"}";
	console.log(param);
	this.gfnFormOpenNonAuth("DZU", "DZU_OZ", "", param, 900, 650);

}

this.fnSetDay = function(){
	var param = {};
	var rowposition = this.dsList.rowposition;
	
	param.CD_SITE = this.dsSearch.getColumn(0, "CD_SITE");
	param.DS_SITE = this.ccfCD_SITE.form.DSTextBox.value;
	param.YM_WORK = this.dsSearch.getColumn(0, "YM_WORK");
	
	if(this.gfnIsNull(param.CD_SITE)){
		this.gfnAlert("현장코드를 입력하세요");
		return;
	}
	
	if(this.gfnIsNull(param.YM_WORK)){
		this.gfnAlert("기성년월을 입력하세요");
		return;
	}

	
	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DWB_GISUNG_PRTDAY", "fnSetDayCallback", param); 
}

this.fnSetDay2 = function(){
	var param = {};
	/*var rowposition = this.dsList.rowposition;*/
	
	param.CD_SITE = this.dsSearch.getColumn(0, "CD_SITE");
	param.DS_SITE = this.ccfCD_SITE.form.DSTextBox.value;
	param.YM_WORK = this.dsSearch.getColumn(0, "YM_WORK");

	if(this.gfnIsNull(param.CD_SITE)){
		this.gfnAlert("현장코드를 입력하세요");
		return;
	}
	
	if(this.gfnIsNull(param.YM_WORK)){
		this.gfnAlert("기성년월을 입력하세요");
		return;
	}
	
	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DWB_GISUNG_PRTDAY", "fnSetDayCallback2", param); 
}

this.fnSetDayCallback = function(svcID, value) {
	if(value == false){
		return;
	}
	var json = JSON.parse(value);
	var gubun = json.CD_PROC;
	var day = json.DT_EXPLAIN;
	this.fnPrintGisung(gubun,day);
	
};

this.fnSetDayCallback2 = function(svcID, value) {
	if(value == false){
		return;
	}
	var json = JSON.parse(value);
	var gubun = json.CD_PROC;
	var day = json.DT_EXPLAIN;
	this.fnPrintGisung2(gubun,day);
	
};]]></Script>
  </Form>
</FDL>
