<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="기성검사결과통보" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg" formscrolltype="none">
          <Layouts>
            <Layout>
              <Static id="staCD_SITE" taborder="3" text="현장코드" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfCD_SITE" CodeFindName="DZX_CFSITE" CDTextWidth="80" taborder="0" left="staCD_SITE:0.0" top="10.0" width="250" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
              <Combo id="cboNO_DGR" taborder="4" left="ccfCD_SITE:0.0" top="10.0" width="100" height="24.0" innerdataset="dsNO_DGR" datacolumn="DS_DGR" codecolumn="NO_DGR" value="" index="-1"/>
              <Static id="staYM_WORK" taborder="1" text="기성년월" left="cboNO_DGR:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ctclYM_WORK" taborder="2" left="staYM_WORK:0.0" top="10.0" width="80" height="24.0" dateformat="yyyy-mm" editformat="yyyymm" url="cmm::cmmCalMM.xfdl"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	
	// 타화면의 데이터가 있을시.
	this.fnSetLoadParam();
		
	// 기성차수 조회조건 보이기/숨기기
	this.YN_DGR = this.gfnGetConfig("DW" , "YN_DGR");
	if(this.YN_DGR != "Y")
	{
		this.divSearch.form.cboNO_DGR.set_width(0);
		this.divSearch.form.cboNO_DGR.set_readonly(true);
		this.divSearch.form.resetScroll();
	}
	else if(this.YN_DGR == "Y")
	{
		this.divSearch.form.cboNO_DGR.set_width(100);
		this.divSearch.form.cboNO_DGR.set_readonly(false);
		this.divSearch.form.resetScroll();
	}	
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btnSgnReq = this.gfnFormButtonAdd("btnSgnReq", "fnSgnReq");
	this.btnSgnReqCnc = this.gfnFormButtonAdd("btnSgnReqCnc", "fnSgnReqCnc");
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {	
	this.ccfCD_SITE = this.divSearch.form.ccfCD_SITE;
	this.ctclYM_WORK = this.divSearch.form.ctclYM_WORK;

	this.dxGrid = this.divData.form.objGrid;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	// 그리드 초기화
	this.gfnGridInit(this.dxGrid, this.dsList, "DW", "DWB_HDGISUNGSGNREQ");
	
	// row 수정가능 여부
	this.dxGrid.EnterCell = "fnGrid_EnterCell";	
	
	//this.dxGrid.setEventHandler("onheadclick", 	 this.fnGrid_onheadclick, 	 this); 
	
	// 셀 변경 후 이벤트
	//this.dxGrid.AfterEdit = "fnGrid_AfterEdit";
	
	// 그리드 코드파인드 값 변경
	//this.dxGrid.AfterCDTextChanged = "fnGrid_AfterCDTextChanged";
	
};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {	
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("TY_WRK", "string");
	this.dsSelect.addColumn("CD_SITE", "string");
	this.dsSelect.addColumn("YM_WORK", "string");
	this.dsSelect.addColumn("NO_DGR", "string");
	this.dsSelect.addColumn("DS_CONTMETHOD", "string");
	
	this.dsSave = new Dataset();
	this.dsSave.addColumn("TY_WRK", "string");
	this.dsSave.addColumn("ID_USER", "string");
	this.dsSave.addColumn("CD_SITE", "string");
	this.dsSave.addColumn("YM_WORK", "string");
	this.dsSave.addColumn("NO_DGR", "string");
	this.dsSave.addColumn("NO_HADOCONT", "string");
	this.dsSave.addColumn("CD_VENDOR", "string");
	this.dsSave.addColumn("CD_DMDDIV", "string");
	this.dsSave.addColumn("DT_DMD", "string");
	this.dsSave.addColumn("AM_REQ", "bigdecimal");
	
	this.dsExec = new Dataset();
	this.dsExec.addColumn("TY_WRK", "string");
	this.dsExec.addColumn("ID_USER", "string");
	this.dsExec.addColumn("CD_SITE", "string");
	this.dsExec.addColumn("YM_WORK", "string");
	this.dsExec.addColumn("NO_DGR", "string");
	this.dsExec.addColumn("DS_CONTMETHOD", "string");
	this.dsExec.addColumn("NO_HADOCONT", "string");
	this.dsExec.addColumn("CD_VENDOR", "string");
	
	this.dsCombo = new Dataset();
    this.dsCombo.addColumn("CD_SITE", "string");
    this.dsCombo.addColumn("YM_WORK", "string");
	this.dsCombo.addColumn("DS_CONTMETHOD", "string");
	
	this.dsFileExec = new Dataset();
	this.dsFileExec.addColumn("TY_WRK", "string");
	this.dsFileExec.addColumn("ID_USER", "string");
	this.dsFileExec.addColumn("CD_SITE", "string");
	this.dsFileExec.addColumn("NO_HADOCONT", "string");
	this.dsFileExec.addColumn("YM_WORK", "string");
	this.dsFileExec.addColumn("NO_DGR", "string");
	this.dsFileExec.addColumn("CD_VENDOR", "string");
	this.dsFileExec.addColumn("DS_CONTMETHOD", "string");
	
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	
	this.dsSelect.setColumn(0, "TY_WRK", "Q");
	this.dsSelect.setColumn(0, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
	this.dsSelect.setColumn(0, "YM_WORK", this.dsSearch.getColumn(0, "YM_WORK").substr(0,6));
	this.dsSelect.setColumn(0, "NO_DGR", this.dsSearch.getColumn(0, "NO_DGR"));
	this.dsSelect.setColumn(0, "DS_CONTMETHOD", this.dsSearch.getColumn(0, "DS_CONTMETHOD"));
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc);   // 통신방법 정의 [생략가능]
			
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	var nrow = this.gfnGridAdd(this.dxGrid, "bottom"); // top (default), bottom, current

}

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}


/*
 *	저장 버튼
 */
this.fnSave = function() {
	// 그리드 필수항목 체크``
	if (!this.gfnGridValidate(this.dxGrid)) return;	
	
	this.dxGrid.updateToDataset();
	
	this.dsSave.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "I":
			case "U":
			case "D":
				var nrow = this.dsSave.addRow();		
				this.dsSave.setColumn(nrow, "TY_WRK", "U");
				this.dsSave.setColumn(nrow, "TY_WRK", flag);
				this.dsSave.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
				this.dsSave.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
				this.dsSave.setColumn(nrow, "YM_WORK", this.dsSearch.getColumn(0, "YM_WORK"));
				this.dsSave.setColumn(nrow, "NO_DGR", this.dsSearch.getColumn(0, "NO_DGR"));
				this.dsSave.setColumn(nrow, "NO_HADOCONT", this.dsList.getColumn(i, "NO_HADOCONT"));
				this.dsSave.setColumn(nrow, "CD_VENDOR", this.dsList.getColumn(i, "CD_VENDOR"));
				this.dsSave.setColumn(nrow, "CD_DMDDIV", this.dsList.getColumn(i, "CD_DMDDIV"));
				this.dsSave.setColumn(nrow, "DT_DMD", this.dsList.getColumn(i, "DT_DMD"));
				this.dsSave.setColumn(nrow, "AM_REQ", this.dsList.getColumn(i, "AM_REQ"));
				break;						
		}
	}
	
	if (this.dsSave.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "save=dsSave";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}


/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {
	var validate = true;
	
	if (this.gfnIsNull(this.dsSearch.getColumn(0,"CD_SITE"))) {
		validate = false;
	
		this.fnVaidateCallback = function() {
			this.ccfCD_SITE.form.CDTextBox.setFocus();
		}
		this.gfnAlert("현장코드를 입력하세요.", "fnVaidateCallback");
	}else if(this.gfnIsNull(this.dsSearch.getColumn(0,"YM_WORK"))){
		validate = false;
	
		this.fnVaidateCallback = function() {
			this.divSearch.form.ctclYM_WORK.form.TextBox.setFocus();
		}
		this.gfnAlert("기성년월을 입력하세요.", "fnVaidateCallback");
	}

	return validate;
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg, strArg)
{
	if(errorCode != 0)
	{
		this.gfnAlert(errorMsg);
		
		return;
	}
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);			
	}	
		else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}	
	else if(svcID == "exec") {
		if (errorCode == 0) {
			if(strArg == "SGNREQ")	
			{
				this.fnSGNREQ_callback = function()
				{
					this.fnFileExecute();
					//this.FormBtns.Select.click();
				}	
				this.gfnAlert("기성검사결과통보 서명요청 정상 처리되었습니다.", "fnSGNREQ_callback");
			}
			else if(strArg == "SGNCNC")
			{
				this.fnSGNCNC_callback = function()
				{
					this.FormBtns.Select.click();
				}
				this.gfnAlert("기성검사결과통보 서명요청취소 정상 처리되었습니다.", "fnSGNCNC_callback");
			}
			else if(strArg == "SEND")
			{
				this.FormBtns.Select.click();
			}
		} else {
			this.gfnAlert(errorMsg);
		}		
	}
	else if(svcID == "file")
	{
		if (errorCode == 0) {
			this.fnAutoFile();
		}
		else
		{
			this.gfnAlert(errorMsg);
		}
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
this.fnGrid_EnterCell = function(obj:nexacro.Grid, row, cell){
	// 수정가능 true, false 처리하려는 컬럼에 대해서만 return 처리할것. 
	var colnm = this.gfnGridGetBindColumnNameByIndex(this.dxGrid, cell);	// 클릭한 cell의 컬럼명
	
	// 선택 컬럼이면 return true;
	if(colnm == "CHK") return;
	
	// 클릭했을때 클릭한 cell을 수정 가능 or 불가능 상태로 만든다.
	// YN_EDIT 값이 Y일때만 수정가능상태
	if(this.dsList.getColumn(row, "YN_EDIT") == "N") {
		return false;
	}
	
	if(colnm == "AM_HADOGS_VNDR") { 
		if(this.dsList.getColumn(row, "AM_HADOGS_VNDR") == "") {
			return false;
		} 
	}
};
/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
		
		if(e.columnid == "CD_SITE" || e.columnid == "YM_WORK"){
		   this.fnSetCombo();
	    }
	}
};

// 넘어오는 값 체크.
this.fnSetLoadParam = function()
{
	if(!this.gfnIsNull(this.getOwnerFrame().CD_SITE) && !this.gfnIsNull(this.getOwnerFrame().DS_SITE) &&
	   !this.gfnIsNull(this.getOwnerFrame().YM_WORK)) {
	   
		this.dsSearch.setColumn(0, "CD_SITE", this.getOwnerFrame().CD_SITE);	// 현장코드
		this.dsSearch.setColumn(0, "DS_SITE", this.getOwnerFrame().DS_SITE);	// 실행번호
		this.dsSearch.setColumn(0, "YM_WORK", this.getOwnerFrame().YM_WORK);	// 기성년월		
		this.dsSearch.setColumn(0, "NO_DGR", this.getOwnerFrame().NO_DGR);				// 차수
		if(this.gfnIsNull(this.getOwnerFrame().DS_CONTMETHOD)){
			this.dsSearch.setColumn(0, "DS_CONTMETHOD", this.FormInfo.DS_PARAM);
		}else{
			this.dsSearch.setColumn(0, "DS_CONTMETHOD", this.getOwnerFrame().DS_CONTMETHOD);				
		}
		this.FormBtns.Select.click();
	}else
	{
		var today = this.gfnGetDate();
		this.dsSearch.setColumn(0, "YM_WORK", today.substr(0,6));
		this.dsSearch.setColumn(0, "DS_CONTMETHOD", this.FormInfo.DS_PARAM);
	}	
}



// 아래부터는 확장 버튼.
 // 기성검사결과통보 서명요청
 this.fnSgnReq = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	// 선택된 row가 있을 경우에만 팝업을 띄움
	//if (!this.gfnGridIsRow(this.dxGrid)) { return false; }	
	
	if(this.dsList.findRow("CHK", "Y") < 0){
		this.gfnAlert("서명요청 하실 정보를 선택하시기 바랍니다.");
		return false;
	}
	
	var chkCnt = 0;
	for (var i = 0; i < this.dsList.rowcount; i++) {
		if(this.dsList.getColumn(i, "CHK") == "Y" && this.gfnGetFlag(this.dsList, i) != "#"){
			chkCnt = chkCnt + 1;
		}
	}
		
	var msg = "현장코드 : [" + this.dsSearch.getColumn(0, "CD_SITE") + "] " + this.ccfCD_SITE.form.DSTextBox.value
			+ "\n기성년월 : [" + this.dsSearch.getColumn(0, "YM_WORK").substr(0,6) + "]"
			+ "\n요청건수 : [" + chkCnt + "]"
			+ "\n기성승인상태가 [승인]인 건만 [서명요청]처리 됩니다.";
			+ "\n\n기성검사결과통보 [서명요청] 하시겠습니까?";
	
	this.gfnConfirm(msg, "dsList_sgnReq_callback");
}

// 전표발행 버튼 클릭 후 callback
this.dsList_sgnReq_callback = function(strId, val) 
{
	if(val == true) {
		var tyWrk = "SGNREQ";	

		this.fnExecSgn(tyWrk);	
	}	
}

 // 전표취소 버튼 클릭
 this.fnSgnReqCnc = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	
	if(this.dsList.findRow("CHK", "Y") < 0){
		this.gfnAlert("서명요청취소 하실 정보를 선택하시기 바랍니다.");
		return false;
	}
	
	var chkCnt = 0;
	for (var i = 0; i < this.dsList.rowcount; i++) {
		if(this.dsList.getColumn(i, "CHK") == "Y" && this.gfnGetFlag(this.dsList, i) != "#"){
			chkCnt = chkCnt + 1;
		}
	}
		
	var msg = "현장코드 : [" + this.dsSearch.getColumn(0, "CD_SITE") + "] " + this.ccfCD_SITE.form.DSTextBox.value
			+ "\n기성년월 : [" + this.dsSearch.getColumn(0, "YM_WORK").substr(0,6) + "]"
			+ "\n취소건수 : [" + chkCnt + "]"
			+ "\n업체청구상태가 [서명요청, 서명완료]인 건만 [서명요청취소]처리 됩니다.";
			+ "\n\n기성검사결과통보 서명요청취소 하시겠습니까?";
	
	this.gfnConfirm(msg, "dsList_sgnReqCnc_callback");

}

// 전표취소 버튼 클릭 후 callback
this.dsList_sgnReqCnc_callback = function(strId, val) 
{
	if(val == true) {
		var tyWrk = "SGNCNC";	

		this.fnExecSgn(tyWrk);	
	}	
}	


// 전표발행, 전표취소가 다건으로 변경되어 새로 만듬.
this.fnExecSgn = function(tyWrk) {
	this.dsExec.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		if(this.dsList.getColumn(i, "CHK") == "Y" && this.gfnGetFlag(this.dsList, i) != "#"){
			var nrow = this.dsExec.addRow();

			this.dsExec.setColumn(nrow, "TY_WRK", tyWrk);
			this.dsExec.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
			this.dsExec.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
			this.dsExec.setColumn(nrow, "YM_WORK", this.dsSearch.getColumn(0, "YM_WORK").substr(0,6));
			this.dsExec.setColumn(nrow, "NO_DGR", this.dsSearch.getColumn(0, "NO_DGR"));
			this.dsExec.setColumn(nrow, "DS_CONTMETHOD", this.dsSearch.getColumn(0, "DS_CONTMETHOD"));
			this.dsExec.setColumn(nrow, "NO_HADOCONT", this.dsList.getColumn(i, "NO_HADOCONT"));
			this.dsExec.setColumn(nrow, "CD_VENDOR", this.dsList.getColumn(i, "CD_VENDOR"));
		}
	}
	
	if (this.dsExec.rowcount == 0) return;
	
	var strSvcId    = "exec";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "exec=dsExec";
	var outData     = "";
	var strArg      = tyWrk;
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}





// 기성차수 콤보 셋팅
this.fnSetCombo = function() {
	
	this.dsCombo.clearData();
	
	this.dsCombo.addRow();
	this.dsCombo.setColumn(0, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
	this.dsCombo.setColumn(0, "YM_WORK", this.dsSearch.getColumn(0, "YM_WORK").substr(0,6));	
	if(!this.gfnIsNull(this.getOwnerFrame().DS_CONTMETHOD)){
		this.dsCombo.setColumn(0, "DS_CONTMETHOD", this.getOwnerFrame().DS_CONTMETHOD);
	}else{
		this.dsCombo.setColumn(0, "DS_CONTMETHOD", this.FormInfo.DS_PARAM);
	}
	
	var strSvcId    = "combo";
	var strSvcType  = "select";
	var inProc		= "_dsProc";
	var inData      = "combo=dsCombo";
	var outData     = "dsNO_DGR=combo0";
	var strArg      = "";
	var callBackFnc = "fnCallbackCombo";

	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
};

this.fnCallbackCombo = function(svcID, errorCode, errorMsg)
{
	if(svcID == "combo") {		
		/*
		this.dsNO_DGR.insertRow(0);		
		this.dsNO_DGR.setColumn(0, "CD_DGR", "");
		this.dsNO_DGR.setColumn(0, "DS_DGR", "전체");
 		*/
		this.divSearch.form.cboNO_DGR.set_index(0);
		
	}
};

// 서명파일정보 생성
this.fnFileExecute = function()
{
	this.dsFileExec.clearData();
	
	for(var i = 0; i < this.dsList.rowcount; i++)
	{
		if(this.dsList.getColumn(i, "CHK") == "Y" && this.gfnGetFlag(this.dsList, i) != "#")
		{
			var nrow = this.dsFileExec.addRow();
			this.dsFileExec.setColumn(nrow, "TY_WRK", "CRT");
			this.dsFileExec.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
			this.dsFileExec.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
			this.dsFileExec.setColumn(nrow, "NO_HADOCONT", this.dsList.getColumn(i, "NO_HADOCONT"));
			this.dsFileExec.setColumn(nrow, "YM_WORK", this.dsSearch.getColumn(0, "YM_WORK"));
			this.dsFileExec.setColumn(nrow, "NO_DGR", this.dsSearch.getColumn(0, "NO_DGR"));
			this.dsFileExec.setColumn(nrow, "CD_VENDOR", this.dsList.getColumn(i, "CD_VENDOR"));
			this.dsFileExec.setColumn(nrow, "DS_CONTMETHOD", this.FormInfo.DS_PARAM);
		}
	}
	
	if(this.dsFileExec.rowcount == 0) return;
	
	var strSvcId    = "file";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "file=dsFileExec";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";

	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

// 공동모듈(첨부파일) 호출.
this.fnAutoFile = function() {
// 	 var json = {
//          TY_WORK: "DW-01",
//          ATTR01: this.dsSearch.getColumn(0, "CD_SITE"),
//          ATTR02: this.dsSearch.getColumn(0, "YM_WORK"),
//          ATTR03: this.dsSearch.getColumn(0, "NO_DGR"),
//          ATTR04: this.dsList.getColumn(row, "NO_HADOCONT"),
//          ATTR05: this.dsList.getColumn(row, "CD_VENDOR"),
//          ATTR06: "",
//          ID_USER: this.AuthClient.ID_USER
//       }
//       this.gfnAutoForm(json, "fnAutoFile_Callback");
// 	  
	  // Global Dataset 사용이므로 반드시 clearData
      var dsAutoForm = this.objApp.gdsAutoForm;
      dsAutoForm.clearData();
      
	  for(var i = 0; i < this.dsList.rowcount; i++)
	  {
		  if(this.dsList.getColumn(i, "CHK") == "Y" && this.gfnGetFlag(this.dsList, i) != "#")
		  {
			  var nrow = dsAutoForm.addRow();
			  dsAutoForm.setColumn(nrow, "TY_WORK", "DW-01");
			  dsAutoForm.setColumn(nrow, "ATTR01", this.dsSearch.getColumn(0, "CD_SITE"));
			  dsAutoForm.setColumn(nrow, "ATTR02", this.dsSearch.getColumn(0, "YM_WORK"));
			  dsAutoForm.setColumn(nrow, "ATTR03", this.dsSearch.getColumn(0, "NO_DGR"));
			  dsAutoForm.setColumn(nrow, "ATTR04", this.dsList.getColumn(i, "NO_HADOCONT"));
			  dsAutoForm.setColumn(nrow, "ATTR05", this.dsList.getColumn(i, "CD_VENDOR"));
			  dsAutoForm.setColumn(nrow, "ATTR06", "");
			  dsAutoForm.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
		  }
      }
      this.gfnAutoForm("fnAutoFile_Callback");   // callback 생략가능
}

this.fnAutoFile_Callback = function(svcID, errorCode, errorMsg, strArg) {
   if(errorCode == 0) {
		//this.FormBtns.Select.click();
		this.fnExecSgn("SEND");
   } else {
      this.gfnAlert(errorMsg);
   }
}
]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DWBPR_HDGISUNGSGNREQ_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">exec</Col>
            <Col id="SP">DWBPR_HDGISUNGSGNREQ_EXECUTE</Col>
          </Row>
          <Row>
            <Col id="TARGET">combo</Col>
            <Col id="SP">DWBPR_HDGISUNGMONTH_MAX_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">file</Col>
            <Col id="SP">DWBPR_HDLDGRFILE_EXECUTE</Col>
          </Row>
          <Row>
            <Col id="TARGET">save</Col>
            <Col id="SP">DWBPR_HDGISUNGSGNREQ_SAVE</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_SITE" type="STRING" size="256"/>
          <Column id="DS_SITE" type="STRING" size="256"/>
          <Column id="YM_WORK" type="STRING" size="256"/>
          <Column id="NO_DGR" type="STRING" size="256"/>
          <Column id="DS_CONTMETHOD" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CD_SITE"/>
            <Col id="DS_SITE"/>
            <Col id="YM_WORK"/>
            <Col id="NO_DGR"/>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsNO_DGR"/>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfCD_SITE.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_SITE"/>
      <BindItem id="item1" compid="divSearch.form.ctclYM_WORK.form.TextBox" propid="value" datasetid="dsSearch" columnid="YM_WORK"/>
      <BindItem id="item3" compid="divSearch.form.ccfCD_SITE.form.DSTextBox" propid="value" datasetid="dsSearch" columnid="DS_SITE"/>
      <BindItem id="item5" compid="divSearch.form.cboNO_DGR" propid="value" datasetid="dsSearch" columnid="NO_DGR"/>
    </Bind>
  </Form>
</FDL>
