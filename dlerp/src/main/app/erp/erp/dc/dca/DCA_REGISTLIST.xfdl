<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="DCA_REGISTLIST" width="1280" height="720" titletext="New Form" onload="DCA_REGISTLIST_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="1" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg" formscrolltype="none">
          <Layouts>
            <Layout>
              <Static id="staCD_GUBUN" taborder="0" text="등록구분" left="0.0" top="10.0" width="92.0" height="24.0" textDecoration="none" cssclass="sta_WF_SchLabel"/>
              <Combo id="ccbo_Gubun" taborder="1" left="staCD_GUBUN:0.0" top="10.0" width="89" height="24.0" datacolumn="DS_CODE" codecolumn="CD_CODE" value="" onitemchanged="fnSearchInit" text="전체" index="0" innerdataset="dsGubun"/>
              <Static id="sta01" taborder="3" text="업체코드" left="ccbo_Gubun:0.0" top="10.0" width="92.0" height="24.0" textDecoration="none" cssclass="sta_WF_SchLabel"/>
              <Div id="ccfCD_VENDOR" CDTextWidth="70" CodeFindName="DCX_CFVENDOR_DC" taborder="2" left="sta01:0.0" top="10.0" width="300" height="24.0" onclick="Common_onclick" url="cmm::cmmCodeFind.xfdl" text=""/>
              <Static id="staCD_GUBUN00" taborder="4" text="업체구분" left="ccfCD_VENDOR:0.0" top="10.0" width="92.0" height="24.0" textDecoration="none" cssclass="sta_WF_SchLabel"/>
              <Combo id="ccbo_TyGubun" taborder="5" left="staCD_GUBUN00:0.0" top="10.0" width="89" height="24.0" value="ALL" onitemchanged="fnSearchInit" text="전체" index="0" innerdataset="innerdataset" codecolumn="codecolumn" datacolumn="datacolumn">
                <Dataset id="innerdataset">
                  <ColumnInfo>
                    <Column id="codecolumn" size="256"/>
                    <Column id="datacolumn" size="256"/>
                  </ColumnInfo>
                  <Rows>
                    <Row>
                      <Col id="codecolumn">ALL</Col>
                      <Col id="datacolumn">전체</Col>
                    </Row>
                    <Row>
                      <Col id="codecolumn">DC</Col>
                      <Col id="datacolumn">외주</Col>
                    </Row>
                    <Row>
                      <Col id="codecolumn">DM</Col>
                      <Col id="datacolumn">자재</Col>
                    </Row>
                  </Rows>
                </Dataset>
              </Combo>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg" text="">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DCAPR_REGISTLIST_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">exec</Col>
            <Col id="SP">DCZPR_IDMANAGEAPPROVAL_PW_INIT</Col>
          </Row>
          <Row>
            <Col id="TARGET">combo</Col>
            <Col id="SP">DZXPR_CODE_LIST_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">print</Col>
            <Col id="SP">DCAPR_REGIST_HISTORY_PRINT</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsGubun">
        <ColumnInfo>
          <Column id="CD_CODE" type="STRING" size="256"/>
          <Column id="DS_CODE" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_GUBUN" type="STRING" size="256"/>
          <Column id="CD_COSTCLASS" type="STRING" size="256"/>
          <Column id="CD_LICCOST" type="STRING" size="256"/>
          <Column id="CD_LICENSE" type="STRING" size="256"/>
          <Column id="CD_VENDOR" type="STRING" size="256"/>
          <Column id="CD_MODULE" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CD_GUBUN"/>
            <Col id="CD_COSTCLASS"/>
            <Col id="CD_LICCOST"/>
            <Col id="CD_LICENSE"/>
            <Col id="CD_VENDOR"/>
            <Col id="CD_MODULE"/>
          </Row>
        </Rows>
      </Dataset>
    </Objects>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.DCA_REGISTLIST_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	this.fnSetCombo();
	
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
	// Select, Add, Del, Save, Excel, Print.
	// SubSelect, SubAdd, SubDel, SuubSave, SubExcel
	this.FormBtns.Add.set_enable(false);
	this.FormBtns.Save.set_enable(false);
	this.FormBtns.Del.set_enable(false);
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btnDetail = this.gfnFormButtonAdd("Detail", "fnDetail");		// 업체상세정보
	this.btnPeriod = this.gfnFormButtonAdd("btnPeriod", "fnPeriod");		// 업체상세정보
	this.btnReport = this.gfnFormButtonAdd("btnReport", "fnReport");		// 업체상세정보
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {

	this.ccbo_Gubun = this.divSearch.form.ccbo_Gubun;
	//this.ccfCD_BIGKJONG = this.divSearch.form.ccfCD_BIGKJONG;
	//this.ccfCD_KJONG = this.divSearch.form.ccfCD_KJONG;
	this.ccfCD_VENDOR = this.divSearch.form.ccfCD_VENDOR;
	//this.ccfCD_LICENSE = this.divSearch.form.ccfCD_LICENSE;
	
	this.dxGrid = this.divData.form.objGrid;
	
	this.divSearch.form.ccbo_TyGubun.set_value(this.FormInfo.DS_PARAM);
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {

	//this.ccfCD_BIGKJONG.CodeFindName = "DCX_COSTCLASS";
	//this.ccfCD_KJONG.CodeFindName = "DCX_CFLICCOST_ALL";
	this.ccfCD_VENDOR.CodeFindName = "DCX_CFVendor_07";
	this.ccfCD_VENDOR.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	//this.ccfCD_LICENSE.CodeFindName = "CF_CODE_DC_13";	
	//this.ccfCD_BIGKJONG.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	// 그리드 초기화
	this.gfnGridInit(this.dxGrid, this.dsList, "DC", "DCA_REGISTLIST");
	
	// 그리드 더블 클릭 이벤트
	this.dxGrid.addEventHandler("oncelldblclick", this.fnGrid_oncelldblclick, this);
	
};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {

	this.dsSelect = new Dataset();

	this.dsSelect.addColumn("CD_GUBUN", "string");
	this.dsSelect.addColumn("CD_COSTCLASS", "string");
	this.dsSelect.addColumn("CD_LICCOST", "string");
	this.dsSelect.addColumn("CD_LICENSE", "string");
	this.dsSelect.addColumn("CD_VENDOR", "string");
	this.dsSelect.addColumn("CD_MODULE", "string");
	
	this.dsExec = new Dataset();
	this.dsExec.addColumn("CD_VENDOR", "string");
	
	this.dsReport = new Dataset();
	this.dsReport.addColumn("CD_VENDOR", "string");
	this.dsReport.addColumn("DT_INPUT", "string");
	this.dsReport.addColumn("CD_MODULE", "string");
	this.dsReport.addColumn("ID_USER", "string");
};

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();

	this.dsSelect.setColumn(0, "CD_GUBUN", this.dsSearch.getColumn(0, "CD_GUBUN"));
	this.dsSelect.setColumn(0, "CD_COSTCLASS", this.dsSearch.getColumn(0, "CD_COSTCLASS"));
    this.dsSelect.setColumn(0, "CD_LICCOST", this.dsSearch.getColumn(0, "CD_LICCOST"));
    this.dsSelect.setColumn(0, "CD_LICENSE", this.dsSearch.getColumn(0, "CD_LICENSE"));
	this.dsSelect.setColumn(0, "CD_VENDOR", this.dsSearch.getColumn(0, "CD_VENDOR"));
	this.dsSelect.setColumn(0, "CD_MODULE", this.dsSearch.getColumn(0, "CD_MODULE"));
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
}

/*
 *	삭제 버튼
 */
this.fnDel = function() {
}

/*
 *	저장 버튼
 */
this.fnSave = function() {
}

/*
 *	PW재생성 및 메일전송
 */
this.fnExec = function() {

	this.dsExec.clearData();
	
	this.dsExec.addRow();
	
	this.dsExec.setColumn(0, "CD_VENDOR", this.dsList.getColumn(this.dsList.rowposition, "CD_VENDOR"));
	
	if (this.dsExec.rowcount == 0) return;
	
	var strSvcId    = "exec";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "exec=dsExec";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}


/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/
this.fnSelectValidate = function() {
   var validate = true;
   
   return validate;
};

/************************************************************************
 * 콜백 이벤트
 ***********************************************************************
 /
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);
	}
	else if(svcID == "exec") {
		if (errorCode == 0) {			
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "combo") {
		if (errorCode == 0) {			
			this.dsGubun.insertRow(0);		
			this.dsGubun.setColumn(0, "CD_CODE", "");
			this.dsGubun.setColumn(0, "DS_CODE", "전체");
			this.divSearch.form.ccbo_Gubun.set_index(1);
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	if(id == "ccfCD_VENDOR")
	{
		dsUserParam.setColumn(nrow, "CD_GUBUN", this.dsSearch.getColumn(0, "CD_GUBUN"));
		dsUserParam.setColumn(nrow, "CD_MODULE", this.dsSearch.getColumn(0, "CD_MODULE"));
	}

	return true;
}

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
 // 그리드 더블 클릭 이벤트
this.fnGrid_oncelldblclick = function(obj:nexacro.Grid,e:nexacro.GridClickEventInfo)
{
	this.fnDetail();
};

/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.fnSearchInit = function(obj, e) {
	if(e.pretext != e.posttext) {
		this.gfnSetFormStatus(this);
		this.gfnGridClear(this.dxGrid);
	}
}

this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(this.dsList.rowcount != 0){
		if(e.oldvalue != e.newvalue) {
			this.gfnSetFormStatus(this);	// 폼상태 초기화
			this.gfnGridClear(this.dxGrid);	
		}
	}
};


// 업체상세정보 버튼 클릭시 팝업화면 호출
this.fnDetail = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	// 선택된 row가 있을 경우에만 팝업을 띄움
	if (!this.gfnGridIsRow(this.dxGrid)) { return false; }
	
	var param = {};
	param.CD_VENDOR = this.dsList.getColumn(this.dsList.rowposition, "CD_VENDOR");
	param.DS_VENDOR = this.dsList.getColumn(this.dsList.rowposition, "DS_VENDOR");
	param.DT_INPUT = this.dsList.getColumn(this.dsList.rowposition, "DT_INPUT");
	param.SDS_PARAM = this.FormInfo.DS_PARAM;
	// 화면 오픈. 
	// CD_MODULE은 보통 같은 모듈에서 호출하는 경우가 많으니 this.FormInfo.CD_MODULE 사용
	// 타 모듈 화면 호출시 지정할것.
	
	this.gfnFormOpen("DCA", "DCA_REGISTDETAIL", "", param);
}

// PW재생성&메일 버튼 클릭시 이벤트
this.fnInitPW = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	// 선택된 row가 있을 경우에만 팝업을 띄움
	if (!this.gfnGridIsRow(this.dxGrid)) { return false; }
	
	var noSjc = this.dsList.getColumn(this.dsList.rowposition, "NO_SJC");		// 사업자번호
	var dsVendor = this.dsList.getColumn(this.dsList.rowposition, "DS_VENDOR");	// 업체명
	
	this.gfnConfirm("사업자번호 : " + noSjc + "\r\n업체명 : " + dsVendor + "\r\n\r\n해당업체의 전자조달 PW를 재생성하고\r\n메일을 송부하시겠습니까?", "dsList_initPW_callback");
	

}

// PW재생성&메일 버튼 클릭 후 callback
this.dsList_initPW_callback = function(strId, val) 
{
	if(val == true) {
		this.fnExec();
	}	
}

// 신용평가정보 버튼 클릭시 이벤트
this.fnEcredible = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	if (!this.gfnGridIsRow(this.dxGrid)) { return false; }
	
	var url = this.gfnGetConfig("DC", "DS_ECRE_URL");
	var id = this.gfnGetConfig("DC", "DS_ECRE_ID");
	var pw = this.gfnGetConfig("DC", "DS_ECRE_PW");
	
	url = url.replace("{ID}", id);
	url = url.replace("{PWD}", pw);
	url = url.replace("{NO_SJC}", this.dsList.getColumn(this.dsList.rowposition, "NO_SJC")); 
	
	window.open(url);
};


this.fnSetCombo = function() {
	
	this.dsCombo = new Dataset();
	this.dsCombo.addColumn("CD_SYSTEM", "string");
	this.dsCombo.addColumn("CD_TYPE", "string");
	
	this.dsCombo.addRow();
	this.dsCombo.setColumn(0, "CD_SYSTEM", "DC");
	this.dsCombo.setColumn(0, "CD_TYPE", "17");
 	
// 	// 같은 SP 다중건 조회는 row 추가해서
// 	this.dsCombo.addRow();
// 	this.dsCombo.setColumn(1, "CD_SYSTEM", "DC");
// 	this.dsCombo.setColumn(1, "CD_TYPE", "50");
	
	var strSvcId    = "combo";
	var strSvcType  = "select";
	var inProc		= "_dsProc";
	var inData      = "combo=dsCombo";
	var outData     = "dsGubun=combo0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
};

// 협력업체대장출력 버튼 클릭시 이벤트
this.fnRegPrint = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	if (!this.gfnGridIsRow(this.dxGrid)) { return false; }
	var dsparam = this.FormInfo.DS_PARAM;
	var reportpath  = "";
	if(dsparam == "DC"){
		if(this.dsList.getColumn(this.dsList.rowposition, "TY_PRINT") == "1"){
			reportpath  = "/dc/dca/DCA_REGIST_HISTORY_PRINT.ozr";
		}else if(this.dsList.getColumn(this.dsList.rowposition, "TY_PRINT") == "2"){
			reportpath  = "/dc/dca/DCA_REGIST_HISTORY_PRINT2.ozr";
		}
	}else{
		reportpath  = "/dc/dca/DCA_REGIST_HISTORY_PRINT_DM.ozr";
	}
	
	this.dsReport.clearData();
	this.dsReport.addRow();

	this.dsReport.setColumn(0, "CD_VENDOR", this.dsList.getColumn(this.dsList.rowposition, "CD_VENDOR"));
	this.dsReport.setColumn(0, "DT_INPUT", this.dsList.getColumn(this.dsList.rowposition, "DT_INPUT"));
	this.dsReport.setColumn(0, "CD_MODULE", dsparam);
	this.dsReport.setColumn(0, "ID_USER", this.AuthClient.ID_USER);
	
	var inProc		= "_dsProc";
	//var inParam 	= "params=dsReportParam";	// 조회SP이외 사용할 정보
	var inParam 	= "";						// 필요없는 경우 생략
	var inData      = "print=dsReport";
	
	gfnOpenReport(this, reportpath, inProc, inParam, inData);
};


this.fnPeriod = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	this.gfnFormOpen("DCA", "DCA_REGISTPERIOD", "", "", 750, 450);
}

this.fnReport = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	// 선택된 row가 있을 경우에만 팝업을 띄움
	if (!this.gfnGridIsRow(this.dxGrid)) { return false; }
	
	var param = {};
	param.CD_VENDOR = this.dsList.getColumn(this.dsList.rowposition, "CD_VENDOR");
	
	this.gfnFormOpen("DCA", "DCA_REGIST_REPORT", "", param, 420, 180);
}]]></Script>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccbo_Gubun" propid="value" datasetid="dsSearch" columnid="CD_GUBUN"/>
      <BindItem id="item2" compid="divSearch.form.ccfCD_VENDOR.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_VENDOR"/>
      <BindItem id="item1" compid="divSearch.form.ccbo_TyGubun" propid="value" datasetid="dsSearch" columnid="CD_MODULE"/>
    </Bind>
  </Form>
</FDL>
