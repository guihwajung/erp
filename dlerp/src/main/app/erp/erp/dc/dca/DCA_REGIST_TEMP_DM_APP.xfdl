<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="가등록평가(자재)-품의서" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="1" left="0.0" top="10.0" height="78.0" right="0" cssclass="div_SEARCH_Bg" formscrolltype="none">
          <Layouts>
            <Layout>
              <Static id="staYR_REQ" taborder="2" text="평가년도" left="0.0" top="10.0" width="118.0" height="24.0" textDecoration="none" cssclass="sta_WF_SchLabel"/>
              <Static id="staNO_SJC" taborder="0" text="사업자번호" left="0.0" top="staYR_REQ:10.0" width="118.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Static id="staDS_VENDOR" taborder="1" text="회사명" left="staNO_SJC:0.0" top="staYR_REQ:10.0" width="118.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Static id="staCD_LICCOST" taborder="3" text="품목" left="0.0" top="10.0" width="118.0" height="24.0" textDecoration="none" cssclass="sta_WF_SchLabel"/>
              <Combo id="ccboCD_BUMUN" taborder="4" left="staCD_LICCOST:0.0" top="10.0" width="95" height="24.0" innerdataset="dsCD_BUMUN" datacolumn="DS_CODE" codecolumn="CD_CODE" value="미심사" text="미심사" onitemchanged="divSearch_ccboCD_BUMUN_onitemchanged" enable="false"/>
              <Combo id="ccboCD_LICCOST" taborder="5" left="ccboCD_BUMUN:0.0" top="10.0" width="95" height="24.0" innerdataset="dsCD_LICCOST" datacolumn="DS_CODE" codecolumn="CD_CODE" value="미심사" onitemchanged="fnSearchInit" text="미심사" enable="false"/>
              <Static id="staCD_DAM" taborder="6" text="자재팀담당자" left="0.0" top="staYR_REQ:10.0" width="118.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Static id="staTY_GUBUN" taborder="7" text="진행상태" left="staCD_DAM:0.0" top="staYR_REQ:10.0" width="118.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Combo id="ccboCD_DAM" taborder="8" left="staTY_GUBUN:0.0" top="staYR_REQ:10.0" width="95" height="24.0" innerdataset="dsCD_DAM" datacolumn="DS_CODE" codecolumn="CD_CODE" value="미심사" onitemchanged="fnSearchInit" text="미심사" enable="false"/>
              <Combo id="ccboTY_GUBUN" taborder="9" left="ccboCD_DAM:0.0" top="staYR_REQ:10.0" width="95" height="24.0" innerdataset="dsTY_GUBUN" datacolumn="VALUE" codecolumn="CODE" value="0" onitemchanged="fnSearchInit" text="전체" index="0" enable="false"/>
              <Edit id="ctxtNO_SJC" taborder="10" left="ccboTY_GUBUN:0.0" top="staYR_REQ:10.0" width="150" height="24.0" value="" enable="false"/>
              <Edit id="ctxtDS_VENDOR" taborder="11" left="ctxtNO_SJC:0.0" top="staYR_REQ:10.0" width="150" height="24.0" value="" enable="false"/>
              <Div id="ctcYR_REQ" taborder="12" left="0.0" top="10.0" width="100" height="24.0" url="cmm::cmmCalYY.xfdl" text="" enable="false"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Div id="divDataApprLeft" taborder="2" left="0" top="0" background="" height="79" border="1px solid #c9c6c3" width="700">
                <Layouts>
                  <Layout>
                    <Static id="staApprNm" taborder="0" text="자재업체 가등록 품의서" left="0" top="4" textDecoration="none" right="0" background="" bottom="0" font="normal 20pt/normal &quot;Arial&quot;" textAlign="center"/>
                  </Layout>
                </Layouts>
              </Div>
              <Div id="divDataAppr" taborder="1" left="divDataApprLeft:10" top="0" right="0" height="80">
                <Layouts>
                  <Layout>
                    <Grid id="objGridAppr" taborder="0" left="0" top="0" bottom="0" right="0"/>
                  </Layout>
                </Layouts>
              </Div>
              <Grid id="objGrid" taborder="0" left="0" top="divDataAppr:10" bottom="0" right="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();
this.btnAprvCmplClickYn = "N";	// 승인 버튼 클릭시 구분값(승인 처리 완료후에는 Y 로 변경)

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	this.fnSetCombo();
	
	this.ctcYR_REQ.form.TextBox.set_value(this.gfnGetDate().substr(0,4));
	
	// 타화면에서 오픈시 넘어오는 파라미터 처리
	if(!this.gfnIsNull(this.getOwnerFrame().PARAM01) && !this.gfnIsNull(this.getOwnerFrame().PARAM02)) {		
		this.dsSearch.setColumn(0, "NO_SJC", this.getOwnerFrame().PARAM01);
		this.dsSearch.setColumn(0, "TY_MODULE", this.getOwnerFrame().PARAM02);	
		
		this.dsSearch.setColumn(0, "YN_LINK", this.getOwnerFrame().YN_LINK);	// 화면에서 팝업을 호출할경우 N, 링크를 통해서 화면을 오픈할경우 null 이다
		this.dsSearch.setColumn(0, "ID_AP", this.getOwnerFrame().ID_AP);		// 전자결재문서번호		
		
		// 결재상태값 조회 후 그리드 조회한다
		this.fnApprSel();
	}	
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
	this.FormBtns.Add.set_enable(false);
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btnAprvCmpl = this.gfnFormButtonAdd("btnAprvCmpl", "fnAprvCmpl");
	this.btnAprvCnc = this.gfnFormButtonAdd("btnAprvCnc", "fnAprvCnc");
	this.btnAprvInf = this.gfnFormButtonAdd("btnAprvInf", "fnAprvInf");
	this.btnAprvSang = this.gfnFormButtonAdd("btnAprvSang", "fnAprvSang");
	this.btnApCnl = this.gfnFormButtonAdd("btnApCnl", "fnApCnl");
	this.btnDetail = this.gfnFormButtonAdd("btnDetail", "fnDetail");  
};


/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {	
	this.ctcYR_REQ = this.divSearch.form.ctcYR_REQ;
	this.ccboCD_BUMUN = this.divSearch.form.ccboCD_BUMUN;
	this.ccboCD_LICCOST = this.divSearch.form.ccboCD_LICCOST;
	this.ctxtNO_SJC = this.divSearch.form.ctxtNO_SJC;
	this.ctxtDS_VENDOR = this.divSearch.form.ctxtDS_VENDOR;
	this.ccboCD_DAM = this.divSearch.form.ccboCD_DAM;
	
	this.dxGrid = this.divData.form.objGrid;
	
	// 결재관련
	this.dxGridAppr = this.divData.form.divDataAppr.form.objGridAppr;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {

	// 그리드 초기화
	this.gfnGridInit(this.dxGrid, this.dsList, "DC", "DCA_REGIST_TEMP_REQ_DM_LIST");
	//this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforeUserDataSetParam";
	
	// 셀 수정가능 여부
	this.dxGrid.EnterCell = "fnGrid_EnterCell";
	
	// 결재관련
	this.gfnGridInit(this.dxGridAppr, this.dsListAplines, "DZ", "DZR_APLINES_01");
	this.dxGridAppr.set_extendsizetype("none");
	this.dxGridAppr.set_scrollbartype("none default");	// 가로 스크롤이 생기지 않게 셋팅
	var colDS_NOTE = this.dxGridAppr.getBindCellIndex("body", "DS_NOTE");
	this.dxGridAppr.setCellProperty("body", colDS_NOTE, "tooltiptext", "expr:DS_NOTE==''?'':DS_NOTE" );	// 의견컬럼 툴팁추가
};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("NO_SJC", "string");
	this.dsSelect.addColumn("YR_REQ", "string");
	this.dsSelect.addColumn("DS_VENDOR", "string");
	this.dsSelect.addColumn("CD_BUMUN", "string");
	this.dsSelect.addColumn("CD_LICCOST", "string");
	this.dsSelect.addColumn("CD_DAM", "string");

	this.dsUpdate = new Dataset();
	this.dsUpdate.addColumn("NO_ID", "string");
	this.dsUpdate.addColumn("YR_REQ", "string");
	this.dsUpdate.addColumn("NO_SJC", "string");
	this.dsUpdate.addColumn("DS_PRESIDENT", "string");
	this.dsUpdate.addColumn("DS_VENDOR", "string");
	this.dsUpdate.addColumn("CD_BUMUN", "string");
	this.dsUpdate.addColumn("CD_LICCOST", "string");
	this.dsUpdate.addColumn("DS_EMAIL", "string");
	this.dsUpdate.addColumn("NO_HP", "string");

	this.dsDelete = new Dataset();
	this.dsDelete.addColumn("NO_ID", "string");
	this.dsDelete.addColumn("YR_REQ", "string");
	this.dsDelete.addColumn("NO_SJC", "string");
	
	this.dsRegist = new Dataset();
	this.dsRegist.addColumn("YR_REQ", "string");
	this.dsRegist.addColumn("CD_VENDOR", "string");
	this.dsRegist.addColumn("CD_JUDGEKIND", "string");
	this.dsRegist.addColumn("CD_LICCOST", "string");
	this.dsRegist.addColumn("TY_RESULT", "string");
	this.dsRegist.addColumn("RM_ETC_REASON", "string");
	
	this.dsAuto = new Dataset();
	this.dsAuto.addColumn("YR_JUDGE", "string");
	this.dsAuto.addColumn("CD_JUDGEKIND", "string");
	this.dsAuto.addColumn("CD_VENDOR", "string");
	this.dsAuto.addColumn("CD_LICCOST", "string");
	this.dsAuto.addColumn("ID_USER", "string");
	
	// 결재관련
	this.dsExecAppr = new Dataset();
	this.dsExecAppr.addColumn("ID_AP", "string");
	this.dsExecAppr.addColumn("V_PARAM01", "string");
	this.dsExecAppr.addColumn("V_PARAM02", "string");
	this.dsExecAppr.addColumn("V_PARAM03", "string");
	this.dsExecAppr.addColumn("V_PARAM04", "string");
	this.dsExecAppr.addColumn("ST_APPR", "string");
	this.dsExecAppr.addColumn("ID_USER", "string");	
	
	// 결재관련 상태
	this.dsSelectAppr = new Dataset();
	this.dsSelectAppr.addColumn("ID_AP", "string");
	this.dsSelectAppr.addColumn("ID_USER", "string");
	
	// 결재선 그리드
	this.dsAplines = new Dataset();
	this.dsAplines.addColumn("ID_AP", "string");
	
	// 결재선 sap 처리
	this.dsSelectSap = new Dataset();
	this.dsSelectSap.addColumn("IN_AKONT", "string");
	this.dsSelectSap.addColumn("IN_CJKTW", "string");
	this.dsSelectSap.addColumn("IN_EKGRP", "string");
	this.dsSelectSap.addColumn("IN_FDGRV", "string");
	this.dsSelectSap.addColumn("IN_FITYP", "string");
	this.dsSelectSap.addColumn("IN_INTAD", "string");
	this.dsSelectSap.addColumn("IN_J_1KFREPRE", "string");
	this.dsSelectSap.addColumn("IN_J_1KFTBUS", "string");
	this.dsSelectSap.addColumn("IN_J_1KFTIND", "string");
	this.dsSelectSap.addColumn("IN_KTOKK", "string");
	this.dsSelectSap.addColumn("IN_LFURL", "string");
	this.dsSelectSap.addColumn("IN_NAME1", "string");
	this.dsSelectSap.addColumn("IN_ORT01", "string");
	this.dsSelectSap.addColumn("IN_PSTLZ", "string");
	this.dsSelectSap.addColumn("IN_REGIO", "string");
	this.dsSelectSap.addColumn("IN_SORTL", "string");
	this.dsSelectSap.addColumn("IN_STCD1", "string");
	this.dsSelectSap.addColumn("IN_STCD2", "string");
	this.dsSelectSap.addColumn("IN_STRAS", "string");
	this.dsSelectSap.addColumn("IN_TELF1", "string");
	this.dsSelectSap.addColumn("IN_TELF2", "string");
	this.dsSelectSap.addColumn("IN_TLFNS", "string");
	this.dsSelectSap.addColumn("IN_TLFXS", "string");
	this.dsSelectSap.addColumn("IN_ZTERM", "string");	
	this.dsSelectSap.addColumn("IN_SORTL", "string");
	this.dsSelectSap.addColumn("IN_TLFNS", "string");
	this.dsSelectSap.addColumn("IN_TLFXS", "string");
	
	this.dsSapUpdate = new Dataset();
	this.dsSapUpdate.addColumn("NO_ID", "string");
	this.dsSapUpdate.addColumn("CD_VENDOR", "string");
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	//if (!this.fnSelectValidate()) return false;

	this.gfnGridBeforeSelect(this.dxGrid);

	this.dsSelect.clearData();
	this.dsSelect.addRow();

	this.dsSelect.setColumn(0, "NO_SJC", this.dsSearch.getColumn(0, "NO_SJC"));
	this.dsSelect.setColumn(0, "YR_REQ", this.dsSearch.getColumn(0, "YR_REQ"));
	this.dsSelect.setColumn(0, "DS_VENDOR", this.dsSearch.getColumn(0, "DS_VENDOR"));
	this.dsSelect.setColumn(0, "CD_BUMUN", this.dsSearch.getColumn(0, "CD_BUMUN"));
	this.dsSelect.setColumn(0, "CD_LICCOST", this.dsSearch.getColumn(0, "CD_LICCOST"));
	this.dsSelect.setColumn(0, "CD_DAM", this.dsSearch.getColumn(0, "CD_DAM"));

	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	//var nrow = this.gfnGridAdd(this.dxGrid); // top (default), bottom, current
}

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}

/*
 *	저장 버튼
 */
this.fnSave = function() {
	// 그리드 필수항목 체크
	if (!this.gfnGridValidate(this.dxGrid)) return;	

	this.dxGrid.updateToDataset();
	
	this.dsUpdate.clearData();
	this.dsDelete.clearData();
	
	var dt_today = this.gfnGetDate();
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "I":
				var nrow = this.dsInsert.addRow();
				break;
				
			case "U":
				var nrow = this.dsUpdate.addRow();
				this.dsUpdate.setColumn(nrow, "NO_ID", this.dsList.getColumn(i, "NO_ID"));
				this.dsUpdate.setColumn(nrow, "YR_REQ", this.dsList.getColumn(i, "YR_REQ"));
				this.dsUpdate.setColumn(nrow, "NO_SJC", this.dsList.getColumn(i, "NO_SJC"));
				this.dsUpdate.setColumn(nrow, "DS_PRESIDENT", this.dsList.getColumn(i, "DS_PRESIDENT"));
				this.dsUpdate.setColumn(nrow, "DS_VENDOR", this.dsList.getColumn(i, "DS_VENDOR"));
				this.dsUpdate.setColumn(nrow, "CD_BUMUN", this.dsList.getColumn(i, "CD_BUMUN"));
				this.dsUpdate.setColumn(nrow, "CD_LICCOST", this.dsList.getColumn(i, "CD_LICCOST"));
				this.dsUpdate.setColumn(nrow, "DS_EMAIL", this.dsList.getColumn(i, "DS_EMAIL"));
				this.dsUpdate.setColumn(nrow, "NO_HP", this.dsList.getColumn(i, "NO_HP"));
				break;
				
			case "D":
				var nrow = this.dsDelete.addRow();
				this.dsDelete.setColumn(nrow, "NO_ID", this.dsList.getColumn(i, "NO_ID"));
				this.dsDelete.setColumn(nrow, "YR_REQ", this.dsList.getColumn(i, "YR_REQ"));
				this.dsDelete.setColumn(nrow, "NO_SJC", this.dsList.getColumn(i, "NO_SJC"));
				break;
		}
	}
	
	if (this.dsUpdate.rowcount == 0 && this.dsDelete.rowcount == 0) return;
		
	
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "update=dsUpdate delete=dsDelete";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {
	var validate = true;
	
	return validate;
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg, strArg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);
		this.FormBtns.Add.set_enable(false);
		
		// 확장버튼 활성화 or 비활성화 처리
		this.fnBtnEnable();	// 결재관련
		
		// 결재선 조회
		this.fnSelectAppr();
	}
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "regist") {
		if (errorCode == 0) {
			this.fnCallback_callback = function()
			{
				this.FormBtns.Select.click();
			}
			
			var json = this.gfnArgsToJson(strArg);
			strArg = json.gubun;
			
			var msg = "";
			
			if(strArg == "반려") msg = "반려처리가 정상 처리되었습니다.";
			else if(strArg == "합격") msg = "합격처리가 정상 처리되었습니다.";
			else if(strArg == "기준미달") msg = "기준미달처리가 정상 처리되었습니다.";
			
			this.gfnAlert(msg, "fnCallback_callback");
			
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "auto")
	{
		if (errorCode == 0) {
			this.fnCallback_callback = function()
			{
				this.FormBtns.Select.click();
			}
		
			this.gfnAlert("자동평가가 정상 처리되었습니다.", "fnCallback_callback");
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "aplines") {
		if(this.dsListAplines.rowcount > 0) {
			this.dxGridAppr.setRealRowSize(0, 24);
		}		
	}	
	else if (svcID == "apprsel") {	// 결재관련
		// 링크 통해서 화면이 오픈되었을 경우에 this.fnExec() 실행한다
		if(this.dsSearch.getColumn(0, "YN_LINK") != "N"){
			if(this.dsListAppr.rowcount < 1){
				this.fnApprselnullCallback = function() {
					this.getParentContext().close(true);
					return;
				}
				this.gfnAlert("품의서를 열수없습니다.", "fnApprselnullCallback");				
			}
			
			if(this.dsListAppr.getColumn(0,"ST_APPR") == "05"){
				this.fnApprselCallback = function() {
					this.getParentContext().close(true);
				}
				this.gfnAlert("결재가 취소되었습니다.", "fnApprselCallback");
			}else{
				this.fnExecAppr();
			}
		}else{
			this.FormBtns.Select.click();
		}
	}	
	else if(svcID == "execAppr") {	// 결재관련	
		if (errorCode == 0) {
			// 화면 로드시에 링크 통해서 화면이 오픈되었을경우에만 처리후에 조회한다
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	else if (svcID == "apprselSap") {	// 결재관련 sap처리(이 화면만 적용한다) (sap처리1)
		// 결재완료이면 RFC 호출, 혹시 결재완료가 아닐결우에는 RFC 호출이 필요없기때문에 화면을 닫는다(종료처리).
		if(this.dsListAppr.getColumn(0,"ST_APPR") == "03"){
			this.fnSap();
		}else{
			this.getParentContext().close(true);
		}		
	}	
	else if (svcID == "sap") {	// (sap처리2)
		if(this.dsExport.rowcount > 0) {
			if(this.dsExport.getColumn(0, "RTNCD") == "S")
			{
				this.fnSapUadate();
			}
			else
			{
				this.gfnAlert(this.dsExport.getColumn(0, "RTNMSG"));
			}
		}
		else
		{
			this.gfnAlert("반환된 데이터가 없습니다.");
		}
		
	}	
	else if(svcID == "apprSapUpdate") {	// (sap처리3)
		if (errorCode == 0) {
			this.getParentContext().close(true);
		} else {
			this.gfnAlert(errorMsg);
		}
	}
}


// sap 처리
this.fnSap = function() {

	this._dsProcSap.clearData();
	var nrow = this._dsProcSap.addRow();
	this._dsProcSap.setColumn(nrow, "TARGET", "select");
	this._dsProcSap.setColumn(nrow, "SP", "ZVENDOR02_0012");
	
	nrow = this.dsSelectSap.addRow();
	
	// IN 파라미터 셋팅
	this.dsSelectSap.setColumn(nrow, "IN_AKONT", this.dsList.getColumn(0, "AKONT"));
	this.dsSelectSap.setColumn(nrow, "IN_CJKTW", this.dsList.getColumn(0, "CJKTW"));
	this.dsSelectSap.setColumn(nrow, "IN_EKGRP", this.dsList.getColumn(0, "EKGRP"));
	this.dsSelectSap.setColumn(nrow, "IN_FDGRV", this.dsList.getColumn(0, "FDGRV"));
	this.dsSelectSap.setColumn(nrow, "IN_FITYP", this.dsList.getColumn(0, "FITYP"));
	this.dsSelectSap.setColumn(nrow, "IN_INTAD", "");
	this.dsSelectSap.setColumn(nrow, "IN_J_1KFREPRE", this.dsList.getColumn(0, "DS_PRESIDENT"));
	this.dsSelectSap.setColumn(nrow, "IN_J_1KFTBUS", this.dsList.getColumn(0, "DS_UPJONG"));
	this.dsSelectSap.setColumn(nrow, "IN_J_1KFTIND", this.dsList.getColumn(0, "DS_UPTAE"));
	//this.dsSelectSap.setColumn(nrow, "IN_KTOKK", this.dsList.getColumn(0, "KTOKK"));
	this.dsSelectSap.setColumn(nrow, "IN_KTOKK", "HD01");
	this.dsSelectSap.setColumn(nrow, "IN_LFURL", this.dsList.getColumn(0, "DS_EMAIL"));
	this.dsSelectSap.setColumn(nrow, "IN_NAME1", this.dsList.getColumn(0, "DS_VENDOR"));
	this.dsSelectSap.setColumn(nrow, "IN_ORT01", this.dsList.getColumn(0, "DS_REGION"));
	this.dsSelectSap.setColumn(nrow, "IN_PSTLZ", this.dsList.getColumn(0, "NO_ZIP"));
	this.dsSelectSap.setColumn(nrow, "IN_REGIO", this.dsList.getColumn(0, "DS_REGION"));
	this.dsSelectSap.setColumn(nrow, "IN_STCD1", this.dsList.getColumn(0, "CD_DAEPYO"));
	this.dsSelectSap.setColumn(nrow, "IN_STCD2", this.dsList.getColumn(0, "NO_SJC"));
	this.dsSelectSap.setColumn(nrow, "IN_STRAS", this.dsList.getColumn(0, "DS_ADDR"));
	this.dsSelectSap.setColumn(nrow, "IN_TELF1", this.dsList.getColumn(0, "TELF1"));
	this.dsSelectSap.setColumn(nrow, "IN_TELF2", "");
	this.dsSelectSap.setColumn(nrow, "IN_TLFNS", "");
	this.dsSelectSap.setColumn(nrow, "IN_TLFXS", "");
	this.dsSelectSap.setColumn(nrow, "IN_ZTERM", this.dsList.getColumn(0, "ZTERM"));	
	this.dsSelectSap.setColumn(nrow, "IN_SORTL", this.dsList.getColumn(0, "DS_VENDOR"));
	//this.dsSelectSap.setColumn(nrow, "IN_TLFNS", this.dsList.getColumn(0, "TLFNS"));
	//this.dsSelectSap.setColumn(nrow, "IN_TLFXS", this.dsList.getColumn(0, "TLFXS"));

	// SAP 호출
	var strSvcId    = "sap";
	var strSvcType  = "sap";
	var inProc		= "_dsProcSap";
	var inData      = "select=dsSelectSap";
	var outData     = "dsExport=export";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	sap 호출 처리후 저장
 */
this.fnSapUadate = function() {

	this.dsSapUpdate.clearData();
	
	this.dsSapUpdate.addRow();
	
	this.dsSapUpdate.setColumn(0, "NO_ID", this.dsList.getColumn(0, "NO_ID"));
	// 거래처 등록(SAP)에서 돌아온 값을 update 해준다.
	this.dsSapUpdate.setColumn(0, "CD_VENDOR", this.dsExport.getColumn(0, "RTNCD1"));
	//this.dsSapUpdate.setColumn(0, "CD_VENDOR", this.dsList.getColumn(0, "CD_VENDOR"));
	
	if (this.dsSapUpdate.rowcount == 0) return;
	
	var strSvcId    = "apprSapUpdate";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "appr_sap_update=dsSapUpdate";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}
/***********************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {

	return true;
}

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
this.fnGrid_BeforeUserDataSetParam = function(id, dsUserParam, nrow) {	

	return true;
}

// cell 클릭했을때 이벤트(해당 cell에 대한 이벤트를 건다)
this.fnGrid_EnterCell = function(obj:nexacro.Grid, row, cell) {
	return false;	
}
/************************************************************************
 * 기타 이벤트
 ************************************************************************/
//미등록사승인요청
this.fnInsertDLG = function() {

   var nRow = this.dsList.rowposition;
   var param = {};
   
   this.gfnFormOpenNonAuth("DCA", "DCA_REGIST_TEMP_REQ_DM_DLG", "fnInsertDLG_callback", param, "570", "380");
   
}

this.fnInsertDLG_callback = function(svcID, value)
{	
	if(value == true) 
	{
		this.FormBtns.Select.click();
	}	
}


this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
	}
};

this.fnSetCombo = function()
{
	this.dsCombo = new Dataset();
	this.dsCombo.addColumn("CD_SYSTEM", "string");
	this.dsCombo.addColumn("CD_TYPE", "string");

	//부문
	this.dsCombo.addRow();
	this.dsCombo.setColumn(0, "CD_SYSTEM", "DM");
	this.dsCombo.setColumn(0, "CD_TYPE", "H01");
	
	//담당자
	this.dsCombo.addRow();
	this.dsCombo.setColumn(1, "CD_SYSTEM", "DM");
	this.dsCombo.setColumn(1, "CD_TYPE", "H07");
	
	var strSvcId    = "combo";
	var strSvcType  = "select";
	var inProc		= "_dsProc";
	var inData      = "combo=dsCombo";
	var outData     = "dsCD_BUMUN=combo0 dsCD_DAM=combo1";
	var strArg      = "";
	var callBackFnc = "fnCallbackCombo";

	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

this.fnCallbackCombo = function(svcID, errorCode, errorMsg)
{
	if(svcID == "combo") {		
		this.dsCD_BUMUN.insertRow(0);		
		this.dsCD_BUMUN.setColumn(0, "CD_CODE", "");
		this.dsCD_BUMUN.setColumn(0, "DS_CODE", "전체");
		this.divSearch.form.ccboCD_BUMUN.set_index(0);
		
		this.dsCD_DAM.insertRow(0);		
		this.dsCD_DAM.setColumn(0, "CD_CODE", "");
		this.dsCD_DAM.setColumn(0, "DS_CODE", "전체");
 		this.divSearch.form.ccboCD_DAM.set_index(0);
	}
};

this.fnSetCombo1 = function(cd_bumun)
{
   this.dsCombo1 = new Dataset();
   this.dsCombo1.addColumn("CD_BUMUN", "string");

   //품목
   this.dsCombo1.addRow();
   this.dsCombo1.setColumn(0, "CD_BUMUN", cd_bumun);
   
   var strSvcId    = "combo1";
   var strSvcType  = "select";
   var inProc      = "_dsProc";
   var inData      = "combo1=dsCombo1";
   var outData     = "dsCD_LICCOST=combo10";
   var strArg      = "";
   var callBackFnc = "fnCallbackCombo1";

   this.gfnTransaction( strSvcId ,    // transaction을 구분하기 위한 svc id값
                  strSvcType ,    // transaction을 요청할 구분
                  inProc,         // Procedure 정보 Dataset 이름
                  inData ,       // 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
                  outData ,       // 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
                  strArg,       // 입력값으로 보낼 arguments, strFormData="20120607"
                  callBackFnc); // 통신방법 정의 [생략가능]
}

this.fnCallbackCombo1 = function(svcID, errorCode, errorMsg)
{
	if(svcID == "combo1") {		

		this.dsCD_LICCOST.insertRow(0);		
		this.dsCD_LICCOST.setColumn(0, "CD_CODE", "");
		this.dsCD_LICCOST.setColumn(0, "DS_CODE", "전체");
	}
};

this.divSearch_ccboCD_BUMUN_onitemchanged = function(obj:nexacro.Combo,e:nexacro.ItemChangeEventInfo)
{
   if(e.prevalue != e.postvalue) {
      this.fnSetCombo1(e.postvalue);
   }
};

this.fnDetail = function() {
	var param = {};
	
	param.YR_JUDGE = this.dsSearch.getColumn(0, "YR_REQ");
	param.CD_VENDOR = this.dsList.getColumn(this.dsList.rowposition, "CD_VENDOR");
	param.DS_VENDOR = this.dsList.getColumn(this.dsList.rowposition, "DS_VENDOR");
	param.CD_LICCOST = this.dsList.getColumn(this.dsList.rowposition, "CD_LICCOST");
	param.CD_JUDGEKIND = "2019SUNEW";
	
	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DCA_JUDGE", "fnDetail_callback", param);
}

this.fnDetail_callback = function(strID, val)
{
	if(val == true)
	{
		this.FormBtns.Select.click();
	}
}


// 합격, 반려, 기준미달
this.fnRegist = function(gubun)
{
	this.dsRegist.clearData();
	
	for(var i = 0; i < this.dsList.rowcount; i++)
	{
		if(this.dsList.getColumn(i, "CHK") == "Y")
		{
			var nrow = this.dsRegist.addRow();
			this.dsRegist.setColumn(nrow, "YR_REQ", this.dsList.getColumn(i, "YR_REQ"));
			this.dsRegist.setColumn(nrow, "CD_VENDOR", this.dsList.getColumn(i, "CD_VENDOR"));
			this.dsRegist.setColumn(nrow, "CD_JUDGEKIND", this.dsList.getColumn(i, "CD_JUDGEKIND"));
			this.dsRegist.setColumn(nrow, "CD_LICCOST", this.dsList.getColumn(i, "CD_LICCOST"));
			this.dsRegist.setColumn(nrow, "TY_RESULT", gubun);
			this.dsRegist.setColumn(nrow, "RM_ETC_REASON", this.dsList.getColumn(i, "RM_ETC_REASON"));
		}
	}
	
	if (this.dsRegist.rowcount == 0) return;
		
	var strSvcId    = "regist";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "regist=dsRegist";
	var outData     = "";
	var strArg      = "gubun=" + gubun;
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

this.fnReject = function() {
	this.gfnConfirm("반려 처리를 진행하시겠습니까?","fnReject_callback");
}

this.fnReject_callback = function(strID, val)
{
	if(val == true)
	{
		this.fnRegist("반려");
	}
}

this.fnLess = function() {
	this.gfnConfirm("기준미달 처리를 진행하시겠습니까?","fnLess_callback");
}

this.fnLess_callback = function(strID, val)
{
	if(val == true)
	{
		this.fnRegist("기준미달");
	}
}

this.fnPass = function() {
	this.gfnConfirm("합격 처리를 진행하시겠습니까?","fnPass_callback");
}

this.fnPass_callback = function(strID, val)
{
	if(val == true)
	{
		this.fnRegist("합격");
	}
}

this.fnAutoJudge = function() {
	this.gfnConfirm("자동평가를 진행하시겠습니까?","fnAutoJudge_callback");
}

this.fnAutoJudge_callback = function(strID, val)
{
	if(val == true)
	{
		this.fnAuto();
	}
}


this.fnAuto = function()
{
	this.dsAuto.clearData();
	for(var i = 0; i < this.dsList.rowcount; i++)
	{
		if(this.dsList.getColumn(i, "CHK") == "Y")
		{
			var nrow = this.dsAuto.addRow();
			
			this.dsAuto.setColumn(nrow, "YR_JUDGE", this.dsList.getColumn(i, "YR_REQ"));
			this.dsAuto.setColumn(nrow, "CD_JUDGEKIND", "");
			this.dsAuto.setColumn(nrow, "CD_VENDOR", this.dsList.getColumn(i, "CD_VENDOR"));
			this.dsAuto.setColumn(nrow, "CD_LICCOST", this.dsList.getColumn(i, "CD_LICCOST"));
			this.dsAuto.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
		}
	}
	
	if (this.dsAuto.rowcount == 0) return;
		
	var strSvcId    = "auto";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "auto=dsAuto";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}




//*** 아래는 결재관련 소스 ***//

 // 승인 버튼 클릭 이벤트
 this.fnAprvCmpl = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	// 선택된 row가 있을 경우에만 팝업을 띄움
	//if (!this.gfnGridIsRow(this.dxGrid)) { return false; }

	var param = {};
	
	param.ID_AP = this.dsSearch.getColumn(0, "ID_AP");
	param.V_PARAM01 = this.dsSearch.getColumn(0, "NO_SJC");
	param.V_PARAM02 = this.dsSearch.getColumn(0,"TY_MODULE");
	param.V_PARAM03 = "";
	param.V_PARAM04 = "";
	param.ST_APPR = "03";
	
	this.btnAprvCmplClickYn = "Y";

	this.gfnFormOpenNonAuth("DZR", "DZR_AP_NOTE", "fnAprvDialogCallback", param, 430, 210);
}

 // 반려 버튼 클릭 이벤트
 this.fnAprvCnc = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	// 선택된 row가 있을 경우에만 팝업을 띄움
	//if (!this.gfnGridIsRow(this.dxGrid)) { return false; }
	
	var param = {};
	
	param.ID_AP = this.dsSearch.getColumn(0, "ID_AP");
	param.V_PARAM01 = this.dsSearch.getColumn(0, "NO_SJC");
	param.V_PARAM02 = this.dsSearch.getColumn(0,"TY_MODULE");
	param.V_PARAM03 = "";
	param.V_PARAM04 = "";
	param.ST_APPR = "04";

	this.gfnFormOpenNonAuth("DZR", "DZR_AP_NOTE", "fnAprvDialogCallback", param, 430, 210);
}

 // 결재취소 버튼 클릭 이벤트
 this.fnApCnl = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	// 선택된 row가 있을 경우에만 팝업을 띄움
	//if (!this.gfnGridIsRow(this.dxGrid)) { return false; }
	
	var param = {};
	
	param.ID_AP = this.dsSearch.getColumn(0, "ID_AP");
	param.V_PARAM01 = this.dsSearch.getColumn(0, "NO_SJC");
	param.V_PARAM02 = this.dsSearch.getColumn(0,"TY_MODULE");
	param.V_PARAM03 = "";
	param.V_PARAM04 = "";
	param.ST_APPR = "05";

	this.gfnFormOpenNonAuth("DZR", "DZR_AP_NOTE", "fnAprvDialogCallback", param, 430, 210);
}


this.fnAprvDialogCallback = function(svcID, value) {
	// 리턴값	
	if(value){			
		// 승인처리 후에는 sap 처리를 한번더 해준다
		if(this.btnAprvCmplClickYn == "Y"){
			this.btnAprvCmplClickYn = "N";	// 초기화
			
			this.fnApprSelSap();
		}else{
			this.getParentContext().close(true);
		}
	}else{
		this.btnAprvCmplClickYn = "N";
	}
};

// sap관련, 승인처리 후 결재상태값 조회
this.fnApprSelSap = function() {
	this.dsSelectAppr.clearData();
	this.dsSelectAppr.addRow();	
	
	this.dsSelectAppr.setColumn(0, "ID_AP", this.dsSearch.getColumn(0, "ID_AP"));	
	this.dsSelectAppr.setColumn(0, "ID_USER", this.AuthClient.ID_USER);

	var strSvcId    = "apprselSap";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "appr_select=dsSelectAppr";
	var outData     = "dsListAppr=appr_select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

 // 결재정보 버튼 클릭 이벤트
 this.fnAprvInf = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	// 선택된 row가 있을 경우에만 팝업을 띄움
	//if (!this.gfnGridIsRow(this.dxGrid)) { return false; }
		
	var param = {};
	
	param.ID_AP = this.dsListAppr.getColumn(0, "ID_AP");	

	this.gfnFormOpenNonAuth("DZR", "DZR_APLINES", "", param, 830, 400);
}


// 결제상신
 this.fnAprvSang = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	//if (!this.gfnGridIsRow(this.dxGrid)) { return false; }

	var param = {};
	var nRow = this.dsList.rowposition;
	
	param.ID_AP_TYPE = "DC09";
	param.V_PARAM01 = this.dsSearch.getColumn(0, "NO_SJC");
	param.V_PARAM02 = this.dsSearch.getColumn(0,"TY_MODULE");
	param.V_PARAM03 = "";
	param.V_PARAM04 = "";
	param.DS_TITLE =  "자재업체 가등록 품의서";

	this.gfnFormOpenNonAuth("DZR", "DZR_AP_REQUEST", "fnDialogCallback", param, 900, 650);
 }
 
 this.fnDialogCallback = function(svcID, value) {
	// 리턴값
	if(value == true){
		this.getParentContext().close(true);
	}
};



// 결재상태값 조회
this.fnApprSel = function() {
	this.dsSelectAppr.clearData();
	this.dsSelectAppr.addRow();	
	
	this.dsSelectAppr.setColumn(0, "ID_AP", this.dsSearch.getColumn(0, "ID_AP"));	
	this.dsSelectAppr.setColumn(0, "ID_USER", this.AuthClient.ID_USER);

	var strSvcId    = "apprsel";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "appr_select=dsSelectAppr";
	var outData     = "dsListAppr=appr_select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

// 확장버튼 활성화 or 비활성화처리
this.fnBtnEnable = function() {
	if(this.gfnIsNull(this.dsListAppr.getColumn(0, "ID_AP"))){	// 결재번호
		this.btnAprvCmpl.set_enable(false);		// 승인(03)
		this.btnAprvCnc.set_enable(false);		// 반려(04)
		this.btnApCnl.set_enable(false);		// 결제취소(05)
		this.btnAprvInf.set_enable(false);		// 결제정보
		this.btnAprvSang.set_enable(true);		// 결제상신
	}else{
		if(this.dsListAppr.getColumn(0, "ST_APPR") == "01"){	// 결재상태
			if(this.dsListAppr.getColumn(0, "YN_USER") == "Y"){				
				if(this.dsListAppr.getColumn(0, "YN_APP") == "Y"){
					this.btnAprvCmpl.set_enable(true);
				}else{
					this.btnAprvCmpl.set_enable(false);
				}
				
				this.btnAprvCnc.set_enable(false);
				this.btnApCnl.set_enable(true);				
			}else{		
				if(this.dsListAppr.getColumn(0, "YN_APP") == "Y"){
					this.btnAprvCmpl.set_enable(true);
					this.btnAprvCnc.set_enable(true);
				}else{
					this.btnAprvCmpl.set_enable(false);
					this.btnAprvCnc.set_enable(false);
				}
				
				this.btnApCnl.set_enable(false);				
			}
			
			this.btnAprvInf.set_enable(true);
			this.btnAprvSang.set_enable(false);			
		}else if(this.dsListAppr.getColumn(0, "ST_APPR") == "02"){
			if(this.dsListAppr.getColumn(0, "YN_USER") == "Y"){				
				if(this.dsListAppr.getColumn(0, "YN_APP") == "Y"){
					this.btnAprvCmpl.set_enable(true);
				}else{
					this.btnAprvCmpl.set_enable(false);
				}
				
				this.btnAprvCnc.set_enable(false);
				this.btnApCnl.set_enable(false);				
			}else{		
				if(this.dsListAppr.getColumn(0, "YN_APP") == "Y"){
					this.btnAprvCmpl.set_enable(true);
					this.btnAprvCnc.set_enable(true);
				}else{
					this.btnAprvCmpl.set_enable(false);
					this.btnAprvCnc.set_enable(false);
				}
				
				this.btnApCnl.set_enable(false);				
			}
			
			this.btnAprvInf.set_enable(true);
			this.btnAprvSang.set_enable(false);
		}else if(this.dsListAppr.getColumn(0, "ST_APPR") == "03"){
			this.btnAprvCmpl.set_enable(false);
			this.btnAprvCnc.set_enable(false);
			this.btnApCnl.set_enable(false);
			this.btnAprvInf.set_enable(true);
			this.btnAprvSang.set_enable(false);
		}else if(this.dsListAppr.getColumn(0, "ST_APPR") == "04"){
			this.btnAprvCmpl.set_enable(false);
			this.btnAprvCnc.set_enable(false);
			this.btnApCnl.set_enable(false);
			this.btnAprvInf.set_enable(true);
			this.btnAprvSang.set_enable(true);
			this.btnAprvSang.set_text("재상신");	// 반려 상태일때는 결재상신 버튼이 재상신으로 셋팅한다
		}else if(this.dsListAppr.getColumn(0, "ST_APPR") == "05"){
			this.btnAprvCmpl.set_enable(false);
			this.btnAprvCnc.set_enable(false);
			this.btnApCnl.set_enable(false);
			this.btnAprvInf.set_enable(false);
			this.btnAprvSang.set_enable(true);
		}
	}	
}


/*
 *	결재완료 or 취소 처리
 */
this.fnExecAppr = function() {

	this.dsExecAppr.clearData();
	
	this.dsExecAppr.addRow();
	
	this.dsExecAppr.setColumn(0, "ID_AP", this.dsSearch.getColumn(0, "ID_AP"));
	this.dsExecAppr.setColumn(0, "V_PARAM01", this.dsSearch.getColumn(0, "NO_SJC"));
	this.dsExecAppr.setColumn(0, "V_PARAM02", this.dsSearch.getColumn(0, "TY_MODULE"));
	this.dsExecAppr.setColumn(0, "V_PARAM03", "");
	this.dsExecAppr.setColumn(0, "V_PARAM04", "");
	this.dsExecAppr.setColumn(0, "ST_APPR", "02");
	this.dsExecAppr.setColumn(0, "ID_USER", this.AuthClient.ID_USER);
	
	if (this.dsExecAppr.rowcount == 0) return;
	
	var strSvcId    = "execAppr";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "execAppr=dsExecAppr";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

 /*
  *	결재선그리드 조회
  */
this.fnSelectAppr = function() {	
	this.dsAplines.clearData();
	this.dsAplines.addRow();
	
	this.dsAplines.setColumn(0, "ID_AP", this.dsSearch.getColumn(0, "ID_AP"));
		
	var strSvcId    = "aplines";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "aplines=dsAplines";
	var outData     = "dsListAplines=aplines0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DCAPR_REGIST_TEMP_REQ_LIST_DM_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">update</Col>
            <Col id="SP">DCAPR_REGIST_TEMP_REQ_LIST_DM_UPDATE</Col>
          </Row>
          <Row>
            <Col id="TARGET">delete</Col>
            <Col id="SP">DCAPR_REGIST_TEMP_REQ_LIST_DM_DELETE</Col>
          </Row>
          <Row>
            <Col id="TARGET">combo</Col>
            <Col id="SP">DZXPR_COMBO_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">combo1</Col>
            <Col id="SP">DMXPR_LICCOST_COMBO_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">regist</Col>
            <Col id="SP">DCAPR_JUDGE_REGIST_TEMP_RESULT_UPDATE</Col>
          </Row>
          <Row>
            <Col id="TARGET">auto</Col>
            <Col id="SP">DCAPR_REGIST_TEMP_REQ_AUTO_JUDGE_DC</Col>
          </Row>
          <Row>
            <Col id="TARGET">appr_select</Col>
            <Col id="SP">DZRPR_AP_STATE_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">aplines</Col>
            <Col id="SP">DZRPR_APPLINES_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">execAppr</Col>
            <Col id="SP">DZZPR_APPROVAL_CALLBACK</Col>
          </Row>
          <Row>
            <Col id="TARGET">appr_select_sap</Col>
            <Col id="SP">DZRPR_AP_STATE_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">appr_sap_update</Col>
            <Col id="SP">DCAPR_REGIST_TEMP_REQ_SAPVENDORCODE_UPDATE</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="NO_SJC" type="STRING" size="256"/>
          <Column id="YR_REQ" type="STRING" size="256"/>
          <Column id="DS_VENDOR" type="STRING" size="256"/>
          <Column id="CD_LICCOST" type="STRING" size="256"/>
          <Column id="CD_DAM" type="STRING" size="256"/>
          <Column id="CD_BUMUN" type="STRING" size="256"/>
          <Column id="YN_LINK" type="STRING" size="256"/>
          <Column id="ID_AP" type="STRING" size="256"/>
          <Column id="TY_MODULE" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TY_SELECT">미심사</Col>
            <Col id="CD_LICCOST"/>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsCD_DAM"/>
      <Dataset id="dsCD_BUMUN"/>
      <Dataset id="dsCD_LICCOST">
        <ColumnInfo>
          <Column id="CD_CODE" type="STRING" size="256"/>
          <Column id="DS_CODE" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CD_CODE"/>
            <Col id="DS_CODE">전체</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsTY_GUBUN">
        <ColumnInfo>
          <Column id="CODE" type="STRING" size="256"/>
          <Column id="VALUE" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="VALUE">전체</Col>
            <Col id="CODE">0</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsListAppr">
        <ColumnInfo>
          <Column id="ID_AP" type="STRING" size="256"/>
          <Column id="ID_AP_TYPE" type="STRING" size="256"/>
          <Column id="DS_AP_TYPE" type="STRING" size="256"/>
          <Column id="DS_TITLE" type="STRING" size="256"/>
          <Column id="ST_APPR" type="STRING" size="256"/>
          <Column id="YN_USER" type="STRING" size="256"/>
          <Column id="YN_APP" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="dsListAplines" useclientlayout="false"/>
      <Dataset id="_dsProcSap">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="dsExport"/>
    </Objects>
    <Bind>
      <BindItem id="item1" compid="divSearch.form.ctxtNO_SJC" propid="value" datasetid="dsSearch" columnid="NO_SJC"/>
      <BindItem id="item2" compid="divSearch.form.ctxtDS_VENDOR" propid="value" datasetid="dsSearch" columnid="DS_VENDOR"/>
      <BindItem id="item3" compid="divSearch.form.ccboCD_BUMUN" propid="value" datasetid="dsSearch" columnid="CD_BUMUN"/>
      <BindItem id="item4" compid="divSearch.form.ccboCD_LICCOST" propid="value" datasetid="dsSearch" columnid="CD_LICCOST"/>
      <BindItem id="item5" compid="divSearch.form.ccboCD_DAM" propid="value" datasetid="dsSearch" columnid="CD_DAM"/>
      <BindItem id="item6" compid="divSearch.form.ctcYR_REQ.form.TextBox" propid="value" datasetid="dsSearch" columnid="YR_REQ"/>
      <BindItem id="item0" compid="divSearch.form.ccboTY_GUBUN" propid="value" datasetid="dsSearch" columnid="TY_GUBUN"/>
    </Bind>
  </Form>
</FDL>
