<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="DWA_SILHENG" width="1280" height="720" titletext="New Form" onload="DWA_SILHENG_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg" formscrollbartype="auto auto">
          <Layouts>
            <Layout>
              <Static id="sta00" taborder="1" text="평가년도" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ctcYY_WORK" taborder="0" left="sta00:0.0" top="10.0" width="100" height="24.0" url="cmm::cmmCalYY.xfdl"/>
              <Div id="ccfMagam" CDTextWidth="50" taborder="2" left="ctcYY_WORK:0.0" top="10.0" width="100" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
              <Static id="sta01" taborder="3" text="현장코드" left="ccfMagam:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Div id="ccfDz" CodeFindName="DZX_CFSITE" CDTextWidth="50" taborder="4" left="sta01:0.0" top="10.0" width="200" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DCDPR_EVALUEJUDGER_SITE_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">update</Col>
            <Col id="SP">DCDPR_EVALUEJUDGER_SITE_UPDATE</Col>
          </Row>
          <Row>
            <Col id="TARGET">insert</Col>
            <Col id="SP">DCDPR_EVALUEJUDGER_SITE_INSERT</Col>
          </Row>
          <Row>
            <Col id="TARGET">delete</Col>
            <Col id="SP">DCDPR_EVALUEJUDGER_SITE_DELETE</Col>
          </Row>
          <Row>
            <Col id="TARGET">insert1</Col>
            <Col id="SP">DCDPR_EVALUEJUDGER_SITE_INSERT_MULTI</Col>
          </Row>
          <Row>
            <Col id="TARGET">delete1</Col>
            <Col id="SP">DCDPR_EVALUEJUDGER_SITE_ALL_DELETE</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="YR_EVALUE" type="STRING" size="256"/>
          <Column id="NO_SEQ" type="STRING" size="256"/>
          <Column id="CD_SITE" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="YR_EVALUE"/>
            <Col id="NO_SEQ"/>
            <Col id="CD_SITE"/>
          </Row>
        </Rows>
      </Dataset>
    </Objects>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.DWA_SILHENG_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();	
	
	var dt = new Date();
	this.dsSearch.setColumn(0, "YR_EVALUE", dt.getFullYear());
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
	// Select, Add, Del, Save, Excel, Print
	// SubSelect, SubAdd, SubDel, SuubSave, SubExcel
};

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btn1 = this.gfnFormButtonAdd("btnLoad", "fnLoad");
	this.btn2 = this.gfnFormButtonAdd("btnCancel", "fnCancel");
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.ccfMagam = this.divSearch.form.ccfMagam;
	this.ccfDz = this.divSearch.form.ccfDz;
	this.dxGrid = this.divData.form.objGrid;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	this.ccfMagam.CodeFindName = "DCX_CFEVALUE_MAGAM";
	//this.ccfDz.CodeFindName = "DZX_CFSITE";
	this.ccfMagam.form.DSTextBox.set_width("0");
	this.ccfMagam.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	//this.ccfDz.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	
	this.gfnGridInit(this.dxGrid, this.dsList, "DC", "DCD_EVALUEJUDGER_SITE");
	this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforuserDataSetParam";
	this.dxGrid.AfterCDTextChanged = "fnGrid_AfterCDTextChanged";
	
};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("YR_EVALUE", "string");
	this.dsSelect.addColumn("NO_SEQ", "string");
	this.dsSelect.addColumn("CD_SITE", "string");
	this.dsSelect.addColumn("CD_VENDOR", "string");
	
	this.dsInsert = new Dataset();
	this.dsInsert.addColumn("CD_SITE", "string");
	this.dsInsert.addColumn("CD_VENDOR", "string");
	this.dsInsert.addColumn("YR_EVALUE", "string");
	this.dsInsert.addColumn("NO_SEQ", "string");
	this.dsInsert.addColumn("CD_EVALUEKIND", "string");
	this.dsInsert.addColumn("ID_EVALUE", "string");
	this.dsInsert.addColumn("PN_BELONG", "string");
	this.dsInsert.addColumn("DS_EVALUE", "string");
	this.dsInsert.addColumn("RM_BIGO", "string");
	this.dsInsert.addColumn("TY_DEPT", "string");

	this.dsUpdate = new Dataset();
	this.dsUpdate.addColumn("CD_SITE", "string");
	this.dsUpdate.addColumn("CD_VENDOR", "string");
	this.dsUpdate.addColumn("YR_EVALUE", "string");
	this.dsUpdate.addColumn("NO_SEQ", "string");
	this.dsUpdate.addColumn("CD_EVALUEKIND", "string");
	this.dsUpdate.addColumn("ID_EVALUE", "string");
	this.dsUpdate.addColumn("PN_BELONG", "string");
	this.dsUpdate.addColumn("DS_EVALUE", "string");
	this.dsUpdate.addColumn("RM_BIGO", "string");
	this.dsUpdate.addColumn("TY_DEPT", "string");
	this.dsUpdate.addColumn("CD_SITE_ORG", "string");
	this.dsUpdate.addColumn("CD_VENDOR_ORG", "string");
	this.dsUpdate.addColumn("YR_EVALUE_ORG", "string");
	this.dsUpdate.addColumn("NO_SEQ_ORG", "string");
	this.dsUpdate.addColumn("CD_EVALUEKIND_ORG", "string");
	this.dsUpdate.addColumn("ID_EVALUE_ORG", "string");

	this.dsDelete = new Dataset();
	this.dsDelete.addColumn("CD_SITE", "string");
	this.dsDelete.addColumn("CD_VENDOR", "string");
	this.dsDelete.addColumn("YR_EVALUE", "string");
	this.dsDelete.addColumn("NO_SEQ", "string");
	this.dsDelete.addColumn("CD_EVALUEKIND", "string");
	this.dsDelete.addColumn("ID_EVALUE", "string");
	
	this.dsInsert1 = new Dataset();
	this.dsInsert1.addColumn("YR_EVALUE", "string");
	this.dsInsert1.addColumn("NO_SEQ", "string");
	this.dsInsert1.addColumn("CD_SITE", "string");

	this.dsDelete1 = new Dataset();
	this.dsDelete1.addColumn("CD_SITE", "string");
	this.dsDelete1.addColumn("CD_VENDOR", "string");
	this.dsDelete1.addColumn("YR_EVALUE", "string");
	this.dsDelete1.addColumn("NO_SEQ", "string");

}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if(!this.fnValidate()) return;

	this.dsSelect.clearData();
	this.dsSelect.addRow();
	this.dsSelect.setColumn(0, "YR_EVALUE", this.dsSearch.getColumn(0, "YR_EVALUE"));
	this.dsSelect.setColumn(0, "NO_SEQ", this.ccfMagam.form.CDTextBox.value);
	this.dsSelect.setColumn(0, "CD_SITE", this.ccfDz.form.CDTextBox.value);
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// trabsaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	var nrow = this.gfnGridAdd(this.dxGrid);
}

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}

/*
 *	저장 버튼
 */
this.fnSave = function() {
			// 그리드 필수항목 체크
	if (!this.gfnGridValidate(this.dxGrid)) return;	

	this.dxGrid.updateToDataset();
	
	this.dsInsert.clearData();
	this.dsUpdate.clearData();
	this.dsDelete.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		
		if(flag == "U" && this.gfnIsNull(this.dsList.getColumn(i, "CD_SITE_ORG"))){
			flag = "I";
		}
		switch(flag) {
		
			case "I":
				
				var nrow = this.dsInsert.addRow();
				
				this.dsInsert.setColumn(nrow, "CD_SITE", this.dsList.getColumn(i, "CD_SITE"));
				this.dsInsert.setColumn(nrow, "CD_VENDOR", this.dsList.getColumn(i, "CD_VENDOR"));
				this.dsInsert.setColumn(nrow, "YR_EVALUE", this.dsList.getColumn(i, "YR_EVALUE"));
				this.dsInsert.setColumn(nrow, "NO_SEQ", this.ccfMagam.form.CDTextBox.value);
				this.dsInsert.setColumn(nrow, "CD_EVALUEKIND", this.dsList.getColumn(i, "CD_EVALUEKIND"));
				this.dsInsert.setColumn(nrow, "ID_EVALUE", this.dsList.getColumn(i, "ID_EVALUE"));
				this.dsInsert.setColumn(nrow, "PN_BELONG", this.dsList.getColumn(i, "PN_BELONG"));
				this.dsInsert.setColumn(nrow, "DS_EVALUE", this.dsList.getColumn(i, "DS_EVALUE"));
				this.dsInsert.setColumn(nrow, "RM_BIGO", this.dsList.getColumn(i, "RM_BIGO"));
				this.dsInsert.setColumn(nrow, "TY_DEPT", this.dsList.getColumn(i, "TY_DEPT"));
				
			break;
			
			case "U":
			
				var nrow = this.dsUpdate.addRow();
				
				this.dsUpdate.setColumn(nrow, "CD_SITE", this.dsList.getColumn(i, "CD_SITE"));
				this.dsUpdate.setColumn(nrow, "CD_VENDOR", this.dsList.getColumn(i, "CD_VENDOR"));
				this.dsUpdate.setColumn(nrow, "YR_EVALUE", this.dsList.getColumn(i, "YR_EVALUE"));
				this.dsUpdate.setColumn(nrow, "NO_SEQ", this.ccfMagam.form.CDTextBox.value);
				this.dsUpdate.setColumn(nrow, "CD_EVALUEKIND", this.dsList.getColumn(i, "CD_EVALUEKIND"));
				this.dsUpdate.setColumn(nrow, "ID_EVALUE", this.dsList.getColumn(i, "ID_EVALUE"));
				this.dsUpdate.setColumn(nrow, "PN_BELONG", this.dsList.getColumn(i, "PN_BELONG"));
				this.dsUpdate.setColumn(nrow, "DS_EVALUE", this.dsList.getColumn(i, "DS_EVALUE"));
				this.dsUpdate.setColumn(nrow, "RM_BIGO", this.dsList.getColumn(i, "RM_BIGO"));
				this.dsUpdate.setColumn(nrow, "TY_DEPT", this.dsList.getColumn(i, "TY_DEPT"));
				this.dsUpdate.setColumn(nrow, "CD_SITE_ORG", this.dsList.getColumn(i, "CD_SITE_ORG"));
				this.dsUpdate.setColumn(nrow, "CD_VENDOR_ORG", this.dsList.getColumn(i, "CD_VENDOR_ORG"));
				this.dsUpdate.setColumn(nrow, "YR_EVALUE_ORG", this.dsList.getColumn(i, "YR_EVALUE_ORG"));
				this.dsUpdate.setColumn(nrow, "NO_SEQ_ORG", this.dsList.getColumn(i, "NO_SEQ_ORG"));
				this.dsUpdate.setColumn(nrow, "CD_EVALUEKIND_ORG", this.dsList.getColumn(i, "CD_EVALUEKIND_ORG"));
				this.dsUpdate.setColumn(nrow, "ID_EVALUE_ORG", this.dsList.getColumn(i, "ID_EVALUE_ORG"));

			break;
			
			case "D":
			
				var nrow = this.dsDelete.addRow();
				
				this.dsDelete.setColumn(nrow, "CD_SITE", this.dsList.getColumn(i, "CD_SITE"));
				this.dsDelete.setColumn(nrow, "CD_VENDOR", this.dsList.getColumn(i, "CD_VENDOR"));
				this.dsDelete.setColumn(nrow, "YR_EVALUE", this.dsList.getColumn(i, "YR_EVALUE"));
				this.dsDelete.setColumn(nrow, "NO_SEQ", this.ccfMagam.form.CDTextBox.value);
				this.dsDelete.setColumn(nrow, "CD_EVALUEKIND", this.dsList.getColumn(i, "CD_EVALUEKIND"));
				this.dsDelete.setColumn(nrow, "ID_EVALUE", this.dsList.getColumn(i, "ID_EVALUE"));
			
			break;
		}
	}

	if (this.dsInsert.rowcount == 0 && this.dsUpdate.rowcount == 0 && this.dsDelete.rowcount == 0) return;
	
	trace(this.dsUpdate.saveXML());	
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "insert=dsInsert update=dsUpdate delete=dsDelete";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
 this.fnValidate = function() {

	if (this.gfnIsNull(this.dsSearch.getColumn(0, "YR_EVALUE"))) {
		this.fnVaidateCallback = function() {
			this.divSearch.form.ctcYY_WORK.form.TextBox.setFocus();
		}
		this.gfnAlert("평가년도를 입력하세요.");
		return false;
	}
	if (this.gfnIsNull(this.ccfMagam.form.CDTextBox.value)) {
		this.fnVaidateCallback = function() {
			this.ccfMagam.form.CDTextBox.setFocus();
		}
		this.gfnAlert("회차를 입력하세요.");
		return false;
	}
	return true;
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);	
	
	}else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
};

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/

this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	if(id == "ccfMagam"){
		dsUserParam.setColumn(nrow, "YR_EVALUE", this.dsSearch.getColumn(0, "YR_EVALUE"));
	}
// 	else if(id == "ccfDz"){
// 		dsUserParam.setColumn(nrow, "CD_CORP", "");
// 	}
	return true;
};

this.fnAfterCDTextChanged = function(id){
};


/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
 this.fnGrid_BeforuserDataSetParam=function(id, dsUserParam, nrow){
 
	if(id == "DCX_CFEVALUEKIND_SITE"){
		dsUserParam.setColumn(nrow, "YR_EVALUE", this.dsSearch.getColumn(0, "YR_EVALUE"));
		dsUserParam.setColumn(nrow, "NO_SEQ", this.ccfMagam.form.CDTextBox.value);
	}else if(id == "DCX_CFSITE_EVALUE"){
		dsUserParam.setColumn(nrow, "YR_EVALUE", this.dsSearch.getColumn(0, "YR_EVALUE"));
		dsUserParam.setColumn(nrow, "NO_SEQ", this.ccfMagam.form.CDTextBox.value);
		dsUserParam.setColumn(nrow, "CD_CORP", "");
	}else if(id == "DCX_CFVENDOR_EVALUE"){
		dsUserParam.setColumn(nrow, "YR_EVALUE", this.dsSearch.getColumn(0, "YR_EVALUE"));
		dsUserParam.setColumn(nrow, "NO_SEQ", this.ccfMagam.form.CDTextBox.value);
		dsUserParam.setColumn(nrow, "CD_SITE", this.dsList.getColumn(this.dsList.rowposition, "CD_SITE"));
	}
	
	return true;
};
this.fnGrid_AfterCDTextChanged=function(id, codeFindData){
	
	if(id == "DCX_CFEVALUEKIND_SITE"){
		var arr = codeFindData;
		var score = "";
		if(arr.length > 0){		 
			score = arr[0]["DS_EVALUEKIND"];
		}
		this.dsList.setColumn(this.dsList.rowposition, "DS_EVALUEKIND", score);	
	}else if(id == "DCX_CFSABUN_02"){
		var arr = codeFindData;
		var score = "";
		if(arr.length > 0){		 
			score = arr[0]["DS_HNAME"];
		}
		this.dsList.setColumn(this.dsList.rowposition, "DS_EVALUE", score);	
	}else if(id == "DCX_CFSITE_EVALUE"){
		var arr = codeFindData;
		var score = "";
		if(arr.length > 0){		 
			score = arr[0]["DS_SITE"];
		}
		this.dsList.setColumn(this.dsList.rowposition, "DS_SITE", score);	
	}else if(id == "DCX_CFVENDOR_EVALUE"){
		var arr = codeFindData;
		var score = "";
		if(arr.length > 0){		 
			score = arr[0]["DS_VENDOR"];
		}
		this.dsList.setColumn(this.dsList.rowposition, "DS_VENDOR", score);	
	}
};
/************************************************************************
 * 기타 이벤트
 ************************************************************************/
/*
 *	조회 조건 변경시 초기화
 */
this.fnSearchInit = function(obj,e) {
	if(e == null || (e.pretext != e.posttext)) {
		// 폼상태 초기화
		this.gfnSetFormStatus(this);	
		this.gfnGridClear(this.dxGrid);
	}
};

this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
	}
};

this.fnLoad = function(obj:nexacro.Button, e:nexacro.ClickEventInfo){
	this.dsInsert1.clearData();
	var nrow = this.dsInsert1.addRow();
	
	this.dsInsert1.setColumn(nrow, "CD_SITE", this.ccfDz.form.CDTextBox.value);
	this.dsInsert1.setColumn(nrow, "YR_EVALUE", this.divSearch.form.ctcYY_WORK.form.TextBox.value);
	this.dsInsert1.setColumn(nrow, "NO_SEQ", this.ccfMagam.form.CDTextBox.value);
	
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "insert1=dsInsert1";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
};

this.fnCancel = function(obj:nexacro.Button, e:nexacro.ClickEventInfo){

	this.dsDelete1.clearData();
	var nrow = this.dsDelete1.addRow();
	
	this.dsDelete1.setColumn(nrow, "CD_SITE", this.ccfDz.form.CDTextBox.value);
	this.dsDelete1.setColumn(nrow, "YR_EVALUE", this.divSearch.form.ctcYY_WORK.form.TextBox.value);
	this.dsDelete1.setColumn(nrow, "NO_SEQ", this.ccfMagam.form.CDTextBox.value);
	
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "delete1=dsDelete1";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
};
]]></Script>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ctcYY_WORK.form.TextBox" propid="value" datasetid="dsSearch" columnid="YR_EVALUE"/>
      <BindItem id="item1" compid="divSearch.form.ccfMagam.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="NO_SEQ"/>
      <BindItem id="item2" compid="divSearch.form.ccfDz.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_SITE"/>
    </Bind>
  </Form>
</FDL>
