<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="발주요청내역" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg">
          <Layouts>
            <Layout>
              <Static id="staYR_MAGAM" taborder="0" text="평가년도" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ctclYR_MAGAM" taborder="1" left="staYR_MAGAM:0.0" top="10.0" width="100" height="24.0" url="cmm::cmmCalYY.xfdl"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg" ondragmove="divData_ondragmove">
          <Layouts>
            <Layout>
              <Div id="divSplitter" taborder="1" left="50%" top="0" width="5" height="100%" background="skyblue" cursor="ew-resize" ondrag="divData_divSplitter_ondrag"/>
              <Div id="divDataLeft" taborder="0" left="0" top="0" bottom="0" right="divSplitter:5">
                <Layouts>
                  <Layout>
                    <Static id="sta01" taborder="0" text="공종정보" left="0" top="0" width="100%" height="22" cssclass="sta_TITLE_Bg"/>
                    <Grid id="objGrid" taborder="0" left="0" top="sta01:5" bottom="0" right="0"/>
                  </Layout>
                </Layouts>
              </Div>
              <Div id="divDataRight" taborder="0" left="divSplitter:32" top="0" bottom="0" right="0">
                <Layouts>
                  <Layout>
                    <Static id="sta02" taborder="1" text="등록정보" left="0" top="0" width="100%" height="22" cssclass="sta_TITLE_Bg"/>
                    <Grid id="objGridSub" taborder="0" left="0" top="sta02:5" bottom="0" right="0"/>
                  </Layout>
                </Layouts>
              </Div>
              <Button id="btnSend_Right" taborder="3" text="▶" left="divSplitter:1" top="40%" width="30" height="30" onclick="divData_btnSend_Right_onclick"/>
              <Button id="btnSend_Left" taborder="3" text="◀" left="divSplitter:1" top="60%" width="30" height="30" onclick="divData_btnSend_Left_onclick"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
		
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	// 이전화면에서 데이터 받기.
	if(!this.gfnIsNull(this.getOwnerFrame().YR_MAGAM) && !this.gfnIsNull(this.getOwnerFrame().TY_SYSTEM)) {
		
		this.dsSearch.setColumn(0, "YR_MAGAM", this.getOwnerFrame().YR_MAGAM);
		this.dsSearch.setColumn(0, "TY_SYSTEM", this.getOwnerFrame().TY_SYSTEM);

		this.FormBtns.Select.click();
	}
};


/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 ************************************************************************/
this.fnSetButton = function() {
	// Select, Add, Del, Save, Excel, Print
	// TODO : set_enable로 Add창이 비활성화가 되지않아 우선 안 보이게 설정.
	//this.FormBtns.Add.set_visible(false);
	//this.FormBtns.Add.set_enable(false);

}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결
 ************************************************************************/
this.fnSetExtendButton = function() {

};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.dxGrid = this.divData.form.divDataLeft.form.objGrid;
	this.dxGridSub = this.divData.form.divDataRight.form.objGridSub;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {	

 	this.gfnGridInit(this.dxGrid, this.dsList, "DC", "DCD_REG_LICCOST");
	this.gfnGridInit(this.dxGridSub, this.dsListSub, "DC", "DCD_REG_EVALUE_LICCOST");
	this.dxGrid.addEventHandler("onselectchanged", this.fnGrid_RowCellChanged, this);
	this.dxGridSub.addEventHandler("onselectchanged", this.fnGridSub_RowCellChanged, this);
	// 트리 전체 접는 로직.
	//this.dxGrid.set_treeinitstatus("collapse,all");
	
};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("TY_SYSTEM", "string");
	
	this.dsSelectSub = new Dataset();
	this.dsSelectSub.addColumn("YR_MAGAM", "string");
	this.dsSelectSub.addColumn("TY_SYSTEM", "string");

	this.dsInsert = new Dataset();
	this.dsInsert.addColumn("TY_SYSTEM", "string");
	this.dsInsert.addColumn("YR_MAGAM", "string");
	this.dsInsert.addColumn("CD_LICCOST", "string");

	this.dsDelete = new Dataset();
	this.dsDelete.addColumn("TY_SYSTEM", "string");
	this.dsDelete.addColumn("YR_MAGAM", "string");
	this.dsDelete.addColumn("CD_LICCOST", "string");
}

/************************************************************************
 * 버튼 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;
	
	this.gfnGridBeforeSelect(this.dxGridSub);
 	this.gfnGridBeforeSelect(this.dxGrid);

 	this.dsSelect.clearData();
 	this.dsSelect.addRow();

	this.dsSelect.setColumn(0, "TY_SYSTEM", this.dsSearch.getColumn(0, "TY_SYSTEM"));
	
	this.dsSelectSub.clearData();
	this.dsSelectSub.addRow();
	
	this.dsSelectSub.setColumn(0, "YR_MAGAM", this.dsSearch.getColumn(0, "YR_MAGAM"));
	this.dsSelectSub.setColumn(0, "TY_SYSTEM", this.dsSearch.getColumn(0, "TY_SYSTEM"));

 	var strSvcId    = "select";
 	var strSvcType  = "grid";
 	var inProc		= "_dsProc";
 	var inData      = "select=dsSelect select_d=dsSelectSub";
 	var outData     = "dsList=select0 dsListSub=select_d0";
 	var strArg      = "";
 	var callBackFnc = "fnCallback";

 	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
 						strSvcType , 	// transaction을 요청할 구분
 						inProc,			// Procedure 정보 Dataset 이름
 						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
 						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
 						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
 						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {

}

/*
 *	삭제 버튼
 */ 
this.fnDel = function() {
	this.gfnGridDel(this.dxGridSub);
}

/*
 *	저장 버튼
 */ 
this.fnSave = function() {
	if (!this.gfnGridValidate(this.dxGridSub)) return;
	
	this.dxGridSub.updateToDataset();
	
	this.dsInsert.clearData();
	this.dsDelete.clearData();
	
	for (var i = 0; i < this.dsListSub.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsListSub, i);
		switch(flag) {
			case "I":
				var nrow = this.dsInsert.addRow();
				this.dsInsert.setColumn(nrow, "TY_SYSTEM", this.dsSearch.getColumn(0, "TY_SYSTEM"));
				this.dsInsert.setColumn(nrow, "YR_MAGAM", this.dsListSub.getColumn(i, "YR_MAGAM"));
				this.dsInsert.setColumn(nrow, "CD_LICCOST", this.dsListSub.getColumn(i, "CD_LICCOST"));

				break;
			case "D":
				var nrow = this.dsDelete.addRow();
				this.dsDelete.setColumn(nrow, "TY_SYSTEM",  this.dsSearch.getColumn(0, "TY_SYSTEM"));
				this.dsDelete.setColumn(nrow, "YR_MAGAM", this.dsListSub.getColumn(i, "YR_MAGAM"));
				this.dsDelete.setColumn(nrow, "CD_LICCOST", this.dsListSub.getColumn(i, "CD_LICCOST"));		
				break;
		}
	}

	if (this.dsInsert.rowcount == 0 && this.dsDelete.rowcount == 0) return;
	
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "insert=dsInsert delete=dsDelete";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
						
}

/*
 *	엑셀 버튼
 */ 
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGridSub);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {

}
 

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {
	var validate = true;

	if (this.gfnIsNull(this.dsSearch.getColumn(0, "YR_MAGAM"))) {
		validate = false;
		//Alert후 실행할 처리
		this.fnVaidateCallback = function() {
			this.divSearch.form.ctclYR_MAGAM.form.TextBox.setFocus();
		}
		this.gfnAlert("평가년도를 입력하세요.", "fnVaidateCallback");
	}
	
	return validate;
};
/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGridSub);
		this.gfnGridAfterSelect(this.dxGrid);	
		
		// 트리의 레벨2까지만 펼침
// 		if(this.dsList.rowcount > 0){
// 			this.dxGrid.setTreeStatus(1, true);			
// 		}		
	}else if(svcID == "save") {
		this.gfnGridAfterSelect(this.dxGridSub);	
		this.gfnGridAfterSelect(this.dxGrid);	
	
		this.FormBtns.Select.click();
	}
	
}
/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/

this.fnGrid_RowCellChanged = function(obj:nexacro.Grid,e:nexacro.GridSelectEventInfo, event:nexacro.KeyEventInfo)
{
	if ((obj.oldrow > -1 && obj.oldrow == e.row)
		|| (obj.oldrow == -1 && e.oldrow != e.row)) {
		var colnm = this.gfnGridGetBindColumnNameByIndex(obj, e.cell);
		
		var event = nexacro.KeyEventInfo;
		
		var rows = this.dxGrid.getSelectedDatasetRows();
		
		this.dsList.set_enableevent(false);
		for(var i = 0; i < this.dsList.rowcount; i++)
		{
			var check = false;
			
			if(this.gfnGetFlag(this.dsList, i) != "#")
			{
				if(colnm == "CHK")
				{
					check = true;
					break;
				}
				
				if(rows.length > 0)
				{
					for(var j = 0; j < rows.length ; j++)
					{
						if(i == e.row || i == rows[j])
						{
							check = true;
							this.dsList.setColumn(i, "CHK", 1);
						}
					}
				}
				else
				{
					if(i == e.row)
					{
						check = true;
						this.dsList.setColumn(i, "CHK", 1);
					}
				}
				
				if(check == false)
				{
					this.dsList.setColumn(i, "CHK", 0);
				}
			}
		}
		this.dsList.set_enableevent(true);
		
		obj.oldrow = -1;
	}
}

this.fnGridSub_RowCellChanged = function(obj:nexacro.Grid,e:nexacro.GridSelectEventInfo, event:nexacro.KeyEventInfo)
{
	if ((obj.oldrow > -1 && obj.oldrow == e.row)
		|| (obj.oldrow == -1 && e.oldrow != e.row)) {
		var colnm = this.gfnGridGetBindColumnNameByIndex(obj, e.cell);
		
		var event = nexacro.KeyEventInfo;
		
		var rows = this.dxGridSub.getSelectedDatasetRows();
		
		this.dsListSub.set_enableevent(false);
		for(var i = 0; i < this.dsListSub.rowcount; i++)
		{
			var check = false;
			
			if(this.gfnGetFlag(this.dsListSub, i) != "#")
			{
				if(colnm == "CHK")
				{
					check = true;
					break;
				}
				
				if(rows.length > 0)
				{
					for(var j = 0; j < rows.length ; j++)
					{
						if(i == e.row || i == rows[j])
						{
							check = true;
							this.dsListSub.setColumn(i, "CHK", 1);
						}
					}
				}
				else
				{
					if(i == e.row)
					{
						check = true;
						this.dsListSub.setColumn(i, "CHK", 1);
					}
				}
				
				if(check == false)
				{
					this.dsListSub.setColumn(i, "CHK", 0);
				}
			}
		}
		this.dsListSub.set_enableevent(true);
		
		obj.oldrow = -1;
	}
}
/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.fnSearchInit = function(obj,e) {
	if(e == null || (e.pretext != e.posttext)) {
		this.gfnSetFormStatus(this);
		this.gfnGridClear(this.dxGrid);
		this.gfnGridClear(this.dxGridSub);
	}
}

this.divData_ondragmove = function(obj:nexacro.Div,e:nexacro.DragEventInfo)
{
	if(e.userdata == "splitter") {
		this.divData.form.divSplitter.set_left(e.clientx);
		this.divData.form.resetScroll();
	}
};

this.divData_divSplitter_ondrag = function(obj:nexacro.Div,e:nexacro.DragEventInfo)
{
	e.set_userdata("splitter");
	return true;
};

// ▶ 버튼 클릭.
this.divData_btnSend_Right_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{	
	var rows = this.dxGrid.getSelectedDatasetRows();
	
	this.dsListSub.set_enableevent(false);
	
	for(var i = 0; i < rows.length; i++)
	{
		var nrow = rows[i];

		//var listRow = this.dsListSub.addRow();
		var listRow = this.gfnGridAdd(this.dxGridSub, "bottom");
		
		// QN_TT_HADO / UP_TT_HADO / AM_TT_HADO 가 왼쪽 그리드에는 컬럼이 없어 null로 넘어옴. 
		//this.dsListSub.copyRow(listRow, this.dsList, nrow);
		this.dsListSub.setColumn(listRow, this.ucFlag, "I");
		this.dsListSub.setColumn(listRow, "CD_COSTCLASS", this.dsList.getColumn(nrow, "CD_COSTCLASS"));
		this.dsListSub.setColumn(listRow, "DS_COSTCLASS", this.dsList.getColumn(nrow, "DS_COSTCLASS"));
		this.dsListSub.setColumn(listRow, "CD_LICCOST", this.dsList.getColumn(nrow, "CD_LICCOST"));
		this.dsListSub.setColumn(listRow, "DS_LICCOST", this.dsList.getColumn(nrow, "DS_LICCOST"));
		this.dsListSub.setColumn(listRow, "YR_MAGAM", this.dsSearch.getColumn(0, "YR_MAGAM"));	
	}

	this.gfnSetFormStatus(this, "I");
	this.dsListSub.set_enableevent(true);

}

// ◀ 버튼 클릭
this.divData_btnSend_Left_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	this.fnDel();
};
]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DCDPR_REG_LICCOST_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">select_d</Col>
            <Col id="SP">DCDPR_REG_EVALUE_LICCOST_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">insert</Col>
            <Col id="SP">DCDPR_REG_EVALUE_LICCOST_INSERT</Col>
          </Row>
          <Row>
            <Col id="TARGET">delete</Col>
            <Col id="SP">DCDPR_REG_EVALUE_LICCOST_DELETE</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsListSub" oncolumnchanged="dsListSub_oncolumnchanged"/>
      <Dataset id="dsSearch">
        <ColumnInfo>
          <Column id="YR_MAGAM" type="STRING" size="256"/>
          <Column id="TY_SYSTEM" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ctclYR_MAGAM.form.TextBox" propid="value" datasetid="dsSearch" columnid="YR_MAGAM"/>
    </Bind>
  </Form>
</FDL>
