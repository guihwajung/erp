<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="New Form" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg" formscrolltype="none">
          <Layouts>
            <Layout>
              <Static id="staYR_MAGAM" taborder="2" text="평가년도" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ctclYR_MAGAM" taborder="3" left="staYR_MAGAM:0.0" top="10.0" width="100" height="24.0" url="cmm::cmmCalYY.xfdl"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	this.fileConfig = this.gfnGetFileConfig();
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	this.dsSearch.setColumn(0, "YR_MAGAM", this.gfnGetDate().substr(0,4));
	
	//this.FormBtns.Select.click();
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
	//this.btn1 = this.gfnFormButtonAdd("btnItem", "fnEVALUEITEM");
	this.btnRegist = this.gfnFormButtonAdd("btnRegist", "fnRegist");
	this.btnRegistCancel = this.gfnFormButtonAdd("btnRegistCancel", "fnRegistCancel");
	this.btnMagam = this.gfnFormButtonAdd("btnMagam", "fnMagam");
	this.btnMagamCancel = this.gfnFormButtonAdd("btnMagamCancel", "fnMagamCancel");
};
/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {	
	this.ctclYR_MAGAM = this.divSearch.form.ctclYR_MAGAM;
	this.dxGrid = this.divData.form.objGrid;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	// 그리드 초기화
	this.gfnGridInit(this.dxGrid, this.dsList, "DC", "DCD_REG_MG");
	
	this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforeUserDataSetParam";
	this.dxGrid.addEventHandler("oncelldblclick", this.dxGrid_oncelldblclick, this);
	this.dxGrid.addEventHandler("onselectchanged", this.fnGrid_RowCellChanged, this);	
};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("YR_MAGAM", "string");
	this.dsSelect.addColumn("TY_SYSTEM", "string");

	this.dsMagam = new Dataset();
	this.dsMagam.addColumn("YR_MAGAM", "string");
	this.dsMagam.addColumn("YN_MAGAM", "string");
	this.dsMagam.addColumn("TY_SYSTEM", "string");

	this.dsUpdate = new Dataset();
	this.dsUpdate.addColumn("YR_MAGAM", "string");
	this.dsUpdate.addColumn("CD_VENDOR", "string");
	this.dsUpdate.addColumn("TY_REGIST", "string");
	this.dsUpdate.addColumn("AM_SCORE", "bigdecimal");
	this.dsUpdate.addColumn("TY_SYSTEM", "string");
}


/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if(!this.fnValidate()) return;
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	this.dsSelect.setColumn(0, "YR_MAGAM", this.dsSearch.getColumn(0, "YR_MAGAM"));
	this.dsSelect.setColumn(0, "TY_SYSTEM", this.FormInfo.DS_PARAM);
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// trabsaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	var nrow = this.gfnGridAdd(this.dxGrid);
	this.dsList.setColumn(nrow, "YR_MAGAM", this.dsSearch.getColumn(0, "YR_MAGAM"));
}

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}

/*
 *	저장 버튼
 */
this.fnSave = function() {
	// 그리드 필수항목 체크
	if (!this.gfnGridValidate(this.dxGrid)) return;	
	
	this.dxGrid.updateToDataset();
	this.dsUpdate.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		
		switch(flag) {
			case "U":
				var nrow = this.dsUpdate.addRow();
				this.dsUpdate.setColumn(nrow, "YR_MAGAM", this.dsList.getColumn(i, "YR_MAGAM"));
				this.dsUpdate.setColumn(nrow, "CD_VENDOR", this.dsList.getColumn(i, "CD_VENDOR"));
				this.dsUpdate.setColumn(nrow, "TY_REGIST", this.dsList.getColumn(i, "TY_REGIST"));
				this.dsUpdate.setColumn(nrow, "AM_SCORE", this.dsList.getColumn(i, "AM_SCORE"));
				this.dsUpdate.setColumn(nrow, "TY_SYSTEM", this.dsList.getColumn(i, "TY_SYSTEM"));	
				
			break;
		}
	}

	if (this.dsUpdate.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "update=dsUpdate";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnValidate = function() {	
	var validate = true;

	if(this.gfnIsNull(this.dsSearch.getColumn(0, "YR_MAGAM")))
	{
		validate = false;
		this.gfnAlert("평가년도를 입력해주십시오.");
	}
	
	return validate;
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg, strArg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);		
	}
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "magam") {
		if (errorCode == 0) {
			this.fnCallback_callback = function()
			{
				this.FormBtns.Select.click();
			}
			
			var msg = "등록심사마감 정상처리되었습니다.";
			if(strArg == "N") msg = "등록심사마감취소 정상처리되었습니다.";
			
			this.gfnAlert(msg,"fnCallback_callback");
		} else {
			this.gfnAlert(errorMsg);
		}
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	return true;
}
 
/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
this.fnGrid_BeforeUserDataSetParam = function(id, dsUserParam, nrow) {	
// 	if(id == "DCX_CFEVALUEKIND")
// 	{
// 		dsUserParam.setColumn(nrow, "YR_EVALUE", this.dsList.getColumn(this.dsList.rowposition, "YR_EVALUE"));
// 		dsUserParam.setColumn(nrow, "TY_SYSTEM", this.FormInfo.DS_PARAM);
// 	}
	return true;
}

this.fnGrid_RowCellChanged = function(obj:nexacro.Grid,e:nexacro.GridSelectEventInfo, event:nexacro.KeyEventInfo)
{
	if ((obj.oldrow > -1 && obj.oldrow == e.row)
		|| (obj.oldrow == -1 && e.oldrow != e.row)) {
		var colnm = this.gfnGridGetBindColumnNameByIndex(obj, e.cell);
		
		var event = nexacro.KeyEventInfo;
		
		var rows = this.dxGrid.getSelectedDatasetRows();
		
		this.dsList.set_enableevent(false);
		for(var i = 0; i < this.dsList.rowcount; i++)
		{
			var check = false;
			
			if(this.gfnGetFlag(this.dsList, i) != "#")
			{
				if(colnm == "CHK")
				{
					check = true;
					break;
				}
				
				if(rows.length > 0)
				{
					for(var j = 0; j < rows.length ; j++)
					{
						if(i == e.row || i == rows[j])
						{
							check = true;
							this.dsList.setColumn(i, "CHK", 1);
						}
					}
				}
				else
				{
					if(i == e.row)
					{
						check = true;
						this.dsList.setColumn(i, "CHK", 1);
					}
				}
				
				if(check == false)
				{
					this.dsList.setColumn(i, "CHK", 0);
				}
			}
		}
		this.dsList.set_enableevent(true);
		
		obj.oldrow = -1;
	}
}

this.dxGrid_oncelldblclick = function(obj:nexacro.Grid,e:nexacro.GridClickEventInfo)
{
	if(this.gfnGridGetBindColumnNameByIndex(obj, e.cell) == "FILE_NM") {
		this.fnDownload();
	}
}
/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
	}
};

this.fnRegist = function()
{
	for(var i = 0; i < this.dsList.rowcount; i++)
	{
		if(this.dsList.getColumn(i, "CHK") == 1)
		{
			this.dsList.setColumn(i, "TY_REGIST", "01");
		}
	}
}

this.fnRegistCancel = function()
{
	for(var i = 0; i < this.dsList.rowcount; i++)
	{
		if(this.dsList.getColumn(i, "CHK") == 1)
		{
			this.dsList.setColumn(i, "TY_REGIST", "09");
		}
	}
}

this.fnMagam = function(obj:nexacro.Button, e:nexacro.ClickEventInfo){
	if(!this.gfnGridIsRow(this.dxGrid)){return false;}
	
	this.gfnConfirm("등록심사마감을 진행하시겠습니까?","fnMagam_callback", "Y");
};

this.fnMagamCancel = function(obj:nexacro.Button, e:nexacro.ClickEventInfo){
	if(!this.gfnGridIsRow(this.dxGrid)){return false;}
	
	this.gfnConfirm("등록심사마감취소를 진행하시겠습니까?","fnMagam_callback", "N");
};

this.fnMagam_callback = function(strID, val)
{
	if(val == true)
	{
		this.dsMagam.clearData();
		var nrow = this.dsMagam.addRow();
	
		this.dsMagam.setColumn(nrow, "YR_MAGAM", this.dsSearch.getColumn(0, "YR_MAGAM"));
		this.dsMagam.setColumn(nrow, "YN_MAGAM", strID);
		this.dsMagam.setColumn(nrow, "TY_SYSTEM", this.FormInfo.DS_PARAM);
		
		if (this.dsMagam.rowcount == 0) return;
			
		var strSvcId    = "magam";
		var strSvcType  = "save";
		var inProc		= "_dsProc";
		var inData      = "magam=dsMagam";
		var outData     = "";
		var strArg      = strID;
		var callBackFnc = "fnCallback";
		
		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
							strSvcType , 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
							callBackFnc); // 통신방법 정의 [생략가능]
	}
}

this.fnDownload = function() {
	if(!this.gfnIsNull(this.gfnGetFlag(this.dsList, this.dsList.rowposition))) return;
	
	var sFilename = this.dsList.getColumn(this.dsList.rowposition, "FILE_NM");
	var sFilepath = this.dsList.getColumn(this.dsList.rowposition, "PATH_NM");
	var encodeFileName = encodeURIComponent(sFilename);
		
	var surl = this.fileConfig.host+ this.fileConfig.downloadUrl;
	this.FileDownTransfer00.set_url(surl);
	this.FileDownTransfer00.setPostData("path", sFilepath);
	this.FileDownTransfer00.setPostData("fileName", encodeFileName);
	if( system.navigatorname =="nexacro"){
		this.FileDownTransfer00.set_downloadfilename(sFilename);
	}
	this.FileDownTransfer00.download();
};
]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DCDPR_REG_EVALUE_MG_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">update</Col>
            <Col id="SP">DCDPR_REG_EVALUE_MG_UPDATE</Col>
          </Row>
          <Row>
            <Col id="TARGET">magam</Col>
            <Col id="SP">DCDPR_REG_EVALUE_MG_MAGAM</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="YR_MAGAM" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
      <FileDialog id="fdg00" onclose="fdg00_onclose"/>
      <FileUpTransfer id="FileUpTransfer00" onprogress="FileUpTransfer00_onprogress" onsuccess="FileUpTransfer00_onsuccess" onerror="FileUpTransfer00_onerror"/>
      <FileDownTransfer id="FileDownTransfer00"/>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ctclYR_MAGAM.form.TextBox" propid="value" datasetid="dsSearch" columnid="YR_MAGAM"/>
    </Bind>
  </Form>
</FDL>
