<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="New Form" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divData" taborder="0" left="0" top="0" bottom="0" right="0" cssclass="div_DATA_Bg" ondragmove="divData_ondragmove">
          <Layouts>
            <Layout>
              <Div id="divDataLeft" taborder="0" left="0" top="0" bottom="0" width="300">
                <Layouts>
                  <Layout>
                    <Static id="staLeftTitle" taborder="0" text="대공종코드" left="0" top="0" width="100%" height="22" cssclass="sta_TITLE_Bg"/>
                    <Grid id="objGrid" taborder="0" left="0" top="staLeftTitle:5" bottom="0" right="0"/>
                  </Layout>
                </Layouts>
              </Div>
              <Div id="divDataRight" taborder="0" left="divDataLeft:10" top="0" bottom="0" right="0">
                <Layouts>
                  <Layout>
                    <Static id="staRightTitle" taborder="0" text="등록공종코드" left="0" top="0" width="100%" height="22" cssclass="sta_TITLE_Bg"/>
                    <Grid id="objGridSub" taborder="0" left="0" top="staRightTitle:5" bottom="0" right="0"/>
                  </Layout>
                </Layouts>
              </Div>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	//this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();

	this.FormBtns.Select.click();
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 ************************************************************************/
this.fnSetButton = function() {

}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결
 ************************************************************************/
this.fnSetExtendButton = function() {
	//this.btn1 = this.gfnFormButtonAdd("Detail", "fnDetail1");
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.dxGrid = this.divData.form.divDataLeft.form.objGrid;
	this.dxGridSub = this.divData.form.divDataRight.form.objGridSub;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {	
	this.gfnGridInit(this.dxGrid, this.dsList, "DC", "DCZ_LICCOSTDISP");
	this.dxGrid.set_selecttype("cell");	
	this.dxGrid.addEventHandler("onselectchanged", this.fnGrid_RowCellChanged, this);

	this.gfnGridInit(this.dxGridSub, this.dsListSub, "DC", "DCZ_LICCOSTDISPDETAIL");
}

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {

	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_COSTCLASS", "string");

	this.dsSelectSub = new Dataset();
	this.dsSelectSub.addColumn("CD_COSTCLASS", "string");
	
	this.dsInsert = new Dataset();
	this.dsInsert.addColumn("CD_LICCOST", "string");
	this.dsInsert.addColumn("DS_LICCOST", "string");
	this.dsInsert.addColumn("RT_CASH", "bigdecimal");
	this.dsInsert.addColumn("RT_BILL", "bigdecimal");
	this.dsInsert.addColumn("RM_BIGO", "string");
	this.dsInsert.addColumn("CD_LICENSE", "string");
	this.dsInsert.addColumn("CD_COSTCLASS", "string");
	this.dsInsert.addColumn("YN_USE", "string");
	this.dsInsert.addColumn("ID_USER", "string");
	this.dsInsert.addColumn("CD_MODULE", "string");
	this.dsInsert.addColumn("RT_CONTGUARANTEE", "bigdecimal");
	this.dsInsert.addColumn("RT_ASGUARANTEE", "bigdecimal");
	this.dsInsert.addColumn("DT_ASFROMTO", "bigdecimal");
	this.dsInsert.addColumn("ID_SABUN", "string");
	
	this.dsUpdate = new Dataset();
	this.dsUpdate.addColumn("CD_COSTCLASS", "string");
	this.dsUpdate.addColumn("CD_LICCOST", "string");
	this.dsUpdate.addColumn("DS_LICCOST", "string");
	this.dsUpdate.addColumn("RT_CASH", "bigdecimal");
	this.dsUpdate.addColumn("RT_BILL", "bigdecimal");
	this.dsUpdate.addColumn("RM_BIGO", "string");
	this.dsUpdate.addColumn("CD_LICENSE", "string");
	this.dsUpdate.addColumn("YN_USE", "string");
	this.dsUpdate.addColumn("ID_USER", "string");
	this.dsUpdate.addColumn("CD_MODULE", "string");
	this.dsUpdate.addColumn("RT_CONTGUARANTEE", "bigdecimal");
	this.dsUpdate.addColumn("RT_ASGUARANTEE", "bigdecimal");
	this.dsUpdate.addColumn("DT_ASFROMTO", "bigdecimal");
	this.dsUpdate.addColumn("ID_SABUN", "string");
	
	this.dsDelete = new Dataset();
	this.dsDelete.addColumn("CD_COSTCLASS", "string");
	this.dsDelete.addColumn("CD_LICCOST", "string");
}

/************************************************************************
 * 버튼 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	
	this.dsSelect.setColumn(0, "CD_COSTCLASS", "");
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

this.fnSelectSub = function()
{
	this.gfnGridBeforeSelect(this.dxGridSub);
	
	this.dsSelectSub.clearData();
	this.dsSelectSub.addRow();
	
	this.dsSelectSub.setColumn(0, "CD_COSTCLASS", this.dsList.getColumn(this.dsList.rowposition, "CD_COSTCLASS"));

	var strSvcId    = "selectSub";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "selectSub=dsSelectSub";
	var outData     = "dsListSub=selectSub0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	var nrow = this.gfnGridAdd(this.dxGridSub);
	
	this.dsListSub.setColumn(nrow, "CD_COSTCLASS", this.dsList.getColumn(this.dsList.rowposition, "CD_COSTCLASS"));
}

/*
 *	삭제 버튼
 */ 
this.fnDel = function() {
	this.gfnGridDel(this.dxGridSub);
}

/*
 *	저장 버튼
 */ 
this.fnSave = function() {
	if (!this.gfnGridValidate(this.dxGridSub)) return;

	this.dxGridSub.updateToDataset();
	
	this.dsInsert.clearData();
	this.dsUpdate.clearData();
	this.dsDelete.clearData();
	
	for (var i = 0; i < this.dsListSub.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsListSub, i);
		switch(flag) {
			case "I":
				var nrow = this.dsInsert.addRow();
				this.dsInsert.setColumn(nrow, "CD_LICCOST", this.dsListSub.getColumn(i, "CD_LICCOST"));
				this.dsInsert.setColumn(nrow, "DS_LICCOST", this.dsListSub.getColumn(i, "DS_LICCOST"));
				this.dsInsert.setColumn(nrow, "RT_CASH", this.dsListSub.getColumn(i, "RT_CASH"));
				this.dsInsert.setColumn(nrow, "RT_BILL", this.dsListSub.getColumn(i, "RT_BILL"));
				this.dsInsert.setColumn(nrow, "RM_BIGO", this.dsListSub.getColumn(i, "RM_BIGO"));
				this.dsInsert.setColumn(nrow, "CD_LICENSE", this.dsListSub.getColumn(i, "CD_LICENSE"));
				this.dsInsert.setColumn(nrow, "CD_COSTCLASS", this.dsListSub.getColumn(i, "CD_COSTCLASS"));
				this.dsInsert.setColumn(nrow, "YN_USE", this.dsListSub.getColumn(i, "YN_USE"));
				this.dsInsert.setColumn(nrow, "CD_MODULE", this.dsListSub.getColumn(i, "CD_MODULE"));
				this.dsInsert.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
				this.dsInsert.setColumn(nrow, "RT_CONTGUARANTEE", this.dsListSub.getColumn(i, "RT_CONTGUARANTEE"));
				this.dsInsert.setColumn(nrow, "RT_ASGUARANTEE", this.dsListSub.getColumn(i, "RT_ASGUARANTEE"));
				this.dsInsert.setColumn(nrow, "DT_ASFROMTO", this.dsListSub.getColumn(i, "DT_ASFROMTO"));
				this.dsInsert.setColumn(nrow, "ID_SABUN", this.dsListSub.getColumn(i, "ID_SABUN"));
				break;
				
			case "U":
				var nrow = this.dsUpdate.addRow();
				this.dsUpdate.setColumn(nrow, "CD_COSTCLASS", this.dsListSub.getColumn(i, "CD_COSTCLASS"));
				this.dsUpdate.setColumn(nrow, "CD_LICCOST", this.dsListSub.getColumn(i, "CD_LICCOST"));
				this.dsUpdate.setColumn(nrow, "DS_LICCOST", this.dsListSub.getColumn(i, "DS_LICCOST"));
				this.dsUpdate.setColumn(nrow, "RT_CASH", this.dsListSub.getColumn(i, "RT_CASH"));
				this.dsUpdate.setColumn(nrow, "RT_BILL", this.dsListSub.getColumn(i, "RT_BILL"));
				this.dsUpdate.setColumn(nrow, "RM_BIGO", this.dsListSub.getColumn(i, "RM_BIGO"));
				this.dsUpdate.setColumn(nrow, "CD_LICENSE", this.dsListSub.getColumn(i, "CD_LICENSE"));
				this.dsUpdate.setColumn(nrow, "YN_USE", this.dsListSub.getColumn(i, "YN_USE"));
				this.dsUpdate.setColumn(nrow, "CD_MODULE", this.dsListSub.getColumn(i, "CD_MODULE"));
				this.dsUpdate.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
				this.dsUpdate.setColumn(nrow, "RT_CONTGUARANTEE", this.dsListSub.getColumn(i, "RT_CONTGUARANTEE"));
				this.dsUpdate.setColumn(nrow, "RT_ASGUARANTEE", this.dsListSub.getColumn(i, "RT_ASGUARANTEE"));
				this.dsUpdate.setColumn(nrow, "DT_ASFROMTO", this.dsListSub.getColumn(i, "DT_ASFROMTO"));
				this.dsUpdate.setColumn(nrow, "ID_SABUN", this.dsListSub.getColumn(i, "ID_SABUN"));
				break;
				
			case "D":
				var nrow = this.dsDelete.addRow();
				this.dsDelete.setColumn(nrow, "CD_COSTCLASS", this.dsListSub.getColumn(i, "CD_COSTCLASS"));
				this.dsDelete.setColumn(nrow, "CD_LICCOST", this.dsListSub.getColumn(i, "CD_LICCOST"));
				break;
		}
	}
	
	if (this.dsInsert.rowcount == 0 && this.dsUpdate.rowcount == 0 && this.dsDelete.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "insert=dsInsert update=dsUpdate delete=dsDelete";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
};

/*
 *	엑셀 버튼
 */ 
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);	
		this.fnSelectSub();
	}
	else if (svcID == "selectSub") {
		this.gfnGridAfterSelect(this.dxGridSub);	
	}
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();		
		} else {
			this.gfnAlert(errorMsg);
		}
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
this.fnGrid_RowCellChanged = function(obj:nexacro.Grid,e:nexacro.GridSelectEventInfo)
{
    if ((obj.oldrow > -1 && obj.oldrow == e.row)
		|| (obj.oldrow == -1 && e.oldrow != e.row)) {
		this.fnSelectSub();
		obj.oldrow = -1;
	}
};

/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.fnSearchInit = function(obj,e) {
	if(e == null || (e.pretext != e.posttext)) {
		this.gfnSetFormStatus(this);
		this.gfnGridClear(this.dxGrid);
		this.gfnGridClear(this.dxGridSub);
	}
}]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DCZPR_COSTCLASS_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">selectSub</Col>
            <Col id="SP">DCZPR_LICCOSTDISP_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">insert</Col>
            <Col id="SP">DCZPR_LICCOST_INSERT</Col>
          </Row>
          <Row>
            <Col id="TARGET">update</Col>
            <Col id="SP">DCZPR_LICCOST_UPDATE</Col>
          </Row>
          <Row>
            <Col id="TARGET">delete</Col>
            <Col id="SP">DCZPR_LICCOST_DELETE</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsListSub"/>
    </Objects>
  </Form>
</FDL>
