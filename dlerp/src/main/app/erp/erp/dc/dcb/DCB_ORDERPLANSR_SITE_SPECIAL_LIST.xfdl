<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="New Form" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg" formscrolltype="none">
          <Layouts>
            <Layout>
              <Static id="staCD_SITE" taborder="1" text="현장코드" left="0.0" top="10.0" width="118.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfCD_SITE" CodeFindName="DZX_CFSITE" CDTextWidth="70" taborder="0" left="staCD_SITE:0.0" top="10.0" width="300" height="24.0" url="cmm::cmmCodeFind.xfdl" enable="false"/>
              <Static id="staNO_PR" taborder="3" text="구매요청번호" left="ccfCD_SITE:0.0" top="10.0" width="118.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfNO_PR" CodeFindName="DWX_CFPR_01" CDTextWidth="100" taborder="1" left="staNO_PR:0.0" top="10.0" width="250" height="24.0" url="cmm::cmmCodeFind.xfdl" FitToContents="true" maxwidth="300" enable="false"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	// 이전 화면에서 데이터 받기.
	this.dsSearch.setColumn(0, "CD_SITE", this.getOwnerFrame().CD_SITE);
	this.divSearch.form.ccfCD_SITE.form.DSTextBox.set_value(this.getOwnerFrame().DS_SITE);		
	this.dsSearch.setColumn(0, "NO_PR", this.getOwnerFrame().NO_PR);
	this.divSearch.form.ccfNO_PR.form.DSTextBox.set_value(this.getOwnerFrame().DS_PR);		
	
	this.FormBtns.Select.click();
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {

};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {	
	this.dxGrid = this.divData.form.objGrid;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	this.divSearch.form.ccfNO_PR.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";	

	// 그리드 초기화
	this.gfnGridInit(this.dxGrid, this.dsList, "DC", "DCB_ORDERPLANSR_SITE_SPECIAL_LIST");
};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_SITE", "string");
	this.dsSelect.addColumn("NO_PR", "string");
	
	this.dsSave = new Dataset();
	this.dsSave.addColumn("CD_SITE", "string");
	this.dsSave.addColumn("NO_PR", "string");
	this.dsSave.addColumn("CD_COST", "string");
	this.dsSave.addColumn("UP_MATERIAL", "bigdecimal");
	this.dsSave.addColumn("UP_LABOR", "bigdecimal");
	this.dsSave.addColumn("UP_COST", "bigdecimal");
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	
	this.dsSelect.setColumn(0, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
	this.dsSelect.setColumn(0, "NO_PR", this.dsSearch.getColumn(0, "NO_PR"));
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	//var nrow = this.gfnGridAdd(this.dxGrid); // top (default), bottom, current
}

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	//this.gfnGridDel(this.dxGrid);
}

/*
 *	저장 버튼
 */
this.fnSave = function() {
// 	// 그리드 필수항목 체크
	if (!this.gfnGridValidate(this.dxGrid)) return;	

	this.dxGrid.updateToDataset();
		
	// save SP 한개로 사용하는 경우
	this.dsSave.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "U":
				if(!this.fnSaveValidate(i))
				{
					this.gfnAlert("["+ (i+1) + "줄] [" + this.dsList.getColumn(i, "DS_ITEM") +"] 재료비, 노무비, 경비의 합이 발주(실시안) 금액과 일치하지 않습니다.");
					
					return false;
				}
				var nrow = this.dsSave.addRow();
				this.dsSave.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
				this.dsSave.setColumn(nrow, "NO_PR", this.dsSearch.getColumn(0, "NO_PR"));
				this.dsSave.setColumn(nrow, "CD_COST", this.dsList.getColumn(i, "CD_COST"));
				this.dsSave.setColumn(nrow, "UP_MATERIAL", this.dsList.getColumn(i, "UP_MATERIAL"));
				this.dsSave.setColumn(nrow, "UP_LABOR", this.dsList.getColumn(i, "UP_LABOR"));
				this.dsSave.setColumn(nrow, "UP_COST", this.dsList.getColumn(i, "UP_COST"));

				break;
		}
	}
		
	if (this.dsSave.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "save=dsSave";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {
	var validate = true;
	/*
	if (this.gfnIsNull(this.dsSearch.getColumn(0,"CD_SYSTEM"))) {
		validate = false;
		// Alert후 실행할 처리
		this.fnVaidateCallback = function() {
			this.ccfCD_SYSTEM.form.CDTextBox.setFocus();
		}
		this.gfnAlert("시스템을 입력하세요.", "fnVaidateCallback");
	}
	*/
	return validate;
};


this.fnSaveValidate = function(row) {
	var validate = true;
	
// 	var am_material = nexacro.toNumber(this.dsList.getColumn(row, "AM_MATERIAL"),0);
// 	var am_labor = nexacro.toNumber(this.dsList.getColumn(row, "AM_LABOR"),0);
// 	var am_cost = nexacro.toNumber(this.dsList.getColumn(row, "AM_COST"),0);
// 	
// 	var am_tt_total = nexacro.toNumber(this.dsList.getColumn(row, "AM_TT_HADO"),0);
// 	
// 	var total = am_material + am_labor + am_cost;

	var up_material = nexacro.toNumber(this.dsList.getColumn(row, "UP_MATERIAL"),0);
	var up_labor = nexacro.toNumber(this.dsList.getColumn(row, "UP_LABOR"),0);
	var up_cost = nexacro.toNumber(this.dsList.getColumn(row, "UP_COST"),0);
	
	var up_tt_total = nexacro.toNumber(this.dsList.getColumn(row, "UP_TT_HADO"),0);
	
	var total = up_material + up_labor + up_cost;
	
	if(total != up_tt_total) validate = false;
	
	return validate;
}

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);	
	}
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	if (id == "ccfNO_PR") {
		if(this.gfnIsNull(this.dsSearch.getColumn(0, "CD_SITE"))) {
			this.gfnAlert("현장코드를 먼저 입력하세요.");
			return false;
		}
		dsUserParam.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE")); // CD_SITE
	}
	
	return true;
}
/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
 
/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
	}
};


this.dsList_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue)
	{
		var qn_tt_hado = this.dsList.getColumn(e.row, "QN_TT_HADO");
		
		if(e.columnid == "UP_MATERIAL")
		{	
			var am_material =  nexacro.toNumber(qn_tt_hado, 0) * nexacro.toNumber(e.newvalue,0);
			this.dsList.setColumn(e.row, "AM_MATERIAL", am_material);
		}
		else if(e.columnid == "UP_LABOR")
		{	
			var am_labor =  nexacro.toNumber(qn_tt_hado, 0) * nexacro.toNumber(e.newvalue,0);
			this.dsList.setColumn(e.row, "AM_LABOR", am_labor);
		}
		else if(e.columnid == "UP_COST")
		{	
			var am_cost =  nexacro.toNumber(qn_tt_hado, 0) * nexacro.toNumber(e.newvalue,0);
			this.dsList.setColumn(e.row, "AM_COST", am_cost);
		}
		
	}
};
]]></Script>
    <Objects>
      <Dataset id="dsList" onvaluechanged="dsList_onvaluechanged"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DCBPR_PRITEM_LIST_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">save</Col>
            <Col id="SP">DCBPR_ORDERPLANSR_SITE_SPECIAL_SAVE</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_SITE" type="STRING" size="256"/>
          <Column id="NO_PR" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfCD_SITE.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_SITE"/>
      <BindItem id="item1" compid="divSearch.form.ccfNO_PR.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="NO_PR"/>
    </Bind>
  </Form>
</FDL>
