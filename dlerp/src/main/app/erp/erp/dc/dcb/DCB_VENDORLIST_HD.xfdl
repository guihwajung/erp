<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="New Form" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg">
          <Layouts>
            <Layout>
              <Radio id="rdoTYPE_SELECT" taborder="0" left="0.0" top="10.0" height="24.0" innerdataset="dsTYPE_SELECT" datacolumn="VALUE" codecolumn="CODE" direction="vertical" fittocontents="width" width="279" index="0" text="코드" value="01"/>
              <Edit id="edtCD_VENDOR" taborder="1" left="rdoTYPE_SELECT:0.0" top="10.0" width="140" height="24.0" onchanged="fnSearchInit"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg" ondragmove="divData_ondragmove">
          <Layouts>
            <Layout>

<Div id="divDataTop" taborder="0" left="0" top="0" bottom="divSplitter:5" right="0">

              <Div id="divDataTop" taborder="0" left="0" top="0" bottom="0" right="0">
                <Layouts>
                  <Layout>
                    <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0"/>
                  </Layout>
                </Layouts>
              </Div>

<Div id="divDataBottom" taborder="0" left="0" top="divSplitter:5" bottom="0" right="0" visible="false">
<Layouts>
<Layout>
<Static id="sta02" taborder="0" left="0" top="0" right="0" height="22" cssclass="sta_TITLE_Bg"/>
<Grid id="objGridSub" sub="true" taborder="1" left="0" top="sta02:5" bottom="0" right="0"/>
</Layout>
</Layouts>
</Div>

            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	//this.FormBtns.Select.click();
	
	if(!this.gfnIsNull(this.getOwnerFrame().CD_VENDOR))
	{
		this.dsSearch.setColumn(0, "CD_VENDOR", this.getOwnerFrame().CD_VENDOR);
		
		this.FormBtns.Select.click();
	}
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 ************************************************************************/
this.fnSetButton = function() {
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btnADDVENDOR = this.gfnFormButtonAdd("btnADDVENDOR", "fnADDVENDOR");
	this.btnCREATE_AP = this.gfnFormButtonAdd("btnCREATE_AP", "fnCREATE_AP");
	this.btnUPDATE_AP = this.gfnFormButtonAdd("btnUPDATE_AP", "fnUPDATE_AP");
	this.btnCREATE_AR = this.gfnFormButtonAdd("btnCREATE_AR", "fnCREATE_AR");
	this.btnUPDATE_AR = this.gfnFormButtonAdd("btnUPDATE_AR", "fnUPDATE_AR");
	this.btnDCDM = this.gfnFormButtonAdd("btnDCDM", "fnDCDM");
	this.btnEPSID_CREATE = this.gfnFormButtonAdd("btnEPSID_CREATE", "fnEPSID_CREATE");
	this.btnPWINIT = this.gfnFormButtonAdd("btnPWINIT", "fnPWINIT");	// PW재생성&메일

};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.ccfTY_CHAIYONG =  this.divSearch.form.ccfTY_CHAIYONG;
	this.dxGrid = this.divData.form.divDataTop.form.objGrid;
	//this.dxGridSub = this.divData.form.divDataBottom.form.objGridSub;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {	
	this.gfnGridInit(this.dxGrid, this.dsList, "DZ", "DCB_VENDORLIST_SELECT_HD");
	this.dxGrid.set_selecttype("cell");	
	this.dxGrid.addEventHandler("onselectchanged", this.fnGrid_RowCellChanged, this);

	//this.dxGrid.addEventHandler("onselectchanged", this.fnGrid_RowCellChanged, this);
	//this.dsList.addEventHandler("canrowposchange", this.dsList_canrowposchange, this);
		
	//this.gfnGridInit(this.dxGridSub, this.dsListSub, "DH", "DHZ_VENDORCHG");
	//this.dxGridSub.BeforeUserDataSetParam = "fnGridSub_BeforeUserDataSetParam";
}

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {

	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("TY_SEARCH", "string");
	this.dsSelect.addColumn("CD_VENDOR", "string");	
	
	this.dsSave = new Dataset();
	this.dsSave.addColumn("CD_VENDOR", "string");
	this.dsSave.addColumn("TY_GUBUN", "string");
	this.dsSave.addColumn("TY_VENDOR", "string");
	this.dsSave.addColumn("DS_VENDOR", "string");
	this.dsSave.addColumn("DS_DAEPYO", "string");
	this.dsSave.addColumn("NO_SJC", "string");
	this.dsSave.addColumn("DS_DAMDANG", "string");
	this.dsSave.addColumn("DS_DAM_HANDPHONE", "string");
	this.dsSave.addColumn("DS_EMAIL_DAMDANG", "string");

	/*
	this.dsInsert = new Dataset();
	this.dsInsert.addColumn("TY_VENDOR", "string");
	this.dsInsert.addColumn("DS_VENDOR", "string");
	this.dsInsert.addColumn("SAUP_GUBUN", "string");
	this.dsInsert.addColumn("DS_DAEPYO", "string");
	this.dsInsert.addColumn("DS_UPJONG", "string");
	this.dsInsert.addColumn("DS_UPTAE", "string");
	this.dsInsert.addColumn("NO_ZIP", "string");
	this.dsInsert.addColumn("DS_ADDR", "string");
	this.dsInsert.addColumn("DS_ADDR2", "string");
	this.dsInsert.addColumn("NO_TEL", "string");
	this.dsInsert.addColumn("NO_HANDPHONE", "string");
	this.dsInsert.addColumn("DS_REM", "string");
	this.dsInsert.addColumn("CD_BANK", "string");
	this.dsInsert.addColumn("NO_ACCOUNT", "string");
	this.dsInsert.addColumn("DS_DAMDANG", "string");
	this.dsInsert.addColumn("DS_EMAIL_DAMDANG", "string");
	this.dsInsert.addColumn("NO_SJC", "string");
	this.dsInsert.addColumn("ID_USER", "string");
	this.dsInsert.addColumn("CD_VENDOR_CONV", "string");
	this.dsInsert.addColumn("YN_ABROAD", "string");
	this.dsInsert.addColumn("DS_DAM_HANDPHONE", "string");
	this.dsInsert.addColumn("DS_DAMDANG2", "string");
	this.dsInsert.addColumn("DS_DAM_HANDPHONE2", "string");
	this.dsInsert.addColumn("DS_EMAIL_DAMDANG2", "string");
	this.dsInsert.addColumn("TY_INSURE", "string");
	
	this.dsUpdate = new Dataset();
	this.dsUpdate.addColumn("TY_VENDOR", "string");
	this.dsUpdate.addColumn("CD_VENDOR", "string");
	this.dsUpdate.addColumn("DS_VENDOR", "string");
	this.dsUpdate.addColumn("SAUP_GUBUN", "string");
	this.dsUpdate.addColumn("DS_DAEPYO", "string");
	this.dsUpdate.addColumn("DS_UPJONG", "string");
	this.dsUpdate.addColumn("DS_UPTAE", "string");
	this.dsUpdate.addColumn("NO_ZIP", "string");
	this.dsUpdate.addColumn("DS_ADDR", "string");
	this.dsUpdate.addColumn("DS_ADDR2", "string");
	this.dsUpdate.addColumn("NO_TEL", "string");
	this.dsUpdate.addColumn("NO_HANDPHONE", "string");
	this.dsUpdate.addColumn("DS_REM", "string");
	this.dsUpdate.addColumn("CD_BANK", "string");
	this.dsUpdate.addColumn("NO_ACCOUNT", "string");
	this.dsUpdate.addColumn("DS_DAMDANG", "string");
	this.dsUpdate.addColumn("DS_EMAIL_DAMDANG", "string");
	this.dsUpdate.addColumn("NO_SJC", "string");
	this.dsUpdate.addColumn("ID_USER", "string");
	this.dsUpdate.addColumn("CD_VENDOR_CONV", "string");
	this.dsUpdate.addColumn("YN_ABROAD", "string");
	this.dsUpdate.addColumn("DS_DAM_HANDPHONE", "string");
	this.dsUpdate.addColumn("DS_DAMDANG2", "string");
	this.dsUpdate.addColumn("DS_DAM_HANDPHONE2", "string");
	this.dsUpdate.addColumn("DS_EMAIL_DAMDANG2", "string");
	this.dsUpdate.addColumn("TY_INSURE", "string");
	
	this.dsDelete = new Dataset();
	this.dsDelete.addColumn("CD_VENDOR", "string");
	this.dsDelete.addColumn("YN_USE", "string");
	this.dsDelete.addColumn("DS_DELREASON", "string");
	this.dsDelete.addColumn("ID_DELETE", "string");
	*/
	
	this.dsSelectSub = new Dataset();
	this.dsSelectSub.addColumn("CD_VENDOR", "string");
	
	this.dsCreateEps = new Dataset();
	this.dsCreateEps.addColumn("CD_VENDOR", "string");
	this.dsCreateEps.addColumn("YN_SENDMAIL", "string");
}

/************************************************************************
 * 버튼 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	
	this.dsSelect.setColumn(0, "TY_SEARCH", this.dsSearch.getColumn(0, "TY_SEARCH"));
	this.dsSelect.setColumn(0, "CD_VENDOR", this.dsSearch.getColumn(0, "CD_VENDOR"));

	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	this.gfnGridAdd(this.dxGrid);
}

/*
 *	삭제 버튼
 */ 
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}

/*
 *	저장 버튼
 */ 
this.fnSave = function() {
	// 그리드 필수항목 체크
	if (!this.gfnGridValidate(this.dxGrid)) return;	
	
	this.dxGrid.updateToDataset();
	
	this.dsSave.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "I":
			case "U":
			case "D":
				var nrow = this.dsSave.addRow();
				this.dsSave.setColumn(nrow, "CD_VENDOR", this.dsList.getColumn(i, "CD_VENDOR"));
				this.dsSave.setColumn(nrow, "TY_GUBUN", this.dsList.getColumn(i, "TY_GUBUN"));
				this.dsSave.setColumn(nrow, "TY_VENDOR", this.dsList.getColumn(i, "TY_VENDOR"));
				this.dsSave.setColumn(nrow, "DS_VENDOR", this.dsList.getColumn(i, "DS_VENDOR"));
				this.dsSave.setColumn(nrow, "DS_DAEPYO", this.dsList.getColumn(i, "DS_DAEPYO"));
				this.dsSave.setColumn(nrow, "NO_SJC", this.dsList.getColumn(i, "NO_SJC"));
				this.dsSave.setColumn(nrow, "DS_DAMDANG", this.dsList.getColumn(i, "DS_DAMDANG"));
				this.dsSave.setColumn(nrow, "DS_DAM_HANDPHONE", this.dsList.getColumn(i, "DS_DAM_HANDPHONE"));
				this.dsSave.setColumn(nrow, "DS_EMAIL_DAMDANG", this.dsList.getColumn(i, "DS_EMAIL_DAMDANG"));
				break;						
		}
	}
	
	if (this.dsSave.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "save=dsSave";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */ 
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}
 
/************************************************************************
 * 서브 버튼 이벤트
 ************************************************************************/
this.fnSelectSub = function() {
	if (this.dxGrid.rowcount == 0 || this.dxGrid.currentrow < 0) return false;
	
	/*
	var cd_role = this.dsList.getColumn(this.dsList.rowposition, "CD_ROLE");
	if (this.gfnIsNull(cd_role)) {
		return false;
	}
	*/
	
	this.gfnGridBeforeSelect(this.dxGridSub);
	
	this.dsListSub.clearData();
	
	this.dsSelectSub.clearData();
	this.dsSelectSub.addRow();
	this.dsSelectSub.setColumn(0, "CD_VENDOR", this.dsList.getColumn(this.dsList.rowposition, "CD_VENDOR"));

	var strSvcId    = "detail";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "d_select=dsSelectSub";
	var outData     = "dsListSub=d_select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}


this.fnExcelSub = function() {
	this.gfnExcelExport(this.dxGridSub);
}

/************************************************************************
 * Validate
 ************************************************************************/

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);	
		this.fnBtnCheckAll();
	}
	else if (svcID == "detail") {
		this.gfnGridAfterSelect(this.dxGridSub);	
	}
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "savesub") {
		if (errorCode == 0) {
			this.FormBtns.SubSelect.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "create_epsid") {
		if (errorCode == 0) {
			this.fnCallback_callback = function()
			{
				this.FormBtns.Select.click();
			}	
			
			this.gfnAlert("전자조달업체등록 정상처리되었습니다.","fnCallback_callback");
			
		} else {
			this.gfnAlert(errorMsg);
		}
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
this.fnGrid_RowCellChanged = function(obj:nexacro.Grid,e:nexacro.GridSelectEventInfo)
{
    if ((obj.oldrow > -1 && obj.oldrow == e.row)
		|| (obj.oldrow == -1 && e.oldrow != e.row)) {
		this.fnBtnCheckAll();
		//this.FormBtns.SubSelect.click();
		obj.oldrow = -1;
	}
};

this.dsList_canrowposchange = function(obj:nexacro.NormalDataset,e:nexacro.DSRowPosChangeEventInfo) {
	var can_rowchange = true;
	for (var i = 0; i < this.dsListSub.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsListSub, i);
		if (flag == "I" || flag == "U" || flag == "D") {
			can_rowchange = false;
			break;
		}
	}
	if(!can_rowchange) {
		this._row = e.newrow;
		this.gfnConfirm("변경된 데이터가 있습니다.\r\n계속 진행하시겠습니까?", "dsList_canrowposchange_callback");
	}
	return can_rowchange;
}

this.dsList_canrowposchange_callback = function(strId, val) 
{
	if(val == true) {
		this.dsList.set_enableevent(false);
		this.dsList.set_rowposition(this._row);
		this.dsList.set_enableevent(true);
	}	
}

/*
 *	서브 그리드 코드파인드
 */ 
this.fnGridSub_BeforeUserDataSetParam = function(id, dsUserParam, nrow) {

 	if (id == "DZX_CFUSERGROUP") {
		var cd_system = this.dsListSub.getColumn(this.dsListSub.rowposition, "CD_SYSTEM");
		if(this.gfnIsNull(cd_system)) {
			this.gfnAlert("시스템코드를 먼저 입력하세요.");
			return false;
		}
 		dsUserParam.setColumn(nrow, "CD_MODULE", this.dsListSub.getColumn(this.dsListSub.rowposition, "CD_SYSTEM"));
 	}
	return true;
}

/************************************************************************
 * 기타 이벤트
 ************************************************************************/

this.fnSearchInit = function(obj,e) {
	if(e == null || (e.pretext != e.posttext)) {
		this.gfnSetFormStatus(this);
		this.gfnGridClear(this.dxGrid);
		//this.gfnGridClear(this.dxGridSub);
	}
}

this.divData_ondragmove = function(obj:nexacro.Div,e:nexacro.DragEventInfo)
{
	if(e.userdata == "splitter") {
		this.divData.form.divSplitter.set_top(e.clienty);
		this.divData.form.resetScroll();	
	}
};

this.divData_divSplitter_ondrag = function(obj:nexacro.Div,e:nexacro.DragEventInfo)
{
	e.set_userdata("splitter");
	return true;
};


// SAP 업체코드추가 버튼 클릭시 팝업화면 호출
 this.fnADDVENDOR = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	// 선택된 row가 있을 경우에만 팝업을 띄움
	//if (!this.gfnGridIsRow(this.dxGrid)) { return false; }
	
	var param = {};

	//param.CD_VENDOR = this.dsList.getColumn(this.dsList.rowposition, "CD_VENDOR");
	
	this.gfnFormOpenNonAuth("DQD", "DQD_SAP_VENDOR", "fnADDVENDORCallback", param, 450, 300);
}

this.fnADDVENDORCallback = function(svcID, value) {
	// 리턴값	
	if(value){	
		this.FormBtns.Select.click();
	}
};

this.fnCREATE_AP = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	var param = {};
	
	this.gfnFormOpenNonAuth(this.FormInfo.CD_MODULE, "DQD_VENDOR_AP_CREATE", "fnCREATE_AP_Callback", param,940, 550);
}
 
this.fnCREATE_AP_Callback = function(svcID, value) {
 	if(value){	
		this.FormBtns.Select.click();
	}
}

this.fnUPDATE_AP = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	if(!this.gfnGridIsRow(this.dxGrid)) {
		this.gfnAlert("데이터를 선택해주세요.");
		return false;
	}
	
	var param = {};
	
	param.PLIFNR = this.dsList.getColumn(this.dsList.rowposition, "NO_VENDOR_SAP");
	
	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DQD_VENDOR_AP_UPDATE", "fnUPDATE_AP_Callback", param, 940, 550);
}
 
this.fnUPDATE_AP_Callback = function(svcID, value) {
 	if(value){	
		this.FormBtns.Select.click();
	}
}


this.fnCREATE_AR = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	var param = {};
	
	this.gfnFormOpenNonAuth(this.FormInfo.CD_MODULE, "DQD_VENDOR_AR_CREATE", "fnCREATE_AR_Callback", param, 880, 380);
}
 
this.fnCREATE_AR_Callback = function(svcID, value) {
 	if(value){	
		this.FormBtns.Select.click();
	}
}

this.fnUPDATE_AR = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	if(!this.gfnGridIsRow(this.dxGrid)) {
		this.gfnAlert("데이터를 선택해주세요.");
		return false;
	}
	
	var param = {};
	
	param.KUNNR = this.dsList.getColumn(this.dsList.rowposition, "NO_VENDOR_SAP");
	
	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DQD_VENDOR_AR_UPDATE", "fnUPDATE_AR_Callback", param, 880, 380);
}
 
this.fnUPDATE_AR_Callback = function(svcID, value) {
 	if(value){	
		this.FormBtns.Select.click();
	}
}

this.fnDCDM = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	if(!this.gfnGridIsRow(this.dxGrid)) {
		this.gfnAlert("데이터를 선택해주세요.");
		return false;
	}
	
	var param = {};
	
	param.MDM_CD_VENDOR = this.dsList.getColumn(this.dsList.rowposition, "CD_VENDOR");
	param.MDM_DS_VENDOR = this.dsList.getColumn(this.dsList.rowposition, "DS_VENDOR");
	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DQD_VENDOR_DCDM", "", param, 400, 250);
}

// 전자조달업체등록 버튼 클릭 이벤트.
this.fnEPSID_CREATE = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	if(!this.gfnGridIsRow(this.dxGrid)) {
		this.gfnAlert("데이터를 선택해주세요.");
		return false;
	}
	
	var row = this.dsList.rowposition;
	
	var msg = "업체 : [" + this.dsList.getColumn(row, "CD_VENDOR") + "] " + this.dsList.getColumn(row, "DS_VENDOR")
			+ "\n\n전자조달업체등록을 진행하시겠습니까?";
			
	this.gfnConfirm(msg,"fnEPSID_CREATE_callback");
}

this.fnEPSID_CREATE_callback = function(strID, val)
{
	if(val != true) return;
	
	this.dsCreateEps.clearData();
	this.dsCreateEps.addRow();
	
	var rowposition = this.dsList.rowposition;
	
	this.dsCreateEps.setColumn(0, "CD_VENDOR", this.dsList.getColumn(rowposition, "CD_VENDOR"));
	this.dsCreateEps.setColumn(0, "YN_SENDMAIL", "N");

	var strSvcId    = "create_epsid";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "create_epsid=dsCreateEps";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]

}

// PW재생성&메일 버튼 클릭시 이벤트
this.fnPWINIT = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	// 선택된 row가 있을 경우에만 팝업을 띄움
	if (!this.gfnGridIsRow(this.dxGrid)) { return false; }
	
	var dsVendor = this.dsList.getColumn(this.dsList.rowposition, "DS_VENDOR");	// 업체명
	
	this.gfnConfirm("업체명 : " + dsVendor + "\r\n\r\n해당업체의 전자조달 PW를 재생성하고\r\n메일을 송부하시겠습니까?", "fnPWINIT_callback");
}

// PW재생성&메일 버튼 클릭 후 callback
this.fnPWINIT_callback = function(strId, val) 
{
	if(val == true) {
		var param = {};
		param.CD_GUBUN = "INITPW";
		param.PARAM1 = this.dsList.getColumn(this.dsList.rowposition, "CD_VENDOR");
		
		this.gfnFormOpen("DZO", "DZZ_MAIL_SENDER_HD", "", param, 800, 500);
	}	
}

 this.fnBtnCheckAll = function()
{
   this.gfnBtnCheck(this.btnCREATE_AP, this.dsList);
   this.gfnBtnCheck(this.btnUPDATE_AP , this.dsList);
   this.gfnBtnCheck(this.btnCREATE_AR, this.dsList);
   this.gfnBtnCheck(this.btnUPDATE_AR, this.dsList);
   this.gfnBtnCheck(this.btnDCDM, this.dsList);
}

]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DCBPR_VENDORLIST_SELECT_HD</Col>
          </Row>
          <Row>
            <Col id="TARGET">save</Col>
            <Col id="SP">DCBPR_VENDORLIST_UPDATE_HD</Col>
          </Row>
          <Row>
            <Col id="TARGET">d_select</Col>
            <Col id="SP">DHZPR_VENDORCHG_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">create_epsid</Col>
            <Col id="SP">DZZPR_INITPW_VENDOR</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsListSub"/>
      <Dataset id="dsTYPE_SELECT">
        <ColumnInfo>
          <Column id="CODE" type="STRING" size="256"/>
          <Column id="VALUE" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CODE">10</Col>
            <Col id="VALUE">거래처 코드</Col>
          </Row>
          <Row>
            <Col id="CODE">20</Col>
            <Col id="VALUE">사업자 명칭</Col>
          </Row>
          <Row>
            <Col id="VALUE">사업자번호</Col>
            <Col id="CODE">30</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="TY_SEARCH" type="STRING" size="256"/>
          <Column id="CD_VENDOR" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TY_SEARCH">10</Col>
            <Col id="CD_VENDOR"/>
          </Row>
        </Rows>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.rdoTYPE_SELECT" propid="value" datasetid="dsSearch" columnid="TY_SEARCH"/>
      <BindItem id="item1" compid="divSearch.form.edtCD_VENDOR" propid="value" datasetid="dsSearch" columnid="CD_VENDOR"/>
    </Bind>
  </Form>
</FDL>
