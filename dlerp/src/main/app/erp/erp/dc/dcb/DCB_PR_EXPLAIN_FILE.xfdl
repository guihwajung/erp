<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="PR(현설)파일관리" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg" formscrolltype="none">
          <Layouts>
            <Layout>
              <Static id="staCD_SITE" taborder="0" text="현장코드" left="0.0" top="10.0" width="118.0" height="24.0" textDecoration="none" cssclass="sta_WF_SchLabel"/>
              <Div id="ccfCD_SITE" CodeFindName="DZX_CFSITE" CDTextWidth="80" taborder="1" left="staCD_SITE:0.0" top="10.0" width="250" height="24.0" url="cmm::cmmCodeFind.xfdl" enable="false"/>
              <Static id="staNO_PR" taborder="2" text="발주의뢰번호" left="ccfCD_SITE:0.0" top="10.0" width="118.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfNO_PR" CodeFindName="DWX_CFPR_01" CDTextWidth="100" taborder="3" left="staNO_PR:0.0" top="10.0" width="270" height="24.0" url="cmm::cmmCodeFind.xfdl" enable="false"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	// 파일설정
	this.fileConfig = this.gfnGetFileConfig();
	
	if(!this.gfnIsNull(this.getOwnerFrame().CD_SITE) 
	&& !this.gfnIsNull(this.getOwnerFrame().NO_PR))
	{
		this.dsSearch.setColumn(0, "CD_SITE", this.getOwnerFrame().CD_SITE);
		this.divSearch.form.ccfCD_SITE.form.DSTextBox.set_value(this.getOwnerFrame().DS_SITE);
		this.dsSearch.setColumn(0, "NO_PR", this.getOwnerFrame().NO_PR);
		this.divSearch.form.ccfNO_PR.form.DSTextBox.set_value(this.getOwnerFrame().DS_PR);
		
		/*
		if(this.getOwnerFrame().TY_SITE == "BONSA")
		{
			this.btnCreate.set_visible(true);
		}else{
			this.btnCreate.set_visible(false);
		}
		*/
		
		if(!this.gfnIsNull(this.getOwnerFrame().NO_BID))
		{
			this.dsSearch.setColumn(0, "NO_BID", this.getOwnerFrame().NO_BID);
		}
		
		this.FormBtns.Select.click();
	}
	
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
	if(this.getOwnerFrame().IS_READONLY) {
		this.divTopBtn.set_visible(false);
	}
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btnInit = this.gfnFormButtonAdd("btnInit", "fnInit");  
	this.btnCreate = this.gfnFormButtonAdd("btnCreate", "fnCreate");  
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {	
	this.ccfNO_PR = this.divSearch.form.ccfNO_PR;
	this.dxGrid = this.divData.form.objGrid;
	
// 	if(!this.gfnIsNull(this.getOwnerFrame().TY_SITE) && this.getOwnerFrame().TY_SITE == "BONSA") {
// 		if(!this.gfnIsNull(this.getOwnerFrame().DS_PARAM)) {
// 			if(this.getOwnerFrame().DS_PARAM == "SU") { //외주
// 				this.divSearch.form.staNO_PR.set_text("시행결의번호");
// 			} else { // DS_PARAM == "MM" 자재
// 				this.divSearch.form.staNO_PR.set_text("구매결의번호");
// 			}
// 		}	
// 	}
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	this.ccfNO_PR.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";

	// 그리드 초기화
	this.gfnGridInit(this.dxGrid, this.dsList, "DC", "DCB_PR_EXPLAIN_FILE");
	
	var colFILE_SIZ = this.dxGrid.getBindCellIndex("body", "FILE_SIZ");
	this.dxGrid.setCellProperty("body", colFILE_SIZ, "expr", "expr:FILE_SIZ==null?null:FILE_SIZ/1024");	
	
	this.dxGrid.ExpandUp = "fnGrid_ExpandUp";
	this.dxGrid.addEventHandler("oncelldblclick", this.dxGrid_oncelldblclick, this);
};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("NO_PR", "string");
	this.dsSelect.addColumn("NO_BID", "string");

	this.dsSave = new Dataset();
	this.dsSave.addColumn("TY_SAVE", "string");
	this.dsSave.addColumn("NO_PR", "string");
	this.dsSave.addColumn("STD_FILE_NO", "bigdecimal");
	this.dsSave.addColumn("ADDFILE_NO", "int");
	this.dsSave.addColumn("ADDFILE_SEQNO", "int");
	this.dsSave.addColumn("FILE_NM", "string");
	this.dsSave.addColumn("PATH_NM", "string");
	this.dsSave.addColumn("FILE_SIZ", "int");
	this.dsSave.addColumn("ATTR01", "string");
	this.dsSave.addColumn("ATTR02", "string");
	this.dsSave.addColumn("ATTR03", "string");
	this.dsSave.addColumn("ATTR04", "string");
	this.dsSave.addColumn("ATTR05", "string");
	this.dsSave.addColumn("FILE_HASH", "string");
	this.dsSave.addColumn("ID_USER", "string");
	
	this.dsExec = new Dataset();
	this.dsExec.addColumn("NO_PR", "string");
	this.dsExec.addColumn("ID_USER", "string");
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;
	
	// 파일 설정
	this.FileUpTransfer00.clearFileList();
	this.filepath = "/BID_SU_M/" + this.dsSearch.getColumn(0, "NO_PR");
	
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	
	this.dsSelect.setColumn(0, "NO_PR", this.dsSearch.getColumn(0, "NO_PR"));
	this.dsSelect.setColumn(0, "NO_BID", this.dsSearch.getColumn(0, "NO_BID"));

	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	var nrow = this.gfnGridAdd(this.dxGrid); // top (default), bottom, current
	this.dsList.setColumn(nrow, "NO_PR", this.dsSearch.getColumn(0, "NO_PR"));
	this.dsList.setColumn(nrow, "DT_APPDATE", this.gfnGetDate());
}

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}

/*
 *	저장 버튼
 */ 
this.fnSave = function() {
	// 그리드 필수항목 체크
	if (!this.gfnGridValidate(this.dxGrid)) return;	

	
	// 파일저장
	if(this.FileUpTransfer00.filelist.length > 0) {
		this._waitCursor(true);
		var sUploadUrl = this.fileConfig.host + this.fileConfig.uploadUrl;
		this.FileUpTransfer00.setPostData("path", this.filepath);
		this.FileUpTransfer00.upload(sUploadUrl);		
	}
	else {
		this.fnSaveProc();
	}
}

this.fnSaveProc = function() {
	this.dxGrid.updateToDataset();
	
	this.dsSave.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "I":
				var nrow = this.dsSave.addRow();
				this.dsSave.setColumn(nrow, "TY_SAVE", flag);
				this.dsSave.setColumn(nrow, "NO_PR", this.dsSearch.getColumn(0, "NO_PR"));
				this.dsSave.setColumn(nrow, "STD_FILE_NO", this.dsList.getColumn(i, "STD_FILE_NO"));
				this.dsSave.setColumn(nrow, "ADDFILE_NO", this.dsList.getColumn(i, "ADDFILE_NO"));
				this.dsSave.setColumn(nrow, "ADDFILE_SEQNO", this.dsList.getColumn(i, "ADDFILE_SEQNO"));
				this.dsSave.setColumn(nrow, "FILE_NM", this.dsList.getColumn(i, "FILE_NM"));
				this.dsSave.setColumn(nrow, "PATH_NM", this.filepath);
				this.dsSave.setColumn(nrow, "FILE_SIZ", this.dsList.getColumn(i, "FILE_SIZ"));
				this.dsSave.setColumn(nrow, "ATTR01", this.dsSearch.getColumn(0, "NO_BID"));
				this.dsSave.setColumn(nrow, "ATTR02", "");
				this.dsSave.setColumn(nrow, "ATTR03", "");
				this.dsSave.setColumn(nrow, "ATTR04", "");
				this.dsSave.setColumn(nrow, "ATTR05", "");
				this.dsSave.setColumn(nrow, "FILE_HASH", this.dsList.getColumn(i, "FILE_HASH"));
				this.dsSave.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
				break;
			case "U":
			case "D":
				var nrow = this.dsSave.addRow();
				this.dsSave.setColumn(nrow, "TY_SAVE", flag);
				this.dsSave.setColumn(nrow, "NO_PR", this.dsList.getColumn(i, "BID_NO"));
				this.dsSave.setColumn(nrow, "STD_FILE_NO", this.dsList.getColumn(i, "STD_FILE_NO"));
				this.dsSave.setColumn(nrow, "ADDFILE_NO", this.dsList.getColumn(i, "ADDFILE_NO"));
				this.dsSave.setColumn(nrow, "ADDFILE_SEQNO", this.dsList.getColumn(i, "ADDFILE_SEQNO"));
				this.dsSave.setColumn(nrow, "FILE_NM", this.dsList.getColumn(i, "FILE_NM"));
				this.dsSave.setColumn(nrow, "PATH_NM", this.filepath);
				this.dsSave.setColumn(nrow, "FILE_SIZ", this.dsList.getColumn(i, "FILE_SIZ"));
				this.dsSave.setColumn(nrow, "ATTR01", "");
				this.dsSave.setColumn(nrow, "ATTR02", "");
				this.dsSave.setColumn(nrow, "ATTR03", "");
				this.dsSave.setColumn(nrow, "ATTR04", "");
				this.dsSave.setColumn(nrow, "ATTR05", "");
				this.dsSave.setColumn(nrow, "FILE_HASH", this.dsList.getColumn(i, "FILE_HASH"));
				this.dsSave.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
				break;
		}
	}
	
	if (this.dsSave.rowcount == 0) return;
						
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "save=dsSave";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
	
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {
	var validate = true;
	/*
	if (this.gfnIsNull(this.dsSearch.getColumn(0,"CD_SYSTEM"))) {
		validate = false;
		// Alert후 실행할 처리
		this.fnVaidateCallback = function() {
			this.ccfCD_SYSTEM.form.CDTextBox.setFocus();
		}
		this.gfnAlert("시스템을 입력하세요.", "fnVaidateCallback");
	}
	*/
	return validate;
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);	
		
		this.fnBtnCheckAll();
	}
	else if(svcID == "save") {
		if (errorCode == 0) {			
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "exec") {
		if (errorCode == 0) {
			this.gfnAlert("현설파일 재생성이 완료되었습니다.");
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
this.dxGrid_oncelldblclick = function(obj:nexacro.Grid,e:nexacro.GridClickEventInfo)
{
	if(this.gfnGridGetBindColumnNameByIndex(obj, e.cell) == "FILE_NM") {
		this.fnDownload();
	}
}

 this.fnGrid_ExpandUp = function(obj:nexacro.Grid, e:nexacro.GridMouseEventInfo) {
 
	var colnm = this.gfnGridGetBindColumnNameByIndex(obj, e.cell);
	if(colnm == "FILE_NM") {	
		this.fdg00.row = e.row;
		this.fdg00.open('FileOpen', FileDialog.LOAD);
	}
}


this.fdg00_onclose = function(obj:nexacro.FileDialog,e:nexacro.FileDialogEventInfo)
{
	this.addFileList(obj, e.virtualfiles);
};

this.addFileList = function(obj, filelist)
{
	this.FileList = filelist;
	if(filelist.length > 0) {
		var vFile;
		for (var i = 0; i < filelist.length; i++)
		{
			vFile = filelist[i];
			vFile.row = obj.row;
			vFile.addEventHandler("onsuccess", this.FileList_onsuccess, this);
			vFile.addEventHandler("onerror", this.FileList_onerror , this);
			
			vFile.open(null, 1);
		}
	}
}

this.FileList_onsuccess = function(obj:nexacro.VirtualFile, e:nexacro.VirtualFileEventInfo)
{
	switch (e.reason)
	{
		case 1:
			obj.getFileSize();
			break;
		case 9:
			var row = obj.row;
			this.dsList.setColumn(row, "FILE_NM", obj.filename);
			this.dsList.setColumn(row, "FILE_SIZE", null);
			this.FileUpTransfer00.addFile(obj.filename, obj);
			break;
	}
}

this.FileList_onerror = function(obj:nexacro.VirtualFile, e:nexacro.VirtualFileErrorEventInfo)
{
	trace("errortype: "+e.errortype);
	trace("errormsg: "+e.errormsg);
	trace("statuscode: "+e.statuscode);
}

this.FileUpTransfer00_onprogress = function(obj:nexacro.FileUploadTransfer,e:nexacro.FileUploadTransferProgressEventInfo)
{
	console.log("FileUpTransfer00_onprogress: " + e.loaded+"/"+e.total);
};

this.FileUpTransfer00_onsuccess = function(obj:nexacro.FileUploadTransfer,e:nexacro.FileUploadTransferEventinfo)
{
	this._waitCursor(false);
	console.log("FileUpTransfer00_onsuccess: " + e.code + "/" + e.message);
	if(e.code == 0) {
		if(e.datasets.length > 0) {
			for(var i = 0; i < e.datasets[0].rowcount; i++) {
				var row = obj.filelist[i].row;
				this.dsList.setColumn(row, "FILE_SIZE", e.datasets[0].getColumn(i, "filesize"));
				this.dsList.setColumn(row, "FILE_HASH", e.datasets[0].getColumn(i, "filehash"));
			}
			this.fnSaveProc();
		}
	}
};

this.FileUpTransfer00_onerror = function(obj:nexacro.FileUploadTransfer,e:nexacro.FileUploadTransferErrorEventInfo)
{
	this._waitCursor(false);
	if(e.errormsg.indexOf("maxsize") > -1) {
		this.gfnAlert("첨부파일 허용용량("+ this.gfnCutFileSize(nexacro.toNumber(e.errormsg.split(':')[1])) + ")을 초과할 수 없습니다.");
	} else {
		this.gfnAlert(e.errormsg);
	}
};

this.fnDownload = function() {
	if(!this.gfnIsNull(this.gfnGetFlag(this.dsList, this.dsList.rowposition))) return;
	
	var sFilename = this.dsList.getColumn(this.dsList.rowposition, "FILE_NM");
	var sFilepath = this.dsList.getColumn(this.dsList.rowposition, "PATH_NM");
	var encodeFileName = encodeURIComponent(sFilename);
		
	var surl = this.fileConfig.host+ this.fileConfig.downloadUrl;
	this.FileDownTransfer00.set_url(surl);
	this.FileDownTransfer00.setPostData("path", sFilepath);
	this.FileDownTransfer00.setPostData("fileName", encodeFileName);
	if( system.navigatorname =="nexacro"){
		this.FileDownTransfer00.set_downloadfilename(sFilename);
	}
	this.FileDownTransfer00.download();
};

/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
	}
};

// 현장설명서 생성 버튼 클릭 이벤트
this.fnCreate = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	// Global Dataset 사용이므로 반드시 clearData
	var dsAutoForm = this.objApp.gdsAutoForm;
	dsAutoForm.clearData();
	
	var nrow = dsAutoForm.addRow();
	dsAutoForm.setColumn(nrow, "TY_WORK", "B-02");
	dsAutoForm.setColumn(nrow, "ATTR01", this.dsSearch.getColumn(0, "NO_PR"));
	dsAutoForm.setColumn(nrow, "ATTR02", "");
	dsAutoForm.setColumn(nrow, "ATTR03", "");
	dsAutoForm.setColumn(nrow, "ATTR04", "");
	dsAutoForm.setColumn(nrow, "ATTR05", "");
	dsAutoForm.setColumn(nrow, "ATTR06", "");
	dsAutoForm.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
	
	this.gfnAutoForm("fnAutoFile_Callback");	// callback 생략가능
}

this.fnAutoFile_Callback = function(svcID, errorCode, errorMsg, strArg) {
	if(errorCode == 0) {
		this.FormBtns.Select.click();
	} else {
		this.gfnAlert(errorMsg);
	}
}



// 현설파일(재)생성 버튼 클릭 이벤트
this.fnInit = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	// 선택된 row가 있을 경우에만 팝업을 띄움
	//if (!this.gfnGridIsRow(this.dxGrid)) { return false; }
	
	this.dsExec.clearData();
	
	this.dsExec.addRow();
		
	this.dsExec.setColumn(0, "NO_PR", this.dsSearch.getColumn(0, "NO_PR"));
	this.dsExec.setColumn(0, "ID_USER", this.AuthClient.ID_USER);
	
	if (this.dsExec.rowcount == 0) return;
	
	var strSvcId    = "exec";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "exec=dsExec";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}


this.fnBtnCheckAll = function()
{
	this.gfnBtnCheck(this.btnInit, this.dsList);
}]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DCBPR_PR_EXPLAIN_FILE_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">save</Col>
            <Col id="SP">DCBPR_PR_EXPLAIN_FILE_SAVE</Col>
          </Row>
          <Row>
            <Col id="TARGET">exec</Col>
            <Col id="SP">DCBPR_PR_EXPLAIN_FILE_INIT</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_SITE" type="STRING" size="256"/>
          <Column id="NO_PR" type="STRING" size="256"/>
          <Column id="NO_BID" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
      <FileDialog id="fdg00" onclose="fdg00_onclose"/>
      <FileUpTransfer id="FileUpTransfer00" onprogress="FileUpTransfer00_onprogress" onsuccess="FileUpTransfer00_onsuccess" onerror="FileUpTransfer00_onerror"/>
      <FileDownTransfer id="FileDownTransfer00"/>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfCD_SITE.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_SITE"/>
      <BindItem id="item1" compid="divSearch.form.ccfNO_PR.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="NO_PR"/>
    </Bind>
  </Form>
</FDL>
