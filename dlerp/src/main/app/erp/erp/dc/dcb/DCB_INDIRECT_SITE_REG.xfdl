<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="간접비관리(현장)" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg">
          <Layouts>
            <Layout>
              <Static id="sta00" taborder="1" text="현장코드" left="0.0" top="10.0" width="118.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfSite" CodeFindName="DZX_CFSITE" FitToContents="true" CDTextWidth="80" taborder="3" left="sta00:0.0" top="10.0" width="200" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
              <Static id="staCODE_DC_03" taborder="2" text="구매요청번호" left="ccfSite:0.0" top="10.0" width="118.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfOrder" CodeFindName="DCX_CFORDERPLAN_01" FitToContents="true" CDTextWidth="80" taborder="0" left="staCODE_DC_03:0.0" top="10.0" width="200" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
              <CheckBox id="cchkYN_CLEAR" taborder="4" text="초기화" left="ccfOrder:0.0" top="10.0" width="69" height="24.0"/>
              <CheckBox id="cchkYN_APPLY_DOKUB" taborder="5" text="도급적용" left="cchkYN_CLEAR:0.0" top="10.0" width="69" height="24.0"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg" ondragmove="divData_ondragmove">
          <Layouts>
            <Layout>
              <Div id="divSplitter" taborder="1" left="0" top="50%" width="100%" height="5" background="skyblue" cursor="ns-resize" ondrag="divData_divSplitter_ondrag"/>
              <Div id="divDataTop" taborder="0" left="0" top="0" bottom="divSplitter:5" right="0">
                <Layouts>
                  <Layout>
                    <Static id="sta01" taborder="0" text="입찰간접비" left="0" top="0" width="100%" height="22" cssclass="sta_TITLE_Bg"/>
                    <Grid id="objGrid" taborder="0" left="0" top="sta01:5" bottom="0" right="0"/>
                  </Layout>
                </Layouts>
              </Div>
              <Div id="divDataBottom" taborder="0" left="0" top="divSplitter:5" bottom="0" right="0">
                <Layouts>
                  <Layout>
                    <Static id="sta02" taborder="0" text="계상간접비(본사)" left="0" top="0" height="22" cssclass="sta_TITLE_Bg" width="100%"/>
                    <Grid id="objGridSub" sub="true" taborder="1" left="0" top="sta02:5" bottom="0" right="0"/>
                  </Layout>
                </Layouts>
              </Div>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	if(!this.gfnIsNull(this.getOwnerFrame().CD_SITE) && !this.gfnIsNull(this.getOwnerFrame().NO_BID)) {
		this.dsSearch.setColumn(0, "CD_SITE", this.getOwnerFrame().CD_SITE);
		this.ccfSite.form.DSTextBox.set_value(this.getOwnerFrame().DS_SITE);
		this.dsSearch.setColumn(0, "NO_PR", this.getOwnerFrame().NO_BID);
		this.ccfOrder.form.DSTextBox.set_value(this.getOwnerFrame().DS_BID);
		
		this.ccfSite.form.fnFitToContents();
		this.ccfOrder.form.fnFitToContents();
		
		this.FormBtns.Select.click();
	}
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 ************************************************************************/
this.fnSetButton = function() {
	
};

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btn1 = this.gfnFormButtonAdd("AutoCal", "fnAutoCal");
	this.btn2 = this.gfnFormButtonAdd("ApplySilheng", "fnApplySilheng");
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.ccfSite = this.divSearch.form.ccfSite;
	this.ccfOrder = this.divSearch.form.ccfOrder;
	this.dxGrid = this.divData.form.divDataTop.form.objGrid;
	this.dxGridSub = this.divData.form.divDataBottom.form.objGridSub;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {	
	this.ccfSite.AfterCDTextChanged = "fnAfterCDTextChanged";
	this.ccfOrder.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";

	this.gfnGridInit(this.dxGrid, this.dsList, "DC", "DCB_INDIRECT_SITE_REG");
	this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforeUserDataSetParam";
	this.dxGrid.EnterCell = "fnGrid_EnterCell";
	
	this.gfnGridInit(this.dxGridSub, this.dsListSub, "DC", "DCB_INDIRECT_SITE_REG_SUB");
	
}

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {

	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_SITE", "string");
	this.dsSelect.addColumn("NO_PR", "string");

	this.dsUpdate = new Dataset();
	this.dsUpdate.addColumn("NO_CONT", "string");
	this.dsUpdate.addColumn("CD_INDIRECT", "string");
	this.dsUpdate.addColumn("CD_COST", "string");
	this.dsUpdate.addColumn("CD_CBS", "string");
	this.dsUpdate.addColumn("DS_EXPR", "string");
	this.dsUpdate.addColumn("RT1", "bigdecimal");
	this.dsUpdate.addColumn("RT2", "bigdecimal");
	this.dsUpdate.addColumn("RT3", "bigdecimal");
	this.dsUpdate.addColumn("RT4", "bigdecimal");
	this.dsUpdate.addColumn("DS_BIGO", "string");
	this.dsUpdate.addColumn("AM_INDIRECT_USER", "bigdecimal");
	this.dsUpdate.addColumn("YN_AUTOCAL", "string");
	this.dsUpdate.addColumn("YN_BID", "string");
	this.dsUpdate.addColumn("YN_USE", "string");
	
	this.dsCal = new Dataset();
	this.dsCal.addColumn("CD_SITE", "string");
	this.dsCal.addColumn("NO_BID", "string");
	this.dsCal.addColumn("YN_CLEAR", "string");
	
	this.dsApply = new Dataset();
	this.dsApply.addColumn("CD_SITE", "string");
	this.dsApply.addColumn("NO_BID", "string");
	this.dsApply.addColumn("YN_APPLY_DOKUB", "string");

}

/************************************************************************
 * 버튼 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	
	if (!this.fnSelectValidate()) return false;
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	this.dsSelect.setColumn(0, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
	this.dsSelect.setColumn(0, "NO_PR", this.dsSearch.getColumn(0, "NO_PR"));

	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect subselect=dsSelect";
	var outData     = "dsList=select0 dsListSub=subselect0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
};

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	this.gfnGridAdd(this.dxGrid);
}

/*
 *	삭제 버튼
 */ 
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}

/*
 *	저장 버튼
 */ 
this.fnSave = function() {

	if (!this.gfnGridValidate(this.dxGrid)) return;

	this.dxGrid.updateToDataset();
	
	this.dsUpdate.clearData();

	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {

			case "U":
				var nrow = this.dsUpdate.addRow();
				this.dsUpdate.setColumn(nrow, "NO_PR", this.dsSearch.getColumn(0, "NO_PR"));
				this.dsUpdate.setColumn(nrow, "CD_INDIRECT", this.dsList.getColumn(i, "CD_INDIRECT"));
				this.dsUpdate.setColumn(nrow, "CD_COST", this.dsList.getColumn(i, "CD_COST"));
				this.dsUpdate.setColumn(nrow, "CD_CBS", this.dsList.getColumn(i, "CD_CBS"));
				this.dsUpdate.setColumn(nrow, "DS_EXPR", this.dsList.getColumn(i, "DS_EXPR"));
				this.dsUpdate.setColumn(nrow, "RT1", this.dsList.getColumn(i, "RT1"));
				this.dsUpdate.setColumn(nrow, "RT2", this.dsList.getColumn(i, "RT2"));
				this.dsUpdate.setColumn(nrow, "RT3", this.dsList.getColumn(i, "RT3"));
				this.dsUpdate.setColumn(nrow, "RT4", this.dsList.getColumn(i, "RT4"));
				this.dsUpdate.setColumn(nrow, "DS_BIGO", this.dsList.getColumn(i, "DS_BIGO"));
				this.dsUpdate.setColumn(nrow, "AM_INDIRECT_USER", this.dsList.getColumn(i, "AM_INDIRECT_USER"));
				this.dsUpdate.setColumn(nrow, "YN_AUTOCAL", this.dsList.getColumn(i, "YN_AUTOCAL"));
				this.dsUpdate.setColumn(nrow, "YN_BID", this.dsList.getColumn(i, "YN_BID"));
				this.dsUpdate.setColumn(nrow, "YN_USE", this.dsList.getColumn(i, "YN_USE"));
			break;
				
		}
	}

	if (this.dsUpdate.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "update=dsUpdate";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
 	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
 						strSvcType , 	// transaction을 요청할 구분
 						inProc,			// Procedure 정보 Dataset 이름
 						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
 						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
 						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
 						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */ 
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}
 
/************************************************************************
 * 서브 버튼 이벤트
 ************************************************************************/

/************************************************************************
 * Validate
 ************************************************************************/
this.fnSelectValidate = function() {
	var validate = true;

	if (this.gfnIsNull(this.ccfSite.form.CDTextBox.text)) {
		validate = false;
		// Alert후 실행할 처리
		this.fnVaidateCallback = function() {
			this.ccfSite.form.CDTextBox.setFocus();
		};
		this.gfnAlert("현장코드를 입력하세요.", "fnVaidateCallback");
	}else if(this.gfnIsNull(this.ccfOrder.form.CDTextBox.text)) {
		validate = false;
		// Alert후 실행할 처리
		this.fnVaidateCallback = function() {
			this.ccfOrder.form.CDTextBox.setFocus();
		};
		this.gfnAlert("계약번호를 입력하세요.", "fnVaidateCallback");
	}
	return validate;
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);
		this.gfnGridAfterSelect(this.dxGridSub);
	}
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}

};

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
 
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	
	if (id == "ccfOrder") {
	
 		if (this.gfnIsNull(this.dsSearch.getColumn(0, "CD_SITE"))) {
 			this.gfnAlert("현장코드를 먼저 입력하세요.");
 			return false;
 		}
		dsUserParam.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));	// 현장코드
	
	}
	return true;
};

this.fnAfterCDTextChanged = function(id, codeFindData) {
	if(id == "ccfSite") {
		// 현장코드 변경시 입찰번호 초기화
		this.ccfOrder.form.fnCodeFindClear();
	}
}

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
this.fnGrid_BeforeUserDataSetParam = function(id, dsUserParam, nrow){
	if(id == "DCX_CFCOST_INDIRECT"){
		dsUserParam.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
		dsUserParam.setColumn(nrow, "NO_HADOCONT", this.dsSearch.getColumn(0, "NO_BID"));
	}
};

this.fnGrid_EnterCell = function(obj:nexacro.Grid, row, cell){
	var colnm = this.gfnGridGetBindColumnNameByIndex(this.dxGrid, cell);
	if(colnm == "RT1" || colnm == "RT2" || colnm == "RT3" || colnm == "RT4"){
		if(this.dsList.getColumn(row, "YN_RT_CHG") == "Y"){
			return true;
		}
	}else if(colnm == "AM_INDIRECT_USER"){
		if(this.dsList.getColumn(row, "YN_AUTOCAL") == "N"){
			return true;
		}
	}
	return false;
};

/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.fnSearchInit = function(obj,e) {
	if(e == null || (e.pretext != e.posttext)) {
		this.gfnSetFormStatus(this);
		this.gfnGridClear(this.dxGrid);
		this.gfnGridClear(this.dxGridSub);
	}
};

this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
	}
};

this.fnAutoCal = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	if (!this.fnSelectValidate()) return false;
	
	this.dsCal.clearData();
	this.dsCal.addRow();
	this.dsCal.setColumn(0, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
	this.dsCal.setColumn(0, "NO_PR", this.dsSearch.getColumn(0, "NO_PR"));
	this.dsCal.setColumn(0, "YN_CLEAR", (this.divSearch.form.cchkYN_CLEAR.value == true ? "Y": ""));
	
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "cal=dsCal";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
 	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
 						strSvcType , 	// transaction을 요청할 구분
 						inProc,			// Procedure 정보 Dataset 이름
 						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
 						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
 						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
 						callBackFnc); // 통신방법 정의 [생략가능]
};

this.fnApplySilheng = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	if (!this.fnSelectValidate()) return false;
	
	this.dsApply.clearData();
	this.dsApply.addRow();
	this.dsApply.setColumn(0, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
	this.dsApply.setColumn(0, "NO_PR", this.dsSearch.getColumn(0, "NO_PR"));
	this.dsApply.setColumn(0, "YN_APPLY_DOKUB", (this.divSearch.form.cchkYN_APPLY_DOKUB.value == true ? "Y": ""));

	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "apply=dsApply";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
 	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
 						strSvcType , 	// transaction을 요청할 구분
 						inProc,			// Procedure 정보 Dataset 이름
 						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
 						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
 						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
 						callBackFnc); // 통신방법 정의 [생략가능]
};]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DCBPR_INDIRECT_REG_SITE_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">update</Col>
            <Col id="SP">DCBPR_INDIRECT_REG_SITE_UPDATE</Col>
          </Row>
          <Row>
            <Col id="TARGET">cal</Col>
            <Col id="SP">DCBPR_INDIRECT_REG_SITE_CALCULATE</Col>
          </Row>
          <Row>
            <Col id="TARGET">apply</Col>
            <Col id="SP">DCBPR_INDIRECT_REG_SITE_APPLY</Col>
          </Row>
          <Row>
            <Col id="TARGET">subselect</Col>
            <Col id="SP">DCBPR_INDIRECT_REG_SITE_SUB_SELECT</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsListSub"/>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_SITE" type="STRING" size="256"/>
          <Column id="NO_PR" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CD_SITE"/>
            <Col id="NO_PR"/>
          </Row>
        </Rows>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfSite.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_SITE"/>
      <BindItem id="item1" compid="divSearch.form.ccfOrder.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="NO_PR"/>
    </Bind>
  </Form>
</FDL>
