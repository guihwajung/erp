<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="New Form" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg" formscrolltype="none">
          <Layouts>
            <Layout>
              <Static id="staCD_CF" taborder="0" text="코드파인드" left="0.0" top="10.0" width="105.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Div id="ccfCD_CF" CDTextWidth="80" taborder="1" CodeFindName="DQX_CF" left="staCD_CF:0.0" top="10.0" width="200" height="24.0" url="cmm::cmmCodeFind.xfdl" FitToContents="true"/>
              <Static id="staDS_SEARCH" taborder="2" text="검색어" left="ccfCD_CF:0.0" top="10.0" width="105.0" height="24.0" textAlign="center" cssclass="sta_WF_SchLabel"/>
              <Edit id="ctxtDS_SEARCH" taborder="3" left="staDS_SEARCH:0.0" top="10.0" width="200" height="24.0" value=""/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btnCAL = this.gfnFormButtonAdd("btnCAL", "fnCAL");
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {	
	this.dxGrid = this.divData.form.objGrid;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	// 그리드 초기화
	this.gfnGridInit(this.dxGrid, this.dsList, "DQ", "DQG_SEARCHDATA");
};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_CF", "string");
	this.dsSelect.addColumn("DS_SEARCH", "string");

	this.dsInsert = new Dataset();
	this.dsInsert.addColumn("CD_CODEFINDE", "string");
	this.dsInsert.addColumn("CD_CODE", "string");
	this.dsInsert.addColumn("DS_CODE", "string");
	this.dsInsert.addColumn("CD_RESULT", "string");
	this.dsInsert.addColumn("DS_RESULT", "string");
	this.dsInsert.addColumn("DS_USERDATA", "string");
	this.dsInsert.addColumn("RT_SEARCH", "string");
	this.dsInsert.addColumn("DT_UPDATE", "string");
	this.dsInsert.addColumn("FR_DATE", "string");

	this.dsUpdate = new Dataset();
	this.dsUpdate.addColumn("CD_CODEFINDE", "string");
	this.dsUpdate.addColumn("CD_CODE", "string");
	this.dsUpdate.addColumn("DS_CODE", "string");
	this.dsUpdate.addColumn("CD_RESULT", "string");
	this.dsUpdate.addColumn("DS_RESULT", "string");
	this.dsUpdate.addColumn("DS_USERDATA", "string");
	this.dsUpdate.addColumn("RT_SEARCH", "string");
	this.dsUpdate.addColumn("DT_UPDATE", "string");
	this.dsUpdate.addColumn("FR_DATE", "string");

	this.dsDelete = new Dataset();
	this.dsDelete.addColumn("CD_CODEFINDE", "string");
	this.dsDelete.addColumn("CD_CODE", "string");
	
	this.dsCal = new Dataset();
	this.dsCal.addColumn("PARAM", "string");
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	
	this.dsSelect.setColumn(0, "CD_CF", this.dsSearch.getColumn(0, "CD_CF"));
	this.dsSelect.setColumn(0, "DS_SEARCH", this.dsSearch.getColumn(0, "DS_SEARCH"));
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	var nrow = this.gfnGridAdd(this.dxGrid); // top (default), bottom, current
}

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}

/*
 *	저장 버튼
 */
this.fnSave = function() {
	// 그리드 필수항목 체크
	if (!this.gfnGridValidate(this.dxGrid)) return;	

	this.dxGrid.updateToDataset();
		
	this.dsInsert.clearData();
	this.dsUpdate.clearData();
	this.dsDelete.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "I":
				var nrow = this.dsInsert.addRow();
				this.dsInsert.setColumn(nrow, "CD_CODEFINDE", this.dsList.getColumn(i, "CD_CODEFINDE"));
				this.dsInsert.setColumn(nrow, "CD_CODE", this.dsList.getColumn(i, "CD_CODE"));
				this.dsInsert.setColumn(nrow, "DS_CODE", this.dsList.getColumn(i, "DS_CODE"));
				this.dsInsert.setColumn(nrow, "CD_RESULT", this.dsList.getColumn(i, "CD_RESULT"));
				this.dsInsert.setColumn(nrow, "DS_RESULT", this.dsList.getColumn(i, "DS_RESULT"));
				this.dsInsert.setColumn(nrow, "DS_USERDATA", this.dsList.getColumn(i, "DS_USERDATA"));
				this.dsInsert.setColumn(nrow, "RT_SEARCH", this.dsList.getColumn(i, "RT_SEARCH"));
				this.dsInsert.setColumn(nrow, "DT_UPDATE", this.dsList.getColumn(i, "DT_UPDATE"));
				this.dsInsert.setColumn(nrow, "FR_DATE", this.dsList.getColumn(i, "FR_DATE"));
				break;
				
			case "U":
				var nrow = this.dsUpdate.addRow();
				this.dsUpdate.setColumn(nrow, "CD_CODEFINDE", this.dsList.getColumn(i, "CD_CODEFINDE"));
				this.dsUpdate.setColumn(nrow, "CD_CODE", this.dsList.getColumn(i, "CD_CODE"));
				this.dsUpdate.setColumn(nrow, "DS_CODE", this.dsList.getColumn(i, "DS_CODE"));
				this.dsUpdate.setColumn(nrow, "CD_RESULT", this.dsList.getColumn(i, "CD_RESULT"));
				this.dsUpdate.setColumn(nrow, "DS_RESULT", this.dsList.getColumn(i, "DS_RESULT"));
				this.dsUpdate.setColumn(nrow, "DS_USERDATA", this.dsList.getColumn(i, "DS_USERDATA"));
				this.dsUpdate.setColumn(nrow, "RT_SEARCH", this.dsList.getColumn(i, "RT_SEARCH"));
				this.dsUpdate.setColumn(nrow, "DT_UPDATE", this.dsList.getColumn(i, "DT_UPDATE"));
				this.dsUpdate.setColumn(nrow, "FR_DATE", this.dsList.getColumn(i, "FR_DATE"));
				break;
				
			case "D":
				var nrow = this.dsDelete.addRow();
				this.dsDelete.setColumn(nrow, "CD_CODEFINDE", this.dsList.getColumn(i, "CD_CODEFINDE"));
				this.dsDelete.setColumn(nrow, "CD_CODE", this.dsList.getColumn(i, "CD_CODE"));				break;
				break;
		}
	}
	
	if (this.dsInsert.rowcount == 0 && this.dsUpdate.rowcount == 0 && this.dsDelete.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "insert=dsInsert update=dsUpdate delete=dsDelete";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {
	var validate = true;
	/*
	if (this.gfnIsNull(this.dsSearch.getColumn(0,"CD_SYSTEM"))) {
		validate = false;
		// Alert후 실행할 처리
		this.fnVaidateCallback = function() {
			this.ccfCD_SYSTEM.form.CDTextBox.setFocus();
		}
		this.gfnAlert("시스템을 입력하세요.", "fnVaidateCallback");
	}
	*/
	return validate;
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);	
	}
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "cal") {
		if (errorCode == 0) {
			this.gfnAlert("검색어집계가 정상처리되었습니다.");
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
 
/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
	}
};

this.fnCAL = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	this.dsCal.clearData();
	var nrow = this.dsCal.addRow();
	
	this.dsCal.setColumn(nrow, "PARAM", "");
	
	if (this.dsCal.rowcount == 0) return;
		
	var strSvcId    = "cal";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "cal=dsCal";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}
]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DQZPR_SEARCHDATA_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">insert</Col>
            <Col id="SP">DQZPR_SEARCHDATA_INSERT</Col>
          </Row>
          <Row>
            <Col id="TARGET">update</Col>
            <Col id="SP">DQZPR_SEARCHDATA_UPDATE</Col>
          </Row>
          <Row>
            <Col id="TARGET">delete</Col>
            <Col id="SP">DQZPR_SEARCHDATA_DELETE</Col>
          </Row>
          <Row>
            <Col id="TARGET">cal</Col>
            <Col id="SP">DQZPR_SEARCHDATA_STATISTICS_01</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_CF" type="STRING" size="256"/>
          <Column id="DS_SEARCH" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfCD_CF.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_CF"/>
      <BindItem id="item1" compid="divSearch.form.ctxtDS_SEARCH" propid="value" datasetid="dsSearch" columnid="DS_SEARCH"/>
    </Bind>
  </Form>
</FDL>
