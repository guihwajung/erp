<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="DWA_SILHENG" width="1280" height="720" titletext="New Form" onload="DWA_SILHENG_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg">
          <Layouts>
            <Layout>
              <Static id="sta00" taborder="3" text="현장코드" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfSite" CodeFindName="DZX_CFSITE" CDTextWidth="70" taborder="0" left="sta00:0.0" top="10.0" width="250" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
              <Combo id="cboNO_DGR" taborder="4" left="ccfSite:0.0" top="10.0" width="100" height="24.0" innerdataset="dsNO_DGR" datacolumn="DS_DGR" codecolumn="NO_DGR" value="" index="-1"/>
              <Static id="staYM_WORK" taborder="1" text="작업년월" left="cboNO_DGR:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ctclYM_WORK" taborder="2" left="staYM_WORK:0.0" top="10.0" width="80" height="24.0" url="cmm::cmmCalMM.xfdl"/>
              <CheckBox id="cchkAM_PREPAY" taborder="1" text="선급금" left="ctclYM_WORK:0.0" top="10.0" width="60" height="24.0" onchanged="divSearch_cchkAM_PREPAY_onchanged"/>
              <CheckBox id="cchkAM_PAYSCHD" taborder="1" text="지급예정" left="cchkAM_PREPAY:0.0" top="10.0" width="70" height="24.0" onchanged="divSearch_cchkAM_PAYSCHD_onchanged"/>
              <CheckBox id="cchkAM_GONGJAE" taborder="1" text="공제금" left="cchkAM_PAYSCHD:0.0" top="10.0" width="60" height="24.0" onchanged="divSearch_cchkAM_GONGJAE_onchanged"/>
              <CheckBox id="cchkAM_REAL_TOT" taborder="1" text="실집행금" left="cchkAM_GONGJAE:0.0" top="10.0" width="70" height="24.0" onchanged="divSearch_cchkAM_REAL_TOT_onchanged" value="true"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Objects>
      <Dataset id="dsList" onvaluechanged="dsList_onvaluechanged"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DWBPR_HDGISUNGSLIP_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">combo</Col>
            <Col id="SP">DWBPR_HDGISUNGMONTH_MAX_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">save</Col>
            <Col id="SP">DWBPR_HDGISUNGSLIP_UPDATE</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_SITE" type="STRING" size="256"/>
          <Column id="YM_WORK" type="STRING" size="256"/>
          <Column id="NO_DGR" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CD_SITE"/>
            <Col id="YM_WORK"/>
            <Col id="NO_DGR"/>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsNO_DGR"/>
      <Dataset id="dsChangeColumn">
        <ColumnInfo>
          <Column id="AM_PREPAY" type="STRING" size="256"/>
          <Column id="AM_PAYSCHD" type="STRING" size="256"/>
          <Column id="AM_GONGJAE" type="STRING" size="256"/>
          <Column id="AM_REAL_TOT" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="AM_PREPAY">AM_PREPAY_PROV|AM_PREPAY_VAT|AM_PREPAY_TOT</Col>
            <Col id="AM_PAYSCHD">AM_PAYSCHD_TAX|AM_PAYSCHD_TXFR|AM_PAYSCHD_PROV|AM_PAYSCHD_VAT|AM_PAYSCHD_TOT</Col>
            <Col id="AM_GONGJAE">AM_GONGJAE1|AM_GONGJAE3|AM_GONGJAE5|AM_GONGJAE_TOT|AM_GONGJAE2|AM_GONGJAE3VAT|AM_GONGJAE4|AM_GONGJAE6|AM_GONGJAE6VAT</Col>
            <Col id="AM_REAL_TOT">AM_REAL_TOT</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsAM_GONGJAE">
        <ColumnInfo>
          <Column id="AM_GONGJAE1" type="INT" size="256"/>
          <Column id="AM_GONGJAE3" type="INT" size="256"/>
          <Column id="AM_GONGJAE5" type="INT" size="256"/>
          <Column id="AM_GONGJAE_TOT" type="INT" size="256"/>
          <Column id="AM_GONGJAE2" type="INT" size="256"/>
          <Column id="AM_GONGJAE3VAT" type="INT" size="256"/>
          <Column id="AM_GONGJAE4" type="INT" size="256"/>
          <Column id="AM_GONGJAE6" type="INT" size="256"/>
          <Column id="AM_GONGJAE6VAT" type="INT" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
    </Objects>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.DWA_SILHENG_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();	
	
	if(!this.gfnIsNull(this.getOwnerFrame().CD_SITE) && !this.gfnIsNull(this.getOwnerFrame().YM_WORK))
	{
		this.dsSearch.setColumn(0,"CD_SITE", this.getOwnerFrame().CD_SITE);
		this.dsSearch.setColumn(0,"YM_WORK", this.getOwnerFrame().YM_WORK);
		this.ccfSite.form.DSTextBox.set_value(this.getOwnerFrame().CD_SITE);
	}else{
		var today = this.gfnGetDate();
		this.dsSearch.setColumn(0,"YM_WORK",today.substr(0,6));
	}
	
	// 기성차수 조회조건 보이기/숨기기
	this.YN_DGR = this.gfnGetConfig("DW" , "YN_DGR");
	if(this.YN_DGR != "Y")
	{
		this.divSearch.form.cboNO_DGR.set_width(0);
		this.divSearch.form.cboNO_DGR.set_readonly(true);
		this.divSearch.form.resetScroll();
	}
	else if(this.YN_DGR == "Y")
	{
		this.divSearch.form.cboNO_DGR.set_width(100);
		this.divSearch.form.cboNO_DGR.set_readonly(false);
		this.divSearch.form.resetScroll();
	}
	
	//this.btn1.set_enable(false);
	
	this.fnGetAM_GONGJAE_Size();
	
	// checkbox 이벤트 강제 실행. (grid width 조절 onLoad시 적용하기 위해서)
	this.divSearch_cchkAM_PREPAY_onchanged(this.divSearch.form.cchkAM_PREPAY, {postvalue:false});
	this.divSearch_cchkAM_PAYSCHD_onchanged(this.divSearch.form.cchkAM_PAYSCHD, {postvalue:false});
	this.divSearch_cchkAM_GONGJAE_onchanged(this.divSearch.form.cchkAM_GONGJAE, {postvalue:false});
	this.divSearch_cchkAM_REAL_TOT_onchanged(this.divSearch.form.cchkAM_REAL_TOT, {postvalue:true});
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
	// Select, Add, Del, Save, Excel, Print
	// SubSelect, SubAdd, SubDel, SuubSave, SubExcel
// 	this.FormBtns.Add.set_enable(false);
// 	this.FormBtns.Del.set_enable(false);
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btn1 = this.gfnFormButtonAdd("btnHadoDj", "fnHadoDj");

	this.btn1.set_enable(false);	
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.ccfSite = this.divSearch.form.ccfSite;
	this.dxGrid = this.divData.form.objGrid;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {

	this.gfnGridInit(this.dxGrid, this.dsList, "DW", "DWB_HDGISUNGSLIP", "DS_COST", "GR_COST");
}

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("YM_WORK", "string");
	this.dsSelect.addColumn("CD_SITE", "string");
	this.dsSelect.addColumn("NO_DGR", "string");
	
	this.dsCombo = new Dataset();
	this.dsCombo.addColumn("CD_SITE", "string");
	this.dsCombo.addColumn("YM_WORK", "string");
	
	this.dsSave = new Dataset();
	this.dsSave.addColumn("YM_WORK", "string");
	this.dsSave.addColumn("CD_SITE", "string");
	this.dsSave.addColumn("NO_DGR", "string");
	this.dsSave.addColumn("NO_HADOCONT", "string");
	this.dsSave.addColumn("YMD_WORK", "string");
	this.dsSave.addColumn("AM_GISUNG_VAT", "bigdecimal");
	this.dsSave.addColumn("AM_PREPAY_VAT", "bigdecimal");
	this.dsSave.addColumn("AM_JIKBUL", "bigdecimal");
	this.dsSave.addColumn("CD_PAYMENT", "string");
	this.dsSave.addColumn("DT_PAYMENT", "string");
	this.dsSave.addColumn("CD_VATPROOF", "string");
	this.dsSave.addColumn("DT_VATPROOF", "string");
	this.dsSave.addColumn("YN_ETAX", "string");
	this.dsSave.addColumn("YN_FORWARD", "string");
	this.dsSave.addColumn("NO_VAT1", "string");
	this.dsSave.addColumn("NO_VAT2", "string");
	this.dsSave.addColumn("CONVERSATION_ID1", "string");
	this.dsSave.addColumn("CONVERSATION_ID2", "string");
	this.dsSave.addColumn("CD_ACCOUNT", "string");
	this.dsSave.addColumn("YN_DIVTARGET", "string");
	this.dsSave.addColumn("YN_JIKBUL", "string");

	
};

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {

	this.dsSelect.clearData();
	this.dsSelect.addRow();

	this.dsSelect.setColumn(0, "YM_WORK", this.dsSearch.getColumn(0, "YM_WORK").substr(0,6));
	this.dsSelect.setColumn(0, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
	this.dsSelect.setColumn(0, "NO_DGR", this.dsSearch.getColumn(0, "NO_DGR"));
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// trabsaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	this.gfnGridAdd(this.dxGrid);
};

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
};

/*
 *	저장 버튼
 */
this.fnSave = function() {
	if (!this.gfnGridValidate(this.dxGrid)) return;	
	
	this.dsSave.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "U":
				var nrow = this.dsSave.addRow();
				this.dsSave.setColumn(nrow, "YM_WORK", this.dsSearch.getColumn(0, "YM_WORK").substr(0,6));
				this.dsSave.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
				this.dsSave.setColumn(nrow, "NO_DGR", this.dsSearch.getColumn(0, "NO_DGR"));
				this.dsSave.setColumn(nrow, "NO_HADOCONT", this.dsList.getColumn(i, "NO_HADOCONT"));
				this.dsSave.setColumn(nrow, "YMD_WORK", this.dsList.getColumn(i, "YMD_WORK"));
				this.dsSave.setColumn(nrow, "AM_GISUNG_VAT", this.dsList.getColumn(i, "AM_GISUNG_VAT"));
				this.dsSave.setColumn(nrow, "AM_PREPAY_VAT", this.dsList.getColumn(i, "AM_PREPAY_VAT"));
				this.dsSave.setColumn(nrow, "AM_JIKBUL", this.dsList.getColumn(i, "AM_JIKBUL"));
				this.dsSave.setColumn(nrow, "CD_PAYMENT", this.dsList.getColumn(i, "CD_PAYMENT"));
				this.dsSave.setColumn(nrow, "DT_PAYMENT", this.dsList.getColumn(i, "DT_PAYMENT"));
				this.dsSave.setColumn(nrow, "CD_VATPROOF", this.dsList.getColumn(i, "CD_VATPROOF"));
				this.dsSave.setColumn(nrow, "DT_VATPROOF", this.dsList.getColumn(i, "DT_VATPROOF"));
				this.dsSave.setColumn(nrow, "YN_ETAX", this.dsList.getColumn(i, "YN_ETAX"));
				this.dsSave.setColumn(nrow, "YN_FORWARD", this.dsList.getColumn(i, "YN_FORWARD"));
				this.dsSave.setColumn(nrow, "NO_VAT1", this.dsList.getColumn(i, "NO_VAT1"));
				this.dsSave.setColumn(nrow, "NO_VAT2", this.dsList.getColumn(i, "NO_VAT2"));
				this.dsSave.setColumn(nrow, "CONVERSATION_ID1", this.dsList.getColumn(i, "CONVERSATION_ID1"));
				this.dsSave.setColumn(nrow, "CONVERSATION_ID2", this.dsList.getColumn(i, "CONVERSATION_ID2"));
				this.dsSave.setColumn(nrow, "CD_ACCOUNT", this.dsList.getColumn(i, "CD_ACCOUNT"));
				this.dsSave.setColumn(nrow, "YN_DIVTARGET", this.dsList.getColumn(i, "YN_DIVTARGET"));
				this.dsSave.setColumn(nrow, "YN_JIKBUL", this.dsList.getColumn(i, "YN_JIKBUL"));
				break;
				
		}
	}
		
	if (this.dsSave.rowcount == 0) return;
	
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "save=dsSave";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
};

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {

		if(this.dsList.rowcount > 0){
			this.btn1.set_enable(true);	
		}else{
			this.btn1.set_enable(false);	

		}
		
		this.gfnGridAfterSelect(this.dxGrid);	
		
	}else if(svcID == "save"){
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
};

this.fnCallbackCombo = function(svcID, errorCode, errorMsg)
{
	if(svcID == "combo") {
		this.divSearch.form.cboNO_DGR.set_index(0);	
	}
};

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
 
/************************************************************************
 * 기타 이벤트
 ************************************************************************/
/*
 *	조회 조건 변경시 초기화
 */
this.fnSearchInit = function(obj,e) {
	if(e == null || (e.pretext != e.posttext)) {
		// 폼상태 초기화
		this.gfnSetFormStatus(this);	
		this.gfnGridClear(this.dxGrid);
	}
};

this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
		
		this.btn1.set_enable(false);	
	}
	
	if(e.columnid == "CD_SITE" || e.columnid == "YM_WORK"){
	  this.fnSetCombo();
   }
};

this.fnSetCombo = function() {
	
	this.dsCombo.clearData();
	
	this.dsCombo.addRow();
	this.dsCombo.setColumn(0, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
	this.dsCombo.setColumn(0, "YM_WORK", this.dsSearch.getColumn(0, "YM_WORK").substr(0,6));
	
	var strSvcId    = "combo";
	var strSvcType  = "select";
	var inProc		= "_dsProc";
	var inData      = "combo=dsCombo";
	var outData     = "dsNO_DGR=combo0";
	var strArg      = "";
	var callBackFnc = "fnCallbackCombo";

	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
};

this.fnHadoDj = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	var param = {};
	var rowposition = this.dsList.rowposition;
	
	param.CD_SITE = this.dsSearch.getColumn(0, "CD_SITE");
	param.DS_SITE = this.ccfSite.form.DSTextBox.text;
	
	if(rowposition > -1){
		param.NO_HADOCONT = this.dsList.getColumn(rowposition, "NO_HADOCONT");
		param.DS_HADOCONT = this.dsList.getColumn(rowposition, "DS_HADOCONT");
	}
	
	// TODO : param 추가가 있을지 모르겠음.
	
	this.gfnFormOpen("DWB", "DWB_HADODJ", "", param); 
};


this.fnSetGridSize = function(check, columnNames, width)
{	
	for(var k=0; k<this.dxGrid.getFormatColCount(); k++){
      var ds_field = this.dxGrid.getCellProperty("body", k, "text");
      if(ds_field.indexOf("bind:") > -1) {
         ds_field = ds_field.replace("bind:", "");

		 for(var i=0; i < columnNames.length; i++)
		 {
			 if(ds_field == columnNames[i])
			 {
				if(check == true)
				{
					this.dxGrid.setFormatColProperty(k, "size", width);
				}
				else
				{
					this.dxGrid.setFormatColProperty(k, "size", 0);
				}
				break;
			 }
		 }
      }
   }
}	

// 공제금들의 경우 무조건 보이게하면 안되는 컬럼들이 존재하여 기존의 크기를 저장해둔다.
this.fnGetAM_GONGJAE_Size = function()
{
	var temp = this.dsChangeColumn.getColumn(0, "AM_GONGJAE");
	var columnNames = temp.split('|');
	
	for(var i = 0; i < columnNames.length; i++)
	{
		var index = this.dxGrid.getBindCellIndex("body", columnNames[i]);
		this.dsAM_GONGJAE.setColumn(0, columnNames[i], this.dxGrid.getFormatColProperty(index, "size"));
	}	
}

// 선급금 checkbox onchanged
this.divSearch_cchkAM_PREPAY_onchanged = function(obj:nexacro.CheckBox,e:nexacro.CheckBoxChangedEventInfo)
{
	if(e.prevalue != e.postvalue)
	{
		var temp = this.dsChangeColumn.getColumn(0, "AM_PREPAY");
		var columnNames = temp.split('|');
		
		this.fnSetGridSize(e.postvalue, columnNames, 100);
	}
};
// 지급예정 checkbox onchanged
this.divSearch_cchkAM_PAYSCHD_onchanged = function(obj:nexacro.CheckBox,e:nexacro.CheckBoxChangedEventInfo)
{
	if(e.prevalue != e.postvalue)
	{
		var temp = this.dsChangeColumn.getColumn(0, "AM_PAYSCHD");
		var columnNames = temp.split('|');
		
		this.fnSetGridSize(e.postvalue, columnNames, 100);
	}
};

// 공제금 checkbox onchanged
// 공제금은 컬럼별로 크기가 다르기 때문에 별도 관리.
this.divSearch_cchkAM_GONGJAE_onchanged = function(obj:nexacro.CheckBox,e:nexacro.CheckBoxChangedEventInfo)
{
	var temp = this.dsChangeColumn.getColumn(0, "AM_GONGJAE");
	var columnNames = temp.split('|');
	
	for(var k=0; k<this.dxGrid.getFormatColCount(); k++){
      var ds_field = this.dxGrid.getCellProperty("body", k, "text");
      if(ds_field.indexOf("bind:") > -1) {
         ds_field = ds_field.replace("bind:", "");

		 for(var i=0; i < columnNames.length; i++)
		 {
			 if(ds_field == columnNames[i])
			 {
				if(e.postvalue == true)
				{
					this.dxGrid.setFormatColProperty(k, "size", this.dsAM_GONGJAE.getColumn(0, columnNames[i]));
				}
				else
				{
					this.dxGrid.setFormatColProperty(k, "size", 0);
				}
				break;
			 }
		 }
      }
   }
};

// 실집행금 checkbox onchanged
this.divSearch_cchkAM_REAL_TOT_onchanged = function(obj:nexacro.CheckBox,e:nexacro.CheckBoxChangedEventInfo)
{
	if(e.prevalue != e.postvalue)
	{
		var temp = this.dsChangeColumn.getColumn(0, "AM_REAL_TOT");
		var columnNames = temp.split('|');
		
		this.fnSetGridSize(e.postvalue, columnNames, 100);
	}
};


// 그리드 데이터 변경시 이벤트 처리
this.dsList_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	// 그리드에서 값 변경이 일어났을경우 확정버튼 비활성화 처리(체크박스 체크시에는 제외시킴)
	if(e.columnid != "CHK"){
		if(e.oldvalue != e.newvalue){			
			this.btn1.set_enable(false);	
		}
	}
	
	// 자동산식
	if(e.oldvalue != e.newvalue)
	{
		if(e.columnid == "AM_GISUNG_VAT")
		{
			var am_gisung_prov = nexacro.toNumber(this.dsList.getColumn(e.row, "AM_GISUNG_PROV"), 0);
			var am_prepay_vat = nexacro.toNumber(this.dsList.getColumn(e.row, "AM_PREPAY_VAT"), 0);
			
			this.dsList.setColumn(e.row, "AM_GISUNG_TOT", nexacro.toNumber(e.newvalue + am_gisung_prov, 0));
			this.dsList.setColumn(e.row, "AM_PAYSCHD_VAT", nexacro.toNumber(e.newvalue - am_prepay_vat, 0));
		}	
		
		if(e.columnid == "AM_PREPAY_VAT")
		{
			var am_prepay_prov = nexacro.toNumber(this.dsList.getColumn(e.row, "AM_PREPAY_PROV"), 0);
			var am_gisung_vat = nexacro.toNumber(this.dsList.getColumn(e.row, "AM_GISUNG_VAT"), 0);
			
			this.dsList.setColumn(e.row, "AM_PREPAY_TOT", nexacro.toNumber(am_prepay_prov + e.newvalue, 0));
			this.dsList.setColumn(e.row, "AM_PAYSCHD_VAT", nexacro.toNumber(am_gisung_vat - e.newvalue, 0));
		}
		
		if(e.columnid == "AM_PAYSCHD_VAT")
		{
			var am_payschd_prov = nexacro.toNumber(this.dsList.getColumn(e.row, "AM_PAYSCHD_PROV"), 0);
		
			this.dsList.setColumn(e.row, "AM_PAYSCHD_TOT", nexacro.toNumber(am_payschd_prov + e.newvalue, 0));
		}
		
		if(e.columnid == "AM_PAYSCHD_TOT")
		{
			var am_gongjae_tot = nexacro.toNumber(this.dsList.getColumn(e.row, "AM_GONGJAE_TOT"), 0);
			
			this.dsList.setColumn(e.row, "AM_REAL_TOT", nexacro.toNumber(e.newvalue - am_gongjae_tot, 0));
		}
	}
};
]]></Script>
    <Bind>
      <BindItem id="item1" compid="divSearch.form.ctclYM_WORK.form.TextBox" propid="value" datasetid="dsSearch" columnid="YM_WORK"/>
      <BindItem id="item0" compid="divSearch.form.ccfSite.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_SITE"/>
      <BindItem id="item2" compid="divSearch.form.cboNO_DGR" propid="value" datasetid="dsSearch" columnid="NO_DGR"/>
    </Bind>
  </Form>
</FDL>
