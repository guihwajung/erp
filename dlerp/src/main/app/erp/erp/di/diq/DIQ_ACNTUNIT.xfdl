<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="form" width="1280" height="720" titletext="예산부서" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0" top="10" height="46.0" right="0" cssclass="div_SEARCH_Bg" formscrolltype="none">
          <Layouts>
            <Layout>
              <Static id="staYR_BUDGET" taborder="0" text="예산년도" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="cctclYR_BUDGET" taborder="1" left="staYR_BUDGET:0.0" top="10.0" width="60" height="24.0" url="cmm::cmmCalYY.xfdl" text=""/>
              <Static id="staYN_USE" taborder="2" text="사용여부" left="cctclYR_BUDGET:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Combo id="ccboYN_USE" taborder="3" left="staYN_USE:0.0" top="10.0" width="80" height="24.0" innerdataset="dsYN_USE" datacolumn="DS_CODE" codecolumn="CD_CODE" value="" onitemchanged="fnSearchInit" index="0"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	this.divSearch.form.ccboYN_USE.set_index(1);
	
	//기준년월 셋팅
	var today = this.gfnGetDate().substr(0,4);
	this.dsSearch.setColumn(0, "YR_BUDGET", today);
	
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() 
{
	this.btnPreYearCopy = this.gfnFormButtonAdd("btnPreYearCopy", "fnPreYearCopy");
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {	
	this.cctclYR_BEDGET = this.divSearch.form.cctclYR_BUDGET;
	this.ccboYN_USE = this.divSearch.form.ccboYN_USE;

	this.dxGrid = this.divData.form.objGrid;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	// 그리드 초기화
	this.gfnGridInit(this.dxGrid, this.dsList, "DI", "DIQ_ACNTUNIT" );
	
	// 셀 수정가능 여부
	this.dxGrid.EnterCell = "fnGrid_EnterCell";
	
	// 셀 변경 후 이벤트
	this.dxGrid.AfterEdit = "fnGrid_AfterEdit";
	
	// 그리드 코드파인드 설정
	this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforeUserDataSetParam";
	
	// 그리드 코드파인드 값 변경
	this.dxGrid.AfterCDTextChanged = "fnGrid_AfterCDTextChanged";
	
	// BUTTON, BUTTON-IN 처리
	this.dxGrid.ExpandUp = "fnGrid_ExpandUp";
	
	// 트리 접는 로직.
	//this.dxGrid.set_treeinitstatus("collapse,all");	
};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {

	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("YR_BUDGET", "string");
	this.dsSelect.addColumn("YN_USE", "string");
	
	this.dsInsert = new Dataset();
	this.dsInsert.addColumn("YR_BUDGET", "string");
	this.dsInsert.addColumn("CD_DEPT_ACNT", "string");
	this.dsInsert.addColumn("DS_DEPT_ACNT", "string");
	this.dsInsert.addColumn("LV_DEPT_ACNT", "int");
	this.dsInsert.addColumn("GR_DEPT_ACNT", "string");
	this.dsInsert.addColumn("CD_DEPT_UPPER", "string");
	this.dsInsert.addColumn("YN_USE", "string");	
	this.dsInsert.addColumn("ID_INSERT", "string");
	
	
	this.dsUpdate = new Dataset();
	this.dsUpdate.addColumn("YR_BUDGET", "string");
	this.dsUpdate.addColumn("CD_DEPT_ACNT", "string");
	this.dsUpdate.addColumn("LV_DEPT_ACNT", "int");
	this.dsUpdate.addColumn("GR_DEPT_ACNT", "string");
	this.dsUpdate.addColumn("CD_DEPT_UPPER", "string");
	this.dsUpdate.addColumn("YN_USE", "string");	
	this.dsUpdate.addColumn("ID_UPDATE", "string");
	
	this.dsDelete = new Dataset();
	this.dsDelete.addColumn("YR_BUDGET", "string");
	this.dsDelete.addColumn("CD_DEPT_ACNT", "string");
	
	this.dsCopy = new Dataset();
	this.dsCopy.addColumn("YR_BUDGET","string");
	this.dsCopy.addColumn("ID_INSERT","string");
	
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	
	this.dsSelect.setColumn(0, "YR_BUDGET", this.dsSearch.getColumn(0, "YR_BUDGET"));
	this.dsSelect.setColumn(0, "YN_USE", this.dsSearch.getColumn(0, "YN_USE"));
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	var nrow = this.gfnGridAdd(this.dxGrid); // top (default), bottom, current
	
	this.dsList.set_enableevent(false);
	this.dsList.setColumn(nrow, "YR_BUDGET", this.dsSearch.getColumn(0,"YR_BUDGET"));
	this.dsList.set_enableevent(true);
}

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}

/*
 *	저장 버튼
 */
this.fnSave = function() {
	// 그리드 필수항목 체크
	if (!this.gfnGridValidate(this.dxGrid)) return;	

	this.dxGrid.updateToDataset();
		
	this.dsInsert.clearData();
	this.dsUpdate.clearData();
	this.dsDelete.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "I":
				var nrow = this.dsInsert.addRow();
 				this.dsInsert.setColumn(nrow, "YR_BUDGET", this.dsList.getColumn(i, "YR_BUDGET"));
				this.dsInsert.setColumn(nrow, "CD_DEPT_ACNT", this.dsList.getColumn(i, "CD_DEPT_ACNT"));
				this.dsInsert.setColumn(nrow, "DS_DEPT_ACNT", this.dsList.getColumn(i, "DS_DEPT_ACNT"));
				this.dsInsert.setColumn(nrow, "LV_DEPT_ACNT", this.dsList.getColumn(i, "LV_DEPT_ACNT"));
				this.dsInsert.setColumn(nrow, "GR_DEPT_ACNT", this.dsList.getColumn(i, "GR_DEPT_ACNT"));
				this.dsInsert.setColumn(nrow, "CD_DEPT_UPPER", this.dsList.getColumn(i, "CD_DEPT_UPPER"));
				this.dsInsert.setColumn(nrow, "YN_USE", this.dsList.getColumn(i, "YN_USE"));
 				this.dsInsert.setColumn(nrow, "ID_INSERT", this.AuthClient.ID_USER);
				break;
				
			case "U":
				var nrow = this.dsUpdate.addRow();
 				this.dsUpdate.setColumn(nrow, "YR_BUDGET", this.dsList.getColumn(i, "YR_BUDGET"));
				this.dsUpdate.setColumn(nrow, "CD_DEPT_ACNT", this.dsList.getColumn(i, "CD_DEPT_ACNT"));
				this.dsUpdate.setColumn(nrow, "LV_DEPT_ACNT", this.dsList.getColumn(i, "LV_DEPT_ACNT"));
				this.dsUpdate.setColumn(nrow, "GR_DEPT_ACNT", this.dsList.getColumn(i, "GR_DEPT_ACNT"));
				this.dsUpdate.setColumn(nrow, "CD_DEPT_UPPER", this.dsList.getColumn(i, "CD_DEPT_UPPER"));
				this.dsUpdate.setColumn(nrow, "YN_USE", this.dsList.getColumn(i, "YN_USE"));
 				this.dsUpdate.setColumn(nrow, "ID_UPDATE", this.AuthClient.ID_USER);
				break;                  
				
			case "D":
				var nrow = this.dsDelete.addRow();
				this.dsDelete.setColumn(nrow, "YR_BUDGET", this.dsList.getColumn(i, "YR_BUDGET"));
				this.dsDelete.setColumn(nrow, "CD_DEPT_ACNT", this.dsList.getColumn(i, "CD_DEPT_ACNT"));
				break;
		}
	}
	
	if (this.dsInsert.rowcount == 0 && this.dsUpdate.rowcount == 0 && this.dsDelete.rowcount == 0) return;
		
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "insert=dsInsert update=dsUpdate delete=dsDelete";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {
	var validate = true;
	
	if (this.gfnIsNull(this.dsSearch.getColumn(0,"YR_BUDGET"))) {
		validate = false;
		// Alert후 실행할 처리
		this.fnVaidateCallback = function() {
			this.cctclYR_BEDGET.form.TextBox.setFocus();
		}
		this.gfnAlert("예산년도를 입력하세요.", "fnVaidateCallback");
	}
	
	return validate;
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);	
	}
	else if(svcID == "save" || svcID == "copy") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
 
this.fnGrid_RowCellChanged = function(obj:nexacro.Grid,e:nexacro.GridSelectEventInfo)
{
    if ((obj.oldrow > -1 && obj.oldrow == e.row) || (obj.oldrow == -1 && e.oldrow != e.row)) {		
		obj.oldrow = -1;
	}
};

 
/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
	}
};


// 전년도 데이터 복사 처리
this.fnPreYearCopy = function(){
	this.gfnConfirm("전년도 예산부서를 복사하시겠습니까?", function(strId, val){
	
		if(val){
		
			this.dsCopy.clearData();
			var nrow = this.dsCopy.addRow();
		
			//처리할 데이터 담기
			this.dsCopy.setColumn(nrow, "YR_BUDGET", this.dsSearch.getColumn(0, "YR_BUDGET"));
			this.dsCopy.setColumn(nrow, "ID_INSERT", this.AuthClient.ID_USER);
			
			var strSvcId    = "copy";
			var strSvcType  = "save";
			var inProc		= "_dsProc";
			var inData      = "copy=dsCopy";
			var outData     = "";
			var strArg      = "";
			var callBackFnc = "fnCallback";
			
			this.gfnTransaction( strSvcId, 
								 strSvcType, 
								 inProc, 
								 inData, 
								 outData, 
								 strArg, 
								 callBackFnc);
		}
	});
	
}
]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DIQPR_ACNTUNIT_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">insert</Col>
            <Col id="SP">DIQPR_ACNTUNIT_INSERT</Col>
          </Row>
          <Row>
            <Col id="TARGET">update</Col>
            <Col id="SP">DIQPR_ACNTUNIT_UPDATE</Col>
          </Row>
          <Row>
            <Col id="TARGET">delete</Col>
            <Col id="SP">DIQPR_ACNTUNIT_DELETE</Col>
          </Row>
          <Row>
            <Col id="TARGET">copy</Col>
            <Col id="SP">DIQPR_ACNTUNIT_CREATE</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="YR_BUDGET" type="STRING" size="256"/>
          <Column id="YN_USE" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="YN_USE"/>
            <Col id="YR_BUDGET"/>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsYN_USE" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_CODE" type="STRING" size="256"/>
          <Column id="DS_CODE" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CD_CODE">%</Col>
            <Col id="DS_CODE">전체</Col>
          </Row>
          <Row>
            <Col id="CD_CODE">Y</Col>
            <Col id="DS_CODE">사용</Col>
          </Row>
          <Row>
            <Col id="CD_CODE">N</Col>
            <Col id="DS_CODE">미사용</Col>
          </Row>
        </Rows>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.cctclYR_BUDGET.form.TextBox" propid="value" datasetid="dsSearch" columnid="YR_BUDGET"/>
      <BindItem id="item1" compid="divSearch.form.ccboYN_USE" propid="value" datasetid="dsSearch" columnid="YN_USE"/>
    </Bind>
  </Form>
</FDL>
