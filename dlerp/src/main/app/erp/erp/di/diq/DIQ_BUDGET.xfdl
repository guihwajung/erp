<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="form" width="1280" height="720" titletext="예산신청" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0" top="10" height="46" right="0" cssclass="div_SEARCH_Bg" formscrolltype="none">
          <Layouts>
            <Layout>
              <Static id="staYR_BUDGET" text="회계년도" left="0" top="10.0" width="92" height="24.0" taborder="0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ctclYR_BUDGET" taborder="1" left="staYR_BUDGET:0.0" top="10.0" width="60" height="24.0" url="cmm::cmmCalYY.xfdl"/>
              <Static id="staCD_DEPT" text="귀속부서" left="ctclYR_BUDGET:0" top="10.0" width="92" height="24.0" taborder="4" cssclass="sta_WF_SchLabel"/>
              <Div id="ccfCD_DEPT" CodeFindName="DIX_ACNTUNIT_01" CDTextWidth="80" left="staCD_DEPT:0.0" top="10.0" width="250" height="24.0" url="cmm::cmmCodeFind.xfdl" taborder="5"/>
              <CheckBox id="chkYN_GUBUN" taborder="6" text="예산변경표시" left="ccfCD_DEPT:20" top="10.0" width="100" height="24.0" truevalue="Y" falsevalue="N" visible="false"/>
              <Static id="staCD_SAUPBU" text="사업부" left="chkYN_GUBUN:0.0" top="10.0" width="79" height="24.0" taborder="2" visible="false" cssclass="sta_WF_SchLabel"/>
              <Div id="ccfCD_SAUPBU" CodeFindName="DIX_SAUPBU_CF" CDTextWidth="80" left="staCD_SAUPBU:0.0" top="10.0" width="200" height="24.0" url="cmm::cmmCodeFind.xfdl" taborder="3" visible="false"/>
              <Static id="sta01" text="(단위:천원)" top="10" height="24.0" right="10" width="131.0" textAlign="right" taborder="7" cssclass="sta_WF_SchLabel" visible="false"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0"/>
              <Grid id="objGridExcel" taborder="1" left="62" top="195" width="976" height="209" enable="true" visible="false" tooltiptype="default"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	this.dsSearch.setColumn(0, "YR_BUDGET", this.gfnGetDate().substr(0,4));
	this.divSearch.form.chkYN_GUBUN.set_value("N");
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btnExcelD = this.gfnFormButtonAdd("btnExcelD", "fnbtnExcelD");
	this.btnExcelU = this.gfnFormButtonAdd("btnExcelU", "fnbtnExcelU");
	this.btnMagam = this.gfnFormButtonAdd("btnMagam", "fnbtnMagam");
	this.btnMagamCancel = this.gfnFormButtonAdd("btnMagamCancel", "fnbtnMagamCancel");
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {	
	this.ctclYR_BUDGET = this.divSearch.form.ctclYR_BUDGET;
	this.ccfCD_SAUPBU = this.divSearch.form.ccfCD_SAUPBU;
	this.ccfCD_DEPT = this.divSearch.form.ccfCD_DEPT;
	
	this.dxGrid = this.divData.form.objGrid;
	this.dxGrid_Excel = this.divData.form.objGridExcel;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	// 그리드 초기화
	this.gfnGridInit(this.dxGrid, this.dsList, "DI", "DIQ_BUDGET");
	
	//코드파인드
	this.ccfCD_SAUPBU.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.ccfCD_DEPT.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.ccfCD_SAUPBU.AfterCDTextChanged = "fnAfterCDTextChanged";
	this.ccfCD_DEPT.AfterCDTextChanged = "codefind_AfterCDTextChanged";
	
	// 셀 수정가능 여부
	this.dxGrid.EnterCell = "fnGrid_EnterCell";
	
	// 셀 변경 후 이벤트
	this.dxGrid.AfterEdit = "fnGrid_AfterEdit";
	
	// 그리드 코드파인드 설정
	this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforeUserDataSetParam";
	
	// 그리드 코드파인드 값 변경
	this.dxGrid.AfterCDTextChanged = "fnGrid_AfterCDTextChanged";
	
	// BUTTON, BUTTON-IN 처리
	this.dxGrid.ExpandUp = "fnGrid_ExpandUp";
	
	this.gfnGridInit(this.dxGrid_Excel, this.dsListExcel, "DI", "DIQ_BUDGET_EXCEL");
	
};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	// SELECT
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("YR_BUDGET", "string");
	this.dsSelect.addColumn("CD_SAUPBU", "string");
	this.dsSelect.addColumn("CD_DEPT", "string");
	this.dsSelect.addColumn("YN_GUBUN", "string");		// 예산변경사항
	
	// INSERT
	this.dsInsert = new Dataset();
	this.dsInsert.addColumn("YR_BUDGET", "string");
	this.dsInsert.addColumn("CD_DEPT", "string");
	this.dsInsert.addColumn("CD_ACCOUNT", "string");
	this.dsInsert.addColumn("CD_ACTIVE", "string");
	this.dsInsert.addColumn("CD_MANAGE", "string");
	this.dsInsert.addColumn("YN_CONFIRM","string");
	this.dsInsert.addColumn("AM_BUDGET","bigdecimal");
	this.dsInsert.addColumn("AM_JAN","bigdecimal");
	this.dsInsert.addColumn("AM_FEB","bigdecimal");
	this.dsInsert.addColumn("AM_MAR","bigdecimal");
	this.dsInsert.addColumn("AM_APR","bigdecimal");
	this.dsInsert.addColumn("AM_MAY","bigdecimal");
	this.dsInsert.addColumn("AM_JUN","bigdecimal");
	this.dsInsert.addColumn("AM_JUL","bigdecimal");
	this.dsInsert.addColumn("AM_AUG","bigdecimal");
	this.dsInsert.addColumn("AM_SEP","bigdecimal");
	this.dsInsert.addColumn("AM_OCT","bigdecimal");
	this.dsInsert.addColumn("AM_NOV","bigdecimal");
	this.dsInsert.addColumn("AM_DEC","bigdecimal");
	this.dsInsert.addColumn("DS_REM","string");
	this.dsInsert.addColumn("ID_INSERT","string");
	this.dsInsert.addColumn("DS_ACTIVE", "string");
	


	// UPDATE
	this.dsUpdate = new Dataset();
	this.dsUpdate.addColumn("YR_BUDGET", "string");
	this.dsUpdate.addColumn("CD_DEPT", "string");
	this.dsUpdate.addColumn("CD_ACCOUNT", "string");
	this.dsUpdate.addColumn("CD_ACTIVE", "string");
	this.dsUpdate.addColumn("CD_MANAGE", "string");
	
	this.dsUpdate.addColumn("YN_CONFIRM","string");
	this.dsUpdate.addColumn("AM_BUDGET","bigdecimal");
	this.dsUpdate.addColumn("AM_JAN","bigdecimal");
	this.dsUpdate.addColumn("AM_FEB","bigdecimal");
	this.dsUpdate.addColumn("AM_MAR","bigdecimal");
	
	this.dsUpdate.addColumn("AM_APR","bigdecimal");
	this.dsUpdate.addColumn("AM_MAY","bigdecimal");
	this.dsUpdate.addColumn("AM_JUN","bigdecimal");
	this.dsUpdate.addColumn("AM_JUL","bigdecimal");
	this.dsUpdate.addColumn("AM_AUG","bigdecimal");
	
	this.dsUpdate.addColumn("AM_SEP","bigdecimal");
	this.dsUpdate.addColumn("AM_OCT","bigdecimal");
	this.dsUpdate.addColumn("AM_NOV","bigdecimal");
	this.dsUpdate.addColumn("AM_DEC","bigdecimal");
	this.dsUpdate.addColumn("DS_REM","string");
	
	this.dsUpdate.addColumn("ID_UPDATE","string");
	
	// DELETE
	this.dsDelete = new Dataset();
	this.dsDelete.addColumn("YR_BUDGET", "string");
	this.dsDelete.addColumn("CD_DEPT", "string");
	this.dsDelete.addColumn("CD_ACCOUNT", "string");
	this.dsDelete.addColumn("CD_ACTIVE", "string");
	this.dsDelete.addColumn("CD_MANAGE", "string");
	this.dsDelete.addColumn("YN_CONFIRM", "string");
	
	// EXEC
	this.dsExec = new Dataset();
	this.dsExec.addColumn("YR_BUDGET", "string");	// 회계년도 기준 마감/마감 취소
	this.dsExec.addColumn("YN_MAGAM", "string");	// 마감(Y)/마감 취소(N)

}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	
	this.dsSelect.setColumn(0, "YR_BUDGET", this.dsSearch.getColumn(0, "YR_BUDGET"));
	this.dsSelect.setColumn(0, "CD_SAUPBU", this.dsSearch.getColumn(0, "CD_SAUPBU"));
	this.dsSelect.setColumn(0, "CD_DEPT", this.dsSearch.getColumn(0, "CD_DEPT"));
	this.dsSelect.setColumn(0, "YN_GUBUN", this.gfnNvl(this.dsSearch.getColumn(0, "YN_GUBUN"), "N"));
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); 	// 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	var nrow = this.gfnGridAdd(this.dxGrid); // top (default), bottom, current
}

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}

/*
 *	저장 버튼
 */
this.fnSave = function() {
	// 그리드 필수항목 체크
	if (!this.gfnGridValidate(this.dxGrid)) return;	

	this.dxGrid.updateToDataset();
		
	this.dsInsert.clearData();
	this.dsUpdate.clearData();
	this.dsDelete.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "I":
				var nrow = this.dsInsert.addRow();
 				this.dsInsert.setColumn(nrow, "YR_BUDGET", this.dsSearch.getColumn(0, "YR_BUDGET"));
 				this.dsInsert.setColumn(nrow, "CD_DEPT", this.dsList.getColumn(i, "CD_DEPT"));
				this.dsInsert.setColumn(nrow, "CD_ACCOUNT", this.dsList.getColumn(i, "CD_ACCOUNT"));
				this.dsInsert.setColumn(nrow, "CD_ACTIVE", this.dsList.getColumn(i, "CD_ACTIVE"));
				this.dsInsert.setColumn(nrow, "CD_MANAGE", this.dsList.getColumn(i, "CD_MANAGE"));
				
				this.dsInsert.setColumn(nrow, "YN_CONFIRM", this.dsList.getColumn(i, "YN_CONFIRM"));
				this.dsInsert.setColumn(nrow, "AM_BUDGET", this.dsList.getColumn(i, "AM_BUDGET"));
				this.dsInsert.setColumn(nrow, "AM_JAN", this.dsList.getColumn(i, "AM_JAN"));
				this.dsInsert.setColumn(nrow, "AM_FEB", this.dsList.getColumn(i, "AM_FEB"));
				this.dsInsert.setColumn(nrow, "AM_MAR", this.dsList.getColumn(i, "AM_MAR"));
				
				this.dsInsert.setColumn(nrow, "AM_APR", this.dsList.getColumn(i, "AM_APR"));
				this.dsInsert.setColumn(nrow, "AM_MAY", this.dsList.getColumn(i, "AM_MAY"));
				this.dsInsert.setColumn(nrow, "AM_JUN", this.dsList.getColumn(i, "AM_JUN"));
				this.dsInsert.setColumn(nrow, "AM_JUL", this.dsList.getColumn(i, "AM_JUL"));
				this.dsInsert.setColumn(nrow, "AM_AUG", this.dsList.getColumn(i, "AM_AUG"));
				
				this.dsInsert.setColumn(nrow, "AM_SEP", this.dsList.getColumn(i, "AM_SEP"));
				this.dsInsert.setColumn(nrow, "AM_OCT", this.dsList.getColumn(i, "AM_OCT"));
				this.dsInsert.setColumn(nrow, "AM_NOV", this.dsList.getColumn(i, "AM_NOV"));
				this.dsInsert.setColumn(nrow, "AM_DEC", this.dsList.getColumn(i, "AM_DEC"));
				this.dsInsert.setColumn(nrow, "DS_REM", this.dsList.getColumn(i, "DS_REM"));
 				this.dsInsert.setColumn(nrow, "ID_INSERT", this.AuthClient.ID_USER);
				
				this.dsInsert.setColumn(nrow, "DS_ACTIVE", this.dsList.getColumn(i, "DS_ACTIVE"));

				break;
				
			case "U":
				var nrow = this.dsUpdate.addRow();
				this.dsUpdate.setColumn(nrow, "YR_BUDGET", this.dsSearch.getColumn(0, "YR_BUDGET"));
 				this.dsUpdate.setColumn(nrow, "CD_DEPT", this.dsList.getColumn(i, "CD_DEPT"));
				this.dsUpdate.setColumn(nrow, "CD_ACCOUNT", this.dsList.getColumn(i, "CD_ACCOUNT"));
				this.dsUpdate.setColumn(nrow, "CD_ACTIVE", this.dsList.getColumn(i, "CD_ACTIVE"));
				this.dsUpdate.setColumn(nrow, "CD_MANAGE", this.dsList.getColumn(i, "CD_MANAGE"));
				
				this.dsUpdate.setColumn(nrow, "YN_CONFIRM", this.dsList.getColumn(i, "YN_CONFIRM"));
				this.dsUpdate.setColumn(nrow, "AM_BUDGET", this.dsList.getColumn(i, "AM_BUDGET"));
				this.dsUpdate.setColumn(nrow, "AM_JAN", this.dsList.getColumn(i, "AM_JAN"));
				this.dsUpdate.setColumn(nrow, "AM_FEB", this.dsList.getColumn(i, "AM_FEB"));
				this.dsUpdate.setColumn(nrow, "AM_MAR", this.dsList.getColumn(i, "AM_MAR"));
				
				this.dsUpdate.setColumn(nrow, "AM_APR", this.dsList.getColumn(i, "AM_APR"));
				this.dsUpdate.setColumn(nrow, "AM_MAY", this.dsList.getColumn(i, "AM_MAY"));
				this.dsUpdate.setColumn(nrow, "AM_JUN", this.dsList.getColumn(i, "AM_JUN"));
				this.dsUpdate.setColumn(nrow, "AM_JUL", this.dsList.getColumn(i, "AM_JUL"));
				this.dsUpdate.setColumn(nrow, "AM_AUG", this.dsList.getColumn(i, "AM_AUG"));
				
				this.dsUpdate.setColumn(nrow, "AM_SEP", this.dsList.getColumn(i, "AM_SEP"));
				this.dsUpdate.setColumn(nrow, "AM_OCT", this.dsList.getColumn(i, "AM_OCT"));
				this.dsUpdate.setColumn(nrow, "AM_NOV", this.dsList.getColumn(i, "AM_NOV"));
				this.dsUpdate.setColumn(nrow, "AM_DEC", this.dsList.getColumn(i, "AM_DEC"));
				this.dsUpdate.setColumn(nrow, "DS_REM", this.dsList.getColumn(i, "DS_REM"));
 				this.dsUpdate.setColumn(nrow, "ID_UPDATE", this.AuthClient.ID_USER);

				break;
				
			case "D":
				var nrow = this.dsDelete.addRow();
				this.dsDelete.setColumn(nrow, "YR_BUDGET", this.dsSearch.getColumn(0, "YR_BUDGET"));
 				this.dsDelete.setColumn(nrow, "CD_DEPT", this.dsList.getColumn(i, "CD_DEPT"));
				this.dsDelete.setColumn(nrow, "CD_ACCOUNT", this.dsList.getColumn(i, "CD_ACCOUNT"));
				this.dsDelete.setColumn(nrow, "CD_ACTIVE", this.dsList.getColumn(i, "CD_ACTIVE"));
				this.dsDelete.setColumn(nrow, "CD_MANAGE", this.dsList.getColumn(i, "CD_MANAGE"));
				this.dsDelete.setColumn(nrow, "YN_CONFIRM", this.dsList.getColumn(i, "YN_CONFIRM"));
				break;
		}
	}
	
	if (this.dsInsert.rowcount == 0 && this.dsUpdate.rowcount == 0 && this.dsDelete.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "insert=dsInsert update=dsUpdate delete=dsDelete";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); 	// 통신방법 정의 [생략가능]
}


/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}


this.fnSelect_Excel = function() {
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	
	this.dsSelect.setColumn(0, "YR_BUDGET", this.dsSearch.getColumn(0, "YR_BUDGET"));
	
	var strSvcId    = "selectEX";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select_excel=dsSelect";
	var outData     = "dsListExcel=select_excel0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); 	// 통신방법 정의 [생략가능]
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {
	var validate = true;
	
	if (this.gfnIsNull(this.dsSearch.getColumn(0,"YR_BUDGET"))) {
		validate = false;
		// Alert후 실행할 처리
		this.fnVaidateCallback = function() {
			this.ctclYR_BUDGET.setFocus();
		}
		this.gfnAlert("회계년도를 입력하세요.", "fnVaidateCallback");
	}
	
	return validate;
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
//this.fnCallback = function(svcID, errorCode, errorMsg)
this.fnCallback = function(svcID, errorCode, errorMsg, strArg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);	
		var yn_magam = this.dsList.getColumn(1, "YN_MAGAM");
		
		if( yn_magam == "Y") {
			this.btnMagam.set_enable(false); 
			this.btnMagamCancel.set_enable(true);
		}else {
			this.btnMagam.set_enable(true); 
			this.btnMagamCancel.set_enable(false);
		}
	}
	else if(svcID == "selectEX") {
		this.gfnExcelExport(this.dxGrid_Excel);
	}
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "exec") {
		if (errorCode == 0) {
			//alert("callback");
			this.fnExec1_callback = function(){
				this.FormBtns.Select.click();
			}
				
			var json = this.gfnArgsToJson(strArg);			
			var strArg = json.gubun;
			
			var msg = "";
			
			/*if(strArg == "Confirm") msg = "승인이 정상 처리되었습니다.";
			else if(strArg == "Cancel") msg = "취소가 정상 처리되었습니다.";
			
			this.gfnAlert(msg, "fnExec1_callback"); */	
			
			msg = (strArg == "Y") ? "마감 ":"마감취소 ";			
			msg += "정상 처리되었습니다.";
			
			this.gfnAlert(msg);
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
}

/*
 *	엑셀업로드 Callback
 */ 
this.fnExcelImportCallback = function(sImportId, dsOut, dsSheet) {

	//this.dsList.clearData();
	this.gfnGridAfterSelect(this.dxGrid);	
		if (dsOut.rowcount == 0)  {
		this.gfnAlert("엑셀파일에 내용이 없습니다."); 
		return false;
	}
	
	// 엑셀 양식과 그리드 컬럼이 그대로 일치 하는 경우
	// 아닌경우는 이부분 주석처리
	/*
 	for (var i=0; i< this.dsList.getColCount(); i++)
 	{
 		sColumnId = "Column"+i;
 		var sColumnNm = this.gfnGridGetBindColumnNameByIndex(this.dxGrid, i);
 		if (sColumnNm != "" && sColumnId != sColumnNm)
 		{
 			dsOut.updateColID(sColumnId, sColumnNm);
 		}
 	}
	*/
	
	trace(dsOut.saveXML());
	trace(this.dsListExcel.saveXML());
	
	// 양식이 일치하고 엑셀내역을 기존데이터에 Insert하지 않고
	// 엑셀내역 그대로 그리드 반영할 시 copyData
	// this.dsList.copyData(dsOut);
	this.dsList.set_enableevent(false);
	for (var i=0; i< dsOut.rowcount; i++) {
		var nrow = this.dsList.addRow();
		this.dsList.setColumn(nrow, this.ucFlag, "I");
		
		// 양식이 일치하는 경우 copyRow
		//this.dsList.copyRow(nrow, dsOut, i);

		// 양식과 일치하지 않는 경우 아래와 같이 컬럼별로 처리.
		this.dsList.setColumn(nrow, "CD_DEPT", dsOut.getColumnNF(i, "Column0"));
		this.dsList.setColumn(nrow, "DS_DEPT", dsOut.getColumnNF(i, "Column1"));
		this.dsList.setColumn(nrow, "CD_ACCOUNT", dsOut.getColumnNF(i, "Column2"));
		this.dsList.setColumn(nrow, "DS_ACCOUNT", dsOut.getColumnNF(i, "Column3"));
		this.dsList.setColumn(nrow, "CD_ACTIVE", dsOut.getColumnNF(i, "Column4"));
		this.dsList.setColumn(nrow, "DS_ACTIVE", dsOut.getColumnNF(i, "Column5"));
		this.dsList.setColumn(nrow, "YN_CONFIRM", dsOut.getColumnNF(i, "Column6"));
		this.dsList.setColumn(nrow, "AM_BUDGET", dsOut.getColumnNF(i, "Column7"));
		this.dsList.setColumn(nrow, "AM_JAN", dsOut.getColumnNF(i, "Column8"));
		this.dsList.setColumn(nrow, "AM_FEB", dsOut.getColumnNF(i, "Column9"));
		this.dsList.setColumn(nrow, "AM_MAR", dsOut.getColumnNF(i, "Column10"));
		this.dsList.setColumn(nrow, "AM_APR", dsOut.getColumnNF(i, "Column11"));
		this.dsList.setColumn(nrow, "AM_MAY", dsOut.getColumnNF(i, "Column12"));
		this.dsList.setColumn(nrow, "AM_JUN", dsOut.getColumnNF(i, "Column13"));
		this.dsList.setColumn(nrow, "AM_JUL", dsOut.getColumnNF(i, "Column14"));
		this.dsList.setColumn(nrow, "AM_AUG", dsOut.getColumnNF(i, "Column15"));
		this.dsList.setColumn(nrow, "AM_SEP", dsOut.getColumnNF(i, "Column16"));
		this.dsList.setColumn(nrow, "AM_OCT", dsOut.getColumnNF(i, "Column17"));
		this.dsList.setColumn(nrow, "AM_NOV", dsOut.getColumnNF(i, "Column18"));
		this.dsList.setColumn(nrow, "AM_DEC", dsOut.getColumnNF(i, "Column19"));	
		this.dsList.setColumn(nrow, "DS_REM", dsOut.getColumnNF(i, "Column20"));	
	}

	this.dsList.set_enableevent(true);
	this.gfnSetFormStatus(this, "I");
	
	this.fnSetButton();
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	if (id == "ccfCD_DEPT") {	
		dsUserParam.setColumn(nrow, "CD_SAUPBU", "");
		dsUserParam.setColumn(nrow, "YR_BUDGET", this.dsSearch.getColumn(0, "YR_BUDGET"));
	}
	return true;
}

this.codefind_AfterCDTextChanged = function(id) {
	//this.fnSearchInit();
}

this.fnAfterCDTextChanged = function(id, codeFindData) {
	
	if(id == "ccfCD_SAUPBU") { 
		this.gfnGridClear(this.dxGrid);	
		this.ccfCD_DEPT.form.fnCodeFindClear();
	}
};

this.fnGrid_BeforeUserDataSetParam = function(id, dsUserParam, nrow) {

	// 그리드에서 코드파인드 id는 그리드셋팅의 코드파인드 식별ID
	if (id == "DIX_ACNTUNIT_01") {
		//dsUserParam.setColumn(nrow, "CD_SAUPBU", this.dsList.getColumn(this.dsList.rowposition, "CD_SAUPBU"));
		dsUserParam.setColumn(nrow, "CD_SAUPBU", "");
		dsUserParam.setColumn(nrow, "YR_BUDGET", this.dsSearch.getColumn(0, "YR_BUDGET"));
	}
	
	else if (id == "DIX_CFBIMOK_BUDGET") {
		if (this.gfnIsNull(this.dsSearch.getColumn(0, "YR_BUDGET"))) {
			this.gfnAlert("회계년도를 먼저 입력하세요.");
			return false;
		}
		
		dsUserParam.setColumn(nrow, "YR_ACCOUNT", this.dsSearch.getColumn(0, "YR_BUDGET"));
	}
	
	else if (id == "DIX_CFSEMOK_BUDGET") {
		if (this.gfnIsNull(this.dsSearch.getColumn(0, "YR_BUDGET"))) {
			this.gfnAlert("회계년도를 먼저 입력하세요.");
			return false;
		}
		if (this.gfnIsNull(this.dsList.getColumn(this.dsList.rowposition, "CD_ACCOUNT"))) {
			this.gfnAlert("비목코드를 먼저 입력하세요.");
			return false;
		}		
		dsUserParam.setColumn(nrow, "YR_ACCOUNT", this.dsSearch.getColumn(0, "YR_BUDGET"));
		dsUserParam.setColumn(nrow, "CD_BIMOK", this.dsList.getColumn(this.dsList.rowposition, "CD_ACCOUNT"));
	}

	if(id == "DEX_CFACNT") {	// 계정코드 코드파인드
		var cdCost = this.dsList.getColumn(this.dsList.rowposition, "CD_COST");
		var cdDept = this.dsList.getColumn(this.dsList.rowposition, "CD_DEPT");
		dsUserParam.setColumn(nrow, "YN_SLIP", "Y");
		//dsUserParam.setColumn(nrow, "CD_COST", "");
		dsUserParam.setColumn(nrow, "CD_COST", cdCost);
		dsUserParam.setColumn(nrow, "CD_DEPT_ACNT", cdDept);
	}
	return true;
}

this.fnGrid_AfterCDTextChanged = function(id, codeFindData) {
	var arrData = codeFindData;
	var rowPos = this.dsList.rowposition;
	switch(id) {
		case "DIX_ACNTUNIT_01":	
			if (arrData.length > 0) {
			}
				var DS_SAUPBU = arrData[0]["DS_SAUPBU"];
				this.dsList.setColumn(rowPos, "DS_SAUPBU",DS_SAUPBU);
				this.dsList.set_enableevent(true);
			}

}
/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
		//this.fnBtnEnableEventAll(false);
	}
};


this.fnbtnExcelD = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	this.fnSelect_Excel();
}

this.fnbtnExcelU = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	 
	// this.gfnExcelImport("적용할Dataset명","sheet명","데이터시작좌표","콜백함수명","구분ID",현재폼); 
	this.gfnExcelImport("dsList","sheet1","A2","fnExcelImportCallback","import",this);

}

this.fnbtnMagam = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	if (!this.gfnGridIsRow(this.dxGrid)) { return false; }
	
	this.gfnConfirm("마감 하시겠습니까?", "fnConfirm_Confirm", "Y");
}

this.fnbtnMagamCancel = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	if (!this.gfnGridIsRow(this.dxGrid)) { return false; }
	
	this.gfnConfirm("마감취소 하시겠습니까?", "fnConfirm_Confirm", "N");
}

this.fnConfirm_Confirm = function(strId, val) {
	if(val == true) {		
		this.fnExec(strId);
	}
}

/*
 *	마감 or 마감취소 처리
 */
this.fnExec = function(ynMagam) {
	// alert(tyWrk);
	this.dsExec.clearData();
	
	this.dsExec.addRow();
	
	var nRow = this.dsList.rowposition;
	
	this.dsExec.setColumn(0, "YR_BUDGET", this.dsSearch.getColumn(0, "YR_BUDGET"));
	this.dsExec.setColumn(0, "YN_MAGAM", ynMagam);
	
	if (this.dsExec.rowcount == 0) return;
	
	var strSvcId    = "exec";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "exec_magam=dsExec";
	var outData     = "";
	var strArg      = "gubun=" + ynMagam;
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc);   // 통신방법 정의 [생략가능]
}

this.dsList_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo) {
	if(e.oldvalue != e.newvalue && obj.getColumn(e.row, "nx_flag") != "#") {
		var nrow = this.dsList.rowposition;
		
		if(e.columnid == "AM_JAN") {
			var am_jan = nexacro.toNumber(e.newvalue, 0);
			var am_feb = this.gfnNvl(this.dsList.getColumn(nrow, "AM_FEB"), 0);
			var am_mar = this.gfnNvl(this.dsList.getColumn(nrow, "AM_MAR"), 0);
			var am_apr = this.gfnNvl(this.dsList.getColumn(nrow, "AM_APR"), 0);
			var am_may = this.gfnNvl(this.dsList.getColumn(nrow, "AM_MAY"), 0);
			var am_jun = this.gfnNvl(this.dsList.getColumn(nrow, "AM_JUN"), 0);
			var am_jul = this.gfnNvl(this.dsList.getColumn(nrow, "AM_JUL"), 0);
			var am_aug = this.gfnNvl(this.dsList.getColumn(nrow, "AM_AUG"), 0);
			var am_sep = this.gfnNvl(this.dsList.getColumn(nrow, "AM_SEP"), 0);
			var am_oct = this.gfnNvl(this.dsList.getColumn(nrow, "AM_OCT"), 0);
			var am_nov = this.gfnNvl(this.dsList.getColumn(nrow, "AM_NOV"), 0);
			var am_dec = this.gfnNvl(this.dsList.getColumn(nrow, "AM_DEC"), 0);
			
			this.dsList.setColumn(e.row, "AM_BUDGET", am_jan + am_feb + am_mar + am_apr + am_may + am_jun + am_jul + am_aug + am_sep + am_oct + am_nov + am_dec);
			
		}else if(e.columnid == "AM_FEB") {
			var am_jan = this.gfnNvl(this.dsList.getColumn(nrow, "AM_JAN"), 0);
			var am_feb = nexacro.toNumber(e.newvalue, 0);
			var am_mar = this.gfnNvl(this.dsList.getColumn(nrow, "AM_MAR"), 0);
			var am_apr = this.gfnNvl(this.dsList.getColumn(nrow, "AM_APR"), 0);
			var am_may = this.gfnNvl(this.dsList.getColumn(nrow, "AM_MAY"), 0);
			var am_jun = this.gfnNvl(this.dsList.getColumn(nrow, "AM_JUN"), 0);
			var am_jul = this.gfnNvl(this.dsList.getColumn(nrow, "AM_JUL"), 0);
			var am_aug = this.gfnNvl(this.dsList.getColumn(nrow, "AM_AUG"), 0);
			var am_sep = this.gfnNvl(this.dsList.getColumn(nrow, "AM_SEP"), 0);
			var am_oct = this.gfnNvl(this.dsList.getColumn(nrow, "AM_OCT"), 0);
			var am_nov = this.gfnNvl(this.dsList.getColumn(nrow, "AM_NOV"), 0);
			var am_dec = this.gfnNvl(this.dsList.getColumn(nrow, "AM_DEC"), 0);
			
			this.dsList.setColumn(e.row, "AM_BUDGET", am_jan + am_feb + am_mar + am_apr + am_may + am_jun + am_jul + am_aug + am_sep + am_oct + am_nov + am_dec);
			
		}else if(e.columnid == "AM_MAR") {
			var am_jan = this.gfnNvl(this.dsList.getColumn(nrow, "AM_JAN"), 0);
			var am_feb = this.gfnNvl(this.dsList.getColumn(nrow, "AM_FEB"), 0);
			var am_mar = nexacro.toNumber(e.newvalue, 0);
			var am_apr = this.gfnNvl(this.dsList.getColumn(nrow, "AM_APR"), 0);
			var am_may = this.gfnNvl(this.dsList.getColumn(nrow, "AM_MAY"), 0);
			var am_jun = this.gfnNvl(this.dsList.getColumn(nrow, "AM_JUN"), 0);
			var am_jul = this.gfnNvl(this.dsList.getColumn(nrow, "AM_JUL"), 0);
			var am_aug = this.gfnNvl(this.dsList.getColumn(nrow, "AM_AUG"), 0);
			var am_sep = this.gfnNvl(this.dsList.getColumn(nrow, "AM_SEP"), 0);
			var am_oct = this.gfnNvl(this.dsList.getColumn(nrow, "AM_OCT"), 0);
			var am_nov = this.gfnNvl(this.dsList.getColumn(nrow, "AM_NOV"), 0);
			var am_dec = this.gfnNvl(this.dsList.getColumn(nrow, "AM_DEC"), 0);
			
			this.dsList.setColumn(e.row, "AM_BUDGET", am_jan + am_feb + am_mar + am_apr + am_may + am_jun + am_jul + am_aug + am_sep + am_oct + am_nov + am_dec);
			
		}else if(e.columnid == "AM_APR") {
			var am_jan = this.gfnNvl(this.dsList.getColumn(nrow, "AM_JAN"), 0);
			var am_feb = this.gfnNvl(this.dsList.getColumn(nrow, "AM_FEB"), 0);
			var am_mar = this.gfnNvl(this.dsList.getColumn(nrow, "AM_MAR"), 0);
			var am_apr = nexacro.toNumber(e.newvalue, 0);
			var am_may = this.gfnNvl(this.dsList.getColumn(nrow, "AM_MAY"), 0);
			var am_jun = this.gfnNvl(this.dsList.getColumn(nrow, "AM_JUN"), 0);
			var am_jul = this.gfnNvl(this.dsList.getColumn(nrow, "AM_JUL"), 0);
			var am_aug = this.gfnNvl(this.dsList.getColumn(nrow, "AM_AUG"), 0);
			var am_sep = this.gfnNvl(this.dsList.getColumn(nrow, "AM_SEP"), 0);
			var am_oct = this.gfnNvl(this.dsList.getColumn(nrow, "AM_OCT"), 0);
			var am_nov = this.gfnNvl(this.dsList.getColumn(nrow, "AM_NOV"), 0);
			var am_dec = this.gfnNvl(this.dsList.getColumn(nrow, "AM_DEC"), 0);
			
			this.dsList.setColumn(e.row, "AM_BUDGET", am_jan + am_feb + am_mar + am_apr + am_may + am_jun + am_jul + am_aug + am_sep + am_oct + am_nov + am_dec);
			
		}else if(e.columnid == "AM_MAY") {
			var am_jan = this.gfnNvl(this.dsList.getColumn(nrow, "AM_JAN"), 0);
			var am_feb = this.gfnNvl(this.dsList.getColumn(nrow, "AM_FEB"), 0);
			var am_mar = this.gfnNvl(this.dsList.getColumn(nrow, "AM_MAR"), 0);
			var am_apr = this.gfnNvl(this.dsList.getColumn(nrow, "AM_APR"), 0);
			var am_may = nexacro.toNumber(e.newvalue, 0);
			var am_jun = this.gfnNvl(this.dsList.getColumn(nrow, "AM_JUN"), 0);
			var am_jul = this.gfnNvl(this.dsList.getColumn(nrow, "AM_JUL"), 0);
			var am_aug = this.gfnNvl(this.dsList.getColumn(nrow, "AM_AUG"), 0);
			var am_sep = this.gfnNvl(this.dsList.getColumn(nrow, "AM_SEP"), 0);
			var am_oct = this.gfnNvl(this.dsList.getColumn(nrow, "AM_OCT"), 0);
			var am_nov = this.gfnNvl(this.dsList.getColumn(nrow, "AM_NOV"), 0);
			var am_dec = this.gfnNvl(this.dsList.getColumn(nrow, "AM_DEC"), 0);
			
			
			this.dsList.setColumn(e.row, "AM_BUDGET", am_jan + am_feb + am_mar + am_apr + am_may + am_jun + am_jul + am_aug + am_sep + am_oct + am_nov + am_dec);
			
		}else if(e.columnid == "AM_JUN") {
			
			var am_jan = this.gfnNvl(this.dsList.getColumn(nrow, "AM_JAN"), 0);
			var am_feb = this.gfnNvl(this.dsList.getColumn(nrow, "AM_FEB"), 0);
			var am_mar = this.gfnNvl(this.dsList.getColumn(nrow, "AM_MAR"), 0);
			var am_apr = this.gfnNvl(this.dsList.getColumn(nrow, "AM_APR"), 0);
			var am_may = this.gfnNvl(this.dsList.getColumn(nrow, "AM_MAY"), 0);
			var am_jun = nexacro.toNumber(e.newvalue, 0);
			var am_jul = this.gfnNvl(this.dsList.getColumn(nrow, "AM_JUL"), 0);
			var am_aug = this.gfnNvl(this.dsList.getColumn(nrow, "AM_AUG"), 0);
			var am_sep = this.gfnNvl(this.dsList.getColumn(nrow, "AM_SEP"), 0);
			var am_oct = this.gfnNvl(this.dsList.getColumn(nrow, "AM_OCT"), 0);
			var am_nov = this.gfnNvl(this.dsList.getColumn(nrow, "AM_NOV"), 0);
			var am_dec = this.gfnNvl(this.dsList.getColumn(nrow, "AM_DEC"), 0);
			
			this.dsList.setColumn(e.row, "AM_BUDGET", am_jan + am_feb + am_mar + am_apr + am_may + am_jun + am_jul + am_aug + am_sep + am_oct + am_nov + am_dec);
			
		}else if(e.columnid == "AM_JUL") {
			var am_jan = this.gfnNvl(this.dsList.getColumn(nrow, "AM_JAN"), 0);
			var am_feb = this.gfnNvl(this.dsList.getColumn(nrow, "AM_FEB"), 0);
			var am_mar = this.gfnNvl(this.dsList.getColumn(nrow, "AM_MAR"), 0);
			var am_apr = this.gfnNvl(this.dsList.getColumn(nrow, "AM_APR"), 0);
			var am_may = this.gfnNvl(this.dsList.getColumn(nrow, "AM_MAY"), 0);
			var am_jun = this.gfnNvl(this.dsList.getColumn(nrow, "AM_JUN"), 0);
			var am_jul = nexacro.toNumber(e.newvalue, 0);
			var am_aug = this.gfnNvl(this.dsList.getColumn(nrow, "AM_AUG"), 0);
			var am_sep = this.gfnNvl(this.dsList.getColumn(nrow, "AM_SEP"), 0);
			var am_oct = this.gfnNvl(this.dsList.getColumn(nrow, "AM_OCT"), 0);
			var am_nov = this.gfnNvl(this.dsList.getColumn(nrow, "AM_NOV"), 0);
			var am_dec = this.gfnNvl(this.dsList.getColumn(nrow, "AM_DEC"), 0);
			
			this.dsList.setColumn(e.row, "AM_BUDGET", am_jan + am_feb + am_mar + am_apr + am_may + am_jun + am_jul + am_aug + am_sep + am_oct + am_nov + am_dec);
			
		}else if(e.columnid == "AM_AUG") {
			var am_jan = this.gfnNvl(this.dsList.getColumn(nrow, "AM_JAN"), 0);
			var am_feb = this.gfnNvl(this.dsList.getColumn(nrow, "AM_FEB"), 0);
			var am_mar = this.gfnNvl(this.dsList.getColumn(nrow, "AM_MAR"), 0);
			var am_apr = this.gfnNvl(this.dsList.getColumn(nrow, "AM_APR"), 0);
			var am_may = this.gfnNvl(this.dsList.getColumn(nrow, "AM_MAY"), 0);
			var am_jun = this.gfnNvl(this.dsList.getColumn(nrow, "AM_JUN"), 0);
			var am_jul = this.gfnNvl(this.dsList.getColumn(nrow, "AM_JUL"), 0);
			var am_aug = nexacro.toNumber(e.newvalue, 0);
			var am_sep = this.gfnNvl(this.dsList.getColumn(nrow, "AM_SEP"), 0);
			var am_oct = this.gfnNvl(this.dsList.getColumn(nrow, "AM_OCT"), 0);
			var am_nov = this.gfnNvl(this.dsList.getColumn(nrow, "AM_NOV"), 0);
			var am_dec = this.gfnNvl(this.dsList.getColumn(nrow, "AM_DEC"), 0);
			
			this.dsList.setColumn(e.row, "AM_BUDGET", am_jan + am_feb + am_mar + am_apr + am_may + am_jun + am_jul + am_aug + am_sep + am_oct + am_nov + am_dec);
			
		}else if(e.columnid == "AM_SEP") {
			var am_jan = this.gfnNvl(this.dsList.getColumn(nrow, "AM_JAN"), 0);
			var am_feb = this.gfnNvl(this.dsList.getColumn(nrow, "AM_FEB"), 0);
			var am_mar = this.gfnNvl(this.dsList.getColumn(nrow, "AM_MAR"), 0);
			var am_apr = this.gfnNvl(this.dsList.getColumn(nrow, "AM_APR"), 0);
			var am_may = this.gfnNvl(this.dsList.getColumn(nrow, "AM_MAY"), 0);
			var am_jun = this.gfnNvl(this.dsList.getColumn(nrow, "AM_JUN"), 0);
			var am_jul = this.gfnNvl(this.dsList.getColumn(nrow, "AM_JUL"), 0);
			var am_aug = this.gfnNvl(this.dsList.getColumn(nrow, "AM_AUG"), 0);
			var am_sep = nexacro.toNumber(e.newvalue, 0);
			var am_oct = this.gfnNvl(this.dsList.getColumn(nrow, "AM_OCT"), 0);
			var am_nov = this.gfnNvl(this.dsList.getColumn(nrow, "AM_NOV"), 0);
			var am_dec = this.gfnNvl(this.dsList.getColumn(nrow, "AM_DEC"), 0);
			
			this.dsList.setColumn(e.row, "AM_BUDGET", am_jan + am_feb + am_mar + am_apr + am_may + am_jun + am_jul + am_aug + am_sep + am_oct + am_nov + am_dec);
			
		}else if(e.columnid == "AM_OCT") {
			var am_jan = this.gfnNvl(this.dsList.getColumn(nrow, "AM_JAN"), 0);
			var am_feb = this.gfnNvl(this.dsList.getColumn(nrow, "AM_FEB"), 0);
			var am_mar = this.gfnNvl(this.dsList.getColumn(nrow, "AM_MAR"), 0);
			var am_apr = this.gfnNvl(this.dsList.getColumn(nrow, "AM_APR"), 0);
			var am_may = this.gfnNvl(this.dsList.getColumn(nrow, "AM_MAY"), 0);
			var am_jun = this.gfnNvl(this.dsList.getColumn(nrow, "AM_JUN"), 0);
			var am_jul = this.gfnNvl(this.dsList.getColumn(nrow, "AM_JUL"), 0);
			var am_aug = this.gfnNvl(this.dsList.getColumn(nrow, "AM_AUG"), 0);
			var am_sep = this.gfnNvl(this.dsList.getColumn(nrow, "AM_SEP"), 0);
			var am_oct = nexacro.toNumber(e.newvalue, 0);
			var am_nov = this.gfnNvl(this.dsList.getColumn(nrow, "AM_NOV"), 0);
			var am_dec = this.gfnNvl(this.dsList.getColumn(nrow, "AM_DEC"), 0);
			
			this.dsList.setColumn(e.row, "AM_BUDGET", am_jan + am_feb + am_mar + am_apr + am_may + am_jun + am_jul + am_aug + am_sep + am_oct + am_nov + am_dec);
		}else if(e.columnid == "AM_NOV") {
			var am_jan = this.gfnNvl(this.dsList.getColumn(nrow, "AM_JAN"), 0);
			var am_feb = this.gfnNvl(this.dsList.getColumn(nrow, "AM_FEB"), 0);
			var am_mar = this.gfnNvl(this.dsList.getColumn(nrow, "AM_MAR"), 0);
			var am_apr = this.gfnNvl(this.dsList.getColumn(nrow, "AM_APR"), 0);
			var am_may = this.gfnNvl(this.dsList.getColumn(nrow, "AM_MAY"), 0);
			var am_jun = this.gfnNvl(this.dsList.getColumn(nrow, "AM_JUN"), 0);
			var am_jul = this.gfnNvl(this.dsList.getColumn(nrow, "AM_JUL"), 0);
			var am_aug = this.gfnNvl(this.dsList.getColumn(nrow, "AM_AUG"), 0);
			var am_sep = this.gfnNvl(this.dsList.getColumn(nrow, "AM_SEP"), 0);
			var am_oct = this.gfnNvl(this.dsList.getColumn(nrow, "AM_OCT"), 0);
			var am_nov = nexacro.toNumber(e.newvalue, 0);
			var am_dec = this.gfnNvl(this.dsList.getColumn(nrow, "AM_DEC"), 0);
			
			this.dsList.setColumn(e.row, "AM_BUDGET", am_jan + am_feb + am_mar + am_apr + am_may + am_jun + am_jul + am_aug + am_sep + am_oct + am_nov + am_dec);
		}else if(e.columnid == "AM_DEC") {
			var am_jan = this.gfnNvl(this.dsList.getColumn(nrow, "AM_JAN"), 0);
			var am_feb = this.gfnNvl(this.dsList.getColumn(nrow, "AM_FEB"), 0);
			var am_mar = this.gfnNvl(this.dsList.getColumn(nrow, "AM_MAR"), 0);
			var am_apr = this.gfnNvl(this.dsList.getColumn(nrow, "AM_APR"), 0);
			var am_may = this.gfnNvl(this.dsList.getColumn(nrow, "AM_MAY"), 0);
			var am_jun = this.gfnNvl(this.dsList.getColumn(nrow, "AM_JUN"), 0);
			var am_jul = this.gfnNvl(this.dsList.getColumn(nrow, "AM_JUL"), 0);
			var am_aug = this.gfnNvl(this.dsList.getColumn(nrow, "AM_AUG"), 0);
			var am_sep = this.gfnNvl(this.dsList.getColumn(nrow, "AM_SEP"), 0);
			var am_oct = this.gfnNvl(this.dsList.getColumn(nrow, "AM_OCT"), 0);
			var am_nov = this.gfnNvl(this.dsList.getColumn(nrow, "AM_NOV"), 0);
			var am_dec = nexacro.toNumber(e.newvalue, 0);
			
			this.dsList.setColumn(e.row, "AM_BUDGET", am_jan + am_feb + am_mar + am_apr + am_may + am_jun + am_jul + am_aug + am_sep + am_oct + am_nov + am_dec);
		}
		
	}
}
]]></Script>
    <Objects>
      <Dataset id="dsList" onvaluechanged="dsList_onvaluechanged"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DIQPR_BUDGET_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">insert</Col>
            <Col id="SP">DIQPR_BUDGET_INSERT</Col>
          </Row>
          <Row>
            <Col id="TARGET">update</Col>
            <Col id="SP">DIQPR_BUDGET_UPDATE</Col>
          </Row>
          <Row>
            <Col id="TARGET">delete</Col>
            <Col id="SP">DIQPR_BUDGET_DELETE</Col>
          </Row>
          <Row>
            <Col id="TARGET">select_excel</Col>
            <Col id="SP">DIQPR_BUDGET_SELECT_EXCEL</Col>
          </Row>
          <Row>
            <Col id="TARGET">exec_magam</Col>
            <Col id="SP">DIQPR_BUDGET_UPDATE_MAGAM</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="YR_BUDGET" type="STRING" size="256"/>
          <Column id="CD_SAUPBU" type="STRING" size="256"/>
          <Column id="CD_DEPT" type="STRING" size="256"/>
          <Column id="YN_GUBUN" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
      <Dataset id="dsListExcel"/>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ctclYR_BUDGET.form.TextBox" propid="value" datasetid="dsSearch" columnid="YR_BUDGET"/>
      <BindItem id="item1" compid="divSearch.form.ccfCD_SAUPBU.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_SAUPBU"/>
      <BindItem id="item3" compid="divSearch.form.ccfCD_DEPT.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_DEPT"/>
      <BindItem id="item2" compid="divSearch.form.chkYN_GUBUN" propid="value" datasetid="dsSearch" columnid="YN_GUBUN"/>
    </Bind>
  </Form>
</FDL>
