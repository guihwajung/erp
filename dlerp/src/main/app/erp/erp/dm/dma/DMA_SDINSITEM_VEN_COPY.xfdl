<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="340" height="130" maxwidth="370" titletext="New Form" onload="form_onload" maxheight="200">
    <Layouts>
      <Layout>
        <Div id="divData" taborder="0" left="0" top="0" bottom="0" right="0" cssclass="div_DATA_Bg" text="">
          <Layouts>
            <Layout>
              <Static id="staYM_SDINS_FROM" taborder="1" text="이전년월" left="0" top="0" height="30" textAlign="right" width="80" cssclass="sta_WF_tablelabelE"/>
              <Static id="staBg00" taborder="6" height="30" cssclass="sta_WF_tablebg" width="261" top="0" left="79"/>
              <Static id="staYM_SDINS_TO" taborder="2" text="기준년월" left="0" width="80" height="30" textAlign="right" top="29" cssclass="sta_WF_tablelabelE"/>
              <Static id="staBg2" taborder="3" height="30" cssclass="sta_WF_tablebg" onclick="divData_staBg2_onclick" width="261" left="79" top="29"/>
              <Button id="btnSave" taborder="4" text="단가생성" left="31.47%" width="60" onclick="divData_btnSave_onclick" height="20" top="89"/>
              <Button id="btnCancel" taborder="5" text="닫기" left="51.47%" width="60" height="20" onclick="divData_btnCancel_onclick" top="89"/>
              <Div id="ctclYM_SDINS_TO" taborder="0" top="34" width="80" height="20" url="cmm::cmmCalMM.xfdl" left="84"/>
              <Div id="ctclYM_SDINS_FROM" taborder="7" top="4" width="80" height="20" url="cmm::cmmCalMM.xfdl" left="84"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	var dt = new Date();
	this.divData.form.ctclYM_SDINS_FROM.form.TextBox.set_value(dt.getFullYear().toString()+this.inZero((dt.getMonth()),2));
	this.divData.form.ctclYM_SDINS_TO.form.TextBox.set_value(dt.getFullYear().toString()+this.inZero((dt.getMonth() + 1),2));
	
	
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {	
	this.ctclYM_SDINS_FROM = this.divData.form.ctclYM_SDINS_FROM;
	this.ctclYM_SDINS_TO = this.divData.form.ctclYM_SDINS_TO;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {

	this.dsInsert = new Dataset();
	this.dsInsert.addColumn("YM_SDINS_FROM", "string");		// 이전년월
	this.dsInsert.addColumn("YM_SDINS_TO", "string");		// 기준년월
	this.dsInsert.addColumn("YN_DELETE_DATA", "string");	// 기준년월
	this.dsInsert.addColumn("ID_USER", "string");			// 사용자ID
	
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 
 /*
 *	입력 버튼
 */
this.fnAdd = function() {
}

 /*
 *	저장 버튼
 */
this.fnSave = function() {	
}

/*
 *	삭제 버튼
 */
this.fnDel = function() {
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}
/************************************************************************
 * Validate
 ************************************************************************/

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
*/
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "save") {
		if(errorCode == 0)
		{
			// this.close()가 작동하지 않았고, 
			// 부모의 callback 함수로 데이터를 넘겨주기 위해 작성되었습니다.
			this.getParentContext().close(true);
		}else
		{
			this.gfnAlert(errorMsg);
		}
	}else if(svcID == "check") {
		trace(this.dsCheck.saveXML());
	
		if(this.dsCheck.getColumn(0, "FROM_COUNT") > 0){
			if(this.dsCheck.getColumn(0, "TO_COUNT") > 0){
				this.gfnConfirm("기준년월에 자료가 존재합니다." + "\r\n" + "다시 생성하시겠습니까?", function(strSvcId, rtnVal){
					if(rtnVal){
						this.fnSaveDsDetail("Y");
					}
				});
			}else{
				this.fnSaveDsDetail("N");
			}
		}else{
			this.gfnAlert("이전년월에 복사할 자료가 없습니다.");
		}	
	}
}
/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/


/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
 
/************************************************************************
 * 기타 이벤트
 ************************************************************************/
 
// 저장 버튼 클릭
this.divData_btnSave_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	if(!this.gfnDataValidate(this.dsDetail, this.dsRequired))return;
	this.gfnConfirm("생성 하시겠습니까?", "fnCheckDsDetail");
};

//기준년월 기준 데이터 유무 CHECK
this.fnCheckDsDetail = function(svcId, val){
	if(val){
		this.dsInsert.clearData();		
		var nrow = this.dsInsert.addRow();

		this.dsInsert.setColumn(nrow, "YM_SDINS_FROM", this.dsDetail.getColumn(0, "YM_SDINS_FROM"));
		this.dsInsert.setColumn(nrow, "YM_SDINS_TO", this.dsDetail.getColumn(0, "YM_SDINS_TO"));
		
		if (this.dsInsert.rowcount == 0) return;
		
		var strSvcId    = "check";
		var strSvcType  = "select";
		var inProc		= "_dsProc";
		var inData      = "check=dsInsert";
		var outData     = "dsCheck=check0";
		var strArg      = "";
		var callBackFnc = "fnCallback";

		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
	
	}
}


// 단가생성
this.fnSaveDsDetail = function(YN_DELETE_DATA){
	
	this.dsInsert.clearData();		
	var nrow = this.dsInsert.addRow();

	this.dsInsert.setColumn(nrow, "YM_SDINS_FROM", this.dsDetail.getColumn(0, "YM_SDINS_FROM"));
	this.dsInsert.setColumn(nrow, "YM_SDINS_TO", this.dsDetail.getColumn(0, "YM_SDINS_TO"));
	this.dsInsert.setColumn(nrow, "YN_DELETE_DATA", YN_DELETE_DATA);
	this.dsInsert.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
	
	if (this.dsInsert.rowcount == 0) return;
	
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "save=dsInsert";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";

	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
					strSvcType , 	// transaction을 요청할 구분
					inProc,			// Procedure 정보 Dataset 이름
					inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
					outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
					strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
					callBackFnc); // 통신방법 정의 [생략가능]
}


// 취소 버튼 클릭
this.divData_btnCancel_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	// this.close()가 작동하지 않았고, 
	// 부모의 callback 함수로 데이터를 넘겨주기 위해 작성되었습니다.
	this.getParentContext().close(false);
};

this.inZero = function(p1,p2){
	var zero ="";
	for(var i=0; i<p2;i++) zero +="0";
	return zero.toString().concat(p1).match(new RegExp("\\d{"+p2+"}$"));
};
]]></Script>
    <Objects>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">save</Col>
            <Col id="SP">DMAPR_SDINSITEM_VEN_COPY</Col>
          </Row>
          <Row>
            <Col id="TARGET">check</Col>
            <Col id="SP">DMAPR_SDINSITEM_VEN_CHECK</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsDetail" onvaluechanged="dsData_onvaluechanged">
        <ColumnInfo>
          <Column id="YM_SDINS_FROM" type="STRING" size="256"/>
          <Column id="YM_SDINS_TO" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
      <Dataset id="dsRequired">
        <ColumnInfo>
          <Column id="CD_FIELD" type="STRING" size="256"/>
          <Column id="DS_FIELD" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CD_FIELD">YM_SDINS_FROM</Col>
            <Col id="DS_FIELD">이전년월</Col>
          </Row>
          <Row>
            <Col id="CD_FIELD">YM_SDINS_TO</Col>
            <Col id="DS_FIELD">기준년월</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsCheck"/>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divData.form.ctclYM_SDINS_FROM.form.TextBox" propid="value" datasetid="dsDetail" columnid="YM_SDINS_FROM"/>
      <BindItem id="item1" compid="divData.form.ctclYM_SDINS_TO.form.TextBox" propid="value" datasetid="dsDetail" columnid="YM_SDINS_TO"/>
    </Bind>
  </Form>
</FDL>
