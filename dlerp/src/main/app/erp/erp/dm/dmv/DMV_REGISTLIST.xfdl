<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="협력회사조회" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg" formscrolltype="none">
          <Layouts>
            <Layout>
              <Static id="staYR_REGIST" taborder="0" text="등록년도" left="0.0" top="10.0" width="92.0" height="24.0" textAlign="center" cssclass="sta_WF_SchLabelE"/>
              <Div id="ctclYR_REGIST" taborder="1" left="staYR_REGIST:0.0" top="10.0" width="60" height="24.0" url="cmm::cmmCalYY.xfdl"/>
              <Static id="staTY_REGIST" taborder="0" text="등록구분" left="ctclYR_REGIST:0.0" top="10.0" width="92.0" height="24.0" textAlign="center" cssclass="sta_WF_SchLabelE"/>
              <Combo id="ccboTY_REGIST" taborder="1" left="staTY_REGIST:0.0" top="10.0" width="100" height="24.0" innerdataset="dsTY_REGIST" codecolumn="CD_CODE" datacolumn="DS_CODE"/>
              <Static id="staDS_VENDOR" taborder="0" text="거래처명" left="ccboTY_REGIST:0.0" top="10.0" width="92.0" height="24.0" textAlign="center" cssclass="sta_WF_SchLabel"/>
              <Edit id="ctxtDS_VENDOR" taborder="1" left="staDS_VENDOR:0.0" top="10.0" width="150" height="24.0" value=""/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0" oncelldblclick="divData_objGrid_oncelldblclick"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	this.fnSetCombo();
	
	var today = this.gfnGetDate();
	this.dsSearch.setColumn(0, "YR_REGIST", today.substr(0,4));
	
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btnDetail = this.gfnFormButtonAdd("btnDetail", "fnDetail");
	this.btnInitPW = this.gfnFormButtonAdd("btnInitPW", "fnInitPW");
	this.btnCredit = this.gfnFormButtonAdd("btnCredit", "fnCredit");
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {	
	this.dxGrid = this.divData.form.objGrid;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	// 그리드 초기화
	this.gfnGridInit(this.dxGrid, this.dsList, "DM", "DMV_REGISTLIST");
};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("YR_REGIST", "string");
	this.dsSelect.addColumn("TY_REGIST", "string");
	this.dsSelect.addColumn("DS_VENDOR", "string");
	
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	
	this.dsSelect.setColumn(0, "YR_REGIST", this.dsSearch.getColumn(0, "YR_REGIST"));
	this.dsSelect.setColumn(0, "TY_REGIST", this.dsSearch.getColumn(0, "TY_REGIST"));
	this.dsSelect.setColumn(0, "DS_VENDOR", this.dsSearch.getColumn(0, "DS_VENDOR"));
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	//var nrow = this.gfnGridAdd(this.dxGrid); // top (default), bottom, current
}

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	//this.gfnGridDel(this.dxGrid);
}

/*
 *	저장 버튼
 */
this.fnSave = function() {
// 	// 그리드 필수항목 체크
// 	if (!this.gfnGridValidate(this.dxGrid)) return;	
// 
// 	this.dxGrid.updateToDataset();
// 		
// 	this.dsInsert.clearData();
// 	this.dsUpdate.clearData();
// 	this.dsDelete.clearData();
// 	
// 	for (var i = 0; i < this.dsList.rowcount; i++) {
// 		var flag = this.gfnGetFlag(this.dsList, i);
// 		switch(flag) {
// 			case "I":
// 				var nrow = this.dsInsert.addRow();
// // 				this.dsInsert.setColumn(nrow, "CD_CORP", this.dsList.getColumn(i, "CD_CORP"));
// // 				this.dsInsert.setColumn(nrow, "NO_CORP", this.dsList.getColumn(i, "NO_CORP").replace(/-/g, ''));
// // 				this.dsInsert.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
// 				break;
// 				
// 			case "U":
// 				var nrow = this.dsUpdate.addRow();
// // 				this.dsUpdate.setColumn(nrow, "CD_CORP", this.dsList.getColumn(i, "CD_CORP"));
// // 				this.dsUpdate.setColumn(nrow, "NO_CORP", this.dsList.getColumn(i, "NO_CORP").replace(/-/g, ''));
// // 				this.dsUpdate.setColumn(nrow, "ID_UPDATE", this.AuthClient.ID_USER);
// 				break;
// 				
// 			case "D":
// 				var nrow = this.dsDelete.addRow();
// //				this.dsDelete.setColumn(nrow, "CD_CORP", this.dsList.getColumn(i, "CD_CORP"));
// 				break;
// 		}
// 	}
// 	
// 	if (this.dsInsert.rowcount == 0 && this.dsUpdate.rowcount == 0 && this.dsDelete.rowcount == 0) return;
// 		
// 	// save SP 한개로 사용하는 경우
// 	/*
// 	this.dsSave.clearData();
// 	
// 	for (var i = 0; i < this.dsList.rowcount; i++) {
// 		var flag = this.gfnGetFlag(this.dsList, i);
// 		switch(flag) {
// 			case "I":
// 			case "U":
// 			case "D":
// 				var nrow = this.dsSave.addRow();
// 				this.dsSave.setColumn(nrow, "TY_FLAG", flag);
// 				this.dsSave.setColumn(nrow, "NO_IDX", this.dsList.getColumn(i, "NO_IDX"));
// 				break;
// 		}
// 	}
// 		
// 	if (this.dsSave.rowcount == 0) return;
// 	*/
// 		
// 	var strSvcId    = "save";
// 	var strSvcType  = "save";
// 	var inProc		= "_dsProc";
// 	var inData      = "insert=dsInsert update=dsUpdate delete=dsDelete";
// 	//var inData      = "save=dsSave";
// 	var outData     = "";
// 	var strArg      = "";
// 	var callBackFnc = "fnCallback";
// 	
// 	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
// 						strSvcType , 	// transaction을 요청할 구분
// 						inProc,			// Procedure 정보 Dataset 이름
// 						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
// 						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
// 						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
// 						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {
	var validate = true;
	
	if (this.gfnIsNull(this.dsSearch.getColumn(0, "YR_REGIST"))) {
		validate = false;
		// Alert후 실행할 처리
		this.fnVaidateCallback = function() {
			this.divSearch.form.ctclYR_REGIST.form.setFocus();
		}
		this.gfnAlert("등록년도를 입력하세요.", "fnVaidateCallback");
	}
// 	else if (this.gfnIsNull(this.dsSearch.getColumn(0, "TY_REGIST"))) {
// 		validate = false;
// 		// Alert후 실행할 처리
// 		this.fnVaidateCallback = function() {
// 			this.divSearch.form.ccboTY_REGIST.setFocus();
// 		}
// 		this.gfnAlert("등록구분을 입력하세요.", "fnVaidateCallback");
// 	}
	
	return validate;
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);	
	}
	else if(svcID == "combo") {
		if (errorCode == 0) {
			this.dsTY_REGIST.insertRow(0);		
			this.dsTY_REGIST.setColumn(0, "CD_CODE", "");
			this.dsTY_REGIST.setColumn(0, "DS_CODE", "전체");
			this.divSearch.form.ccboTY_REGIST.set_index(0);
		} else {
			this.gfnAlert(errorMsg);
		}
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
 
/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
	}
};

this.fnSetCombo = function()
{
	this.dsCombo = new Dataset();
	this.dsCombo.addColumn("CD_SYSTEM", "string");
	this.dsCombo.addColumn("CD_TYPE", "string");
	
	this.dsCombo.addRow();
	this.dsCombo.setColumn(0, "CD_SYSTEM", "DM");
	this.dsCombo.setColumn(0, "CD_TYPE", "H05");
	
	var strSvcId    = "combo";
	var strSvcType  = "select";
	var inProc		= "_dsProc";
	var inData      = "combo=dsCombo";
	var outData     = "dsTY_REGIST=combo0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]

}


// 아래부터는 확장버튼
this.fnDetail = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	 var param = {};
	 param.CD_VENDOR = this.dsList.getColumn(this.dsList.rowposition, "CD_VENDOR");
	 param.DS_VENDOR = this.dsList.getColumn(this.dsList.rowposition, "DS_VENDOR");
	 param.YR_REGIST = this.dsSearch.getColumn(0, "YR_REGIST");
	 
	 this.gfnFormOpen("DMV", "DMV_REGISTDETAIL", "", param); 
}

this.fnInitPW = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	//DMZPR_IDMANAGEAPPROVAL_PW_INIT
	// 선택된 row가 있을 경우에만 팝업을 띄움
	if (!this.gfnGridIsRow(this.dxGrid)) { return false; }
	
	var noSjc = this.dsList.getColumn(this.dsList.rowposition, "NO_SJC");		// 사업자번호
	var dsVendor = this.dsList.getColumn(this.dsList.rowposition, "DS_VENDOR");	// 업체명
	
	this.gfnConfirm("사업자번호 : " + noSjc + "\r\n업체명 : " + dsVendor + "\r\n\r\n해당업체의 전자조달 PW를 재생성하고\r\n메일을 송부하시겠습니까?", "dsList_initPW_callback");
	
}

// PW재생성&메일 버튼 클릭 후 callback
this.dsList_initPW_callback = function(strId, val) 
{
	if(val == true) {
		var param = {};
		param.CD_GUBUN = "INITPW";
		param.PARAM1 = this.dsList.getColumn(this.dsList.rowposition, "CD_VENDOR");
		
		this.gfnFormOpen("DZO", "DZZ_MAIL_SENDER", "", param, 800, 500);
	}	
}

//신용정보조회 버튼 이벤트.
this.fnCredit = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	var param = {};
	 
	param.CD_VENDOR = this.dsList.getColumn(this.dsList.rowposition, "CD_VENDOR");
	param.DS_VENDOR = this.dsList.getColumn(this.dsList.rowposition, "DS_VENDOR");
	param.NO_SJC = this.dsList.getColumn(this.dsList.rowposition, "NO_SJC");
	 
	this.gfnFormOpen("DCZ", "DCZ_CREDIT_INFO", "", param); 
}

// grid 더블클릭시 상세정보로 넘어가도록.
this.divData_objGrid_oncelldblclick = function(obj:nexacro.Grid,e:nexacro.GridClickEventInfo)
{
	 var param = {};
	 param.CD_VENDOR = this.dsList.getColumn(e.row, "CD_VENDOR");
	 param.DS_VENDOR = this.dsList.getColumn(e.row, "DS_VENDOR");
	 param.YR_REGIST = this.dsSearch.getColumn(0, "YR_REGIST");
	 
	 this.gfnFormOpen("DMV", "DMV_REGISTDETAIL", "", param); 
};
]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DMVPR_REGISTLIST_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">combo</Col>
            <Col id="SP">DZXPR_COMBO_SELECT</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="YR_REGIST" type="STRING" size="256"/>
          <Column id="TY_REGIST" type="STRING" size="256"/>
          <Column id="DS_VENDOR" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TY_REGIST"/>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsTY_REGIST">
        <ColumnInfo>
          <Column id="CD_CODE" type="STRING" size="256"/>
          <Column id="DS_CODE" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ctclYR_REGIST.form.TextBox" propid="value" datasetid="dsSearch" columnid="YR_REGIST"/>
      <BindItem id="item1" compid="divSearch.form.ccboTY_REGIST" propid="value" datasetid="dsSearch" columnid="TY_REGIST"/>
      <BindItem id="item2" compid="divSearch.form.ctxtDS_VENDOR" propid="value" datasetid="dsSearch" columnid="DS_VENDOR"/>
    </Bind>
  </Form>
</FDL>
