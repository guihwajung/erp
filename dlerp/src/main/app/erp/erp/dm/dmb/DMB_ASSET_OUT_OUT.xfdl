<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="부외자산관리" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="110.0" right="0" cssclass="div_SEARCH_Bg">
          <Layouts>
            <Layout>
              <Static id="staCD_SYSTEM" taborder="1" text="현장코드" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfCD_SITE" CodeFindName="DZX_CFSITE" CDTextWidth="80" taborder="0" left="staCD_SYSTEM:0.0" top="10.0" width="300" height="24.0" url="cmm::cmmCodeFind.xfdl" async="true" FitToContents="false"/>
              <Static id="staID_DAM" taborder="2" text="승인상태" left="0.0" top="staCD_SYSTEM:10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Combo id="ccboTY_APPROVAL" taborder="3" left="staID_DAM:0.0" top="staCD_SYSTEM:10.0" width="105" height="24.0" innerdataset="innerdataset" codecolumn="codecolumn" datacolumn="datacolumn">
                <Dataset id="innerdataset">
                  <ColumnInfo>
                    <Column id="codecolumn" size="256"/>
                    <Column id="datacolumn" size="256"/>
                  </ColumnInfo>
                  <Rows>
                    <Row>
                      <Col id="datacolumn">전체</Col>
                      <Col id="codecolumn"/>
                    </Row>
                    <Row>
                      <Col id="codecolumn">Y</Col>
                      <Col id="datacolumn">승인</Col>
                    </Row>
                    <Row>
                      <Col id="codecolumn">N</Col>
                      <Col id="datacolumn">미승인</Col>
                    </Row>
                  </Rows>
                </Dataset>
              </Combo>
              <Static id="staDT_ORDER" taborder="4" text="취득일자" top="10.0" width="92.0" height="24.0" left="ccfCD_SITE:0.0" cssclass="sta_WF_SchLabelE"/>
              <Calendar id="ctclDT_ACT_FR" taborder="5" left="staDT_ORDER:0.0" top="10.0" width="105" height="24.0" dateformat="yyyy-MM-dd" editformat="yyyyMMdd" autoselect="true" value=""/>
              <Static id="sta_range" taborder="6" text="~" left="ctclDT_ACT_FR:0.0" top="10.0" width="30.0" height="24.0" cssclass="sta_WF_AC"/>
              <Calendar id="ctclDT_ACT_TO" taborder="7" left="sta_range:0.0" top="10.0" width="105" height="24.0" dateformat="yyyy-MM-dd" editformat="yyyyMMdd" autoselect="true" value=""/>
              <Static id="staID_DAM00" taborder="8" text="결재상태" width="92.0" height="24.0" left="ccfCD_SITE:0.0" top="ccfCD_SITE:10.0" cssclass="sta_WF_SchLabel"/>
              <Combo id="ccboTY_STATUS" taborder="9" left="staID_DAM00:0.0" top="staCD_SYSTEM:10.0" width="105" height="24.0" innerdataset="innerdataset" codecolumn="codecolumn" datacolumn="datacolumn">
                <Dataset id="innerdataset">
                  <ColumnInfo>
                    <Column id="codecolumn" size="256"/>
                    <Column id="datacolumn" size="256"/>
                  </ColumnInfo>
                  <Rows>
                    <Row>
                      <Col id="datacolumn">전체</Col>
                      <Col id="codecolumn"/>
                    </Row>
                    <Row>
                      <Col id="codecolumn">Y</Col>
                      <Col id="datacolumn">결재완료</Col>
                    </Row>
                    <Row>
                      <Col id="codecolumn">R</Col>
                      <Col id="datacolumn">결재중</Col>
                    </Row>
                    <Row>
                      <Col id="codecolumn">N</Col>
                      <Col id="datacolumn">미결재</Col>
                    </Row>
                  </Rows>
                </Dataset>
              </Combo>
              <Static id="staID_DAM01" taborder="10" text="취득구분" left="ctclDT_ACT_TO:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Combo id="ccboTY_ACT" taborder="11" left="staID_DAM01:0.0" top="10.0" width="105" height="24.0" innerdataset="innerdataset" codecolumn="codecolumn" datacolumn="datacolumn">
                <Dataset id="innerdataset">
                  <ColumnInfo>
                    <Column id="codecolumn" size="256"/>
                    <Column id="datacolumn" size="256"/>
                  </ColumnInfo>
                  <Rows>
                    <Row>
                      <Col id="codecolumn"/>
                      <Col id="datacolumn">전체</Col>
                    </Row>
                    <Row>
                      <Col id="codecolumn">02</Col>
                      <Col id="datacolumn">전용</Col>
                    </Row>
                    <Row>
                      <Col id="codecolumn">03</Col>
                      <Col id="datacolumn">폐기</Col>
                    </Row>
                  </Rows>
                </Dataset>
              </Combo>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="-5" bottom="5" right="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[include "lib::libCommon.xjs";

this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	var today = this.gfnGetDate();
	this.dsSearch.setColumn(0, "DT_ACT_FR", this.gfnAddMonth(today, -3));
	this.dsSearch.setColumn(0, "DT_ACT_TO", this.gfnGetLastDate(today));
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 ************************************************************************/
this.fnSetButton = function() {
 	var id_group = this.FormInfo.ID_GROUP;
 	var gr_search = this.FormInfo.GR_SEARCH;
 	var cd_role = this.FormInfo.CD_ROLE;
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btnAPP = this.gfnFormButtonAdd("btnAPP", "fnAPP");
	this.btnAPPCANCEL = this.gfnFormButtonAdd("btnAPPCANCEL", "fnAPPCANCEL");
	this.btnHistory = this.gfnFormButtonAdd("btnHistory", "fnHISTORY");
	this.btnAssetImg = this.gfnFormButtonAdd("btnAssetImg", "fnAssetImg");
	this.btnApp2 = this.gfnFormButtonAdd("btnApp2", "fnApp2");
	this.btnApp3 = this.gfnFormButtonAdd("btnApp3", "fnApp3");
	this.btnSlipSearch = this.gfnFormButtonAdd("btnSlipSearch", "fnSlipSearch");
	this.btnSlipSearch2 = this.gfnFormButtonAdd("btnSlipSearch2", "fnSlipSearch2");
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.ccfCD_SITE = this.divSearch.form.ccfCD_SITE;
	this.dxGrid = this.divData.form.objGrid;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	this.gfnGridInit(this.dxGrid, this.dsList, "DM", "DMB_ASSET_OUT_OUT"); 
	
	this.dxGrid.addEventHandler("onselectchanged", this.fnGrid_RowCellChanged, this);
	this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforeUserDataSetParam";
	
	// this.dxGrid.EnterCell = "fnGrid_EnterCell";
}

this.fnGrid_BeforeUserDataSetParam = function(id, dsUserParam, nrow) {	
	// 그리드에서 코드파인드 id는 그리드셋팅의 코드파인드 식별ID
 	if (id == "DWX_CFCOST_TREE_01") {
		dsUserParam.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
		dsUserParam.setColumn(nrow, "CD_GBIMOK", "");
		dsUserParam.setColumn(nrow, "CD_STDAGG", "");
	}
	else if (id == "DZX_CFSITE") {
		dsUserParam.setColumn(nrow, "CD_CORP", this.AuthClient.CD_CORP);
		dsUserParam.setColumn(nrow, "CD_DEPT", this.AuthClient.CD_DEPT);
		dsUserParam.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
		dsUserParam.setColumn(nrow, "GR_SEARCH", "0");
	}
	else if (id == "DMB_CFASSET_OUT"){
		dsUserParam.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
	}
	return true;
}

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {

	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_SITE","string");
	this.dsSelect.addColumn("DT_ACT_FR","string");
	this.dsSelect.addColumn("DT_ACT_TO","string");
	this.dsSelect.addColumn("TY_OUT","string");
	this.dsSelect.addColumn("TY_APPROVAL","string");
	this.dsSelect.addColumn("TY_STATUS","string");

	this.dsSave = new Dataset();
	this.dsSave.addColumn("TY_WRK","string");
	this.dsSave.addColumn("NO_INV","string");
	this.dsSave.addColumn("NO_OUT","string");
	this.dsSave.addColumn("TY_OUT","string");
	this.dsSave.addColumn("CD_SITE_IN","string");
	this.dsSave.addColumn("CT_OUT","int");
	this.dsSave.addColumn("UP_OUT","bigdecimal");
	this.dsSave.addColumn("AM_OUT","bigdecimal");
	this.dsSave.addColumn("DT_OUT","string");
	this.dsSave.addColumn("TY_ACCOUNT","string");
	this.dsSave.addColumn("DS_REM","string");
	this.dsSave.addColumn("ID_USER","string");
	
	/* 
	this.dsSave.addColumn("NO_ASSET","string");
	this.dsSave.addColumn("DS_ASSET","string");
	this.dsSave.addColumn("TY_REG","string");
	this.dsSave.addColumn("DT_INV","string");
	this.dsSave.addColumn("DS_VENDOR","string");
	this.dsSave.addColumn("TY_ACT","string");
	this.dsSave.addColumn("NM_MNG","string");
	this.dsSave.addColumn("DS_PLACE","string");
	this.dsSave.addColumn("YN_JUNYOUNG","string");
	this.dsSave.addColumn("SZ_SIZE_ASSET","string");
	this.dsSave.addColumn("DS_UNIT_ASSET","string");
	this.dsSave.addColumn("CD_LICCOST","string");
	this.dsSave.addColumn("DS_ITEM","string");
	this.dsSave.addColumn("SZ_SIZE","string");
	this.dsSave.addColumn("DS_UNIT","string");
	*/
	
	this.dsExecute = new Dataset();
	this.dsExecute.addColumn("TY_APROVE", "string");
	this.dsExecute.addColumn("NO_INV", "string");
	this.dsExecute.addColumn("NO_OUT", "string");
	this.dsExecute.addColumn("ID_USER", "string");
	
	this.dsAppParam = new Dataset();
	this.dsAppParam.addColumn("TY_OUT", "string");
	this.dsAppParam.addColumn("NO_OUT", "string");
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	
	this.dsSelect.setColumn(0, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
	this.dsSelect.setColumn(0, "DT_ACT_FR", this.dsSearch.getColumn(0, "DT_ACT_FR"));
	this.dsSelect.setColumn(0, "DT_ACT_TO", this.dsSearch.getColumn(0, "DT_ACT_TO"));
	this.dsSelect.setColumn(0, "TY_OUT", this.dsSearch.getColumn(0, "TY_OUT"));
	this.dsSelect.setColumn(0, "TY_APPROVAL", this.dsSearch.getColumn(0, "TY_APPROVAL"));
	this.dsSelect.setColumn(0, "TY_STATUS", this.dsSearch.getColumn(0, "TY_STATUS"));
	
	console.log(this.dsSearch.saveXML());

	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	if(this.gfnIsNull(this.dsSearch.getColumn(0, "CD_SITE")))
	{
		this.gfnAlert("현장코드를 선택 하세요");
		return false;
	}

	var nrow = this.gfnGridAdd(this.dxGrid);
}

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	var nrow = this.gfnGridDel(this.dxGrid);
	if(this.dsList.getColumn(nrow, "TY_APPROVAL") == "Y")
	{
		this.gfnAlert("승인된 건은 삭제가 불가능합니다.");
		return false;
	}
}

/*
 *	저장 버튼
 */
this.fnSave = function() {
	// 그리드 필수항목 체크
	if (!this.gfnGridValidate(this.dxGrid)) return;	

	this.dxGrid.updateToDataset();
	this.dsSave.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "I":
			case "U":
			case "D":
				var nrow = this.dsSave.addRow();
				
				this.dsSave.setColumn(nrow, "TY_WRK", flag);
				this.dsSave.setColumn(nrow, "NO_INV", this.dsList.getColumn(i, "NO_INV"));
				this.dsSave.setColumn(nrow, "NO_OUT", this.dsList.getColumn(i, "NO_OUT"));
				this.dsSave.setColumn(nrow, "TY_OUT", this.dsList.getColumn(i, "TY_OUT"));
				this.dsSave.setColumn(nrow, "CD_SITE_IN", this.dsList.getColumn(i, "CD_SITE_IN"));
				this.dsSave.setColumn(nrow, "CT_OUT", this.dsList.getColumn(i, "CT_OUT"));
				this.dsSave.setColumn(nrow, "UP_OUT", this.dsList.getColumn(i, "UP_OUT"));
				this.dsSave.setColumn(nrow, "AM_OUT", this.dsList.getColumn(i, "AM_OUT"));
				this.dsSave.setColumn(nrow, "DT_OUT", this.dsList.getColumn(i, "DT_OUT"));
				this.dsSave.setColumn(nrow, "TY_ACCOUNT", this.dsList.getColumn(i, "TY_ACCOUNT"));
				this.dsSave.setColumn(nrow, "DS_REM", this.dsList.getColumn(i, "DS_REM"));
				this.dsSave.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
				
				break;
				
				/*
				this.dsSave.setColumn(nrow,"DS_ASSET",this.dsList.getColumn(i, "DS_ASSET"));
				this.dsSave.setColumn(nrow,"TY_ASSET",this.dsList.getColumn(i, "TY_ASSET"));
				this.dsSave.setColumn(nrow,"SZ_SIZE_ASSET",this.dsList.getColumn(i, "SZ_SIZE_ASSET"));
				this.dsSave.setColumn(nrow,"DS_UNIT_ASSET",this.dsList.getColumn(i, "DS_UNIT_ASSET"));
				this.dsSave.setColumn(nrow,"TY_REG",this.dsList.getColumn(i, "TY_REG"));
				this.dsSave.setColumn(nrow,"DT_INV",this.dsList.getColumn(i, "DT_INV"));
				this.dsSave.setColumn(nrow,"DS_VENDOR",this.dsList.getColumn(i, "DS_VENDOR"));
				this.dsSave.setColumn(nrow,"CT_INV",this.dsList.getColumn(i, "CT_INV"));
				this.dsSave.setColumn(nrow,"UP_INV",this.dsList.getColumn(i, "UP_INV"));
				this.dsSave.setColumn(nrow,"AM_INV",this.dsList.getColumn(i, "AM_INV"));
				this.dsSave.setColumn(nrow,"TY_ACT",this.dsList.getColumn(i, "TY_ACT"));
				this.dsSave.setColumn(nrow,"CD_SITE_IN",this.dsList.getColumn(i, "CD_SITE_IN"));
				this.dsSave.setColumn(nrow,"CD_LICCOST",this.dsList.getColumn(i, "CD_LICCOST"));
				this.dsSave.setColumn(nrow,"DS_ITEM",this.dsList.getColumn(i, "DS_ITEM"));
				this.dsSave.setColumn(nrow,"SZ_SIZE",this.dsList.getColumn(i, "SZ_SIZE"));
				this.dsSave.setColumn(nrow,"DS_UNIT",this.dsList.getColumn(i, "DS_UNIT"));
				this.dsSave.setColumn(nrow,"NM_MNG",this.dsList.getColumn(i, "NM_MNG"));
				this.dsSave.setColumn(nrow,"DS_PLACE",this.dsList.getColumn(i, "DS_PLACE"));
				this.dsSave.setColumn(nrow,"YN_JUNYOUNG",this.dsList.getColumn(i, "YN_JUNYOUNG"));
				this.dsSave.setColumn(nrow,"TY_ACCOUNT",this.dsList.getColumn(i, "TY_ACCOUNT"));
				this.dsSave.setColumn(nrow,"DS_REM",this.dsList.getColumn(i, "DS_REM"));
				this.dsSave.setColumn(nrow,"ID_USER",this.AuthClient.ID_USER);
				*/
		}
	}
	
	if (this.dsSave.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "save=dsSave";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
  */
this.fnSelectValidate = function() {
	var validate = true;
	if (this.gfnIsNull(this.dsSearch.getColumn(0, "CD_SITE"))) {
		validate = false;
		// Alert후 실행할 처리
		this.fnVaidateCallback = function() {
			this.ccfCD_SITE.form.CDTextBox.setFocus();
		}
		
		this.gfnAlert("현장코드를 선택하세요.", "fnVaidateCallback");
	}
	
	return validate;
};


/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);	
		
		this.dsList.set_enableevent(false);
		for(var i =0;i < this.dsList.rowcount;i++)
		{
			this.dsList.setColumn(i, "CHK", 0);
		}
		this.dsList.set_enableevent(true);
		
		this.fnBtnCheckAll();
	}
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "execute") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "appChk") 
	{
		if (errorCode == 0) 
		{
			this.fnAppSelect();
		}
		else
		{	
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "appSelect") {
		if (errorCode == 0) 
		{
			this.fnAppOpen();
		}
		else
		{
			this.gfnAlert(errorMsg);
		}
	}
}
 
/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
this.fnGrid_RowCellChanged = function(obj:nexacro.Grid,e:nexacro.GridSelectEventInfo, event:nexacro.KeyEventInfo)
{
	if ((obj.oldrow > -1 && obj.oldrow == e.row)
		|| (obj.oldrow == -1 && e.oldrow != e.row)) {
		var colnm = this.gfnGridGetBindColumnNameByIndex(obj, e.cell);
		
		var event = nexacro.KeyEventInfo;
		
		var rows = this.dxGrid.getSelectedDatasetRows();
		
		this.dsList.set_enableevent(false);
		for(var i = 0; i < this.dsList.rowcount; i++)
		{
			var check = false;
			
			if(colnm == "CHK")
			{
				check = true;
				break;
			}
			
			if(rows.length > 0)
			{
				for(var j = 0; j < rows.length ; j++)
				{
					if(i == e.row || i == rows[j])
					{
						check = true;
						this.dsList.setColumn(i, "CHK", 1);
					}
				}
			}
			else
			{
				if(i == e.row)
				{
					check = true;
					this.dsList.setColumn(i, "CHK", 1);
				}
			}
			
			if(check == false)
			{
				this.dsList.setColumn(i, "CHK", 0);
			}
		}
		this.dsList.set_enableevent(true);
		
		obj.oldrow = -1;
	}
}

// cell 클릭했을때 이벤트(해당 cell에 대한 이벤트를 건다)
this.fnGrid_EnterCell = function(obj:nexacro.Grid, row, cell) {
	// 수정가능 true, false 처리하려는 컬럼에 대해서만 return 처리할것. 
	var colnm = this.gfnGridGetBindColumnNameByIndex(this.dxGrid, cell);	// 클릭한 cell의 컬럼명
	
	if(colnm == "CHK") {
		return false;
	}
};
/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
	}
};

this.fnAPP = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	if(!this.gfnGridIsRow(this.dxGrid))
	{
		this.gfnAlert("승인하시려는 건을 선택하세요.");
		return false;
	}
	
	var msg = "승인 처리를 진행하시겠습니까?";
	this.gfnConfirm(msg, "fnAPP_callback", "Y");
}

this.fnAPPCANCEL = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	if(!this.gfnGridIsRow(this.dxGrid))
	{
		this.gfnAlert("승인취소하시려는 건을 선택하세요.");
		return false;
	}
	
	var msg = "승인 취소 처리를 진행하시겠습니까?";
	this.gfnConfirm(msg, "fnAPP_callback", "N");
}

this.fnAPP_callback = function(strId, val) 
{
	if(val == true) {
		this.dsExecute.clearData();
		
		var nrow = this.dsExecute.addRow();
		
		this.dsExecute.setColumn(nrow, "TY_APROVE", strId);
		this.dsExecute.setColumn(nrow, "NO_INV", this.dsList.getColumn(this.dsList.rowposition, "NO_INV"));
		this.dsExecute.setColumn(nrow, "NO_OUT", this.dsList.getColumn(this.dsList.rowposition, "NO_OUT"));
		this.dsExecute.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);

		
		if (this.dsExecute.rowcount == 0) return;
		
		var strSvcId    = "execute";
		var strSvcType  = "save";
		var inProc		= "_dsProc";
		var inData      = "execute=dsExecute";
		var outData     = "";
		var strArg      = "";
		var callBackFnc = "fnCallback";
		
		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
							strSvcType , 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
							callBackFnc); // 통신방법 정의 [생략가능]
	}	
}

this.fnHISTORY = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) 
{
	if(this.dsList.rowposition < 0){
			this.gfnAlert("선택된 행이 없습니다.");
			return false;
	}
	
   var strNO_ASSET = this.dsList.getColumn(this.dsList.rowposition, "NO_ASSET");
   var strDS_ASSET = this.dsList.getColumn(this.dsList.rowposition, "DS_ASSET");
   if(this.gfnIsNull(strNO_ASSET)) { return false; }

   var param = {};
   param.NO_ASSET = strNO_ASSET;
   param.DS_ASSET = strDS_ASSET;
   
   this.gfnFormOpen(this.FormInfo.CD_MODULE, "DMB_ASSET_OUT_HISTORY", "fnDetail_Callback", param, 1024, 450);
}

this.fnAssetImg = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) 
{
	if(this.dsList.rowposition < 0){
			this.gfnAlert("선택된 행이 없습니다.");
			return false;
	}
	
   var strNO_ASSET = this.dsList.getColumn(this.dsList.rowposition, "NO_ASSET");
   var strDS_ASSET = this.dsList.getColumn(this.dsList.rowposition, "DS_ASSET");
   var strNO_KEY   = this.dsList.getColumn(this.dsList.rowposition, "NO_OUT");
   if(this.gfnIsNull(strNO_KEY)) { return false; }

   var param = {};
   param.NO_ASSET = strNO_ASSET;
   param.DS_ASSET = strDS_ASSET;
   param.NO_KEY   = strNO_KEY;
   
   this.gfnFormOpen(this.FormInfo.CD_MODULE, "DMB_ASSET_OUT_IMG", "fnDetail_Callback", param, 490, 450);
}

this.fnDetail_Callback = function(strID, value) {
   // this.FormBtns.Select.click();
}

this.fnBtnCheckAll = function()
{
	this.gfnBtnCheck(this.btnAPP, this.dsList);
	this.gfnBtnCheck(this.btnAPPCANCEL, this.dsList);
}

this.dsList_oncolumnchanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue)
	{
		if(e.columnid == "CT_OUT" || e.columnid == "UP_OUT"){
			var CT_OUT = nexacro.toNumber(this.dsList.getColumn(e.row, "CT_OUT"),0);
			var UP_OUT = nexacro.toNumber(this.dsList.getColumn(e.row, "UP_OUT"),0);
			var AM_OUT = CT_OUT * UP_OUT;
			this.dsList.setColumn(e.row, "AM_OUT", AM_OUT);
		}
	}
};

this.fnApp2 = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) 
{
	if (!this.fnSelectValidate()) return false;
	
	this.dsAppParam.clearData();
	var nrow = this.dsAppParam.addRow();
	
	var chkRow = this.dsList.findRow("CHK","1");
	
	if(this.gfnGetFlag(this.dsList, chkRow) == "#")
	{
		chkRow = this.dsList.findRow("CHK","1", chkRow + 1);
	}
	
	if(chkRow < 0){
		this.gfnAlert("선택된 행이 없습니다.");
		return false;
	}
	
	var param = {};
	
	var no_asset = "";
	var count = 0;
	for(var i =0;i < this.dsList.rowcount;i++){
		if(this.dsList.getColumn(i , "CHK") == "1" && this.gfnGetFlag(this.dsList, i) != "#"){
			if(count < 1)
				{
					no_asset += this.dsList.getColumn(i, "NO_OUT");
				}
			else
				{
					no_asset += "," + this.dsList.getColumn(i, "NO_OUT");
				}
			count++;
		}
	}
	
	this.dsAppParam.setColumn(nrow, "TY_OUT", "02");
	this.dsAppParam.setColumn(nrow, "NO_OUT", no_asset);
	
	console.log(no_asset);
	
	var msg = "전용 결재의뢰를 진행하시겠습니까?";
	this.gfnConfirm(msg, "fnApp2_callback", "");
}

this.fnApp3 = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) 
{
	if (!this.fnSelectValidate()) return false;
	
	this.dsAppParam.clearData();
	var nrow = this.dsAppParam.addRow();
	
	var chkRow = this.dsList.findRow("CHK","1");
	
	if(this.gfnGetFlag(this.dsList, chkRow) == "#")
	{
		chkRow = this.dsList.findRow("CHK","1", chkRow + 1);
	}
	
	if(chkRow < 0){
		this.gfnAlert("선택된 행이 없습니다.");
		return false;
	}
	
	var param = {};
	
	var no_asset = "";
	var count = 0;
	for(var i =0;i < this.dsList.rowcount;i++){
		if(this.dsList.getColumn(i , "CHK") == "1" && this.gfnGetFlag(this.dsList, i) != "#"){
			if(count < 1)
				{
					no_asset += this.dsList.getColumn(i, "NO_OUT");
				}
			else
				{
					no_asset += "," + this.dsList.getColumn(i, "NO_OUT");
				}
			count++;
		}
	}
	
	this.dsAppParam.setColumn(nrow, "TY_OUT", "03");
	this.dsAppParam.setColumn(nrow, "NO_OUT", no_asset);
	
	console.log(no_asset);
	
	var msg = "폐기 결재의뢰를 진행하시겠습니까?";
	this.gfnConfirm(msg, "fnApp2_callback", "");
}

this.fnApp2_callback = function(strId, val) 
{
	if(val == true) 
	{	
		if (this.dsAppParam.rowcount == 0) return;
		
		var strSvcId    = "appChk";
		var strSvcType  = "save";
		var inProc		= "_dsProc";
		var inData      = "appChk=dsAppParam";
		var outData     = "";
		var strArg      = "";
		var callBackFnc = "fnCallback";
		
		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
							strSvcType , 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
							callBackFnc); // 통신방법 정의 [생략가능]
	}
}

this.fnAppSelect = function()
{
	var strSvcId    = "appSelect";
	var strSvcType  = "select";
	var inProc		= "_dsProc";
	var inData      = "appSelect=dsAppParam";
	var outData     = "dsAppList=appSelect0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

this.fnAppOpen = function()
{
	if(this.dsAppList.rowcount > 0) 
	{
		var sApType = "";
		var sTitle  = "";
		
		var strTY_OUT = this.dsAppParam.getColumn(0, "TY_OUT");
		
		if(strTY_OUT == "02")
		{
			sApType = "DM12";
			sTitle  = "[부외자산 전용] " + this.divSearch.form.ccfCD_SITE.form.DSTextBox.value + " -> " + this.dsList.getColumn(this.dsList.rowposition, "DS_SITE_IN");
		}else if(strTY_OUT == "03")
		{		
			sApType = "DM13";
			sTitle  = "[부외자산 폐기] " + this.divSearch.form.ccfCD_SITE.form.DSTextBox.value;
		}
		
		var sRef01  = this.dsAppParam.getColumn(0, "NO_OUT");
		var sRef02  = strTY_OUT;
		var sRef03  = "";
		var sRef04  = "";
		var oParam  = this.gfnDataSetToJson(this.dsAppList, this.dsAppList.rowposition)

		console.info("================ oParam");
		console.info(strTY_OUT);
		console.info(sApType);
		console.info(sTitle);
		console.info(sRef01);
		console.info(oParam);
	
		this.gfnApprove(sApType, sTitle, sRef01, sRef02, "", "", oParam, "fnAprvDialogCallback");
	}
}

this.fnAprvDialogCallback = function() 
{
	// 결재완료, 결재취소, 결재상신 후에는 재조회를 한다
	this.FormBtns.Select.click();
};

this.dsList_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this, "U");	// 폼상태 초기화	
	}
};

// 전표조회 버튼 클릭
this.fnSlipSearch = function(obj: nexacro.Button, e: nexacro.ClickEventInfo) {

    if (this.dsList.rowcount > 0) {
        if (this.gfnIsNull(this.dsList.getColumn(this.dsList.rowposition, "CD_TRADE_OUT"))) {

            this.gfnAlert("발행된 전표가 없습니다.");
        } else {

            this.gfnConfirm("전표를 조회하시겠습니까?", "fnSlipSearch_callback");
        }
    }
}

// 전표조회 버튼 클릭
this.fnSlipSearch2 = function(obj: nexacro.Button, e: nexacro.ClickEventInfo) {

    if (this.dsList.rowcount > 0) {
        if (this.gfnIsNull(this.dsList.getColumn(this.dsList.rowposition, "CD_TRADE_IN"))) {

            this.gfnAlert("발행된 전표가 없습니다.");
        } else {

            this.gfnConfirm("전표를 조회하시겠습니까?", "fnSlipSearch2_callback");
        }
    }
}

//전표조회 콜백
this.fnSlipSearch_callback = function(strId, val) {
 if (val == true) {
        var param = {};
        // 
        param.CD_TRADE = this.dsList.getColumn(this.dsList.rowposition, "CD_TRADE_OUT");

        //전표발행시 팝업창 띄움
        this.gfnFormOpen("DHA", "DHA_ISSUESLIP", "fnDialogCallback", param);	
    }
};

//전표조회 콜백
this.fnSlipSearch2_callback = function(strId, val) {
 if (val == true) {
        var param = {};
        // 
        param.CD_TRADE = this.dsList.getColumn(this.dsList.rowposition, "CD_TRADE_IN");

        //전표발행시 팝업창 띄움
        this.gfnFormOpen("DHA", "DHA_ISSUESLIP", "fnDialogCallback", param);	
    }
};]]></Script>
    <Objects>
      <Dataset id="dsList" oncolumnchanged="dsList_oncolumnchanged" onvaluechanged="dsList_onvaluechanged"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DMBPR_ASSET_OUT_OUT_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">save</Col>
            <Col id="SP">DMBPR_ASSET_OUT_OUT_SAVE</Col>
          </Row>
          <Row>
            <Col id="TARGET">execute</Col>
            <Col id="SP">DMBPR_ASSET_OUT_OUT_APPROVE</Col>
          </Row>
          <Row>
            <Col id="TARGET">appChk</Col>
            <Col id="SP">DCBPR_APP_DM12_CHK</Col>
          </Row>
          <Row>
            <Col id="TARGET">appSelect</Col>
            <Col id="SP">DCBPR_APP_DM12_SELECT</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_SITE" type="STRING" size="256"/>
          <Column id="DT_ACT_FR" type="STRING" size="256"/>
          <Column id="DT_ACT_TO" type="STRING" size="256"/>
          <Column id="TY_OUT" type="STRING" size="256"/>
          <Column id="TY_APPROVAL" type="STRING" size="256"/>
          <Column id="TY_STATUS" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CD_SITE"/>
            <Col id="DT_ACT_FR"/>
            <Col id="DT_ACT_TO"/>
            <Col id="TY_OUT"/>
            <Col id="TY_APPROVAL"/>
            <Col id="TY_STATUS"/>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsAppList" onvaluechanged="dsList_onvaluechanged"/>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfCD_SITE.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_SITE"/>
      <BindItem id="item1" compid="divSearch.form.ctclDT_ACT_FR" propid="value" datasetid="dsSearch" columnid="DT_ACT_FR"/>
      <BindItem id="item2" compid="divSearch.form.ctclDT_ACT_TO" propid="value" datasetid="dsSearch" columnid="DT_ACT_TO"/>
      <BindItem id="item3" compid="divSearch.form.ccboTY_ACT" propid="value" datasetid="dsSearch" columnid="TY_OUT"/>
      <BindItem id="item4" compid="divSearch.form.ccboTY_APPROVAL" propid="value" datasetid="dsSearch" columnid="TY_APPROVAL"/>
      <BindItem id="item5" compid="divSearch.form.ccboTY_STATUS" propid="value" datasetid="dsSearch" columnid="TY_STATUS"/>
    </Bind>
  </Form>
</FDL>
