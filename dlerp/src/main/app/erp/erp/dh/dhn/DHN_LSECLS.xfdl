<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="form" width="1280" height="720" titletext="분류코드관리" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg">
          <Layouts>
            <Layout>
              <Static cssclass="sta_WF_SchLabelE" id="staCD_CORP" taborder="0" text="법인코드" left="0.0" top="10.0" width="92.0" height="24.0"/>
              <Div id="ccfCD_CORP" CodeFindName="DHX_CFCORP" CDTextWidth="50" taborder="1" left="staCD_CORP:0.0" top="10.0" width="250" height="24.0" url="cmm::cmmCodeFind.xfdl" text="" FitToContents="true"/>
              <Static id="staTY_REGIST" taborder="2" text="사용여부" left="ccfCD_CORP:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Combo id="ccboTY_REGIST" taborder="3" left="staTY_REGIST:0.0" top="10.0" width="90" height="24.0" innerdataset="dsTY_REGIST" datacolumn="VALUE" codecolumn="CODE" onitemchanged="divSearch_ccboTY_REGIST_onitemchanged" index="0" text="전체" value=""/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:-3" bottom="0" right="0" cssclass="div_DATA_Bg" ondragmove="divData_ondragmove">
          <Layouts>
            <Layout>
              <Div id="divSplitter" taborder="1" left="40%" top="25" width="23" height="95%" background="url('theme://images/slt_WF_SplitterV.png') no-repeat center center" cursor="ew-resize" ondrag="divData_divSplitter_ondrag"/>
              <Div id="divDataLeft" taborder="0" left="0" top="0" bottom="0" right="divSplitter:6">
                <Layouts>
                  <Layout>
                    <Static id="sta01" taborder="0" text="분류코드" left="0" top="0" width="100%" height="35" cssclass="sta_TITLE_Bg"/>
                    <Grid id="objGrid" taborder="0" left="0" top="sta01:0" bottom="0" right="0" autofittype="none"/>
                  </Layout>
                </Layouts>
              </Div>
              <Div id="divDataRight" taborder="0" left="divSplitter:6" top="0" bottom="0" right="0">
                <Layouts>
                  <Layout>
                    <Static id="sta02" taborder="0" text="세부분류" left="0" top="0" width="100%" height="35" cssclass="sta_TITLE_Bg"/>
                    <Grid id="objGridSub" sub="true" taborder="0" left="0" top="sta02:0" bottom="0" right="0" autofittype="col"/>
                  </Layout>
                </Layouts>
              </Div>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	this.dsSearch.setColumn(0, "CD_CORP", this.AuthClient.CD_CORP);
	this.dsSearch.setColumn(0, "DS_CORP", this.AuthClient.DS_CORP);
	
	this.FormBtns.Select.click();
};

/************************************************************************
 * 버튼 설정 
 ************************************************************************/
this.fnSetButton = function() {
	// 서브 버튼 사용
	this.gfnUseSubBtn(true, this.divData, this.divData.form.divSplitter); // divSplitter sync
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결
 ************************************************************************/
this.fnSetExtendButton = function() {
	//this.btn1 = this.gfnFormButtonAdd("Detail", "fnDetail1");
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.dxGrid = this.divData.form.divDataLeft.form.objGrid;
	this.dxGridSub = this.divData.form.divDataRight.form.objGridSub;
	this.ccfCD_CORP = this.divSearch.form.ccfCD_CORP;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {	
	
	this.ccfCD_CORP.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
		
	this.gfnGridInit(this.dxGrid, this.dsList, "DH", "DHN_LSECLS");
	
	this.dxGrid.addEventHandler("onselectchanged", this.fnGrid_RowCellChanged, this);
	this.dsList.addEventHandler("canrowposchange", this.dsList_canrowposchange, this);
	this.dsList.addEventHandler("cancolumnchange", this.dsList_cancolumnchange, this);
	
	this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforeUserDataSetParam";
		
	this.gfnGridInit(this.dxGridSub, this.dsListSub, "DH", "DHN_LSECLSDTLS");
	this.dxGridSub.BeforeUserDataSetParam = "fnGridSub_BeforeUserDataSetParam";
	this.dsListSub.addEventHandler("cancolumnchange", this.dsListSub_cancolumnchange, this);
}

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {

	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("TY_WRK", "string");
	this.dsSelect.addColumn("CD_CORP", "string");
	this.dsSelect.addColumn("TY_LSECLS", "string");
	this.dsSelect.addColumn("CD_LSECLS", "string");
	this.dsSelect.addColumn("YN_USE", "string");

	this.dsSave = new Dataset();
	this.dsSave.addColumn("TY_WRK", "string");
	this.dsSave.addColumn("ID_USER", "string");
	this.dsSave.addColumn("CD_CORP", "string");
	this.dsSave.addColumn("CD_LSECLS", "string");
	this.dsSave.addColumn("DS_LSECLS", "string");
	this.dsSave.addColumn("TY_LSECLS", "string");
	this.dsSave.addColumn("YN_CST", "string");
	this.dsSave.addColumn("CD_ACCOUNT", "string");
	this.dsSave.addColumn("CD_UPLSECLS", "string");
	this.dsSave.addColumn("DS_RMKS", "string");
	this.dsSave.addColumn("YN_USE", "string");
	this.dsSave.addColumn("CD_ACCOUNT", "string");
	this.dsSave.addColumn("CD_ACCOUNT_ASST", "string");
	this.dsSave.addColumn("CD_ACCOUNT_DPRC", "string");
	this.dsSave.addColumn("CD_ACCOUNT_PV_NLQD", "string");
	this.dsSave.addColumn("CD_ACCOUNT_PV_LQD", "string");
	this.dsSave.addColumn("CD_ACCOUNT_OB_NLQD", "string");
	this.dsSave.addColumn("CD_ACCOUNT_OB_LQD", "string");
	this.dsSave.addColumn("YN_USE", "string");
	
	this.dsSelectSub = new Dataset();
	this.dsSelectSub.addColumn("TY_WRK", "string");
	this.dsSelectSub.addColumn("CD_CORP", "string");
	this.dsSelectSub.addColumn("TY_LSECLS", "string");
	this.dsSelectSub.addColumn("CD_LSECLS", "string");
	this.dsSelectSub.addColumn("YN_USE", "string");
	
	this.dsSaveSub = new Dataset();
	this.dsSaveSub.addColumn("TY_WRK", "string");
	this.dsSaveSub.addColumn("ID_USER", "string");
	this.dsSaveSub.addColumn("CD_CORP", "string");
	this.dsSaveSub.addColumn("CD_LSECLS", "string");
	this.dsSaveSub.addColumn("DS_LSECLS", "string");
	this.dsSaveSub.addColumn("TY_LSECLS", "string");
	this.dsSaveSub.addColumn("YN_CST", "string");
	this.dsSaveSub.addColumn("CD_ACCOUNT", "string");
	this.dsSaveSub.addColumn("CD_UPLSECLS", "string");
	this.dsSaveSub.addColumn("CD_TAX", "string");
	this.dsSaveSub.addColumn("DS_RMKS", "string");
	this.dsSaveSub.addColumn("YN_USE", "string");

}

/************************************************************************
 * 버튼 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if(!this.gfnSearchValidate(this.divSearch, this.dsSearch)) return false;
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	this.dsSelect.setColumn(0, "TY_WRK", "Q");
	this.dsSelect.setColumn(0, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
	this.dsSelect.setColumn(0, "TY_LSECLS", "C");
	this.dsSelect.setColumn(0, "CD_LSECLS", "");
	this.dsSelect.setColumn(0, "YN_USE", this.divSearch.form.ccboTY_REGIST.value);

	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	var nrow = this.gfnGridAdd(this.dxGrid);
	this.dsList.set_enableevent(false);
	this.dsList.setColumn(nrow, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
	this.dsList.setColumn(nrow, "TY_LSECLS", "C");
	this.dsList.setColumn(nrow, "YN_CST", "");
	this.dsList.setColumn(nrow, "CD_ACCOUNT", "");
	this.dsList.setColumn(nrow, "CD_UPLSECLS", "");
	this.dsList.setColumn(nrow, "YN_USE", "Y");
	this.dsList.set_enableevent(true);
}

/*
 *	삭제 버튼
 */ 
this.fnDel = function() {
	this.fnFormSub_control(true);
	this.gfnGridDel(this.dxGrid);
}

/*
 *	저장 버튼
 */ 
this.fnSave = function() {
	if (!this.gfnGridValidate(this.dxGrid)) return;

	this.dxGrid.updateToDataset();
	
	this.dsSave.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
		case "I":
		case "U":
		case "D":
			var nrow = this.dsSave.addRow();
			this.dsSave.setColumn(nrow, "TY_WRK", flag);
			this.dsSave.setColumn(nrow, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
			this.dsSave.setColumn(nrow, "CD_LSECLS", this.dsList.getColumn(i, "CD_LSECLS"));
			this.dsSave.setColumn(nrow, "DS_LSECLS", this.dsList.getColumn(i, "DS_LSECLS"));
			this.dsSave.setColumn(nrow, "TY_LSECLS", this.dsList.getColumn(i, "TY_LSECLS"));
			this.dsSave.setColumn(nrow, "CD_ACCOUNT", this.dsList.getColumn(i, "CD_ACCOUNT"));
			this.dsSave.setColumn(nrow, "YN_CST", this.dsList.getColumn(i, "YN_CST"));
			this.dsSave.setColumn(nrow, "CD_ACCOUNT", this.dsList.getColumn(i, "CD_ACCOUNT"));
			this.dsSave.setColumn(nrow, "CD_UPLSECLS", this.dsList.getColumn(i, "CD_UPLSECLS"));
			this.dsSave.setColumn(nrow, "DS_RMKS", this.dsList.getColumn(i, "DS_RMKS"));
			this.dsSave.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
			this.dsSave.setColumn(nrow, "CD_ACCOUNT", this.dsList.getColumn(i, "CD_ACCOUNT"));
			this.dsSave.setColumn(nrow, "CD_ACCOUNT_ASST", this.dsList.getColumn(i, "CD_ACCOUNT_ASST"));
			this.dsSave.setColumn(nrow, "CD_ACCOUNT_DPRC", this.dsList.getColumn(i, "CD_ACCOUNT_DPRC"));
			this.dsSave.setColumn(nrow, "CD_ACCOUNT_PV_NLQD", this.dsList.getColumn(i, "CD_ACCOUNT_PV_NLQD"));
			this.dsSave.setColumn(nrow, "CD_ACCOUNT_PV_LQD", this.dsList.getColumn(i, "CD_ACCOUNT_PV_LQD"));
			this.dsSave.setColumn(nrow, "CD_ACCOUNT_OB_NLQD", this.dsList.getColumn(i, "CD_ACCOUNT_OB_NLQD"));
			this.dsSave.setColumn(nrow, "CD_ACCOUNT_OB_LQD", this.dsList.getColumn(i, "CD_ACCOUNT_OB_LQD"));
			this.dsSave.setColumn(nrow, "YN_USE", this.dsList.getColumn(i, "YN_USE"));
			break;
		}
	}
	if (this.dsSave.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "save=dsSave";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */ 
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}
 
/************************************************************************
 * 서브 버튼 이벤트
 ************************************************************************/
this.fnSelectSub = function() {
	if (this.dxGrid.rowcount == 0 || this.dxGrid.currentrow < 0) return false;
	
	this.dsListSub.clearData();
	var cd_role = this.dsList.getColumn(this.dsList.rowposition, "CD_LSECLS");
	if (this.gfnIsNull(cd_role)) {
		return false;
	}
	
	this.gfnGridBeforeSelect(this.dxGridSub);
	
	this.dsSelectSub.clearData();
	this.dsSelectSub.addRow();
	this.dsSelectSub.setColumn(0, "TY_WRK", "Q");
	this.dsSelectSub.setColumn(0, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
	this.dsSelectSub.setColumn(0, "TY_LSECLS", "D");
	this.dsSelectSub.setColumn(0, "CD_LSECLS", cd_role);
	this.dsSelectSub.setColumn(0, "YN_USE", this.divSearch.form.ccboTY_REGIST.value);

	var strSvcId    = "detail";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "d_select=dsSelectSub";
	var outData     = "dsListSub=d_select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

this.fnAddSub = function() {
	this.fnForm_control(false);
	
	var nrow = this.gfnGridAdd(this.dxGridSub);
	this.dsListSub.set_enableevent(false);
	this.dsListSub.setColumn(nrow, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
	this.dsListSub.setColumn(nrow, "TY_LSECLS", "D");
	this.dsListSub.setColumn(nrow, "YN_CST", "N");
	this.dsListSub.setColumn(nrow, "CD_ACCOUNT", "");
	this.dsListSub.setColumn(nrow, "CD_UPLSECLS", this.dsList.getColumn(this.dsList.rowposition, "CD_LSECLS"));
	this.dsListSub.setColumn(nrow, "YN_USE", "Y");
	this.dsListSub.set_enableevent(true);
}

this.fnDelSub = function() {
	this.fnForm_control(false);
	this.gfnGridDel(this.dxGridSub);
}

this.fnSaveSub = function() {
	if (!this.gfnGridValidate(this.dxGridSub)) return;

	this.dxGridSub.updateToDataset();
	
	this.dsSaveSub.clearData();
	
	var cd_role = this.dsList.getColumn(this.dsList.rowposition, "CD_LSECLS");
	for (var i = 0; i < this.dsListSub.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsListSub, i);
		switch(flag) {
			case "I":	
			case "U":
			case "D":
				var nrow = this.dsSaveSub.addRow();
				this.dsSaveSub.setColumn(nrow, "TY_WRK", flag);
				this.dsSaveSub.setColumn(nrow, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
				this.dsSaveSub.setColumn(nrow, "CD_LSECLS", this.dsListSub.getColumn(i, "CD_LSECLS"));
				this.dsSaveSub.setColumn(nrow, "DS_LSECLS", this.dsListSub.getColumn(i, "DS_LSECLS"));
				this.dsSaveSub.setColumn(nrow, "TY_LSECLS", this.dsListSub.getColumn(i, "TY_LSECLS"));
				this.dsSaveSub.setColumn(nrow, "CD_ACCOUNT", this.dsListSub.getColumn(i, "CD_ACCOUNT"));
				this.dsSaveSub.setColumn(nrow, "YN_CST", this.dsListSub.getColumn(i, "YN_CST"));
				this.dsSaveSub.setColumn(nrow, "CD_ACCOUNT", this.dsListSub.getColumn(i, "CD_ACCOUNT"));
				this.dsSaveSub.setColumn(nrow, "CD_UPLSECLS", this.dsListSub.getColumn(i, "CD_UPLSECLS"));
				this.dsSaveSub.setColumn(nrow, "CD_TAX", this.dsListSub.getColumn(i, "CD_TAX"));
				this.dsSaveSub.setColumn(nrow, "DS_RMKS", this.dsListSub.getColumn(i, "DS_RMKS"));
				this.dsSaveSub.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
				this.dsSaveSub.setColumn(nrow, "YN_USE", this.dsListSub.getColumn(i, "YN_USE"));
				break;
		}
	}
	
	if (this.dsSaveSub.rowcount == 0) return;
		
	var strSvcId    = "savesub";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "d_save=dsSaveSub";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
 	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
 						strSvcType , 	// transaction을 요청할 구분
 						inProc,			// Procedure 정보 Dataset 이름
 						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
 						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
 						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
 						callBackFnc); // 통신방법 정의 [생략가능]
}

this.fnExcelSub = function() {
	this.gfnExcelExport(this.dxGridSub);
}

/************************************************************************
 * Validate
 ************************************************************************/

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);
		this.fnFormSub_control(true);
	}
	else if (svcID == "detail") {
		this.gfnGridAfterSelect(this.dxGridSub);
		this.fnForm_control(true);
	}
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "savesub") {
		if (errorCode == 0) {
			this.FormBtns.SubSelect.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {	
	if (id == "ccfCD_CORP") {
		dsUserParam.setColumn(nrow, "ID_SABUN", this.AuthClient.ID_USER);
	} 
	return true;
};

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
this.fnGrid_RowCellChanged = function(obj:nexacro.Grid,e:nexacro.GridSelectEventInfo)
{
	if ((obj.oldrow > -1 && obj.oldrow == e.row)
		|| (obj.oldrow == -1 && e.oldrow != e.row)) {
		this.FormBtns.SubSelect.click();
		obj.oldrow = -1;
	}
};

this.dsList_canrowposchange = function(obj:nexacro.NormalDataset,e:nexacro.DSRowPosChangeEventInfo) {
	var can_rowchange = true;
	for (var i = 0; i < this.dsListSub.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsListSub, i);
		if (flag == "I" || flag == "U" || flag == "D") {
			can_rowchange = false;
			break;
		}
	}
	if(!can_rowchange) {
		this._row = e.newrow;
		this.gfnConfirm("변경된 데이터가 있습니다.\r\n\n자료 저장 후 이동하시겠습니까?", "dsList_canrowposchange_callback");
	}
	return can_rowchange;
}

this.dsList_canrowposchange_callback = function(strId, val) 
{
	if(val == true) {
		this.fnSaveSub();
		this.dsList.set_enableevent(false);
		this.dsList.set_rowposition(this._row);
		this.dsList.set_enableevent(true);
	} else {
		this.dsList.set_enableevent(false);
		this.dsList.set_rowposition(this._row);
		this.dsList.set_enableevent(true);
	}
}

this.dsListSub_cancolumnchange = function (obj:nexacro.NormalDataset,e:nexacro.DSRowPosChangeEventInfo) {
	
	this.fnForm_control(false);
}

this.dsList_cancolumnchange = function (obj:nexacro.NormalDataset,e:nexacro.DSRowPosChangeEventInfo) {
	
	this.fnFormSub_control(false);
}

this.fnForm_control = function(val) {
	this.dxGrid.set_enable(val);
	this.FormBtns.Add.set_enableevent(val);
	this.FormBtns.Del.set_enableevent(val);
}

this.fnFormSub_control = function(val) {
	this.dxGridSub.set_enable(val);
	this.FormBtns.SubAdd.set_enableevent(val);
	this.FormBtns.SubDel.set_enableevent(val);
}

this.fnGrid_BeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	switch(id) {		
	
	case "DHX_CFACNT_LESASST_DPRC":
	case "DHX_CFACNT_LESASST_ASST":
	case "DHX_CFACNT_LESASST_PV_NLQD":
	case "DHX_CFACNT_LESASST_PV_LQD":
	case "DHX_CFACNT_LESASST_OB_NLQD":
	case "DHX_CFACNT_LESASST_OB_LQD":
		dsUserParam.setColumn(nrow, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
		dsUserParam.setColumn(nrow, "YN_CST", "N");
		break;

	case "DHX_CFACNT_LESASST":
		dsUserParam.setColumn(nrow, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
		dsUserParam.setColumn(nrow, "YN_CST", "Y");
		
		break;
	}
	return true;
};

/*
 *	서브 그리드 코드파인드
 */ 
this.fnGridSub_BeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	switch(id) {
	case "DHX_CFACNT_LESASST" :
		dsUserParam.setColumn(nrow, "YN_CST", this.dsListSub.getColumn(this.dsListSub.rowposition, "YN_CST"));
		dsUserParam.setColumn(nrow, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
		break;
/*		
	case "DHX_CFTAX_VAT" :
		dsUserParam.setColumn(nrow, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
		dsUserParam.setColumn(nrow, "TY_SALEBUY", "I");
		break;
*/
	case "DZX_CFCODE_COM_V10" :
		dsUserParam.setColumn(nrow, "CD_SYSTEM" , "DH");
		dsUserParam.setColumn(nrow, "CD_TYPE" , "V10");
		break;
	}	
 	
	return true;
}

/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.fnSearchInit = function(obj,e) {
	if(e == null || (e.pretext != e.posttext)) {
		this.gfnSetFormStatus(this);
		this.gfnGridClear(this.dxGrid);
		this.gfnGridClear(this.dxGridSub);
	}
}

this.divData_ondragmove = function(obj:nexacro.Div,e:nexacro.DragEventInfo) {
	if(e.userdata == "splitter") {
		this.divData.form.divSplitter.set_left(e.clientx);
		this.divData.form.resetScroll();
	}
};

this.divData_divSplitter_ondrag = function(obj:nexacro.Div,e:nexacro.DragEventInfo)
{
	e.set_userdata("splitter");
	return true;
};

this.divSearch_ccboTY_REGIST_onitemchanged = function(obj:nexacro.Combo,e:nexacro.ItemChangeEventInfo)
{	
	this.gfnSetFormStatus(this);	// 폼상태 초기화
	this.gfnGridClear(this.dxGrid);	
	this.gfnGridClear(this.dxGridSub);		
};

this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
		this.gfnGridClear(this.dxGridSub);
	}
};
]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DHNPR_LSECLS_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">save</Col>
            <Col id="SP">DHNPR_LSECLS_SAVE</Col>
          </Row>
          <Row>
            <Col id="TARGET">d_select</Col>
            <Col id="SP">DHNPR_LSECLS_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">d_save</Col>
            <Col id="SP">DHNPR_LSECLS_SAVE</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsListSub"/>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_CORP" type="STRING" size="256"/>
          <Column id="DS_CORP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CD_CORP"/>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsTY_REGIST">
        <ColumnInfo>
          <Column id="CODE" type="STRING" size="256"/>
          <Column id="VALUE" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="VALUE">전체</Col>
            <Col id="CODE"/>
          </Row>
          <Row>
            <Col id="CODE">Y</Col>
            <Col id="VALUE">사용</Col>
          </Row>
          <Row>
            <Col id="CODE">N</Col>
            <Col id="VALUE">미사용</Col>
          </Row>
        </Rows>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfCD_CORP.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_CORP"/>
      <BindItem id="item1" compid="divSearch.form.ccfCD_CORP.form.DSTextBox" propid="value" datasetid="dsSearch" columnid="DS_CORP"/>
    </Bind>
  </Form>
</FDL>
