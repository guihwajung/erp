<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="계정매핑관리" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg" formscrolltype="none">
          <Layouts>
            <Layout>
              <Radio id="rdo00" taborder="2" left="0.0" top="10.0" width="280" height="24.0"/>
              <Static id="sta00" taborder="1" text="조회" left="rdo00:0.0" top="10.0" width="66.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Edit id="txtSEARCH" taborder="3" left="sta00:0.0" top="10.0" width="140" height="24.0"/>
              <Combo id="ccboCD_NATION" taborder="1" left="txtSEARCH:0.0" top="10.0" width="100" height="24.0" innerdataset="dsCD_NATION" datacolumn="DS_CODE" codecolumn="CD_CODE" value="" index="-1" text=""/>
              <Static id="sta01" taborder="4" text="국가" left="ccboCD_NATION:0.0" top="10.0" width="66.0" height="24.0" cssclass="sta_WF_SchLabel"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	this.fnSetCombo();
	
	this.divSearch.form.ccboCD_NATION.set_value("");
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
	// Select, Add, Del, Save, Excel, Print
	// SubSelect, SubAdd, SubDel, SuubSave, SubExcel

}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {

};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.dxGrid = this.divData.form.objGrid;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	// 그리드 초기화
	this.gfnGridInit(this.dxGrid, this.dsList, "DH", "DHZ_ACNT_MAPPING");

	// 그리드 코드파인드 설정
	this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforeUserDataSetParam";
	
	//검색조건 변경 이벤트
	this.dsSearch.addEventHandler("onvaluechanged", this.dsSearch_Valuechanged, this);
};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {

	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_NATION", "string");	//국가
	this.dsSelect.addColumn("SEARCH" , "string");	//조회명

	this.dsInsert = new Dataset();
	this.dsInsert.addColumn("CD_ACCOUNT", "string");	//부영계정코드
	this.dsInsert.addColumn("CD_NATION", "string");		//국가
	this.dsInsert.addColumn("CD_ACCOUNT_N", "string");	//계정코드
	this.dsInsert.addColumn("DS_ACCOUNT_N", "string");	//계정코드명
	this.dsInsert.addColumn("DS_REM", "string");		//비고
	this.dsInsert.addColumn("ID_INSERT", "string");		//등록자

	this.dsUpdate = new Dataset();
	this.dsUpdate.addColumn("CD_ACCOUNT", "string");
	this.dsUpdate.addColumn("CD_NATION", "string");
	this.dsUpdate.addColumn("CD_ACCOUNT_N", "string");
	this.dsUpdate.addColumn("DS_ACCOUNT_N", "string");
	this.dsUpdate.addColumn("DS_REM", "string");
	this.dsUpdate.addColumn("ID_UPDATE", "string");		

	this.dsDelete = new Dataset();
	this.dsDelete.addColumn("CD_ACCOUNT", "string");
	this.dsDelete.addColumn("CD_NATION", "string");
	this.dsDelete.addColumn("CD_ACCOUNT_N", "string");
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	//if (!this.fnSelectValidate()) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	
	this.dsSelect.setColumn(0, "CD_NATION", this.divSearch.form.ccboCD_NATION.value);
	this.dsSelect.setColumn(0, "SEARCH", this.divSearch.form.txtSEARCH.text);
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	var nrow = this.gfnGridAdd(this.dxGrid);

}

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}

/*
 *	저장 버튼
 */
this.fnSave = function() {
	// 그리드 필수항목 체크
	if (!this.gfnGridValidate(this.dxGrid)) return;	

	this.dxGrid.updateToDataset();
	
	this.dsInsert.clearData();
	this.dsUpdate.clearData();
	this.dsDelete.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "I":
				var nrow = this.dsInsert.addRow();
				this.dsInsert.setColumn(nrow, "CD_ACCOUNT"  , this.dsList.getColumn(i, "CD_ACCOUNT"));		//부영계정코드
				this.dsInsert.setColumn(nrow, "CD_NATION"   , this.dsList.getColumn(i, "CD_NATION"));		//국가코드
				this.dsInsert.setColumn(nrow, "CD_ACCOUNT_N", this.dsList.getColumn(i, "CD_ACCOUNT_N"));	//계정코드
				this.dsInsert.setColumn(nrow, "DS_ACCOUNT_N", this.dsList.getColumn(i, "DS_ACCOUNT_N"));	//계정명
				this.dsInsert.setColumn(nrow, "DS_REM"      , this.dsList.getColumn(i, "DS_REM"));			//비고
				this.dsInsert.setColumn(nrow, "ID_INSERT"   , this.AuthClient.ID_USER);
				break;
			case "U":
				var nrow = this.dsUpdate.addRow();
				this.dsUpdate.setColumn(nrow, "CD_ACCOUNT"  , this.dsList.getColumn(i, "CD_ACCOUNT"));		//부영계정코드
				this.dsUpdate.setColumn(nrow, "CD_NATION"   , this.dsList.getColumn(i, "CD_NATION"));		//국가코드
				this.dsUpdate.setColumn(nrow, "CD_ACCOUNT_N", this.dsList.getColumn(i, "CD_ACCOUNT_N"));	//계정코드
				this.dsUpdate.setColumn(nrow, "DS_ACCOUNT_N", this.dsList.getColumn(i, "DS_ACCOUNT_N"));	//계정명
				this.dsUpdate.setColumn(nrow, "DS_REM"      , this.dsList.getColumn(i, "DS_REM"));			//비고
				this.dsUpdate.setColumn(nrow, "ID_UPDATE"   , this.AuthClient.ID_USER);
				break;
			case "D":
				var nrow = this.dsDelete.addRow();
				this.dsDelete.setColumn(nrow, "CD_ACCOUNT"  , this.dsList.getColumn(i, "CD_ACCOUNT"));		//부영계정코드
				this.dsDelete.setColumn(nrow, "CD_NATION"   , this.dsList.getColumn(i, "CD_NATION"));		//국가코드
				this.dsDelete.setColumn(nrow, "CD_ACCOUNT_N", this.dsList.getColumn(i, "CD_ACCOUNT_N"));	//계정코드
				break;
		}
	}
	
	if (this.dsInsert.rowcount == 0 && this.dsUpdate.rowcount == 0 && this.dsDelete.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "insert=dsInsert update=dsUpdate delete=dsDelete";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {
	var validate = true;

	return validate;
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);	
	} else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	} else if(svcID == "combo") {
		if (errorCode == 0) {
			var nRow = this.dsCD_NATION.insertRow(0);
			this.dsCD_NATION.setColumn(nRow, "CD_CODE", "");
			this.dsCD_NATION.setColumn(nRow, "DS_CODE", "전체");
		}
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/


/************************************************************************
 * 그리드 이벤트
 ************************************************************************/

this.fnGrid_BeforeUserDataSetParam = function(id, dsUserParam, nrow) {	
	// 그리드에서 코드파인드 id는 그리드셋팅의 코드파인드 식별ID
 	if (id == "DHX_CFACCOUNT") {
		dsUserParam.setColumn(nrow, "YN_SLIP", "Y");
 	}
	return true;
}

/************************************************************************
 * 기타 이벤트
 ************************************************************************/

this.fnSetCombo = function() {
	
	this.dsCombo = new Dataset();
	this.dsCombo.addColumn("CD_SYSTEM", "string");
	this.dsCombo.addColumn("CD_TYPE", "string");
	
	this.dsCombo.addRow();
	this.dsCombo.setColumn(0, "CD_SYSTEM", "DH");
	this.dsCombo.setColumn(0, "CD_TYPE"  , "A04");	
	
	var strSvcId    = "combo";
	var strSvcType  = "select";
	var inProc		= "_dsProc";
	var inData      = "combo=dsCombo";
	var outData     = "dsCD_NATION=combo0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
};

 this.dsSearch_Valuechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
	}
};

]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DHZPR_ACNT_MAPPING_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">insert</Col>
            <Col id="SP">DHZPR_ACNT_MAPPING_INSERT</Col>
          </Row>
          <Row>
            <Col id="TARGET">update</Col>
            <Col id="SP">DHZPR_ACNT_MAPPING_UPDATE</Col>
          </Row>
          <Row>
            <Col id="TARGET">delete</Col>
            <Col id="SP">DHZPR_ACNT_MAPPING_DELETE</Col>
          </Row>
          <Row>
            <Col id="TARGET">combo</Col>
            <Col id="SP">DZXPR_COMBO_SELECT</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsCD_NATION"/>
      <Dataset id="dsSearch">
        <ColumnInfo>
          <Column id="CD_NATION" type="STRING" size="256"/>
          <Column id="SEARCH" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccboCD_NATION" propid="value" datasetid="dsSearch" columnid="CD_NATION"/>
      <BindItem id="item1" compid="divSearch.form.txtSEARCH" propid="value" datasetid="dsSearch" columnid="SEARCH"/>
    </Bind>
  </Form>
</FDL>
