<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="원가배분사업지등록" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg" formscrolltype="none">
          <Layouts>
            <Layout>
              <Static id="sta00" taborder="0" text="법인코드" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfCD_CORP" CDTextWidth="70" taborder="1" left="sta00:0.0" top="10.0" width="269" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
              <Static id="sta01" taborder="3" text="사업지" left="ccfCD_CORP:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Div id="ccfCD_DEPT" CDTextWidth="70" taborder="2" left="sta01:0.0" top="10.0" width="300" height="24.0" url="cmm::cmmCodeFind.xfdl" text=""/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	this.ccfCD_CORP.setFocus();

	//법인코드 세션에 코드로 셋팅
	this.ccfCD_CORP.form.DSTextBox.set_value(this.AuthClient.DS_CORP); 
	this.ccfCD_CORP.form.CDTextBox.set_value(this.AuthClient.CD_CORP);	
	
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
	// Select, Add, Del, Save, Excel, Print
	// SubSelect, SubAdd, SubDel, SuubSave, SubExcel

}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btnCostDiv    = this.gfnFormButtonAdd("CostDiv", "fnCostDiv"); 		//원가배분 버튼
	this.btnSearchSlip = this.gfnFormButtonAdd("SearchSlip", "fnSearchSlip"); 	//전표조회 버튼
	this.btnIssueSlip  = this.gfnFormButtonAdd("IssueSlip" , "fnIssueSlip"); 	//전표발행 버튼
	this.btnCancelSlip = this.gfnFormButtonAdd("CancelSlip", "fnCancelSlip"); 	//전표취소 버튼
	this.btnOpenForm   = this.gfnFormButtonAdd("OpenForm", "fnOpenForm"); 		//현장진행관리 버튼
	this.btnCostCancel = this.gfnFormButtonAdd("CostCancel", "fnCostCancel");	//배분취소
	
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.ccfCD_CORP = this.divSearch.form.ccfCD_CORP;
	this.ccfCD_DEPT = this.divSearch.form.ccfCD_DEPT;
	this.dxGrid = this.divData.form.objGrid;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	this.ccfCD_CORP.CodeFindName = "DHX_CFCORP";
	this.ccfCD_CORP.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.ccfCD_CORP.AfterCDTextChanged = "fnAfterCDTextChanged";
	this.ccfCD_DEPT.CodeFindName = "DHX_CFACNTUNIT";
	this.ccfCD_DEPT.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	
	// 그리드 초기화
	this.gfnGridInit(this.dxGrid, this.dsList, "DH", "DHA_COST_SITE");
	this.dxGrid.set_selecttype("cell");	
	
	//그리드 코드파인더 이벤트
	this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforeUserDataSetParam";
	this.dxGrid.AfterCDTextChanged     = "fnGrid_AfterCDTextChanged";
	
	//데이터셋 이벤트
	this.dsList.addEventHandler("onrowposchanged", this.dsList_RowposChanged, this);
	this.dsList.addEventHandler("oncolumnchanged", this.dsList_ColumnChanged, this);
	
	//검색조건 변경 이벤트
	this.dsSearch.addEventHandler("onvaluechanged", this.dsSearch_Valuechanged, this);
	
	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "CHK"), "displaytype", "expr:dataset.parent.gfnIsNull(CD_TRADE) ? 'checkboxcontrol' : 'none'");
	this.dxGrid.setCellProperty("body", this.dxGrid.getBindCellIndex("body", "CHK"), "edittype", "expr:dataset.parent.gfnIsNull(CD_TRADE) ? 'checkbox' : 'none'");
};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {

	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_CORP", "string");
	this.dsSelect.addColumn("CD_DEPT", "string");
	
	this.dsInsert = new Dataset();
	this.dsInsert.addColumn("CD_CORP"			, "string");			
	this.dsInsert.addColumn("CD_DEPT"			, "string");			
	this.dsInsert.addColumn("TY_GUBUN"			, "string");			
	this.dsInsert.addColumn("AM_APT_BUIDING"	, "bigdecimal");	
	this.dsInsert.addColumn("AM_APT_LAND"		, "bigdecimal");	
	this.dsInsert.addColumn("AM_STORE_BUIDING"	, "bigdecimal");
	this.dsInsert.addColumn("AM_STORE_LAND"		, "bigdecimal");
// 	this.dsInsert.addColumn("CT_APT"			, "bigdecimal");
// 	this.dsInsert.addColumn("CT_STORE"			, "bigdecimal");
// 	this.dsInsert.addColumn("YN_DIV"			, "string");
// 	this.dsInsert.addColumn("DT_DIV"			, "string");
	this.dsInsert.addColumn("YM_MAGAM"			, "string");
	this.dsInsert.addColumn("ID_USER"			, "string");

	this.dsUpdate = new Dataset();
	this.dsUpdate.addColumn("CD_CORP"			, "string");			
	this.dsUpdate.addColumn("CD_DEPT"			, "string");			
	this.dsUpdate.addColumn("TY_GUBUN"			, "string");			
	this.dsUpdate.addColumn("AM_APT_BUIDING"	, "bigdecimal");	
	this.dsUpdate.addColumn("AM_APT_LAND"		, "bigdecimal");	
	this.dsUpdate.addColumn("AM_STORE_BUIDING"	, "bigdecimal");
	this.dsUpdate.addColumn("AM_STORE_LAND"		, "bigdecimal");
// 	this.dsUpdate.addColumn("CT_APT"			, "bigdecimal");
// 	this.dsUpdate.addColumn("CT_STORE"			, "bigdecimal");
// 	this.dsUpdate.addColumn("YN_DIV"			, "string");
// 	this.dsUpdate.addColumn("DT_DIV"			, "string");
	this.dsUpdate.addColumn("YM_MAGAM"			, "string");
	this.dsUpdate.addColumn("ID_USER"			, "string");			

	this.dsDelete = new Dataset();	
	this.dsDelete.addColumn("CD_CORP"	, "string");
	this.dsDelete.addColumn("CD_DEPT"	, "string");
	
	this.dsIssueSlip = new Dataset();	
	this.dsIssueSlip.addColumn("CD_CORP"	, "string");
	this.dsIssueSlip.addColumn("CD_DEPT"	, "string");
	this.dsIssueSlip.addColumn("CD_SITE_BH"	, "string");
	this.dsIssueSlip.addColumn("ID_TRANS"	, "string");
	
	this.dsCancelSlip = new Dataset();	
	this.dsCancelSlip.addColumn("CD_TRADE"	, "string");
	
	this.dsMagamSelect = new Dataset();	
	this.dsMagamSelect.addColumn("CD_DEPT"	, "string");
	this.dsMagamSelect.addColumn("TY_TYPE"	, "string");
	
	this.dsCostCancel = new Dataset();	
	this.dsCostCancel.addColumn("CD_CORP"	, "string");
	this.dsCostCancel.addColumn("CD_DEPT"	, "string");
	this.dsCostCancel.addColumn("TY_GUBUN"	, "string");

}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	
	this.dsSelect.setColumn(0, "CD_CORP"	, this.ccfCD_CORP.form.CDTextBox.value);
	this.dsSelect.setColumn(0, "CD_DEPT"	, this.ccfCD_DEPT.form.CDTextBox.value);
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	var nRow = this.gfnGridAdd(this.dxGrid);
	
	this.dsList.setColumn(nRow, "CD_CORP", this.ccfCD_CORP.form.CDTextBox.value);
}

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}

/*
 *	저장 버튼
 */
this.fnSave = function() {
	// 그리드 필수항목 체크
	if (!this.gfnGridValidate(this.dxGrid)) return;	

	this.dxGrid.updateToDataset();
	
	this.dsInsert.clearData();
	this.dsUpdate.clearData();
	this.dsDelete.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "I":
				var nrow = this.dsInsert.addRow();
				this.dsInsert.setColumn(nrow, "CD_CORP"  			, this.dsList.getColumn(i, "CD_CORP"));				//법인코드
				this.dsInsert.setColumn(nrow, "CD_DEPT"  			, this.dsList.getColumn(i, "CD_DEPT"));				//사업지코드
				this.dsInsert.setColumn(nrow, "TY_GUBUN"  			, this.dsList.getColumn(i, "TY_GUBUN"));			//구분
				this.dsInsert.setColumn(nrow, "AM_APT_BUIDING"  	, this.dsList.getColumn(i, "AM_APT_BUIDING"));		//아파트(건축비)
				this.dsInsert.setColumn(nrow, "AM_APT_LAND"   		, this.dsList.getColumn(i, "AM_APT_LAND"));			//아파트(대지비)
				this.dsInsert.setColumn(nrow, "AM_STORE_BUIDING"   	, this.dsList.getColumn(i, "AM_STORE_BUIDING"));	//상가(건축비)
				this.dsInsert.setColumn(nrow, "AM_STORE_LAND"   	, this.dsList.getColumn(i, "AM_STORE_LAND"));		//상가(대지비)
// 				this.dsInsert.setColumn(nrow, "CT_APT"   			, this.dsList.getColumn(i, "CT_APT"));				//아파트 세대수
// 				this.dsInsert.setColumn(nrow, "CT_STORE"   			, this.dsList.getColumn(i, "CT_STORE"));			//상가수
// 				this.dsInsert.setColumn(nrow, "YN_DIV"   			, this.dsList.getColumn(i, "YN_DIV"));				//배분여부
// 				this.dsInsert.setColumn(nrow, "DT_DIV"   			, this.dsList.getColumn(i, "DT_DIV"));				//배분일자
				this.dsInsert.setColumn(nrow, "YM_MAGAM"   			, this.dsList.getColumn(i, "YM_MAGAM"));			//결산년월
				this.dsInsert.setColumn(nrow, "ID_USER"  			, this.AuthClient.ID_USER);							//사용자 아이디
				break;
			case "U":
				var nrow = this.dsUpdate.addRow();
				this.dsUpdate.setColumn(nrow, "CD_CORP"  			, this.dsList.getColumn(i, "CD_CORP"));				//법인코드
				this.dsUpdate.setColumn(nrow, "CD_DEPT"  			, this.dsList.getColumn(i, "CD_DEPT"));				//사업지코드
				this.dsUpdate.setColumn(nrow, "TY_GUBUN"  			, this.dsList.getColumn(i, "TY_GUBUN"));			//구분
				this.dsUpdate.setColumn(nrow, "AM_APT_BUIDING"  	, this.dsList.getColumn(i, "AM_APT_BUIDING"));		//아파트(건축비)
				this.dsUpdate.setColumn(nrow, "AM_APT_LAND"   		, this.dsList.getColumn(i, "AM_APT_LAND"));			//아파트(대지비)
				this.dsUpdate.setColumn(nrow, "AM_STORE_BUIDING"   	, this.dsList.getColumn(i, "AM_STORE_BUIDING"));	//상가(건축비)
				this.dsUpdate.setColumn(nrow, "AM_STORE_LAND"   	, this.dsList.getColumn(i, "AM_STORE_LAND"));		//상가(대지비)
// 				this.dsUpdate.setColumn(nrow, "CT_APT"   			, this.dsList.getColumn(i, "CT_APT"));				//아파트 세대수
// 				this.dsUpdate.setColumn(nrow, "CT_STORE"   			, this.dsList.getColumn(i, "CT_STORE"));			//상가수
// 				this.dsUpdate.setColumn(nrow, "YN_DIV"   			, this.dsList.getColumn(i, "YN_DIV"));				//배분여부
// 				this.dsUpdate.setColumn(nrow, "DT_DIV"   			, this.dsList.getColumn(i, "DT_DIV"));				//배분일자
				this.dsUpdate.setColumn(nrow, "YM_MAGAM"   			, this.dsList.getColumn(i, "YM_MAGAM"));			//결산년월
				this.dsUpdate.setColumn(nrow, "ID_USER"  			, this.AuthClient.ID_USER);							//사용자 아이디
				break;
			case "D":
				var nrow = this.dsDelete.addRow();
				this.dsDelete.setColumn(nrow, "CD_CORP"  , this.dsList.getColumn(i, "CD_CORP"));		//법인코드
				this.dsDelete.setColumn(nrow, "CD_DEPT"  , this.dsList.getColumn(i, "CD_DEPT"));		//부서코드
				break;
		}
	}
	
	if (this.dsInsert.rowcount == 0 && this.dsUpdate.rowcount == 0 && this.dsDelete.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "insert=dsInsert update=dsUpdate delete=dsDelete";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {
	var validate = true;

	if (this.gfnIsNull(this.ccfCD_CORP.form.CDTextBox.text)) {
		this.gfnAlert("법인코드가 입력되지 않았습니다.");
		this.ccfCD_CORP.form.CDTextBox.setFocus();
		validate = false;
	}
	
// 	if (this.gfnIsNull(this.gfnTrim(this.ccfCD_DEPT.form.CDTextBox.value))) {
// 		this.gfnAlert("사업지가 입력되지 않았습니다.");
// 		this.ccfCD_DEPT.form.CDTextBox.setFocus();
// 		return;
// 	}

	return validate;
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);
		
		if(this.dsList.rowcount > 0){
			if(this.gfnIsNull(this.dsList.getColumn(this.dsList.rowposition, "CD_TRADE"))){
				this.gfnSetEnable(this.btnCostDiv, true);
			}else{
				this.gfnSetEnable(this.btnCostDiv, false);
			}
		}
	} else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	} else if(svcID == "magamSelect") {	
		if(this.dsMagam.rowcount > 0){
			this.dsList.setColumn(this.dsList.rowposition, "AM_APT_BUIDING"	 	, this.dsMagam.getColumn(0, "AM_APT_BUILDING"));	//건축비(아파트)
			this.dsList.setColumn(this.dsList.rowposition, "AM_APT_LAND"	 	, this.dsMagam.getColumn(0, "AM_APT_LAND"));		//대지비(아파트)
			this.dsList.setColumn(this.dsList.rowposition, "AM_STORE_BUIDING"	, this.dsMagam.getColumn(0, "AM_SHOP_BUILDING"));	//건축비(상가)
			this.dsList.setColumn(this.dsList.rowposition, "AM_STORE_LAND"	 	, this.dsMagam.getColumn(0, "AM_SHOP_LAND"));		//대지비(상가)
		}
	}else if(svcID == "issueSlip"){	
		if (errorCode == 0) {
			this.gfnAlert("전표가 발행 되었습니다.");
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}else if(svcID == "cancelSlip"){	
		if (errorCode == 0) {
			this.gfnAlert("전표가 취소 되었습니다.");
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}else if(svcID == "costCancel"){	
		if (errorCode == 0) {
			this.gfnAlert("취소 되었습니다.");
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
		
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	if (id == "ccfCD_CORP") {
		dsUserParam.setColumn(nrow, "ID_SABUN", this.AuthClient.ID_USER);
	}

	if (id == "ccfCD_DEPT") {	//사업지
		var cdCorp = this.ccfCD_CORP.form.CDTextBox.text;
		if(this.gfnIsNull(cdCorp)){
			this.gfnAlert("법인코드를 먼저 선택하세요.");
			return false;
		}	
		dsUserParam.setColumn(nrow, "CD_DEPT_UPPER"	, "");					//상위부서
		dsUserParam.setColumn(nrow, "YN_SLIPACCEPT"	, "");					//전표발행여부
		dsUserParam.setColumn(nrow, "CD_CORP"		, cdCorp);				//법인코드
		dsUserParam.setColumn(nrow, "YN_USE"		, "Y");					//사용여부
		dsUserParam.setColumn(nrow, "GR_DEPT_ACNT"	, "02");				//현장/본사여부(02:현장)
	}
	return true;
}; 

this.fnAfterCDTextChanged = function(id, codeFindData) {

	switch(id) {
		case "ccfCD_CORP":	//법인코드
			this.ccfCD_DEPT.form.fnCodeFindClear();
		break;
	}
}

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
this.fnGrid_BeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	var cdCorp = this.dsList.getColumn(this.dsList.rowposition, "CD_CORP");
	switch(id) {
	case "DHX_CFACNTUNIT" :	//현장	
		dsUserParam.setColumn(nrow, "CD_DEPT_UPPER"	, "");			//상위부서
		dsUserParam.setColumn(nrow, "YN_SLIPACCEPT"	, "");			//전표발행여부
		dsUserParam.setColumn(nrow, "CD_CORP"		, cdCorp);		//법인코드
		dsUserParam.setColumn(nrow, "YN_USE"		, "Y");			//사용여부
		dsUserParam.setColumn(nrow, "GR_DEPT_ACNT"	, "02");			//현장/본사여부	
		
		break;
	}
	return true;
}

this.fnGrid_AfterCDTextChanged = function(id, codeFindData) {
	var arrData = codeFindData;

	switch(id) {
		case "DHX_CFACNTUNIT":	//현장

		break;

 	}
};

// 마감에 금액정보 조회
this.fnMaGamAmSelect = function (tyGubun)
{
	var cdDept = this.dsList.getColumn(this.dsList.rowposition, "CD_DEPT");
	
	this.dsMagamSelect.clearData();
	var nRow = this.dsMagamSelect.addRow();
	this.dsMagamSelect.setColumn(nRow, "CD_DEPT"  , cdDept);
	this.dsMagamSelect.setColumn(nRow, "TY_TYPE"  , tyGubun);
	
	var strSvcId    = "magamSelect";
	var strSvcType  = "select";
	var inProc		= "_dsProc";
	var inData      = "magamSelect=dsMagamSelect";
	var outData     = "dsMagam=magamSelect0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// trabsaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
};
/************************************************************************
 * 기타 이벤트
 ************************************************************************/

//원가배분 이동 처리
this.fnCostDiv = function (obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	if(!this.gfnGridIsRow(this.dxGrid)) {return false;}
	
	var param = {};
	
	param.CD_CORP 			= this.ccfCD_CORP.form.CDTextBox.value;									//법인코드
	param.DS_CORP 			= this.ccfCD_CORP.form.DSTextBox.value;									//법인명
	param.CD_DEPT 			= this.dsList.getColumn(this.dsList.rowposition, "CD_DEPT");			//현장코드
	param.DS_DEPT 			= this.dsList.getColumn(this.dsList.rowposition, "DS_DEPT");			//현장명
	param.AM_APT_BUIDING 	= this.dsList.getColumn(this.dsList.rowposition, "AM_APT_BUIDING");		//아파트 건축비
	param.AM_APT_LAND 		= this.dsList.getColumn(this.dsList.rowposition, "AM_APT_LAND");		//아파트 대지비
	param.AM_STORE_BUIDING 	= this.dsList.getColumn(this.dsList.rowposition, "AM_STORE_BUIDING");	//상가 건축비
	param.AM_STORE_LAND 	= this.dsList.getColumn(this.dsList.rowposition, "AM_STORE_LAND");		//상가 대지비
	
	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DHA_COST_DIV", "fnCostDivCallback", param);
	
};

this.fnCostDivCallback = function (strId, val)
{
	if(!this.gfnIsNull(val)){
		if(val.IsChange){
			this.FormBtns.Select.click();
		}
	}
};

//검색조건 변경 이벤트
this.dsSearch_Valuechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{	
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
	}
};

//전표발행 처리
this.fnIssueSlip = function (obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	if(this.dsList.getCaseCount("CHK == '1' && "+this.ucFlag+" != '#'") == 0){
		this.gfnAlert("데이터를 선택하세요.");
		return;
	}
	
	var chkNoCard = false, chkDtApproval = false, chkDsRem = false;
	var chkSave = false;
	for(var i=0;i<this.dsList.rowcount;i++){
		if(this.dsList.getColumn(i, "CHK") == "1" && this.dsList.getColumn(i, this.ucFlag) != "#"){
			if(this.gfnGetFlag(this.dsList, i) == "I" || this.gfnGetFlag(this.dsList, i) == "U" || this.gfnGetFlag(this.dsList, i) == "D"){
				chkSave = true;
			}
		}
	}
	
	if(chkSave){	//데이터 수정 체크
		this.gfnAlert("저장하지 않은 데이터가 존재합니다. 저장 후 발행해 주세요.");
		return;
	}	
	
	this.gfnConfirm("전표발행 하시겠습니까?", "fnIssueSlip_callback");
	
};

this.fnIssueSlip_callback = function(strId, val) 
{
	if(val == true) {
		this.dsIssueSlip.clearData();
		var nRow = this.dsIssueSlip.addRow();
		
		var arrCdDept = "";
		for(var r = 0; r < this.dsList.rowcount; r++) {
			if(this.dsList.getColumn(r, "CHK") == 1){
				arrCdDept += this.dsList.getColumn(r, "CD_DEPT")+",";
			}
		}	
		
		
		//처리할 데이터 담기
		this.dsIssueSlip.setColumn(nRow, "CD_CORP"	  , this.ccfCD_CORP.form.CDTextBox.value);
		this.dsIssueSlip.setColumn(nRow, "CD_DEPT" 	  , arrCdDept.substr(0,arrCdDept.length-1));
		this.dsIssueSlip.setColumn(nRow, "CD_SITE_BH" , this.AuthClient.CD_DEPT);
		this.dsIssueSlip.setColumn(nRow, "ID_TRANS"   , this.AuthClient.ID_USER);
		
		var strSvcId    = "issueSlip";
		var strSvcType  = "save";
		var inProc		= "_dsProc";
		var inData      = "issueSlip=dsIssueSlip";
		var outData     = "";
		var strArg      = "";
		var callBackFnc = "fnCallback";
		
		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
							strSvcType , 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
							callBackFnc); 	// 통신방법 정의 [생략가능]
	}
};

//전표취소 처리
this.fnCancelSlip = function (obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	if (this.gfnIsNull(this.gfnTrim(this.dsList.getColumn(this.dsList.rowposition, "CD_TRADE")))) {
		this.gfnAlert("전표번호는 필수입니다.");
		return;
	}
	
	this.gfnConfirm("전표를 취소하시겠습니까?", "fnCancelSlip_callback");
	
};

this.fnCancelSlip_callback = function(strId, val) 
{
	if(val == true) {
		this.dsCancelSlip.clearData();
		var nRow = this.dsCancelSlip.addRow();
		
		var cdTrade = this.dsList.getColumn(this.dsList.rowposition, "CD_TRADE");
		
		//처리할 데이터 담기
		this.dsCancelSlip.setColumn(nRow, "CD_TRADE" , cdTrade);
		
		var strSvcId    = "cancelSlip";
		var strSvcType  = "save";
		var inProc		= "_dsProc";
		var inData      = "cancelSlip=dsCancelSlip";
		var outData     = "";
		var strArg      = "";
		var callBackFnc = "fnCallback";
		
		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
							strSvcType , 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
							callBackFnc); 	// 통신방법 정의 [생략가능]
	}
};

//전표 조회 
this.fnSearchSlip = function (obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	if (this.gfnIsNull(this.gfnTrim(this.dsList.getColumn(this.dsList.rowposition, "CD_TRADE")))) {
		this.gfnAlert("전표번호는 필수입니다.");
		return;
	}
	
	var param = {};
	param.IUD_FLAG = "S";
	param.CD_TRADE = this.gfnTrim(this.dsList.getColumn(this.dsList.rowposition, "CD_TRADE"));
	this.gfnFormOpen("DHA", "DHA_ISSUESLIP", "fnPopupCallBack", param, this.getOffsetWidth(), this.getOffsetHeight());
	
};

//로우 변경 이벤트
this.dsList_RowposChanged = function(obj:nexacro.NormalDataset,e:nexacro.DSRowPosChangeEventInfo)
{
	if(this.gfnIsNull(obj.getColumn(e.newrow, "CD_TRADE"))){
		this.gfnSetEnable(this.btnCostDiv, true);
	}else{
		this.gfnSetEnable(this.btnCostDiv, false);
	}
};

this.dsList_ColumnChanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.columnid == "TY_GUBUN"){
		//현장코드,구분이 있을경우
		if(!this.gfnIsNull(e.newvalue) && !this.gfnIsNull(obj.getColumn(e.row, "CD_DEPT"))){
			this.fnMaGamAmSelect(e.newvalue);
		}
	}
};

//현장진행관리 오픈
this.fnOpenForm = function (obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	if(!this.gfnGridIsRow(this.dxGrid)) {return false;}

	var param = {};
	param.CD_CORP  = this.ccfCD_CORP.form.CDTextBox.value;
	param.DS_CORP  = this.ccfCD_CORP.form.DSTextBox.value;
	param.CD_DEPT  = this.dsList.getColumn(this.dsList.rowposition, "CD_DEPT");
	param.DS_DEPT  = this.dsList.getColumn(this.dsList.rowposition, "DS_DEPT");
	param.TY_GUBUN = this.dsList.getColumn(this.dsList.rowposition, "TY_GUBUN");

	this.gfnFormOpenNonAuth(this.FormInfo.CD_MODULE, "DHA_COST_SITE_DLG", "fnPopupCallback", param, 1230, 600);
};

//팝업 콜백
this.fnPopupCallback = function(svcID, val) {
	this.dsReturn.clearData();
 	if(!this.gfnIsNull(val)) {
		this.dsReturn.loadXML(val);
		
		trace("rowcount :: "+this.dsReturn.rowcount);
		
		this.dsList.set_enableevent(false);
		var rowPos = 1;
		for(var i =0;i<this.dsReturn.rowcount;i++){
			var sExpr = "CD_CORP =='"+this.dsReturn.getColumn(i, "CD_CORP")+"' && CD_DEPT =='"+this.dsReturn.getColumn(i, "CD_DEPT_ACNT")+"' && "+
			            "TY_GUBUN =='"+this.dsReturn.getColumn(i, "TY_GUBUN")+"' && YM_MAGAM =='"+this.dsReturn.getColumn(i, "DT_COST").substr(0,6)+"'";
			var fRow = this.dsList.findRowExpr(sExpr);	//중복 체크
			
			if(fRow == -1){
				var nRow = this.dsList.insertRow(rowPos);
				this.dsList.setColumn(nRow, this.ucFlag  , "I");	//상태값
				this.dsList.setColumn(nRow, "CD_CORP",  this.dsReturn.getColumn(i, "CD_CORP"));				//법인코드
				this.dsList.setColumn(nRow, "CD_DEPT",  this.dsReturn.getColumn(i, "CD_DEPT_ACNT"));		//현장코드
				this.dsList.setColumn(nRow, "DS_DEPT",  this.dsReturn.getColumn(i, "DS_DEPT_ACNT"));		//현장명
				this.dsList.setColumn(nRow, "TY_GUBUN", this.dsReturn.getColumn(i, "TY_GUBUN"));			//구분
				this.dsList.setColumn(nRow, "YM_MAGAM", this.dsReturn.getColumn(i, "DT_COST").substr(0,6));	//결산년월				
				this.dsList.setColumn(nRow, "AM_APT_BUIDING", this.dsReturn.getColumn(i, "AM_APART_BUILDING"));		//아파트 건축비
				this.dsList.setColumn(nRow, "AM_APT_LAND", this.dsReturn.getColumn(i, "AM_APART_LAND"));			//아파트 대지비
				this.dsList.setColumn(nRow, "AM_STORE_BUIDING", this.dsReturn.getColumn(i, "AM_SHOP_BUILDING"));	//상가 건축비
				this.dsList.setColumn(nRow, "AM_STORE_LAND", this.dsReturn.getColumn(i, "AM_SHOP_LAND"));			//상가 대지비
				rowPos++;
			}
		
		}
		
		this.dsList.set_enableevent(true);
		
		this.gfnSetFormStatus(this, "I");
	}	
};


this.fnCostCancel = function (obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	if(!this.gfnGridIsRow(this.dxGrid)) {return false;}
	
 	if (this.dsList.getColumn(this.dsList.rowposition, "YN_DIV") != "Y") {
 		this.gfnAlert("배분 처리된 데이터만 가능합니다.");
 		return;
 	}

 	if (this.gfnIsNull(this.gfnTrim(this.dsList.getColumn(this.dsList.rowposition, "CD_DEPT")))) {
 		this.gfnAlert("현장코드는 필수입니다.");
 		return;
 	}
	
	this.gfnConfirm("원가배분 취소하시겠습니까?", "fnCostCancel_callback");
};

this.fnCostCancel_callback = function(strId, val) 
{
	if(val == true) {
		this.dsCostCancel.clearData();
		var nRow = this.dsCostCancel.addRow();
		
		var cdDept  = this.dsList.getColumn(this.dsList.rowposition, "CD_DEPT");
		var tyGubun = this.dsList.getColumn(this.dsList.rowposition, "TY_GUBUN");
		
		//처리할 데이터 담기
		this.dsCostCancel.setColumn(nRow, "CD_CORP" , this.ccfCD_CORP.form.CDTextBox.value);
		this.dsCostCancel.setColumn(nRow, "CD_DEPT" , cdDept);
		this.dsCostCancel.setColumn(nRow, "TY_GUBUN", tyGubun);		
		
		var strSvcId    = "costCancel";
		var strSvcType  = "save";
		var inProc		= "_dsProc";
		var inData      = "costCancel=dsCostCancel";
		var outData     = "";
		var strArg      = "";
		var callBackFnc = "fnCallback";
		
		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
							strSvcType , 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
							callBackFnc); 	// 통신방법 정의 [생략가능]
	}
};]]></Script>
    <Objects>
      <Dataset id="dsList" oncolumnchanged="dsList_oncolumnchanged" onrowposchanged="dsList_onrowposchanged"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DHAPR_COST_SITE_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">insert</Col>
            <Col id="SP">DHAPR_COST_SITE_INSERT</Col>
          </Row>
          <Row>
            <Col id="TARGET">update</Col>
            <Col id="SP">DHAPR_COST_SITE_UPDATE</Col>
          </Row>
          <Row>
            <Col id="TARGET">delete</Col>
            <Col id="SP">DHAPR_COST_SITE_DELETE</Col>
          </Row>
          <Row>
            <Col id="TARGET">magamSelect</Col>
            <Col id="SP">DHAPR_COST_SITE_MAGAM_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">issueSlip</Col>
            <Col id="SP">DHAPR_COST_SITE_AUTOSLIP</Col>
          </Row>
          <Row>
            <Col id="TARGET">cancelSlip</Col>
            <Col id="SP">DHAPR_COST_SITE_CANCELSLIP</Col>
          </Row>
          <Row>
            <Col id="TARGET">costCancel</Col>
            <Col id="SP">DHAPR_COST_SITE_CANCEL</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch">
        <ColumnInfo>
          <Column id="CD_CORP" type="STRING" size="256"/>
          <Column id="CD_DEPT" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CD_CORP"/>
            <Col id="CD_DEPT"/>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsMagam"/>
      <Dataset id="dsReturn"/>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfCD_CORP.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_CORP"/>
      <BindItem id="item1" compid="divSearch.form.ccfCD_DEPT.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_DEPT"/>
    </Bind>
  </Form>
</FDL>
