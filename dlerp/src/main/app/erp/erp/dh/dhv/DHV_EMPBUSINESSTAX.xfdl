<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="지방소득세 종업원분" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg" formscrolltype="none">
          <Layouts>
            <Layout>
              <Static id="sta00" taborder="7" text="법인코드" left="0.0" top="10.0" width="118.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfCD_CORP" CDTextWidth="70" taborder="0" left="sta00:0.0" top="10.0" width="250" height="24.0" url="cmm::cmmCodeFind.xfdl" text=""/>
              <Static id="sta01" taborder="3" text="귀속부서" left="ccfCD_CORP:0.0" top="10.0" width="118.0" height="24.0" textDecoration="none" cssclass="sta_WF_SchLabel"/>
              <Div id="ccfCD_DEPT" CDTextWidth="70" taborder="1" left="sta01:0.0" top="10.0" width="250" height="24.0" url="cmm::cmmCodeFind.xfdl" text=""/>
              <Static id="staYM_WORK" taborder="6" text="회계년월" left="ccfCD_DEPT:0.0" top="10.0" width="118.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ctclDT_WORK" taborder="2" left="staYM_WORK:0.0" top="10.0" width="80" height="24.0" url="cmm::cmmCalMM.xfdl"/>
              <CheckBox id="chkYN_TAX" taborder="4" text="과세현장조회" left="ctclDT_WORK:0.0" top="10.0" width="98" height="24.0" falsevalue="N" truevalue="Y"/>
              <CheckBox id="chkYN_HIDE" taborder="5" text="요약보기" left="chkYN_TAX:0.0" top="10.0" width="98" height="24.0" falsevalue="N" truevalue="Y" onchanged="divSearch_chkYN_HIDE_onchanged"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Tab id="tabData" taborder="0" tabindex="0" left="0" top="0" bottom="0" right="0" canchange="divData_tabData_canchange">
                <Tabpages>
                  <Tabpage id="tab1" text="급여내역">
                    <Layouts>
                      <Layout>
                        <Grid id="objGrid" taborder="1" left="5" top="5" bottom="5" right="5"/>
                      </Layout>
                    </Layouts>
                  </Tabpage>
                  <Tabpage id="tab2" text="최종">
                    <Layouts>
                      <Layout>
                        <Grid id="objGrid2" taborder="1" left="5" top="5" bottom="5" right="5"/>
                      </Layout>
                    </Layouts>
                  </Tabpage>
                </Tabpages>
              </Tab>
              <Grid id="grdExport" taborder="1" left="468" top="40" width="326" height="154" visible="false"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	this.ccfCD_CORP.form.CDTextBox.setFocus();

	//부서
	//this.ccfCD_DEPT.form.CDTextBox.set_value(this.AuthClient.CD_DEPT);
	//this.ccfCD_DEPT.form.DSTextBox.set_value(this.AuthClient.DS_DEPT);
	//회계년월
	this.ctclDT_WORK.form.TextBox.set_value(this.gfnGetDate().substr(0,6));	
	
	//법인코드 세션에 코드로 셋팅
	this.ccfCD_CORP.form.CDTextBox.set_value(this.AuthClient.CD_CORP);
	this.ccfCD_CORP.form.DSTextBox.set_value(this.AuthClient.DS_CORP); 
	
	//요약보기 체크
	this.chkYN_HIDE.set_value("Y");
	this.fnSetGridColSize(0);
	
	
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
	// Select, Add, Del, Save, Excel, Print
	// SubSelect, SubAdd, SubDel, SuubSave, SubExcel
	//this.FormBtns.Select.set_enable(false);
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
 	this.btnDataCreate = this.gfnFormButtonAdd("DataCreate", "fnDataCreate");	//자료생성
	this.btnDataCalc   = this.gfnFormButtonAdd("DataCalc", "fnDataCalc");		//종업현황 계산
	this.btnDataExport = this.gfnFormButtonAdd("DataExport", "fnDataExport");		//신고파일생성
	
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.ccfCD_CORP  = this.divSearch.form.ccfCD_CORP;
	this.ccfCD_DEPT  = this.divSearch.form.ccfCD_DEPT;
	this.ctclDT_WORK = this.divSearch.form.ctclDT_WORK;
	this.chkYN_TAX   = this.divSearch.form.chkYN_TAX;
	this.chkYN_HIDE   = this.divSearch.form.chkYN_HIDE;
	
	this.dxGrid  = this.divData.form.tabData.tab1.form.objGrid;
	this.dxGrid2 = this.divData.form.tabData.tab2.form.objGrid2;
	this.dxGridExport = this.divData.form.grdExport;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	
	this.ccfCD_CORP.CodeFindName = "DHX_CFCORP";
	this.ccfCD_CORP.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.ccfCD_CORP.AfterCDTextChanged = "fnAfterCDTextChanged";
	
	this.ccfCD_DEPT.CodeFindName = "DHX_CFACNTUNIT";
	this.ccfCD_DEPT.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
		
	// 그리드 초기화
	this.gfnGridInit(this.dxGrid, this.dsList, "DH", "DHV_EMPBUSINESSTAX");
	this.gfnGridInit(this.dxGrid2, this.dsList2, "DH", "DHV_EMPBUSINESSTAX_TOTAL");
	
	//그리드 코드파인더 이벤트
	this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforeUserDataSetParam";
	
	this.dxGridExport.appendContentsRow("head");
	this.dxGridExport.appendContentsRow("body");
	this.dxGridExport.set_binddataset(this.dsExportB);
	
	//검색조건 변경 이벤트
	this.dsSearch.addEventHandler("onvaluechanged", this.dsSearch_Valuechanged, this);
};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {

	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_CORP", "string");
	this.dsSelect.addColumn("CD_DEPT", "string");
	this.dsSelect.addColumn("DT_WORK", "string");
	this.dsSelect.addColumn("YN_TAX", "string");
	
	this.dsUpdate = new Dataset();
	this.dsUpdate.addColumn("DT_WORK", "string");
	this.dsUpdate.addColumn("CD_DEPT_SELFACNT", "string");
	this.dsUpdate.addColumn("CD_DEPT", "string");
	this.dsUpdate.addColumn("CD_DEPT_TAX_EMP", "string");
	this.dsUpdate.addColumn("CD_DEPT_TAX_JUMIN", "string");
	this.dsUpdate.addColumn("ID_USER", "string");
	
	this.dsSpCall = new Dataset();
	this.dsSpCall.addColumn("CD_CORP", "string");
	this.dsSpCall.addColumn("DT_WORK", "string");
	this.dsSpCall.addColumn("ID_USER", "string");
	
	this.dsExport = new Dataset();
	this.dsExport.addColumn("CD_CORP", "string");
	this.dsExport.addColumn("CD_DEPT", "string");
	this.dsExport.addColumn("DT_WORK", "string");
	this.dsExport.addColumn("YN_TAX", "string");
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	
	this.dsSelect.setColumn(0, "CD_CORP"	, this.ccfCD_CORP.form.CDTextBox.value);
	this.dsSelect.setColumn(0, "CD_DEPT"	, this.ccfCD_DEPT.form.CDTextBox.value);
	this.dsSelect.setColumn(0, "DT_WORK"    , this.ctclDT_WORK.form.TextBox.value);
	this.dsSelect.setColumn(0, "YN_TAX"		, this.chkYN_TAX.value);
	
	
	var inData      = "";
	var outData     = "";
	switch(this.divData.form.tabData.tabindex) {
		case 0:
			this.gfnGridBeforeSelect(this.dxGrid);

			inData      = "select=dsSelect";
			outData     = "dsList=select0";
			
			break;
		case 1:
			this.gfnGridBeforeSelect(this.dxGrid2);
			
			inData      = "select2=dsSelect";
			outData     = "dsList2=select20";
			
			//그리드 정보 셋팅
			this.fnGridSetting();
			break;
	}
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {

}

/*
 *	삭제 버튼
 */
this.fnDel = function() {

}

/*
 *	저장 버튼
 */
this.fnSave = function() {

	if(this.divData.form.tabData.tabindex == 1) {
		this.gfnAlert("저장할 데이터가 없습니다.");
		return;
	}
	
	if (!this.gfnGridValidate(this.dxGrid)) return;	
	
	this.dxGrid.updateToDataset();
	
	this.dsUpdate.clearData();
		
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
				
			case "U":
				var nrow = this.dsUpdate.addRow();
				this.dsUpdate.setColumn(nrow, "DT_WORK"				, this.dsList.getColumn(i, "DT_SALARY"));
				this.dsUpdate.setColumn(nrow, "CD_DEPT_SELFACNT"	, this.dsList.getColumn(i, "CD_DEPT_SELFACNT"));
				this.dsUpdate.setColumn(nrow, "CD_DEPT"				, this.dsList.getColumn(i, "CD_DEPT"));
				this.dsUpdate.setColumn(nrow, "CD_DEPT_TAX_EMP" 	, this.dsList.getColumn(i, "CD_DEPT_TAX_EMP"));
				this.dsUpdate.setColumn(nrow, "CD_DEPT_TAX_JUMIN"	, this.dsList.getColumn(i, "CD_DEPT_TAX_JUMIN"));
				this.dsUpdate.setColumn(nrow, "ID_USER"				, this.AuthClient.ID_USER);
				break;
		}
	}
	
	if (this.dsUpdate.rowcount == 0) return;
	
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "update=dsUpdate";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	switch(this.divData.form.tabData.tabindex) {
		case 0:
			this.gfnExcelExport(this.dxGrid);
		break;
		case 1:
			this.gfnExcelExport(this.dxGrid2);
		break;
	}	
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {
	var validate = true;
	if (this.gfnIsNull(this.ccfCD_CORP.form.CDTextBox.text)) {
		this.gfnAlert("법인코드가 입력되지 않았습니다.");
		this.ccfCD_CORP.form.CDTextBox.setFocus();
		validate = false;
	}

	if (this.gfnIsNull(this.ctclDT_WORK.form.TextBox.value)) {
		this.gfnAlert("회계년월이 입력되지 않았습니다.");
		this.ctclDT_WORK.form.TextBox.setFocus();
		validate = false;
	}
	return validate;
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	switch(svcID) {
		case "select" :
			switch(this.divData.form.tabData.tabindex) {
				case 0:
					this.gfnGridAfterSelect(this.dxGrid);
					break;
				case 1:
					this.gfnGridAfterSelect(this.dxGrid2);
					break;
			}
				//trace("## saveXML :: "+this.dsList2.saveXML());
			break;
		case "save" :
			if (errorCode == 0) {
				this.FormBtns.Select.click();
			} else {
				this.gfnAlert(errorMsg);
			}	
			break;
		case "create":
			if (errorCode == 0) {
				this.gfnAlert("생성되었습니다.");
				this.FormBtns.Select.click();
			} else {
				this.gfnAlert(errorMsg);
			}
		break;
		case "dataCalc":
			if (errorCode == 0) {
				this.gfnAlert("처리되었습니다.");
				this.FormBtns.Select.click();
			} else {
				this.gfnAlert(errorMsg);
			}
		break;
		case "export":
			if (errorCode == 0) {
				this.fnExportFile();
			} else {
				this.gfnAlert(errorMsg);
			}
		break;
		
		
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	if (id == "ccfCD_CORP") {
		dsUserParam.setColumn(nrow, "ID_SABUN", this.AuthClient.ID_USER);
	}
	
	if (id == "ccfCD_DEPT") {
		var cdCorp = this.gfnTrim(this.ccfCD_CORP.form.CDTextBox.value);
		if(this.gfnIsNull(cdCorp)){
			this.gfnAlert("법인코드를 먼저 선택하세요.");
			return false;
		}

		dsUserParam.setColumn(nrow, "CD_DEPT_UPPER"	, "");						//상위부서
		dsUserParam.setColumn(nrow, "YN_SLIPACCEPT"	, "Y");						//전표발행여부
		dsUserParam.setColumn(nrow, "CD_CORP"		, cdCorp);					//법인코드
		dsUserParam.setColumn(nrow, "YN_USE"		, "Y");						//사용여부
		dsUserParam.setColumn(nrow, "GR_DEPT_ACNT"	, "");						//현장/본사여부
	}
	return true;
}

this.fnAfterCDTextChanged = function(id, codeFindData) {
	//var arrData = codeFindData;
	switch(id) {
		case "ccfCD_CORP":	//법인코드
			this.ccfCD_DEPT.form.fnCodeFindClear();
		break;
	}
}


/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
this.fnGrid_BeforeUserDataSetParam = function(id, dsUserParam, nrow) {	
	//var cdSelfAcnt = this.dsList.getColumn(this.dsList.rowposition, "CD_DEPT_SELFACNT");
	
	if(id == "SELFACNT_EMP" || id == "SELFACNT_JUMIN") {	//종업원할, 주민세 부서
		var cdCorp = this.gfnTrim(this.ccfCD_CORP.form.CDTextBox.value);
		dsUserParam.setColumn(nrow, "CD_DEPT_UPPER"	, "");						//상위부서
		dsUserParam.setColumn(nrow, "YN_SLIPACCEPT"	, "Y");						//전표발행여부
		dsUserParam.setColumn(nrow, "CD_CORP"		, cdCorp);					//법인코드
		dsUserParam.setColumn(nrow, "YN_USE"		, "Y");						//사용여부
		dsUserParam.setColumn(nrow, "GR_DEPT_ACNT"	, "");						//현장/본사여부
	}

	return true;

};

/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.dsSearch_Valuechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
		this.gfnGridClear(this.dxGrid2);	
	}
};

//자료생성 처리
this.fnDataCreate = function (obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	if (this.gfnIsNull(this.gfnTrim(this.ccfCD_CORP.form.CDTextBox.value))) {
		this.gfnAlert("법인코드는 필수입니다.");
		this.ccfCD_CORP.form.CDTextBox.setFocus();
		return;
	}

	if(this.gfnIsNull(this.ctclDT_WORK.form.TextBox.value)){
		this.gfnAlert("회계년월은 필수입니다.");
		this.ctclDT_WORK.form.TextBox.setFocus();
		return;
	}
	
	this.gfnConfirm("생성 하시겠습니까?", "fnDataCreate_callback");
	
};

this.fnDataCreate_callback = function(strId, val) 
{
	if(val == true) {
		this.dsSpCall.clearData();
		var nRow = this.dsSpCall.addRow();
		
		//처리할 데이터 담기
		this.dsSpCall.setColumn(nRow, "CD_CORP"  , this.ccfCD_CORP.form.CDTextBox.value);
		this.dsSpCall.setColumn(nRow, "DT_WORK"	 , this.ctclDT_WORK.form.TextBox.value);
		this.dsSpCall.setColumn(nRow, "ID_USER"  , this.AuthClient.ID_USER);
		
		var strSvcId    = "create";
		var strSvcType  = "save";
		var inProc		= "_dsProc";
		var inData      = "create=dsSpCall";
		var outData     = "";
		var strArg      = "";
		var callBackFnc = "fnCallback";
		
		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
							strSvcType , 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
							callBackFnc); 	// 통신방법 정의 [생략가능]
	}
};

//계산 처리
this.fnDataCalc = function (obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	if (this.gfnIsNull(this.gfnTrim(this.ccfCD_CORP.form.CDTextBox.value))) {
		this.gfnAlert("법인코드는 필수입니다.");
		this.ccfCD_CORP.form.CDTextBox.setFocus();
		return;
	}

	if(this.gfnIsNull(this.ctclDT_WORK.form.TextBox.value)){
		this.gfnAlert("회계년월은 필수입니다.");
		this.ctclDT_WORK.form.TextBox.setFocus();
		return;
	}
	
	this.gfnConfirm("처리 하시겠습니까?", "fnDataCalc_callback");
	
};

this.fnDataCalc_callback = function(strId, val) 
{
	if(val == true) {
		this.dsSpCall.clearData();
		var nRow = this.dsSpCall.addRow();
		
		//처리할 데이터 담기
		this.dsSpCall.setColumn(nRow, "CD_CORP"  , this.ccfCD_CORP.form.CDTextBox.value);
		this.dsSpCall.setColumn(nRow, "DT_WORK"	 , this.ctclDT_WORK.form.TextBox.value);
		this.dsSpCall.setColumn(nRow, "ID_USER"  , this.AuthClient.ID_USER);
		
		var strSvcId    = "dataCalc";
		var strSvcType  = "save";
		var inProc		= "_dsProc";
		var inData      = "dataCalc=dsSpCall";
		var outData     = "";
		var strArg      = "";
		var callBackFnc = "fnCallback";
		
		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
							strSvcType , 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
							callBackFnc); 	// 통신방법 정의 [생략가능]
	}
};

this.divData_tabData_canchange = function(obj:nexacro.Tab,e:nexacro.TabIndexChangeEventInfo)
{
	if(e.postindex != e.preindex){
	
		if(e.preindex == 0){
			var fRow = this.dsList.findRowExprNF( this.ucFlag+" != '#' && !dataset.parent.gfnIsNull("+this.ucFlag+ ")");
			if(fRow > -1){
				this.gfnConfirm("변경된 데이터가 있습니다.\r\n계속 진행하시겠습니까?", "tabData_canchange_callback");
				return false;
			}
		}
	}
};

this.tabData_canchange_callback = function(strId, val) 
{

	if(val == true) {
		this.divData.form.tabData.set_enableevent(false);
		this.divData.form.tabData.set_tabindex(1);	//탭변경
		this.divData.form.tabData.set_enableevent(true);
		
		this.dsList.reset();	//데이터셋 리셋
	}	
}

//그리드 컬럼 숨기기 셋팅
this.fnSetGridColSize = function (size)
{
	var colDEPT = this.dxGrid2.getBindCellIndex("body", "DS_DEPT_ACNT");	//부서 컬럼 인덱스

	this.dxGrid2.set_enableredraw(false);
	this.dsList2.set_enableevent(false);
	
	var colId = colDEPT+1;
	for(var i = 0;i<12;i++){
		for(var j = 0;j<4;j++){
			this.dxGrid2.setFormatColProperty((colId+j), "size", size);
		}
		
		colId = colId + 6;	//숨길컬럼4+보여줄 컬럼2
	}
		
	this.dsList2.set_enableevent(true);
	this.dxGrid2.set_enableredraw(true);
};

//그리드 셋팅
this.fnGridSetting = function ()
{
	var colDEPT = this.dxGrid2.getBindCellIndex("body", "DS_DEPT_ACNT");	//부서 컬럼 인덱스
	
	var dtWork = this.ctclDT_WORK.form.TextBox.value;
	
	this.dxGrid2.set_enableredraw(false);
	this.dsList2.set_enableevent(false);
	
	var arrField = ["AM_SALARY","NO_DEPT_PERSON","NO_SITE_PERSON","AM_DAILY","SUM_MONTH_PERSON","SUM_MONTH_AM"];
	
	var colId = colDEPT+1;
	var ymDate = "";
	var OffSet = -11, HeadYear = 0, HeadMonth = 0, addIdx = colDEPT+1;
	for(var i = 0;i<12;i++){
		ymDate = this.gfnAddMonth(dtWork + "01", OffSet).substr(0, 6);
		HeadYear = nexacro.toNumber(this.gfnAddMonth(dtWork + "01", OffSet).substr(0, 4));
		HeadMonth = nexacro.toNumber(this.gfnAddMonth(dtWork + "01", OffSet).substr(4, 2));
		
		this.dxGrid2.setCellProperty( "head", (colDEPT+i)+1, "text", HeadYear +"년 "+HeadMonth.toString() + "월");	//헤더 텍스트
		var idx = 0;
		var sField = "";
		for(var j = 0;j<arrField.length;j++){
			sField = "C"+ ymDate +"_"+arrField[idx];
			
			
			trace("@@ addIdx :: "+addIdx);
			
			trace("@@ addIdx :: "+addIdx);
			
			var strColID = this.dsList2.getColID(addIdx);
			
			trace("@@ old 컬럼 :: "+strColID);
			trace("@@ new 컬럼 :: "+sField);

			//데이터셋 컬럼명 변경
			//var nColIndex = this.dsList2.updateColID(strColID, sField);	
			
			//trace("@@ 변경한컬럼의 인덱스 :: "+nColIndex);
			
			//trace("@@####  프로퍼티 인덱스 :: "+this.dxGrid2.getBindCellIndex("body", "C201901_AM_SALARY"));
			
			

			//this.dxGrid2.setCellProperty("body", addIdx, "text", "bind:"+sField);	//바인딩 처리
			//this.dxGrid2.setCellProperty("summ", addIdx, "text", "expr:dataset.getCaseSum('"+this.ucFlag+" !=\"#\"','"+sField+"')");

			addIdx++;
			idx++;
		}		

		colId++;
		OffSet++;
	}
		
	this.dsList2.set_enableevent(true);
	this.dxGrid2.set_enableredraw(true);

// 	for(var c = 0; c < this.dsList2.colinfos.length; c++) {
// 		var colid = this.dsList2.colinfos[c].name;
// 		
// 		trace("## colid :: "+colid);
// 	}
// 	
//for( var i=0;i<this.divData.form.tabData.tab2.form.objGrid2.getCellCount("body");i++){
	
//}
};

this.divSearch_chkYN_HIDE_onchanged = function(obj:nexacro.CheckBox,e:nexacro.CheckBoxChangedEventInfo)
{
	this.fnSetGridColSize((e.postvalue == "Y"? 0 : 120));
};

this.fnDataExport = function (obj:nexacro.Button,e:nexacro.ClickEventInfo){
	if (!this.fnSelectValidate()) return false;
	
	this.gfnGridBeforeSelect(this.dxGridExport);
	
	this.dsExport.clearData();
	this.dsExport.addRow();
	
	this.dsExport.setColumn(0, "CD_CORP"	, this.ccfCD_CORP.form.CDTextBox.value);
	this.dsExport.setColumn(0, "CD_DEPT"	, this.ccfCD_DEPT.form.CDTextBox.value);
	this.dsExport.setColumn(0, "DT_WORK"    , this.ctclDT_WORK.form.TextBox.value);
	this.dsExport.setColumn(0, "YN_TAX"		, "Y");
	
	var strSvcId    = "export";
	var strSvcType  = "select";
	var inProc		= "_dsProc";
	var inData      = "export=dsExport";
	var outData     = "dsExportA=export0 dsExportB=export1";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]

}

this.fnExportFile = function (){

	var hCnt = this.dxGridExport.getCellCount( "head" );
	if(hCnt > 0){
		for(var i = hCnt; i >= 0 ; i--){
			this.dxGridExport.deleteContentsCol("head",i ,false);
		}
	}
	
	var bCnt = this.dxGridExport.getCellCount( "body" );
	if(bCnt > 0){
		for(var i = bCnt; i >= 0 ; i--){
			this.dxGridExport.deleteContentsCol("body",i ,false);
		}
	}
	
	if(this.dsExportA.rowcount > 0 && this.dsExportB.rowcount > 0){	
		
		for(var i = 0; i < this.dsExportA.colcount ; i++){
			var id = "A"+ (i+1);
			var idx = this.dsExportA.getColIndex(id);
			var v = this.dsExportA.getColumn(0, id);
			
			var ncol = this.dxGridExport.appendContentsCol();
			
			this.dxGridExport.setCellProperty("head", ncol, "text", v);
			this.dxGridExport.setRealColSize( "head", ncol, 150, false );
			this.dxGridExport.setCellProperty("body", ncol, "text", "bind:" + id);
		}
		
		this.gfnExcelExport(this.dxGridExport);
	}else{
		this.gfnAlert("다운로드 데이터가 없습니다.");
	}
};
]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DHVPR_EMPBUSINESSTAX_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">select2</Col>
            <Col id="SP">DHVPR_EMPBUSINESSTAX_TOTAL_SELECT</Col>
          </Row>
          <Row>
            <Col id="SP">DHVPR_EMPBUSINESSTAX_UPDATE</Col>
            <Col id="TARGET">update</Col>
          </Row>
          <Row>
            <Col id="TARGET">create</Col>
            <Col id="SP">DHVPR_EMPBUSINESSTAX_WRITE</Col>
          </Row>
          <Row>
            <Col id="TARGET">dataCalc</Col>
            <Col id="SP">DHVPR_EMPBUSINESSTAX_CALC</Col>
          </Row>
          <Row>
            <Col id="TARGET">export</Col>
            <Col id="SP">DHVPR_EMPBUSINESSTAX_SINGO</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch">
        <ColumnInfo>
          <Column id="CD_DEPT" type="STRING" size="256"/>
          <Column id="YM_WORK" type="STRING" size="256"/>
          <Column id="CD_CORP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CD_DEPT"/>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsList2"/>
      <Dataset id="dsExportA"/>
      <Dataset id="dsExportB"/>
    </Objects>
    <Bind>
      <BindItem id="item1" compid="divSearch.form.ccfCD_DEPT.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_DEPT"/>
      <BindItem id="item2" compid="divSearch.form.ctclDT_WORK.form.TextBox" propid="value" datasetid="dsSearch" columnid="YM_WORK"/>
      <BindItem id="item0" compid="divSearch.form.ccfCD_CORP.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_CORP"/>
    </Bind>
  </Form>
</FDL>
