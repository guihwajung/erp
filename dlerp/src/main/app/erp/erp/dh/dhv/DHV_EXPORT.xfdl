<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="form" width="1400" height="720" titletext="현장공통매입세액관리" onload="form_onload">
    <Layouts>
      <Layout stepcount="0">
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg">
          <Layouts>
            <Layout>
              <Static id="staCD_CORP" taborder="0" text="법인코드" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfCD_CORP" CodeFindName="DHX_CFCORP" CDTextWidth="50" taborder="1" left="staCD_CORP:0.0" top="10.0" width="240" height="24.0" url="cmm::cmmCodeFind.xfdl" text=""/>
              <Static id="sta00" taborder="4" text="세무단위" left="ccfCD_CORP:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfCD_DEPT" CodeFindName="DHX_CFSELFACNT" CDTextWidth="70" taborder="0" left="sta00:0.0" top="10.0" width="300" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
              <Static id="staYY_WORK" taborder="3" text="작성년도" left="ccfCD_DEPT:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ctclYY_WORK" taborder="1" left="staYY_WORK:0.0" top="10.0" width="60" height="24.0" url="cmm::cmmCalYY.xfdl"/>
              <Static id="staYY_WORK00" taborder="5" text="작성기수" left="ctclYY_WORK:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Combo id="ccboNO_TAX" taborder="2" text="cbo00" left="staYY_WORK00:0.0" top="10.0" width="98" height="24.0" codecolumn="CD_CODE" datacolumn="DS_CODE" innerdataset="dsNO_TAX"/>
              <Edit id="ctxtDT_FROM" taborder="8" left="ccboNO_TAX:5" top="10.0" height="24.0" autoselect="true" width="80" textAlign="left" inputtype="digit" text="2020-04-04" readonly="true"/>
              <Static id="staDT_WORK" taborder="6" text="~" left="ctxtDT_FROM:0.0" top="10.0" width="30.0" height="24.0" cssclass="sta_WF_AC"/>
              <Edit id="ctxtDT_TO" taborder="7" left="staDT_WORK:0.0" top="10.0" height="24.0" autoselect="true" width="80" textAlign="left" inputtype="digit" text="2020-04-04" readonly="true"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg" text="">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" right="0" bottom="0"/>
              <Radio id="rdoYN_DEP" taborder="1" left="405" top="-34" width="200" height="20" onitemchanged="rdo00_onitemchanged" index="-1" text="" value="" innerdataset="dsYN_DEP" datacolumn="VALUE" codecolumn="CODE" fittocontents="width" direction="vertical"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------// 
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetVariable();
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetParameter();
	this.fnSetEvent();
	
	this.dsSearch.setColumn(0, "CD_CORP", this.AuthClient.CD_CORP);
	this.dsSearch.setColumn(0, "DS_CORP", this.AuthClient.DS_CORP);
	
	this.dsSearch.setColumn(0, "YY_WORK", this.gfnGetDate().substring(0, 4));
	this.dsSearch.setColumn(0, "CD_DEPT", this.UserInfo.CD_DEPT_SELFACNT);
	if (!this.gfnIsNull(this.dsSearch.getColumn(0, "CD_DEPT")))
		this.ccfCD_DEPT.form.fnCodeFindLoad();
}; 

this.fnSetButton = function() {
}

this.fnSetExtendButton = function() {
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.ccfCD_CORP = this.divSearch.form.ccfCD_CORP;	// 법인코드
	this.ccfCD_DEPT = this.divSearch.form.ccfCD_DEPT;
	this.ctclYY_WORK = this.divSearch.form.ctclYY_WORK;
	this.ccboNO_TAX = this.divSearch.form.ccboNO_TAX;
	this.ctxtDT_FROM = this.divSearch.form.ctxtDT_FROM;
	this.ctxtDT_TO = this.divSearch.form.ctxtDT_TO;

	this.dxGrid = this.divData.form.objGrid;
};

this.fnSetEvent = function() {		
	this.gfnGridInit(this.dxGrid, this.dsList, "DH", "DHV_EXPORT");

	this.dxGrid.AfterEdit = "fnGrid_AfterEdit";

	this.ccfCD_CORP.AfterCDTextChanged = "fnAfterCDTextChanged";
	this.ccfCD_CORP.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.ccfCD_DEPT.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
}

this.fnSetParameter = function() {
	this.dsSelect = new Dataset();	
	this.dsSelect.addColumn("CD_DEPT_SELFACNT", "string");
	this.dsSelect.addColumn("YR_TAX", "string");
	this.dsSelect.addColumn("NO_TAX", "string");
	
	this.dsInsert = new Dataset();	
	this.dsInsert.addColumn("CD_DEPT_SELFACNT", "string");
	this.dsInsert.addColumn("YR_TAX", "string");
	this.dsInsert.addColumn("NO_TAX", "string");
	this.dsInsert.addColumn("NO_EXPORT", "string");
	this.dsInsert.addColumn("CD_CURRENCY", "string");
	this.dsInsert.addColumn("RT_EXCHANGE", "bigdecimal");
	this.dsInsert.addColumn("AM_FOREIGN", "bigdecimal");
	this.dsInsert.addColumn("AM_WON", "bigdecimal");
	this.dsInsert.addColumn("ID_INSERT", "string");
	this.dsInsert.addColumn("DT_SJ", "string");
	this.dsInsert.addColumn("CT_ETC", "bigdecimal");
	
	this.dsUpdate = new Dataset();
	this.dsUpdate.addColumn("CD_DEPT_SELFACNT", "string");
	this.dsUpdate.addColumn("YR_TAX", "string");
	this.dsUpdate.addColumn("NO_TAX", "string");
	this.dsUpdate.addColumn("NO_SEQ", "bigdecimal");
	this.dsUpdate.addColumn("NO_EXPORT", "string");
	this.dsUpdate.addColumn("CD_CURRENCY", "string");
	this.dsUpdate.addColumn("RT_EXCHANGE", "bigdecimal");
	this.dsUpdate.addColumn("AM_FOREIGN", "bigdecimal");
	this.dsUpdate.addColumn("AM_WON", "bigdecimal");
	this.dsUpdate.addColumn("ID_UPDATE", "string");
	this.dsUpdate.addColumn("DT_SJ", "string");
	this.dsUpdate.addColumn("CT_ETC", "bigdecimal");
	
	this.dsDelete = new Dataset();	
	this.dsDelete.addColumn("CD_DEPT_SELFACNT", "string");
	this.dsDelete.addColumn("YR_TAX", "string");
	this.dsDelete.addColumn("NO_TAX", "string");
	this.dsDelete.addColumn("NO_SEQ", "bigdecimal");
	
	this.dsSelectUser = new Dataset();
	this.dsSelectUser.addColumn("ID_USER", "string");
	this.dsSelectUser.addColumn("CD_DEPT", "string");
};

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
this.fnSelect = function() {
	if (!this.fnSelectValidation()) return;

	this.gfnGridBeforeSelect(this.dxGrid);

	this.dsSelect.clearData();
	this.dsSelect.addRow();
	
	this.dsSelect.setColumn(0, "CD_DEPT_SELFACNT", this.gfnTrim(this.dsSearch.getColumn(0, "CD_DEPT")));
	this.dsSelect.setColumn(0, "YR_TAX", this.dsSearch.getColumn(0, "YY_WORK"));
	this.dsSelect.setColumn(0, "NO_TAX", this.dsSearch.getColumn(0, "NO_TAX"));
		
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect"; 
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
};

this.fnAdd = function() {
	var nrow = this.gfnGridAdd(this.dxGrid);
}

this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}

this.fnSave = function() {
	if (!this.gfnGridValidate(this.dxGrid)) return;	
	if (!this.fnSaveValidate()) return;
	
	this.dxGrid.updateToDataset();
	
	this.dsInsert.clearData();
	this.dsUpdate.clearData();
	this.dsDelete.clearData();

	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "I":		
				var nrow = this.dsInsert.addRow();
				this.dsInsert.setColumn(nrow, "CD_DEPT_SELFACNT", this.dsSearch.getColumn(0, "CD_DEPT"));
				this.dsInsert.setColumn(nrow, "YR_TAX", this.dsSearch.getColumn(0, "YY_WORK"));
				this.dsInsert.setColumn(nrow, "NO_TAX", this.dsSearch.getColumn(0, "NO_TAX"));
				this.dsInsert.setColumn(nrow, "NO_EXPORT", this.dsList.getColumn(i, "NO_EXPORT"));
				this.dsInsert.setColumn(nrow, "CD_CURRENCY", this.dsList.getColumn(i, "CD_CURRENCY"));
				this.dsInsert.setColumn(nrow, "RT_EXCHANGE", this.dsList.getColumn(i, "RT_EXCHANGE"));
				this.dsInsert.setColumn(nrow, "AM_FOREIGN", this.dsList.getColumn(i, "AM_FOREIGN"));
				this.dsInsert.setColumn(nrow, "AM_WON", this.dsList.getColumn(i, "AM_WON"));
				this.dsInsert.setColumn(nrow, "DT_SJ", this.dsList.getColumn(i, "DT_SJ"));
				this.dsInsert.setColumn(nrow, "ID_INSERT", this.AuthClient.ID_USER);
				this.dsInsert.setColumn(nrow, "CT_ETC", this.dsList.getColumn(i, "CT_ETC"));
				break;
			case "U":		
				var nrow = this.dsUpdate.addRow();
				this.dsUpdate.setColumn(nrow, "CD_DEPT_SELFACNT", this.dsSearch.getColumn(0, "CD_DEPT"));
				this.dsUpdate.setColumn(nrow, "YR_TAX", this.dsSearch.getColumn(0, "YY_WORK"));
				this.dsUpdate.setColumn(nrow, "NO_TAX", this.dsSearch.getColumn(0, "NO_TAX"));
				this.dsUpdate.setColumn(nrow, "NO_SEQ", this.dsList.getColumn(i, "NO_SEQ"));
				this.dsUpdate.setColumn(nrow, "NO_EXPORT", this.dsList.getColumn(i, "NO_EXPORT"));
				this.dsUpdate.setColumn(nrow, "CD_CURRENCY", this.dsList.getColumn(i, "CD_CURRENCY"));
				this.dsUpdate.setColumn(nrow, "RT_EXCHANGE", this.dsList.getColumn(i, "RT_EXCHANGE"));
				this.dsUpdate.setColumn(nrow, "AM_FOREIGN", this.dsList.getColumn(i, "AM_FOREIGN"));
				this.dsUpdate.setColumn(nrow, "AM_WON", this.dsList.getColumn(i, "AM_WON"));
				this.dsUpdate.setColumn(nrow, "DT_SJ", this.dsList.getColumn(i, "DT_SJ"));
				this.dsUpdate.setColumn(nrow, "ID_UPDATE", this.AuthClient.ID_USER);
				this.dsUpdate.setColumn(nrow, "CT_ETC", this.dsList.getColumn(i, "CT_ETC"));
				break;
			case "D":		
				var nrow = this.dsDelete.addRow();
				this.dsDelete.setColumn(nrow, "CD_DEPT_SELFACNT", this.dsSearch.getColumn(0, "CD_DEPT"));
				this.dsDelete.setColumn(nrow, "YR_TAX", this.dsSearch.getColumn(0, "YY_WORK"));
				this.dsDelete.setColumn(nrow, "NO_TAX", this.dsSearch.getColumn(0, "NO_TAX"));
				this.dsDelete.setColumn(nrow, "NO_SEQ", this.dsList.getColumn(i, "NO_SEQ"));
				break;
		}
	}

	if (this.dsInsert.rowcount == 0 && this.dsUpdate.rowcount == 0 && this.dsDelete.rowcount == 0) return;

	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "insert=dsInsert update=dsUpdate delete=dsDelete";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/
this.fnSelectValidation = function() {
	if (this.gfnIsNull(this.dsSearch.getColumn(0, "CD_DEPT"))) {
		this.fnVaidateCallback = function() {
			this.ccfCD_DEPT.form.CDTextBox.setFocus();
		}
		this.gfnAlert("세무단위를 입력하세요.", "fnVaidateCallback");
		return false;
	}
	
	if (this.gfnIsNull(this.dsSearch.getColumn(0, "YY_WORK"))) {
		this.fnVaidateCallback = function() {
			this.ctclYY_WORK.form.TextBox.setFocus();
		}
		this.gfnAlert("작성년도를 입력하세요.", "fnVaidateCallback");
		return false;
	}
	
	if(this.gfnIsNull(this.dsSearch.getColumn(0, "NO_TAX"))) {
		this.fnVaidateCallback = function() {
			this.ccboNO_TAX.setFocus();
		}
		this.gfnAlert("작성기수를 입력하세요.", "fnVaidateCallback");
		return false;
	}
	
	return true;
}

this.fnSaveValidate = function() {
	var validate = true;
	var msg = "";
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		if (flag == "" || flag == "D") continue;
		
		var tax = nexacro.toNumber(this.dsList.getColumn(i, "RT_TAX"), 0);
		if (tax >= 100) {
			msg += (i + 1) + "열: 적용 이율은 100을 넘지 못합니다.\n";
			validate = false;
		}
		
		if (!this.gfnIsNull(this.dsList.getColumn(i, "DT_RENEW"))
			&& (this.gfnIsNull(this.dsList.getColumn(i, "DT_IN")) || this.gfnIsNull(this.dsList.getColumn(i, "DT_OUT")))) {
			msg += (i + 1) + "열: 갱신일이 입력된경우 입주일과 퇴거일을 반드시 입력 하셔야 합니다.\n";
			validate = false;
		}
	}
	
	if (!validate) {
		var arrError = [msg];
		this.gfnAlert("msg.err.validator", arrError);
		return false;
	}
	return validate;
}

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
this.fnCallback = function(svcID, errorCode, errorMsg) {

	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);
		
		if (this.dsList.rowcount > 0) {
// 			if (this.FormInfo.TY_AUTH != "R") {
// 				this.btnCalcInterest.set_enable(true);
// 				this.btnCalcMonthlyRent.set_enable(true);
// 			}
//			this.btnDataTransfer.set_enable(false);
		
			if (this.dsList.getColumn(this.dsList.rowcount-1, "YM_MAGAM") == "000000") {
				this.dsList.set_enableevent(false);
				this.dsList.setColumn(this.dsList.rowcount-1, "DS_FLOOR", "");
				this.dsList.setColumn(this.dsList.rowcount-1, "CD_VENDOR", "합계");
				this.dsList.set_enableevent(true);
			}
		}
// 		else {
// 			if (this.FormInfo.TY_AUTH != "R") {
// 				this.btnDataTransfer.set_enable(true);
// 			}
// 		}
	}
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	var cdCorp = this.dsSearch.getColumn(0, "CD_CORP");
	switch(id) {
		case "ccfCD_CORP": // 법인코드
			dsUserParam.setColumn(nrow, "ID_SABUN", this.AuthClient.ID_USER);
			break;	
		
		case "ccfCD_DEPT": // 세무단위
			if (this.gfnIsNull(cdCorp)) {
				this.gfnAlert("법인코드를 먼저 선택하세요.");
				this.ccfCD_CORP.form.CDTextBox.setFocus();
				return false;
			}
			dsUserParam.setColumn(nrow, "CD_CORP", cdCorp);
			//dsUserParam.setColumn(nrow, "LV_DEPT", this.UserInfo.LEVLV_DEPT_ACNT);
			break;
	}

	return true;
};

this.fnAfterCDTextChanged = function(id, codeFindData) {
	var arrData = codeFindData;
	
	switch(id) {
		case "ccfCD_CORP": // 법인코드
			this.ccfCD_DEPT.form.fnCodeFindClear();
			break;
	}
	return true;
};

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
this.fnGrid_AfterEdit = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo) {
	if (e.columnid == "RT_EXCHANGE" || e.columnid == "AM_FOREIGN") {
		if (e.oldvalue != e.newvalue) {
			this.dsList.setColumn(e.row, "AM_WON", nexacro.toNumber(this.dsList.getColumn(e.row,"RT_EXCHANGE"), 0) * nexacro.toNumber(this.dsList.getColumn(e.row,"AM_FOREIGN"), 0));
		}
	}
}

/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo) {
    if (e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);
		this.gfnGridClear(this.dxGrid);	

		switch(e.columnid) {
			case "YY_WORK" :
			case "NO_TAX" :
				this.fnMagamSetting();
				break;
		}
    }
}

this.fnMagamSetting = function() {
	var dtFrom;
	var dtTo;
	
	var ymMagam = this.dsSearch.getColumn(0, "YY_WORK");
	var noTax = this.dsSearch.getColumn(0, "NO_TAX");
	
	if (this.gfnIsNull(ymMagam) || this.gfnIsNull(noTax)) {
		dtFrom = "";
		dtTo = "";
	}
	else {
		switch(noTax) {
			case "1" :
				dtFrom = ymMagam + "-01-01";
				dtTo = ymMagam + "-03-31";
				break;
			case "2" :
				dtFrom = ymMagam + "-04-01";
				dtTo = ymMagam + "-06-30";
				break;
			case "3" :
				dtFrom = ymMagam + "-07-01";
				dtTo = ymMagam + "-09-20";
				break;
			case "4" :
				dtFrom = ymMagam + "-10-01";
				dtTo = ymMagam + "-12-31";
				break;
			default :
				dtFrom = "";
				dtTo = "";
				break;
		}
	}
	
	this.dsSearch.setColumn(0, "DT_FROM", dtFrom);
	this.dsSearch.setColumn(0, "DT_TO", dtTo);
}
]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DHVPR_EXPORT_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">insert</Col>
            <Col id="SP">DHVPR_EXPORT_INSERT</Col>
          </Row>
          <Row>
            <Col id="TARGET">update</Col>
            <Col id="SP">DHVPR_EXPORT_UPDATE</Col>
          </Row>
          <Row>
            <Col id="TARGET">delete</Col>
            <Col id="SP">DHVPR_EXPORT_DELETE</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_DEPT" type="STRING" size="256"/>
          <Column id="DS_DEPT" type="STRING" size="256"/>
          <Column id="YY_WORK" type="STRING" size="256"/>
          <Column id="NO_TAX" type="STRING" size="256"/>
          <Column id="DT_FROM" type="STRING" size="256"/>
          <Column id="DT_TO" type="STRING" size="256"/>
          <Column id="CD_CORP" type="STRING" size="256"/>
          <Column id="DS_CORP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
      <Dataset id="dsNO_TAX">
        <ColumnInfo>
          <Column id="CD_CODE" type="STRING" size="256"/>
          <Column id="DS_CODE" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CD_CODE">1</Col>
            <Col id="DS_CODE">1기예정</Col>
          </Row>
          <Row>
            <Col id="CD_CODE">2</Col>
            <Col id="DS_CODE">1기확정</Col>
          </Row>
          <Row>
            <Col id="CD_CODE">3</Col>
            <Col id="DS_CODE">2기예정</Col>
          </Row>
          <Row>
            <Col id="CD_CODE">4</Col>
            <Col id="DS_CODE">2기확정</Col>
          </Row>
        </Rows>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfCD_DEPT.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_DEPT"/>
      <BindItem id="item1" compid="divSearch.form.ccfCD_DEPT.form.DSTextBox" propid="value" datasetid="dsSearch" columnid="DS_DEPT"/>
      <BindItem id="item2" compid="divSearch.form.ctclYY_WORK.form.TextBox" propid="value" datasetid="dsSearch" columnid="YY_WORK"/>
      <BindItem id="item3" compid="divSearch.form.ccboNO_TAX" propid="value" datasetid="dsSearch" columnid="NO_TAX"/>
      <BindItem id="item4" compid="divSearch.form.ctxtDT_FROM" propid="value" datasetid="dsSearch" columnid="DT_FROM"/>
      <BindItem id="item5" compid="divSearch.form.ctxtDT_TO" propid="value" datasetid="dsSearch" columnid="DT_TO"/>
      <BindItem id="item6" compid="divSearch.form.ccfCD_CORP.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_CORP"/>
      <BindItem id="item7" compid="divSearch.form.ccfCD_CORP.form.DSTextBox" propid="value" datasetid="dsSearch" columnid="DS_CORP"/>
    </Bind>
  </Form>
</FDL>
