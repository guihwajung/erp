<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="DAU_SALARYTOTALLIST" width="1280" height="720" titletext="급여이체(Branch)" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="1" left="0" top="0" height="46.0" right="0" cssclass="div_SEARCH_Bg">
          <Layouts>
            <Layout>
              <Static id="staCD_CORP" taborder="1" text="법인" left="0" top="10.0" width="66" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfCD_CORP" CDTextWidth="50" taborder="0" left="staCD_CORP:0.0" top="10.0" width="250" height="24.0" url="cmm::cmmCodeFind.xfdl" text="" CodeFindName="DAX_CFCORP2" enable="true"/>
              <Static id="staYM_SALARY" taborder="2" text="지급년월" left="ccfCD_CORP:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ctclYM_SALARY" taborder="3" left="staYM_SALARY:0.0" top="10.0" width="80" height="24.0" url="cmm::cmmCalMM.xfdl" enable="true"/>
              <Static id="staTY_SALARY" taborder="4" text="지급구분" left="ctclYM_SALARY:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Combo id="cboTY_SALARY" taborder="5" left="staTY_SALARY:0.0" top="10.0" width="80" height="24.0" codecolumn="codecolumn" datacolumn="datacolumn" value="S" onitemchanged="fnSearchInit" index="0" text="급여" readonly="false" innerdataset="innerdataset">
                <Dataset id="innerdataset">
                  <ColumnInfo>
                    <Column id="codecolumn" size="256"/>
                    <Column id="datacolumn" size="256"/>
                  </ColumnInfo>
                  <Rows>
                    <Row>
                      <Col id="codecolumn">S</Col>
                      <Col id="datacolumn">급여</Col>
                    </Row>
                    <Row>
                      <Col id="codecolumn">X</Col>
                      <Col id="datacolumn">성과급</Col>
                    </Row>
                    <!--
                    <Row>
                      <Col id="codecolumn">R</Col>
                      <Col id="datacolumn">퇴직급여</Col>
                    </Row>
-->
                  </Rows>
                </Dataset>
              </Combo>
              <Combo id="cboSN_SALARY" taborder="6" left="cboTY_SALARY:5" top="10.0" width="50" height="24.0" datacolumn="datacolumn" codecolumn="codecolumn" index="0" value="1" text="1" readonly="false" innerdataset="innerdataset">
                <Dataset id="innerdataset">
                  <ColumnInfo>
                    <Column id="codecolumn" size="256"/>
                    <Column id="datacolumn" size="256"/>
                  </ColumnInfo>
                  <Rows>
                    <Row>
                      <Col id="codecolumn">1</Col>
                      <Col id="datacolumn">1</Col>
                    </Row>
                    <Row>
                      <Col id="codecolumn">2</Col>
                      <Col id="datacolumn">2</Col>
                    </Row>
                    <Row>
                      <Col id="codecolumn">3</Col>
                      <Col id="datacolumn">3</Col>
                    </Row>
                    <Row>
                      <Col id="codecolumn">4</Col>
                      <Col id="datacolumn">4</Col>
                    </Row>
                    <Row>
                      <Col id="codecolumn">5</Col>
                      <Col id="datacolumn">5</Col>
                    </Row>
                    <Row>
                      <Col id="codecolumn">6</Col>
                      <Col id="datacolumn">6</Col>
                    </Row>
                    <Row>
                      <Col id="codecolumn">7</Col>
                      <Col id="datacolumn">7</Col>
                    </Row>
                    <Row>
                      <Col id="codecolumn">8</Col>
                      <Col id="datacolumn">8</Col>
                    </Row>
                    <Row>
                      <Col id="codecolumn">9</Col>
                      <Col id="datacolumn">9</Col>
                    </Row>
                    <Row>
                      <Col id="codecolumn">10</Col>
                      <Col id="datacolumn">10</Col>
                    </Row>
                  </Rows>
                </Dataset>
              </Combo>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0" oncellclick="divData_objGrid_oncellclick"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DAUPR_SALARYBANK_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">delete</Col>
            <Col id="SP">DAUPR_BRANCH_DELETE</Col>
          </Row>
          <Row>
            <Col id="TARGET">branchAutoslipCancel</Col>
            <Col id="SP">DAUPR_BRANCH_AUTOSLIP_CANCEL</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_CORP" type="STRING" size="256"/>
          <Column id="DS_CORP" type="STRING" size="256"/>
          <Column id="YM_SALARY" type="STRING" size="256"/>
          <Column id="TY_SALARY" type="STRING" size="256"/>
          <Column id="SN_SALARY" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
    </Objects>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();	
	
	var today = this.gfnGetDate(); 
	
	//지급년월 셋팅
	this.ctclYM_SALARY.form.TextBox.set_value(today.substring(0,6));
	
	//법인 셋팅
	this.ccfCD_CORP.form.CDTextBox.set_value(this.AuthClient.CD_CORP);
	this.ccfCD_CORP.form.DSTextBox.set_value(this.AuthClient.DS_CORP);  
	
	this.cboTY_SALARY.set_index(0);
	this.cboSN_SALARY.set_index(0);
	
	this.fnExtendButtonEnable(false);
	
	//this.FormBtns.Select.click();
	  
};   

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
};

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btnSalarySlipInq = this.gfnFormButtonAdd("SalarySlipInq", "fnSalarySlipInq");  //급여전표조회
	this.btnBranchInsert = this.gfnFormButtonAdd("BranchInsert", "fnBranchInsert");  //급여이체
	this.btnBranchDelete = this.gfnFormButtonAdd("BranchDelete", "fnBranchDelete");  //이체취소
	
	this.btnReverseSlip = this.gfnFormButtonAdd("ReverseSlip", "fnReverseSlip");  //반제전표발행 ReverseSlip
	this.btnReverseSlipCanc = this.gfnFormButtonAdd("ReverseSlipCanc", "fnReverseSlipCanc");  //반제전표취소 ReverseSlipCanc
	this.btnReverseSlipInq = this.gfnFormButtonAdd("ReverseSlipInq", "fnReverseSlipInq");  //반제전표조회 ReverseSlipInq
};

this.fnExtendButtonEnable = function(bFlag){
	if(!this.gfnIsNull(bFlag) && bFlag == false){
		this.btnSalarySlipInq.set_enable(false);  //급여전표조회
		this.btnBranchInsert.set_enable(false);  //급여이체
		this.btnBranchDelete.set_enable(false);  //이체취소
		
		this.btnReverseSlip.set_enable(false);  //반제전표발행 
		this.btnReverseSlipCanc.set_enable(false);  //반제전표취소 
		this.btnReverseSlipInq.set_enable(false);  //반제전표조회 
		
		return;
		
	}else{
		this.btnSalarySlipInq.set_enable(false);  //급여전표조회
		this.btnBranchInsert.set_enable(false);  //급여이체
		this.btnBranchDelete.set_enable(false);  //이체취소
		
		this.btnReverseSlip.set_enable(false);  //반제전표발행 
		this.btnReverseSlipCanc.set_enable(false);  //반제전표취소 
		this.btnReverseSlipInq.set_enable(false);  //반제전표조회 
		
		//row 없을때
		if(this.dsList.rowcount == 0 || (this.dsList.rowcount == 1 && this.dsList.getColumn(1, this.ucFlag) == "#" )){
			;//모두 disable
		}else{
			var CD_TRADE = this.gfnTrim(this.dsList.getColumn(this.dsList.rowposition, "CD_TRADE")); //전표번호
			
			//if(this.gfnIsNull(CD_TRADE)){
			//	;//모두 disable
			//}else{
				this.btnSalarySlipInq.set_enable(true);  //급여전표조회
				
// 				var CD_TRADE_RETURN = this.gfnTrim(this.dsList.getColumn(this.dsList.rowposition, "CD_TRADE_RETURN")); //반제전표번호
// 				if(this.gfnIsNull(CD_TRADE_RETURN)){
// 					this.btnBranchInsert.set_enable(true);  //급여이체
// 					this.btnBranchDelete.set_enable(true);  //이체취소
// 					this.btnReverseSlip.set_enable(true);  //반제전표발행 
// 				}else{
// 					this.btnReverseSlipCanc.set_enable(true);  //반제전표취소 
// 					this.btnReverseSlipInq.set_enable(true);  //반제전표조회 
// 				}
				this.btnBranchInsert.set_enable(this.dsList.getColumn(this.dsList.rowposition, "BTN_SEND") == "Y");	// 전표발행
				this.btnReverseSlip.set_enable(this.dsList.getColumn(this.dsList.rowposition, "BTN_SLIP") == "Y");	// 전표발행
				this.btnReverseSlipCanc.set_enable(this.dsList.getColumn(this.dsList.rowposition, "BTN_SLIP") != "Y" && this.dsList.getColumn(this.dsList.rowposition, "CD_TRADE_RETURN") != undefined);	// 전표취소
				this.btnReverseSlipInq.set_enable(this.dsList.getColumn(this.dsList.rowposition, "BTN_SLIP_Q") == "Y" && this.dsList.getColumn(this.dsList.rowposition, "CD_TRADE_RETURN") != undefined);	// 전표조회
			
			//}
		}
	}
}

//급여전표조회
this.fnSalarySlipInq = function(){
	if (!this.gfnGridIsRow(this.dxGrid)) { return false; }
	
	var CD_TRADE = this.gfnTrim(this.dsList.getColumn(this.dsList.rowposition, "CD_TRADE"));
	if (this.gfnIsNull(CD_TRADE)) {
 		this.gfnAlert("급여전표는 필수입니다.");
 		return;
 	}
 	//var cdSlip = CD_TRADE.substr(0,14);
 	
 	var param = {};
 	param.IUD_FLAG = "S";
 	param.CD_TRADE = CD_TRADE;
 	this.gfnFormOpen("DHA", "DHA_ISSUESLIP", "", param, this.getOffsetWidth(), this.getOffsetHeight());
}

//급여이체
this.fnBranchInsert = function() {
	if (!this.gfnGridIsRow(this.dxGrid)) {
		return false;
	}
	
	var nCnt = 0;
	for (var i = 0; i < this.dsList.rowcount; i++) {
		if (this.gfnNvl(this.dsList.getColumn(i, "CHK"), "0") == "1") {
			nCnt++;
		}
	}
	
	if (nCnt == 0) {
		this.gfnAlert("선택된 데이타가 없습니다.");
		return;
	}
	
	if (this.cboTY_SALARY.value == "R")
	{
		this.gfnAlert("퇴직급여는 급여이체 대상이 아닙니다.");
		return;
	}	

	var param = {};
	param.CD_CORP = this.ccfCD_CORP.form.CDTextBox.value;
	param.YM_SALARY = this.ctclYM_SALARY.form.TextBox.value;
	param.TY_SALARY = this.cboTY_SALARY.value;
	param.SN_SALARY = this.cboSN_SALARY.value;
	param.targetDs = this.dsList;

	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DAU_SALARYBANK_DLG", "fnBranchInsert_callback", param);
}

//급여이체 callback
this.fnBranchInsert_callback = function(id, val){
	if(val){
		this.FormBtns.Select.click();
	}
}

//이체취소
this.fnBranchDelete = function() {
	if (!this.gfnGridIsRow(this.dxGrid)) {
		return false;
	}
	
	var nCnt = 0;
	for (var i = 0; i < this.dsList.rowcount; i++) {
		if (this.gfnNvl(this.dsList.getColumn(i, "CHK"), "0") == "1") {
			nCnt++;
		}
	}
	
	if (nCnt == 0) {
		this.gfnAlert("선택된 데이타가 없습니다.");
		return;
	}
	
	this.gfnConfirm("선택된 임직원의 급여이체를 취소 하시겠습니까?", "fnBranchDelete_callback");
}


//이체취소 callback
this.fnBranchDelete_callback = function(id, val){
	if(val){
		this.dsDelete.clearData();
		
		for(var i=0;i<this.dsList.rowcount;i++){
			if(this.gfnNvl(this.dsList.getColumn(i, "CHK"), "0") != "1") continue;
			
			var nrow = this.dsDelete.addRow();
						
			this.dsDelete.setColumn(nrow, "CD_CORP", this.dsList.getColumn(i, "CD_CORP"));
			this.dsDelete.setColumn(nrow, "ID_SABUN", this.dsList.getColumn(i, "ID_SABUN"));
			this.dsDelete.setColumn(nrow, "SITE_NO", this.dsList.getColumn(i, "SITE_NO"));
			this.dsDelete.setColumn(nrow, "FL_DATE", this.dsList.getColumn(i, "FL_DATE"));
			this.dsDelete.setColumn(nrow, "FL_TIME", this.dsList.getColumn(i, "FL_TIME"));
			this.dsDelete.setColumn(nrow, "FL_SEQ", this.dsList.getColumn(i, "FL_SEQ"));
			this.dsDelete.setColumn(nrow, "SEND_GB", this.dsList.getColumn(i, "SEND_GB"));
			this.dsDelete.setColumn(nrow, "ERP_GUBUN", this.dsList.getColumn(i, "ERP_GUBUN"));
			this.dsDelete.setColumn(nrow, "ERP_KEY1", this.dsList.getColumn(i, "ERP_KEY1"));
			this.dsDelete.setColumn(nrow, "ERP_KEY2", this.dsList.getColumn(i, "ERP_KEY2"));
			this.dsDelete.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
		}
		
		if (this.dsDelete.rowcount == 0) return;
			
		var strSvcId    = "delete";
		var strSvcType  = "save";
		var inProc		= "_dsProc";
		var inData      = "delete=dsDelete";
		var outData     = "";
		var strArg      = "";
		var callBackFnc = "fnCallback";
		
		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
							strSvcType , 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
							callBackFnc); // 통신방법 정의 [생략가능]
	}
}

//반제전표발행
this.fnReverseSlip = function(){
	if (!this.gfnGridIsRow(this.dxGrid)) {
		return false;
	}	
	
	if (this.cboTY_SALARY.value == "R")
	{
		this.gfnAlert("퇴직급여는 반제전표발행 대상이 아닙니다.");
		return;
	}	
	
	var param = {};
	param.YM_SALARY = this.dsSearch.getColumn(0, "YM_SALARY");
	param.TY_SALARY = this.dsSearch.getColumn(0, "TY_SALARY");
    param.SN_SALARY = this.dsSearch.getColumn(0, "SN_SALARY");
	param.CD_CORP = this.dsSearch.getColumn(0, "CD_CORP");
	param.DS_CORP = this.ccfCD_CORP.form.DSTextBox.value;
	
	param.CD_DEPT_INSA = this.dsList.getColumn(this.dsList.rowposition, "CD_DEPT_INSA");
	param.DS_DEPT_INSA = this.dsList.getColumn(this.dsList.rowposition, "DS_DEPT_INSA");
	param.DT_SALARY = this.dsList.getColumn(this.dsList.rowposition, "DT_SALARY");
	
	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DAU_AUTOSLIPMAIN_ISSUE_REVERSE", "fnReverseSlip_callback", param);
}

//반제전표발행 callback
this.fnReverseSlip_callback = function(svcID, value) {
	if(value == true){
		this.FormBtns.Select.click();
	}
};

//반제전표취소
this.fnReverseSlipCanc = function(){
	if (!this.gfnGridIsRow(this.dxGrid)) { return false; }
	
	var CD_TRADE_RETURN = this.gfnTrim(this.dsList.getColumn(this.dsList.rowposition, "CD_TRADE_RETURN"));
	if (this.gfnIsNull(CD_TRADE_RETURN)) {
 		this.gfnAlert("반제전표는 필수입니다.");
 		return;
 	}	
	
	this.gfnConfirm("반제전표를 취소하시겠습니까?", "fnReverseSlipCanc_callback");
}

//반제전표취소 callback
this.fnReverseSlipCanc_callback = function(strId, val) 
{
	if(val == true) {
		this.dsReverseSlipCanc.clearData();
		this.dsReverseSlipCanc.addRow();	

		this.dsReverseSlipCanc.setColumn(0, "CD_CORP", this.ccfCD_CORP.form.CDTextBox.value);
		this.dsReverseSlipCanc.setColumn(0, "YM_SALARY", this.ctclYM_SALARY.form.TextBox.value);
		this.dsReverseSlipCanc.setColumn(0, "TY_SALARY", this.cboTY_SALARY.value);
		this.dsReverseSlipCanc.setColumn(0, "SN_SALARY", this.cboSN_SALARY.value);
		this.dsReverseSlipCanc.setColumn(0, "CD_TRADE", this.dsList.getColumn(this.dsList.rowposition, "CD_TRADE_RETURN")); //반제전표
		this.dsReverseSlipCanc.setColumn(0, "CD_DEPT_BH", this.AuthClient.CD_DEPT);	
		this.dsReverseSlipCanc.setColumn(0, "ID_USER", this.AuthClient.ID_USER);
		
		var strSvcId    = "branchAutoslipCancel";
		var strSvcType  = "save";
		var inProc		= "_dsProc";
		var inData      = "branchAutoslipCancel=dsReverseSlipCanc";
		var outData     = "";
		var strArg      = "";
		var callBackFnc = "fnCallback";
		
		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
							strSvcType , 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
							callBackFnc); // 통신방법 정의 [생략가능]
	}else{
		this.FormBtns.Select.click();
	}
}

//반제전표 조회
this.fnReverseSlipInq = function(){
	if (!this.gfnGridIsRow(this.dxGrid)) { return false; }
	
	var CD_TRADE_RETURN = this.gfnTrim(this.dsList.getColumn(this.dsList.rowposition, "CD_TRADE_RETURN"));
	if (this.gfnIsNull(CD_TRADE_RETURN)) {
 		this.gfnAlert("반제전표는 필수입니다.");
 		return;
 	}
 	//var cdSlip = CD_TRADE.substr(0,14);
 	
 	var param = {};
 	param.IUD_FLAG = "S";
 	param.CD_TRADE = CD_TRADE_RETURN;
 	this.gfnFormOpen("DHA", "DHA_ISSUESLIP", "", param, this.getOffsetWidth(), this.getOffsetHeight());
}


/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.ccfCD_CORP = this.divSearch.form.ccfCD_CORP;//법인
	this.ctclYM_SALARY = this.divSearch.form.ctclYM_SALARY;//지급년월
	this.cboTY_SALARY = this.divSearch.form.cboTY_SALARY;//지급구분
	this.cboSN_SALARY = this.divSearch.form.cboSN_SALARY;

	this.dxGrid = this.divData.form.objGrid;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	this.ccfCD_CORP.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.ccfCD_CORP.AfterCDTextChanged = "fnAfterCDTextChanged";	
	
	this.gfnGridInit(this.dxGrid, this.dsList, "DA", "DAU_SALARYBANK");
	this.dxGrid.AfterAllCheck          = "fnGridAfterAllCheck";
};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_CORP", "string");
	this.dsSelect.addColumn("YM_SALARY", "string");
	this.dsSelect.addColumn("TY_SALARY", "string");
	this.dsSelect.addColumn("SN_SALARY", "int");
	this.dsSelect.addColumn("CD_MODULE", "string");
	
	//이체취소
	this.dsDelete = new Dataset();
	this.dsDelete.addColumn("CD_CORP", "string");
	this.dsDelete.addColumn("ID_SABUN", "string");
	this.dsDelete.addColumn("SITE_NO", "string");
	this.dsDelete.addColumn("FL_DATE", "string");
	this.dsDelete.addColumn("FL_TIME", "string");
	this.dsDelete.addColumn("FL_SEQ", "bigdecimal");
	this.dsDelete.addColumn("SEND_GB", "string");
	this.dsDelete.addColumn("ERP_GUBUN", "string");
	this.dsDelete.addColumn("ERP_KEY1", "string");
	this.dsDelete.addColumn("ERP_KEY2", "string");
	this.dsDelete.addColumn("ID_USER", "string");	
	
	//반제전표취소
	this.dsReverseSlipCanc = new Dataset();
	this.dsReverseSlipCanc.addColumn("CD_CORP", "string");
	this.dsReverseSlipCanc.addColumn("YM_SALARY", "string");
	this.dsReverseSlipCanc.addColumn("TY_SALARY", "string");
	this.dsReverseSlipCanc.addColumn("SN_SALARY", "int");
	this.dsReverseSlipCanc.addColumn("CD_TRADE", "string");	
	this.dsReverseSlipCanc.addColumn("CD_DEPT_BH", "string");	
	this.dsReverseSlipCanc.addColumn("ID_USER", "string");	

};

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
 	if(!this.fnSelectValid()) return;
 	
 	this.dsSelect.clearData();
 	this.dsSelect.addRow();
	
	this.dsSelect.setColumn(0, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
	this.dsSelect.setColumn(0, "YM_SALARY", this.dsSearch.getColumn(0, "YM_SALARY"));
	this.dsSelect.setColumn(0, "TY_SALARY", this.dsSearch.getColumn(0, "TY_SALARY"));
	this.dsSelect.setColumn(0, "SN_SALARY", this.dsSearch.getColumn(0, "SN_SALARY"));	
	this.dsSelect.setColumn(0, "CD_MODULE", this.FormInfo.CD_MODULE);	
 		
 	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// trabsaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
};

/*
 *	입력 버튼
 */
this.fnAdd = function() {
//	this.gfnGridAdd(this.dxGrid);
}
/*
 *	삭제 버튼
 */
this.fnDel = function() {
// 	this.gfnGridDel(this.dxGrid);
}

/*
 *	저장 버튼
 */
this.fnSave = function() {
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValid = function() {
	if (this.gfnIsNull(this.ccfCD_CORP.form.CDTextBox.value)) {
		this.fnValidCallback = function() {
			this.ccfCD_CORP.form.CDTextBox.setFocus();
		}
		this.gfnAlert("법인코드를 입력하세요.", "fnValidCallback");
		return false;
	}
	else if (this.gfnIsNull(this.ctclYM_SALARY.form.TextBox.value)) {
		this.fnValidCallback = function() {
			this.ctclYM_SALARY.form.TextBox.setFocus();
		}
		this.gfnAlert("지급년월을 입력하세요.", "fnValidCallback");
		return false;
	}
	else if (this.gfnIsNull(this.cboTY_SALARY.value)) {
		this.fnValidCallback = function() {
			this.cboTY_SALARY.setFocus();
		}
		this.gfnAlert("지급구분을 선택하세요.", "fnValidCallback");
		return false;
	}
	
	return true;
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);
		this.fnExtendButtonEnable();
	}
	else if(svcID == "delete"){
		if (errorCode == 0) {
			this.gfnAlert("급여이체취소가 완료되었습니다.");	
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "branchAutoslipCancel"){
		if (errorCode == 0) {
			this.gfnAlert("반제전표취소가 완료되었습니다.");	
			this.FormBtns.Select.click();			
		} else {
			this.gfnAlert(errorMsg);
		}
	}
};

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
 this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	
	if(id == "ccfCD_CORP") { // 법인코드
		dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
		dsUserParam.setColumn(nrow, "CD_DEPT", this.AuthClient.CD_DEPT);
 	}
 	
	return true; 
};

this.fnAfterCDTextChanged = function(id, codeFindData) {
};
/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
 this.divData_objGrid_oncellclick = function(obj:nexacro.Grid, e:nexacro.GridClickEventInfo) {
	this.fnExtendButtonEnable();
};
this.fnGridAfterAllCheck = function(obj:nexacro.Grid, cell, check) {
	var sTySend = "";
	for (var i = 0; i < this.dsList.rowcount; i++) {
		sTySend = this.dsList.getColumn(i, "BTN_SEND");
		// 전송중, 완료 내역 체크에서 제외
		if (sTySend == "N") {
			this.dsList.set_enableevent(false);
			this.dsList.setColumn(i, "CHK", 0);
			this.dsList.setColumn(i, this.ucFlag) == ""
			this.dsList.set_enableevent(true);
		}
	}
}
/************************************************************************
 * 확장버튼 이벤트
 ************************************************************************/
 
/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo){
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
	}
};
]]></Script>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfCD_CORP.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_CORP"/>
      <BindItem id="item1" compid="divSearch.form.ccfCD_CORP.form.DSTextBox" propid="value" datasetid="dsSearch" columnid="DS_CORP"/>
      <BindItem id="item2" compid="divSearch.form.ctclYM_SALARY.form.TextBox" propid="value" datasetid="dsSearch" columnid="YM_SALARY"/>
      <BindItem id="item3" compid="divSearch.form.cboTY_SALARY" propid="value" datasetid="dsSearch" columnid="TY_SALARY"/>
      <BindItem id="item4" compid="divSearch.form.cboSN_SALARY" propid="value" datasetid="dsSearch" columnid="SN_SALARY"/>
    </Bind>
  </Form>
</FDL>
