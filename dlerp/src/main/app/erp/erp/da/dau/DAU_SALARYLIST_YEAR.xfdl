<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="DAU_SALARYLIST_YEAR" width="1280" height="720" titletext="사원별 연간급여현황" onload="form_onload">
    <Layouts>
      <Layout height="720" width="1280">
        <Div id="divSearch" taborder="0" left="0" top="0" height="46.0" right="0" cssclass="div_SEARCH_Bg">
          <Layouts>
            <Layout>
              <!--  대상년월 -->
              <Static id="staYM_BASE" taborder="4" text="대상년월" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ctclYM_BASE_FR" taborder="0" left="staYM_BASE:0.0" top="10.0" width="80" height="24.0" url="cmm::cmmCalMM.xfdl"/>
              <Static id="staYM_BASE_TERM" taborder="7" text="~" left="ctclYM_BASE_FR:0.0" top="10.0" width="30.0" height="24.0" textAlign="center" cssclass="sta_WF_AC"/>
              <Div id="ctclYM_BASE_TO" taborder="8" left="staYM_BASE_TERM:0.0" top="10.0" width="80" height="24.0" url="cmm::cmmCalMM.xfdl"/>
              <!-- 법인 -->
              <Static id="staCD_CORP" taborder="6" text="법인" left="ctclYM_BASE_TO:0.0" top="10.0" width="66" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfCD_CORP" CDTextWidth="50" taborder="3" left="staCD_CORP:0.0" top="10.0" width="250" height="24.0" url="cmm::cmmCodeFind.xfdl" CodeFindName="DAX_CFCORP_CODEFIND" BeforeUserDataSetParam="fnBeforeUserDataSetParam" AfterCDTextChanged="fnAfterCDTextChanged" text=""/>
              <!-- 지급구분 -->
              <Static id="staTY_SALARY" taborder="5" text="지급구분" left="ccfCD_CORP:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Combo id="cboTY_SALARY" taborder="1" left="staTY_SALARY:0.0" top="10.0" width="80" height="24.0" innerdataset="dsTY_SALARY" datacolumn="DS_CODE" codecolumn="CD_CODE" index="0" value="S" readonly="false" text="급여"/>
              <!-- 차수 -->
              <Static id="staSN_SALARY" taborder="9" text="차수" left="cboTY_SALARY:0.0" top="10.0" width="66" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Combo id="cboSN_SALARY" taborder="2" left="staSN_SALARY:0.0" top="10.0" width="60" height="24.0" innerdataset="dsSN_SALARY" datacolumn="VALUE" codecolumn="CODE" index="-1" value="1" text="급여" readonly="false"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="1" left="0" top="divSearch:10" bottom="0" right="0" ondragmove="divData_ondragmove">
          <Layouts>
            <Layout>
              <Div id="divSplitter" taborder="2" left="50.00%" top="0" width="5" height="100.00%" cursor="ew-resize" ondrag="divData_divSplitter_ondrag" bottom="0" cssclass="div_Splitter"/>
              <Div id="divDataLeft" taborder="0" left="0" top="0" bottom="0" right="divSplitter:5" ondragmove="divData_ondragmove">
                <Layouts>
                  <Layout>
                    <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0" scrolltype="both"/>
                  </Layout>
                </Layouts>
              </Div>
              <Div id="divDataRight" taborder="1" left="divSplitter:5" top="0" bottom="0" right="0">
                <Layouts>
                  <Layout>
                    <Grid id="objGridSub" sub="true" taborder="0" left="0" top="0" bottom="0" right="0"/>
                  </Layout>
                </Layouts>
              </Div>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Objects>
      <Dataset id="dsList" onrowposchanged="dsList_onrowposchanged">
        <ColumnInfo>
          <Column id="CD_CORP" type="STRING" size="256"/>
          <Column id="DS_CORP" type="STRING" size="256"/>
          <Column id="ID_SABUN" type="STRING" size="256"/>
          <Column id="DS_HNAME" type="STRING" size="256"/>
          <Column id="DS_DEPT" type="STRING" size="256"/>
          <Column id="DS_POSITION" type="STRING" size="256"/>
          <Column id="DS_OCCUPATION" type="STRING" size="256"/>
          <Column id="DS_DUTY" type="STRING" size="256"/>
          <Column id="DT_JOIN" type="STRING" size="256"/>
          <Column id="DT_GROUPJOIN" type="STRING" size="256"/>
          <Column id="DT_RETIRE" type="STRING" size="256"/>
          <Column id="DS_RETIRE" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DAUPR_SALARYLIST_BASE_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">combo</Col>
            <Col id="SP">DAZPR_COMMONCODE_COMBO</Col>
          </Row>
          <Row>
            <Col id="TARGET">d_select</Col>
            <Col id="SP">DAUPR_SALARYLIST_YEAR_SELECT</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="FR_SALARY" type="STRING" size="256"/>
          <Column id="TO_SALARY" type="STRING" size="256"/>
          <Column id="CD_CORP" type="STRING" size="256"/>
          <Column id="TY_SALARY" type="STRING" size="256"/>
          <Column id="SN_SALARY" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
      <Dataset id="dsTY_SALARY">
        <ColumnInfo>
          <Column id="CD_CODE" type="STRING" size="256"/>
          <Column id="DS_CODE" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="dsSN_SALARY">
        <ColumnInfo>
          <Column id="CODE" type="STRING" size="256"/>
          <Column id="VALUE" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CODE">%</Col>
            <Col id="VALUE">전체</Col>
          </Row>
          <Row>
            <Col id="CODE">1</Col>
            <Col id="VALUE">1</Col>
          </Row>
          <Row>
            <Col id="VALUE">2</Col>
            <Col id="CODE">2</Col>
          </Row>
          <Row>
            <Col id="CODE">3</Col>
            <Col id="VALUE">3</Col>
          </Row>
          <Row>
            <Col id="CODE">4</Col>
            <Col id="VALUE">4</Col>
          </Row>
          <Row>
            <Col id="CODE">5</Col>
            <Col id="VALUE">5</Col>
          </Row>
          <Row>
            <Col id="CODE">6</Col>
            <Col id="VALUE">6</Col>
          </Row>
          <Row>
            <Col id="CODE">7</Col>
            <Col id="VALUE">7</Col>
          </Row>
          <Row>
            <Col id="CODE">8</Col>
            <Col id="VALUE">8</Col>
          </Row>
          <Row>
            <Col id="CODE">9</Col>
            <Col id="VALUE">9</Col>
          </Row>
          <Row>
            <Col id="CODE">10</Col>
            <Col id="VALUE">10</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSalCate" onrowposchanged="dsList_onrowposchanged">
        <ColumnInfo>
          <Column id="NO_SEQ" type="INT" size="256"/>
          <Column id="CD_GUBUN" type="STRING" size="256"/>
          <Column id="CD_CODE" type="STRING" size="256"/>
          <Column id="DS_CODE" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="dsListSub">
        <ColumnInfo>
          <Column id="CD_CORP" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
    </Objects>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);
	this.gfnFormInfo(this);
	// ---------------------------//

	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	this.fnSetCombo();
	
	this.cboSN_SALARY.set_index(0);
	
	var sYYMM = this.gfnGetDate().substr(0,6); 
	
	//대상년월
	this.ctclYM_BASE_FR.form.TextBox.set_value(sYYMM);
	this.ctclYM_BASE_TO.form.TextBox.set_value(sYYMM);
	
	//법인 셋팅
	this.divSearch.form.ccfCD_CORP.form.CDTextBox.set_value(this.AuthClient.CD_CORP);
	this.divSearch.form.ccfCD_CORP.form.DSTextBox.set_value(this.AuthClient.DS_CORP);

	//this.FormBtns.Select.click();
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
	//this.FormBtns.Reset.set_enable(true);
	//this.gfnUseSubBtn(true, this.divData, this.divData.form.divSplitter); // divSplitter sync
};

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	//대상년월
	this.ctclYM_BASE_FR = this.divSearch.form.ctclYM_BASE_FR;
	this.ctclYM_BASE_TO = this.divSearch.form.ctclYM_BASE_TO;
	
	//지급구분
	this.cboTY_SALARY = this.divSearch.form.cboTY_SALARY;
	this.cboSN_SALARY = this.divSearch.form.cboSN_SALARY;
	//법인
	this.ccfCD_CORP = this.divSearch.form.ccfCD_CORP;


	this.dxGrid = this.divData.form.divDataLeft.form.objGrid;
	this.dxGridSub = this.divData.form.divDataRight.form.objGridSub;	


};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	//this.ccfCD_CORP.CodeFindName = "DAX_CFCORP_CODEFIND";
	//this.ccfCD_CORP.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	//this.ccfCD_CORP.AfterCDTextChanged = "fnAfterCDTextChanged";	
	
	this.gfnGridInit(this.dxGrid, this.dsList, "DA", "DAU_SALARYLIST_YEAR");

	this.dxGrid.set_selecttype("cell");	
	this.dxGrid.addEventHandler("onselectchanged", this.fnGrid_RowCellChanged, this);
		
	this.gfnGridInit(this.dxGridSub, this.dsListSub, "DA", "DAU_SALARYLIST_YEAR_SUB");


};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_CORP", "string");
	this.dsSelect.addColumn("FR_SALARY", "string");
	this.dsSelect.addColumn("TO_SALARY", "string");
	this.dsSelect.addColumn("TY_SALARY", "string");
	this.dsSelect.addColumn("SN_SALARY", "string");
	
	this.dsSelectSub = new Dataset();
	this.dsSelectSub.addColumn("CD_CORP", "string");
	this.dsSelectSub.addColumn("FR_SALARY", "string");
	this.dsSelectSub.addColumn("TO_SALARY", "string");
	this.dsSelectSub.addColumn("TY_SALARY", "string");
	this.dsSelectSub.addColumn("SN_SALARY", "string");
	this.dsSelectSub.addColumn("ID_SABUN", "string");	
};

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 this.fnSetCombo = function() {

   this.dsCombo = new Dataset();
   this.dsCombo.addColumn("TY_SEL", "string");
   this.dsCombo.addColumn("CD_PREFIX", "string");
   this.dsCombo.addColumn("CD_UPPREFIX", "string");
   
   this.dsCombo.addRow();
   this.dsCombo.setColumn(0, "TY_SEL", "P");
   this.dsCombo.setColumn(0, "CD_PREFIX", "GS");
   this.dsCombo.setColumn(0, "CD_UPPREFIX", "");

	var strSvcId    = "combo";
	var strSvcType  = "select";
	var inProc		= "_dsProc";
	var inData      = "combo=dsCombo";
	var outData     = "dsTY_SALARY=combo0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
};

 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if(!this.fnSelectValidate()) return;
	
	this.gfnGridBeforeSelect(this.dxGrid);
	this.dsListSub.clearData();
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	
	this.dsSelect.setColumn(0, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
	this.dsSelect.setColumn(0, "FR_SALARY", this.dsSearch.getColumn(0, "FR_SALARY"));
	this.dsSelect.setColumn(0, "TO_SALARY", this.dsSearch.getColumn(0, "TO_SALARY"));
	this.dsSelect.setColumn(0, "TY_SALARY", this.dsSearch.getColumn(0, "TY_SALARY"));
	this.dsSelect.setColumn(0, "SN_SALARY", this.dsSearch.getColumn(0, "SN_SALARY"));

	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// trabsaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
};

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	//this.gfnGridAdd(this.dxGrid);
};

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	//this.gfnGridDel(this.dxGrid);
};

/*
 *	저장 버튼
 */
this.fnSave = function() {
	
};

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * 서브 버튼 이벤트
 ************************************************************************/
this.fnSelectSub = function() {
	//if (this.dxGrid.rowcount == 0 || this.dxGrid.currentrow < 0) return false;
	if (!this.gfnGridIsRow(this.dxGrid)) { return false; }
	
	
	var ID_SABUN = this.dsList.getColumn(this.dsList.rowposition, "ID_SABUN");
	if (this.gfnIsNull(ID_SABUN)) {
		return false;
	}
	
	this.gfnGridBeforeSelect(this.dxGridSub);
	
	this.dsSelectSub.clearData();
	this.dsSelectSub.addRow();
	this.dsSelectSub.setColumn(0, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
	this.dsSelectSub.setColumn(0, "FR_SALARY", this.dsSearch.getColumn(0, "FR_SALARY"));
	this.dsSelectSub.setColumn(0, "TO_SALARY", this.dsSearch.getColumn(0, "TO_SALARY"));
	this.dsSelectSub.setColumn(0, "TY_SALARY", this.dsSearch.getColumn(0, "TY_SALARY"));
	this.dsSelectSub.setColumn(0, "SN_SALARY", this.dsSearch.getColumn(0, "SN_SALARY"));
	this.dsSelectSub.setColumn(0, "ID_SABUN", this.dsList.getColumn(this.dsList.rowposition, "ID_SABUN"));

	var strSvcId    = "detail";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "d_select=dsSelectSub";
	var outData     = "dsSalCate=d_select0 dsListSub=d_select1";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

this.fnAddSub = function() {
	//this.gfnGridAdd(this.dxGridSub);
}
this.fnDelSub = function() {
	//this.gfnGridDel(this.dxGridSub);
}
this.fnSaveSub = function() {
}
this.fnExcelSub = function() {
	this.gfnExcelExport(this.dxGridSub);
}

/************************************************************************
 * Validate
 ************************************************************************/
this.fnSelectValidate = function() {

	var validate = true;

	if (this.gfnIsNull(this.ctclYM_BASE_FR.form.TextBox.value)) {
		validate = false;
		this.fnVaidateCallback = function() {
			this.ctclYM_BASE_FR.form.TextBox.setFocus();
		}
		this.gfnAlert("대상년월을 입력하세요.", "fnVaidateCallback");
	}
	else if (this.gfnIsNull(this.ctclYM_BASE_TO.form.TextBox.value)) {
		validate = false;
		this.fnVaidateCallback = function() {
			this.ctclYM_BASE_TO.form.TextBox.setFocus();
		}
		this.gfnAlert("대상년월을 입력하세요.", "fnVaidateCallback");
	}
	else if (this.gfnIsNull(this.ccfCD_CORP.form.CDTextBox.value)) {
		validate = false;
		this.fnVaidateCallback = function() {
			this.ccfCD_CORP.form.CDTextBox.setFocus();
		}
		this.gfnAlert("법인을 입력하세요.", "fnVaidateCallback");
	}

	return validate;
};
/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg, args)
{

	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);
	
	}else if (svcID == "combo") {
		this.fn_setCommDsEmptyRow(this.dsTY_SALARY, "%", "전체");
		this.cboTY_SALARY.set_index(0);
		
	}else if (svcID == "detail") {
		this.gfnGridAfterSelect(this.dxGridSub);	
		this.fnSetGridCol();
	}
	
}
this.fn_setCommDsEmptyRow = function(dataset, code, name){
	dataset.insertRow(0);
	dataset.setColumn(0, "CD_CODE", code);
	dataset.setColumn(0, "DS_CODE", name);	
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {

 	switch(id) {
		case "ccfCD_CORP": // 법인코드
			dsUserParam.setColumn(nrow, "CD_CORP", this.AuthClient.CD_CORP);
			dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
			dsUserParam.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
			break;
		default:
 	}
	
 	return true;
};

this.fnAfterCDTextChanged = function (id, codeFindData){

};

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
this.fnGrid_RowCellChanged = function(obj:nexacro.Grid,e:nexacro.GridSelectEventInfo)
{
    if ((obj.oldrow > -1 && obj.oldrow == e.row)
		|| (obj.oldrow == -1 && e.oldrow != e.row)) {
		this.FormBtns.SubSelect.click();
		obj.oldrow = -1;
	}
};


 /************************************************************************
 * 확장버튼 이벤트
 ************************************************************************/
 
 /************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);
	}
};

this.fnSetGridCol = function (){

	var dsTarget = this.dsSalCate;

	var ncol1 = 0;
	var ncol2 = 0;
	var ncol3 = 1;
	var cols = 0; // merge 되면서 cell index가 조정된다.
	this.dxGridSub.set_enableredraw(false);
	this.dsListSub.set_enableevent(false);

	//this.gfnGridInit(this.dxGridSub, this.dsListSub, "DA", "DAU_SALARYLIST_YEAR_SUB");
	
	
    this.setWaitCursor(true);
	for (var i = 0; i < this.dsSalCate.rowcount; i++) {
		//if(this.dsSalCate.getColumn(i, "YN_GUBUN") == 1){
// 			var GUBUN1 = this.dsSalCate.getColumn(i, "GUBUN1");
// 			var objColinfo = new ColumnInfo();
// 			objColinfo.set_type("DOUBLE");
// 			objColinfo.set_size(256);
//
//			this.dsListSub.addColumn(dsTarget.getColumn(i,"CD_GUBUN"),objColinfo);
//			
// 			var gubunCd = ""
// 			if(GUBUN1 == "소득"){
// 				gubunCd = "S"
// 			}else if(GUBUN1 == "공제"){
// 				gubunCd = "G"
// 			}

			ncol1 = this.dxGridSub.appendContentsCol();		
			this.dxGridSub.setFormatColProperty(ncol1, "size", 150);
			
			//디버깅용
			//this.dxGridSub.setCellProperty("head", ncol1, "text", "["+dsTarget.getColumn(i,"CD_GUBUN") + "] " +dsTarget.getColumn(i, "DS_CODE"));		
			
			this.dxGridSub.setCellProperty("head", ncol1, "text", dsTarget.getColumn(i, "DS_CODE"));		
			
			this.dxGridSub.setCellProperty("body", ncol1, "displaytype", "number");
			this.dxGridSub.setCellProperty("body", ncol1, "text", "bind:" + dsTarget.getColumn(i,"CD_GUBUN"));
			this.dxGridSub.setCellProperty("body", ncol1, "cssclass", "expr:dataset.getRowLevel(currow) == 1 ? 'subtotal': nx_flag == '#' ? 'filter' : ''");
			// 총합계 추가
			this.dxGridSub.setCellProperty("summ", ncol1, "displaytype", "number");
			this.dxGridSub.setCellProperty("summ", ncol1 , "text", "expr:dataset.getSum('" + dsTarget.getColumn(i,"CD_GUBUN") + "')");
		    this.dxGridSub.setCellProperty("summ", ncol1, "displaytype", "mask");
			this.dxGridSub.setCellProperty("summ", ncol1, "maskeditformat", "#,###");
// 
// 			var rtn = this.dxGridSub.mergeContentsCell("head", 0, ncol1, 0, ncol1+1, ncol1 - cols, false);
// 			if(rtn > -1) {
// 				this.dxGridSub.setCellProperty("head", rtn, "text", dsTarget.getColumn(i,"DS_ALLOW"));
// 				cols = cols + 1;
// 			}
		//}
	}

	this.dxGridSub.set_enableredraw(true);
	this.dsListSub.set_enableevent(true);
	this.setWaitCursor(false);

}


this.divData_ondragmove = function(obj:nexacro.Div,e:nexacro.DragEventInfo)
{
	if(e.userdata == "splitter") {
		this.divData.form.divSplitter.set_left(e.clientx);
		this.divData.form.resetScroll();
	}
};

this.divData_divSplitter_ondrag = function(obj:nexacro.Div,e:nexacro.DragEventInfo)
{
	e.set_userdata("splitter");
	return true;
};
]]></Script>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ctclYM_BASE_FR.form.TextBox" propid="value" datasetid="dsSearch" columnid="FR_SALARY"/>
      <BindItem id="item1" compid="divSearch.form.ctclYM_BASE_TO.form.TextBox" propid="value" datasetid="dsSearch" columnid="TO_SALARY"/>
      <BindItem id="item2" compid="divSearch.form.ccfCD_CORP.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_CORP"/>
      <BindItem id="item3" compid="divSearch.form.cboTY_SALARY" propid="value" datasetid="dsSearch" columnid="TY_SALARY"/>
      <BindItem id="item4" compid="divSearch.form.cboSN_SALARY" propid="value" datasetid="dsSearch" columnid="SN_SALARY"/>
    </Bind>
  </Form>
</FDL>
