<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="New Form" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0" top="0" height="46.0" right="0" cssclass="div_SEARCH_Bg" formscrolltype="none">
          <Layouts>
            <Layout>
              <Static id="staID_SABUN" taborder="0" text="성명" left="0.0" top="10.0" width="66.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfID_SABUN" CodeFindName="DAX_CFBASEINFO_ALL" CDTextWidth="80" taborder="1" left="staID_SABUN:0.0" top="10.0" width="250" height="24.0" url="cmm::cmmCodeFind.xfdl" text=""/>
              <Edit id="edtID_PERSON" taborder="2" left="ccfID_SABUN:0.0" top="10.0" width="60" height="24.0" visible="false"/>
              <Static id="staYN_CLOSE" taborder="3" text="기한" left="ccfID_SABUN:0.0" top="10.0" width="66.0" height="24.0" rtl="false" cssclass="sta_WF_SchLabelE"/>
              <Combo id="cboDS_WORK" taborder="4" left="staYN_CLOSE:0.0" top="10.0" width="201" height="24.0" index="0" value="%" onitemchanged="fnSearchInit" innerdataset="dsListDt" codecolumn="DS_WORK" datacolumn="DS_WORK"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0" oncellclick="divData_objGrid_oncellclick"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
		
	this.dsSearch.setColumn(0, "ID_SABUN", this.AuthClient.ID_USER);	
	this.divSearch.form.ccfID_SABUN.form.DSTextBox.set_value(this.AuthClient.DS_HNAME);
	this.dsSearch.setColumn(0, "ID_PERSON", this.AuthClient.ID_PERSON);	

	if(this.FormInfo.GR_SEARCH == "1"){
		//this.ccfCD_CORP.set_enable(true);
		this.ccfID_SABUN.set_enable(true);
	}else{
		//this.ccfCD_CORP.set_enable(false);
		this.ccfID_SABUN.set_enable(false);
	}	
	
	var today = this.gfnGetDate();
	this.dsSearch.setColumn(0, "YM_WORK", today.substr(0,6));
	
	// 근로기한 조회
	this.fnSelectDt();
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btnPlanCre = this.gfnFormButtonAdd("btnPlanCre", "fnPlanCre", "계획생성");	
	this.btnElctrncPmnt = this.gfnFormButtonAdd("btnElctrncPmnt", "fnElctrncPmnt", "전자결재");
	this.btnElctrncPmntDoc = this.gfnFormButtonAdd("btnElctrncPmntDoc", "fnElctrncPmntDoc", "전자결재문서조회");	
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {		
	this.ccfID_SABUN = this.divSearch.form.ccfID_SABUN;
	this.edtID_PERSON = this.divSearch.form.edtID_PERSON;
	this.ctclYM_WORK = this.divSearch.form.ctclYM_WORK;

	this.dxGrid = this.divData.form.objGrid;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	// 그리드 초기화
	this.gfnGridInit(this.dxGrid, this.dsList, "DA", "DAG_WORKDAY_PLAN");
	
	this.ccfID_SABUN.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.ccfID_SABUN.AfterCDTextChanged = "fnAfterCDTextChanged"; 
	
	//this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforeUserDataSetParam";
	//this.dxGrid.AfterCDTextChanged = "fnGrid_AfterCDTextChanged";
	
	// row 수정가능 여부
	this.dxGrid.EnterCell = "fnGrid_EnterCell";
	
	this.dxGrid.set_selecttype("cell");	
	
	// 토요근무여부 체크변경 불가능한 row는 회색 처리
	this.gfnGridColumnColor(this.dxGrid, "CHK_SATURDAY", "BACK_Footer", "YN_SATURDAY != 'Y'");
	
	/*
	// 소정 근로시간 수정 불가능한 row는 회색 처리
	this.gfnGridColumnColor(this.dxGrid, "HH_SWORK", "BACK_Footer", "YN_WORK != 'Y'");
	this.gfnGridColumnColor(this.dxGrid, "MM_SWORK", "BACK_Footer", "YN_WORK != 'Y'");
	this.gfnGridColumnColor(this.dxGrid, "HH_EWORK", "BACK_Footer", "YN_WORK != 'Y'");
	this.gfnGridColumnColor(this.dxGrid, "MM_EWORK", "BACK_Footer", "YN_WORK != 'Y'");
	*/
	
	var colDT_WORK = this.dxGrid.getBindCellIndex("body", "DT_WORK");		// 근무일자
	
	var colHH_SEARLY = this.dxGrid.getBindCellIndex("body", "HH_SEARLY");	// 조기근로시간
	var colMM_SEARLY = this.dxGrid.getBindCellIndex("body", "MM_SEARLY");	// 조기근로시간	
	var colHH_SOVER = this.dxGrid.getBindCellIndex("body", "HH_SOVER");	// 연장근로 시작시간
	var colMM_SOVER = this.dxGrid.getBindCellIndex("body", "MM_SOVER");	// 연장근로 시작시간	
	var colHH_EOVER = this.dxGrid.getBindCellIndex("body", "HH_EOVER");	// 의무연장근로 종료시간
	var colMM_EOVER = this.dxGrid.getBindCellIndex("body", "MM_EOVER");	// 의무연장근로 종료시간
	
	var colHH_SWORK = this.dxGrid.getBindCellIndex("body", "HH_SWORK");	// 소정근로 시작시간
	var colMM_SWORK = this.dxGrid.getBindCellIndex("body", "MM_SWORK");	// 소정근로 시작시간
	var colHH_EWORK = this.dxGrid.getBindCellIndex("body", "HH_EWORK");	// 소정근로 종료시간
	var colMM_EWORK = this.dxGrid.getBindCellIndex("body", "MM_EWORK");	// 소정근로 종료시간
	
	//this.dxGrid.setCellProperty("body",colDS_MON,"displaytype","expr:currow==2?'text':(currow==6?'text':(currow==9?'text':(currow==11?'text':'normal')))");	 
	this.dxGrid.setCellProperty("body",colDT_WORK,"displaytype","expr:dataset.getColumn(currow, 'TY_GUBUN')=='S'?'text':'date'");	 
	
	this.dxGrid.setCellProperty("body",colHH_SEARLY,"displaytype","expr:dataset.getColumn(currow, 'TY_GUBUN')=='S'?'text':'normal'");	 
	this.dxGrid.setCellProperty("body",colMM_SEARLY,"displaytype","expr:dataset.getColumn(currow, 'TY_GUBUN')=='S'?'text':'normal'");		
	this.dxGrid.setCellProperty("body",colHH_SOVER,"displaytype","expr:dataset.getColumn(currow, 'TY_GUBUN')=='S'?'text':'normal'");	 
	this.dxGrid.setCellProperty("body",colMM_SOVER,"displaytype","expr:dataset.getColumn(currow, 'TY_GUBUN')=='S'?'text':'normal'");	
	this.dxGrid.setCellProperty("body",colHH_EOVER,"displaytype","expr:dataset.getColumn(currow, 'TY_GUBUN')=='S'?'text':'normal'");	 
	this.dxGrid.setCellProperty("body",colMM_EOVER,"displaytype","expr:dataset.getColumn(currow, 'TY_GUBUN')=='S'?'text':'normal'");
	
	this.dxGrid.setCellProperty("body",colHH_SWORK,"displaytype","expr:dataset.getColumn(currow, 'TY_GUBUN')=='S'?'text':'normal'");
	this.dxGrid.setCellProperty("body",colMM_SWORK,"displaytype","expr:dataset.getColumn(currow, 'TY_GUBUN')=='S'?'text':'normal'");
	this.dxGrid.setCellProperty("body",colHH_EWORK,"displaytype","expr:dataset.getColumn(currow, 'TY_GUBUN')=='S'?'text':'normal'");
	this.dxGrid.setCellProperty("body",colMM_EWORK,"displaytype","expr:dataset.getColumn(currow, 'TY_GUBUN')=='S'?'text':'normal'");
	
};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	
	this.dsSelectDt = new Dataset();
	this.dsSelectDt.addColumn("ID_PERSON", "int");
	this.dsSelectDt.addColumn("ID_SABUN", "string");
	this.dsSelectDt.addColumn("ID_USER", "string");	
	
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_CORP", "string");
	this.dsSelect.addColumn("TY_GUBUN", "string");
	this.dsSelect.addColumn("DT_WORK_START", "string");
	this.dsSelect.addColumn("DT_WORK_END", "string");
	this.dsSelect.addColumn("ID_PERSON", "int");
	this.dsSelect.addColumn("ID_SABUN", "string");
	this.dsSelect.addColumn("GR_SEARCH", "string");
	this.dsSelect.addColumn("GR_CORP", "string");
	this.dsSelect.addColumn("GR_DEPT", "string");
	this.dsSelect.addColumn("ID_USER", "string");
	
	this.dsSave = new Dataset();
	this.dsSave.addColumn("ID_PERSON", "int");
	this.dsSave.addColumn("DT_WORK", "string");
	this.dsSave.addColumn("CD_CORP", "string");
	this.dsSave.addColumn("ID_SABUN", "string");
	this.dsSave.addColumn("CD_WORK", "string");
	this.dsSave.addColumn("HH_SOVER", "string");
	this.dsSave.addColumn("MM_SOVER", "string");
	this.dsSave.addColumn("HH_EOVER", "string");
	this.dsSave.addColumn("MM_EOVER", "string");
	this.dsSave.addColumn("TM_BREAK", "datetime");
	this.dsSave.addColumn("DT_CHANGE", "string");
	this.dsSave.addColumn("HH_SWORK_ETC", "string");
	this.dsSave.addColumn("MM_SWORK_ETC", "string");
	this.dsSave.addColumn("HH_EWORK_ETC", "string");
	this.dsSave.addColumn("MM_EWORK_ETC", "string");
	this.dsSave.addColumn("GR_SEARCH", "string");
	this.dsSave.addColumn("GR_CORP", "string");
	this.dsSave.addColumn("GR_DEPT", "string");
	this.dsSave.addColumn("ID_USER", "string");
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	
	this.dsSelect.setColumn(0, "CD_CORP", this.AuthClient.CD_CORP);
	this.dsSelect.setColumn(0, "TY_GUBUN", this.dsListDt.getColumn(this.dsListDt.rowposition, "TY_GUBUN"));	
	this.dsSelect.setColumn(0, "DT_WORK_START", this.dsListDt.getColumn(this.dsListDt.rowposition, "DT_WORK_START"));
	this.dsSelect.setColumn(0, "DT_WORK_END", this.dsListDt.getColumn(this.dsListDt.rowposition, "DT_WORK_END"));	
	this.dsSelect.setColumn(0, "ID_PERSON", this.dsSearch.getColumn(0, "ID_PERSON"));
	this.dsSelect.setColumn(0, "ID_SABUN", this.dsSearch.getColumn(0, "ID_SABUN"));
	this.dsSelect.setColumn(0, "GR_SEARCH", this.FormInfo.GR_SEARCH);
	this.dsSelect.setColumn(0, "GR_CORP", this.AuthClient.CD_CORP);	
	this.dsSelect.setColumn(0, "GR_DEPT", this.AuthClient.CD_DEPT);
	this.dsSelect.setColumn(0, "ID_USER", this.AuthClient.ID_USER);
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}


// 근로기한 조회
this.fnSelectDt = function() {
	//if (!this.fnSelectValidate()) return false;
	
	if(this.gfnIsNull(this.dsSearch.getColumn(0, "ID_SABUN"))){
		this.fnVaidateCallback = function() {
			this.ccfID_SABUN.form.CDTextBox.setFocus();
		}
		this.gfnAlert("성명을 먼저 입력하세요.", "fnVaidateCallback");
		return;
	}	
	
	// 콤보리스트 지우고 재조회해온다
	this.dsListDt.clearData();
	
	this.dsSelectDt.clearData();
	this.dsSelectDt.addRow();	

	this.dsSelectDt.setColumn(0, "ID_PERSON", this.dsSearch.getColumn(0, "ID_PERSON"));
	this.dsSelectDt.setColumn(0, "ID_SABUN", this.dsSearch.getColumn(0, "ID_SABUN"));
	this.dsSelectDt.setColumn(0, "ID_USER", this.AuthClient.ID_USER);
	
	var strSvcId    = "selectDt";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "selectDt=dsSelectDt";
	var outData     = "dsListDt=selectDt0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}



/*
 *	입력 버튼
 */
this.fnAdd = function() {
	var nrow = this.gfnGridAdd(this.dxGrid); // top (default), bottom, current
	
	//this.dsList.setColumn(nrow, "YR_BASE", this.dsSearch.getColumn(0, "YR_BASE"));
	//this.dsList.setColumn(nrow, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
}

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}

/*
 *	저장 버튼
 */
this.fnSave = function() {
	// 그리드 필수항목 체크
	if (!this.gfnGridValidate(this.dxGrid)) return;	
	
	this.dxGrid.updateToDataset();

	// save SP 한개로 사용하는 경우
	this.dsSave.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "I":
			case "U":
			case "D":
				var nrow = this.dsSave.addRow();
				this.dsSave.setColumn(nrow, "ID_PERSON", this.dsList.getColumn(i, "ID_PERSON"));
				this.dsSave.setColumn(nrow, "DT_WORK", this.dsList.getColumn(i, "DT_WORK"));
				this.dsSave.setColumn(nrow, "CD_CORP", this.dsList.getColumn(i, "CD_CORP"));
				this.dsSave.setColumn(nrow, "ID_SABUN", this.dsList.getColumn(i, "ID_SABUN"));
				this.dsSave.setColumn(nrow, "CD_WORK", this.dsList.getColumn(i, "CD_WORK"));
				this.dsSave.setColumn(nrow, "HH_SOVER", this.dsList.getColumn(i, "HH_SOVER"));
				this.dsSave.setColumn(nrow, "MM_SOVER", this.dsList.getColumn(i, "MM_SOVER"));
				this.dsSave.setColumn(nrow, "HH_EOVER", this.dsList.getColumn(i, "HH_EOVER"));
				this.dsSave.setColumn(nrow, "MM_EOVER", this.dsList.getColumn(i, "MM_EOVER"));
				this.dsSave.setColumn(nrow, "TM_BREAK", this.dsList.getColumn(i, "TM_BREAK"));
				this.dsSave.setColumn(nrow, "DT_CHANGE", this.dsList.getColumn(i, "DT_CHANGE"));
				this.dsSave.setColumn(nrow, "HH_SWORK_ETC", this.dsList.getColumn(i, "HH_SWORK"));
				this.dsSave.setColumn(nrow, "MM_SWORK_ETC", this.dsList.getColumn(i, "MM_SWORK"));
				this.dsSave.setColumn(nrow, "HH_EWORK_ETC", this.dsList.getColumn(i, "HH_EWORK"));
				this.dsSave.setColumn(nrow, "MM_EWORK_ETC", this.dsList.getColumn(i, "MM_EWORK"));
				this.dsSave.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
				this.dsSave.setColumn(nrow, "GR_CORP", this.AuthClient.CD_CORP);
				this.dsSave.setColumn(nrow, "GR_DEPT", this.AuthClient.CD_DEPT);
				this.dsSave.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
				break;
		}
	}
		
	if (this.dsSave.rowcount == 0) return;
	
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "save=dsSave";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {
	var validate = true;
	
	if (this.gfnIsNull(this.dsSearch.getColumn(0,"ID_SABUN"))) {
		validate = false;
		// Alert후 실행할 처리
		this.fnVaidateCallback = function() {
			this.ccfID_SABUN.form.CDTextBox.setFocus();
		}
		this.gfnAlert("성명을 입력하세요.", "fnVaidateCallback");
	}
	
	return validate;
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);	
		
		// 셀 병합
		for (var i = 0; i < this.dsList.rowcount; i++) {
			if(this.dsList.getColumn(i,"TY_GUBUN") == "S"){
				this.dxGrid.set_enableevent(false);
				this.dsList.set_enableevent(false);
				//this.dxGrid.mergeContentsCell("body",i,3,i,10,3,true);
				//this.dxGrid.mergeCell(3,11,i,i );
				
				this.dxGrid.mergeCell(3,12,i,i ); //근무일자~근무구분
				
				this.dxGrid.mergeCell(15,19,i,i ); //소정근로시간
				this.dxGrid.mergeCell(21,25,i,i ); //연장근로시간
				
				this.dsList.set_enableevent(true);
				this.dxGrid.set_enableevent(true);
			}
		}
		
		// 토요근무여부 컬럼 보이거나 숨기기
		/*
		var CHK_SATURDAY_Index = this.dxGrid.getBindCellIndex("body", "CHK_SATURDAY");
		if(this.dsList.getColumn(0,"YN_SATURDAY") == "Y"){
			this.dxGrid.setRealColSize("body", CHK_SATURDAY_Index, 100);
		}else{
			this.dxGrid.setRealColSize("body", CHK_SATURDAY_Index, 0);
		}
		*/
	}
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}	
	} else if(svcID == "selectDt") {
		this.divSearch.form.cboDS_WORK.set_index(0);
	}
}



/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	
	if(id == "ccfID_SABUN") { 
		dsUserParam.setColumn(nrow, "CD_DEPT", this.AuthClient.CD_DEPT);
		dsUserParam.setColumn(nrow, "CD_CORP", this.AuthClient.CD_CORP);
		dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
		dsUserParam.setColumn(nrow, "YN_CORP", "N");
		dsUserParam.setColumn(nrow, "TY_RETIRE", "%");
	}
		
	return true;
};

this.fnAfterCDTextChanged = function(id, codeFindData) {
	var arr = codeFindData; 
	
	if(id == "ccfID_SABUN") {
		if(arr.length > 0) {
			this.edtID_PERSON.set_value(arr[0]["ID_PERSON"]);
			
			// 기한콤보 조회
			this.fnSelectDt();
		}else{
			this.edtID_PERSON.set_value("");
			this.dsListDt.clearData();
		}
	}
};


 this.fnGrid_BeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	/*
	// 사원번호
	if(id == "DAX_CFBASEINFO_ALL") {
		dsUserParam.setColumn(nrow, "CD_DEPT", this.AuthClient.CD_DEPT);
		dsUserParam.setColumn(nrow, "CD_CORP", this.dsList.getColumn(this.dsList.rowposition, "CD_CORP"));
		dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
		dsUserParam.setColumn(nrow, "YN_CORP", "N");
		dsUserParam.setColumn(nrow, "TY_RETIRE", "%");
	}
	*/
	return true;
};

this.fnGrid_AfterCDTextChanged = function(id, codeFindData) {
	/*
	if(id == "DAX_CFFAMILY_CODEFIND") {
		var arr = codeFindData;
		var nRow = this.dsList.rowposition;
		
		if(arr.length > 0) {	
			this.dsList.setColumn(nRow, "CD_FAMILY", arr[0]["CD_FAMILY"]);
			this.dsList.setColumn(nRow, "DS_FAMILY", arr[0]["DS_FAMILY"]);
			// 나이 자동 설정
			this.dsList.setColumn(nRow, "NO_AGE", this.dsList.getColumn(nRow,"YR_BASE") - this.dsList.getColumn(nRow,"ID_RESIDENT").substr(0,4) + 1);
		} else {
			this.dsList.setColumn(nRow, "CD_FAMILY", "");
			this.dsList.setColumn(nRow, "DS_FAMILY", "");
		}
	}
	*/
	return true;
};
/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
 this.fnGrid_EnterCell = function(obj:nexacro.Grid, row, cell) {
	// 수정가능 true, false 처리하려는 컬럼에 대해서만 return 처리할것. 
	var colnm = this.gfnGridGetBindColumnNameByIndex(this.dxGrid, cell);	// 클릭한 cell의 컬럼명

	// 클릭했을때 클릭한 cell을 수정 가능 or 불가능 상태로 만든다.
	// YN_EDIT 값이 Y일때만 수정가능상태
	if(this.dsList.getColumn(row, "TY_GUBUN") != "A") {
		return false;
	}else{
		if(this.dsList.getColumn(row, "YN_CLOSE") == "Y") {
			return false;
		}
	}
	
	// 토요여부 컬럼이 Y 인것만 변경 할수 있다
	if(colnm == "CHK_SATURDAY"){
		if(this.dsList.getColumn(row,"YN_SATURDAY") == "N"){
			return false;
		}
	}
	
	/*
	// YN_WORK = 'Y' 일때 소정 근로시간 수정 가능 
	if(colnm == "HH_SWORK" || colnm == "MM_SWORK" || colnm == "HH_EWORK" || colnm == "MM_EWORK"){
		if(this.dsList.getColumn(row,"YN_WORK") != "Y"){
			return false;
		}
	}
	*/
}

/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
		
		// 근로기한 조회
		//this.fnSelectDt();
	}
};



// 전자결재
this.fnElctrncPmnt = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	if(!this.gfnGridIsRow(this.dxGrid)) return;	
	
	var nICnt = this.dsList.findRow(this.ucFlag,"I");
	var nUCnt = this.dsList.findRow(this.ucFlag,"U");
	var nDCnt = this.dsList.findRow(this.ucFlag,"D");	
	
	if( nICnt > -1|| nUCnt > -1 || nDCnt > -1) { 
		this.gfnAlert("저장 후 처리하세요.", "");
		return; 
	}	
// 	
// 	// 결재상태 1,2 : 결재중,결재완료 시 return;
// 	var tyAppr = this.dsList.getColumn(this.dsList.rowposition, "TY_APPR");
// 	if ( tyAppr == "1" || tyAppr == "2" ) {
// 		this.gfnAlert("결재상태를 확인 바랍니다.");
// 		return;
// 	}	

	var param = {};
	param.V1 = this.dsSearch.getColumn(0, "ID_PERSON");			// ID_PERSON
	param.V2 = this.dsListDt.getColumn(this.dsListDt.rowposition, "DT_WORK_START");		// 근로기한 시작일
	param.V3 = this.dsListDt.getColumn(this.dsListDt.rowposition, "DT_WORK_END");		// 근로기한 종료일
	param.V4 = "";
	param.ID_AP = this.dsList.getColumn(this.dsList.rowposition, "NO_APPROVAL");	// 전자결재문서번호
	param.DS_ETITLE = "52시간계획신청";

	this.gfnFormOpen("DAG", "DAG_WORKDAY_PLAN_APP", "fnAprvDialogCallback", param, 1200, 800);

// 	//var url = "http://ngw.booyoung.co.kr/approval/legacy/goFormLink.do?mode=DRAFT&legacyFormID=WF_FORM_ERP_LONG_FUND";
// 	var url = this.gfnGetConfig("DZ" , "GW_APROVAL_URL");
// 	url += "approval/legacy/goFormLink.do?mode=DRAFT";
// 	url += "&legacyFormID=WF_FORM_ERP_LONG_FUND";		
// 	url += "&subject="+encodeURI("장기자금계획 상신");
// 	url += "&dataType=proc";
// 	url += "&empno=" + this.AuthClient.ID_USER;
// 	//url += "&empno="+this.AuthClient.ID_USER; 현재 하나의 사번만가능하여 사번 고정
// 	url += "&P_DS_KEY1="+this.dsSearch.getColumn(0, "YM_PLAN");						// 작성년월
// 	url += "&P_DS_KEY2="+this.dsList.getColumn(this.dsList.rowposition, "CD_CORP");	// 법인코드
// 	url += "&P_DS_KEY3="+this.dsList.getColumn(this.dsList.rowposition, "CD_SITE");	// 작성부서
// 	url += "&P_DS_KEY4="+this.dsList.getColumn(this.dsList.rowposition, "YN_FINAL");// 구분
// 	url += "&P_DS_KEY5="
// 
// 	trace("url :: " + url);
// 
// 	window.open(url,"_blank", "width=790,height=1000,menubar=no,scrollbars=no,resizable=no,status=no");
}

 this.fnAprvDialogCallback = function(svcID, value) {
	// 리턴값
	//if(value){
		// 결재완료, 결재취소, 결재상신 후에는 재조회를 한다
		this.FormBtns.Select.click();
	//}
};


// 전자결재문서조회
this.fnElctrncPmntDoc = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	if(!this.gfnGridIsRow(this.dxGrid)) return;	
	
	var nICnt = this.dsList.findRow(this.ucFlag,"I");
	var nUCnt = this.dsList.findRow(this.ucFlag,"U");
	var nDCnt = this.dsList.findRow(this.ucFlag,"D");	
	
	if( nICnt > -1|| nUCnt > -1 || nDCnt > -1) { 
		this.gfnAlert("저장 후 처리하세요.", "");
		return; 
	}	
	var nRow = this.dsList.rowposition;
	if(this.gfnIsNull(this.dsList.getColumn(this.dsList.rowposition , "NO_APPROVAL"))){
		this.gfnAlert("결재번호 정보가 존재하지 않습니다.");
		return;
	}
	
// 	// 결재상태 0 : 결재전 시 return;
// 	var tyAppr = this.dsList.getColumn(this.dsList.rowposition, "TY_APPR");
// 	if ( tyAppr == "0") {
// 		this.gfnAlert("결재상태를 확인 바랍니다.");
// 		return;
// 	}

	var param = {};	

//	param.PARAM01 = this.dsList.getColumn(nRow , "TM_APPR");
// 	param.PARAM02 = this.dsList.getColumn(nRow, "V_PARAM02");    
// 	param.PARAM03 = this.dsList.getColumn(nRow, "V_PARAM03");    
// 	param.PARAM04 = this.dsList.getColumn(nRow, "V_PARAM04");    
	param.ID_AP = this.dsList.getColumn(nRow, "NO_APPROVAL");	// 전자결재문서번호
	param.YN_LINK = "N";	// 화면에서 팝업을 호출할경우 N, 링크를 통해서 화면을 오픈할경우 null 이다
	//param.NO_SILHENG = "";	
	//param.CD_ELAPPRGS = this.dsList.getColumn(nRow, "ST_APPR");	// 전자결재진행상태		

	// 화면 오픈. 
	// CD_MODULE은 보통 같은 모듈에서 호출하는 경우가 많으니 this.FormInfo.CD_MODULE 사용
	// 타 모듈 화면 호출시 지정할것.
	
	this.gfnFormOpen("DAG", "DAG_WORKDAY_PLAN_APP", "fnAprvDialogCallback", param, 1200, 700);

	
// 	var url = this.gfnGetConfig("DZ" , "GW_APROVAL_URL");
// 	url += "approval/approval_Form.do?";
// 	url +="forminstanceID="+this.dsList.getColumn(this.dsList.rowposition , "NO_APPR");
// 	url +="&processID="+this.dsList.getColumn(this.dsList.rowposition , "NM_APPR");
// 	
// 	trace("url :: " + url);
// 	window.open(url,"_blank", "width=790,height=1000,menubar=no,scrollbars=no,resizable=no,status=no");
}


// 계획생성 버튼 클릭 이벤트
this.fnPlanCre = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	//if (!this.gfnGridIsRow(this.dxGrid)) { return false; }
	
	var param = {};
	param.ID_PERSON = this.dsSearch.getColumn(0, "ID_PERSON");
	param.ID_SABUN = this.dsSearch.getColumn(0, "ID_SABUN");
	param.DS_HNAME = this.ccfID_SABUN.form.DSTextBox.value;
	
	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DAG_WORKDAY_PLAN_DLG", "fnPlanCrecallback", param);	
}

this.fnPlanCrecallback = function(svcID, val) 
{
	if(val == true) {
		this.fnSelectDt();
	}

	this.FormBtns.Select.click();
}	



this.dsList_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{	
	if(e.oldvalue != e.newvalue)
	{
		if(e.columnid == "CHK_SATURDAY") {	// 총금액
			if(this.dsList.getColumn(this.dsList.rowposition,"CHK_SATURDAY") == "1"){
				this.dsList.setColumn(this.dsList.rowposition, "HH_SOVER", this.dsList.getColumn(this.dsList.rowposition, "HH_SATSTART"));
				this.dsList.setColumn(this.dsList.rowposition, "MM_SOVER", this.dsList.getColumn(this.dsList.rowposition, "MM_SATSTART"));
				
				this.dsList.setColumn(this.dsList.rowposition, "HH_EOVER", this.dsList.getColumn(this.dsList.rowposition, "HH_SATEND"));
				this.dsList.setColumn(this.dsList.rowposition, "MM_EOVER", this.dsList.getColumn(this.dsList.rowposition, "MM_SATEND"));
			}else{
				this.dsList.setColumn(this.dsList.rowposition, "HH_SOVER", "00");
				this.dsList.setColumn(this.dsList.rowposition, "MM_SOVER", "00");
				
				this.dsList.setColumn(this.dsList.rowposition, "HH_EOVER", "00");
				this.dsList.setColumn(this.dsList.rowposition, "MM_EOVER", "00");
			}
		}
	}
	
};


this.divData_objGrid_oncellclick = function(obj:nexacro.Grid,e:nexacro.GridClickEventInfo)
{
	//trace("cell", e.cell);
	//trace("col", e.col);
};


]]></Script>
    <Objects>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DAGPR_WORKDAY_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">save</Col>
            <Col id="SP">DAGPR_WORKDAY_UPDATE</Col>
          </Row>
          <Row>
            <Col id="SP">DAGPR_WORKDAY_COMBO</Col>
            <Col id="TARGET">selectDt</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="ID_SABUN" type="STRING" size="256"/>
          <Column id="ID_PERSON" type="STRING" size="256"/>
          <Column id="DS_WORK" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="ID_SABUN"/>
            <Col id="ID_PERSON"/>
            <Col id="DS_WORK"/>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsListDt">
        <ColumnInfo>
          <Column id="DT_WORK_START" type="STRING" size="256"/>
          <Column id="DT_WORK_END" type="STRING" size="256"/>
          <Column id="DS_WORK" type="STRING" size="256"/>
          <Column id="TY_GUBUN" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="DT_WORK_START"/>
            <Col id="DT_WORK_END"/>
            <Col id="DS_WORK"/>
            <Col id="TY_GUBUN"/>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsList" onvaluechanged="dsList_onvaluechanged"/>
    </Objects>
    <Bind>
      <BindItem id="item2" compid="divSearch.form.ccfID_SABUN.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="ID_SABUN"/>
      <BindItem id="item3" compid="divSearch.form.edtID_PERSON" propid="value" datasetid="dsSearch" columnid="ID_PERSON"/>
      <BindItem id="item0" compid="divSearch.form.cboDS_WORK" propid="value" datasetid="dsSearch" columnid="DS_WORK"/>
    </Bind>
  </Form>
</FDL>
