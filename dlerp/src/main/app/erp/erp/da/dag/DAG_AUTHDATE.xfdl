<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="New Form" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0" top="0" height="46.0" right="0" cssclass="div_SEARCH_Bg" formscrolltype="none">
          <Layouts>
            <Layout>
              <Static id="staYR_WORK" taborder="0" text="년도" left="0.0" top="10.0" width="66.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ctclYY_BASE" taborder="1" left="staYR_WORK:0.0" top="10.0" width="60" height="24.0" url="cmm::cmmCalYY.xfdl"/>
              <Static id="staCD_CORP" taborder="2" text="법인" left="ctclYY_BASE:0.0" top="10.0" width="66.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfCD_CORP" CodeFindName="DAX_CFCORP_CODEFIND" CDTextWidth="30" taborder="3" left="staCD_CORP:0.0" top="10.0" width="250" height="24.0" url="cmm::cmmCodeFind.xfdl" text=""/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	var toDay = this.gfnGetDate().substr(0,4);
	this.dsSearch.setColumn(0, "YY_BASE", toDay);	
	this.dsSearch.setColumn(0, "CD_CORP", this.AuthClient.CD_CORP);	
	this.divSearch.form.ccfCD_CORP.form.DSTextBox.set_value(this.AuthClient.DS_CORP);
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
	//this.btnCorpCrt = this.gfnFormButtonAdd("btnCorpCrt", "fnCorpCrt");	// 전 법인기한생성
	this.btnTargetCrt = this.gfnFormButtonAdd("btnTargetCrt", "fnTargetCrt");	// 대상자 생성
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {	
	this.ctclYY_BASE = this.divSearch.form.ctclYY_BASE;
	this.ccfCD_CORP = this.divSearch.form.ccfCD_CORP;
	
	this.dxGrid = this.divData.form.objGrid;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	// 그리드 초기화
	this.gfnGridInit(this.dxGrid, this.dsList, "DA", "DAG_AUTHDATE");
	
	this.ccfCD_CORP.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	
	this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforeUserDataSetParam";
	this.dxGrid.AfterCDTextChanged = "fnGrid_AfterCDTextChanged";
	
	// row 수정가능 여부
	//this.dxGrid.EnterCell = "fnGrid_EnterCell";
};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_CORP", "string");
	this.dsSelect.addColumn("YY_BASE", "string");
	this.dsSelect.addColumn("GR_SEARCH", "string");
	this.dsSelect.addColumn("GR_CORP", "string");
	this.dsSelect.addColumn("GR_USER", "string");
	
	this.dsSave = new Dataset();
	this.dsSave.addColumn("TY_SAVE", "string");
	this.dsSave.addColumn("CD_CORP", "string");
	this.dsSave.addColumn("YY_BASE", "string");
	this.dsSave.addColumn("NO_SEQ", "int");
	this.dsSave.addColumn("TY_PLAN", "string");
	this.dsSave.addColumn("DT_WORK", "string");
	this.dsSave.addColumn("DT_ENTER_START", "string");
	this.dsSave.addColumn("DT_ENTER_END", "string");
	this.dsSave.addColumn("YN_CREATE", "string");
	this.dsSave.addColumn("DS_REMARK", "string");
	this.dsSave.addColumn("ID_USER", "string");
	
	this.dsExec = new Dataset();
	this.dsExec.addColumn("NO_SEQ", "int");
	this.dsExec.addColumn("CD_CORP", "string");
	this.dsExec.addColumn("YY_BASE", "string");
	this.dsExec.addColumn("TY_PLAN", "string");
	this.dsExec.addColumn("DT_WORK_START", "string");
	this.dsExec.addColumn("ID_USER", "string");
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	
	this.dsSelect.setColumn(0, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
	this.dsSelect.setColumn(0, "YY_BASE", this.dsSearch.getColumn(0, "YY_BASE"));
	this.dsSelect.setColumn(0, "GR_SEARCH", this.FormInfo.GR_SEARCH);
	this.dsSelect.setColumn(0, "GR_CORP", this.AuthClient.CD_CORP);
	this.dsSelect.setColumn(0, "GR_USER", this.AuthClient.ID_USER);
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	var nrow = this.gfnGridAdd(this.dxGrid); // top (default), bottom, current
	
	this.dsList.setColumn(nrow, "YY_BASE", this.dsSearch.getColumn(0, "YY_BASE"));	
	this.dsList.setColumn(nrow, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
	this.dsList.setColumn(nrow, "DS_CORP", this.ccfCD_CORP.form.DSTextBox.value);
	this.dsList.setColumn(nrow, "TY_PLAN", "13");
	
	this.btnTargetCrt.set_enable(false);
}

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}

/*
 *	저장 버튼
 */
this.fnSave = function() {
	// 그리드 필수항목 체크
	if (!this.gfnGridValidate(this.dxGrid)) return;	

	this.dxGrid.updateToDataset();
	
	// save SP 한개로 사용하는 경우
	this.dsSave.clearData();
	
	//trace(this.dsList.saveXML());
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "I":
			case "U":
			case "D":
				var nrow = this.dsSave.addRow();
				this.dsSave.setColumn(nrow, "TY_SAVE", flag);
				this.dsSave.setColumn(nrow, "CD_CORP", this.dsList.getColumn(i, "CD_CORP"));
				this.dsSave.setColumn(nrow, "YY_BASE", this.dsList.getColumn(i, "YY_BASE"));
				this.dsSave.setColumn(nrow, "NO_SEQ", this.dsList.getColumn(i, "NO_SEQ"));
				this.dsSave.setColumn(nrow, "TY_PLAN", this.dsList.getColumn(i, "TY_PLAN"));
				this.dsSave.setColumn(nrow, "DT_WORK", this.dsList.getColumn(i, "DT_WORK_START"));
				this.dsSave.setColumn(nrow, "DT_ENTER_START", this.dsList.getColumn(i, "DT_ENTER_START"));
				this.dsSave.setColumn(nrow, "DT_ENTER_END", this.dsList.getColumn(i, "DT_ENTER_END"));
				this.dsSave.setColumn(nrow, "YN_CREATE", this.dsList.getColumn(i, "YN_CREATE"));
				this.dsSave.setColumn(nrow, "DS_REMARK", this.dsList.getColumn(i, "DS_REMARK"));
				this.dsSave.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);	
				break;
		}
	}
		
	if (this.dsSave.rowcount == 0) return;
	
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "save=dsSave";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {
	var validate = true;
	
	if (this.gfnIsNull(this.dsSearch.getColumn(0,"YY_BASE"))) {
		validate = false;
		// Alert후 실행할 처리
		this.fnVaidateCallback = function() {
			this.ctclYY_BASE.form.TextBox.setFocus();
		}
		this.gfnAlert("년도를 입력하세요.", "fnVaidateCallback");
	}	
	else if (this.gfnIsNull(this.dsSearch.getColumn(0,"CD_CORP"))) {
		validate = false;
		// Alert후 실행할 처리
		this.fnVaidateCallback = function() {
			this.ccfCD_CORP.form.CDTextBox.setFocus();
		}
		this.gfnAlert("법인을 입력하세요.", "fnVaidateCallback");
	}
	
	return validate;
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);	
		
		this.dsList_onrowposchanged();
	}
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "exec") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	
	if(id == "ccfCD_CORP") { 
		dsUserParam.setColumn(nrow, "CD_CORP", this.AuthClient.CD_CORP);
		dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
		dsUserParam.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
	}
		
	return true;
};


 this.fnGrid_BeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	// 법인
	if(id == "DAX_CFCORP_CODEFIND") {
		dsUserParam.setColumn(nrow, "CD_CORP", this.AuthClient.CD_CORP);
		dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
		dsUserParam.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
	}

	return true;
};

this.fnGrid_AfterCDTextChanged = function(id, codeFindData) {

	
	
	return true;
};
/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
 this.fnGrid_EnterCell = function(obj:nexacro.Grid, row, cell) {
	// 수정가능 true, false 처리하려는 컬럼에 대해서만 return 처리할것. 
	var colnm = this.gfnGridGetBindColumnNameByIndex(this.dxGrid, cell);	// 클릭한 cell의 컬럼명

	// 클릭했을때 클릭한 cell을 수정 가능 or 불가능 상태로 만든다.
	// YN_EDIT 값이 Y일때만 수정가능상태
	if(this.dsList.getColumn(row, "YN_EDIT") == "N") {
		return false;
	}
		
}

/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
	}
};

 
// 전 법인기한생성 버튼 클릭 이벤트
this.fnCorpCrt = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	if (!this.gfnGridIsRow(this.dxGrid)) { return false; }
	
	this.gfnConfirm("해당 내역을 전법인에 적용하시겠습니까?", "fnCorpCrtCallback");
}

this.fnCorpCrtCallback = function(strId, val)  {
	if(val == false) return;

	this.dsExec.clearData();
	this.dsExec.addRow();
	
	this.dsExec.setColumn(0, "NO_SEQ", this.dsList.getColumn(this.dsList.rowposition, "NO_SEQ"));
	this.dsExec.setColumn(0, "CD_CORP", this.dsList.getColumn(this.dsList.rowposition, "CD_CORP"));
	this.dsExec.setColumn(0, "YY_BASE", this.dsList.getColumn(this.dsList.rowposition, "YY_BASE"));
	this.dsExec.setColumn(0, "TY_PLAN", this.dsList.getColumn(this.dsList.rowposition, "TY_PLAN"));
	this.dsExec.setColumn(0, "DT_WORK_START", this.dsList.getColumn(this.dsList.rowposition, "DT_WORK_START"));
	this.dsExec.setColumn(0, "ID_USER", this.AuthClient.ID_USER);
		
	if (this.dsExec.rowcount == 0) return;
	
	var strSvcId    = "exec";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "exec=dsExec";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]

};


// 대상자 생성 버튼 클릭 이벤트
this.fnTargetCrt = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	if (!this.gfnGridIsRow(this.dxGrid)) { return false; }
	
	var param = {};
	param.CD_CORP = this.dsList.getColumn(this.dsList.rowposition, "CD_CORP");
	param.DS_CORP = this.dsList.getColumn(this.dsList.rowposition, "DS_CORP");
	param.DT_WORK_START = this.dsList.getColumn(this.dsList.rowposition, "DT_WORK_START");
	param.DT_WORK_END = this.dsList.getColumn(this.dsList.rowposition, "DT_WORK_END");
	param.TY_PLAN = this.dsList.getColumn(this.dsList.rowposition, "TY_PLAN");
	
	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DAG_AUTHDATE_DLG", "fnTargetCrtcallback", param);	
}

this.fnTargetCrtcallback = function(svcID, val) 
{
	if(val == true) {
		this.FormBtns.Select.click();
	}
}	


this.dsList_onrowposchanged = function(obj:nexacro.NormalDataset,e:nexacro.DSRowPosChangeEventInfo)
{
	var flag = this.gfnGetFlag(this.dsList, this.dsList.rowposition);
	if(flag == "#" || flag == "I"){
		this.btnTargetCrt.set_enable(false);
	}else{
		this.btnTargetCrt.set_enable(true);
	}
};
]]></Script>
    <Objects>
      <Dataset id="dsList" onrowposchanged="dsList_onrowposchanged"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DAGPR_AUTH_DATE_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">save</Col>
            <Col id="SP">DAGPR_AUTH_DATE_SAVE</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="YY_BASE" type="STRING" size="256"/>
          <Column id="CD_CORP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="YY_BASE"/>
            <Col id="CD_CORP"/>
          </Row>
        </Rows>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ctclYY_BASE.form.TextBox" propid="value" datasetid="dsSearch" columnid="YY_BASE"/>
      <BindItem id="item1" compid="divSearch.form.ccfCD_CORP.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_CORP"/>
    </Bind>
  </Form>
</FDL>
