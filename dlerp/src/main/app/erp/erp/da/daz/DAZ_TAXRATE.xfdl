<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="소득세율" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0" top="0" height="46.0" right="0" cssclass="div_SEARCH_Bg" formscrolltype="none">
          <Layouts>
            <Layout>
              <Static id="staYY_WORK" taborder="0" text="적용년도" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Div id="ctclYY_WORK" taborder="1" left="staYY_WORK:0.0" top="10.0" width="80" height="24.0" url="cmm::cmmCalYY.xfdl" enableevent="true" text="2019"/>
              <Static id="staYN_DELETE" taborder="2" text="사용여부" left="ctclYY_WORK:0.0" top="10.0" width="92.0" height="24.0" rtl="false" cssclass="sta_WF_SchLabel"/>
              <Combo id="cboYN_DELETE" taborder="3" left="staYN_DELETE:0.0" top="10.0" width="80" height="24.0" innerdataset="dsYN_DELETE" datacolumn="VALUE" codecolumn="CODE" index="1" value="N" onitemchanged="fnSearchInit" text="사용"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	//this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	//적용년도 셋팅
	var today = this.gfnGetDate().substring(0,4);
	this.divSearch.form.ctclYY_WORK.form.TextBox.set_value(today);
	
	//this.FormBtns.Select.click();
	
	//this.fnSetCombo();
	
	// 타화면에서 오픈시 넘어오는 파라미터 처리
	//if(!this.gfnIsNull(this.getOwnerFrame().CD_SYSTEM) && !this.gfnIsNull(this.getOwnerFrame().DS_SYSTEM)) 
	//{
		//this.dsSearch.setColumn(0, "CD_SYSTEM", this.getOwnerFrame().CD_SYSTEM);
		//// 코드파인드의 명칭부분은 직접 접근해서 셋팅
		//this.ccfCD_SYSTEM.form.DSTextBox.set_value(this.getOwnerFrame().DS_SYSTEM);
		
		//this.FormBtns.Select.click();
	//}		
	
	// 환경변수 사용   
	//var cd_payment = this.gfnGetConfig("DZ", "CD_PAYMENT");
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
	// Select, Add, Del, Save, Excel, Print
	// SubSelect, SubAdd, SubDel, SuubSave, SubExcel
	//this.FormBtns.Select.set_enable(false);
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
	//this.btn1 = this.gfnFormButtonAdd("Detail", "fnDetail");  
	//this.btn2 = this.gfnFormButtonAdd("Check", "fnCheck");  
	//this.btn3 = this.gfnFormButtonAdd("File", "fnFile");  
	//this.btn4 = this.gfnFormButtonAdd("Dialog", "fnDialog");  
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.cboYN_DELETE = this.divSearch.form.cboYN_DELETE;
	this.dxGrid = this.divData.form.objGrid;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	// 그리드 초기화
	this.gfnGridInit(this.dxGrid, this.dsList, "DA", "DAZ_TAXRATE");	
	
	
};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {

	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("YM_BASE", "string");
	this.dsSelect.addColumn("YN_DELETE", "string");
  
	this.dsInsert = new Dataset();
	this.dsInsert.addColumn("YM_BASE", "string");
	this.dsInsert.addColumn("FR_AMOUNT", "int");
	this.dsInsert.addColumn("TO_AMOUNT", "int");
	this.dsInsert.addColumn("RT_RATE", "double");
	this.dsInsert.addColumn("AM_PRGRSUBST", "int");
	this.dsInsert.addColumn("ID_INSERT", "string");
  
	this.dsUpdate = new Dataset();
	this.dsUpdate.addColumn("YM_BASE", "string");
	this.dsUpdate.addColumn("FR_AMOUNT", "int");
	this.dsUpdate.addColumn("TO_AMOUNT", "int");
	this.dsUpdate.addColumn("RT_RATE", "double");
	this.dsUpdate.addColumn("AM_PRGRSUBST", "int");	
	this.dsUpdate.addColumn("ID_UPDATE", "string");
	
	this.dsDelete = new Dataset();
	
	this.dsDelete.addColumn("YM_BASE", "string");
	this.dsDelete.addColumn("FR_AMOUNT", "int");
	this.dsDelete.addColumn("ID_UPDATE", "string");

}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	//if (!this.fnSelectValidate()) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	
	this.dsSelect.setColumn(0, "YN_DELETE", this.divSearch.form.cboYN_DELETE.value);
	this.dsSelect.setColumn(0, "YM_BASE", this.divSearch.form.ctclYY_WORK.form.TextBox.value);
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback"; 
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	this.gfnGridAdd(this.dxGrid);
}
/*
 *	삭제 버튼
 */
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}

/*
 *	저장 버튼
 */
this.fnSave = function() {
	// 그리드 필수항목 체크
	if (!this.gfnGridValidate(this.dxGrid)) return;	

	this.dxGrid.updateToDataset();
	
	this.dsInsert.clearData();
	this.dsUpdate.clearData();
	this.dsDelete.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);	
		
		if(flag == "I" || flag == "U"){
			if(this.dsList.getColumn(i, "FR_AMOUNT") > this.gfnNvl(this.dsList.getColumn(i, "TO_AMOUNT"), 0)) {
				var alertMessage = "과세범위[FROM]의 값보다 작은값이 [TO]에 들어갈 수 없습니다.";
				this.gfnAlert(alertMessage);
				return; 
			}		
		}	
		
		switch(flag) {
			case "I":
				var nrow = this.dsInsert.addRow();
				this.dsInsert.setColumn(nrow, "YM_BASE", this.dsList.getColumn(i, "YM_BASE").replace(/-/g, ''));
				this.dsInsert.setColumn(nrow, "FR_AMOUNT", this.dsList.getColumn(i, "FR_AMOUNT"));
				this.dsInsert.setColumn(nrow, "TO_AMOUNT", this.dsList.getColumn(i, "TO_AMOUNT"));
				this.dsInsert.setColumn(nrow, "RT_RATE", this.dsList.getColumn(i, "RT_RATE"));
				this.dsInsert.setColumn(nrow, "AM_PRGRSUBST", this.dsList.getColumn(i, "AM_PRGRSUBST"));
				this.dsInsert.setColumn(nrow, "ID_INSERT", this.AuthClient.ID_USER);
				break;
	
			case "U":
				var nrow = this.dsUpdate.addRow();
				this.dsUpdate.setColumn(nrow, "YM_BASE", this.dsList.getColumn(i, "YM_BASE").replace(/-/g, ''));
				this.dsUpdate.setColumn(nrow, "FR_AMOUNT", this.dsList.getColumn(i, "FR_AMOUNT"));
				this.dsUpdate.setColumn(nrow, "TO_AMOUNT", this.dsList.getColumn(i, "TO_AMOUNT"));
				this.dsUpdate.setColumn(nrow, "RT_RATE", this.dsList.getColumn(i, "RT_RATE"));
				this.dsUpdate.setColumn(nrow, "AM_PRGRSUBST", this.dsList.getColumn(i, "AM_PRGRSUBST"));
				this.dsUpdate.setColumn(nrow, "ID_UPDATE", this.AuthClient.ID_USER);
				
				break;
				
			case "D":
				var nrow = this.dsDelete.addRow();
				this.dsDelete.setColumn(nrow, "YM_BASE", this.dsList.getColumn(i, "YM_BASE").replace(/-/g, ''));
				this.dsDelete.setColumn(nrow, "FR_AMOUNT", this.dsList.getColumn(i, "FR_AMOUNT"));
				this.dsDelete.setColumn(nrow, "ID_UPDATE", this.AuthClient.ID_USER);
				
				break;
		}
	}
	
	if (this.dsInsert.rowcount == 0 && this.dsUpdate.rowcount == 0 && this.dsDelete.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "insert=dsInsert update=dsUpdate delete=dsDelete";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		if (this.dsList.rowcount == 0) {
			this.gfnAlert("자료가 존재하지 않습니다.");
		} else {
			this.gfnGridAfterSelect(this.dxGrid);	
		}
		
	}
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/


/************************************************************************
 * 그리드 이벤트
 ************************************************************************/

/************************************************************************
 * 기타 이벤트
 ************************************************************************/
/*
 *	조회 조건 변경시 초기화
 */ 
this.fnSearchInit = function(obj, e) {
	if(e.pretext != e.posttext) {
		this.gfnSetFormStatus(this);
		this.gfnGridClear(this.dxGrid);
	}
}

this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{

	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
	}
};]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DAZPR_TAXRATE_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">insert</Col>
            <Col id="SP">DAZPR_TAXRATE_INSERT</Col>
          </Row>
          <Row>
            <Col id="SP">DAZPR_TAXRATE_UPDATE</Col>
            <Col id="TARGET">update</Col>
          </Row>
          <Row>
            <Col id="SP">DAZPR_TAXRATE_DELETE</Col>
            <Col id="TARGET">delete</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="YY_WORK" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="YY_WORK"/>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsYN_DELETE">
        <ColumnInfo>
          <Column id="CODE" type="STRING" size="256"/>
          <Column id="VALUE" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CODE">%</Col>
            <Col id="VALUE">전체</Col>
          </Row>
          <Row>
            <Col id="CODE">N</Col>
            <Col id="VALUE">사용</Col>
          </Row>
          <Row>
            <Col id="CODE">Y</Col>
            <Col id="VALUE">미사용</Col>
          </Row>
        </Rows>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ctclYY_WORK.form.TextBox" propid="value" datasetid="dsSearch" columnid="YY_WORK"/>
    </Bind>
  </Form>
</FDL>
