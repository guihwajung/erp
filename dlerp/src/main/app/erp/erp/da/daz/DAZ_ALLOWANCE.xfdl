<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="form" width="1280" height="720" titletext="소득항목" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0" top="0" height="46.0" right="0" cssclass="div_SEARCH_Bg" formscrolltype="none">
          <Layouts>
            <Layout>
              <Static id="staYN_DELETE" taborder="0" text="사용여부" left="0.0" top="10.0" width="92.0" height="24.0" rtl="false" cssclass="sta_WF_SchLabel"/>
              <Combo id="cboYN_DELETE" taborder="1" left="staYN_DELETE:0.0" top="10.0" width="80" height="24.0" innerdataset="dsYN_DELETE" datacolumn="VALUE" codecolumn="CODE" index="1" value="N" onitemchanged="fnSearchInit"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	//this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	this.FormBtns.Select.click();
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출   111111
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() { 
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.cboYN_DELETE = this.divSearch.form.cboYN_DELETE;
	this.dxGrid = this.divData.form.objGrid;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	// 그리드 초기화
	this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforuserDataSetParam";
	
	this.gfnGridInit(this.dxGrid, this.dsList, "DA", "DAZ_ALLOWANCE");	
	
	this.dxGrid.setCellProperty( "body", this.dxGrid.getBindCellIndex("body", "CD_ALLOW"), "editinputtype", "alpha,digit");
};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {

	this.dsSelect = new Dataset();

	this.dsSelect.addColumn("YN_DELETE", "string");

	this.dsSave = new Dataset();
	this.dsSave.addColumn("TY_SAVE", "string");
	this.dsSave.addColumn("CD_ALLOW", "string");
	this.dsSave.addColumn("DS_ALLOW", "string");
	this.dsSave.addColumn("AM_ALLOW", "int");
	this.dsSave.addColumn("YN_INCBONUS", "string");
	this.dsSave.addColumn("YN_TAX", "string");
	this.dsSave.addColumn("YN_USUAL", "string");
	this.dsSave.addColumn("YN_AVG", "string");
	this.dsSave.addColumn("CD_CALC", "string");
	this.dsSave.addColumn("CD_PLACE", "int");
	this.dsSave.addColumn("YN_DAYCALC", "string");
	this.dsSave.addColumn("YN_SALARY", "string");
	this.dsSave.addColumn("YN_AUTOCALC", "string");
	this.dsSave.addColumn("RT_ANNUALRATE", "decimal");
	this.dsSave.addColumn("RT_INTERN", "decimal");
	this.dsSave.addColumn("SN_PRINT", "decimal");
	this.dsSave.addColumn("ID_USER", "string");
	this.dsSave.addColumn("CD_ACCOUNT_EMP", "string");
	this.dsSave.addColumn("CD_ACCOUNT_BOSS", "string");
	this.dsSave.addColumn("CD_COST_EMP", "string");
	this.dsSave.addColumn("CD_COST_BOSS", "string");	
	this.dsSave.addColumn("DS_CALC", "string");
	
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	//if (!this.fnSelectValidate()) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	
	this.dsSelect.setColumn(0, "YN_DELETE", this.cboYN_DELETE.value);

	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback"; 
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	//this.gfnGridAdd(this.dxGrid);	
	 var maxSN_PRINT = this.dsList.getMax("SN_PRINT");	
 	if (maxSN_PRINT == null) {
		if (this.dsList.rowcount == 1) maxSN_PRINT = 0;
		else maxSN_PRINT = -1;
	}	
	// 그리드 헤더정렬을 누르고 신규버튼을 클릭하면 맨하단에 변경flag가 생겨서 주석처리함 
	//var nrow = this.gfnGridAdd(this.dxGrid,"bottom");
	var nrow = this.gfnGridAdd(this.dxGrid);
	this.dsList.setColumn(nrow, "AM_ALLOW", "0");
	this.dsList.setColumn(nrow, "YN_TAX", "Y");
	this.dsList.setColumn(nrow, "YN_USUAL", "Y");
	this.dsList.setColumn(nrow, "YN_AVG", "Y");
	this.dsList.setColumn(nrow, "CD_CALC", "C");
	this.dsList.setColumn(nrow, "CD_PLACE", "2");
	this.dsList.setColumn(nrow, "YN_DAYCALC", "Y");
	this.dsList.setColumn(nrow, "YN_SALARY", "Y");
	this.dsList.setColumn(nrow, "YN_AUTOCALC", "Y");
	this.dsList.setColumn(nrow, "RT_ANNUALRATE", "100.00");
	this.dsList.setColumn(nrow, "RT_INTERN", "0");
	this.dsList.setColumn(nrow, "SN_PRINT", maxSN_PRINT+1);
}
/*
 *	삭제 버튼
 */
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}

/*
 *	저장 버튼
 */
this.fnSave = function() {
	// 그리드 필수항목 체크
	if (!this.gfnGridValidate(this.dxGrid)) return;	

	this.dxGrid.updateToDataset();
	
	this.dsSave.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "I":
			case "U":
			case "D":
				var nrow = this.dsSave.addRow();
				this.dsSave.setColumn(nrow, "TY_SAVE", flag);
				this.dsSave.setColumn(nrow, "CD_ALLOW", this.dsList.getColumn(i, "CD_ALLOW"));
				this.dsSave.setColumn(nrow, "DS_ALLOW", this.dsList.getColumn(i, "DS_ALLOW"));
				this.dsSave.setColumn(nrow, "AM_ALLOW", this.gfnNvl(this.dsList.getColumn(i, "AM_ALLOW"), 0));
				this.dsSave.setColumn(nrow, "YN_INCBONUS", this.dsList.getColumn(i, "YN_INCBONUS"));
				this.dsSave.setColumn(nrow, "YN_TAX", this.gfnNvl(this.dsList.getColumn(i, "YN_TAX"), "Y"));
				this.dsSave.setColumn(nrow, "YN_USUAL", this.gfnNvl(this.dsList.getColumn(i, "YN_USUAL"), "Y"));
				this.dsSave.setColumn(nrow, "YN_AVG", this.gfnNvl(this.dsList.getColumn(i, "YN_AVG"), "Y"));
				this.dsSave.setColumn(nrow, "CD_CALC", this.gfnNvl(this.dsList.getColumn(i, "CD_CALC"), "C"));
				this.dsSave.setColumn(nrow, "CD_PLACE", this.gfnNvl(this.dsList.getColumn(i, "CD_PLACE"), "2"));
				this.dsSave.setColumn(nrow, "YN_DAYCALC", this.gfnNvl(this.dsList.getColumn(i, "YN_DAYCALC"), "Y"));
				this.dsSave.setColumn(nrow, "YN_SALARY", this.gfnNvl(this.dsList.getColumn(i, "YN_SALARY"), "Y"));
				this.dsSave.setColumn(nrow, "YN_AUTOCALC", this.gfnNvl(this.dsList.getColumn(i, "YN_AUTOCALC"), "Y"));
				this.dsSave.setColumn(nrow, "RT_ANNUALRATE", this.gfnNvl(this.dsList.getColumn(i, "RT_ANNUALRATE"), 100));
				this.dsSave.setColumn(nrow, "RT_INTERN", this.gfnNvl(this.dsList.getColumn(i, "RT_INTERN"), 0));
				this.dsSave.setColumn(nrow, "SN_PRINT", this.gfnNvl(this.dsList.getColumn(i, "SN_PRINT"), 1));
				this.dsSave.setColumn(nrow, "CD_ACCOUNT_EMP", this.dsList.getColumn(i, "CD_ACCOUNT_EMP"));
				this.dsSave.setColumn(nrow, "CD_ACCOUNT_BOSS", this.dsList.getColumn(i, "CD_ACCOUNT_BOSS"));	
				this.dsSave.setColumn(nrow, "CD_COST_EMP", this.dsList.getColumn(i, "CD_COST_EMP"));
				this.dsSave.setColumn(nrow, "CD_COST_BOSS", this.dsList.getColumn(i, "CD_COST_BOSS"));				
				this.dsSave.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
				this.dsSave.setColumn(nrow, "DS_CALC", this.dsList.getColumn(i, "DS_CALC"));	
				break;
		}
	}
	
	if (this.dsSave.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "save=dsSave";
	var outData     = "dsOutput=save";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);	
	}
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/


/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
this.fnGrid_BeforuserDataSetParam=function(id, dsUserParam, nrow){	

	var gridIdx = this.dxGrid.currentrow;	
	switch(id) {
		// DHXPR_ACNT
		case "CD_ACCOUNT_EMP":	
			dsUserParam.setColumn(nrow, "YN_SLIP", "Y");
			break;
		case "CD_ACCOUNT_BOSS":
			dsUserParam.setColumn(nrow, "YN_SLIP", "Y");  
			break;
		case "CD_COST_EMP":	
			dsUserParam.setColumn(nrow, "YN_SLIP", "Y");
			break;
		case "CD_COST_BOSS":
			dsUserParam.setColumn(nrow, "YN_SLIP", "Y");  
			break;			
	}
	return true;
}

/************************************************************************
 * 기타 이벤트
 ************************************************************************/
/*
 *	조회 조건 변경시 초기화
 */ 
this.fnSearchInit = function(obj, e) {
	if(e.pretext != e.posttext) {
		this.gfnSetFormStatus(this);
		this.gfnGridClear(this.dxGrid);
	}
}]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DAZPR_ALLOWANCE_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">save</Col>
            <Col id="SP">DAZPR_ALLOWANCE_SAVE</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
      <Dataset id="dsYN_DELETE">
        <ColumnInfo>
          <Column id="CODE" type="STRING" size="256"/>
          <Column id="VALUE" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CODE">%</Col>
            <Col id="VALUE">전체</Col>
          </Row>
          <Row>
            <Col id="CODE">Y</Col>
            <Col id="VALUE">미사용</Col>
          </Row>
          <Row>
            <Col id="CODE">N</Col>
            <Col id="VALUE">사용</Col>
          </Row>
        </Rows>
      </Dataset>
    </Objects>
  </Form>
</FDL>
