<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="동점자서열등록" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0" top="0" height="46.0" right="0" cssclass="div_SEARCH_Bg">
          <Layouts>
            <Layout>
              <Static id="staTERM_EVAL" taborder="0" text="평가기수" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Combo id="cboTERM_EVAL" taborder="1" left="staTERM_EVAL:0.0" top="10.0" width="120" height="24.0" datacolumn="TERM_EVAL" codecolumn="TERM_EVAL" value="%" onitemchanged="fnSearchInit" text="" index="0" innerdataset="dsTERM_EVAL"/>
              <Static id="staID_SABUN" taborder="2" text="성명" left="cboTERM_EVAL:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Div id="ccfID_SABUN" CDTextWidth="70" taborder="3" left="staID_SABUN:0.0" top="10.0" width="250" height="24.0" url="cmm::cmmCodeFind.xfdl" text=""/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DAJPR_EVAL_SUBDIVISION_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">save</Col>
            <Col id="SP">DAJPR_EVAL_SUBDIVISION_SAVE</Col>
          </Row>
          <Row>
            <Col id="TARGET">combo</Col>

            <Col id="SP">DAXPR_EVAL_TERMS_CODEFIND</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="TERM_EVAL" type="STRING" size="256"/>
          <Column id="ID_SABUN" type="STRING" size="256"/>
          <Column id="DS_SABUN" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
      <Dataset id="dsTERM_EVAL">
        <ColumnInfo>
          <Column id="CD_CODE" type="STRING" size="256"/>
          <Column id="DS_CODE" type="STRING" size="256"/>
          <Column id="TERM_EVAL" type="STRING" size="256"/>
          <Column id="YN_STRUCTFINI" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
    </Objects>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();
this.gYN_STRUCTFINI = "";	// DAJT_EVALUATE_TERMS 평가기수 테이블 구조확정여부
this.gTERM_EVAL = "";

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);
	this.gfnFormInfo(this);
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();	
	this.fnSetCombo();
};   

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
	// Select, Add, Del, Save, Excel, Print
	// SubSelect, SubAdd, SubDel, SubSave, SubExcel
	this.FormBtns.Add.set_enable(false);
	this.FormBtns.Del.set_enable(false);
	this.FormBtns.Reset.set_enable(true);
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {

	this.cboTERM_EVAL = this.divSearch.form.cboTERM_EVAL;
	this.ccfID_SABUN = this.divSearch.form.ccfID_SABUN;	

	this.dxGrid = this.divData.form.objGrid;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	
	//그리드
	this.gfnGridInit(this.dxGrid, this.dsList, "DA", "DAJ_PEER_SUBDIVISION");	
	
	//그리드 이벤트
	this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforeUserDataSetParam";
	//this.dxGrid.AfterCDTextChanged = "fnGrid_AfterCDTextChanged";

	// 성명
	this.ccfID_SABUN.CodeFindName = "DAX_CFBASEINFO";
	this.ccfID_SABUN.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
}

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {

	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("TERM_EVAL", "string");
	this.dsSelect.addColumn("ID_SABUN", "string");
	this.dsSelect.addColumn("SABUN", "string");

	this.dsSave = new Dataset();
	this.dsSave.addColumn("TERM_EVAL", "string");
	this.dsSave.addColumn("ID_SABUN", "string");
	this.dsSave.addColumn("ORDER", "bigdecimal");
	this.dsSave.addColumn("SABUN", "string");
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if(!this.fnValidate()) return;
	var ID_USER =  this.AuthClient.ID_USER;	



	//ID_USER = "19041";	// for test	
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	this.dsSelect.setColumn(0, "TERM_EVAL", this.dsSearch.getColumn(0, "TERM_EVAL"));
	this.dsSelect.setColumn(0, "ID_SABUN", this.dsSearch.getColumn(0, "ID_SABUN"));
	this.dsSelect.setColumn(0, "SABUN", ID_USER);

	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// trabsaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	var nrow = this.gfnGridAdd(this.dxGrid);
	//this.dsList.setColumn(nrow, "TERM_EVAL", TERM_EVAL);
}

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}

/*
 *	저장
 */
this.fnSave = function(sCloseYn) {

	var nrow = this.dsList.rowposition;
	var TERM_EVAL = this.dsList.getColumn(nrow, "TERM_EVAL");
	var ID_SABUN = this.dsList.getColumn(nrow, "ID_SABUN");
	var ID_USER =  this.AuthClient.ID_USER;
	
	//ID_USER = "19041";	// for test	



	// 그리드 필수항목 체크
	if (!this.gfnGridValidate(this.dxGrid)) return;	

	this.dxGrid.updateToDataset();

	this.dsSave.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "U":
				var nrow = this.dsSave.addRow();
				//this.dsSave.setColumn(nrow, "TY_SAVE", flag);
				this.dsSave.setColumn(nrow, "TERM_EVAL", this.dsList.getColumn(i, "TERM_EVAL"));
				this.dsSave.setColumn(nrow, "ID_SABUN", this.dsList.getColumn(i, "ID_SABUN"));
				this.dsSave.setColumn(nrow, "ORDER", this.dsList.getColumn(i, "ORDER_FINAL"));
				this.dsSave.setColumn(nrow, "SABUN", ID_USER);

				break;
		}
	}

	if (this.dsSave.rowcount == 0) return;

	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "save=dsSave";
	var outData     = "dsOutput=save";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); 	// 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/*
 *	초기화 버튼
 */
this.fnReset  = function() {
	this.dsSearch.clearData();
	this.dsSearch.addRow();

	this.cboTERM_EVAL.set_index(0);

	// 평가기수 구조확정여부
	//var nrow = this.dsTERM_EVAL.rowposition;
	var nrow = this.cboTERM_EVAL.index;
	this.gTERM_EVAL	= this.dsTERM_EVAL.getColumn(nrow, "TERM_EVAL");
	this.gYN_STRUCTFINI = this.dsTERM_EVAL.getColumn(nrow, "YN_STRUCTFINI");

	this.FormBtns.Select.click();
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnValidate = function() {
	if (this.gfnIsNull(this.dsSearch.getColumn(0, "TERM_EVAL"))) {
		this.cboTERM_EVAL.setFocus();
		this.gfnAlert("평가기수를 입력하세요.");
		return false;
	}
	return true;
};

// 평가기수 구조확정 여부 확인
this.fnStructfiniValidate = function(sExe) {
/*
	구조 확정 후에는
	TARGET에서 INSERT,DELETE와 평가자 변경 불가능
	TARGET_ITEMS에서 INSERT, DELETE 불가능
   
	구조 확정 취소후
	TARGET에서 INSERT,DELETE와 평가자 변경 가능
	TARGET_ITEMS에서 INSERT, DELETE 가능
*/
	var TERM_EVAL = this.dsSearch.getColumn(0, "TERM_EVAL");
	if( this.gYN_STRUCTFINI == "Y" ){
		this.gfnAlert( "해당 \"" + TERM_EVAL + "\" 평가대상자의 구조가 확정되어 " + sExe + " 불가능합니다.");	
		return false;
	}
	return true;
};
	
/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg){
	//trace("fnCallback >>>>svcID :["+svcID+"] errorCode :["+errorCode+"] errorMsg :["+errorMsg+"]" );
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);
	} else if(svcID == "save") {
		if (errorCode == 0) {
			this.gfnAlert("정상적으로 처리되었습니다.");
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	} else if( svcID == "combo"){
		if (!this.gfnIsNull(this.gTERM_EVAL)){
			 this.cboTERM_EVAL.set_value( this.gTERM_EVAL); 
		}else{
			this.cboTERM_EVAL.set_index(0);
		}

		// 평가기수 구조확정여부
		//var nrow = this.dsTERM_EVAL.rowposition;
		var nrow = this.cboTERM_EVAL.index;
		this.gTERM_EVAL	= this.dsTERM_EVAL.getColumn(nrow, "TERM_EVAL");
		this.gYN_STRUCTFINI = this.dsTERM_EVAL.getColumn(nrow, "YN_STRUCTFINI");

		// 자동조회
		if (this.dsTERM_EVAL.rowcount > 0) this.FormBtns.Select.click();
	}
	this.fnSetButton();
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnAfterCDTextChanged = function(id) {
	this.fnSearchInit();
}

this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	//trace("코드파인드_식별id:" + id);
	switch(id) {	
		case "ccfCD_DEPT":	// 부서
			dsUserParam.setColumn(nrow, "GR_SEARCH", "");
			dsUserParam.setColumn(nrow, "CD_DEPT", "");
			dsUserParam.setColumn(nrow, "CD_CORP", this.AuthClient.CD_CORP);
			dsUserParam.setColumn(nrow, "YN_CURRENT", "");
			break;

		case "ccfID_SABUN"://성명
			dsUserParam.setColumn(nrow, "CD_CORP", this.AuthClient.CD_CORP);
			dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
			dsUserParam.setColumn(nrow, "CD_DEPT", "%");
			dsUserParam.setColumn(nrow, "YN_CORP", "Y");
			dsUserParam.setColumn(nrow, "TY_RETIRE", "%");	// 재직구분		
			break;
		default:
	}	
	return true;
}

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
this.fnGrid_BeforeUserDataSetParam = function(id, dsUserParam, nrow){
	//trace('grid_코드파인드_식별id: ' + id); 
	
	switch(id) {	
		case "DAX_CFBASEINFO":     // DAX_CFBASEINFO 
		case "DAX_CFBASEINFO_1ST":     // 사번 	ID_SABUN
		case "DAX_CFBASEINFO_2ND":     // 사번 	ID_SABUN
			dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
			dsUserParam.setColumn(nrow, "CD_DEPT", "%");
			dsUserParam.setColumn(nrow, "TY_RETIRE", "%");
		break;

		case "EL":	// 평가구분
			dsUserParam.setColumn(nrow, "CD_PREFIX", 'EL');
		default:
	}

	return true;
};
 
 /************************************************************************
 * 확장버튼 이벤트
 ************************************************************************/


/************************************************************************
 * 기타 이벤트
 ************************************************************************/
/*
 *	조회 조건 변경시 초기화
 */
this.fnSearchInit = function(obj,e) {
	var strEventid = e.eventid; 
	var objComp = e.fromobject; 
	var nPostIdx = e.postindex; // 새로 변경된 아이템의 인덱스값
	//trace("obj->" + obj + " / eventid->" + strEventid  + " / fromobject->" + objComp  + " / nPostIdx->" + nPostIdx );

	// 평가기수 구조확정여부
	var nrow = this.dsTERM_EVAL.rowposition;
	this.gYN_STRUCTFINI = this.dsTERM_EVAL.getColumn(nPostIdx, "YN_STRUCTFINI");
	this.gTERM_EVAL	= this.dsTERM_EVAL.getColumn(nPostIdx, "TERM_EVAL");		
		
	//trace("조회 조건 변경시:" + nrow + " / TERM_EVAL:" + this.gTERM_EVAL + " / YN_STRUCTFINI:" + this.gYN_STRUCTFINI);

	if(e.pretext != e.posttext) {
		// 폼상태 초기화
		this.gfnSetFormStatus(this);	
		this.gfnGridClear(this.dxGrid);
		this.fnSetButton();
	}
};

this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo){
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
		this.fnSetButton();
	}
};

//평가기수 콤보 조회
this.fnSetCombo = function() {
	var today = this.gfnGetDate().substring(0,8);

	this.dsCombo = new Dataset();
	this.dsCombo.addColumn("TY_SEL", "string");
	this.dsCombo.addColumn("YEAR_EVAL", "string");
	this.dsCombo.addColumn("DT_EVAL", "string");
	
	this.dsCombo.addRow();
	this.dsCombo.setColumn(0, "TY_SEL", "P");	// A: 전체 P: 필수
	this.dsCombo.setColumn(0, "YEAR_EVAL", "");
	this.dsCombo.setColumn(0, "DT_EVAL", today);

	var strSvcId    = "combo";
	var strSvcType  = "select";
	var inProc		= "_dsProc";
	var inData      = "combo=dsCombo";
	var outData     = "dsTERM_EVAL=combo0";
	var strArg      = "";
	var callBackFnc = "fnCallback";

	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); 	// 통신방법 정의 [생략가능]
};]]></Script>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.cboTERM_EVAL" propid="value" datasetid="dsSearch" columnid="TERM_EVAL"/>
      <BindItem id="item3" compid="divSearch.form.ccfID_SABUN.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="ID_SABUN"/>
      <BindItem id="item1" compid="divSearch.form.ccfID_SABUN.form.DSTextBox" propid="value" datasetid="dsSearch" columnid="DS_SABUN"/>
    </Bind>
  </Form>
</FDL>
