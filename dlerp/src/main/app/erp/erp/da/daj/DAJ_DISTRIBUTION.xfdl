<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="평가배분표" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="1" left="0" top="0" height="46.0" right="0" cssclass="div_SEARCH_Bg" text="">
          <Layouts>
            <Layout>
              <Div id="ccfCD_CORP" CDTextWidth="70" taborder="3" left="0.0" top="10.0" width="280" height="24.0" url="cmm::cmmCodeFind.xfdl" text="" CodeFindName="DAX_CFCORP"/>
              <Static id="staYY_EVALUATION" taborder="0" text="평가년도" left="ccfCD_CORP:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfYY_EVALUATION" CDTextWidth="70" taborder="4" left="staYY_EVALUATION:0.0" top="10.0" width="90" height="24.0" url="cmm::cmmCalYY.xfdl" text="" CodeFindName="DAX_CFCORP"/>
              <Static id="staTY_EVALUATION" taborder="1" text="구분" left="ccfYY_EVALUATION:0.0" top="10.0" width="92.0" height="24.0" rtl="false" cssclass="sta_WF_SchLabel"/>
              <Static id="staCD_CORP" taborder="2" text="법인" left="staTY_EVALUATION:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Combo id="cboTY_EVALUATION" taborder="5" text="cbo00" left="staTY_EVALUATION:0.0" top="10.0" width="94" height="24.0" innerdataset="dsTY_EVALUATION" codecolumn="CD_CODE" datacolumn="DS_CODE"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="1" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0" oncelldblclick="divData_objGrid_oncelldblclick"/>
              <Grid id="grdForm" taborder="1" left="651" top="240" width="104" height="155" binddataset="dsExcelForm" visible="false">
                <Formats>
                  <Format id="default">
                    <Columns>
                      <Column size="150"/>
                      <Column size="80"/>
                      <Column size="80"/>
                      <Column size="80"/>
                      <Column size="80"/>
                      <Column size="80"/>
                      <Column size="80"/>
                      <Column size="80"/>
                    </Columns>
                    <Rows>
                      <Row size="35" band="head"/>
                      <Row size="24"/>
                    </Rows>
                    <Band id="head">
                      <Cell text="구분&#13;&#10;(01:상반기,02:하반기)"/>
                      <Cell col="1" text="인원"/>
                      <Cell col="2" text="S"/>
                      <Cell col="3" text="A"/>
                      <Cell col="4" text="B"/>
                      <Cell col="5" text="C"/>
                      <Cell col="6" text="D"/>
                      <Cell col="7" text="비고"/>
                    </Band>
                    <Band id="body">
                      <Cell text="bind:TY_EVALUATION"/>
                      <Cell col="1" text="bind:NO_INWON"/>
                      <Cell col="2" text="bind:CD_S"/>
                      <Cell col="3" text="bind:CD_A"/>
                      <Cell col="4" text="bind:CD_B"/>
                      <Cell col="5" text="bind:CD_C"/>
                      <Cell col="6" text="bind:CD_D"/>
                      <Cell col="7" text="bind:DS_REMARK"/>
                    </Band>
                  </Format>
                </Formats>
              </Grid>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	
	this.ccfCD_CORP.form.CDTextBox.set_value(this.AuthClient.CD_CORP);		
	this.ccfCD_CORP.form.DSTextBox.set_value(this.AuthClient.DS_CORP);	
	
	var today = this.gfnGetDate();
	this.ccfYY_EVALUATION.form.TextBox.set_value(today.substr(0,4));
	this.cboTY_EVALUATION.set_index(0);

	//화면 로드시 자동조회
	//this.FormBtns.Select.click();
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
 	this.btnFormDown = this.gfnFormButtonAdd("FormDown", "fnFormDown"); //양식다운로드
	this.btnExcelImport = this.gfnFormButtonAdd("ExcelImport", "fnExcelImport"); 	//엑셀업로드
};


/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.dxGrid = this.divData.form.objGrid;

	this.ccfCD_CORP = this.divSearch.form.ccfCD_CORP;
	this.ccfYY_EVALUATION = this.divSearch.form.ccfYY_EVALUATION;
	this.cboTY_EVALUATION = this.divSearch.form.cboTY_EVALUATION;		
	
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	this.ccfCD_CORP.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.ccfCD_CORP.AfterCDTextChanged = "fnAfterCDTextChanged";	

	this.gfnGridInit(this.dxGrid, this.dsList, "DA", "DAJ_DISTRIBUTION");
	
	
	this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforeUserDataSetParam";	// 그리드 코드파인드 설정
	this.dxGrid.AfterEdit = "fnGrid_AfterEdit";	// 셀 변경 후 이벤트
}

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_CORP", "string");
	this.dsSelect.addColumn("YY_EVALUATION", "string");
	this.dsSelect.addColumn("TY_EVALUATION", "string");
	this.dsSelect.addColumn("GR_SEARCH", "string");
	this.dsSelect.addColumn("TY_AUTH", "string");
	this.dsSelect.addColumn("GR_DEPT", "string");
	this.dsSelect.addColumn("ID_USER", "string");
	
	this.dsSave = new Dataset();
	this.dsSave.addColumn("TY_SAVE", "string");
	this.dsSave.addColumn("NO_SEQ", "int");
	this.dsSave.addColumn("CD_CORP", "string");
	this.dsSave.addColumn("YY_EVALUATION", "string");
	this.dsSave.addColumn("TY_EVALUATION", "string");
	this.dsSave.addColumn("NO_INWON", "int");
	this.dsSave.addColumn("CD_S", "int");
	this.dsSave.addColumn("CD_A", "int");
	this.dsSave.addColumn("CD_B", "int");
	this.dsSave.addColumn("CD_C", "int");
	this.dsSave.addColumn("CD_D", "int");
	this.dsSave.addColumn("DS_REMARK", "string");
	this.dsSave.addColumn("GR_SEARCH", "string");
	this.dsSave.addColumn("TY_AUTH", "string");
	this.dsSave.addColumn("GR_DEPT", "string");
	this.dsSave.addColumn("ID_USER", "string");
	
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if(!this.fnSelectValid()) return;

	this.gfnGridBeforeSelect(this.dxGrid);
	this.gfnSetFormStatus(this);

	this.dsSelect.clearData();
	this.dsSelect.addRow();
	
	this.dsSelect.setColumn(0, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
	this.dsSelect.setColumn(0, "YY_EVALUATION", this.dsSearch.getColumn(0, "YY_EVALUATION"));
	this.dsSelect.setColumn(0, "TY_EVALUATION", this.dsSearch.getColumn(0, "TY_EVALUATION"));
	this.dsSelect.setColumn(0, "GR_SEARCH", this.FormInfo.GR_SEARCH);
	this.dsSelect.setColumn(0, "TY_AUTH", this.FormInfo.TY_AUTH);
	this.dsSelect.setColumn(0, "GR_DEPT", this.AuthClient.CD_DEPT);
	this.dsSelect.setColumn(0, "ID_USER", this.AuthClient.ID_USER);

	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
	
}

this.fnSelectValid = function(){
	if(this.gfnIsNull(this.ccfCD_CORP.form.CDTextBox.value)){
		this.fnValidCallback = function(){
			this.ccfCD_CORP.form.CDTextBox.setFocus();
		}
		this.gfnAlert("법인을 선택하세요!", "fnValidCallback");
		return false;
	}
	if(this.gfnIsNull(this.ccfYY_EVALUATION.form.TextBox.value)){
		this.fnValidCallback = function(){
			this.ccfYY_EVALUATION.form.TextBox.setFocus();
		}
		this.gfnAlert("평가년도를 입력하세요!", "fnValidCallback");
		return false;
	}	
	return true;
}

this.fnAdd = function() {
	var nrow = this.gfnGridAdd(this.dxGrid);
	this.dsList.setColumn(nrow, "CD_CORP", this.ccfCD_CORP.form.CDTextBox.value);
	this.dsList.setColumn(nrow, "DS_CORP", this.ccfCD_CORP.form.DSTextBox.value);
	this.dsList.setColumn(nrow, "YY_EVALUATION", this.ccfYY_EVALUATION.form.TextBox.value);
	this.dsList.setColumn(nrow, "TY_EVALUATION", this.gfnNvl(this.cboTY_EVALUATION.value, ""));
}

/*
 *	삭제 버튼
 */
this.fnDel = function() { 
	this.gfnGridDel(this.dxGrid); 
} 

/*
 *	저장 버튼
 */
this.fnSave = function() {

	// 그리드 필수항목 체크
	if (!this.gfnGridValidate(this.dxGrid)) return;
	this.dxGrid.updateToDataset();
	
	if(!this.fnSaveValid()) return;

	this.dsSave.clearData();

	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "I":
			case "U":
			case "D":
				var nrow = this.dsSave.addRow();
				this.dsSave.setColumn(nrow, "TY_SAVE", flag);
				this.dsSave.setColumn(nrow, "NO_SEQ", (flag == "I" ? 0 : this.dsList.getColumn(i, "NO_SEQ")));
				this.dsSave.setColumn(nrow, "CD_CORP", this.gfnNvl(this.dsList.getColumn(i, "CD_CORP"), ""));
				this.dsSave.setColumn(nrow, "YY_EVALUATION", this.gfnNvl(this.dsList.getColumn(i, "YY_EVALUATION"), ""));
				this.dsSave.setColumn(nrow, "TY_EVALUATION", this.gfnNvl(this.dsList.getColumn(i, "TY_EVALUATION"), ""));
				this.dsSave.setColumn(nrow, "NO_INWON", this.gfnNvl(this.dsList.getColumn(i, "NO_INWON"), 0));
				this.dsSave.setColumn(nrow, "CD_S", this.gfnNvl(this.dsList.getColumn(i, "CD_S"), 0));
				this.dsSave.setColumn(nrow, "CD_A", this.gfnNvl(this.dsList.getColumn(i, "CD_A"), 0));
				this.dsSave.setColumn(nrow, "CD_B", this.gfnNvl(this.dsList.getColumn(i, "CD_B"), 0));
				this.dsSave.setColumn(nrow, "CD_C", this.gfnNvl(this.dsList.getColumn(i, "CD_C"), 0));
				this.dsSave.setColumn(nrow, "CD_D", this.gfnNvl(this.dsList.getColumn(i, "CD_D"), 0));
				this.dsSave.setColumn(nrow, "DS_REMARK", this.gfnNvl(this.dsList.getColumn(i, "DS_REMARK"), ""));
				this.dsSave.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
				this.dsSave.setColumn(nrow, "TY_AUTH", this.FormInfo.TY_AUTH);
				this.dsSave.setColumn(nrow, "GR_DEPT", this.AuthClient.CD_DEPT);
				this.dsSave.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
				break;
		}
	}	
	
	if (this.dsSave.rowcount == 0) return;

	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "save=dsSave";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";

	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc);   // 통신방법 정의 [생략가능]
}

this.fnSaveValid = function(){
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		if(flag == "I" || flag == "U"){
			var NO_INWON = parseInt(this.gfnNvl(this.dsList.getColumn(i, "NO_INWON"), 0));
			var CD_S = parseInt(this.gfnNvl(this.dsList.getColumn(i, "CD_S"), 0));
			var CD_A = parseInt(this.gfnNvl(this.dsList.getColumn(i, "CD_A"), 0));
			var CD_B = parseInt(this.gfnNvl(this.dsList.getColumn(i, "CD_B"), 0));
			var CD_C = parseInt(this.gfnNvl(this.dsList.getColumn(i, "CD_C"), 0));
			var CD_D = parseInt(this.gfnNvl(this.dsList.getColumn(i, "CD_D"), 0));
			
			var nSum = CD_S + CD_A + CD_B + CD_C + CD_D;
			if(nSum != NO_INWON){
				this.gfnAlert("인원수는 S,A,B,C,D의 합과 동일해야합니다.");
				return false;
			}
		}			
	}
	
	return true;
}

this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);
		
	} else if(svcID == "save") {
		if (errorCode == 0) {
			this.gfnAlert("저장이 완료되었습니다.");
			this.FormBtns.Select.click();
			
		} else {
			this.gfnAlert(errorMsg);
		}
	} 
}


/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	if(id == "ccfCD_CORP"){
		;
	}
	return true;
};

this.fnAfterCDTextChanged = function(id, codeFindData) {	
	var arr = codeFindData;

	if(id == "ccfCD_CORP"){
	}
}

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
this.fnGrid_BeforeUserDataSetParam = function(id, dsUserParam, nrow) {	

 	if (id == "CD_CORP") { //법인
		;
 	}
	else if (id == "ED") { //직위
		dsUserParam.setColumn(nrow, "CD_PREFIX", "ED");
	}
	else if (id == "J1") { //그룹
		dsUserParam.setColumn(nrow, "CD_PREFIX", "J1");
	}
	return true;
}

this.fnGrid_AfterEdit = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo) {
	if(e.columnid == "CD_S"
			||e.columnid == "CD_A"
			||e.columnid == "CD_B"
			||e.columnid == "CD_C"
			||e.columnid == "CD_D"
			) {
		if(e.oldvalue != e.newvalue) {
			var nTOT = parseInt(this.gfnNvl(obj.getColumn(e.row, "CD_S"), 0))
					+ parseInt(this.gfnNvl(obj.getColumn(e.row, "CD_A"), 0))
					+ parseInt(this.gfnNvl(obj.getColumn(e.row, "CD_B"), 0))
					+ parseInt(this.gfnNvl(obj.getColumn(e.row, "CD_C"), 0))
					+ parseInt(this.gfnNvl(obj.getColumn(e.row, "CD_D"), 0))
					;
			obj.setColumn(e.row, "TOT" ,nTOT);
		}
	}
}

/************************************************************************
 * 확장버튼 이벤트
 ************************************************************************/
this.fnFormDown = function(){
	this.dsExcelForm.clearData();
	this.gfnExcelExport(this.divData.form.grdForm);
}

this.fnExcelImport = function(){
	if(!this.fnSelectValid()) return;
	
	this.gfnExcelImport("dsExcelForm","Sheet1","A2","fnExcelImportCallback","import",this);
}


this.fnExcelImportCallback = function(sImportId, dsOut, dsSheet) {
	//trace("sImportId", sImportId);

 	if (dsOut.rowcount == 0)  {
		this.gfnAlert("엑셀파일에 내용이 없습니다."); 
		return false;
	}
	
	// 주석시작(양식 다운로드해서 업로드하는게 아니면 아래 부분 주석처리하고 값셋하는부분 더 아래부분 주석 풀어서 처리하면 됨, copyRow로 주석처리해야함)
// 	trace(dsOut.saveXML());
// 	for (var i=0; i< this.dsList.getColCount(); i++)
// 	{
// 		sColumnId = "Column"+i;
// 		
// 		var sColumnNm = this.gfnGridGetBindColumnNameByIndex(this.dxGrid, i);
// 		if (sColumnNm != "" && sColumnId != sColumnNm)
// 		{
// 			dsOut.updateColID(sColumnId, sColumnNm);
// 		}
// 	}  
//  trace("==============111===============");
// 	trace(dsOut.saveXML());

	
    //그리드 코드파인드 타게하려고 set_enableevent false 주석 막음 >> 속도가 안나면 set_enableevent false 할것
	//this.dsList.set_enableevent(false);
	for (var i=0; i< dsOut.rowcount; i++) {
		var nrow = this.dsList.addRow();
		
		//아래 copyRow가 컬럼변경 이벤트를 실행하지 않음. 코드파인더 실행때문에 이 위치로 이동
		// 양식이 일치하는 경우 copyRow
		//this.dsList.copyRow(nrow, dsOut, i);
		
		this.dsList.setColumn(nrow, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));  //법인            
		this.dsList.setColumn(nrow, "DS_CORP", this.dsSearch.getColumn(0, "DS_CORP"));  //법인            
		this.dsList.setColumn(nrow, "YY_EVALUATION", this.dsSearch.getColumn(0, "YY_EVALUATION"));  //평가년도     
		this.dsList.setColumn(nrow, "TY_EVALUATION", this.gfnNvl(dsOut.getColumn(i, "Column0"), ""));  //구분            
		this.dsList.setColumn(nrow, "NO_INWON", this.gfnNvl(dsOut.getColumn(i, "Column1"), 0));  //인원
		this.dsList.setColumn(nrow, "CD_S", this.gfnNvl(dsOut.getColumn(i, "Column2"), 0));  //S    
		this.dsList.setColumn(nrow, "CD_A", this.gfnNvl(dsOut.getColumn(i, "Column3"), 0)); //A
		this.dsList.setColumn(nrow, "CD_B", this.gfnNvl(dsOut.getColumn(i, "Column4"), 0));  //B        
		this.dsList.setColumn(nrow, "CD_C", this.gfnNvl(dsOut.getColumn(i, "Column5"), 0));  //C
		this.dsList.setColumn(nrow, "CD_D", this.gfnNvl(dsOut.getColumn(i, "Column6"), 0));  //D
		this.dsList.setColumn(nrow, "DS_REMARK", this.gfnNvl(dsOut.getColumn(i, "Column7"), ""));  //비고
		
		this.dsList.setColumn(nrow, this.ucFlag, "I");
	}	
	//this.dsList.set_enableevent(true); 
	
	this.gfnSetFormStatus(this, "I");
};
/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo){	
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
	}
};

]]></Script>
    <Objects>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DAJPR_DISTRIBUTION_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">save</Col>
            <Col id="SP">DAJPR_DISTRIBUTION_SAVE</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_CORP" type="STRING" size="256"/>
          <Column id="DS_CORP" type="STRING" size="256"/>
          <Column id="YY_EVALUATION" type="STRING" size="256"/>
          <Column id="TY_EVALUATION" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CD_CORP"/>
            <Col id="DS_CORP"/>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsList">
        <ColumnInfo>
          <Column id="Column0" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="dsTY_EVALUATION">
        <ColumnInfo>
          <Column id="CD_CODE" type="STRING" size="256"/>
          <Column id="DS_CODE" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CD_CODE"/>
            <Col id="DS_CODE">전체</Col>
          </Row>
          <Row>
            <Col id="CD_CODE">01</Col>
            <Col id="DS_CODE">상반기</Col>
          </Row>
          <Row>
            <Col id="CD_CODE">02</Col>
            <Col id="DS_CODE">하반기</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsExcelForm" useclientlayout="true">
        <ColumnInfo>
          <Column id="NO_SEQ" type="INT" size="256"/>
          <Column id="CD_CORP" type="STRING" size="256"/>
          <Column id="DS_CORP" type="STRING" size="256"/>
          <Column id="YY_EVALUATION" type="STRING" size="256"/>
          <Column id="TY_EVALUATION" type="STRING" size="256"/>
          <Column id="NO_INWON" type="INT" size="256"/>
          <Column id="CD_S" type="INT" size="256"/>
          <Column id="CD_A" type="INT" size="256"/>
          <Column id="CD_B" type="INT" size="256"/>
          <Column id="CD_C" type="INT" size="256"/>
          <Column id="CD_D" type="INT" size="256"/>
          <Column id="DS_REMARK" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfCD_CORP.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_CORP"/>
      <BindItem id="item1" compid="divSearch.form.ccfCD_CORP.form.DSTextBox" propid="value" datasetid="dsSearch" columnid="DS_CORP"/>
      <BindItem id="item2" compid="divSearch.form.ccfYY_EVALUATION.form.TextBox" propid="value" datasetid="dsSearch" columnid="YY_EVALUATION"/>
      <BindItem id="item3" compid="divSearch.form.cboTY_EVALUATION" propid="value" datasetid="dsSearch" columnid="TY_EVALUATION"/>
    </Bind>
  </Form>
</FDL>
