<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="DAV_HOUSEMONTH" width="1280" height="720" titletext="월세소득공제명세" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0" top="0" height="46.0" right="0" cssclass="div_SEARCH_Bg">
          <Layouts>
            <Layout>
              <Static id="staCD_CORP" taborder="0" text="법인" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfCD_CORP" CDTextWidth="50" taborder="1" left="staCD_CORP:0.0" top="10.0" width="179" height="24.0" url="cmm::cmmCodeFind.xfdl" CodeFindName="DAX_CFCORP2" BeforeUserDataSetParam="fnBeforeUserDataSetParam" AfterCDTextChanged="fnAfterCDTextChanged"/>
              <Static id="staYN_MID" taborder="2" text="작업구분" left="ccfCD_CORP:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Combo id="cboYN_MID" taborder="3" left="staYN_MID:0.0" top="10.0" width="80" height="24.0" innerdataset="innerdataset" datacolumn="datacolumn" codecolumn="codecolumn" index="0" value="1" onitemchanged="fnSearchInit" text="연말정산" readonly="true">
                <Dataset id="innerdataset">
                  <ColumnInfo>
                    <Column id="codecolumn" size="256"/>
                    <Column id="datacolumn" size="256"/>
                  </ColumnInfo>
                  <Rows>
                    <Row>
                      <Col id="datacolumn">연말정산</Col>
                      <Col id="codecolumn">N</Col>
                    </Row>
                    <Row>
                      <Col id="datacolumn">중도정산</Col>
                      <Col id="codecolumn">Y</Col>
                    </Row>
                  </Rows>
                </Dataset>
              </Combo>
              <Static id="staWORK_BASE" taborder="4" text="적용년도" left="cboYN_MID:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ctclWORK_BASE" taborder="5" left="staWORK_BASE:0.0" top="10.0" width="80" height="24.0" enableevent="true" async="false" AfterCDTextChanged="fnAfterCDTextChanged"/>
              <Static id="staID_RESIDENT" taborder="6" text="주민번호" left="ctclWORK_BASE:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfID_RESIDENT" CodeFindName="DAX_CFEMP" CDTextWidth="130" taborder="7" left="staID_RESIDENT:0.0" top="10.0" width="250" height="24.0" url="cmm::cmmCodeFind.xfdl" BeforeUserDataSetParam="fnBeforeUserDataSetParam" AfterCDTextChanged="fnAfterCDTextChanged"/>
              <Edit id="edtID_SABUN" taborder="8" left="ccfID_RESIDENT:0.0" top="10.0" width="79" height="24.0" visible="false"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" right="0" bottom="0" binddataset="dsList" BeforeUserDataSetParam="fnGrid_BeforeUserDataSetParam" AfterCDTextChanged="fnGrid_AfterCDTextChanged">
                <Formats>
                  <Format id="default"/>
                </Formats>
              </Grid>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Objects>
      <Dataset id="dsList" onvaluechanged="dsList_onvaluechanged"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DAVPR_HOUSEMONTH_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">closeCheck</Col>
            <Col id="SP">DAVPR_CLOSE_CHECK2</Col>
          </Row>
          <Row>
            <Col id="TARGET">insert</Col>
            <Col id="SP">DAVPR_HOUSEMONTH_INSERT</Col>
          </Row>
          <Row>
            <Col id="TARGET">update</Col>
            <Col id="SP">DAVPR_HOUSEMONTH_UPDATE</Col>
          </Row>
          <Row>
            <Col id="TARGET">delete</Col>
            <Col id="SP">DAVPR_HOUSEMONTH_DELETE</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsYnClose">
        <ColumnInfo>
          <Column id="YEAREND_CLOSE" type="STRING" size="256"/>
          <Column id="YN_CLOSE" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
    </Objects>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);
	this.gfnFormInfo(this);
	// ---------------------------//

	this.fnSetButton();
	//this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	if(!this.gfnIsNull(this.getOwnerFrame().WORK_BASE)){
		//작업구분
		this.cboYN_MID.set_value(this.getOwnerFrame().YN_MID);
		
		//적용년도(현재)
		this.ctclWORK_BASE.set_url(this.cboYN_MID.value=="Y"?"cmm::cmmCalMM.xfdl":"cmm::cmmCalYY.xfdl");
		this.ctclWORK_BASE.form.TextBox.set_value(this.getOwnerFrame().WORK_BASE);
		this.divSearch.form.staWORK_BASE.set_text(this.cboYN_MID.value=="Y"?"적용년월":"적용년도"); 
		
		// 법인코드 및 법인명 기본세팅
		this.ccfCD_CORP.form.CDTextBox.set_value(this.getOwnerFrame().CD_CORP);
		this.ccfCD_CORP.form.DSTextBox.set_value(this.getOwnerFrame().DS_CORP); 
		
		//주민번호
		this.ccfID_RESIDENT.form.CDTextBox.set_value(this.getOwnerFrame().ID_RESIDENT);
		this.ccfID_RESIDENT.form.DSTextBox.set_value(this.getOwnerFrame().DS_HNAME);
		
		//사번
		this.edtID_SABUN.set_value(this.getOwnerFrame().ID_SABUN);
		
		//READONLY
		this.ctclWORK_BASE.set_enable(false);
		this.ccfCD_CORP.form.set_enable(false);
		this.ccfID_RESIDENT.form.set_enable(false);		
	}else{
		//적용년도(현재)
		this.ctclWORK_BASE.set_url("cmm::cmmCalMM.xfdl");
		this.ctclWORK_BASE.form.TextBox.set_value(this.gfnGetDate().substr(0,6));
		this.divSearch.form.staWORK_BASE.set_text("적용년월");
		
		// 법인코드 및 법인명 기본세팅
		this.ccfCD_CORP.form.CDTextBox.set_value(this.AuthClient.CD_CORP);
		this.ccfCD_CORP.form.DSTextBox.set_value(this.AuthClient.DS_CORP);
	}
	
	this.FormBtns.Select.click();
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
	// Select, Add, Del, Save, Excel, Print
	// SubSelect, SubAdd, SubDel, SuubSave, SubExcel
	// this.FormBtns.Add.set_enable(false);
	// this.FormBtns.Del.set_enable(false);
	// this.FormBtns.Save.set_enable(false);
	
	
	var bRtn = this.fnIsChangePossible();
	this.FormBtns.Add.set_enable(bRtn);
	this.FormBtns.Del.set_enable(bRtn);
	this.FormBtns.Save.set_enable(bRtn);	
};

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	//작업구분
	this.cboYN_MID = this.divSearch.form.cboYN_MID;
	
	//적용년도
	this.ctclWORK_BASE = this.divSearch.form.ctclWORK_BASE;
	
	//법인코드
	this.ccfCD_CORP = this.divSearch.form.ccfCD_CORP;
	
	//주민번호
	this.ccfID_RESIDENT = this.divSearch.form.ccfID_RESIDENT;
	this.edtID_SABUN = this.divSearch.form.edtID_SABUN;
	
	//임직원 구분
	this.rdoTY_GUBUN = this.divSearch.form.rdoTY_GUBUN;
	
	//그리드
	this.dxGrid = this.divData.form.objGrid;
	
	this.grSearch = this.FormInfo.GR_SEARCH;					          // 권한
	this.cdGroup = this.AuthClient.CD_GROUP;					          // 그룹코드
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	this.gfnGridInit(this.dxGrid, this.dsList, "DA", "DAV_HOUSEMONTH");
	
	// 셀 수정가능 여부
	this.dxGrid.EnterCell = "fnGrid_EnterCell";	
};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	
	//조회
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("ID_RESIDENT", "string");
	this.dsSelect.addColumn("ID_SABUN", "string");
	this.dsSelect.addColumn("YY_BASE", "string");
	this.dsSelect.addColumn("MM_BASE", "string");
	this.dsSelect.addColumn("NO_APPLY", "bigdecimal");
	this.dsSelect.addColumn("YN_MID", "string");
	this.dsSelect.addColumn("CD_CORP", "string");
	
	//입력
	this.dsInsert = new Dataset();
	this.dsInsert.addColumn("YY_BASE", "string");
	this.dsInsert.addColumn("MM_BASE", "string");
	this.dsInsert.addColumn("CD_CORP", "string");
	this.dsInsert.addColumn("YN_MID", "string");
	this.dsInsert.addColumn("ID_RESIDENT", "string");
	this.dsInsert.addColumn("ID_SABUN", "string");
	this.dsInsert.addColumn("YN_NTS", "string");
	this.dsInsert.addColumn("DS_NAME_LEASE", "string");
	this.dsInsert.addColumn("ID_RESIDENT_LEASE", "string");
	this.dsInsert.addColumn("TY_HOUSE", "string");
	this.dsInsert.addColumn("NO_SIZE", "string");
	this.dsInsert.addColumn("DS_ADDRESS_LEASE", "string");
	this.dsInsert.addColumn("DT_FROM_LEASE", "string");
	this.dsInsert.addColumn("DT_TO_LEASE", "string");
	this.dsInsert.addColumn("AM_LEASE", "string");
	this.dsInsert.addColumn("ID_INSERT", "string");
	
	//수정
	this.dsUpdate = new Dataset();
	this.dsUpdate.addColumn("YY_BASE", "string");
	this.dsUpdate.addColumn("MM_BASE", "string");
	this.dsUpdate.addColumn("CD_CORP", "string");
	this.dsUpdate.addColumn("ID_RESIDENT", "string");
	this.dsUpdate.addColumn("YN_MID", "string");
	this.dsUpdate.addColumn("ID_SABUN", "string");
	this.dsUpdate.addColumn("YN_NTS", "string");
	this.dsUpdate.addColumn("DS_NAME_LEASE", "string");
	this.dsUpdate.addColumn("ID_RESIDENT_LEASE", "string");
	this.dsUpdate.addColumn("TY_HOUSE", "string");
	this.dsUpdate.addColumn("NO_SIZE", "string");
	this.dsUpdate.addColumn("DS_ADDRESS_LEASE", "string");
	this.dsUpdate.addColumn("DT_FROM_LEASE", "string");
	this.dsUpdate.addColumn("DT_TO_LEASE", "string");
	this.dsUpdate.addColumn("AM_LEASE", "string");
	this.dsUpdate.addColumn("ID_INSERT", "string");
	
	//삭제
	this.dsDelete = new Dataset();
	this.dsDelete.addColumn("YY_BASE", "string");
	this.dsDelete.addColumn("MM_BASE", "string");
	this.dsDelete.addColumn("CD_CORP", "string");
	this.dsDelete.addColumn("ID_RESIDENT", "string");
	this.dsDelete.addColumn("YN_MID", "string");
	this.dsDelete.addColumn("ID_SABUN", "string");
	this.dsDelete.addColumn("DS_NAME_LEASE", "string");
	this.dsDelete.addColumn("ID_RESIDENT_LEASE", "string");
	this.dsDelete.addColumn("DS_ADDRESS_LEASE", "string");
	this.dsDelete.addColumn("DT_FROM_LEASE", "string");
	this.dsDelete.addColumn("DT_TO_LEASE", "string");
	this.dsDelete.addColumn("AM_LEASE", "string");
	this.dsDelete.addColumn("ID_INSERT", "string");
	
};

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {

	if (!this.fnSelectValidate()) return false;

	this.dsSelect.clearData();
	this.dsSelect.addRow();

	this.dsSelect.setColumn(0, "ID_RESIDENT", this.ccfID_RESIDENT.form.CDTextBox.value.replace(/-/g,""));
	this.dsSelect.setColumn(0, "ID_SABUN", this.edtID_SABUN.value);
	this.dsSelect.setColumn(0, "YY_BASE", this.cboYN_MID.value=="Y"?this.ctclWORK_BASE.form.TextBox.value.substring(0,4):this.ctclWORK_BASE.form.TextBox.value);
	this.dsSelect.setColumn(0, "MM_BASE", this.cboYN_MID.value=="Y"?this.ctclWORK_BASE.form.TextBox.value.substring(4,6):"12");
	this.dsSelect.setColumn(0, "NO_APPLY", "1");
	this.dsSelect.setColumn(0, "YN_MID", this.cboYN_MID.value);
	this.dsSelect.setColumn(0, "CD_CORP", this.ccfCD_CORP.form.CDTextBox.value);

	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect closeCheck=dsSelect";
	var outData     = "dsList=select0 dsYnClose=closeCheck0";
	var strArg      = "";
	var callBackFnc = "fnCallback";

	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// trabsaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 	    // 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); 	// 통신방법 정의 [생략가능]
};

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	var nrow = this.gfnGridAdd(this.dxGrid);
	
 	this.dsList.setColumn(nrow, "ID_RESIDENT", this.ccfID_RESIDENT.form.CDTextBox.value.replace(/-/g,""));
	//this.dsList.setColumn(nrow, "ID_RESIDENT_FAMILY", this.ccfID_RESIDENT.form.DSTextBox.value.replace(/-/g,""));
 	this.dsList.setColumn(nrow, "ID_SABUN", this.edtID_SABUN.value);
	this.dsList.setColumn(nrow, "YN_NTS", "N"); //국세청자료	
	
};

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
};

/*
 *	저장 버튼
 */
this.fnSave = function() {
	//  그리드 필수항목 체크
	if (!this.gfnGridValidate(this.dxGrid)) return;
	if (!this.gfValidate()) return;

	this.dxGrid.updateToDataset();

	this.dsInsert.clearData();
	this.dsUpdate.clearData();
	this.dsDelete.clearData();

	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "I":
				var nrow = this.dsInsert.addRow();

				this.dsInsert.setColumn(nrow, "YY_BASE", this.cboYN_MID.value=="Y"?this.ctclWORK_BASE.form.TextBox.value.substring(0,4):this.ctclWORK_BASE.form.TextBox.value);
				this.dsInsert.setColumn(nrow, "MM_BASE", this.cboYN_MID.value=="Y"?this.ctclWORK_BASE.form.TextBox.value.substring(4,6):"12");
				this.dsInsert.setColumn(nrow, "CD_CORP", this.ccfCD_CORP.form.CDTextBox.value);
				this.dsInsert.setColumn(nrow, "YN_MID", this.cboYN_MID.value);
				this.dsInsert.setColumn(nrow, "ID_RESIDENT", this.ccfID_RESIDENT.form.CDTextBox.value.replace(/-/g,""));
				this.dsInsert.setColumn(nrow, "ID_SABUN", this.edtID_SABUN.value);
				this.dsInsert.setColumn(nrow, "YN_NTS", this.dsList.getColumn(i, "YN_NTS"));
				this.dsInsert.setColumn(nrow, "DS_NAME_LEASE", this.dsList.getColumn(i, "DS_NAME_LEASE"));
				this.dsInsert.setColumn(nrow, "ID_RESIDENT_LEASE", this.dsList.getColumn(i, "ID_RESIDENT_LEASE").replace(/-/g,""));
				this.dsInsert.setColumn(nrow, "TY_HOUSE", this.dsList.getColumn(i, "TY_HOUSE"));
				this.dsInsert.setColumn(nrow, "NO_SIZE", this.dsList.getColumn(i, "NO_SIZE"));
				this.dsInsert.setColumn(nrow, "DS_ADDRESS_LEASE", this.dsList.getColumn(i, "DS_ADDRESS_LEASE"));
				this.dsInsert.setColumn(nrow, "DT_FROM_LEASE", this.dsList.getColumn(i, "DT_FROM_LEASE"));
				this.dsInsert.setColumn(nrow, "DT_TO_LEASE", this.dsList.getColumn(i, "DT_TO_LEASE"));
				this.dsInsert.setColumn(nrow, "AM_LEASE", this.dsList.getColumn(i, "AM_LEASE"));
				this.dsInsert.setColumn(nrow, "ID_INSERT", this.AuthClient.ID_USER);
				break;
			case "U":
				var nrow = this.dsUpdate.addRow();
				
				this.dsUpdate.setColumn(nrow, "YY_BASE", this.cboYN_MID.value=="Y"?this.ctclWORK_BASE.form.TextBox.value.substring(0,4):this.ctclWORK_BASE.form.TextBox.value);
				this.dsUpdate.setColumn(nrow, "MM_BASE", this.cboYN_MID.value=="Y"?this.ctclWORK_BASE.form.TextBox.value.substring(4,6):"12");
				this.dsUpdate.setColumn(nrow, "CD_CORP", this.ccfCD_CORP.form.CDTextBox.value);
				this.dsUpdate.setColumn(nrow, "ID_RESIDENT", this.ccfID_RESIDENT.form.CDTextBox.value.replace(/-/g,""));
				this.dsUpdate.setColumn(nrow, "YN_MID", this.cboYN_MID.value);
				this.dsUpdate.setColumn(nrow, "ID_SABUN", this.edtID_SABUN.value);
				this.dsUpdate.setColumn(nrow, "YN_NTS", this.dsList.getColumn(i, "YN_NTS"));
				this.dsUpdate.setColumn(nrow, "DS_NAME_LEASE", this.dsList.getColumn(i, "DS_NAME_LEASE"));
				this.dsUpdate.setColumn(nrow, "ID_RESIDENT_LEASE", this.dsList.getColumn(i, "ID_RESIDENT_LEASE").replace(/-/g,""));
				this.dsUpdate.setColumn(nrow, "TY_HOUSE", this.dsList.getColumn(i, "TY_HOUSE"));
				this.dsUpdate.setColumn(nrow, "NO_SIZE", this.dsList.getColumn(i, "NO_SIZE"));
				this.dsUpdate.setColumn(nrow, "DS_ADDRESS_LEASE", this.dsList.getColumn(i, "DS_ADDRESS_LEASE"));
				this.dsUpdate.setColumn(nrow, "DT_FROM_LEASE", this.dsList.getColumn(i, "DT_FROM_LEASE"));
				this.dsUpdate.setColumn(nrow, "DT_TO_LEASE", this.dsList.getColumn(i, "DT_TO_LEASE"));
				this.dsUpdate.setColumn(nrow, "AM_LEASE", this.dsList.getColumn(i, "AM_LEASE"));
				this.dsUpdate.setColumn(nrow, "", this.AuthClient.ID_USER);
				
				break;
			case "D":
				var nrow = this.dsDelete.addRow();
				
				this.dsDelete.setColumn(nrow, "YY_BASE", this.cboYN_MID.value=="Y"?this.ctclWORK_BASE.form.TextBox.value.substring(0,4):this.ctclWORK_BASE.form.TextBox.value);
				this.dsDelete.setColumn(nrow, "MM_BASE", this.cboYN_MID.value=="Y"?this.ctclWORK_BASE.form.TextBox.value.substring(4,6):"12");
				this.dsDelete.setColumn(nrow, "CD_CORP", this.ccfCD_CORP.form.CDTextBox.value);
				this.dsDelete.setColumn(nrow, "ID_RESIDENT", this.ccfID_RESIDENT.form.CDTextBox.value.replace(/-/g,""));
				this.dsDelete.setColumn(nrow, "YN_MID", this.cboYN_MID.value);
				this.dsDelete.setColumn(nrow, "ID_SABUN", this.edtID_SABUN.value);
				this.dsDelete.setColumn(nrow, "DS_NAME_LEASE", this.dsList.getColumn(i, "DS_NAME_LEASE"));
				this.dsDelete.setColumn(nrow, "ID_RESIDENT_LEASE", this.dsList.getColumn(i, "ID_RESIDENT_LEASE").replace(/-/g,""));
				this.dsDelete.setColumn(nrow, "DS_ADDRESS_LEASE", this.dsList.getColumn(i, "DS_ADDRESS_LEASE"));
				this.dsDelete.setColumn(nrow, "DT_FROM_LEASE", this.dsList.getColumn(i, "DT_FROM_LEASE"));
				this.dsDelete.setColumn(nrow, "DT_TO_LEASE", this.dsList.getColumn(i, "DT_TO_LEASE"));
				this.dsDelete.setColumn(nrow, "AM_LEASE", this.dsList.getColumn(i, "AM_LEASE"));
				this.dsDelete.setColumn(nrow, "ID_INSERT", this.AuthClient.ID_USER);
			
				break;
		}
	}

	if (this.dsInsert.rowcount == 0 && this.dsUpdate.rowcount == 0 && this.dsDelete.rowcount == 0) return;

	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "insert=dsInsert update=dsUpdate delete=dsDelete";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";

	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
};

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
};

/*
 *	출력 버튼
 */
this.fnPrint = function() {
};

/*
 *	리셋 버튼
 */
this.fnReset = function() {
	this.ctclWORK_BASE.form.TextBox.set_value("");
	this.ccfCD_CORP.form.CDTextBox.set_value("");
	this.ccfCD_CORP.form.DSTextBox.set_value("");
	this.ccfID_RESIDENT.form.CDTextBox.set_value("");
	this.ccfID_RESIDENT.form.DSTextBox.set_value("");
	this.edtID_SABUN.set_value("");	
};
/************************************************************************
 * Validate
 ************************************************************************/
this.fnSelectValidate = function() {

 	var validate = true;
	
	//적용년도
	if (this.gfnIsNull(this.ctclWORK_BASE.form.TextBox.value)) {
		this.fnVaidateCallback = function() {
			this.ctclWORK_BASE.form.TextBox.setFocus();
		}
		this.gfnAlert(this.divSearch.form.staWORK_BASE.text + "을/를 입력하세요.");
		return false;
	}
	
	//법인
	if (this.gfnIsNull(this.ccfCD_CORP.form.CDTextBox.value)) {
		validate = false;
		this.fnVaidateCallback = function() {
			this.ccfCD_CORP.form.CDTextBox.setFocus();
		}
		this.gfnAlert("법인코드를 입력하세요.", "fnVaidateCallback");
	}
	
	//주민등록번호
	if (this.gfnIsNull(this.ccfID_RESIDENT.form.CDTextBox.value)) {
		validate = false;
		this.fnVaidateCallback = function() {
			this.ccfID_RESIDENT.form.CDTextBox.setFocus();
		}
		this.gfnAlert("주민등록번호를 입력하세요.", "fnVaidateCallback");
	}

 	return validate;
};
/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);
		this.fnSetButton();
	} else if(svcID == "save"){
		this.FormBtns.Select.click();
	} else {
		this.gfnAlert(errorMsg);
	}
};

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {

 	switch(id) {
		case "ccfCD_CORP": // 법인코드
			dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
			dsUserParam.setColumn(nrow, "CD_DEPT", this.AuthClient.CD_DEPT);
			break;

		case "ccfID_RESIDENT"://주민번호
			if (this.gfnIsNull(this.ccfCD_CORP.form.CDTextBox.value)) {
				this.fnBeforeUserCallback = function() {
						this.ccfCD_CORP.form.CDTextBox.setFocus();
					}
					this.gfnAlert("법인코드를 입력하세요.", "fnBeforeUserCallback");
					return false;
			}
			dsUserParam.setColumn(nrow, "GUBUN", "E");	//임직원구분 rdoTY_GUBUN 없음
			dsUserParam.setColumn(nrow, "CD_CORP", this.ccfCD_CORP.form.CDTextBox.value);
			break;
			
		default:
 	}
 	return true;
};

this.fnAfterCDTextChanged = function(id, codeFindData) {

	var arr = codeFindData;
	
	switch(id) {
		case "ccfCD_CORP": // 법인코드
			this.ccfID_RESIDENT.form.CDTextBox.set_value("");
			this.ccfID_RESIDENT.form.DSTextBox.set_value("");
			break;
		
		case "ccfID_RESIDENT"://주민등록번호
			this.ccfID_RESIDENT.form.CDTextBox.set_value(arr[0]["ID_RESIDENT"]);
			this.ccfID_RESIDENT.form.DSTextBox.set_value(arr[0]["DS_HNAME"]);		
			this.edtID_SABUN.set_value(arr[0]["ID_SABUN"]);
			break;	
			
		default:
	}

	this.fnSearchInit();
};

this.fnGrid_BeforeUserDataSetParam = function(id, dsUserParam, nrow){

	switch(id) {	
	
		case "DAX_CFBASESUBST":     // 부양가족
			dsUserParam.setColumn(nrow, "YY_BASE", this.cboYN_MID.value=="Y"?this.ctclWORK_BASE.form.TextBox.value.substring(0,4):this.ctclWORK_BASE.form.TextBox.value);
			dsUserParam.setColumn(nrow, "MM_BASE", this.cboYN_MID.value=="Y"?this.ctclWORK_BASE.form.TextBox.value.substring(4,6):"12");
			dsUserParam.setColumn(nrow, "YN_MID", this.cboYN_MID.value);
			dsUserParam.setColumn(nrow, "CD_CORP", this.ccfCD_CORP.form.CDTextBox.value);
			dsUserParam.setColumn(nrow, "ID_RESIDENT", this.ccfID_RESIDENT.form.CDTextBox.value.replace(/-/g,""));
		break;		

		default:
	}	
	return true;	
};

this.fnGrid_AfterCDTextChanged = function(id, codeFindData) {		
	var arr = codeFindData; 

	switch(id) {
		case "DAX_CFBASESUBST":     // 부양가족
		break;		

		default:	
	}	
	return true;
};
/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
this.fnGrid_EnterCell = function(obj:nexacro.Grid, row, cell) {
// 	var colnm = this.gfnGridGetBindColumnNameByIndex(this.dxGrid, cell);
// 	if(this.dsList.getColumn(row, colnm) == "TEST") {
// 		return false;
// 	}

	var bRtn = this.fnIsChangePossible();
	
	if(bRtn == false){
		return false;
	}
}

 this.gfValidate = function ()
{
	var colID_RESIDENT_LEASE = this.dxGrid.getBindCellIndex("body", "ID_RESIDENT_LEASE");
	var headText   = this.dxGrid.getCellProperty("head" , colID_RESIDENT_LEASE, "text");
	
	for(var i=0;i<this.dsList.rowcount;i++){
	if(this.dsList.getColumn(i, this.ucFlag) == "I" || this.dsList.getColumn(i, this.ucFlag) == "U"){
	
			var lease = nexacro.replaceAll(this.gfnTrim(this.gfnNvl(this.dsList.getColumn(i, "ID_RESIDENT_LEASE"),"")), "-", "");
			// 10자리 : 사업자, 13자리 : 주민등록번호
			if(lease.length == 10){		
				if(!this.gfnIsBzIdNo(lease)){
					this.gfnAlert((i + 1) +"열: ["+headText+"]가 유효하지 않습니다.");
					this.dsList.set_rowposition(i);
					this.dxGrid.setCellPos(colID_RESIDENT_LEASE);
					return false;	
				}
			}else if (lease.length == 13){
				if(!this.gfnIsSSN(lease)){
					this.gfnAlert((i + 1) +"열: ["+headText+"]가 유효하지 않습니다.");
					this.dsList.set_rowposition(i);
					this.dxGrid.setCellPos(colID_RESIDENT_LEASE);
					return false;					
				}
			}else{
				this.gfnAlert((i + 1) +"열: ["+headText+"]가 유효하지 않습니다.");
				this.dsList.set_rowposition(i);
				this.dxGrid.setCellPos(colID_RESIDENT_LEASE);
				return false;			
			}
		}
	}
	return true;
};
 /************************************************************************
 * 확장버튼 이벤트
 ************************************************************************/
/************************************************************************
 * 기타 이벤트
 ************************************************************************/
/*
 *	조회 조건 변경시 초기화
 */
this.fnSearchInit = function(obj,e) {
	if(e == null || (e.pretext != e.posttext)) {
		// 폼상태 초기화
		this.gfnSetFormStatus(this);
		this.gfnGridClear(this.dxGrid);
	}
};
this.dsList_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	this.fnSetButton();
};

this.fnIsChangePossible = function(){
	var bPossible = false;
	
	var YEAREND_CLOSE = this.dsYnClose.getColumn(0, "YEAREND_CLOSE");
	var YN_CLOSE = this.dsYnClose.getColumn(0, "YN_CLOSE");	
	
	if(YEAREND_CLOSE == "Y" && YN_CLOSE == "Y"){
		bPossible = false;
	}
	else if(YEAREND_CLOSE == "Y" && YN_CLOSE == "N"){
		bPossible = false;
	}
	else if(YEAREND_CLOSE == "N" && YN_CLOSE == "Y"){
		bPossible = false;
	}
	else if(YEAREND_CLOSE == "N" && YN_CLOSE == "N"){
		bPossible = true;
	}	
	
	if(bPossible){
		trace("fnIsChangePossible>>수정가능");
	}else{
		trace("fnIsChangePossible>>수정불가");
	}
	
	return bPossible;
}]]></Script>
  </Form>
</FDL>
