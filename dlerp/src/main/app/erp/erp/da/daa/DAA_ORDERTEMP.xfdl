<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="발령정보자료이관" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0" top="0" height="46.0" right="0" cssclass="div_SEARCH_Bg">
          <Layouts>
            <Layout>
              <Static id="staCD_CORP" taborder="0" text="소속법인" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfCD_CORP" CDTextWidth="70" taborder="1" left="staCD_CORP:0.0" top="10.0" width="270" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg" ondragmove="divData_ondragmove">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="5" bottom="0" right="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	//법인 셋팅
	this.divSearch.form.ccfCD_CORP.form.CDTextBox.set_value(this.AuthClient.CD_CORP);
	this.divSearch.form.ccfCD_CORP.form.DSTextBox.set_value(this.AuthClient.DS_CORP);	
	
	this.FormBtns.Select.click();
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 ************************************************************************/
this.fnSetButton = function() {
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결
 ************************************************************************/
this.fnSetExtendButton = function() {
// 	this.btn1 = this.gfnFormButtonAdd("XXXX", "fnXXXX", "XXXX");
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.dxGrid = this.divData.form.objGrid;
	this.ccfCD_CORP = this.divSearch.form.ccfCD_CORP;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {	
	this.gfnGridInit(this.dxGrid, this.dsList, "DA", "DAA_ORDERTEMP");	
	
	this.ccfCD_CORP.CodeFindName = "DAX_CFCORP";
	this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforuserDataSetParam"; 
	this.dxGrid.AfterCDTextChanged = "fnGrid_AfterCDTextChanged";
}

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {

	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_CORP", "string");
	
	this.dsSave = new Dataset();
	this.dsSave.addColumn("TY_WRK", "string");
	this.dsSave.addColumn("ID_PERSON", "int");
	this.dsSave.addColumn("CD_CORP", "string");
	this.dsSave.addColumn("ID_SABUN", "string");
	this.dsSave.addColumn("DT_ORDER", "string");
	this.dsSave.addColumn("NO_SEQ", "int");
	this.dsSave.addColumn("CD_ORDER1", "string");
	this.dsSave.addColumn("CD_ORDER2", "string");
	this.dsSave.addColumn("CD_DEPTBEF", "string");
	this.dsSave.addColumn("CD_CORP_ORD", "string");
	this.dsSave.addColumn("CD_DEPT", "string");
	this.dsSave.addColumn("CD_EMPTYPE", "string");
	this.dsSave.addColumn("CD_POSITION", "string");
	this.dsSave.addColumn("CD_PAYSTEP", "string");
	this.dsSave.addColumn("CD_OCCUPATION", "string");
	this.dsSave.addColumn("CD_JOBTYPE", "string");
	this.dsSave.addColumn("CD_DUTY", "string");
	this.dsSave.addColumn("CD_DISPATCHORG", "string");
	this.dsSave.addColumn("FR_DISPATCH", "string");
	this.dsSave.addColumn("TO_DISPATCH", "string");
	this.dsSave.addColumn("MM_TERM", "int");
	this.dsSave.addColumn("NO_DOCUMENT", "string");
	this.dsSave.addColumn("DS_REMARK", "string");
	this.dsSave.addColumn("FR_CORPCURRENT", "string");
	this.dsSave.addColumn("TO_CORPCURRENT", "string");
	this.dsSave.addColumn("YN_APPLY_PROVATION", "string");
	this.dsSave.addColumn("FR_PROVATION", "string");
	this.dsSave.addColumn("TO_PROVATION", "string");
	this.dsSave.addColumn("CD_AGREEMENT", "string");
	this.dsSave.addColumn("CD_HOLDDUTY", "string");
	this.dsSave.addColumn("ID_INSERT", "string");

}

/************************************************************************
 * 버튼 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if(!this.fnSelectValidate()) return;

	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	this.dsSelect.setColumn(0, "CD_CORP", this.ccfCD_CORP.form.CDTextBox.value);	
			

	var strSvcId    = "select";
	var strSvcType  = "select";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	 
						strSvcType , 
						inProc,			 
						inData , 	 
						outData , 		 
						strArg, 			 
						callBackFnc);  
}

/*
 *	입력 버튼
 */ 
this.fnAdd = function() {
	var nRow = this.gfnGridAdd(this.dxGrid);
}


/*
 *	삭제 버튼
 */ 
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}

/*
 *	저장 버튼
 */ 
this.fnSave = function() {
	if (!this.gfnGridValidate(this.dxGrid)) return;

	this.dxGrid.updateToDataset();
	
	this.dsSave.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		
		switch(flag) {
			case "I":
			case "U":
			case "D":
				var nrow = this.dsSave.addRow();
				this.dsSave.setColumn(nrow, "TY_WRK", flag);
				this.dsSave.setColumn(nrow, "ID_PERSON", this.dsList.getColumn(i, "ID_PERSON"));
				this.dsSave.setColumn(nrow, "CD_CORP", this.dsList.getColumn(i, "CD_CORP"));
				this.dsSave.setColumn(nrow, "ID_SABUN", this.dsList.getColumn(i, "ID_SABUN"));
				this.dsSave.setColumn(nrow, "DT_ORDER", this.dsList.getColumn(i, "DT_ORDER"));
				this.dsSave.setColumn(nrow, "NO_SEQ", this.dsList.getColumn(i, "NO_SEQ"));
				this.dsSave.setColumn(nrow, "CD_ORDER1", this.dsList.getColumn(i, "CD_ORDER1"));
				this.dsSave.setColumn(nrow, "CD_ORDER2", this.dsList.getColumn(i, "CD_ORDER2"));
				this.dsSave.setColumn(nrow, "CD_DEPTBEF", this.dsList.getColumn(i, "CD_DEPTBEF"));
				this.dsSave.setColumn(nrow, "CD_CORP_ORD", this.dsList.getColumn(i, "CD_CORP_ORD"));
				this.dsSave.setColumn(nrow, "CD_DEPT", this.dsList.getColumn(i, "CD_DEPT"));
				this.dsSave.setColumn(nrow, "CD_EMPTYPE", this.dsList.getColumn(i, "CD_EMPTYPE"));
				this.dsSave.setColumn(nrow, "CD_POSITION", this.dsList.getColumn(i, "CD_POSITION"));
				this.dsSave.setColumn(nrow, "CD_PAYSTEP", this.dsList.getColumn(i, "CD_PAYSTEP"));
				this.dsSave.setColumn(nrow, "CD_OCCUPATION", this.dsList.getColumn(i, "CD_OCCUPATION"));
				this.dsSave.setColumn(nrow, "CD_JOBTYPE", this.dsList.getColumn(i, "CD_JOBTYPE"));
				this.dsSave.setColumn(nrow, "CD_DUTY", this.dsList.getColumn(i, "CD_DUTY"));
				this.dsSave.setColumn(nrow, "CD_DISPATCHORG", this.dsList.getColumn(i, "CD_DISPATCHORG"));
				this.dsSave.setColumn(nrow, "FR_DISPATCH", this.dsList.getColumn(i, "FR_DISPATCH"));
				this.dsSave.setColumn(nrow, "TO_DISPATCH", this.dsList.getColumn(i, "TO_DISPATCH"));
				this.dsSave.setColumn(nrow, "MM_TERM", this.dsList.getColumn(i, "MM_TERM"));
				this.dsSave.setColumn(nrow, "NO_DOCUMENT", this.dsList.getColumn(i, "NO_DOCUMENT"));
				this.dsSave.setColumn(nrow, "DS_REMARK", this.dsList.getColumn(i, "DS_REMARK"));
				this.dsSave.setColumn(nrow, "FR_CORPCURRENT", this.dsList.getColumn(i, "FR_CORPCURRENT"));
				this.dsSave.setColumn(nrow, "TO_CORPCURRENT", this.dsList.getColumn(i, "TO_CORPCURRENT"));
				this.dsSave.setColumn(nrow, "YN_APPLY_PROVATION", this.dsList.getColumn(i, "YN_APPLY_PROVATION"));
				this.dsSave.setColumn(nrow, "FR_PROVATION", this.dsList.getColumn(i, "FR_PROVATION"));
				this.dsSave.setColumn(nrow, "TO_PROVATION", this.dsList.getColumn(i, "TO_PROVATION"));
				this.dsSave.setColumn(nrow, "CD_AGREEMENT", this.dsList.getColumn(i, "CD_AGREEMENT"));
				this.dsSave.setColumn(nrow, "CD_HOLDDUTY", this.dsList.getColumn(i, "CD_HOLDDUTY"));
				this.dsSave.setColumn(nrow, "ID_INSERT", this.AuthClient.ID_USER);				
				break;
		}
	}
	
	if (this.dsSave.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "save=dsSave";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
 	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
 						strSvcType , 	// transaction을 요청할 구분
 						inProc,			// Procedure 정보 Dataset 이름
 						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
 						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
 						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
 						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */ 
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}
/************************************************************************
 * Validate
 ************************************************************************/
this.fnSelectValidate = function() {
	var validate = true;
	var cd_corp = this.ccfCD_CORP.form.CDTextBox.value;
	
	if (this.gfnIsNull(cd_corp)) {
		validate = false;
		this.fnVaidateCallback = function() {
			this.ccfCD_CORP.form.CDTextBox.setFocus();
		}
		this.gfnAlert("소속법인을 입력하세요.", "fnVaidateCallback");
	}
	return validate;
};
/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);

	}
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
			this.gfnGridAfterSelect(this.dxGrid);
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	
}

/************************************************************************
 * 확장버튼 이벤트
 ************************************************************************/



/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
this.fnGrid_BeforuserDataSetParam = function(id, dsUserParam, nrow){	
	
	var gridIdx = this.dxGrid.currentrow;	

	switch(id) {	
	
		case "OA":	//발령대분류 
			dsUserParam.setColumn(nrow, "CD_PREFIX", "OA");
			break;
		case "DAX_CFORDER":	//발령소분류 
			var cd_order1 = this.dxGrid.getCellValue(gridIdx, this.dxGrid.getBindCellIndex("body", "CD_ORDER1"));	
			if(this.gfnIsNull(cd_order1)) { 
				this.gfnAlert("발령대분류를 먼저 입력하세요.");
				return false;
			}	
			dsUserParam.setColumn(nrow, "CD_ORDER1", cd_order1);			
			break;
		case "DAX_CFCORP2": //법인
			dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
			dsUserParam.setColumn(nrow, "CD_DEPT", this.AuthClient.CD_DEPT);
			break;
		
// 		case "DAX_CFDEPT": //부서
// 			var cd_corp = this.dsList.getColumn(this.dsList.rowposition, "CD_CORP_ORD");	
// 			var id_sabun = this.dsList.getColumn(this.dsList.rowposition, "ID_SABUN");
// 			if(this.gfnIsNull(cd_corp)) cd_corp = this.ccfCD_CORP.form.CDTextBox.value;	
// 
// 			dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
// 			dsUserParam.setColumn(nrow, "CD_DEPT", this.AuthClient.CD_DEPT);
// 			dsUserParam.setColumn(nrow, "CD_CORP", cd_corp);
// 			dsUserParam.setColumn(nrow, "YN_CURRENT", "");
// 			break;			
		
		case "DAX_CFDEPT_BEF"://이전부서
			var sCD_CORP = this.ccfCD_CORP.form.CDTextBox.value;		
			if(this.gfnIsNull(sCD_CORP)) { 
				this.gfnAlert("법인을 먼저 입력해주세요.");  
				return false;				
			}
			dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
			dsUserParam.setColumn(nrow, "CD_DEPT", this.AuthClient.CD_DEPT);
			dsUserParam.setColumn(nrow, "CD_CORP", sCD_CORP);
			dsUserParam.setColumn(nrow, "YN_CURRENT", "N");
			break;
		case "DAX_CFDEPT": // 발령부서
			var cd_corp = this.dsList.getColumn(this.dsList.rowposition, "CD_CORP_ORD");		
			if(this.gfnIsNull(cd_corp)) { 
				this.gfnAlert("발령법인을 먼저 입력해주세요.");  
				return false;				
			}

			dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
			dsUserParam.setColumn(nrow, "CD_DEPT", this.AuthClient.CD_DEPT);
			dsUserParam.setColumn(nrow, "CD_CORP", cd_corp);
			dsUserParam.setColumn(nrow, "YN_CURRENT", "Y");
			break;	
		case "DAX_CFCONCURDEPT": //겸직부서 (DAXPR_CONCURDEPT_CODEFIND)
			var cd_corp = this.dsList.getColumn(this.dsList.rowposition, "CD_CORP_ORD");
			var id_sabun = this.dsList.getColumn(this.dsList.rowposition, "ID_SABUN");
			var cd_order1 = this.dsList.getColumn(this.dsList.rowposition, "CD_ORDER1");	// 발령구분
			
			if(this.gfnIsNull(cd_corp)) cd_corp = this.ccfCD_CORP.form.CDTextBox.value;	
			if(this.gfnIsNull(id_sabun)) { 
				this.gfnAlert("발령사번을 먼저 입력해주세요.");  
				return false;				
			}

			if(this.gfnIsNull(cd_order1)) { 
				this.gfnAlert(" 발령구분을 먼저 입력해주세요.");  
				return false;				
			}
			
			dsUserParam.setColumn(nrow, "CD_CORP", cd_corp);
			dsUserParam.setColumn(nrow, "ID_SABUN", id_sabun);
			dsUserParam.setColumn(nrow, "CD_ORDER1", cd_order1);
			break;
		case "EA":
			dsUserParam.setColumn(nrow, "CD_PREFIX", "EA");
			break;				
		case "ED":
			dsUserParam.setColumn(nrow, "CD_PREFIX", "ED");
			break;		
		case "EH":
			dsUserParam.setColumn(nrow, "CD_PREFIX", "EH");
			break;	
		case "EC":
			dsUserParam.setColumn(nrow, "CD_PREFIX", "EC");
			break;		
		case "EF":
			dsUserParam.setColumn(nrow, "CD_PREFIX", "EF");
			break;			
			
		case "DS_HOLDDUTY":	//겸무 
			dsUserParam.setColumn(nrow, "CD_PREFIX", "EF");
			break;			

		case "EB":
			dsUserParam.setColumn(nrow, "CD_PREFIX", "EB");
			break;		
// 		case "DAX_CFDEPT2":
// 			var cd_corp = this.ccfCD_CORP.form.CDTextBox.value;
// 			dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
// 			dsUserParam.setColumn(nrow, "CD_DEPT", this.AuthClient.CD_DEPT);
// 			dsUserParam.setColumn(nrow, "CD_CORP", cd_corp);
// 			dsUserParam.setColumn(nrow, "YN_CURRENT", "");
// 			break;				
		case "DAX_CFDEPT_MST1":  //실근무지 
			break;		
		case "DAX_CFBASEINFO_ALL":	// 사번
			var cd_corp = this.ccfCD_CORP.form.CDTextBox.value;
			dsUserParam.setColumn(nrow, "CD_DEPT", this.AuthClient.CD_DEPT);
			dsUserParam.setColumn(nrow, "CD_CORP", cd_corp);
			dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
			dsUserParam.setColumn(nrow, "YN_CORP", "N");
			dsUserParam.setColumn(nrow, "TY_RETIRE", "%");
			break;	
		case "DAX_CFCORP_CODEFIND":	// 발령법인
			dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
			dsUserParam.setColumn(nrow, "CD_CORP", "%");
			dsUserParam.setColumn(nrow, "CD_DEPT", this.AuthClient.ID_USER);			
			break;	
			
		case "DAX_CFDEPT_DISPATCH": // 파견부서
			var cd_corp = this.dsList.getColumn(this.dsList.rowposition, "CD_CORP_ORD");		
			if(this.gfnIsNull(cd_corp)) { 
				this.gfnAlert("발령법인을 먼저 입력해주세요.");  
				return false;				
			}

			dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
			dsUserParam.setColumn(nrow, "CD_DEPT", this.AuthClient.CD_DEPT);
			dsUserParam.setColumn(nrow, "CD_CORP", cd_corp);
			dsUserParam.setColumn(nrow, "YN_CURRENT", "N");		
			break;
			
		default:
	}
	return true;
}


this.fnGrid_AfterCDTextChanged = function(id, codeFindData) {		
	var arr = codeFindData; 
	
	//trace("id", id);
	//trace("arr", arr);
	
	switch(id) {
		case "OA":	// 발령대분류
			//겸직해지(cd_order1 = 09) or 파견복귀(07) 발령일경우 코드파인드 변경 >> DAX_CFCONCURDEPT
			var CD_ORDER1 = this.dsList.getColumn(this.dsList.rowposition, "CD_ORDER1");
			if (CD_ORDER1 == "09" || CD_ORDER1 == "07") {
				
				this.dxGrid.usCodefindInfo.CD_DEPT.CD_CODEFIND = "DAX_CFCONCURDEPT"; 
				this.dxGrid.usCodefindInfo.CD_DEPT.NM_CODEFIND = "DAX_CFCONCURDEPT"; 
				this.dxGrid.usCodefindInfo.DS_DEPT.CD_CODEFIND = "DAX_CFCONCURDEPT"; 
				this.dxGrid.usCodefindInfo.DS_DEPT.NM_CODEFIND = "DAX_CFCONCURDEPT"; 
			} else {
				this.dxGrid.usCodefindInfo.CD_DEPT.CD_CODEFIND = "DAX_CFDEPT"; 
				this.dxGrid.usCodefindInfo.CD_DEPT.NM_CODEFIND = "DAX_CFDEPT"; 
				this.dxGrid.usCodefindInfo.DS_DEPT.CD_CODEFIND = "DAX_CFDEPT"; 
				this.dxGrid.usCodefindInfo.DS_DEPT.NM_CODEFIND = "DAX_CFDEPT"; 			
			}
			this.dsList.setColumn(this.dsList.rowposition, "CD_ORDER2", ""); //발령소분류 초기화
  			this.dsList.setColumn(this.dsList.rowposition, "DS_ORDER2", "");	
		break;				

		case "DAX_CFCORP2": //법인
  			this.dsList.setColumn(this.dsList.rowposition, "CD_DEPT", "");	
  			this.dsList.setColumn(this.dsList.rowposition, "DS_DEPT", "");	
			
			var CD_ORDER1 = this.dsList.getColumn(this.dsList.rowposition, "CD_ORDER1");
			if (CD_ORDER1 == "01" || CD_ORDER1 == "04" || CD_ORDER1 == "05") { //채용(01),퇴직(04),부서이동(05)인 경우만 실근무지 초기화
				this.dsList.setColumn(this.dsList.rowposition, "CD_WORK_PLACE", "");	
				this.dsList.setColumn(this.dsList.rowposition, "DS_WORK_PLACE", "");	
			}
			
		break;		
		
		case "DAX_CFDEPT": //부서
			var CD_ORDER1 = this.dsList.getColumn(this.dsList.rowposition, "CD_ORDER1");
			if (CD_ORDER1 == "01" || CD_ORDER1 == "04" || CD_ORDER1 == "05") { //채용(01),퇴직(04),부서이동(05) 인 경우 실근무지 동일하게 셋팅		
				this.dsList.setColumn(this.dsList.rowposition, "CD_WORK_PLACE", this.dsList.getColumn(this.dsList.rowposition, "CD_DEPT").substring(1,6));	
				this.dsList.setColumn(this.dsList.rowposition, "DS_WORK_PLACE", this.dsList.getColumn(this.dsList.rowposition, "DS_DEPT"));	
			}
		break;		
		
		case "DAX_CFBASEINFO_ALL"://사번
			if(arr.length >0){
				this.dsList.setColumn(this.dsList.rowposition, "CD_DEPTBEF", arr[0].CD_DEPT);	//CD_DEPTBEF	이전부서코드
				this.dsList.setColumn(this.dsList.rowposition, "DS_DEPTBEF", arr[0].DS_DEPT);	//DS_DEPTBEF	이전부서
			}
			break;

		default:
	}	
	return true;
};


/************************************************************************
 * 기타 이벤트
 ************************************************************************/

this.fnSearchInit = function(obj,e) {
	if(e == null || (e.pretext != e.posttext)) {
		this.gfnSetFormStatus(this);
		this.gfnGridClear(this.dxGrid);
	}
}

this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
	}
};

this.dsList_onrowposchanged = function(obj:nexacro.NormalDataset,e:nexacro.DSRowPosChangeEventInfo)
{
	//겸직해지(cd_order1 = 09) or 파견복귀(07) 발령일경우 코드파인드 변경 >> DAX_CFCONCURDEPT
	var CD_ORDER1 = this.dsList.getColumn(e.newrow, "CD_ORDER1");
	if (CD_ORDER1 == "09" || CD_ORDER1 == "07") {		
		this.dxGrid.usCodefindInfo.CD_DEPT.CD_CODEFIND = "DAX_CFCONCURDEPT"; 
		this.dxGrid.usCodefindInfo.CD_DEPT.NM_CODEFIND = "DAX_CFCONCURDEPT"; 
		this.dxGrid.usCodefindInfo.DS_DEPT.CD_CODEFIND = "DAX_CFCONCURDEPT"; 
		this.dxGrid.usCodefindInfo.DS_DEPT.NM_CODEFIND = "DAX_CFCONCURDEPT"; 
	} else {
		this.dxGrid.usCodefindInfo.CD_DEPT.CD_CODEFIND = "DAX_CFDEPT"; 
		this.dxGrid.usCodefindInfo.CD_DEPT.NM_CODEFIND = "DAX_CFDEPT"; 
		this.dxGrid.usCodefindInfo.DS_DEPT.CD_CODEFIND = "DAX_CFDEPT"; 
		this.dxGrid.usCodefindInfo.DS_DEPT.NM_CODEFIND = "DAX_CFDEPT"; 			
	}	
};]]></Script>
    <Objects>
      <Dataset id="dsList" onrowposchanged="dsList_onrowposchanged">
        <ColumnInfo>
          <Column id="ID_PERSON" type="BIGDECIMAL" size="256"/>
          <Column id="CD_CORP" type="STRING" size="256"/>
          <Column id="DS_CORP" type="STRING" size="256"/>
          <Column id="ID_SABUN" type="STRING" size="256"/>
          <Column id="DS_HNAME" type="STRING" size="256"/>
          <Column id="DT_ORDER" type="STRING" size="256"/>
          <Column id="NO_SEQ" type="BIGDECIMAL" size="256"/>
          <Column id="CD_ORDER1" type="STRING" size="256"/>
          <Column id="DS_ORDER1" type="STRING" size="256"/>
          <Column id="CD_ORDER2" type="STRING" size="256"/>
          <Column id="DS_ORDER2" type="STRING" size="256"/>
          <Column id="CD_DEPTBEF" type="STRING" size="256"/>
          <Column id="DS_DEPTBEF" type="STRING" size="256"/>
          <Column id="CD_CORP_ORD" type="STRING" size="256"/>
          <Column id="DS_CORP_ORD" type="STRING" size="256"/>
          <Column id="CD_DEPT" type="STRING" size="256"/>
          <Column id="DS_DEPT" type="STRING" size="256"/>
          <Column id="CD_POSITION" type="STRING" size="256"/>
          <Column id="DS_POSITION" type="STRING" size="256"/>
          <Column id="CD_PAYSTEP" type="STRING" size="256"/>
          <Column id="DS_PAYSTEP" type="STRING" size="256"/>
          <Column id="CD_EMPTYPE" type="STRING" size="256"/>
          <Column id="DS_EMPTYPE" type="STRING" size="256"/>
          <Column id="CD_OCCUPATION" type="STRING" size="256"/>
          <Column id="DS_OCCUPATION" type="STRING" size="256"/>
          <Column id="CD_JOBTYPE" type="STRING" size="256"/>
          <Column id="DS_JOBTYPE" type="STRING" size="256"/>
          <Column id="CD_DUTY" type="STRING" size="256"/>
          <Column id="DS_DUTY" type="STRING" size="256"/>
          <Column id="CD_DISPATCHORG" type="STRING" size="256"/>
          <Column id="DS_DISPATCHORG" type="STRING" size="256"/>
          <Column id="FR_DISPATCH" type="STRING" size="256"/>
          <Column id="TO_DISPATCH" type="STRING" size="256"/>
          <Column id="NO_DOCUMENT" type="STRING" size="256"/>
          <Column id="YN_REFLECT" type="STRING" size="256"/>
          <Column id="YN_BASEINFO" type="STRING" size="256"/>
          <Column id="DS_REMARK" type="STRING" size="256"/>
          <Column id="FR_CORPCURRENT" type="STRING" size="256"/>
          <Column id="TO_CORPCURRENT" type="STRING" size="256"/>
          <Column id="YN_APPLY_PROVATION" type="STRING" size="256"/>
          <Column id="FR_PROVATION" type="STRING" size="256"/>
          <Column id="TO_PROVATION" type="STRING" size="256"/>
          <Column id="CD_ROLE" type="STRING" size="256"/>
          <Column id="YN_BASEDATA" type="STRING" size="256"/>
          <Column id="CD_AGREEMENT" type="STRING" size="256"/>
          <Column id="CD_HOLDDUTY" type="STRING" size="256"/>
          <Column id="DS_HOLDDUTY" type="STRING" size="256"/>
          <Column id="NO_SEQ_BEF" type="INT" size="256"/>
          <Column id="NO_DOCUMENT_BEF" type="STRING" size="256"/>
          <Column id="YN_YONG" type="STRING" size="256"/>
          <Column id="YN_SELBASE" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">save</Col>
            <Col id="SP">DAAPR_ORDERTEMP_SAVE</Col>
          </Row>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DAAPR_ORDERTEMP_SELECT</Col>
          </Row>


        </Rows>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ctclYY_ORDER.form.TextBox" propid="value" datasetid="dsSearch" columnid="YY_ORDER"/>
    </Bind>
  </Form>
</FDL>
