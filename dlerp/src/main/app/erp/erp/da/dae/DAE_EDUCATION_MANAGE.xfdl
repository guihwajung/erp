<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="승인자 등록" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divData" taborder="0" left="0" top="0" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	//this.fnSetCombo(); 	
	
	this.FormBtns.Select.click();
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {

}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {

};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.dxGrid = this.divData.form.objGrid;
	
	this.grSearch = this.FormInfo.GR_SEARCH;					          // 권한
	this.cdGroup = this.AuthClient.CD_GROUP;					          // 그룹코드	
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	
	// 그리드 초기화
	this.gfnGridInit(this.dxGrid, this.dsList, "DA", "DAE_EDUCATION_MANAGE");	
	//그리드 이벤트
	this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforeUserDataSetParam";
	
};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {

	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("ID_PERSON", "bigdecimal");		// 조회 SP에 보낼 파라미터가 없지만 임의로 필드선언함 안그러면 조회가 안되네
	
	this.dsInsert = new Dataset();
	this.dsInsert.addColumn("TY_SAVE", "string");
	this.dsInsert.addColumn("ID_PERSON", "bigdecimal");
	this.dsInsert.addColumn("ID_SABUN", "string");
	this.dsInsert.addColumn("CD_POSITION", "string");
	this.dsInsert.addColumn("CD_DEPT", "string");
	this.dsInsert.addColumn("CD_EDU_DEPT", "string");
	this.dsInsert.addColumn("NO_MANAGE", "bigdecimal");
	this.dsInsert.addColumn("DS_REMARK", "string");
	this.dsInsert.addColumn("ID_USER", "string");

	this.dsUpdate = new Dataset();
	this.dsUpdate.addColumn("TY_SAVE", "string");
	this.dsUpdate.addColumn("ID_PERSON", "bigdecimal");
	this.dsUpdate.addColumn("ID_SABUN", "string");
	this.dsUpdate.addColumn("CD_POSITION", "string");
	this.dsUpdate.addColumn("CD_DEPT", "string");
	this.dsUpdate.addColumn("CD_EDU_DEPT", "string");
	this.dsUpdate.addColumn("NO_MANAGE", "bigdecimal");
	this.dsUpdate.addColumn("DS_REMARK", "string");
	this.dsUpdate.addColumn("ID_USER", "string");

	this.dsDelete = new Dataset();
	this.dsDelete.addColumn("TY_SAVE", "string");
	this.dsDelete.addColumn("ID_PERSON", "bigdecimal");
	this.dsDelete.addColumn("ID_SABUN", "string");
	this.dsDelete.addColumn("CD_POSITION", "string");
	this.dsDelete.addColumn("CD_DEPT", "string");
	this.dsDelete.addColumn("CD_EDU_DEPT", "string");
	this.dsDelete.addColumn("NO_MANAGE", "bigdecimal");
	this.dsDelete.addColumn("DS_REMARK", "string");
	this.dsDelete.addColumn("ID_USER", "string");

}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	
	this.gfnGridBeforeSelect(this.dxGrid);
	
 	this.dsSelect.clearData();
 	this.dsSelect.addRow();		// SP에 보낼 파라미터가 없지만 임의로 필드선언함 안그러면 조회가 안되네
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback"; 
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	this.gfnGridAdd(this.dxGrid);
}
/*
 *	삭제 버튼
 */
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}

/*
 *	저장 버튼
 */
this.fnSave = function() {
	// 그리드 필수항목 체크
	if (!this.gfnGridValidate(this.dxGrid)) return;	
	
	//if (!this.fnSaveCheck(this.dxGrid)) return;	
	
	this.dxGrid.updateToDataset();
	
	this.dsInsert.clearData();
	this.dsUpdate.clearData();
	this.dsDelete.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "I":
				var nrow = this.dsInsert.addRow();
				
				this.dsInsert.setColumn(nrow, "TY_SAVE", flag);
				this.dsInsert.setColumn(nrow, "ID_PERSON", this.dsList.getColumn(i, "ID_PERSON"));
				this.dsInsert.setColumn(nrow, "ID_SABUN", this.dsList.getColumn(i, "ID_SABUN"));
				this.dsInsert.setColumn(nrow, "CD_POSITION", this.dsList.getColumn(i, "CD_POSITION"));
				this.dsInsert.setColumn(nrow, "CD_DEPT", this.dsList.getColumn(i, "CD_DEPT"));
				this.dsInsert.setColumn(nrow, "CD_EDU_DEPT", this.dsList.getColumn(i, "CD_EDU_DEPT"));
				this.dsInsert.setColumn(nrow, "NO_MANAGE", this.dsList.getColumn(i, "NO_MANAGE"));
				this.dsInsert.setColumn(nrow, "DS_REMARK", this.dsList.getColumn(i, "DS_REMARK"));
				this.dsInsert.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
				
				break;
				
			case "U":
				var nrow = this.dsUpdate.addRow();
				
				this.dsUpdate.setColumn(nrow, "TY_SAVE", flag);
				this.dsUpdate.setColumn(nrow, "ID_PERSON", this.dsList.getColumn(i, "ID_PERSON"));
				this.dsUpdate.setColumn(nrow, "ID_SABUN", this.dsList.getColumn(i, "ID_SABUN"));
				this.dsUpdate.setColumn(nrow, "CD_POSITION", this.dsList.getColumn(i, "CD_POSITION"));
				this.dsUpdate.setColumn(nrow, "CD_DEPT", this.dsList.getColumn(i, "CD_DEPT"));
				this.dsUpdate.setColumn(nrow, "CD_EDU_DEPT", this.dsList.getColumn(i, "CD_EDU_DEPT"));
				this.dsUpdate.setColumn(nrow, "NO_MANAGE", this.dsList.getColumn(i, "NO_MANAGE"));
				this.dsUpdate.setColumn(nrow, "DS_REMARK", this.dsList.getColumn(i, "DS_REMARK"));
				this.dsUpdate.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);			
				
				break;
				
			case "D":
				var nrow = this.dsDelete.addRow();

				this.dsDelete.setColumn(nrow, "TY_SAVE", flag);
				this.dsDelete.setColumn(nrow, "ID_PERSON", this.dsList.getColumn(i, "ID_PERSON"));
				this.dsDelete.setColumn(nrow, "ID_SABUN", this.dsList.getColumn(i, "ID_SABUN"));
				this.dsDelete.setColumn(nrow, "CD_POSITION", this.dsList.getColumn(i, "CD_POSITION"));
				this.dsDelete.setColumn(nrow, "CD_DEPT", this.dsList.getColumn(i, "CD_DEPT"));
				this.dsDelete.setColumn(nrow, "CD_EDU_DEPT", this.dsList.getColumn(i, "CD_EDU_DEPT"));
				this.dsDelete.setColumn(nrow, "NO_MANAGE", this.dsList.getColumn(i, "NO_MANAGE"));
				this.dsDelete.setColumn(nrow, "DS_REMARK", this.dsList.getColumn(i, "DS_REMARK"));
				this.dsDelete.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);			
				
				break;
		}
	}

	if (this.dsInsert.rowcount == 0 && this.dsUpdate.rowcount == 0 && this.dsDelete.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "insert=dsInsert update=dsUpdate delete=dsDelete";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/
this.fnSaveCheck = function(pGrid) {
	var objDs = pGrid.getBindDataset();	
	
	var msg = "";	
	for (var i = 0; i < objDs.rowcount; i++) {	
		var flag = this.gfnGetFlag(objDs, i);
		switch(flag) {
			case "I":
			case "U":
				var frDate = objDs.getColumn(i, "FR_EDUCATION");
				var toDate = objDs.getColumn(i, "TO_EDUCATION");
				if(frDate > toDate){	
					msg += i + "행 교육시작일이 종료일보다 클 수 없습니다.\n";
				}	
				break;
		}
	}
	
	if(this.gfnIsNull(msg)) {
		return true;
	} else {
		var arrError = [msg];
		this.gfnAlert(arrError);	
		return false;
	}		
	
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		if (this.dsList.rowcount == 0) {
			this.gfnAlert("자료가 존재하지 않습니다.");
		} else {
			this.gfnGridAfterSelect(this.dxGrid);	
		}
	}
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
//	trace("코드파인드_식별id:" + id);
	switch(id) {	
		case "ccfDS_EDU_CONTENT":	//교육내용		
			dsUserParam.setColumn(nrow, "CD_PREFIX", "S3");
			dsUserParam.setColumn(nrow, "CD_UPPREFIX", "%");				
			break;		
		
		case "ccfID_SABUN":
			dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
			dsUserParam.setColumn(nrow, "CD_DEPT", "%");
			dsUserParam.setColumn(nrow, "TY_RETIRE", "%");	// 재직구분
			break;
			
		default:
	}	
	return true;
}
 
this.fnAfterCDTextChanged = function(id, codeFindData) {
	//this.fnSearchInit();
	var arr = codeFindData; 
	switch(id){
		case "ccfCD_DEPT" : 
			this.dsList.setColumn(0, "TY_DEPT", arr[0]["CD_DEPT"]);	
			this.dsList.setColumn(0, "CD_DEPT", arr[0]["CD_DEPT"]);	
			this.dsList.setColumn(0, "DS_DEPT", arr[0]["DS_DEPT"]);	
		break;
		case "ccfID_SABUN" : 
			this.dsSearch.setColumn(0, "ID_SABUN", arr[0]["ID_SABUN"]);	
			this.dsSearch.setColumn(0, "DS_HNAME", arr[0]["DS_HNAME"]);	
			this.dsSearch.setColumn(0, "ID_PERSON", arr[0]["ID_PERSON"]);	
			this.dsSearch.setColumn(0, "CD_CORP", arr[0]["CD_CORP"]);	
			this.dsSearch.setColumn(0, "DS_CORP", arr[0]["DS_CORP"]);	
			
			this.fnSetCombo(arr[0]["ID_SABUN"]);	// 사원정보 재조회
		break;
		case "ccfDS_EDU_CONTENT" : 
			this.dsSearch.setColumn(0, "CD_EDU_CONTENT", arr[0]["CD_CODE"]);	
			this.dsSearch.setColumn(0, "DS_EDU_CONTENT", arr[0]["DS_CODE"]);	
		break;
		
	}	
}

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
this.fnGrid_BeforeUserDataSetParam = function(id, dsUserParam, nrow){
	//trace('grid_코드파인드_식별id:[' + id + "] nrow:[" + nrow +"] grid_currentrow:" + this.dxGrid.currentrow + "]" ); 
	
	var gridIdx = this.dxGrid.currentrow;	
	
	switch(id) {	
		case "DAX_CFBASEINFO":     // 사번 	ID_SABUN
			dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
			dsUserParam.setColumn(nrow, "CD_DEPT", "%");		 
			dsUserParam.setColumn(nrow, "TY_RETIRE", "%");			
		break;		

		case "DAX_CFDEPT_MST1":	//관리부서		

		break;		

		default:
	}		
	
	return true;
};

/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.fnSetCombo = function(v_sabun) {

	var P_SABUN = this.AuthClient.ID_USER;	
	if(!this.gfnIsNull(v_sabun)) P_SABUN = v_sabun;	
	if(this.gfnIsNull(P_SABUN)) {	
		this.gfnAlert("사번이 존재하지 않습니다.");	
		return false;	
	}

	this.dsCombo = new Dataset();
	this.dsCombo.addColumn("VALUE", "string");
	this.dsCombo.addColumn("GR_SEARCH", "string");
	this.dsCombo.addColumn("CD_DEPT", "string");
	this.dsCombo.addColumn("TY_RETIRE", "string");
	
	this.dsCombo.addRow();
	this.dsCombo.setColumn(0, "VALUE", P_SABUN); //test(18051)	
	this.dsCombo.setColumn(0, "GR_SEARCH", this.FormInfo.GR_SEARCH);
	this.dsCombo.setColumn(0, "CD_DEPT", "");
	this.dsCombo.setColumn(0, "TY_RETIRE", "");
	
	var strSvcId    = "person";
	var strSvcType  = "select";
	var inProc		= "_dsProc";
	var inData      = "person=dsCombo";
	var outData     = "dsPersonInfo=person0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
};	

/*
 *	조회 조건 변경시 초기화
 */ 
this.fnSearchInit = function(obj, e) {
	if(e.pretext != e.posttext) {
		this.gfnSetFormStatus(this);
		this.gfnGridClear(this.dxGrid);
	}
}

this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
// 	if(e.oldvalue != e.newvalue) {
// 		this.gfnSetFormStatus(this);	// 폼상태 초기화
// 		this.gfnGridClear(this.dxGrid);	
// 	}
};]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DAEPR_EDUCATION_MANAGER_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">insert</Col>
            <Col id="SP">DAEPR_EDUCATION_MANAGER_SAVE</Col>
          </Row>
          <Row>
            <Col id="SP">DAEPR_EDUCATION_MANAGER_SAVE</Col>
            <Col id="TARGET">update</Col>
          </Row>
          <Row>
            <Col id="SP">DAEPR_EDUCATION_MANAGER_SAVE</Col>
            <Col id="TARGET">delete</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="ID_PERSON" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfID_SABUN.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="ID_SABUN"/>
      <BindItem id="item1" compid="divSearch.form.ccfID_SABUN.form.DSTextBox" propid="value" datasetid="dsSearch" columnid="DS_HNAME"/>
      <BindItem id="item2" compid="divSearch.form.ctclEDUCATION_FROM" propid="value" datasetid="dsSearch" columnid="EDUCATION_FROM"/>
      <BindItem id="item3" compid="divSearch.form.ctclEDUCATION_TO" propid="value" datasetid="dsSearch" columnid="EDUCATION_TO"/>
      <BindItem id="item4" compid="divSearch.form.ccfDS_EDU_CONTENT.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_EDU_CONTENT"/>
      <BindItem id="item5" compid="divSearch.form.ccfDS_EDU_CONTENT.form.DSTextBox" propid="value" datasetid="dsSearch" columnid="DS_EDU_CONTENT"/>
    </Bind>
  </Form>
</FDL>
