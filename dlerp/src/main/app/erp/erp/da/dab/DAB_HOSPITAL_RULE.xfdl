<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="form" width="1280" height="720" titletext="건강검진 기준" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="1" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg">
          <Layouts>
            <Layout>
              <Static id="staYY_HOSPITAL" taborder="2" text="지급년도" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ctclYY_HOSPITAL" taborder="0" left="staYY_HOSPITAL:0.0" top="10.0" width="90" height="24.0" url="cmm::cmmCalYY.xfdl"/>
              <Static id="staCD_CORP" taborder="3" text="법인" left="ctclYY_HOSPITAL:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfCD_CORP" CodeFindName="DZX_CFCORP_STD" CDTextWidth="50" FitToContents="true" taborder="1" left="staCD_CORP:0.0" top="10.0" width="250" height="24.0" url="cmm::cmmCodeFind.xfdl" text=""/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="1" left="0" top="divSearch:20" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	this.fnSetInit();	
};

/************************************************************************
 * 버튼 설정 
 * 서브버튼 사용 처리. 공통 및 확장버튼 버튼관리화면에서 셋팅.
 ************************************************************************/
this.fnSetButton = function() { 
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.ccfCD_CORP 	 = this.divSearch.form.ccfCD_CORP;
	this.ctclYY_HOSPITAL = this.divSearch.form.ctclYY_HOSPITAL;
	
	this.dxGrid          = this.divData.form.objGrid;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() 
{
	// 그리드 초기화
	this.gfnGridInit(this.dxGrid, this.dsList, "DA", "DAB_HOSPITAL_RULE");
	this.dxGrid.EnterCell = "fnGrid_EnterCell";
	this.dxGrid.AfterEdit = "fnGrid_AfterEdit";
	this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforeUserDataSetParam";
	
	this.dsSearch.addEventHandler("onvaluechanged", this.dsSearch_onvaluechanged, this);
};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {

	this.dsSelect = new Dataset();
    this.dsSelect.addColumn("CD_CORP"    , "STRING");
	this.dsSelect.addColumn("YY_HOSPITAL", "STRING");
	
	this.dsSave = new Dataset();
	this.dsSave.addColumn("TY_WRK"       , "string");
	this.dsSave.addColumn("CD_CORP"      , "string");
	this.dsSave.addColumn("YY_HOSPITAL"  , "string");
	this.dsSave.addColumn("NO_SEQ"       , "int");
	this.dsSave.addColumn("CD_EMPTYPE"   , "string");
	this.dsSave.addColumn("CD_OCCUPATION", "string");
	this.dsSave.addColumn("CD_POSITION"  , "string");
	this.dsSave.addColumn("NO_POSITION"  , "int");
	this.dsSave.addColumn("CD_HOSPITAL"  , "string");
	this.dsSave.addColumn("YN_SPOUSE"    , "string");
	this.dsSave.addColumn("DS_REMARK"    , "string");
	this.dsSave.addColumn("ID_USER"      , "string");
};

/************************************************************************
 * 초기화 이벤트
 ************************************************************************/
this.fnSetInit = function() {
	var today = this.gfnGetDate().substring(0,4);
	this.dsSearch.set_enableevent(false);
	this.dsSearch.setColumn(0, "YY_HOSPITAL", today);   // 작업년월
	this.dsSearch.setColumn(0, "CD_CORP"    , this.AuthClient.CD_CORP);
	this.dsSearch.setColumn(0, "DS_CORP"    , this.AuthClient.DS_CORP);
	this.dsSearch.set_enableevent(true);
	this.ccfCD_CORP.form.fnFitToContents();
	this.FormBtns.Select.click();
};

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return;

	this.gfnGridBeforeSelect(this.dxGrid);
	
    this.dsSelect.clearData();
    this.dsSelect.addRow();
	this.dsSelect.setColumn(0, "CD_CORP"    , this.dsSearch.getColumn(0, "CD_CORP"));
	this.dsSelect.setColumn(0, "YY_HOSPITAL", this.dsSearch.getColumn(0, "YY_HOSPITAL"));

	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";

	this.gfnTransaction(strSvcId, 		// transaction을 구분하기 위한 svc id값
						strSvcType, 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData, 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData, 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 	    // 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); 	// 통신방법 정의 [생략가능]
};

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	var nrow = this.gfnGridAdd(this.dxGrid);
	this.dsList.set_enableevent(false);
	this.dsList.setColumn(nrow,"CD_CORP"    , this.dsSearch.getColumn(0, "CD_CORP"));
	this.dsList.setColumn(nrow,"DS_CORP"    , this.dsSearch.getColumn(0, "DS_CORP"));
	this.dsList.setColumn(nrow,"YY_HOSPITAL", this.dsSearch.getColumn(0, "YY_HOSPITAL"));
	this.dsList.set_enableevent(true);
};

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
};

/*
 *	저장 버튼
 */
this.fnSave = function() {
	// 그리드 필수항목 체크
	if (!this.gfnGridValidate(this.dxGrid)) return;	

	this.dxGrid.updateToDataset();
	
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSave.clearData();
	var msg = "";
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
		case "I":
		case "U":
		case "D":
			if (flag != "D" && this.gfnIsNull(this.dsList.getColumn(i, "CD_EMPTYPE")) && this.gfnIsNull(this.dsList.getColumn(i, "CD_OCCUPATION")) && this.gfnIsNull(this.dsList.getColumn(i, "CD_POSITION"))) {
				if( !this.gfnIsNull(msg) ) msg += "\n";
				msg += (i + 1) + "행 : [직원구분], [직책], [직급] 중 1개는 입력되어야 합니다.";
			}
			var nrow = this.dsSave.addRow();
			this.dsSave.setColumn(nrow, "TY_WRK"       , flag);
			this.dsSave.setColumn(nrow, "CD_CORP"      , this.dsList.getColumn(i, "CD_CORP"));
			this.dsSave.setColumn(nrow, "YY_HOSPITAL"  , this.dsList.getColumn(i, "YY_HOSPITAL"));
			this.dsSave.setColumn(nrow, "NO_SEQ"       , this.dsList.getColumn(i, "NO_SEQ"));
			this.dsSave.setColumn(nrow, "CD_EMPTYPE"   , this.dsList.getColumn(i, "CD_EMPTYPE"));
			this.dsSave.setColumn(nrow, "CD_OCCUPATION", this.dsList.getColumn(i, "CD_OCCUPATION"));
			this.dsSave.setColumn(nrow, "CD_POSITION"  , this.dsList.getColumn(i, "CD_POSITION"));
			this.dsSave.setColumn(nrow, "NO_POSITION"  , this.dsList.getColumn(i, "NO_POSITION"));
			this.dsSave.setColumn(nrow, "CD_HOSPITAL"  , this.dsList.getColumn(i, "CD_HOSPITAL"));
			this.dsSave.setColumn(nrow, "YN_SPOUSE"    , this.dsList.getColumn(i, "YN_SPOUSE"));
			this.dsSave.setColumn(nrow, "DS_REMARK"    , this.dsList.getColumn(i, "DS_REMARK"));
			this.dsSave.setColumn(nrow, "ID_USER"      , this.AuthClient.ID_USER);
			break;
		}
	}
	
	if (!this.gfnIsNull(msg)) {
		this.gfnAlert(msg) 
		return;
	}
	
	if (this.dsSave.rowcount == 0 ) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "save=dsSave";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction(strSvcId, 		// transaction을 구분하기 위한 svc id값
						strSvcType, 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData, 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData, 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); 	// 통신방법 정의 [생략가능]
};

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
};

/************************************************************************
 * Validate
 ************************************************************************/
this.fnSelectValidate = function() {
	var validate = true;  
	if (this.gfnIsNull(this.dsSearch.getColumn(0, "CD_CORP"))) {
		validate = false;
		this.fnVaidateCallback = function() {
			this.ccfCD_CORP.form.CDTextBox.setFocus();
		}
		this.gfnAlert("법인을 입력하세요.", "fnVaidateCallback");
	}
	return validate;
};

/************************************************************************
 * 확장버튼 이벤트
 ************************************************************************/

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg) {
	if (errorCode != 0) {
		this.gfnAlert(errorMsg);
		return;
	}
	
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);
	} else if(svcID == "save") {
		this.FormBtns.Select.click();
	}
};

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
this.fnGrid_BeforeUserDataSetParam = function(id, dsUserParam, nrow){
	trace('grid_코드파인드_식별id: ' + id); 
	switch (id) {	
	case "DAX_CFHOSPITAL_CODE":
		dsUserParam.setColumn(nrow, "CD_CORP",  this.dsSearch.getColumn(0, "CD_CORP"));		
		break;
	case "EA":
	case "EC":
	case "ED":
		dsUserParam.setColumn(nrow, "CD_PREFIX", id);
		dsUserParam.setColumn(nrow, "CD_CORP",  this.dsList.getColumn(this.dsList.rowposition, "CD_CORP"));
		break;
	}
	return true;
	
};

/* 
 * 셀 수정가능 여부 
 */
this.fnGrid_EnterCell = function(obj:nexacro.Grid, row, cell)
{
	// 직원구분(CD_EMPTYPE), 직책(CD_OCCUPATION), 직급(CD_POSITION) 중 1개만 입력 가능하게 해주세요
	if( cell == obj.getBindCellIndex("body","CD_EMPTYPE") ) {
		var sCdOccupation = this.dsList.getColumn(this.dsList.rowposition, "CD_OCCUPATION");
		var sCdPosition = this.dsList.getColumn(this.dsList.rowposition, "CD_POSITION");
		if( !this.gfnIsNull(sCdOccupation) || !this.gfnIsNull(sCdPosition) ){
			return false;
		}
	}
	
	if( cell == obj.getBindCellIndex("body","CD_OCCUPATION") ) {
		var sCdEmpType = this.dsList.getColumn(this.dsList.rowposition, "CD_EMPTYPE");
		var sCdPosition = this.dsList.getColumn(this.dsList.rowposition, "CD_POSITION");
		if( !this.gfnIsNull(sCdEmpType) || !this.gfnIsNull(sCdPosition) ){
			return false;
		}
	}
	
	if( cell == obj.getBindCellIndex("body","CD_POSITION") ) {
		var sCdEmpType = this.dsList.getColumn(this.dsList.rowposition, "CD_EMPTYPE");
		var sCdOccupation = this.dsList.getColumn(this.dsList.rowposition, "CD_OCCUPATION");		
		if( !this.gfnIsNull(sCdEmpType) || !this.gfnIsNull(sCdOccupation) ){
			return false;
		}
	}
	
	// 직급(CD_POSITION)에 데이터가 있는경우에만 직급별연차(NO_POSITION) 항목에 입력, 수정가능
	if( cell == obj.getBindCellIndex("body","NO_POSITION") ) {
		var sCdPosition = this.dsList.getColumn(this.dsList.rowposition, "CD_POSITION");
		if( this.gfnIsNull(sCdPosition) ){
			return false;
		}
	}
};

/*
 *	그리드 변경시
 */
this.fnGrid_AfterEdit = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if( e.newvalue != e.oldvalue) {
		if( e.columnid == "CD_POSITION" && this.gfnIsNull(e.newvalue)){
			obj.setColumn(e.row,"NO_POSITION",null);
		}
	}
};
/************************************************************************
 * 기타 이벤트
 ************************************************************************/
/*
 *	조회 조건 변경시 초기화
 */
this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {		
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
	}
};]]></Script>
    <Objects>
      <Dataset id="dsSearch">
        <ColumnInfo>
          <Column id="YY_HOSPITAL" type="STRING" size="256"/>
          <Column id="CD_CORP" type="STRING" size="256"/>
          <Column id="DS_CORP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CD_CORP"/>
            <Col id="DS_CORP"/>
            <Col id="YY_HOSPITAL"/>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DABPR_HOSPITAL_RULE_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">save</Col>
            <Col id="SP">DABPR_HOSPITAL_RULE_SAVE</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsYN_USE">
        <ColumnInfo>
          <Column id="CODE" type="STRING" size="256"/>
          <Column id="VALUE" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CODE"/>
            <Col id="VALUE">전체</Col>
          </Row>
          <Row>
            <Col id="CODE">Y</Col>
            <Col id="VALUE">사용</Col>
          </Row>
          <Row>
            <Col id="CODE">N</Col>
            <Col id="VALUE">미사용</Col>
          </Row>
        </Rows>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ctclYY_HOSPITAL.form.TextBox" propid="value" datasetid="dsSearch" columnid="YY_HOSPITAL"/>
      <BindItem id="item1" compid="divSearch.form.ccfCD_CORP.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_CORP"/>
      <BindItem id="item2" compid="divSearch.form.ccfCD_CORP.form.DSTextBox" propid="value" datasetid="dsSearch" columnid="DS_CORP"/>
    </Bind>
  </Form>
</FDL>
