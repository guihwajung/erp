<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="레저기간관리" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0" top="0" height="46.0" right="0" cssclass="div_SEARCH_Bg">
          <Layouts>
            <Layout>
              <Static id="staYY_BASE" taborder="0" text="대상년도" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Div id="ctclYY_BASE" taborder="1" left="staYY_BASE:0.0" top="10.0" width="90" height="24.0" url="cmm::cmmCalYY.xfdl"/>
              <Static id="staTY_SEASON" taborder="2" text="기간구분" left="ctclYY_BASE:0.0" top="10.0" width="92.0" height="24.0" textDecoration="none" cssclass="sta_WF_SchLabel"/>
              <Combo id="ccboTY_SEASON" taborder="3" left="staTY_SEASON:0.0" top="10.0" width="95" height="24.0" innerdataset="dsTY_SEASON" codecolumn="CODE" datacolumn="VALUE" value="0" index="0"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Objects>
      <Dataset id="dsList" onvaluechanged="dsList_onvaluechanged"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DABPR_LEISURE_PEAKSEASON_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">save</Col>
            <Col id="SP">DABPR_LEISURE_PEAKSEASON_SAVE</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="YY_BASE" type="STRING" size="256"/>
          <Column id="TY_SEASON" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="YY_BASE"/>
            <Col id="TY_SEASON"/>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsTY_SEASON">
        <ColumnInfo>
          <Column id="CODE" type="STRING" size="256"/>
          <Column id="VALUE" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CODE">%</Col>
            <Col id="VALUE">전체</Col>
          </Row>
          <Row>
            <Col id="CODE">PS</Col>
            <Col id="VALUE">성수기</Col>
          </Row>
          <Row>
            <Col id="CODE">SF</Col>
            <Col id="VALUE">춘추계</Col>
          </Row>
          <Row>
            <Col id="VALUE">동계계</Col>
            <Col id="CODE">WS</Col>
          </Row>
        </Rows>
      </Dataset>
    </Objects>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();	
	
	this.fnReset();
};   

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
	this.FormBtns.Reset.set_enable(true);	
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {

};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.ctclYY_BASE = this.divSearch.form.ctclYY_BASE;
	this.ccboTY_SEASON = this.divSearch.form.ccboTY_SEASON;
	
	this.dxGrid = this.divData.form.objGrid;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	
	//그리드
	this.gfnGridInit(this.dxGrid, this.dsList, "DA", "DAB_LEISURE_PEAKSEASON");
	//그리드 이벤트
	this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforeUserDataSetParam";
}

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {

	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("YY_BASE", "string");
	this.dsSelect.addColumn("TY_SEASON", "string");

	this.dsSave = new Dataset();
	this.dsSave.addColumn("TY_SAVE", "string");
	this.dsSave.addColumn("YY_BASE", "string");
	this.dsSave.addColumn("DT_FROM", "bigdecimal");
	this.dsSave.addColumn("DT_TO", "string");
	this.dsSave.addColumn("TY_SEASON", "string");
	this.dsSave.addColumn("DS_REMARK", "string");
	this.dsSave.addColumn("ID_USER", "string");
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if(!this.fnValidate()) return;
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	this.dsSelect.setColumn(0, "YY_BASE", this.dsSearch.getColumn(0, "YY_BASE"));
	this.dsSelect.setColumn(0, "TY_SEASON", this.dsSearch.getColumn(0, "TY_SEASON"));

	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// trabsaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	var nrow = this.gfnGridAdd(this.dxGrid); 
	this.dsList.setColumn(nrow, "YY_BASE", this.dsSearch.getColumn(0, "YY_BASE"));
}	

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}

/*
 *	저장 버튼
 */
this.fnSave = function() {

	// 그리드 필수항목 체크
	//if (!this.gfnGridValidate(this.dxGrid)) return;	
	if (!this.fnSaveValidation()) return;

	this.dxGrid.updateToDataset();

	this.dsSave.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "I":
			case "U":
			case "D":
				var nrow = this.dsSave.addRow();
				this.dsSave.setColumn(nrow, "TY_SAVE", flag);
				this.dsSave.setColumn(nrow, "YY_BASE", this.dsList.getColumn(i, "YY_BASE"));
				this.dsSave.setColumn(nrow, "TY_SEASON", this.dsList.getColumn(i, "TY_SEASON"));
				this.dsSave.setColumn(nrow, "DT_FROM", this.dsList.getColumn(i, "DT_FROM"));
				this.dsSave.setColumn(nrow, "DT_TO", this.dsList.getColumn(i, "DT_TO"));
				this.dsSave.setColumn(nrow, "DS_REMARK", this.dsList.getColumn(i, "DS_REMARK"));
				this.dsSave.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);

				break;
		}
	}
	
	if (this.dsSave.rowcount == 0) return;

	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "save=dsSave";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
};

/*
 *	출력 버튼
 */
this.fnPrint = function() {
};

this.fnReset = function(){
	
	//기준년월 셋팅
	var today = this.gfnGetDate().substring(0,4);
	this.divSearch.form.ctclYY_BASE.form.TextBox.set_value(today);
	this.ccboTY_SEASON.set_index(0);

	this.FormBtns.Select.click();
};

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnValidate = function() {

	if (this.gfnIsNull(this.ctclYY_BASE.form.TextBox.value)) {
		this.ctclYY_BASE.form.TextBox.setFocus();
		this.gfnAlert("대상년도를 입력하세요.");
		return false;
	}

	return true;
};

/*
 *	저장 Validate
 */
this.fnSaveValidation = function() {
	var objDs = this.dsList;
	var objGrid = this.dxGrid;
	
	var msg = "";
	for (var i = 0; i < objDs.rowcount; i++) {
		var flag = this.gfnGetFlag(objDs, i);
		switch(flag) {
			case "I":
			case "U":
				var arrRequired = objGrid.usRequired;
				for(var j = 0; j < arrRequired.length; j++) {
					var spl_req = arrRequired[j].split(';');
					var colnm = spl_req[0];
					var header = spl_req[1];
					if (this.gfnIsNull(objDs.getColumn(i, colnm))) {
						msg += (i + 1) + "열: [" + header + "] 필수입력값입니다.\n";
					}
				}
				break;
		}

		var DT_FROM = this.dsList.getColumn(i, "DT_FROM");		// 시작일
		var DT_TO = this.dsList.getColumn(i, "DT_TO");			// 종료일
		if (DT_FROM > DT_TO){
			msg += (i + 1) + "열 [적용종료일]은 [적용시작일] 이후로 입력하셔야합니다. \n";
		}
	}// for

	if(this.gfnIsNull(msg)) {
		return true;
	}
	else {
		var arrError = [msg];
		this.gfnAlert("msg.err.validator", arrError);
		return false;
	}	

	return true;
}

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	//trace("fnCallback >>>>svcID :["+svcID+"] errorCode :["+errorCode+"] errorMsg :["+errorMsg+"]" );
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);
	}
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.gfnAlert("작업이 완료되었습니다.");
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	this.fnSetButton();
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnAfterCDTextChanged = function(id) {
	this.fnSearchInit();
}

this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	//trace("코드파인드_식별id:" + id);
	switch(id) {	
		case "ccfCD_CORP":	//법인		
			//(this.ccfCD_CORP.CodeFindName = "DAX_CFCORP2" 일경우) 아래 파라미터 사용
			//dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
			//dsUserParam.setColumn(nrow, "CD_DEPT", this.AuthClient.CD_DEPT);				
			break;		
		
		default:
	}	
	return true;
}
 
/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
this.fnGrid_BeforeUserDataSetParam = function(id, dsUserParam, nrow){
	trace('grid_코드파인드_식별id: ' + id); 
	
	switch(id) {	
		case "ID_SABUN":     // DAX_CFBASEINFO 
			//dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
			//dsUserParam.setColumn(nrow, "CD_DEPT", "%");		 
			//dsUserParam.setColumn(nrow, "TY_RETIRE", "%");			

		break;		

		default:
	}		
	
	return true;
};
 
/************************************************************************
 * 기타 이벤트
 ************************************************************************/
/*
 *	조회 조건 변경시 초기화
 */
this.fnSearchInit = function(obj,e) {
	if(e.pretext != e.posttext) {
		// 폼상태 초기화
		this.gfnSetFormStatus(this);	
		this.gfnGridClear(this.dxGrid);
	}
};

this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
	}
};


this.dsList_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		//if (e.columnid == "DT_FROM" || e.columnid == "DT_TO"){
		if (e.columnid == "DT_FROM"){
			var TY_SEASON = this.dsList.getColumn(e.row, "TY_SEASON");
			if(TY_SEASON == "PS"){
				this.dsList.setColumn(e.row, "DT_TO", e.newvalue);
			}			
		}
	}
};]]></Script>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ctclYY_BASE.form.TextBox" propid="value" datasetid="dsSearch" columnid="YY_BASE"/>
      <BindItem id="item1" compid="divSearch.form.ccboTY_SEASON" propid="value" datasetid="dsSearch" columnid="TY_SEASON"/>
    </Bind>
  </Form>
</FDL>
