<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1400" height="720" titletext="사업수지항목" onload="form_onload">
    <Layouts>
      <Layout stepcount="0">
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg" formscrolltype="none" text="">
          <Layouts>
            <Layout>
              <Static id="staCD_PROJ" taborder="0" text="프로젝트" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfCD_PROJ" CodeFindName="DOS_CFPROJ" CDTextWidth="70" taborder="1" left="staCD_PROJ:0.0" top="10.0" width="350" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
              <Static id="staYR_ACCOUNT" taborder="3" text="기준년월" left="ccfCD_PROJ:0.0" top="10.0" width="92.0" height="24.0" textDecoration="none" cssclass="sta_WF_SchLabel"/>
              <Div id="tclYM_MAGAM" taborder="2" left="staYR_ACCOUNT:0.0" top="10.0" width="84" height="24.0" url="cmm::cmmCalMM.xfdl" enableevent="true" text=""/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="30" bottom="0" right="0" cssclass="div_DATA_Bg" text="">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="13" right="0" bottom="2" binddataset="dsList"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	if (!this.gfnIsNull(this.getOwnerFrame().CD_PROJ)) {
		this.dsSearch.setColumn(0, "CD_PROJ", this.getOwnerFrame().CD_PROJ);
		this.dsSearch.setColumn(0, "DS_PROJ", this.getOwnerFrame().DS_PROJ);
		this.dsSearch.setColumn(0, "YM_MAGAM", this.getOwnerFrame().YM_MAGAM);
	}
	else {
		this.dsSearch.setColumn(0, "YM_MAGAM", this.gfnGetDate().substr(0,6));	
	}
	
	if (!this.gfnIsNull(this.dsSearch.getColumn(0, "CD_PROJ")))
		this.FormBtns.Select.click();
		
};

this.fnSetButton = function() {

}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {

};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
 	this.ccfCD_PROJ = this.divSearch.form.ccfCD_PROJ;
	this.tclYM_WORK = this.divSearch.form.tclYM_WORK;
	
 	this.dxGrid = this.divData.form.objGrid;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
 	//this.gfnGridInit(this.dxGrid, this.dsList, "DO", "DOS_TOT");
	this.gfnGridInit(this.dxGrid, this.dsList, "DO", "DOS_CASHFLOW", "DS_ITEM", "NO_LEVEL"); //TREE 형태 그리드
	
	this.ccfCD_PROJ.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.ccfCD_PROJ.AfterCDTextChanged = "fnAfterCDTextChanged";
 	
 	//his.fnAddFlagRow();
 	//this.gfnGridSet(this, this.dxGrid, this.dsGridInfo, this.dsGridSpec);
	
	//this.grdFormat = this.dxGrid.getCurFormatString();
}

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_PROJ", "string");
	this.dsSelect.addColumn("YM_MAGAM", "string");
	
	this.dsSetHead = new Dataset();
	this.dsSetHead.addColumn("CD_PROJ", "string");
	this.dsSetHead.addColumn("YM_MAGAM", "string");
	
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
this.fnSelect = function() {
	//if (!this.fnSelectValidate()) return false;
	
	// 그리드 헤더 조회후 설정
	this.fnSetHeader();
}

// 그리드 컬럼 조회
this.fnSetHeader = function() {
	
	this.dsSetHead.clearData();
	this.dsSetHead.addRow();
	
	this.dsSetHead.setColumn(0, "CD_PROJ", this.dsSearch.getColumn(0, "CD_PROJ"));
	this.dsSetHead.setColumn(0, "YM_MAGAM", this.dsSearch.getColumn(0, "YM_MAGAM"));

	var strSvcId    = "header";
	var strSvcType  = "select";
	var inProc		= "_dsProc";
	var inData      = "selectGrHead=dsSetHead";
	var outData     = "dsHeader=selectGrHead0"; 
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc, false); // 통신방법 정의 [생략가능]
};

// 그리드 컬럼 추가
this.fnSetGridColunm = function (){	

	//this.dxGrid.set_binddataset(this.dsHeader);
	
	var ncol1 = 0;
	
	this.dxGrid.set_enableredraw(false);
	this.dsList.set_enableevent(false);
	
	// 재조회할때 이전 조회한 컬럼정보를 지우고 다시 셋팅함
	for ( var i =this.dxGrid.getCellCount("body")-1; 1 < i ; i--){
 		if( this.gfnGridGetBindColumnNameByIndex( this.dxGrid, i).search("CD_") > -1 ){
 			this.dxGrid.deleteContentsCol("body",i);
 		}		
 	}
	for ( var i =this.dsList.colcount-1; -1 < i ; i--){
		//trace(i+"=" + this.dsList.getColID(i));
		if( this.dsList.getColID(i).search("CD_") > -1 ){
			this.dsList.deleteColumn(i);
		}
	}
	
	// 그리드 헤더 셋팅(컬럼 추가)
	for (var i = 0; i < this.dsHeader.rowcount; i++) {
		
		trace("asdfasdf>>>" + this.dsHeader.rowcount);

		var objColinfo = new ColumnInfo() ;
		objColinfo.set_type( "TEXT" );
		objColinfo.set_size( 256 );
		
		this.dsList.addColumnInfo(this.dsHeader.getColumn(i,"DS_01"),objColinfo);
		
		ncol1 = this.dxGrid.appendContentsCol();
		headCol = (ncol1+3) + i * 12;
		headCol1 = 5 + i * 12;
		trace("ncol1>>>" + ncol1);
		trace("headCol>>>" + headCol);
		trace("headCol1>>>" + headCol1);
		this.dxGrid.setFormatColProperty(ncol1, "size", 120);
		this.dxGrid.setCellProperty("head", headCol1, "text", this.dsHeader.getColumn(i, "DS_01") );		//헤더 상단
		this.dxGrid.setCellProperty("head", headCol	, "text", this.dsHeader.getColumn(i, "YM_01"));			//헤더 하단
		this.dxGrid.setCellProperty("body", ncol1, "displaytype", "number");
		this.dxGrid.setCellProperty("body", ncol1, "text", "bind:" + (this.dsHeader.getColumn(i, "YY_YEAR"))+"-01");
		//this.dxGrid.setCellProperty("summ", ncol1, "displaytype", "number");
		//this.dxGrid.setCellProperty("summ", ncol1 , "text", "expr:dataset.getSum('" + this.dsHeader.getColumn(i,"CD_CORP") + "')");
		
		ncol1 = this.dxGrid.appendContentsCol();
		headCol = (ncol1+4) + i * 12;
		headCol1 = 6 + i * 12;
		this.dxGrid.setFormatColProperty(ncol1, "size", 120);
		this.dxGrid.setCellProperty("head", headCol1, "text", this.dsHeader.getColumn(i,"DS_02") );	
		this.dxGrid.setCellProperty("head", headCol	, "text", this.dsHeader.getColumn(i, "YM_02"));			//헤더 하단
		this.dxGrid.setCellProperty("body", ncol1, "displaytype", "number");
		this.dxGrid.setCellProperty("body", ncol1, "text", "bind:" + (this.dsHeader.getColumn(i, "YY_YEAR"))+"-02");
		
		ncol1 = this.dxGrid.appendContentsCol();
		headCol = (ncol1+5) + i * 12;
		headCol1 = 7 + i * 12;
		this.dxGrid.setFormatColProperty(ncol1, "size", 120);
		this.dxGrid.setCellProperty("head", headCol1, "text", this.dsHeader.getColumn(i,"DS_03") );
		this.dxGrid.setCellProperty("head", headCol	, "text", this.dsHeader.getColumn(i, "YM_03"));			//헤더 하단
		this.dxGrid.setCellProperty("body", ncol1, "displaytype", "number");
		this.dxGrid.setCellProperty("body", ncol1, "text", "bind:" + (this.dsHeader.getColumn(i, "YY_YEAR"))+"-03");
		
		ncol1 = this.dxGrid.appendContentsCol();
		headCol = (ncol1+6) + i * 12;
		headCol1 = 8 + i * 12;
		this.dxGrid.setFormatColProperty(ncol1, "size", 120);
		this.dxGrid.setCellProperty("head", headCol1, "text", this.dsHeader.getColumn(i,"DS_04") );	
		this.dxGrid.setCellProperty("head", headCol	, "text", this.dsHeader.getColumn(i, "YM_04"));			//헤더 하단
		this.dxGrid.setCellProperty("body", ncol1, "displaytype", "number");
		this.dxGrid.setCellProperty("body", ncol1, "text", "bind:" + (this.dsHeader.getColumn(i, "YY_YEAR"))+"-04");
		
		ncol1 = this.dxGrid.appendContentsCol();
		headCol = (ncol1+7) + i * 12;
		headCol1 = 9 + i * 12;
		this.dxGrid.setFormatColProperty(ncol1, "size", 120);
		this.dxGrid.setCellProperty("head", headCol1, "text", this.dsHeader.getColumn(i,"DS_05") );	
		this.dxGrid.setCellProperty("head", headCol	, "text", this.dsHeader.getColumn(i, "YM_05"));			//헤더 하단
		this.dxGrid.setCellProperty("body", ncol1, "displaytype", "number");
		this.dxGrid.setCellProperty("body", ncol1, "text", "bind:" + (this.dsHeader.getColumn(i, "YY_YEAR"))+"-05");
		
		ncol1 = this.dxGrid.appendContentsCol();
		headCol = (ncol1+8) + i * 12;
		headCol1 = 10 + i * 12;
		this.dxGrid.setFormatColProperty(ncol1, "size", 120);
		this.dxGrid.setCellProperty("head", headCol1, "text", this.dsHeader.getColumn(i,"DS_06") );	
		this.dxGrid.setCellProperty("head", headCol	, "text", this.dsHeader.getColumn(i, "YM_06"));			//헤더 하단
		this.dxGrid.setCellProperty("body", ncol1, "displaytype", "number");
		this.dxGrid.setCellProperty("body", ncol1, "text", "bind:" + (this.dsHeader.getColumn(i, "YY_YEAR"))+"-06");
		
		ncol1 = this.dxGrid.appendContentsCol();
		headCol = (ncol1+9) + i * 12;
		headCol1 = 11 + i * 12;
		this.dxGrid.setFormatColProperty(ncol1, "size", 120);
		this.dxGrid.setCellProperty("head", headCol1, "text", this.dsHeader.getColumn(i,"DS_07") );	
		this.dxGrid.setCellProperty("head", headCol	, "text", this.dsHeader.getColumn(i, "YM_07"));			//헤더 하단
		this.dxGrid.setCellProperty("body", ncol1, "displaytype", "number");
		this.dxGrid.setCellProperty("body", ncol1, "text", "bind:" + (this.dsHeader.getColumn(i, "YY_YEAR"))+"-07");
		
		ncol1 = this.dxGrid.appendContentsCol();
		headCol = (ncol1+10) + i * 12;
		headCol1 = 12 + i * 12;
		this.dxGrid.setFormatColProperty(ncol1, "size", 120);
		this.dxGrid.setCellProperty("head", headCol1, "text", this.dsHeader.getColumn(i,"DS_08") );	
		this.dxGrid.setCellProperty("head", headCol	, "text", this.dsHeader.getColumn(i, "YM_08"));			//헤더 하단
		this.dxGrid.setCellProperty("body", ncol1, "displaytype", "number");
		this.dxGrid.setCellProperty("body", ncol1, "text", "bind:" + (this.dsHeader.getColumn(i, "YY_YEAR"))+"-08");
		
		ncol1 = this.dxGrid.appendContentsCol();
		headCol = (ncol1+11) + i * 12;
		headCol1 = 13 + i * 12;
		this.dxGrid.setFormatColProperty(ncol1, "size", 120);
		this.dxGrid.setCellProperty("head", headCol1, "text", this.dsHeader.getColumn(i,"DS_09") );	
		this.dxGrid.setCellProperty("head", headCol	, "text", this.dsHeader.getColumn(i, "YM_09"));			//헤더 하단
		this.dxGrid.setCellProperty("body", ncol1, "displaytype", "number");
		this.dxGrid.setCellProperty("body", ncol1, "text", "bind:" + (this.dsHeader.getColumn(i, "YY_YEAR"))+"-09");
		
		ncol1 = this.dxGrid.appendContentsCol();
		headCol = (ncol1+12) + i * 12;
		headCol1 = 14 + i * 12;
		this.dxGrid.setFormatColProperty(ncol1, "size", 120);
		this.dxGrid.setCellProperty("head", headCol1, "text", this.dsHeader.getColumn(i,"DS_10") );	
		this.dxGrid.setCellProperty("head", headCol	, "text", this.dsHeader.getColumn(i, "YM_10"));			//헤더 하단
		this.dxGrid.setCellProperty("body", ncol1, "displaytype", "number");
		this.dxGrid.setCellProperty("body", ncol1, "text", "bind:" + (this.dsHeader.getColumn(i, "YY_YEAR"))+"-10");
		
		ncol1 = this.dxGrid.appendContentsCol();
		headCol = (ncol1+13) + i * 12;
		headCol1 = 15 + i * 12;
		this.dxGrid.setFormatColProperty(ncol1, "size", 120);
		this.dxGrid.setCellProperty("head", headCol1, "text", this.dsHeader.getColumn(i,"DS_11") );
		this.dxGrid.setCellProperty("head", headCol	, "text", this.dsHeader.getColumn(i, "YM_11"));			//헤더 하단
		this.dxGrid.setCellProperty("body", ncol1, "displaytype", "number");
		this.dxGrid.setCellProperty("body", ncol1, "text", "bind:" + (this.dsHeader.getColumn(i, "YY_YEAR"))+"-11");
		
		ncol1 = this.dxGrid.appendContentsCol();
		headCol = (ncol1+14) + i * 12;
		headCol1 = 16 + i * 12;
		this.dxGrid.setFormatColProperty(ncol1, "size", 120);
		this.dxGrid.setCellProperty("head", headCol1, "text", this.dsHeader.getColumn(i,"DS_12") );
		this.dxGrid.setCellProperty("head", headCol	, "text", this.dsHeader.getColumn(i, "YM_12"));			//헤더 하단
		this.dxGrid.setCellProperty("body", ncol1, "displaytype", "number");
		this.dxGrid.setCellProperty("body", ncol1, "text", "bind:" + (this.dsHeader.getColumn(i, "YY_YEAR"))+"-12");
	}
	
	this.dxGrid.set_enableredraw(true);
	this.dsList.set_enableevent(true);

};

this.fnDtSelect = function() {
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	
	this.dsSelect.setColumn(0, "CD_PROJ", this.dsSearch.getColumn(0, "CD_PROJ"));
	this.dsSelect.setColumn(0, "YM_MAGAM", this.dsSearch.getColumn(0, "YM_MAGAM"));
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

// this.fnRealSelect = function() {
// 	//if (!this.fnSelectValidate()) return false;
// 	
// 	//this.gfnGridBeforeSelect(this.dxGrid);
// 
// 	this.dsSelect.clearData();
// 	this.dsSelect.addRow();
// 	this.dsSelect.setColumn(0, "CD_PROJ", this.dsSearch.getColumn(0, "CD_PROJ"));
// 	this.dsSelect.setColumn(0, "YM_MAGAM", this.dsSearch.getColumn(0, "YM_MAGAM"));
// 
// 	var strSvcId    = "real";
// 	var strSvcType  = "grid";
// 	var inProc		= "_dsProc";
// 	var inData      = "select=dsSelect";
// 	var outData     = "dsList=select0";
// 	var strArg      = "";
// 	var callBackFnc = "fnCallback";
// 
// 	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
// 						 strSvcType , 	// transaction을 요청할 구분
// 						 inProc,			// Procedure 정보 Dataset 이름
// 						 inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
// 						 outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
// 						 strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
// 						 callBackFnc); // 통신방법 정의 [생략가능]
// }

this.fnAdd = function() {

}

this.fnDel = function() {

}

this.fnSave = function() {
	
}

this.fnExcel = function() {

}

this.fnPrint = function() {

}

/************************************************************************
 * Validate
 ************************************************************************/
// this.fnSelectValidation = function() {
// 	var validate = true;
// 	if (this.gfnIsNull(this.dsSearch.getColumn(0, "CD_PROJ"))) {
// 		this.fnVaidateCallback = function() {
// 			this.ccfCD_PROJ.form.CDTextBox.setFocus();
// 		}
// 		this.gfnAlert("프로젝트 코드를 입력하지 않았습니다.", "fnVaidateCallback");
// 		return false;
// 	}
// 	
//   	return validate;
//  }


/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);	
	} else if(svcID == "header") {
 		trace("fnCallback dsHeader >>>>"+this.dsHeader.saveXML());
		
		// 그리드 설정(컬럼추가)
		this.fnSetGridColunm();
		
		// 데이터 조회
		this.fnDtSelect();
	}	
}
	
/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	if (id == "ccfCD_PROJ") {
		dsUserParam.setColumn(nrow, "CD_DEPT", this.AuthClient.CD_DEPT);
		dsUserParam.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
		dsUserParam.setColumn(nrow, "CD_CORP", this.AuthClient.CD_CORP);
		dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
	} 
	
	return true;
};

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
this.fnGrid_EnterCell = function(obj:nexacro.Grid, row, cell) {
	// 수정가능 true, false 처리하려는 컬럼에 대해서만 return 처리할것. 
	var colnm = this.gfnGridGetBindColumnNameByIndex(this.dxGrid, cell);	// 클릭한 cell의 컬럼명
}

/************************************************************************
 * 확장버튼 이벤트
 ************************************************************************/

/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo) {
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);
	}
};

this.fnAddFlagRow = function() {

	//this.gfnGridInit(this.dxGrid, this.dsList, "DO", "DOS_CASHFLOW", "DS_ITEM", "NO_LEVEL"); //TREE 형태 그리드

// 	var nrow = this.dsGridSpec.addRow();
// 	this.dsGridSpec.setColumn(nrow, "NO_WIDTH", 20);
// 	this.dsGridSpec.setColumn(nrow, "YN_READONLY", "Y");
// 	this.dsGridSpec.setColumn(nrow, "YN_ESSENTIAL", "N");
// 	this.dsGridSpec.setColumn(nrow, "TY_CELLTYPE", "TEXT");
// 	this.dsGridSpec.setColumn(nrow, "TY_ALIGN", "CENTER");
// 	this.dsGridSpec.setColumn(nrow, "TY_INPUT", "KEYIN");
// 	this.dsGridSpec.setColumn(nrow, "DS_FIELD", this.ucFlag);
// 	
// 	nrow = this.dsGridSpec.addRow();
// 	this.dsGridSpec.setColumn(nrow, "NO_WIDTH", 200);
// 	this.dsGridSpec.setColumn(nrow, "YN_READONLY", "Y");
// 	this.dsGridSpec.setColumn(nrow, "YN_ESSENTIAL", "N");
// 	this.dsGridSpec.setColumn(nrow, "TY_CELLTYPE", "TEXT");
// 	this.dsGridSpec.setColumn(nrow, "TY_ALIGN", "LEFT");
// 	this.dsGridSpec.setColumn(nrow, "TY_INPUT", "KEYIN");
// 	this.dsGridSpec.setColumn(nrow, "DS_FIELD", "DS_ITEM");
// 	this.dsGridSpec.setColumn(nrow, "DS_HEADER1", "사업수지항목");
// 	this.dsGridSpec.setColumn(nrow, "DS_HEADER2", "명칭");
// 	
// 	nrow = this.dsGridSpec.addRow();
// 	this.dsGridSpec.setColumn(nrow, "NO_WIDTH", 80);
// 	this.dsGridSpec.setColumn(nrow, "YN_READONLY", "Y");
// 	this.dsGridSpec.setColumn(nrow, "YN_ESSENTIAL", "N");
// 	this.dsGridSpec.setColumn(nrow, "TY_CELLTYPE", "TEXT");
// 	this.dsGridSpec.setColumn(nrow, "TY_ALIGN", "CENTER");
// 	this.dsGridSpec.setColumn(nrow, "TY_INPUT", "KEYIN");
// 	this.dsGridSpec.setColumn(nrow, "DS_FIELD", "CD_ITEM");
// 	this.dsGridSpec.setColumn(nrow, "DS_HEADER1", "사업수지항목");
// 	this.dsGridSpec.setColumn(nrow, "DS_HEADER2", "코드");
// 	
// 	nrow = this.dsGridSpec.addRow();
// 	this.dsGridSpec.setColumn(nrow, "NO_WIDTH", 0);
// 	this.dsGridSpec.setColumn(nrow, "YN_READONLY", "Y");
// 	this.dsGridSpec.setColumn(nrow, "YN_ESSENTIAL", "N");
// 	this.dsGridSpec.setColumn(nrow, "TY_CELLTYPE", "TEXT");
// 	this.dsGridSpec.setColumn(nrow, "TY_ALIGN", "CENTER");
// 	this.dsGridSpec.setColumn(nrow, "TY_INPUT", "KEYIN");
// 	this.dsGridSpec.setColumn(nrow, "DS_FIELD", "CD_ITEM");
// 	this.dsGridSpec.setColumn(nrow, "DS_HEADER1", "사업수지항목");
// 	this.dsGridSpec.setColumn(nrow, "DS_HEADER2", "레벨");
// 	
// 	nrow = this.dsGridSpec.addRow();
// 	this.dsGridSpec.setColumn(nrow, "NO_WIDTH", 0);
// 	this.dsGridSpec.setColumn(nrow, "YN_READONLY", "Y");
// 	this.dsGridSpec.setColumn(nrow, "YN_ESSENTIAL", "N");
// 	this.dsGridSpec.setColumn(nrow, "TY_CELLTYPE", "TEXT");
// 	this.dsGridSpec.setColumn(nrow, "TY_ALIGN", "CENTER");
// 	this.dsGridSpec.setColumn(nrow, "TY_INPUT", "KEYIN");
// 	this.dsGridSpec.setColumn(nrow, "DS_FIELD", "CD_ITEM");
// 	this.dsGridSpec.setColumn(nrow, "DS_HEADER1", "사업수지항목");
// 	this.dsGridSpec.setColumn(nrow, "DS_HEADER2", "사용여부");
// 	
// 	nrow = this.dsGridSpec.addRow();
// 	this.dsGridSpec.setColumn(nrow, "NO_WIDTH", 120);
// 	this.dsGridSpec.setColumn(nrow, "YN_READONLY", "Y");
// 	this.dsGridSpec.setColumn(nrow, "YN_ESSENTIAL", "N");
// 	this.dsGridSpec.setColumn(nrow, "TY_CELLTYPE", "DOUBLE");
// 	this.dsGridSpec.setColumn(nrow, "TY_ALIGN", "RIGHT");
// 	this.dsGridSpec.setColumn(nrow, "TY_INPUT", "KEYIN");
// 	this.dsGridSpec.setColumn(nrow, "DS_FIELD", "AM_PLAN");
// 	this.dsGridSpec.setColumn(nrow, "DS_HEADER1", "사업예산");
// 	this.dsGridSpec.setColumn(nrow, "DS_HEADER2", "사업예산");
// 	this.dsGridSpec.setColumn(nrow, "DS_COMBOLIST", "#,###.##");
// 	
// 	nrow = this.dsGridSpec.addRow();
// 	this.dsGridSpec.setColumn(nrow, "NO_WIDTH", 120);
// 	this.dsGridSpec.setColumn(nrow, "YN_READONLY", "Y");
// 	this.dsGridSpec.setColumn(nrow, "YN_ESSENTIAL", "N");
// 	this.dsGridSpec.setColumn(nrow, "TY_CELLTYPE", "DOUBLE");
// 	this.dsGridSpec.setColumn(nrow, "TY_ALIGN", "RIGHT");
// 	this.dsGridSpec.setColumn(nrow, "TY_INPUT", "KEYIN");
// 	this.dsGridSpec.setColumn(nrow, "DS_FIELD", "AM_EXEC");
// 	this.dsGridSpec.setColumn(nrow, "DS_HEADER1", "사업수지분석");
// 	this.dsGridSpec.setColumn(nrow, "DS_HEADER2", "기집행");
// 	this.dsGridSpec.setColumn(nrow, "DS_COMBOLIST", "#,###.##");
// 	
// 	nrow = this.dsGridSpec.addRow();
// 	this.dsGridSpec.setColumn(nrow, "NO_WIDTH", 80);
// 	this.dsGridSpec.setColumn(nrow, "YN_READONLY", "Y");
// 	this.dsGridSpec.setColumn(nrow, "YN_ESSENTIAL", "N");
// 	this.dsGridSpec.setColumn(nrow, "TY_CELLTYPE", "DOUBLE");
// 	this.dsGridSpec.setColumn(nrow, "TY_ALIGN", "RIGHT");
// 	this.dsGridSpec.setColumn(nrow, "TY_INPUT", "KEYIN");
// 	this.dsGridSpec.setColumn(nrow, "DS_FIELD", "RT_EXEC");
// 	this.dsGridSpec.setColumn(nrow, "DS_HEADER1", "사업수지분석");
// 	this.dsGridSpec.setColumn(nrow, "DS_HEADER2", "기집행율");
// 	this.dsGridSpec.setColumn(nrow, "DS_COMBOLIST", "0.##");
// 	
// 	nrow = this.dsGridSpec.addRow();
// 	this.dsGridSpec.setColumn(nrow, "NO_WIDTH", 120);
// 	this.dsGridSpec.setColumn(nrow, "YN_READONLY", "Y");
// 	this.dsGridSpec.setColumn(nrow, "YN_ESSENTIAL", "N");
// 	this.dsGridSpec.setColumn(nrow, "TY_CELLTYPE", "DOUBLE");
// 	this.dsGridSpec.setColumn(nrow, "TY_ALIGN", "RIGHT");
// 	this.dsGridSpec.setColumn(nrow, "TY_INPUT", "KEYIN");
// 	this.dsGridSpec.setColumn(nrow, "DS_FIELD", "AM_JAN");
// 	this.dsGridSpec.setColumn(nrow, "DS_HEADER1", "사업수지분석");
// 	this.dsGridSpec.setColumn(nrow, "DS_HEADER2", "잔액");
// 	this.dsGridSpec.setColumn(nrow, "DS_COMBOLIST", "#,###.##");
	
};

]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">selectGrHead</Col>
            <Col id="SP">DOSPR_CASHFLOW_TITLE_SELECT</Col>
          </Row>
          <Row>
            <Col id="SP">DOSPR_CASHFLOW_SELECT</Col>
            <Col id="TARGET">select</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_PROJ" type="STRING" size="256"/>
          <Column id="DS_PROJ" type="STRING" size="256"/>
          <Column id="YM_MAGAM" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CD_PROJ"/>
            <Col id="DS_PROJ"/>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsHeader"/>
      <Dataset id="dsGridSpec">
        <ColumnInfo>
          <Column id="NO_WIDTH" type="INT" size="256"/>
          <Column id="YN_READONLY" type="STRING" size="256"/>
          <Column id="YN_ESSENTIAL" type="STRING" size="256"/>
          <Column id="TY_CELLTYPE" type="STRING" size="256"/>
          <Column id="TY_ALIGN" type="STRING" size="256"/>
          <Column id="TY_INPUT" type="STRING" size="256"/>
          <Column id="DS_FIELD" type="STRING" size="256"/>
          <Column id="DS_HEADER1" type="STRING" size="256"/>
          <Column id="DS_HEADER2" type="STRING" size="256"/>
          <Column id="DS_HEADER3" type="STRING" size="256"/>
          <Column id="DS_COMBOLIST" type="STRING" size="256"/>
          <Column id="CD_CODEFIND" type="STRING" size="256"/>
          <Column id="NM_CODEFIND" type="STRING" size="256"/>
          <Column id="DS_RESULTALIAS" type="STRING" size="256"/>
          <Column id="NO_MAXLENGTH" type="INT" size="256"/>
          <Column id="NO_GROUP" type="INT" size="256"/>
          <Column id="NO_MERGE" type="INT" size="256"/>
          <Column id="TY_SUMMARY" type="STRING" size="256"/>
          <Column id="AT_COLBACK" type="STRING" size="256"/>
          <Column id="AT_COLFORE" type="STRING" size="256"/>
          <Column id="AT_READONLY" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="dsGridInfo">
        <ColumnInfo>
          <Column id="YN_READONLY" type="STRING" size="256"/>
          <Column id="NO_FIXEDROWS" type="STRING" size="256"/>
          <Column id="NO_FROZENCOL" type="STRING" size="256"/>
          <Column id="YN_AUTOFILTER" type="STRING" size="256"/>
          <Column id="TY_GROUP" type="STRING" size="256"/>
          <Column id="YN_GROUPPANNEL" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="YN_READONLY">N</Col>
            <Col id="NO_FIXEDROWS">1</Col>
            <Col id="NO_FROZENCOL">0</Col>
            <Col id="YN_AUTOFILTER">Y</Col>
          </Row>
        </Rows>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfCD_PROJ.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_PROJ"/>
      <BindItem id="item1" compid="divSearch.form.ccfCD_PROJ.form.DSTextBox" propid="value" datasetid="dsSearch" columnid="DS_PROJ"/>
      <BindItem id="item2" compid="divSearch.form.tclYM_MAGAM.form.TextBox" propid="value" datasetid="dsSearch" columnid="YM_MAGAM"/>
    </Bind>
  </Form>
</FDL>
