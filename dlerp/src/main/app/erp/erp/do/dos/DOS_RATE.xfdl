<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1400" height="720" titletext="사업수지항목" onload="form_onload">
    <Layouts>
      <Layout stepcount="0">
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="78.0" right="0" cssclass="div_SEARCH_Bg" formscrolltype="none" text="">
          <Layouts>
            <Layout>
              <Static id="staCD_PROJ" taborder="0" text="프로젝트" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfCD_PROJ" CodeFindName="DOS_CFPROJ" CDTextWidth="70" taborder="1" left="staCD_PROJ:0.0" top="10.0" width="350" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
              <Static id="staYR_ACCOUNT" taborder="3" text="회계년월" left="ccfCD_PROJ:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="tclYM_MAGAM" taborder="2" left="staYR_ACCOUNT:0.0" top="10.0" width="84" height="24.0" url="cmm::cmmCalMM.xfdl" enableevent="true" text=""/>
              <Static id="staYN_ADD" taborder="4" text="구분" left="0.0" top="staCD_PROJ:10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Combo id="ccboTY_RATE" taborder="5" left="staYN_ADD:0.0" top="10.0" width="140" height="24.0" innerdataset="dsTY_RATE" datacolumn="DS_CODE" codecolumn="CD_CODE" value="N" onitemchanged="fnSearchInit" text="N" index="0"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="30" bottom="0" right="0" cssclass="div_DATA_Bg" text="">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="13" right="0" bottom="2"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	this.fnSetCombo();
	
	if (!this.gfnIsNull(this.getOwnerFrame().CD_PROJ)) {
		this.dsSearch.setColumn(0, "CD_PROJ", this.getOwnerFrame().CD_PROJ);
		this.dsSearch.setColumn(0, "DS_PROJ", this.getOwnerFrame().DS_PROJ);
		this.dsSearch.setColumn(0, "YM_MAGAM", this.getOwnerFrame().YM_MAGAM);
		this.dsSearch.setColumn(0, "TY_RATE", this.getOwnerFrame().TY_PLAN);
		
	}

	if (!this.gfnIsNull(this.dsSearch.getColumn(0, "CD_PROJ")))
		this.FormBtns.Select.click();
		
	//this.dsSearch.setColumn(0, "YM_MAGAM", this.gfnGetDate().substr(0,6));	
};

this.fnSetButton = function() {
// 	this.FormBtns.Add.set_enable(false);
// 	this.FormBtns.Del.set_enable(false);
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btnCreate = this.gfnFormButtonAdd("btnCreate", "fnCreate"); //기준년월생성
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
 	this.ccfCD_PROJ = this.divSearch.form.ccfCD_PROJ;
	this.ccfCD_DEPT_ACNT = this.divSearch.form.ccfCD_DEPT_ACNT;
	this.tclYM_WORK = this.divSearch.form.tclYM_WORK;
	this.ccboRT_GONGJUNG = this.divSearch.form.ccboRT_GONGJUNG; // 공정율 콤보
	
 	this.dxGrid = this.divData.form.objGrid;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
 	this.gfnGridInit(this.dxGrid, this.dsList, "DO", "DOS_RATE");
	//this.gfnGridInit(this.dxGrid, this.dsList, "DO", "DOS_TOT", "DS_ITEM", "NO_LEVEL"); //TREE 형태 그리드

 	//this.dxGrid.addEventHandler("oncelldblclick", this.fnDtl, this);
 	
 	this.ccfCD_PROJ.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.ccfCD_PROJ.AfterCDTextChanged = "fnAfterCDTextChanged";
	
}

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_PROJ", "string");
	this.dsSelect.addColumn("YM_MAGAM", "string");
	this.dsSelect.addColumn("TY_RATE", "string");

	this.dsInsert = new Dataset();
	this.dsInsert.addColumn("CD_PROJ", "string");
	this.dsInsert.addColumn("YM_MAGAM", "string");
	this.dsInsert.addColumn("TY_RATE", "string");
	this.dsInsert.addColumn("YM_RATE", "string");
	this.dsInsert.addColumn("RT_RATE", "bigdecimal");
	this.dsInsert.addColumn("RM_BIGO", "string");
	this.dsInsert.addColumn("ID_USER", "string");

	this.dsUpdate = new Dataset();
	this.dsUpdate.addColumn("CD_PROJ", "string");
	this.dsUpdate.addColumn("YM_MAGAM", "string");
	this.dsUpdate.addColumn("TY_RATE", "string");
	this.dsUpdate.addColumn("YM_RATE", "string");
	this.dsUpdate.addColumn("RT_RATE", "bigdecimal");
	this.dsUpdate.addColumn("RM_BIGO", "string");
	this.dsUpdate.addColumn("ID_USER", "string");

	this.dsDelete = new Dataset();
	this.dsDelete.addColumn("CD_PROJ", "string");
	this.dsDelete.addColumn("YM_MAGAM", "string");
	this.dsDelete.addColumn("TY_RATE", "string");
	this.dsDelete.addColumn("YM_RATE", "string");
	
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
this.fnSelect = function() {
	if (!this.fnSelectValidation()) return;
	
	this.gfnGridBeforeSelect(this.dxGrid);

	this.dsSelect.clearData();
	this.dsSelect.addRow();
	
	this.dsSelect.setColumn(0, "CD_PROJ", this.dsSearch.getColumn(0, "CD_PROJ"));
	this.dsSelect.setColumn(0, "YM_MAGAM", this.dsSearch.getColumn(0, "YM_MAGAM"));
	this.dsSelect.setColumn(0, "TY_RATE", this.dsSearch.getColumn(0, "TY_RATE"));
			
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect"; 
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
			
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

this.fnAdd = function() {
	this.gfnGridAdd(this.dxGrid);
}

this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}

this.fnSave = function() {
	if (!this.gfnGridValidate(this.dxGrid)) return;
	
	this.dxGrid.updateToDataset();
	
	this.dsInsert.clearData();
	this.dsUpdate.clearData();
	this.dsDelete.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "I" :
				
				var nrow = this.dsInsert.addRow();
				this.dsInsert.setColumn(nrow, "CD_PROJ", this.dsSearch.getColumn(0, "CD_PROJ"));
				this.dsInsert.setColumn(nrow, "YM_MAGAM", this.dsSearch.getColumn(0, "YM_MAGAM"));
				this.dsInsert.setColumn(nrow, "TY_RATE", this.dsSearch.getColumn(0, "TY_RATE"));
				this.dsInsert.setColumn(nrow, "YM_RATE", this.dsList.getColumn(i, "YM_RATE"));
				this.dsInsert.setColumn(nrow, "RT_RATE", this.dsList.getColumn(i, "RT_RATE"));
				this.dsInsert.setColumn(nrow, "RM_BIGO", this.dsList.getColumn(i, "RM_BIGO"));
				this.dsInsert.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
				
				break;
			case "U" :
				
				var nrow = this.dsUpdate.addRow();
				this.dsUpdate.setColumn(nrow, "CD_PROJ", this.dsSearch.getColumn(0, "CD_PROJ"));
				this.dsUpdate.setColumn(nrow, "YM_MAGAM", this.dsSearch.getColumn(0, "YM_MAGAM"));
				this.dsUpdate.setColumn(nrow, "TY_RATE", this.dsSearch.getColumn(0, "TY_RATE"));
				this.dsUpdate.setColumn(nrow, "YM_RATE", this.dsList.getColumn(i, "YM_RATE"));
				this.dsUpdate.setColumn(nrow, "RT_RATE", this.dsList.getColumn(i, "RT_RATE"));
				this.dsUpdate.setColumn(nrow, "RM_BIGO", this.dsList.getColumn(i, "RM_BIGO"));
				this.dsUpdate.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);

				break;
			case "D" :
				
				var nrow = this.dsDelete.addRow();
				this.dsDelete.setColumn(nrow, "CD_PROJ",this.dsSearch.getColumn(0, "CD_PROJ"));
				this.dsDelete.setColumn(nrow, "YM_MAGAM", this.dsSearch.getColumn(0, "YM_MAGAM"));
				this.dsDelete.setColumn(nrow, "TY_RATE", this.dsSearch.getColumn(0, "TY_RATE"));
				this.dsDelete.setColumn(nrow, "YM_RATE", this.dsList.getColumn(i, "YM_RATE"));

				break;

		}
	}
	
	if (this.dsInsert.rowcount == 0 && this.dsUpdate.rowcount == 0 && this.dsDelete.rowcount == 0) return;
			
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "insert=dsInsert update=dsUpdate delete=dsDelete";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

this.fnExcel = function() {

}

this.fnPrint = function() {

}

/************************************************************************
 * Validate
 ************************************************************************/
this.fnSelectValidation = function() {
	var validate = true;
	if (this.gfnIsNull(this.dsSearch.getColumn(0, "CD_PROJ"))) {
		this.fnVaidateCallback = function() {
			this.ccfCD_PROJ.form.CDTextBox.setFocus();
		}
		this.gfnAlert("프로젝트 코드를 입력하지 않았습니다.", "fnVaidateCallback");
		return false;
	}
	
	if (this.gfnIsNull(this.dsSearch.getColumn(0, "YM_MAGAM"))) {
		this.fnVaidateCallback = function() {
			this.ccfCD_PROJ.form.CDTextBox.setFocus();
		}
		this.gfnAlert("회계년월을 입력하지 않았습니다.", "fnVaidateCallback");
		return false;
	}
	
  	return validate;
 }


/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
this.fnCallback = function(svcID, errorCode, errorMsg) {
	if(svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);
	}	
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		}
		else {
			this.gfnAlert(errorMsg);
		}
	}
}

this.fnPopCallBack = function(svcID, val) {
	if(val != false) {
		this.FormBtns.Select.click();
	}
}	
/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	if (id == "ccfCD_PROJ") {
		dsUserParam.setColumn(nrow, "CD_DEPT", this.AuthClient.CD_DEPT);
		dsUserParam.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
		dsUserParam.setColumn(nrow, "CD_CORP", this.AuthClient.CD_CORP);
		dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
	} 
	
	return true;
};

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
this.fnGrid_BeforeUserDataSetParam = function(id, dsUserParam, nrow){
	
};

this.fnGrid_AfterCDTextChanged = function(id, codeFindData) {

};

/************************************************************************
 * 확장버튼 이벤트
 ************************************************************************/
// 기준년월생성
this.fnCreate = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	
	var param = {};
	param.CD_PROJ = this.dsSearch.getColumn(0, "CD_PROJ");	// 프로젝트
	param.TY_RATE = this.dsSearch.getColumn(0, "TY_RATE");	// 공정율
	param.YM_MAGAM = this.dsSearch.getColumn(0, "YM_MAGAM");	// 회계년월
	
	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DOS_RATE_DLG", "fnPopCallBack", param);
}

/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo) {
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);
	}
};

// 공통코드콤보
this.fnSetCombo = function() {
	
	this.dsCombo = new Dataset();
	this.dsCombo.addColumn("CD_SYSTEM", "string");
	this.dsCombo.addColumn("CD_TYPE", "string");
	this.dsCombo.addRow();
	this.dsCombo.setColumn(0, "CD_SYSTEM", "DO");
	this.dsCombo.setColumn(0, "CD_TYPE", "SB");	
	
	var strSvcId    = "combo";
	var strSvcType  = "select";
	var inProc		= "_dsProc";
	var inData      = "combo=dsCombo";
	var outData     = "dsTY_RATE=combo0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); 	// 통신방법 정의 [생략가능]
};

]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DOSPR_RATE_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">insert</Col>
            <Col id="SP">DOSPR_RATE_INSERT</Col>
          </Row>
          <Row>
            <Col id="TARGET">update</Col>
            <Col id="SP">DOSPR_RATE_UPDATE</Col>
          </Row>
          <Row>
            <Col id="TARGET">delete</Col>
            <Col id="SP">DOSPR_RATE_DELETE</Col>
          </Row>
          <Row>
            <Col id="SP">DZXPR_COMBO_SELECT</Col>
            <Col id="TARGET">combo</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_PROJ" type="STRING" size="256"/>
          <Column id="DS_PROJ" type="STRING" size="256"/>
          <Column id="YM_MAGAM" type="STRING" size="256"/>
          <Column id="TY_RATE" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CD_PROJ"/>
            <Col id="DS_PROJ"/>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsTY_RATE">
        <ColumnInfo>
          <Column id="CD_CODE" type="STRING" size="256"/>
          <Column id="DS_CODE" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfCD_PROJ.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_PROJ"/>
      <BindItem id="item1" compid="divSearch.form.ccfCD_PROJ.form.DSTextBox" propid="value" datasetid="dsSearch" columnid="DS_PROJ"/>
      <BindItem id="item2" compid="divSearch.form.tclYM_MAGAM.form.TextBox" propid="value" datasetid="dsSearch" columnid="YM_MAGAM"/>
      <BindItem id="item3" compid="divSearch.form.ccboTY_RATE" propid="value" datasetid="dsSearch" columnid="TY_RATE"/>
    </Bind>
  </Form>
</FDL>
