<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="form" width="1280" height="720" titletext="입금내역전표발행" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="78.0" right="0" cssclass="div_SEARCH_Bg">
          <Layouts>
            <Layout>
              <Static id="staCD_CORP" taborder="6" text="법인코드" left="0" top="10.0" width="92" height="24.0" textDecoration="none" cssclass="sta_WF_SchLabel"/>
              <Div id="ccfCD_CORP" CDTextWidth="50" taborder="0" left="staCD_CORP:0.0" top="10.0" width="269" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
              <Static id="staYN_SLIP" taborder="5" text="전표발행여부" left="ccfCD_CORP:0.0" top="10.0" width="118.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Combo id="cboYN_SLIP" taborder="1" text="자금집행일" left="staYN_SLIP:0.0" top="10.0" width="110" height="24.0" innerdataset="dsYN_SLIP" datacolumn="DS_CODE" codecolumn="CD_CODE" index="-1"/>
              <Static id="staDT_REQ" taborder="8" text="거래일자" left="cboYN_SLIP:0.0" top="10.0" width="92" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Calendar id="tclDT_TRADE_FR" taborder="3" left="staDT_REQ:0.0" top="10.0" width="105" height="24.0" dateformat="yyyy-MM-dd" editformat="yyyyMMdd" autoselect="true"/>
              <Static id="staDT_REQ00" taborder="9" text="~" left="tclDT_TRADE_FR:0.0" top="10.0" width="30.0" height="24.0" cssclass="sta_WF_AC"/>
              <Calendar id="tclDT_TRADE_TO" taborder="4" left="staDT_REQ00:0.0" top="10.0" width="105" height="24.0" dateformat="yyyy-MM-dd" editformat="yyyyMMdd" autoselect="true"/>
              <Static id="staCD_DEPT_BH" taborder="7" text="처리부서" left="0" top="staCD_CORP:10.0" width="92" height="24.0" textDecoration="none" cssclass="sta_WF_SchLabel"/>
              <Div id="ccfCD_DEPT_BH" CDTextWidth="80" taborder="2" left="staCD_DEPT_BH:0.0" top="staCD_CORP:10.0" width="269" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
              <Static id="staCD_DEPT_BE" taborder="4" text="귀속부서" left="ccfCD_DEPT_BH:0.0" top="staCD_CORP:10.0" width="118.0" height="24.0" textDecoration="none" cssclass="sta_WF_SchLabel"/>
              <Div id="ccfCD_DEPT_BE" CDTextWidth="80" taborder="3" left="staCD_DEPT_BE:0.0" top="staCD_CORP:10.0" width="269" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="1" left="0" top="divSearch:25" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();				
	this.fnSetCombo();
};

this.fnsetInit = function() {
	if ( !this.gfnIsNull(this.getOwnerFrame().CD_CORP) ) {
		this.dsSearch.set_enableevent(false);
		
		this.dsSearch.setColumn(0, "CD_CORP", this.getOwnerFrame().CD_CORP);
		this.ccfCD_CORP.form.DSTextBox.set_value(this.getOwnerFrame().DS_CORP);
		this.dsSearch.setColumn(0, "DT_TRADE_FR", this.getOwnerFrame().DT_TRADE_FR);
		this.dsSearch.setColumn(0, "DT_TRADE_TO", this.getOwnerFrame().DT_TRADE_TO);
		
		this.dsSearch.set_enableevent(true);
		
		this.FormBtns.Select.click();
	} else {
		var today = this.gfnGetDate();
		this.dsSearch.setColumn(0, "DT_TRADE_FR", this.gfnAddMonth(today, -1));
		this.dsSearch.setColumn(0, "DT_TRADE_TO", today);
	}
}
 
/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 ************************************************************************/
this.fnSetButton = function() {
};

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btnSlipPub = this.gfnFormButtonAdd("btnSlipPub", "fnSlipPub", "전표발행");
	this.btnSlipSelect = this.gfnFormButtonAdd("btnSlipSelect", "fnSlipSelect", "전표조회");
	this.btnSlipCncl = this.gfnFormButtonAdd("btnSlipCncl", "fnSlipCncl", "전표취소");
	this.btnUnkownSlip = this.gfnFormButtonAdd("btnUnkownSlip", "fnUnkownSlip", "가수금전표조회");
	//this.btnDepositCnfmCncl = this.gfnFormButtonAdd("btnDepositCnfmCncl", "fnDepositCnfmCncl", "입금확인취소");
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	
	this.ccfCD_CORP = this.divSearch.form.ccfCD_CORP;		// 법인코드
	this.cboYN_SLIP = this.divSearch.form.cboYN_SLIP;		// 전표발행여부
	this.ccfCD_DEPT_BH = this.divSearch.form.ccfCD_DEPT_BH;	// 처리부서
	this.ccfCD_DEPT_BE = this.divSearch.form.ccfCD_DEPT_BE;	// 귀속부서
	this.tclDT_TRADE_FR = this.divSearch.form.tclDT_TRADE_FR;	// 거래일자(from)
	this.tclDT_TRADE_TO = this.divSearch.form.tclDT_TRADE_TO;	// 거래일자(to)

	this.dxGrid = this.divData.form.objGrid;		// 그리드
	this.grSearch = this.FormInfo.GR_SEARCH;		// 권한?
	this.cdGroup = this.gfnIsNull(this.AuthClient.CD_GROUP) ? "" : this.AuthClient.CD_GROUP;		// 그룹코드
}

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	this.ccfCD_CORP.CodeFindName = "DZX_CFCORP";		// 법인코드
	this.ccfCD_DEPT_BH.CodeFindName = "DFX_CFACNTUNIT_GROUP";	// 처리부서
	this.ccfCD_DEPT_BE.CodeFindName = "DFX_CFACNTUNIT";	// 귀속부서
	
	this.ccfCD_CORP.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.ccfCD_DEPT_BH.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.ccfCD_DEPT_BE.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	
	this.ccfCD_CORP.AfterCDTextChanged = "fnAfterCDTextChanged";
	this.ccfCD_DEPT_BH.AfterCDTextChanged = "fnAfterCDTextChanged";
	this.ccfCD_DEPT_BE.AfterCDTextChanged = "fnAfterCDTextChanged";
	
	// 그리드
	this.gfnGridInit(this.dxGrid, this.dsList, "DF", "DFL_INCOMESLIP");
	this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforuserDataSetParam";
	this.dxGrid.AfterCDTextChanged = "fnGrid_AfterCDTextChanged";	
	
	// 법인코드세션
	if (this.gfnIsNull(this.ccfCD_CORP.form.CDTextBox.value)) {
		this.ccfCD_CORP.form.DSTextBox.set_value(this.AuthClient.DS_CORP); 
		this.ccfCD_CORP.form.CDTextBox.set_value(this.AuthClient.CD_CORP);	
	}		
	
	//this.grSearch = "7";
	
	// 법인코드(1)/처리부서필수(7)
	if (nexacro.toNumber(this.grSearch) >= 1) {
		this.divSearch.form.staCD_CORP.set_textDecoration("underline");
	}	
	if (nexacro.toNumber(this.grSearch) >= 7) {
		this.divSearch.form.staCD_DEPT_BH.set_textDecoration("underline");
	}

	// 법인코드 포커스추가
	this.ccfCD_CORP.form.CDTextBox.setFocus();
	
	if (this.grSearch >= 7){
	    this.divSearch.form.ccfCD_DEPT_BH.form.CDTextBox.set_value(this.AuthClient.CD_DEPT);
		this.divSearch.form.ccfCD_DEPT_BH.form.fnCodeFindLoad();
		this.divSearch.form.ccfCD_DEPT_BH.set_enable(false);
	};
}

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {

	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_CORP", "string");
	this.dsSelect.addColumn("YN_SLIP", "string");
	this.dsSelect.addColumn("CD_DEPT_BH", "string");
	this.dsSelect.addColumn("CD_DEPT_BE", "string");
	this.dsSelect.addColumn("DT_TRADE_FR", "string");
	this.dsSelect.addColumn("DT_TRADE_TO", "string");

	this.dsUpdate = new Dataset();
	this.dsUpdate.addColumn("NO_INCONFIRM", "string");
	this.dsUpdate.addColumn("TY_TRADE", "string");
	this.dsUpdate.addColumn("DT_SLIP", "string");
	this.dsUpdate.addColumn("DT_EXPIRY", "string");
	this.dsUpdate.addColumn("CD_DEPT_BE", "string");
	this.dsUpdate.addColumn("CD_VENDOR", "string");
	this.dsUpdate.addColumn("TY_VENDOR", "string");
	this.dsUpdate.addColumn("CD_SUJI", "string");
	this.dsUpdate.addColumn("RM_BIGO", "string");
	this.dsUpdate.addColumn("ID_USER", "string");
	
	this.dsIncomeSlipDel = new Dataset();
	this.dsIncomeSlipDel.addColumn("NO_INCONFIRM", "string");
	this.dsIncomeSlipDel.addColumn("ID_USER", "string");	
	
	this.dsAutoSlipx = new Dataset();
	this.dsAutoSlipx.addColumn("NO_INCONFIRM", "string");
	this.dsAutoSlipx.addColumn("ID_USER", "string");	
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	this.dsSelect.setColumn(0, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
	this.dsSelect.setColumn(0, "YN_SLIP", this.dsSearch.getColumn(0, "YN_SLIP"));
	this.dsSelect.setColumn(0, "CD_DEPT_BH", this.dsSearch.getColumn(0, "CD_DEPT_BH"));
	this.dsSelect.setColumn(0, "CD_DEPT_BE", this.dsSearch.getColumn(0, "CD_DEPT_BE"));
	this.dsSelect.setColumn(0, "DT_TRADE_FR", this.dsSearch.getColumn(0, "DT_TRADE_FR"));
	this.dsSelect.setColumn(0, "DT_TRADE_TO", this.dsSearch.getColumn(0, "DT_TRADE_TO"));
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); 	// 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
}

/*
 *	삭제 버튼
 */
this.fnDel = function() {
}

/*
 *	저장 버튼
 */
this.fnSave = function() {
	if (!this.gfnGridValidate(this.dxGrid)) return;

	this.dxGrid.updateToDataset();
	
	this.dsUpdate.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
				
			case "U":
				var nrow = this.dsUpdate.addRow();
				this.dsUpdate.setColumn(nrow, "NO_INCONFIRM", this.dsList.getColumn(i, "NO_INCONFIRM"));
				this.dsUpdate.setColumn(nrow, "TY_TRADE", this.dsList.getColumn(i, "TY_TRADE"));
				this.dsUpdate.setColumn(nrow, "DT_SLIP", this.dsList.getColumn(i, "DT_SLIP"));
				this.dsUpdate.setColumn(nrow, "DT_EXPIRY", this.dsList.getColumn(i, "DT_EXPIRY"));
				this.dsUpdate.setColumn(nrow, "CD_DEPT_BE", this.dsList.getColumn(i, "CD_DEPT_BE"));
				this.dsUpdate.setColumn(nrow, "CD_VENDOR", this.dsList.getColumn(i, "CD_VENDOR"));
				this.dsUpdate.setColumn(nrow, "TY_VENDOR", this.dsList.getColumn(i, "TY_VENDOR"));
				this.dsUpdate.setColumn(nrow, "CD_SUJI", this.dsList.getColumn(i, "CD_SUJI"));
				this.dsUpdate.setColumn(nrow, "RM_BIGO", this.dsList.getColumn(i, "RM_BIGO"));
				this.dsUpdate.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
				break;
		}
	}
	
	if (this.dsUpdate.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "update=dsUpdate";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); 	// 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {
	if (nexacro.toNumber(this.grSearch) >= 1) {
		if (this.gfnIsNull(this.ccfCD_CORP.form.CDTextBox.text)) {
			this.gfnAlert("법인코드가 입력되지 않았습니다.");
			this.ccfCD_CORP.form.CDTextBox.setFocus();
			return false;
		}
	}	
	if (nexacro.toNumber(this.grSearch) >= 7) {
		if (this.gfnIsNull(this.ccfCD_DEPT_BH.form.CDTextBox.text)) {
			this.gfnAlert("처리부서가 입력되지 않았습니다.");
			this.ccfCD_DEPT_BH.form.CDTextBox.setFocus();
			return false;
		}
	}
	return true;
};

/*
 *	팝업 Validate
 */
this.fnPopupValidate = function(popId) {
	
	switch(popId) {
	
	// 장기자금계획 생성
	case "DFA_DLG_PLANL_CREATE":
		break;
		
	// 장기자금계획 자료삭제(초기화)		
	case "DFA_DLG_PLANL_DELETE":	
		break;
		
	default:
	}
	
	return true;
}
/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);
	}
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	} else if (svcID == "combo") {
		//  조회조건(완료여부)
		var iRow = this.dsYN_SLIP.insertRow(0);
		this.dsYN_SLIP.setColumn(iRow, "CD_CODE", "");
		this.dsYN_SLIP.setColumn(iRow, "DS_CODE", "전체");
		this.cboYN_SLIP.set_index(2);
		
		this.fnsetInit();
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	
	var cdCorp = this.gfnIsNull(this.ccfCD_CORP.form.CDTextBox.value) ? "" : this.ccfCD_CORP.form.CDTextBox.value;
	
	switch(id) {
	case "ccfCD_CORP": // 법인코드
		dsUserParam.setColumn(nrow, "CD_GROUP", this.cdGroup);	
		break;
		
	case "ccfCD_DEPT_BH": // 처리부서
// 		if ( this.gfnIsNull(cdCorp) ) {
// 			this.gfnAlert("법인코드를 먼저 입력하세요.");
// 			return false;
// 		}	
		dsUserParam.setColumn(nrow, "CD_GROUP", "");	//this.cdGroup);
		dsUserParam.setColumn(nrow, "CD_CORP", cdCorp);
		dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
		dsUserParam.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
		dsUserParam.setColumn(nrow, "CD_DEPT", this.AuthClient.CD_DEPT);
		break;
		
	case "ccfCD_DEPT_BE": // 귀속부서
// 		if ( this.gfnIsNull(cdCorp) ) {
// 			this.gfnAlert("법인코드를 먼저 입력하세요.");
// 			return false;
// 		}	
		dsUserParam.setColumn(nrow, "CD_GROUP", this.cdGroup);
		dsUserParam.setColumn(nrow, "CD_CORP", cdCorp);
		break;		
		
	default:
	}	
	return true;	
	
} 

this.fnAfterCDTextChanged = function(id) {
	switch(id) {
	
	case "ccfCD_CORP": // 법인코드
		this.ccfCD_DEPT_BH.form.DSTextBox.set_value("");
		this.ccfCD_DEPT_BH.form.CDTextBox.set_value("");
		this.ccfCD_DEPT_BE.form.DSTextBox.set_value("");
		this.ccfCD_DEPT_BE.form.CDTextBox.set_value("");		
		break;
		
	case "ccfCD_DEPT_BH": // 품의부서코드
		break;

	case "ccfCD_DEPT_BE": // 수지코드
		break;
	default:
	}	
	return true;
} 

 
this.fnGrid_BeforuserDataSetParam = function(id, dsUserParam, nrow) {
	var cdCorp = this.gfnIsNull(this.ccfCD_CORP.form.CDTextBox.value) ? "" : this.ccfCD_CORP.form.CDTextBox.value;

	if (id == "DFX_CFACNTUNIT") {
		dsUserParam.setColumn(nrow, "CD_GROUP", this.cdGroup);
		dsUserParam.setColumn(nrow, "CD_CORP", cdCorp);
	}
	
	if (id == "DFX_CFVENDOR") {
		dsUserParam.setColumn(nrow, "TY_VENDOR1", "전체");
		dsUserParam.setColumn(nrow, "CD_CORP", cdCorp);
	}
	
	if (id == "DFX_CFSUJICODE") { //자금수지
		dsUserParam.setColumn(nrow, "TY_INOUT", "I");	
		dsUserParam.setColumn(nrow, "YN_USE", "Y");		
	}		
	return true;
}

this.fnGrid_AfterCDTextChanged = function(id, codeFindData) {
	var arr = codeFindData;
	
	if (id == "DFX_CFACNTUNIT") {
	}
	
	if (id == "DFX_CFVENDOR") {
		this.dsList.setColumn(this.dsList.rowposition, "TY_VENDOR", arr[0]["TY_VENDOR"]);
	}
};
 
/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
 
/************************************************************************
 * 기타 이벤트
 ************************************************************************/
/*
 *	조회 조건 변경시 초기화
 */
this.fnSearchInit = function(obj,e) {
	if(e == null || (e.pretext != e.posttext)) {
		this.gfnSetFormStatus(this);
		this.gfnGridClear(this.dxGrid);
	}
};

this.fnSetCombo = function() {
	
	this.dsCombo = new Dataset();
	this.dsCombo.addColumn("CD_SYSTEM", "string");
	this.dsCombo.addColumn("CD_TYPE", "string");
	
	this.dsCombo.addRow();
	this.dsCombo.setColumn(0, "CD_SYSTEM", "DF");
	this.dsCombo.setColumn(0, "CD_TYPE", "Z1");
	
	
	var strSvcId    = "combo";
	var strSvcType  = "select";
	var inProc		= "_dsProc";
	var inData      = "combo=dsCombo";
	var outData     = "dsYN_SLIP=combo0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); 	// 통신방법 정의 [생략가능]
};

// 입금확인취소
this.fnDepositCnfmCncl = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	if (!this.gfnGridIsRow(this.dxGrid)) return;
	
	
	this.dsIncomeSlipDel.clearData();
	var  nrow = this.dsIncomeSlipDel.addRow();
	this.dsIncomeSlipDel.setColumn(nrow, "NO_INCONFIRM", this.dsList.getColumn(this.dsList.rowposition, "NO_INCONFIRM"));
	this.dsIncomeSlipDel.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);	
	
	if (this.dsIncomeSlipDel.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "incomeSlipDel=dsIncomeSlipDel";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); 	// 통신방법 정의 [생략가능]	
}

// 전표발행
this.fnSlipPub = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {


	if (!this.gfnGridIsRow(this.dxGrid)) return;
	
	var Temp1="";
	var RowCount = this.dsList.rowcount;
	for (var i = 0 ; i < RowCount ; i++) {
		if (this.dsList.getColumn(i, "CHK") == 1)  {
			Temp1 += "," + this.dsList.getColumn(i, "DF_INFO0");
		}
	}

	if (Temp1 == "") {
		this.gfnAlert("선택된 항목이 없습니다.");
		return;
	}
		
	var nrow = this.dsList.rowposition;
	var DF_INFO = [];
// 	
// 	DF_INFO[0] = this.gfnIsNull(this.dsList.getColumn(nrow, "DF_INFO0")) ? "" : this.dsList.getColumn(nrow, "DF_INFO0");
// 	DF_INFO[1] = this.gfnIsNull(this.dsList.getColumn(nrow, "DF_INFO1")) ? "" : this.dsList.getColumn(nrow, "DF_INFO1");
// 	DF_INFO[2] = this.gfnIsNull(this.dsList.getColumn(nrow, "DF_INFO2")) ? "" : this.dsList.getColumn(nrow, "DF_INFO2");
// 	DF_INFO[3] = this.gfnIsNull(this.dsList.getColumn(nrow, "DF_INFO3")) ? "" : this.dsList.getColumn(nrow, "DF_INFO3");
// 	DF_INFO[4] = this.gfnIsNull(this.dsList.getColumn(nrow, "DF_INFO4")) ? "" : this.dsList.getColumn(nrow, "DF_INFO4");
// 	DF_INFO[5] = this.gfnIsNull(this.dsList.getColumn(nrow, "DF_INFO5")) ? "" : this.dsList.getColumn(nrow, "DF_INFO5");
// 	DF_INFO[6] = this.gfnIsNull(this.dsList.getColumn(nrow, "DF_INFO6")) ? "" : this.dsList.getColumn(nrow, "DF_INFO6");
// 	DF_INFO[7] = this.gfnIsNull(this.dsList.getColumn(nrow, "DF_INFO7")) ? "" : this.dsList.getColumn(nrow, "DF_INFO7");
// 	DF_INFO[8] = this.gfnIsNull(this.dsList.getColumn(nrow, "DF_INFO8")) ? "" : this.dsList.getColumn(nrow, "DF_INFO8");
// 	DF_INFO[9] = this.gfnIsNull(this.dsList.getColumn(nrow, "DF_INFO9")) ? "" : this.dsList.getColumn(nrow, "DF_INFO9");
// 	DF_INFO[10] = this.gfnIsNull(this.dsList.getColumn(nrow, "DF_INFO10")) ? "" : this.dsList.getColumn(nrow, "DF_INFO10");
// 	DF_INFO[11] = this.gfnIsNull(this.dsList.getColumn(nrow, "DF_INFO11")) ? "" : this.dsList.getColumn(nrow, "DF_INFO11");
// 	DF_INFO[12] = this.gfnIsNull(this.dsList.getColumn(nrow, "DF_INFO12")) ? "" : this.dsList.getColumn(nrow, "DF_INFO12");
// 	DF_INFO[13] = this.gfnIsNull(this.dsList.getColumn(nrow, "DF_INFO13")) ? "" : this.dsList.getColumn(nrow, "DF_INFO13");
// 	DF_INFO[14] = this.gfnIsNull(this.dsList.getColumn(nrow, "DF_INFO14")) ? "" : this.dsList.getColumn(nrow, "DF_INFO14");
// 	DF_INFO[15] = this.gfnIsNull(this.dsList.getColumn(nrow, "DF_INFO15")) ? "" : this.dsList.getColumn(nrow, "DF_INFO15");
// 	DF_INFO[16] = this.gfnIsNull(this.dsList.getColumn(nrow, "DF_INFO16")) ? "" : this.dsList.getColumn(nrow, "DF_INFO16");
// 	DF_INFO[17] = this.gfnIsNull(this.dsList.getColumn(nrow, "DF_INFO17")) ? "" : this.dsList.getColumn(nrow, "DF_INFO17");
// 	DF_INFO[18] = this.gfnIsNull(this.dsList.getColumn(nrow, "DF_INFO18")) ? "" : this.dsList.getColumn(nrow, "DF_INFO18");
// 	DF_INFO[19] = this.gfnIsNull(this.dsList.getColumn(nrow, "DF_INFO19")) ? "" : this.dsList.getColumn(nrow, "DF_INFO19");
// 	DF_INFO[20] = this.gfnIsNull(this.dsList.getColumn(nrow, "DF_INFO20")) ? "" : this.dsList.getColumn(nrow, "DF_INFO20");
// 	DF_INFO[21] = this.gfnIsNull(this.dsList.getColumn(nrow, "DF_INFO21")) ? "" : this.dsList.getColumn(nrow, "DF_INFO21");
// 	DF_INFO[22] = this.gfnIsNull(this.dsList.getColumn(nrow, "DF_INFO22")) ? "" : this.dsList.getColumn(nrow, "DF_INFO22");
// 	DF_INFO[23] = this.gfnIsNull(this.dsList.getColumn(nrow, "DF_INFO23")) ? "" : this.dsList.getColumn(nrow, "DF_INFO23");
// 	DF_INFO[24] = this.gfnIsNull(this.dsList.getColumn(nrow, "DF_INFO24")) ? "" : this.dsList.getColumn(nrow, "DF_INFO24");
// 	DF_INFO[25] = this.gfnIsNull(this.dsList.getColumn(nrow, "DF_INFO25")) ? "" : this.dsList.getColumn(nrow, "DF_INFO25");
// 	DF_INFO[26] = this.gfnIsNull(this.dsList.getColumn(nrow, "DF_INFO26")) ? "" : this.dsList.getColumn(nrow, "DF_INFO26");	
	
trace("Temp1->" + Temp1);
	
	var param = {};
	param.CD_CORP = this.gfnIsNull(this.dsList.getColumn(nrow, "CD_CORP")) ? "" : this.dsList.getColumn(nrow, "CD_CORP");
	param.DS_CORP = this.gfnIsNull(this.dsList.getColumn(nrow, "DS_CORP")) ? "" : this.dsList.getColumn(nrow, "DS_CORP");
	param.CD_TRADE = "";
	param.IUD_FLAG = "";
	param.strYN_JUNDO_START = "";
	param.YN_DF = "Y";
	param.DF_INFO = DF_INFO.toString();
	param.NO_INCONFIRM = Temp1;
	this.gfnFormOpen("DHA", "DHA_ISSUESLIP", "fnPopCallBack", param);


// 	trace(this.getOwnerFrame().IUD_FLAG);
// 	trace(this.getOwnerFrame().CD_TRADE);
// 	trace(this.getOwnerFrame().IUD_FLAG);
// 	trace(this.getOwnerFrame().strYN_JUNDO_START);
// 	trace(this.getOwnerFrame().YN_DF);
// 	trace(this.getOwnerFrame().DF_INFO);	
	
}

this.fnPopCallBack = function(svcID, val) {
	//if (val != false) {
		//var json = JSON.parse(val);
		
		if (svcID.indexOf("DHA_ISSUESLIP") > -1) {
			this.FormBtns.Select.click();
		}
	//}
}


// 전표조회
this.fnSlipSelect = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	this.fnSlip("NO_SLIP");
}

// 전표취소
this.fnSlipCncl = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	if (!this.gfnGridIsRow(this.dxGrid)) { return false; }
	
// 	if (this.gfnIsNull(this.gfnTrim(this.dsList.getColumn(this.dsList.rowposition, "NO_INCONFIRM")))) {
// 		this.gfnAlert("발행된 전표가 없습니다.");
// 		return false;
// 	}
	
	var Temp1="";
	var RowCount = this.dsList.rowcount;
	for (var i = 0 ; i < RowCount ; i++) {
		if (this.dsList.getColumn(i, "CHK") == 1)  {
			Temp1 += "," + this.dsList.getColumn(i, "DF_INFO0");
		}
	}

	if (Temp1 == "") {
		this.gfnAlert("선택된 항목이 없습니다.");
		return;
	}

	this.dsAutoSlipx.clearData();

	var nrow = this.dsAutoSlipx.addRow();
	//this.dsAutoSlipx.setColumn(nrow, "NO_INCONFIRM", this.gfnTrim(this.dsList.getColumn(this.dsList.rowposition, "NO_INCONFIRM")));
	this.dsAutoSlipx.setColumn(nrow, "NO_INCONFIRM", Temp1);
	this.dsAutoSlipx.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);

	if (this.dsAutoSlipx.rowcount == 0) return;
	
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "autoslipx=dsAutoSlipx";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); 	// 통신방법 정의 [생략가능]
}

// 불명전표조회
this.fnUnkownSlip = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	this.fnSlip("NO_SLIP_GA");
}

this.fnSlip = function(slipNo) {
	if (!this.gfnGridIsRow(this.dxGrid)) return;
	
	var noSlip = this.dsList.getColumn(this.dsList.rowposition, slipNo);
	
	if ( this.gfnIsNull(noSlip) ) {
		this.gfnAlert("발행된 전표가 없습니다.");
		return false;
	}	
	
	var param = {};
	param.CD_TRADE = noSlip;
	param.IUD_FLAG = "";
	param.strYN_JUNDO_START = "";
	this.gfnFormOpen("DHA", "DHA_ISSUESLIP", "fnPopCallBack", param);
}

this.fnPopupOpen = function(popId) {
	
	if (!this.fnPopupValidate(popId)) {
		return false;
	}
	
	var param = {};
	//param.CD_CORP = this.ccfCD_CORP.form.CDTextBox.value;
	//param.DS_CORP = this.ccfCD_CORP.form.DSTextBox.value;
	
	var width = 425;
	var height = 240;
	
	// 화면 오픈. 
	// CD_MODULE은 보통 같은 모듈에서 호출하는 경우가 많으니 this.FormInfo.CD_MODULE 사용
	// 타 모듈 화면 호출시 지정할것.
	
	this.gfnFormOpen(this.FormInfo.CD_MODULE, popId, "fnPopCallBack", param, width, height);
}

this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
	}
};



this.dsList_onrowposchanged = function(obj:nexacro.NormalDataset,e:nexacro.DSRowPosChangeEventInfo)
{
		
	var noSlip = obj.getColumn(e.newrow, "NO_SLIP");
	var noSlipGa = obj.getColumn(e.newrow, "NO_SLIP_GA");
	
	if (this.gfnIsNull(this.gfnTrim(noSlip))) { // 전표번호 없음
		this.btnSlipPub.set_enable(true); 		// 발행
		this.btnSlipSelect.set_enable(false); 	// 조회
		this.btnSlipCncl.set_enable(false); 	// 취소
	} else { 
		this.btnSlipPub.set_enable(false); 		
		this.btnSlipSelect.set_enable(true);  	
		this.btnSlipCncl.set_enable(true); 		
	}
	
	if (this.gfnIsNull(this.gfnTrim(noSlipGa))) {
		this.btnUnkownSlip.set_enable(false);
	} else {
		this.btnUnkownSlip.set_enable(true);
	}		
	
	if (this.dsList.getColumn(this.dsList.rowposition, this.ucFlag) == "#" ) {
		this.btnSlipPub.set_enable(false); 			// 전표발행
		this.btnSlipSelect.set_enable(false); 		// 전표조회
		this.btnSlipCncl.set_enable(false); 		// 전표취소
		this.btnUnkownSlip.set_enable(false);		// 불명전표조회
		this.btnDepositCnfmCncl.set_enable(false);	// 불명전표조회
	}		
};
]]></Script>
    <Objects>
      <Dataset id="dsList" onrowposchanged="dsList_onrowposchanged"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DFLPR_INCOMESLIP_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">update</Col>
            <Col id="SP">DFLPR_INCOMESLIP_UPDATE</Col>
          </Row>
          <Row>
            <Col id="TARGET">combo</Col>
            <Col id="SP">DZXPR_COMBO_SELECT</Col>
          </Row>
          <Row>
            <Col id="SP">DFLPR_INCOMESLIP_DELETE</Col>
            <Col id="TARGET">incomeSlipDel</Col>
          </Row>
          <Row>
            <Col id="TARGET">autoslipx</Col>
            <Col id="SP">DFLPR_INCOMESLIP_SLIPX</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsYN_SLIP"/>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_CORP" type="STRING" size="256"/>
          <Column id="YN_SLIP" type="STRING" size="256"/>
          <Column id="CD_DEPT_BH" type="STRING" size="256"/>
          <Column id="CD_DEPT_BE" type="STRING" size="256"/>
          <Column id="DT_TRADE_FR" type="STRING" size="256"/>
          <Column id="DT_TRADE_TO" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item2" compid="divSearch.form.ccfCD_DEPT_BE.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_DEPT_BE"/>
      <BindItem id="item4" compid="divSearch.form.cboYN_SLIP" propid="value" datasetid="dsSearch" columnid="YN_SLIP"/>
      <BindItem id="item1" compid="divSearch.form.ccfCD_CORP.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_CORP"/>
      <BindItem id="item0" compid="divSearch.form.ccfCD_DEPT_BH.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_DEPT_BH"/>
      <BindItem id="item3" compid="divSearch.form.tclDT_TRADE_FR" propid="value" datasetid="dsSearch" columnid="DT_TRADE_FR"/>
      <BindItem id="item5" compid="divSearch.form.tclDT_TRADE_TO" propid="value" datasetid="dsSearch" columnid="DT_TRADE_TO"/>
    </Bind>
  </Form>
</FDL>
