<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="form" width="1280" height="720" titletext="입금내역 분류" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="78.0" right="0" cssclass="div_SEARCH_Bg" text="">
          <Layouts>
            <Layout>
              <Static id="staCD_CORP" taborder="7" text="법인코드" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfCD_CORP" CodeFindName="DZX_CFCORP" CDTextWidth="50" taborder="0" left="staCD_CORP:0.0" top="10.0" width="250" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
              <Static id="sta00" taborder="13" text="처리부서" left="ccfCD_CORP:0.0" top="10.0" width="92.0" height="24.0" textDecoration="none" cssclass="sta_WF_SchLabel"/>
              <Div id="ccfCD_DEPT_BH" CDTextWidth="90" taborder="2" left="sta00:0.0" top="10.0" width="280" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
              <Static id="staYN_SLIP" taborder="14" text="전표발행" left="ccfCD_DEPT_BH:0" top="9" width="92.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Combo id="ccboYN_SLIP" taborder="15" left="staYN_SLIP:0.0" top="10.0" width="100" height="24.0" datacolumn="DS_CODE" codecolumn="CD_CODE" innerdataset="dsYN_SLIP" index="-1"/>
              <Static id="staYN_CONFIRM" taborder="10" text="확인구분" left="ccboYN_SLIP:0.0" top="10.0" width="92.0" height="24.0" visible="false" cssclass="sta_WF_SchLabelE"/>
              <Combo id="cboYN_CONFIRM" taborder="1" left="staYN_CONFIRM:0.0" top="10.0" width="109" height="24.0" innerdataset="dsYN_CONFIRM" datacolumn="DS_CODE" codecolumn="CD_CODE" value="" text="전체" index="0" visible="false"/>
              <Static id="staDT_REQ" taborder="8" text="거래일자" left="0.0" top="staCD_CORP:10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Calendar id="tclDT_TRADE_FR" taborder="3" left="staDT_REQ:0.0" top="staCD_CORP:10.0" width="105" height="24.0" dateformat="yyyy-MM-dd" editformat="yyyyMMdd" autoselect="true"/>
              <Static id="staDT_REQ00" taborder="9" text="~" left="tclDT_TRADE_FR:0.0" top="staCD_CORP:10.0" width="30.0" height="24.0" cssclass="sta_WF_AC"/>
              <Calendar id="tclDT_TRADE_TO" taborder="4" left="staDT_REQ00:0.0" top="staCD_CORP:10.0" width="105" height="24.0" dateformat="yyyy-MM-dd" editformat="yyyyMMdd" autoselect="true"/>
              <Static id="staCD_BANK" taborder="11" text="은행코드" left="ccfCD_CORP:0" top="staCD_CORP:10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Div id="cfBANK" CodeFindName="DFX_CFBANKCODE" CDTextWidth="90" taborder="5" left="staCD_BANK:0.0" top="staCD_CORP:10.0" width="280" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
              <Static id="staNO_ACCOUNT" taborder="12" text="계좌번호" left="cfBANK:0.0" top="staCD_CORP:10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Div id="cfNO_ACCOUNT" CodeFindName="DFX_CFACCOUNTNO_SUJI" CDTextWidth="110" taborder="6" left="staNO_ACCOUNT:0.0" top="staCD_CORP:10.0" width="280" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="1" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg" ondragmove="divData_ondragmove">
          <Layouts>
            <Layout>
              <Div id="divSplitter" taborder="1" left="0" top="50%" width="100%" height="5" cursor="ns-resize" ondrag="divData_divSplitter_ondrag" cssclass="div_Splitter"/>
              <Div id="divDataTop" taborder="0" left="0" top="0" bottom="divSplitter:5" right="0">
                <Layouts>
                  <Layout>
                    <Static id="sta01" taborder="1" text="모계좌 입금내역" left="0" top="0" height="22" cssclass="sta_TITLE_Bg" right="0"/>
                    <Grid id="objGrid" taborder="0" left="0" top="sta01:5" bottom="0" right="0"/>
                  </Layout>
                </Layouts>
              </Div>
              <Div id="divDataBottom" taborder="0" left="0" top="divSplitter:5" bottom="0" right="0">
                <Layouts>
                  <Layout>
                    <Static id="sta02" taborder="0" text="분류 및 확인내역" left="0" top="0" right="0" height="22" cssclass="sta_TITLE_Bg"/>
                    <Grid id="objGridSub" taborder="1" left="0" top="sta02:5" bottom="0" right="0"/>
                    <Button id="btnIncomeSlipSrch2" taborder="3" text="반제전표조회" top="0" height="22" onclick="divData_divDataBottom_btnIncomeSlipSrch2_onclick" right="0" width="100"/>
                    <Button id="btnSlipCncl" taborder="6" text="전표취소" top="0" height="22" right="btnIncomeSlipSrch2:10" width="70" onclick="fnSlipCncl"/>
                    <Button id="btnNonNmSlip2" taborder="4" text="전표조회" top="0" height="22" onclick="divData_divDataBottom_btnNonNmSlip2_onclick" right="btnSlipCncl:10" width="70"/>
                    <Button id="btnSlipPub" taborder="5" text="가수금전표발행" top="0" height="22" right="btnNonNmSlip2:9" width="91" onclick="fnSlipPub"/>
                    <Button id="btnCancel" taborder="2" text="입금내역분류취소" top="0" height="22" onclick="divData_divDataBottom_btnCancel_onclick" right="btnSlipPub:10" width="100"/>
                  </Layout>
                </Layouts>
              </Div>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

var strTY_BUNYANG = "N";
var tmMerge = "";

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//

	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	this.fnSetCombo();
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 ************************************************************************/
this.fnSetButton = function() {
//  	this.FormBtns.Add.set_enable(false);
//  	this.FormBtns.Save.set_enable(false);
//  	this.FormBtns.Del.set_enable(false);
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btnIncomeHstCnfm = this.gfnFormButtonAdd("btnIncomeHstCnfm", "fnIncomeHstCnfm");  // 입금내역분류및확인
	this.btnIncomeMerge = this.gfnFormButtonAdd("btnIncomeMerge", "fnIncomeMerge");        // 입금내역병합
	this.btnMergeLstDtl = this.gfnFormButtonAdd("btnMergeLstDtl", "fnMergeLstDtl");        // 병합내역상세
	this.btnIncomeSlip = this.gfnFormButtonAdd("btnIncomeSlip", "fnIncomeSlip");           // 입금전표발행
	this.btnEzaClassPrcs = this.gfnFormButtonAdd("btnEzaClassPrcs", "fnEzaClassPrcs");     // 이자분류처리
	this.btnEzaSlipPrcs = this.gfnFormButtonAdd("btnEzaSlipPrcs", "fnEzaSlipPrcs");        // 이자전표처리
	this.btnCashDept = this.gfnFormButtonAdd("btnCashDept", "fnCashDept");                 // 처리부서변경
// 	this.btnIncomeSlipSrch = this.gfnFormButtonAdd("btnIncomeSlipSrch", "fnIncomeSlipSrch"); // 입금전표조회
// 	this.btnNonNmSlip = this.gfnFormButtonAdd("btnNonNmSlip", "fnNonNmSlip");	             // 불명전표조회
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.ccfCD_CORP  = this.divSearch.form.ccfCD_CORP;				// 법인코드
	this.cboYN_CONFIRM = this.divSearch.form.cboYN_CONFIRM;			// 확인구분
	this.ccfCD_DEPT_BH = this.divSearch.form.ccfCD_DEPT_BH;			// 처리부서
	this.tclDT_TRADE_FR = this.divSearch.form.tclDT_TRADE_FR;		// 거래일자(from)
	this.tclDT_TRADE_TO = this.divSearch.form.tclDT_TRADE_TO;		// 거래일자(to)
	this.cfBANK = this.divSearch.form.cfBANK;						// 은행코드
	this.cfNO_ACCOUNT = this.divSearch.form.cfNO_ACCOUNT;			// 계좌번호
	this.ccboYN_SLIP = this.divSearch.form.ccboYN_SLIP;			    // 전표발행
	this.dxGrid = this.divData.form.divDataTop.form.objGrid;		// 그리드1
	this.dxGridSub = this.divData.form.divDataBottom.form.objGridSub;	// 그리드2
	this.grSearch = this.FormInfo.GR_SEARCH;						// 권한?
	this.cdGroup = this.gfnIsNull(this.AuthClient.CD_GROUP) ? "" : this.AuthClient.CD_GROUP;			// 그룹코드
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	this.ccfCD_DEPT_BH.CodeFindName = "DFX_CFACNTUNIT_GROUP";	// 처리부서
	
	this.gfnGridInit(this.dxGrid, this.dsList, "DF", "DFL_CONFIRMCASHINLIST");		
	this.gfnGridInit(this.dxGridSub, this.dsListSub, "DF", "DFL_INCOMEDTL");
	this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforuserDataSetParam";
	this.dxGrid.AfterCDTextChanged = "fnGrid_AfterCDTextChanged";			

	this.dxGrid.set_selecttype("cell");	
	this.dxGrid.addEventHandler("onselectchanged", this.fnGrid_RowCellChanged, this);
	this.dsList.addEventHandler("canrowposchange", this.dsList_canrowposchange, this);

	var today = this.gfnGetDate();
	this.dsSearch.setColumn(0, "DT_TRADE_FR", this.gfnAddDate(today, -1));
	this.dsSearch.setColumn(0, "DT_TRADE_TO", today);
	
	this.ccfCD_CORP.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.ccfCD_DEPT_BH.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.cfBANK.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.cfNO_ACCOUNT.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	
	this.ccfCD_CORP.AfterCDTextChanged = "fnAfterCDTextChanged";
	this.ccfCD_DEPT_BH.AfterCDTextChanged = "fnAfterCDTextChanged";
	this.cfBANK.AfterCDTextChanged = "fnAfterCDTextChanged";
	this.cfNO_ACCOUNT.AfterCDTextChanged = "fnAfterCDTextChanged";
	
	
	// 법인코드 init
	if (this.gfnIsNull(this.ccfCD_CORP.form.CDTextBox.value)) {
		this.ccfCD_CORP.form.DSTextBox.set_value(this.AuthClient.DS_CORP); 
		this.ccfCD_CORP.form.CDTextBox.set_value(this.AuthClient.CD_CORP);	
	}	
	
	
	// 권한체크
// 	if (nexacro.toNumber(this.grSearch) >= 2) {
// 		this.ccfCD_CORP.set_enable(false);
// 		strTY_BUNYANG = "Y";
// 	}
	
	//this.grSearch = "7";
	if (nexacro.toNumber(this.grSearch) >= 7) {
		//this.divSearch.form.sta00.set_textDecoration("underline");
		this.divSearch.form.sta00.set_cssclass("sta_WF_SchLabelE");
	}

	//this.divData.form.divDataBottom.set_visible(false);
	//this.divData.form.divSplitter.set_top(718);
	// this.divData.form.resetScroll();		
}

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {

	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_CORP", "string");
	this.dsSelect.addColumn("YN_CONFIRM", "string");
	this.dsSelect.addColumn("DT_TRADE_FR", "string");
	this.dsSelect.addColumn("DT_TRADE_TO", "string");
	this.dsSelect.addColumn("CD_BANK", "string");
	this.dsSelect.addColumn("NO_ACCOUNT", "string"); 
	this.dsSelect.addColumn("CD_DEPT", "string");

	this.dsSelect2 = new Dataset();
	this.dsSelect2.addColumn("CD_CORP", "string");
	this.dsSelect2.addColumn("YN_CONFIRM", "string");
	this.dsSelect2.addColumn("DT_TRADE_FR", "string");
	this.dsSelect2.addColumn("DT_TRADE_TO", "string");
	this.dsSelect2.addColumn("CD_BANK", "string");
	this.dsSelect2.addColumn("NO_ACCOUNT", "string"); 
	this.dsSelect2.addColumn("CD_DEPT", "string");
	this.dsSelect2.addColumn("YN_SLIP", "string");

	this.dsInsert2 = new Dataset();
	this.dsInsert2.addColumn("CD_CORP", "string");
	this.dsInsert2.addColumn("DT_TRADE", "string");
	this.dsInsert2.addColumn("CD_BANK", "string");
	this.dsInsert2.addColumn("TY_CASH", "string");
	this.dsInsert2.addColumn("NO_ACCOUNT", "string");
	this.dsInsert2.addColumn("NO_TRADE", "bigdecimal");
	this.dsInsert2.addColumn("DT_SLIP", "string");
	this.dsInsert2.addColumn("TY_TRADE", "string");
	this.dsInsert2.addColumn("AM_TRADE", "bigdecimal");
	this.dsInsert2.addColumn("CD_CURR", "string");
	this.dsInsert2.addColumn("AM_FEE", "bigdecimal");
	this.dsInsert2.addColumn("DT_EXPIRY", "string");
	this.dsInsert2.addColumn("CD_DEPT_BH", "string");
	this.dsInsert2.addColumn("CD_DEPT_BE", "string");
	this.dsInsert2.addColumn("TY_VENDOR", "string");
	this.dsInsert2.addColumn("CD_VENDOR", "string");
	this.dsInsert2.addColumn("CD_SUJI", "string");
	this.dsInsert2.addColumn("DT_FROM", "string");
	this.dsInsert2.addColumn("DT_TO", "string");
	this.dsInsert2.addColumn("AM_CORP", "bigdecimal");
	this.dsInsert2.addColumn("AM_JUMIN", "bigdecimal");
	this.dsInsert2.addColumn("NO_TRADEACCOUNT", "string");
	this.dsInsert2.addColumn("TY_TRADEGUBUN", "string");
	this.dsInsert2.addColumn("CD_TRADEBANK", "string");
	this.dsInsert2.addColumn("CD_TRADEINBRANCH", "string");
	this.dsInsert2.addColumn("RM_BIGO", "string");
	this.dsInsert2.addColumn("ID_USER", "string");

	this.dsUpdate2 = new Dataset();
	this.dsUpdate2.addColumn("CD_CORP", "string");
	this.dsUpdate2.addColumn("DT_TRADE", "string");
	this.dsUpdate2.addColumn("CD_BANK", "string");
	this.dsUpdate2.addColumn("TY_CASH", "string");
	this.dsUpdate2.addColumn("NO_ACCOUNT", "string");
	this.dsUpdate2.addColumn("NO_TRADE", "bigdecimal");
	this.dsUpdate2.addColumn("DT_SLIP", "string");
	this.dsUpdate2.addColumn("TY_TRADE", "string");
	this.dsUpdate2.addColumn("AM_TRADE", "bigdecimal");
	this.dsUpdate2.addColumn("AM_FEE", "bigdecimal");
	this.dsUpdate2.addColumn("DT_EXPIRY", "string");
	this.dsUpdate2.addColumn("CD_DEPT_BH", "string");
	this.dsUpdate2.addColumn("CD_DEPT_BE", "string");
	this.dsUpdate2.addColumn("TY_VENDOR", "string");
	this.dsUpdate2.addColumn("CD_VENDOR", "string");
	this.dsUpdate2.addColumn("CD_SUJI", "string");
	this.dsUpdate2.addColumn("DT_FROM", "string");
	this.dsUpdate2.addColumn("DT_TO", "string");
	this.dsUpdate2.addColumn("AM_CORP", "bigdecimal");
	this.dsUpdate2.addColumn("AM_JUMIN", "bigdecimal");
	this.dsUpdate2.addColumn("NO_TRADEACCOUNT", "string");
	this.dsUpdate2.addColumn("TY_TRADEGUBUN", "string");
	this.dsUpdate2.addColumn("CD_TRADEBANK", "string");
	this.dsUpdate2.addColumn("CD_TRADEINBRANCH", "string");
	this.dsUpdate2.addColumn("RM_BIGO", "string");
	this.dsUpdate2.addColumn("NO_INCONFIRM", "string");
	this.dsUpdate2.addColumn("ID_USER", "string");

	this.dsDelete2 = new Dataset();
	this.dsDelete2.addColumn("NO_INCONFIRM", "string");
	this.dsDelete2.addColumn("ID_USER", "string");
	
	this.dsMerge = new Dataset();
	this.dsMerge.addColumn("DT_TRADE", "string");
	this.dsMerge.addColumn("CD_BANK", "string");
	this.dsMerge.addColumn("TY_CASH", "string");
	this.dsMerge.addColumn("NO_ACCOUNT", "string");
	this.dsMerge.addColumn("NO_TRADE", "bigdecimal");
	this.dsMerge.addColumn("CD_CORP", "string");
	this.dsMerge.addColumn("TM_MERGE", "string");
	this.dsMerge.addColumn("YN_MERGE", "string");
	this.dsMerge.addColumn("ID_USER", "string");
	
	this.dsCashDept = new Dataset();
	this.dsCashDept.addColumn("CD_CORP", "string");
	this.dsCashDept.addColumn("DT_TRADE", "string");
	this.dsCashDept.addColumn("CD_BANK", "string");
	this.dsCashDept.addColumn("TY_CASH", "string");
	this.dsCashDept.addColumn("NO_ACCOUNT", "string");
	this.dsCashDept.addColumn("NO_TRADE", "string");
	this.dsCashDept.addColumn("CD_DEPT", "string");	
	this.dsCashDept.addColumn("ID_USER", "string");
		
	this.dsAutoSlip = new Dataset();
	this.dsAutoSlip.addColumn("NO_INCONFIRM", "string");
	this.dsAutoSlip.addColumn("TM_SLIP", "string");
	this.dsAutoSlip.addColumn("YN_SLIP", "string");
	this.dsAutoSlip.addColumn("CD_CORP", "string");
	this.dsAutoSlip.addColumn("ID_USER", "string");

	this.dsAutoSlipx = new Dataset();
	this.dsAutoSlipx.addColumn("NO_SLIP", "string");
	this.dsAutoSlipx.addColumn("ID_USER", "string");
}

/************************************************************************
 * 버튼 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;

	this.gfnGridBeforeSelect(this.dxGrid);
	this.gfnGridBeforeSelect(this.dxGridSub);
	
	this.dsList.clearData();
	this.dsListSub.clearData();

	this.dsSelect.clearData();
	var nrow = this.dsSelect.addRow();
	this.dsSelect.setColumn(nrow, "DT_TRADE_TO", this.dsSearch.getColumn(0, "DT_TRADE_TO"));
	this.dsSelect.setColumn(nrow, "YN_CONFIRM", this.dsSearch.getColumn(0, "YN_CONFIRM"));
	this.dsSelect.setColumn(nrow, "CD_BANK", this.dsSearch.getColumn(0, "CD_BANK"));
	this.dsSelect.setColumn(nrow, "NO_ACCOUNT", this.dsSearch.getColumn(0, "NO_ACCOUNT"));
	this.dsSelect.setColumn(nrow, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
	this.dsSelect.setColumn(nrow, "DT_TRADE_FR", this.dsSearch.getColumn(0, "DT_TRADE_FR"));
	this.dsSelect.setColumn(nrow, "CD_DEPT", this.dsSearch.getColumn(0, "CD_DEPT_BH"));
	
	this.dsSelect2.clearData();
	var nrow = this.dsSelect2.addRow();
	this.dsSelect2.setColumn(nrow, "DT_TRADE_TO", this.dsSearch.getColumn(0, "DT_TRADE_TO"));
	this.dsSelect2.setColumn(nrow, "YN_CONFIRM", this.dsSearch.getColumn(0, "YN_CONFIRM"));
	this.dsSelect2.setColumn(nrow, "CD_BANK", this.dsSearch.getColumn(0, "CD_BANK"));
	this.dsSelect2.setColumn(nrow, "NO_ACCOUNT", this.dsSearch.getColumn(0, "NO_ACCOUNT"));
	this.dsSelect2.setColumn(nrow, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
	this.dsSelect2.setColumn(nrow, "DT_TRADE_FR", this.dsSearch.getColumn(0, "DT_TRADE_FR"));
	this.dsSelect2.setColumn(nrow, "CD_DEPT", this.dsSearch.getColumn(0, "CD_DEPT_BH"));
	this.dsSelect2.setColumn(nrow, "YN_SLIP", this.dsSearch.getColumn(0, "YN_SLIP"));

	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect select2=dsSelect2";
	var outData     = "dsList=select0 dsListSub=select20";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); 	// 통신방법 정의 [생략가능]
	
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	var nRow = this.gfnGridAdd(this.dxGridSub);
}

/*
 *	삭제 버튼
 */ 
this.fnDel = function() {
	this.gfnGridDel(this.dxGridSub);
}

/*
 *	저장 버튼
 */ 
this.fnSave = function() {
	if (!this.gfnGridValidate(this.dxGridSub)) return;

	this.dxGridSub.updateToDataset();
	
	this.dsInsert2.clearData();
	this.dsUpdate2.clearData();
	this.dsDelete2.clearData();
	
	for (var i = 0; i < this.dsListSub.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsListSub, i);
		switch(flag) {
// 			case "I":
// 				var nrow = this.dsInsert2.addRow();
// 				this.dsInsert2.setColumn(nrow, "CD_CORP", this.dsListSub.getColumn(i, "CD_CORP"));
// 				this.dsInsert2.setColumn(nrow, "DT_TRADE", this.dsListSub.getColumn(i, "DT_TRADE"));
// 				this.dsInsert2.setColumn(nrow, "CD_BANK", this.dsListSub.getColumn(i, "CD_BANK"));
// 				this.dsInsert2.setColumn(nrow, "TY_CASH", this.dsListSub.getColumn(i, "TY_CASH"));
// 				this.dsInsert2.setColumn(nrow, "NO_ACCOUNT", this.dsListSub.getColumn(i, "NO_ACCOUNT"));
// 				this.dsInsert2.setColumn(nrow, "NO_TRADE", this.dsListSub.getColumn(i, "NO_TRADE"));
// 				this.dsInsert2.setColumn(nrow, "DT_SLIP", this.dsListSub.getColumn(i, "DT_SLIP"));
// 				this.dsInsert2.setColumn(nrow, "TY_TRADE", this.dsListSub.getColumn(i, "TY_TRADE"));
// 				this.dsInsert2.setColumn(nrow, "AM_TRADE", this.dsListSub.getColumn(i, "AM_TRADE"));
// 				this.dsInsert2.setColumn(nrow, "CD_CURR", this.dsListSub.getColumn(i, "CD_CURR"));
// 				this.dsInsert2.setColumn(nrow, "AM_FEE", this.dsListSub.getColumn(i, "AM_FEE"));
// 				this.dsInsert2.setColumn(nrow, "DT_EXPIRY", this.dsListSub.getColumn(i, "DT_EXPIRY"));
// 				this.dsInsert2.setColumn(nrow, "CD_DEPT_BH", this.dsListSub.getColumn(i, "CD_DEPT_BH"));
// 				this.dsInsert2.setColumn(nrow, "CD_DEPT_BE", this.dsListSub.getColumn(i, "CD_DEPT_BE"));
// 				this.dsInsert2.setColumn(nrow, "TY_VENDOR", this.dsListSub.getColumn(i, "TY_VENDOR"));
// 				this.dsInsert2.setColumn(nrow, "CD_VENDOR", this.dsListSub.getColumn(i, "CD_VENDOR"));
// 				this.dsInsert2.setColumn(nrow, "CD_SUJI", this.dsListSub.getColumn(i, "CD_SUJI"));
// 				this.dsInsert2.setColumn(nrow, "DT_FROM", this.dsListSub.getColumn(i, "DT_FROM"));
// 				this.dsInsert2.setColumn(nrow, "DT_TO", this.dsListSub.getColumn(i, "DT_TO"));
// 				this.dsInsert2.setColumn(nrow, "AM_CORP", this.dsListSub.getColumn(i, "AM_CORP"));
// 				this.dsInsert2.setColumn(nrow, "AM_LOCAL", this.dsListSub.getColumn(i, "AM_LOCAL"));
// 				this.dsInsert2.setColumn(nrow, "AM_JUMIN", this.dsListSub.getColumn(i, "AM_JUMIN"));
// 				this.dsInsert2.setColumn(nrow, "NO_TRADEACCOUNT", this.dsListSub.getColumn(i, "NO_TRADEACCOUNT"));
// 				this.dsInsert2.setColumn(nrow, "TY_TRADEGUBUN", this.dsListSub.getColumn(i, "TY_TRADEGUBUN"));
// 				this.dsInsert2.setColumn(nrow, "CD_TRADEBANK", this.dsListSub.getColumn(i, "CD_TRADEBANK"));
// 				this.dsInsert2.setColumn(nrow, "CD_TRADEINBRANCH", this.dsListSub.getColumn(i, "CD_TRADEINBRANCH"));
// 				this.dsInsert2.setColumn(nrow, "RM_BIGO", this.dsListSub.getColumn(i, "RM_BIGO"));
// 				this.dsInsert2.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);	
// 				break;
// 				
// 			case "U":
// 				var nrow = this.dsUpdate2.addRow();
// 				this.dsUpdate2.setColumn(nrow, "CD_CORP", this.dsListSub.getColumn(i, "CD_CORP"));
// 				this.dsUpdate2.setColumn(nrow, "DT_TRADE", this.dsListSub.getColumn(i, "DT_TRADE"));
// 				this.dsUpdate2.setColumn(nrow, "CD_BANK", this.dsListSub.getColumn(i, "CD_BANK"));
// 				this.dsUpdate2.setColumn(nrow, "TY_CASH", this.dsListSub.getColumn(i, "TY_CASH"));
// 				this.dsUpdate2.setColumn(nrow, "NO_ACCOUNT", this.dsListSub.getColumn(i, "NO_ACCOUNT"));
// 				this.dsUpdate2.setColumn(nrow, "NO_TRADE", this.dsListSub.getColumn(i, "NO_TRADE"));
// 				this.dsUpdate2.setColumn(nrow, "DT_SLIP", this.dsListSub.getColumn(i, "DT_SLIP"));
// 				this.dsUpdate2.setColumn(nrow, "TY_TRADE", this.dsListSub.getColumn(i, "TY_TRADE"));
// 				this.dsUpdate2.setColumn(nrow, "AM_TRADE", this.dsListSub.getColumn(i, "AM_TRADE"));
// 				this.dsUpdate2.setColumn(nrow, "AM_FEE", this.dsListSub.getColumn(i, "AM_FEE"));
// 				this.dsUpdate2.setColumn(nrow, "DT_EXPIRY", this.dsListSub.getColumn(i, "DT_EXPIRY"));
// 				this.dsUpdate2.setColumn(nrow, "CD_DEPT_BH", this.dsListSub.getColumn(i, "CD_DEPT_BH"));
// 				this.dsUpdate2.setColumn(nrow, "CD_DEPT_BE", this.dsListSub.getColumn(i, "CD_DEPT_BE"));
// 				this.dsUpdate2.setColumn(nrow, "TY_VENDOR", this.dsListSub.getColumn(i, "TY_VENDOR"));
// 				this.dsUpdate2.setColumn(nrow, "CD_VENDOR", this.dsListSub.getColumn(i, "CD_VENDOR"));
// 				this.dsUpdate2.setColumn(nrow, "CD_SUJI", this.dsListSub.getColumn(i, "CD_SUJI"));
// 				this.dsUpdate2.setColumn(nrow, "DT_FROM", this.dsListSub.getColumn(i, "DT_FROM"));
// 				this.dsUpdate2.setColumn(nrow, "DT_TO", this.dsListSub.getColumn(i, "DT_TO"));
// 				this.dsUpdate2.setColumn(nrow, "AM_CORP", this.dsListSub.getColumn(i, "AM_CORP"));
// 				this.dsUpdate2.setColumn(nrow, "AM_LOCAL", this.dsListSub.getColumn(i, "AM_LOCAL"));
// 				this.dsUpdate2.setColumn(nrow, "AM_JUMIN", this.dsListSub.getColumn(i, "AM_JUMIN"));
// 				this.dsUpdate2.setColumn(nrow, "NO_TRADEACCOUNT", this.dsListSub.getColumn(i, "NO_TRADEACCOUNT"));
// 				this.dsUpdate2.setColumn(nrow, "TY_TRADEGUBUN", this.dsListSub.getColumn(i, "TY_TRADEGUBUN"));
// 				this.dsUpdate2.setColumn(nrow, "CD_TRADEBANK", this.dsListSub.getColumn(i, "CD_TRADEBANK"));
// 				this.dsUpdate2.setColumn(nrow, "CD_TRADEINBRANCH", this.dsListSub.getColumn(i, "CD_TRADEINBRANCH"));
// 				this.dsUpdate2.setColumn(nrow, "RM_BIGO", this.dsListSub.getColumn(i, "RM_BIGO"));
// 				this.dsUpdate2.setColumn(nrow, "NO_INCONFIRM", this.dsListSub.getColumn(i, "NO_INCONFIRM"));
// 				this.dsUpdate2.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);	
// 				break;
				
			case "D":
				var nrow = this.dsDelete2.addRow();
				this.dsDelete2.setColumn(nrow, "NO_INCONFIRM", this.dsListSub.getColumn(i, "NO_INCONFIRM"));
				this.dsDelete2.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);	
				break;
		}
	}
	
	if (this.dsInsert2.rowcount == 0 && this.dsUpdate2.rowcount == 0 && this.dsDelete2.rowcount == 0) return;
	
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "insert2=dsInsert2 update2=dsUpdate2 delete2=dsDelete2";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); 	// 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */ 
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}
 
/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {
	if ( this.gfnIsNull(this.ccfCD_CORP.form.CDTextBox.value) ) {
		this.gfnAlert("법인코드가 입력되지 않았습니다.");
		this.ccfCD_CORP.form.CDTextBox.setFocus();
		return false;
	}
	
	if (nexacro.toNumber(this.grSearch) >= 7) {
		if ( this.gfnIsNull(this.ccfCD_DEPT_BH.form.CDTextBox.value) ) {
			this.gfnAlert("처리부서가 입력되지 않았습니다.");
			this.ccfCD_DEPT_BH.form.CDTextBox.setFocus();
			return false;
		}
	}

	if (this.gfnIsNull(this.tclDT_TRADE_FR.value)) {
		this.gfnAlert("거래일자(FROM)을 입력 하세요.");
		this.tclDT_TRADE_FR.setFocus();
		return false;
	}
	
	if (this.gfnIsNull(this.tclDT_TRADE_TO.value)) {
		this.gfnAlert("거래일자(TO)을 입력 하세요.");
		this.tclDT_TRADE_TO.setFocus();
		return false;
	}

	if ( !this.gfnIsNull(this.tclDT_TRADE_FR.value) && !this.gfnIsNull(this.tclDT_TRADE_TO.value) ) {
		if ( this.tclDT_TRADE_FR.value > this.tclDT_TRADE_TO.value ) {
			this.gfnAlert("거래일자가 잘못 입력 되었습니다..");
			this.tclDT_TRADE_FR.setFocus();
			return false;
		}
	}
	
	// 확인구분 : 미확인
// 	if ( this.cboYN_CONFIRM.value == "N" ) {
// 		if ( this.gfnIsNull(this.tclDT_TRADE_FR.value) || this.gfnIsNull(this.tclDT_TRADE_TO.value) ) {
// 			this.gfnAlert("거래일자가 입력되지 않았습니다.");
// 			this.tclDT_TRADE_FR.setFocus();
// 			return false;
// 		}
// 	}
	
	return true;
};
/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);
		
		if (this.dsList.getRowCount() > 0) {
			this.btnIncomeHstCnfm.set_enable(true);
		} else {
			this.btnIncomeHstCnfm.set_enable(false);
		}
	} else if (svcID == "combo") {
		//  조회조건(완료여부)
		var iRow = this.dsYN_CONFIRM.insertRow(0);
		this.dsYN_CONFIRM.setColumn(iRow, "CD_CODE", "");
		this.dsYN_CONFIRM.setColumn(iRow, "DS_CODE", "전체");
		//this.cboYN_CONFIRM.set_index(0);
		this.dsSearch.setColumn(0, "YN_CONFIRM", "N");		

		var iRow = this.dsYN_SLIP.insertRow(0);
		this.dsYN_SLIP.setColumn(iRow, "CD_CODE", "");
		this.dsYN_SLIP.setColumn(iRow, "DS_CODE", "전체");
		this.ccboYN_SLIP.set_index(2);
		
	} else if (svcID == "save") {
		this.FormBtns.Select.click();
	} else if (svcID == "mergeN") {
		if (errorCode == 0) {
			this.fnMerge("Y");
		}
	} else if (svcID == "mergeY") {
		//this.gfnAlert("정상적으로 처리되었습니다.", "", svcID, "fnMsgCallback");
		this.FormBtns.Select.click();
	} else if( svcID == "cashDept" ) {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	} else if (svcID == "autoslipN") {
		if (errorCode == 0) {
			this.fnAutoSlip("Y");
		}
		
	} else if (svcID == "autoslipY") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
}

this.fnPopCallBack = function(svcID, val) {
	if (val) {
		var json = JSON.parse(val);
		
		// 병합내역상세
		if (svcID.indexOf("DFL_CASHINLISTDTL") > -1) {
			this.FormBtns.Select.click();
		}
		
		// 이자전표발행
		if (svcID.indexOf("DFL_INCOMEEZA") > -1) {
			//this.FormBtns.Select.click();
		}
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow)  {
	var cdCorp = this.gfnIsNull(this.ccfCD_CORP.form.CDTextBox.value) ? "" : this.ccfCD_CORP.form.CDTextBox.value;
	
	// 법인코드
	if (id == "ccfCD_CORP") {
		dsUserParam.setColumn(nrow, "CD_GROUP", this.cdGroup);
	}
	
	if (id == "ccfCD_DEPT_BH") {
		dsUserParam.setColumn(nrow, "CD_GROUP", "");	//this.cdGroup);
		dsUserParam.setColumn(nrow, "CD_CORP", cdCorp);	
		dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
		dsUserParam.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
		dsUserParam.setColumn(nrow, "CD_DEPT", this.AuthClient.CD_DEPT);
	}

	// 은행코드
	if (id == "cfBANK") {
		
	}
	
	if (id == "cfNO_ACCOUNT") {
		dsUserParam.setColumn(nrow, "CD_CORP", cdCorp);		
	}
	return true;
}

this.fnAfterCDTextChanged = function(id) {
	this.fnSearchInit();
} 


this.fnGrid_BeforuserDataSetParam = function(id, dsUserParam, nrow) {
	var cdCorp = this.gfnIsNull(this.dsList.getColumn(this.dsList.rowposition, "CD_CORP")) ? "" : this.dsList.getColumn(this.dsList.rowposition, "CD_CORP");
	
	if (id == "DFX_CFACNTUNIT") {
		dsUserParam.setColumn(nrow, "CD_GROUP", this.cdGroup);
		dsUserParam.setColumn(nrow, "CD_CORP", this.gfnIsNull(cdCorp) ? this.dsSearch.getColumn(0, "CD_CORP") : cdCorp);	
	}
	
	if (id == "DFX_CFACNTUNIT1") {
		dsUserParam.setColumn(nrow, "CD_GROUP", this.cdGroup);
		dsUserParam.setColumn(nrow, "CD_CORP", this.gfnIsNull(cdCorp) ? this.dsSearch.getColumn(0, "CD_CORP") : cdCorp);	
	}
	
	if (id == "DFX_CFSUJICODE") {
		dsUserParam.setColumn(nrow, "TY_INOUT", "I");	
		dsUserParam.setColumn(nrow, "YN_USE", "Y");		
	}
	
	if (id == "DFX_CFVENDOR") {
		dsUserParam.setColumn(nrow, "TY_VENDOR1", "전체");	
		dsUserParam.setColumn(nrow, "CD_CORP", this.gfnIsNull(cdCorp) ? this.dsSearch.getColumn(0, "CD_CORP") : cdCorp);	
	}
	
	if (id == "DFX_CFNO_ACCOUNT") {
		dsUserParam.setColumn(nrow, "GUBUN", "MAIN");	
		dsUserParam.setColumn(nrow, "CD_CORP", cdCorp);	
	}	
	
	return true;
}

this.fnGrid_AfterCDTextChanged = function(id, codeFindData) {
	var arr = codeFindData;

	if (id == "DFX_CFACNTUNIT") {
	}
	
	if (id == "DFX_CFSUJICODE") {
	}
	
	if (id == "DFX_CFVENDOR") {
	}	
	
	if (id == "DFX_CFNO_ACCOUNT") {
		if (arr.length > 0) {
// 			trace("NO_ACCOUNT :: " + arr[0]["NO_ACCOUNT"]);
// 			trace("TY_GUBUN :: " + arr[0]["TY_GUBUN"]);
// 			trace("CD_BANK :: " + arr[0]["CD_BANK"]);
// 			trace("DS_BANK :: " + arr[0]["DS_BANK"]);
// 			trace("CD_MANAGEBANK :: " + arr[0]["CD_MANAGEBANK"]);
// 			trace("DS_MANAGEBANK :: " + arr[0]["DS_MANAGEBANK"]);
			
			this.dsList.setColumn(this.dsList.rowposition, "NO_TRADEACCOUNT", arr[0]["NO_ACCOUNT"]);
			this.dsList.setColumn(this.dsList.rowposition, "TY_TRADEGUBUN", arr[0]["TY_GUBUN"]);
			this.dsList.setColumn(this.dsList.rowposition, "CD_TRADEBANK", arr[0]["CD_BANK"]);
			this.dsList.setColumn(this.dsList.rowposition, "DS_TRADEBANK", arr[0]["DS_BANK"]);
			this.dsList.setColumn(this.dsList.rowposition, "CD_TRADEINBRANCH", arr[0]["CD_MANAGEBANK"]);
			this.dsList.setColumn(this.dsList.rowposition, "DS_TRADEINBRANCH", arr[0]["DS_MANAGEBANK"]);
		}
	}
};
/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
this.fnGrid_RowCellChanged = function(obj:nexacro.Grid,e:nexacro.GridSelectEventInfo)
{
    if ((obj.oldrow > -1 && obj.oldrow == e.row)
		|| (obj.oldrow == -1 && e.oldrow != e.row)) {
		obj.oldrow = -1;
	}
};

this.dsList_canrowposchange = function(obj:nexacro.NormalDataset,e:nexacro.DSRowPosChangeEventInfo) {
// 	var can_rowchange = true;
// 	for (var i = 0; i < this.dsListSub.rowcount; i++) {
// 		var flag = this.gfnGetFlag(this.dsListSub, i);
// 		if (flag == "I" || flag == "U" || flag == "D") {
// 			can_rowchange = false;
// 			break;
// 		}
// 	}
// 	if(!can_rowchange) {
// 		this._row = e.newrow;
// 		this.gfnConfirm("변경된 데이터가 있습니다.\r\n계속 진행하시겠습니까?", "dsList_canrowposchange_callback");
// 	}
// 	return can_rowchange;
}

this.dsList_canrowposchange_callback = function(strId, val) 
{
// 	if(val == true) {
// 		this.dsList.set_enableevent(false);
// 		this.dsList.set_rowposition(this._row);
// 		this.dsList.set_enableevent(true);
// 	}	
}

/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.fnSearchInit = function(obj,e) {
	if(e == null || (e.pretext != e.posttext)) {
		this.gfnSetFormStatus(this);
		this.gfnGridClear(this.dxGrid);
		this.gfnGridClear(this.dxGridSub);
	}
}

this.fnSetCombo = function() {
	
	this.dsCombo = new Dataset();
	this.dsCombo.addColumn("CD_SYSTEM", "string");
	this.dsCombo.addColumn("CD_TYPE", "string");
	
	// 확인구분
	this.dsCombo.addRow();
	this.dsCombo.setColumn(0, "CD_SYSTEM", "DF");
	this.dsCombo.setColumn(0, "CD_TYPE", "Z1");

	this.dsCombo.addRow();
	this.dsCombo.setColumn(1, "CD_SYSTEM", "DF");
	this.dsCombo.setColumn(1, "CD_TYPE", "Z1");
	
	var strSvcId    = "combo";
	var strSvcType  = "select";
	var inProc		= "_dsProc";
	var inData      = "combo=dsCombo";
	var outData     = "dsYN_CONFIRM=combo0 dsYN_SLIP=combo1";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
};


this.divData_ondragmove = function(obj:nexacro.Div,e:nexacro.DragEventInfo)
{
	//trace(e.clienty);
	if(e.userdata == "splitter") {
		this.divData.form.divSplitter.set_top(e.clienty);
		this.divData.form.resetScroll();	
	}
};

this.divData_divSplitter_ondrag = function(obj:nexacro.Div,e:nexacro.DragEventInfo)
{
	e.set_userdata("splitter");
	return true;
};


this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if ( e.oldvalue != e.newvalue ) {
		this.gfnSetFormStatus(this);
		this.gfnGridClear(this.dxGrid);
		this.gfnGridClear(this.dxGridSub);
	}
};

this.dsList_onrowposchanged = function(obj:nexacro.NormalDataset,e:nexacro.DSRowPosChangeEventInfo)
{
	if (obj.getColumn(e.newrow, "YN_SUMMERGE") == "Y") {
		this.btnMergeLstDtl.set_enable(true);
	} else {
		this.btnMergeLstDtl.set_enable(false);
	}
	
// 	if (obj.getColumn(e.newrow, "YN_CONFIRM") == "N") {
// 		if (this.cboYN_CONFIRM.value == "N") {
// 			this.btnIncomeMerge.set_enable(true);
// 		}
// 	} else {
// 		this.btnIncomeMerge.set_enable(false);
// 	}
	
};

this.divSearch_cboYN_CONFIRM_onitemchanged = function(obj:nexacro.Combo,e:nexacro.ItemChangeEventInfo)
{
	//trace(e.userdata);
	if (this.gfnIsNull(e.postvalue) || e.postvalue == "Y") {
		//this.divData.form.divDataBottom.set_visible(true);
		this.divData.form.divSplitter.set_top(364);
		this.divData.form.resetScroll();	
	} 
	
	if (e.postvalue == "N") {
		//this.divData.form.divDataBottom.set_visible(false);
		this.divData.form.divSplitter.set_top(718);
		this.divData.form.resetScroll();	
	}
};

// 입금내역분류및확인
this.fnIncomeHstCnfm = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	
	this.fnComInsert(this.btnIncomeHstCnfm.text, 1);
}

this.fnComInsert = function(btnName, gubun) {

	var chkRow = this.dsList.findRow("CHK",1);
	if (chkRow == -1) {
		this.gfnAlert(btnName + " 처리할 데이터를 체크 하세요.");
		return false;
	}
	
	this.dsInsert2.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		if (this.dsList.getColumn(i, "CHK") == 1) {
			var nrow = this.dsInsert2.addRow();
			this.dsInsert2.setColumn(nrow, "CD_CORP", this.dsList.getColumn(i, "CD_CORP"));
			this.dsInsert2.setColumn(nrow, "DT_TRADE", this.dsList.getColumn(i, "DT_TRADE"));
			this.dsInsert2.setColumn(nrow, "CD_BANK", this.dsList.getColumn(i, "CD_BANK"));
			this.dsInsert2.setColumn(nrow, "TY_CASH", this.dsList.getColumn(i, "TY_CASH"));
			this.dsInsert2.setColumn(nrow, "NO_ACCOUNT", this.dsList.getColumn(i, "NO_ACCOUNT"));
			this.dsInsert2.setColumn(nrow, "NO_TRADE", this.dsList.getColumn(i, "NO_TRADE"));
			this.dsInsert2.setColumn(nrow, "DT_SLIP", this.dsList.getColumn(i, "DT_SLIP"));
			if (gubun == 1) {
				this.dsInsert2.setColumn(nrow, "TY_TRADE", this.dsList.getColumn(i, "TY_TRADE"));
			}
			if (gubun == 2) {
				this.dsInsert2.setColumn(nrow, "TY_TRADE", "이자");
			}
			// 2019.10.10 AM_TRADE <- AM_CONFIRM 으로 요청.
			this.dsInsert2.setColumn(nrow, "AM_TRADE", this.dsList.getColumn(i, "AM_CONFIRM"));
			this.dsInsert2.setColumn(nrow, "AM_FEE", this.dsList.getColumn(i, "AM_FEE"));
			this.dsInsert2.setColumn(nrow, "DT_EXPIRY", this.dsList.getColumn(i, "DT_EXPIRY"));
			this.dsInsert2.setColumn(nrow, "CD_DEPT_BH", this.dsList.getColumn(i, "CD_DEPT_BH"));
			this.dsInsert2.setColumn(nrow, "CD_DEPT_BE", this.dsList.getColumn(i, "CD_DEPT_BE"));
			this.dsInsert2.setColumn(nrow, "TY_VENDOR", this.dsList.getColumn(i, "TY_VENDOR"));
			this.dsInsert2.setColumn(nrow, "CD_VENDOR", this.dsList.getColumn(i, "CD_VENDOR"));
			this.dsInsert2.setColumn(nrow, "CD_SUJI", this.dsList.getColumn(i, "CD_SUJI"));
			this.dsInsert2.setColumn(nrow, "DT_FROM", this.dsList.getColumn(i, "DT_FROM"));
			this.dsInsert2.setColumn(nrow, "DT_TO", this.dsList.getColumn(i, "DT_TO"));
			this.dsInsert2.setColumn(nrow, "AM_CORP", this.dsList.getColumn(i, "AM_CORP"));
			this.dsInsert2.setColumn(nrow, "AM_JUMIN", this.dsList.getColumn(i, "AM_JUMIN"));
			this.dsInsert2.setColumn(nrow, "NO_TRADEACCOUNT", this.dsList.getColumn(i, "NO_TRADEACCOUNT"));
			this.dsInsert2.setColumn(nrow, "TY_TRADEGUBUN", this.dsList.getColumn(i, "TY_TRADEGUBUN"));
			this.dsInsert2.setColumn(nrow, "CD_TRADEBANK", this.dsList.getColumn(i, "CD_TRADEBANK"));
			this.dsInsert2.setColumn(nrow, "CD_TRADEINBRANCH", this.dsList.getColumn(i, "CD_TRADEINBRANCH"));
			this.dsInsert2.setColumn(nrow, "RM_BIGO", this.dsList.getColumn(i, "RM_BIGO"));
			this.dsInsert2.setColumn(nrow, "CD_CURR", this.dsList.getColumn(i, "CD_CURR"));
			this.dsInsert2.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
		}
	}
	
	if (this.dsInsert2.rowcount == 0) return;
	
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "insert2=dsInsert2";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); 	// 통신방법 정의 [생략가능]
}

// 입금내역MERGE
this.fnIncomeMerge = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	this.fnMerge("N");
}

// 입금내역병합 (mergeYn:Y/N)
this.fnMerge = function(mergeYn) { 
	
	this.dsMerge.clearData();
	// 전표발행
	if (mergeYn == "N") {
	
		tmMerge = this.AuthClient.ID_USER + this.gfnGetDate("milli");
		
		for (var i=0; i < this.dsList.rowcount; i++) {
			if (this.dsList.getColumn(i, "CHK") == 1) {	
				var nrow = this.dsMerge.addRow();
				this.dsMerge.setColumn(nrow, "DT_TRADE", this.dsList.getColumn(i, "DT_TRADE"));
				this.dsMerge.setColumn(nrow, "CD_BANK", this.dsList.getColumn(i, "CD_BANK"));
				this.dsMerge.setColumn(nrow, "TY_CASH", this.dsList.getColumn(i, "TY_CASH"));
				this.dsMerge.setColumn(nrow, "NO_ACCOUNT", this.dsList.getColumn(i, "NO_ACCOUNT"));
				this.dsMerge.setColumn(nrow, "NO_TRADE", this.dsList.getColumn(i, "NO_TRADE"));
				this.dsMerge.setColumn(nrow, "CD_CORP", this.dsList.getColumn(i, "CD_CORP"));
				this.dsMerge.setColumn(nrow, "TM_MERGE", tmMerge);
				this.dsMerge.setColumn(nrow, "YN_MERGE", mergeYn);
				this.dsMerge.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);				
			}
		}	
	
	// 전표발행후처리
	} else {
		var nrow = this.dsMerge.addRow();
		this.dsMerge.setColumn(nrow, "TM_MERGE", tmMerge);
		this.dsMerge.setColumn(nrow, "YN_MERGE", mergeYn);
		this.dsMerge.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);		
	}
	
	if (this.dsMerge.rowcount == 0) return;

	var strSvcId    = "merge" + mergeYn;
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "merge=dsMerge";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); 	// 통신방법 정의 [생략가능]
}

// MERGE내역상세
this.fnMergeLstDtl = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	if (!this.gfnGridIsRow(this.dxGrid)) return;
	
	var nrow = this.dsList.rowposition;
		
	var param = {};
	param.DT_TRADE = this.dsList.getColumn(nrow, "DT_TRADE");
	param.CD_BANK = this.dsList.getColumn(nrow, "CD_BANK");
	param.DS_BANK = this.dsList.getColumn(nrow, "DS_BANK");
	param.TY_CASH = this.dsList.getColumn(nrow, "TY_CASH");
	param.NO_ACCOUNT = this.dsList.getColumn(nrow, "NO_ACCOUNT");
	param.NO_TRADE = this.dsList.getColumn(nrow, "NO_TRADE");
	param.CD_CORP = this.dsList.getColumn(nrow, "CD_CORP");
	param.DS_CORP = this.ccfCD_CORP.form.DSTextBox.value;
	

	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DFL_CASHINLISTDTL", "fnPopCallBack", param);	
}



// 입금전표발행
this.fnIncomeSlip = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	//if (!this.gfnGridIsRow(this.dxGrid)) return;
	
	var nrow = this.dsList.rowposition;
		
	var param = {};
	param.DT_TRADE_FR = this.dsSearch.getColumn(0, "DT_TRADE_FR");
	param.DT_TRADE_TO = this.dsSearch.getColumn(0, "DT_TRADE_TO");
	param.CD_CORP = this.dsSearch.getColumn(0, "CD_CORP");
	param.DS_CORP = this.ccfCD_CORP.form.DSTextBox.value;

	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DFL_INPUTAPPLYSUJIANDSLIP", "fnPopCallBack", param);	
}

// 이자분류처리
this.fnEzaClassPrcs = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	this.fnComInsert(this.btnEzaClassPrcs.text, 2);
}

// 이자전표처리
this.fnEzaSlipPrcs = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	/*if (!this.gfnGridIsRow(this.dxGrid)) return;*/
	
	var nrow = this.dsList.rowposition;
		
	var param = {};
	param.DT_TRADE_FR = this.dsSearch.getColumn(0, "DT_TRADE_FR");
	param.DT_TRADE_TO = this.dsSearch.getColumn(0, "DT_TRADE_TO");
	param.CD_CORP = this.dsSearch.getColumn(0, "CD_CORP");
	param.DS_CORP = this.ccfCD_CORP.form.DSTextBox.value;

	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DFL_INCOMEEZA", "fnPopCallBack", param);	
}


// 입금전표조회
this.fnIncomeSlipSrch = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	
	// 선택된 row가 있을 경우에만 팝업을 띄움
	if (!this.gfnGridIsRow(this.dxGridSub)) { return false; }
	// var chkRow = this.dsList.findRow("CHK", 1);
	var param = {};
	param.CD_TRADE = this.dsListSub.getColumn(this.dsListSub.rowposition, "NO_SLIP");
	param.IUD_FLAG = "S";
	param.strYN_JUNDO_START = "";

	// 화면 오픈. 
	// CD_MODULE은 보통 같은 모듈에서 호출하는 경우가 많으니 this.FormInfo.CD_MODULE 사용
	// 타 모듈 화면 호출시 지정할것.
	//trace("this.FormInfo.CD_MODULE :: " + this.FormInfo.CD_MODULE);
	this.gfnFormOpen("DHA", "DHA_ISSUESLIP", "fnPopCallBack", param);
	
}

// 불명전표조회
this.fnNonNmSlip = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	
	// 선택된 row가 있을 경우에만 팝업을 띄움
	if (!this.gfnGridIsRow(this.dxGridSub)) { return false; }
	// var chkRow = this.dsList.findRow("CHK", 1);
	var param = {};
	param.CD_TRADE = this.dsListSub.getColumn(this.dsListSub.rowposition, "NO_SLIP_GA");
	param.IUD_FLAG = "S";
	param.strYN_JUNDO_START = "";

	// 화면 오픈. 
	// CD_MODULE은 보통 같은 모듈에서 호출하는 경우가 많으니 this.FormInfo.CD_MODULE 사용
	// 타 모듈 화면 호출시 지정할것.
	//trace("this.FormInfo.CD_MODULE :: " + this.FormInfo.CD_MODULE);
	this.gfnFormOpen("DHA", "DHA_ISSUESLIP", "fnPopCallBack", param);
	
}

//처리부서변경
this.fnCashDept = function (obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	//if(!this.gfnGridIsRow(this.dxGrid)) return;
	var nCnt = this.dsList.findRow("CHK",1);
	if( nCnt == -1) { 
		this.gfnAlert("처리부서변경 할 행을 체크하세요.");
		return; 
	}
		
	var cdCorp = this.gfnIsNull(this.dsList.getColumn(this.dsList.rowposition, "CD_CORP")) ? "" : this.dsList.getColumn(this.dsList.rowposition, "CD_CORP");
	
	if(this.gfnIsNull(cdCorp)){
		this.gfnAlert("법인코드가 입력되지 않았습니다.");
		this.ccfCD_CORP.form.CDTextBox.setFocus();
		return false;
	}

	var param = {};
	param.P_CD_CORP = cdCorp;
	param.P_GR_SEARCH = this.FormInfo.GR_SEARCH;
	param.P_ID_USER = this.AuthClient.ID_USER;
	param.P_CD_DEPT = this.AuthClient.CD_DEPT;
	
	this.gfnFormOpenNonAuth(this.FormInfo.CD_MODULE, "DFL_CONFIRM_CASHDEPT",  "fnCashDeptCallback", param);
};

/*
 *	처리부서변경 Callback
 */
this.fnCashDeptCallback = function(strId, val) {
	
	if(val != ""){  // 취소가 아니면
		this.dsCashDept.clearData();
		
		for ( var i =0; i < this.dsList.rowcount; i++){
			if( this.dsList.getColumn(i, this.ucFlag) != "#" && this.dsList.getColumn(i,"CHK") == 1) {
				var nrow = this.dsCashDept.addRow();
				
				this.dsCashDept.setColumn(nrow, "CD_CORP", this.dsList.getColumn(i, "CD_CORP"));										
				this.dsCashDept.setColumn(nrow, "DT_TRADE", this.dsList.getColumn(i, "DT_TRADE"));	
				this.dsCashDept.setColumn(nrow, "CD_BANK", this.dsList.getColumn(i, "CD_BANK"));	
				this.dsCashDept.setColumn(nrow, "TY_CASH", this.dsList.getColumn(i, "TY_CASH"));	
				this.dsCashDept.setColumn(nrow, "NO_ACCOUNT", this.dsList.getColumn(i, "NO_ACCOUNT"));
				this.dsCashDept.setColumn(nrow, "NO_TRADE", this.dsList.getColumn(i, "NO_TRADE"));
				this.dsCashDept.setColumn(nrow, "CD_DEPT", val);
				this.dsCashDept.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);	
			}
		}
		if (this.dsCashDept.rowcount == 0) return;
		
		var strSvcId    = "cashDept";
		var strSvcType  = "save";
		var inProc		= "_dsProc";
		var inData      = "cashDept=dsCashDept";
		var outData     = "";
		var strArg      = "";
		var callBackFnc = "fnCallback";
		
		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
							strSvcType , 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
							callBackFnc); 	// 통신방법 정의 [생략가능]	
	}
};
this.divData_divDataBottom_btnCancel_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	var cnt = 0;
	for (var i = 0; i < this.dsListSub.rowcount; i++) {
		if (this.dsListSub.getColumn(i, "CHK") == 1) {
			this.dsListSub.setColumn(i, this.ucFlag, "D");
			cnt++;
		}
	}
	
	if (cnt == 0)
		return;
	
	this.gfnConfirm("입금내역분류 취소하시겠습니까?", "Cancel_Callback");
};

this.Cancel_Callback = function(strId, val) {
	if(val == true) {
		this.fnSave();
	}
}

this.divData_divDataBottom_btnIncomeSlipSrch2_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	// 선택된 row가 있을 경우에만 팝업을 띄움
	if (!this.gfnGridIsRow(this.dxGridSub)) { return false; }
	// var chkRow = this.dsList.findRow("CHK", 1);
	
	
	var NO_SLIP = this.dsListSub.getColumn(this.dsListSub.rowposition, "NO_SLIP");
	if(this.gfnIsNull(NO_SLIP)){
		return;
	}	
	
	var param = {};
	param.CD_TRADE = this.dsListSub.getColumn(this.dsListSub.rowposition, "NO_SLIP");
	param.IUD_FLAG = "S";
	param.strYN_JUNDO_START = "";

	// 화면 오픈. 
	// CD_MODULE은 보통 같은 모듈에서 호출하는 경우가 많으니 this.FormInfo.CD_MODULE 사용
	// 타 모듈 화면 호출시 지정할것.
	//trace("this.FormInfo.CD_MODULE :: " + this.FormInfo.CD_MODULE);
	this.gfnFormOpen("DHA", "DHA_ISSUESLIP", "fnPopCallBack", param);
};

this.divData_divDataBottom_btnNonNmSlip2_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	// 선택된 row가 있을 경우에만 팝업을 띄움
	if (!this.gfnGridIsRow(this.dxGridSub)) { return false; }
	// var chkRow = this.dsList.findRow("CHK", 1);
	
	var NO_SLIP_GA = this.dsListSub.getColumn(this.dsListSub.rowposition, "NO_SLIP_GA");
	if(this.gfnIsNull(NO_SLIP_GA)){
		return;
	}
	
	var param = {};
	param.CD_TRADE = this.dsListSub.getColumn(this.dsListSub.rowposition, "NO_SLIP_GA");
	param.IUD_FLAG = "S";
	param.strYN_JUNDO_START = "";

	// 화면 오픈. 
	// CD_MODULE은 보통 같은 모듈에서 호출하는 경우가 많으니 this.FormInfo.CD_MODULE 사용
	// 타 모듈 화면 호출시 지정할것.
	//trace("this.FormInfo.CD_MODULE :: " + this.FormInfo.CD_MODULE);
	this.gfnFormOpen("DHA", "DHA_ISSUESLIP", "fnPopCallBack", param);
};

// 전표발행
this.fnSlipPub = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	this.fnAutoSlip("N");
};

/*
 * 전표발행
 */
this.fnAutoSlip = function(slipYn) {

	this.dsAutoSlip.clearData();

	// 전표발행
	if (slipYn == "N") {

		tmMerge = this.AuthClient.ID_USER + this.gfnGetDate("milli");
		
		for (var i=0; i < this.dsListSub.rowcount; i++) {
			if (this.dsListSub.getColumn(i, "CHK") == 1) {	
				var nrow = this.dsAutoSlip.addRow();
				this.dsAutoSlip.setColumn(nrow, "NO_INCONFIRM", this.dsListSub.getColumn(i, "NO_INCONFIRM"));
				this.dsAutoSlip.setColumn(nrow, "TM_SLIP", tmMerge);
				this.dsAutoSlip.setColumn(nrow, "YN_SLIP", slipYn);
				this.dsAutoSlip.setColumn(nrow, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
				this.dsAutoSlip.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);				
			}
		}	
	
	// 전표발행후처리
	} else {
		var nrow = this.dsAutoSlip.addRow();
		this.dsAutoSlip.setColumn(nrow, "TM_SLIP", tmMerge);
		this.dsAutoSlip.setColumn(nrow, "YN_SLIP", slipYn);
		this.dsAutoSlip.setColumn(nrow, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
		this.dsAutoSlip.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);	
	}

	if (this.dsAutoSlip.rowcount == 0) return;

	var strSvcId    = "autoslip" + slipYn;
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "autoslip=dsAutoSlip";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); 	// 통신방법 정의 [생략가능]
}

// 전표취소
this.fnSlipCncl = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	if (!this.fnSlipValidation()) {
		return false;
	}
	
	this.gfnConfirm("전표취소 처리 하시겠습니까?","fnSlipCncl_callback");	
};

// 전표조회 및 전표취소 validation check
this.fnSlipValidation = function() {
	var chkCnt = this.dsListSub.getCaseCount("CHK == 1");
	
	if (chkCnt == 0) {
		return false;
	}
	
	for ( var i=0; i < this.dsListSub.rowcount; i++ ) {
		if ( this.dsListSub.getColumn(i, "CHK") == 1 ) {
			if (this.gfnIsNull(this.dsListSub.getColumn(i, "NO_SLIP_GA"))) {
				this.gfnAlert("발행된 전표가 없습니다.");
				return false;
			}
		}
	}
	
	return true;
}

this.fnSlipCncl_callback = function(strId, val) {
	
	if (val) {
		this.dsAutoSlipx.clearData();
		
		for (var i=0; i < this.dsListSub.rowcount; i++) {
			if (this.dsListSub.getColumn(i, "CHK") == 1) {
				var nrow = this.dsAutoSlipx.addRow();
				this.dsAutoSlipx.setColumn(nrow, "NO_SLIP", this.dsListSub.getColumn(i, "NO_SLIP_GA"));
				this.dsAutoSlipx.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
			}
		}

		if (this.dsAutoSlipx.rowcount == 0) return;
		
		var strSvcId    = "save";
		var strSvcType  = "save";
		var inProc		= "_dsProc";
		var inData      = "autoslipx=dsAutoSlipx";
		var outData     = "";
		var strArg      = "";
		var callBackFnc = "fnCallback";
		
		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
							strSvcType , 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
							callBackFnc); 	// 통신방법 정의 [생략가능]
	}					
}]]></Script>
    <Objects>
      <Dataset id="dsList" onrowposchanged="dsList_onrowposchanged"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DFLPR_CASHINLIST_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">select2</Col>
            <Col id="SP">DFLPR_INCOMEDTL_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">insert2</Col>
            <Col id="SP">DFLPR_INCOMEDTL_INSERT</Col>
          </Row>
          <Row>
            <Col id="TARGET">update2</Col>
            <Col id="SP">DFLPR_INCOMEDTL_UPDATE</Col>
          </Row>
          <Row>
            <Col id="TARGET">delete2</Col>
            <Col id="SP">DFLPR_INCOMEDTL_DELETE</Col>
          </Row>
          <Row>
            <Col id="TARGET">merge</Col>
            <Col id="SP">DFLPR_CASHINLIST_MERGE</Col>
          </Row>
          <Row>
            <Col id="TARGET">combo</Col>
            <Col id="SP">DZXPR_COMBO_SELECT</Col>
          </Row>
          <Row>
            <Col id="SP">DFLPR_CASHINLIST_DEPT</Col>
            <Col id="TARGET">cashDept</Col>
          </Row>
          <Row>
            <Col id="TARGET">autoslip</Col>
            <Col id="SP">DFLPR_INCOMEDTL_AUTOSLIP</Col>
          </Row>
          <Row>
            <Col id="TARGET">autoslipx</Col>
            <Col id="SP">DFLPR_INCOMEDTL_AUTOSLIPX</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsListSub"/>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_CORP" type="STRING" size="256"/>
          <Column id="YN_CONFIRM" type="STRING" size="256"/>
          <Column id="DT_TRADE_FR" type="STRING" size="256"/>
          <Column id="DT_TRADE_TO" type="STRING" size="256"/>
          <Column id="CD_BANK" type="STRING" size="256"/>
          <Column id="NO_ACCOUNT" type="STRING" size="256"/>
          <Column id="CD_DEPT_BH" type="STRING" size="256"/>
          <Column id="YN_SLIP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
      <Dataset id="dsYN_CONFIRM"/>
      <Dataset id="dsYN_SLIP"/>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfCD_CORP.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_CORP"/>
      <BindItem id="item1" compid="divSearch.form.cboYN_CONFIRM" propid="value" datasetid="dsSearch" columnid="YN_CONFIRM"/>
      <BindItem id="item2" compid="divSearch.form.tclDT_TRADE_FR" propid="value" datasetid="dsSearch" columnid="DT_TRADE_FR"/>
      <BindItem id="item3" compid="divSearch.form.tclDT_TRADE_TO" propid="value" datasetid="dsSearch" columnid="DT_TRADE_TO"/>
      <BindItem id="item4" compid="divSearch.form.cfBANK.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_BANK"/>
      <BindItem id="item5" compid="divSearch.form.cfNO_ACCOUNT.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="NO_ACCOUNT"/>
      <BindItem id="item6" compid="divSearch.form.ccfCD_DEPT_BH.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_DEPT_BH"/>
      <BindItem id="item7" compid="divSearch.form.ccboYN_SLIP" propid="value" datasetid="dsSearch" columnid="YN_SLIP"/>
    </Bind>
  </Form>
</FDL>
