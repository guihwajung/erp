<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="form" width="1280" height="720" titletext="이자전표발행" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg">
          <Layouts>
            <Layout>
              <Static id="sta04" taborder="4" text="법인코드" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="cfCD_CORP" CDTextWidth="50" taborder="0" left="sta04:0.0" top="10.0" width="250" height="24.0" url="cmm::cmmCodeFind.xfdl" text=""/>
              <Static id="sta00" taborder="5" text="거래일자" left="cfCD_CORP:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Calendar id="calDT_TRADE_FR" taborder="2" left="sta00:0.0" top="10.0" width="105" height="24.0" dateformat="yyyy-MM-dd" editformat="yyyyMMdd" autoselect="true" onchanged="fnSearchInit"/>
              <Static id="staCD_TILDE" taborder="6" text="~" left="calDT_TRADE_FR:0.0" top="10.0" width="30.0" height="24.0" cssclass="sta_WF_AC"/>
              <Calendar id="calDT_TRADE_TO" taborder="3" left="staCD_TILDE:0.0" top="10.0" width="105" height="24.0" dateformat="yyyy-MM-dd" editformat="yyyyMMdd" autoselect="true" onchanged="fnSearchInit"/>
              <Static id="sta02" taborder="7" text="발행여부" left="calDT_TRADE_TO:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Combo id="cboYN_SLIP" taborder="1" text="진행중" left="sta02:0.0" top="10.0" width="105" height="24.0" codecolumn="CD_CODE" datacolumn="DS_CODE" value="N" index="-1" innerdataset="dsYN_SLIP" onitemchanged="fnSearchInit"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="1" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0" oncellclick="divData_objGrid_oncellclick"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

var tmSlip = "";	// 병합전표발행KEY

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();				
	this.fnSetCombo();
	
	if ( !this.gfnIsNull(this.getOwnerFrame().CD_CORP) ) {
		this.dsSearch.set_enableevent(false);
		
		this.dsSearch.setColumn(0, "CD_CORP", this.getOwnerFrame().CD_CORP);
		this.cfCD_CORP.form.DSTextBox.set_value(this.getOwnerFrame().DS_CORP);
		this.dsSearch.setColumn(0, "DT_TRADE_FR", this.getOwnerFrame().DT_TRADE_FR);
		this.dsSearch.setColumn(0, "DT_TRADE_TO", this.getOwnerFrame().DT_TRADE_TO);
		
		this.dsSearch.set_enableevent(true);
		
		this.FormBtns.Select.click();
	} else {
		var today = this.gfnGetDate();
		this.dsSearch.setColumn(0, "DT_TRADE_FR", today);
		this.dsSearch.setColumn(0, "DT_TRADE_TO", today);
	}
}; 

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 ************************************************************************/
this.fnSetButton = function() {
	// 입력,저장,삭제 버튼 비활성화 처리
//  	this.FormBtns.Add.set_enable(false);
//  	this.FormBtns.Save.set_enable(false);
//  	this.FormBtns.Del.set_enable(false);
};

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btnSlipPub = this.gfnFormButtonAdd("btnSlipPub", "fnSlipPub", "전표발행"); 
	this.btnSlipSelect = this.gfnFormButtonAdd("btnSlipSelect", "fnSlipSelect", "전표조회"); 
	this.btnSlipCncl = this.gfnFormButtonAdd("btnSlipCncl", "fnSlipCncl", "전표취소"); 
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	
	// 조회조건
	this.cfCD_CORP  = this.divSearch.form.cfCD_CORP;				// 법인코드
	this.cboYN_SLIP = this.divSearch.form.cboYN_SLIP;				// 발행여부
	this.calDT_TRADE_FR = this.divSearch.form.calDT_TRADE_FR;		// 거래일자(from)
	this.calDT_TRADE_TO = this.divSearch.form.calDT_TRADE_TO;		// 거래일자(to)
	
	this.dxGrid = this.divData.form.objGrid;						// 그리드
	this.grSearch = this.FormInfo.GR_SEARCH;						// 권한?
	this.cdGroup = this.gfnIsNull(this.AuthClient.CD_GROUP) ? "" : this.AuthClient.CD_GROUP;						// 그룹코드	
}

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
		
	this.cfCD_CORP.CodeFindName = "DZX_CFCORP";					// 법인코드(조회조건)
	
	this.cfCD_CORP.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.cfCD_CORP.AfterCDTextChanged = "fnAfterCDTextChanged";

	// 그리드 초기화
	this.gfnGridInit(this.dxGrid, this.dsList, "DF", "DFL_INCOMEEZA");		
	this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforuserDataSetParam";
	this.dxGrid.AfterCDTextChanged = "fnGrid_AfterCDTextChanged";
	this.dxGrid.AfterAllCheck = "fnGrid_AfterAllCheck";

	// 법인코드 init
	if (this.gfnIsNull(this.cfCD_CORP.form.CDTextBox.value)) {
		this.cfCD_CORP.form.DSTextBox.set_value(this.AuthClient.DS_CORP); 
		this.cfCD_CORP.form.CDTextBox.set_value(this.AuthClient.CD_CORP);	
	}
	
	// 권한체크
	if (nexacro.toNumber(this.grSearch) >= 2) {
		this.cfCD_CORP.set_enable(false);
	}	
	
	// 기준일자 포커스추가
	this.cfCD_CORP.form.CDTextBox.setFocus();	
}

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {

	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_CORP", "string");
	this.dsSelect.addColumn("YN_SLIP", "string");
	this.dsSelect.addColumn("DT_TRADE_FR", "string");
	this.dsSelect.addColumn("DT_TRADE_TO", "string");

	this.dsUpdate = new Dataset();
	this.dsUpdate.addColumn("DT_SLIP", "string");
	this.dsUpdate.addColumn("TY_TRADE", "string");
	this.dsUpdate.addColumn("CD_DEPT_BE", "string");
	this.dsUpdate.addColumn("TY_VENDOR", "string");
	this.dsUpdate.addColumn("CD_VENDOR", "string");
	this.dsUpdate.addColumn("DT_FROM", "string");
	this.dsUpdate.addColumn("DT_TO", "string");
	this.dsUpdate.addColumn("AM_CORP", "bigdecimal");
	this.dsUpdate.addColumn("AM_JUMIN", "bigdecimal");
	this.dsUpdate.addColumn("RM_BIGO", "string");
	this.dsUpdate.addColumn("NO_INCONFIRM", "string");
	this.dsUpdate.addColumn("YN_PRETAX", "string");
	this.dsUpdate.addColumn("ID_USER", "string");
	this.dsUpdate.addColumn("AM_KRW", "bigdecimal");

	this.dsAutoSlip = new Dataset();
	this.dsAutoSlip.addColumn("NO_INCONFIRM", "string");
	this.dsAutoSlip.addColumn("TM_SLIP", "string");
	this.dsAutoSlip.addColumn("YN_SLIP", "string");
	this.dsAutoSlip.addColumn("CD_CORP", "string");
	this.dsAutoSlip.addColumn("ID_USER", "string");
	
	this.dsAutoSlipx = new Dataset();
	this.dsAutoSlipx.addColumn("NO_SLIP", "string");
	this.dsAutoSlipx.addColumn("ID_USER", "string");	
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	this.dsSelect.setColumn(0, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
	this.dsSelect.setColumn(0, "YN_SLIP", this.dsSearch.getColumn(0, "YN_SLIP"));
	this.dsSelect.setColumn(0, "DT_TRADE_FR", this.dsSearch.getColumn(0, "DT_TRADE_FR"));
	this.dsSelect.setColumn(0, "DT_TRADE_TO", this.dsSearch.getColumn(0, "DT_TRADE_TO"));
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); 	// 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
}

/*
 *	삭제 버튼
 */
this.fnDel = function() {
}

/*
 *	저장 버튼
 */
this.fnSave = function() {
	if (!this.gfnGridValidate(this.dxGrid)) return;

	this.dxGrid.updateToDataset();
	
	this.dsUpdate.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
				
			case "U":
				var nrow = this.dsUpdate.addRow();
				this.dsUpdate.setColumn(nrow, "DT_SLIP", this.dsList.getColumn(i, "DT_SLIP"));
				this.dsUpdate.setColumn(nrow, "TY_TRADE", this.dsList.getColumn(i, "TY_TRADE"));
				this.dsUpdate.setColumn(nrow, "CD_DEPT_BE", this.dsList.getColumn(i, "CD_DEPT_BE"));
				this.dsUpdate.setColumn(nrow, "TY_VENDOR", this.dsList.getColumn(i, "TY_VENDOR"));
				this.dsUpdate.setColumn(nrow, "CD_VENDOR", this.dsList.getColumn(i, "CD_VENDOR"));
				this.dsUpdate.setColumn(nrow, "DT_FROM", this.dsList.getColumn(i, "DT_FROM"));
				this.dsUpdate.setColumn(nrow, "DT_TO", this.dsList.getColumn(i, "DT_TO"));
				this.dsUpdate.setColumn(nrow, "AM_CORP", this.dsList.getColumn(i, "AM_CORP"));
				this.dsUpdate.setColumn(nrow, "AM_JUMIN", this.dsList.getColumn(i, "AM_JUMIN"));
				this.dsUpdate.setColumn(nrow, "RM_BIGO", this.dsList.getColumn(i, "RM_BIGO"));
				this.dsUpdate.setColumn(nrow, "NO_INCONFIRM", this.dsList.getColumn(i, "NO_INCONFIRM"));
				this.dsUpdate.setColumn(nrow, "YN_PRETAX", this.dsList.getColumn(i, "YN_PRETAX"));
				this.dsUpdate.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);	
				this.dsUpdate.setColumn(nrow, "AM_KRW", this.dsList.getColumn(i, "AM_KRW"));
				break;
		}
	}
	
	if (this.dsUpdate.rowcount == 0) return;
	
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "update=dsUpdate";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); 	// 통신방법 정의 [생략가능]
}

/*
 * 전표발행
 */
this.fnAutoSlip = function(slipYn) {

	this.dsAutoSlip.clearData();
	
	// 전표발행
	if (slipYn == "N") {
	
		tmSlip = this.AuthClient.ID_USER + this.gfnGetDate("milli");
		
		for (var i=0; i < this.dsList.rowcount; i++) {
			if (this.dsList.getColumn(i, "CHK") == 1) {	
				var nrow = this.dsAutoSlip.addRow();
				this.dsAutoSlip.setColumn(nrow, "NO_INCONFIRM", this.dsList.getColumn(i, "NO_INCONFIRM"));
				this.dsAutoSlip.setColumn(nrow, "TM_SLIP", tmSlip);
				this.dsAutoSlip.setColumn(nrow, "YN_SLIP", slipYn);
				this.dsAutoSlip.setColumn(nrow, "CD_CORP", this.cfCD_CORP.form.CDTextBox.value);
				this.dsAutoSlip.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);				
			}
		}	
	
	// 전표발행후처리
	} else {
		var nrow = this.dsAutoSlip.addRow();
		this.dsAutoSlip.setColumn(nrow, "TM_SLIP", tmSlip);
		this.dsAutoSlip.setColumn(nrow, "YN_SLIP", slipYn);
		this.dsAutoSlip.setColumn(nrow, "CD_CORP", this.cfCD_CORP.form.CDTextBox.value);
		this.dsAutoSlip.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);	
	}
	
	if (this.dsAutoSlip.rowcount == 0) return;

	var strSvcId    = "autoslip" + slipYn;
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "autoslip=dsAutoSlip";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); 	// 통신방법 정의 [생략가능]
}


/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {	

	if ( this.gfnIsNull(this.cfCD_CORP.form.CDTextBox.value) ) {
		this.gfnAlert("법인코드가 입력되지 않았습니다.");
		this.cfCD_CORP.form.CDTextBox.setFocus();
		return false;
	}

	if (this.gfnIsNull(this.calDT_TRADE_FR.value)) {
		this.gfnAlert("거래일자(FROM)을 입력 하세요.");
		this.calDT_TRADE_FR.setFocus();
		return false;
	}
	
	if (this.gfnIsNull(this.calDT_TRADE_TO.value)) {
		this.gfnAlert("거래일자(TO)을 입력 하세요.");
		this.calDT_TRADE_TO.setFocus();
		return false;
	}

	if ( !this.gfnIsNull(this.calDT_TRADE_FR.value) && !this.gfnIsNull(this.calDT_TRADE_TO.value) ) {
		if ( this.calDT_TRADE_FR.value > this.calDT_TRADE_TO.value ) {
			this.gfnAlert("거래일자가 잘못 입력 되었습니다..");
			this.calDT_TRADE_FR.setFocus();
			return false;
		}
	}

	return true;
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);
		
	}
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
		
	
	} else if (svcID == "autoslipN") {
		if (errorCode == 0) {
			this.fnAutoSlip("Y");
		}
		
	} else if (svcID == "autoslipY") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	} else if(svcID == "combo") {
	
		//  조회조건(발행여부)
		var iRow = this.dsYN_SLIP.insertRow(0);
		this.dsYN_SLIP.setColumn(iRow, "CD_CODE", "");
		this.dsYN_SLIP.setColumn(iRow, "DS_CODE", "전체");
		this.cboYN_SLIP.set_index(0);
	}
}


/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {

	var cdCorp = this.cfCD_CORP.form.CDTextBox.value;
	
	switch(id) {
	
	// 법인코드(조회조건)
	case "cfCD_CORP": 	
		dsUserParam.setColumn(nrow, "CD_GROUP", this.cdGroup);	
		break;
		
	default:
	}	
	return true;
}
 
this.fnAfterCDTextChanged = function(id, codeFindData) {
	
	var arr = codeFindData;
	
	switch(id) {
	
	// 법인코드(조회조건)
	case "cfCD_CORP":
		this.fnSearchInit();
		break;		
		
	default:
	}	
	return true;
}


 
this.fnGrid_BeforuserDataSetParam = function(id, dsUserParam, nrow) {
	var cdCorp = this.gfnIsNull(this.dsList.getColumn(this.dsList.rowposition, "CD_CORP")) ? "" : this.dsList.getColumn(this.dsList.rowposition, "CD_CORP");
	
	if (id == "DFX_CFACNTUNIT") {
		dsUserParam.setColumn(nrow, "CD_GROUP", this.cdGroup);
		dsUserParam.setColumn(nrow, "CD_CORP", this.gfnIsNull(cdCorp) ? this.dsSearch.getColumn(0, "CD_CORP") : cdCorp);	
	}
	
	if (id == "DFX_CFVENDOR") {
		dsUserParam.setColumn(nrow, "TY_VENDOR1", "거래처");	
		dsUserParam.setColumn(nrow, "CD_CORP", this.gfnIsNull(cdCorp) ? this.dsSearch.getColumn(0, "CD_CORP") : cdCorp);	
	}
	return true;
}

this.fnGrid_AfterCDTextChanged = function(id, codeFindData) {
	var arr = codeFindData;

	if (id == "DFX_CFACNTUNIT") {
	}

	if (id == "DFX_CFVENDOR") {
		this.dsList.setColumn(this.dsList.rowposition, "TY_VENDOR", arr[0]["TY_VENDOR"]);
	}	
};
 
/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
 
/************************************************************************
 * 기타 이벤트
 ************************************************************************/
/*
 *	조회 조건 변경시 초기화
 */
this.fnSearchInit = function(obj,e) {
	if(e == null || (e.pretext != e.posttext)) {
		this.gfnSetFormStatus(this);
		this.gfnGridClear(this.dxGrid);
	}
};


// 전표발행
this.fnSlipPub = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	
	this.fnAutoSlip("N");
	
}

// 전표조회 및 전표취소 validation check
this.fnSlipValidation = function() {
	var chkCnt = this.dsList.getCaseCount("CHK == 1");
	
	if (chkCnt == 0) {
		return false;
	}
	
	for ( var i=0; i < this.dsList.rowcount; i++ ) {
		if ( this.dsList.getColumn(i, "CHK") == 1 ) {
			if ( this.gfnIsNull(this.dsList.getColumn(i, "NO_SLIP") )) {
				this.gfnAlert("발행된 전표가 없습니다.");
				return false;
			}
		}
	}
	return true;
}

// 전표조회
this.fnSlipSelect = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	
	// 선택된 row가 있을 경우에만 팝업을 띄움
	if (!this.gfnGridIsRow(this.dxGrid)) { return false; }
	// var chkRow = this.dsList.findRow("CHK", 1);
	var param = {};
	param.CD_TRADE = this.dsList.getColumn(this.dsList.rowposition, "NO_SLIP");
	param.IUD_FLAG = "S";
	param.strYN_JUNDO_START = "";

	// 화면 오픈. 
	// CD_MODULE은 보통 같은 모듈에서 호출하는 경우가 많으니 this.FormInfo.CD_MODULE 사용
	// 타 모듈 화면 호출시 지정할것.
	//trace("this.FormInfo.CD_MODULE :: " + this.FormInfo.CD_MODULE);
	this.gfnFormOpen("DHA", "DHA_ISSUESLIP", "fnPopCallBack", param);
	
}


this.fnPopCallBack = function(svcID, val) {
	//if (val != false) {
		//var json = JSON.parse(val);
		
		if (svcID.indexOf("DHA_ISSUESLIP") > -1) {
			this.FormBtns.Select.click();
		}
	//}
}


// 전표취소
this.fnSlipCncl = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {

	if (!this.fnSlipValidation()) {
		return false;
	}
	
	this.gfnConfirm("전표취소 처리 하시겠습니까?","fnSlipCncl_callback");	
}


this.fnSlipCncl_callback = function(strId, val) {
	
	if (val) {
		this.dsAutoSlipx.clearData();
		
		for (var i=0; i < this.dsList.rowcount; i++) {
			if (this.dsList.getColumn(i, "CHK") == 1) {
				var nrow = this.dsAutoSlipx.addRow();
				this.dsAutoSlipx.setColumn(nrow, "NO_SLIP", this.dsList.getColumn(i, "NO_SLIP"));
				this.dsAutoSlipx.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
			}
		}

		if (this.dsAutoSlipx.rowcount == 0) return;
		
		var strSvcId    = "save";
		var strSvcType  = "save";
		var inProc		= "_dsProc";
		var inData      = "autoslipx=dsAutoSlipx";
		var outData     = "";
		var strArg      = "";
		var callBackFnc = "fnCallback";
		
		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
							strSvcType , 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
							callBackFnc); 	// 통신방법 정의 [생략가능]
	}					
}


// 공통코드콤보
this.fnSetCombo = function() {
	
	this.dsCombo = new Dataset();
	this.dsCombo.addColumn("CD_SYSTEM", "string");
	this.dsCombo.addColumn("CD_TYPE", "string");
	this.dsCombo.addRow();
	this.dsCombo.setColumn(0, "CD_SYSTEM", "DF");
	this.dsCombo.setColumn(0, "CD_TYPE", "Z1");
	
	var strSvcId    = "combo";
	var strSvcType  = "select";
	var inProc		= "_dsProc";
	var inData      = "combo=dsCombo";
	var outData     = "dsYN_SLIP=combo0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); 	// 통신방법 정의 [생략가능]
};]]></Script>
    <Objects>
      <Dataset id="dsList" oncolumnchanged="dsList_oncolumnchanged"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DFLPR_INCOMEEZA_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">update</Col>
            <Col id="SP">DFLPR_INCOMEEZA_UPDATE</Col>
          </Row>
          <Row>
            <Col id="TARGET">autoslip</Col>
            <Col id="SP">DFLPR_INCOMEEZA_AUTOSLIP</Col>
          </Row>
          <Row>
            <Col id="TARGET">autoslipx</Col>
            <Col id="SP">DFLPR_INCOMEEZA_AUTOSLIPX</Col>
          </Row>
          <Row>
            <Col id="TARGET">combo</Col>
            <Col id="SP">DZXPR_COMBO_SELECT</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsYN_SLIP"/>
      <Dataset id="dsSearch">
        <ColumnInfo>
          <Column id="CD_CORP" type="STRING" size="256"/>
          <Column id="YN_SLIP" type="STRING" size="256"/>
          <Column id="DT_TRADE_FR" type="STRING" size="256"/>
          <Column id="DT_TRADE_TO" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.cfCD_CORP.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_CORP"/>
      <BindItem id="item2" compid="divSearch.form.calDT_TRADE_FR" propid="value" datasetid="dsSearch" columnid="DT_TRADE_FR"/>
      <BindItem id="item3" compid="divSearch.form.calDT_TRADE_TO" propid="value" datasetid="dsSearch" columnid="DT_TRADE_TO"/>
      <BindItem id="item4" compid="divSearch.form.cboYN_SLIP" propid="value" datasetid="dsSearch" columnid="YN_SLIP"/>
    </Bind>
  </Form>
</FDL>
