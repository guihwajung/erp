<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="form" width="1280" height="720" titletext="기타대체전표발행" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="78.0" right="0" cssclass="div_SEARCH_Bg">
          <Layouts>
            <Layout>
              <Static id="sta04" taborder="4" text="법인코드" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="cfCD_CORP" CDTextWidth="50" taborder="0" left="sta04:0.0" top="10.0" width="269" height="24.0" url="cmm::cmmCodeFind.xfdl" text=""/>
              <Static id="sta00" taborder="5" text="거래일자" left="cfCD_CORP:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Calendar id="calDT_TRADE" taborder="1" left="sta00:0.0" top="10.0" width="105" height="24.0" dateformat="yyyy-MM-dd" editformat="yyyyMMdd" autoselect="true"/>
              <Static id="sta03" taborder="7" text="발행여부" left="calDT_TRADE:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Combo id="cboYN_SLIP" taborder="2" text="전체" left="sta03:0.0" top="10.0" width="105" height="24.0" codecolumn="CD_CODE" datacolumn="DS_CODE" value="" index="0" innerdataset="dsYN_SLIP"/>
              <Static id="sta01" taborder="6" text="계좌번호" left="0.0" top="sta04:10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Div id="cfNO_ACCOUNT" CDTextWidth="110" taborder="3" left="sta01:0.0" top="sta04:10.0" width="269" height="24.0" url="cmm::cmmCodeFind.xfdl" text=""/>
              <Static id="staTyCms" taborder="7" text="대체구분" left="calDT_TRADE:0.0" top="sta04:10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Combo id="cboTY_CMS" taborder="2" text="전체" left="staTyCms:0.0" top="sta04:10.0" width="105" height="24.0" codecolumn="CD_CODE" datacolumn="DS_CODE" value="" index="0" innerdataset="dsTY_CMS"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="1" left="0" top="divSearch:15" bottom="0" right="0" cssclass="div_DATA_Bg" ondragmove="divData_ondragmove">
          <Layouts>
            <Layout>
              <Div id="divSplitter" taborder="2" top="0" width="5" cursor="ew-resize" bottom="0" ondrag="divData_divSplitter_ondrag" left="54.45%" cssclass="div_Splitter"/>
              <Div id="divDataLeft" taborder="0" left="0" top="0" bottom="0" right="divSplitter:5">
                <Layouts>
                  <Layout>
                    <Static id="sta00" taborder="2" text="입출금내역" left="0" top="10" height="22" cssclass="sta_TITLE_Bg" right="0"/>
                    <Button id="btnConfirm" taborder="0" text="확정" top="6" height="22" onclick="divData_divDataLeft_btnConfirm_onclick" width="55" left="sta00:-55"/>
                    <Grid id="objGrid" taborder="1" left="0" top="30" bottom="0" right="0"/>
                  </Layout>
                </Layouts>
              </Div>
              <Div id="divDataRight" taborder="1" left="divSplitter:5" top="0" bottom="0" right="0">
                <Layouts>
                  <Layout>
                    <Static id="sta00" taborder="2" text="전표발행내역" left="0" top="10" height="22" cssclass="sta_TITLE_Bg" right="0"/>
                    <Grid id="objGrid2" taborder="1" left="0" top="30" bottom="0" right="0"/>
                    <Button id="btnConfirmx" taborder="0" text="확정취소" top="6" height="22" left="sta00:-76" width="75" onclick="divData_divDataRight_btnConfirmx_onclick"/>
                  </Layout>
                </Layouts>
              </Div>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

var tmSlip = "";	// 병합전표발행KEY

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();				
	this.fnSetCombo();
}; 

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 ************************************************************************/
this.fnSetButton = function() {
	// 입력,저장,삭제 버튼 비활성화 처리
//   	this.FormBtns.Add.set_enable(false);
//   	this.FormBtns.Save.set_enable(false);
//   	this.FormBtns.Del.set_enable(false);
};

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btnSlipPub = this.gfnFormButtonAdd("btnSlipPub", "fnSlipPub", "전표발행"); 
	this.btnSlipSelect = this.gfnFormButtonAdd("btnSlipSelect", "fnSlipSelect", "전표조회"); 
	this.btnSlipCncl = this.gfnFormButtonAdd("btnSlipCncl", "fnSlipCncl", "전표취소"); 
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	
	// 조회조건
	this.cfCD_CORP  = this.divSearch.form.cfCD_CORP;		// 법인코드
	this.calDT_TRADE = this.divSearch.form.calDT_TRADE;		// 거래일자
	this.cboYN_SLIP = this.divSearch.form.cboYN_SLIP;		// 발행여부
	this.cfNO_ACCOUNT = this.divSearch.form.cfNO_ACCOUNT;	// 계좌번호
	this.cboTY_CMS = this.divSearch.form.cboTY_CMS;			// 대체구분
	
	
	this.dxGrid = this.divData.form.divDataLeft.form.objGrid;			// 그리드(입출금내역)
	this.dxGrid2 = this.divData.form.divDataRight.form.objGrid2;		// 그리드(전표발행내역)
	
	this.grSearch = this.FormInfo.GR_SEARCH;			// 권한?
	this.cdGroup = this.gfnIsNull(this.AuthClient.CD_GROUP) ? "" : this.AuthClient.CD_GROUP;			// 그룹코드	
}

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
		
	this.cfCD_CORP.CodeFindName = "DZX_CFCORP";
	this.cfCD_CORP.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.cfCD_CORP.AfterCDTextChanged = "fnAfterCDTextChanged";
	
	this.cfNO_ACCOUNT.CodeFindName = "DFX_CFNO_ACCOUNT";
	this.cfNO_ACCOUNT.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.cfNO_ACCOUNT.AfterCDTextChanged = "fnAfterCDTextChanged";	

	// 그리드 초기화
	this.gfnGridInit(this.dxGrid, this.dsList, "DF", "DFL_ETC1");		// 입출금내역조회	
	this.gfnGridInit(this.dxGrid2, this.dsList2, "DF", "DFL_ETC2");		// 전표발행내역조회

	
	// 그리드 코드파인드
	this.dxGrid2.BeforeUserDataSetParam = "fnGrid_BeforuserDataSetParam";
	this.dxGrid2.AfterCDTextChanged = "fnGrid_AfterCDTextChanged";
	

	// 법인코드 init
	if (this.gfnIsNull(this.cfCD_CORP.form.CDTextBox.value)) {
		this.cfCD_CORP.form.DSTextBox.set_value(this.AuthClient.DS_CORP); 
		this.cfCD_CORP.form.CDTextBox.set_value(this.AuthClient.CD_CORP);	
	}	

	var today = this.gfnGetDate();
	this.dsSearch.setColumn(0, "DT_TRADE", today);
	
	
	// 권한체크
	if (nexacro.toNumber(this.grSearch) >= 2) {
		this.cfCD_CORP.set_enable(false);
	}	
	
	// 법인코드 포커스
	this.cfCD_CORP.form.CDTextBox.setFocus();	
}

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {

	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_CORP", "string");
	this.dsSelect.addColumn("DT_TRADE", "string");
	this.dsSelect.addColumn("NO_ACCOUNT", "string");
	this.dsSelect.addColumn("YN_SLIP", "string");
	this.dsSelect.addColumn("TY_CMS", "string");

	this.dsConfirm = new Dataset();
	this.dsConfirm.addColumn("DT_TRADE", "string");
	this.dsConfirm.addColumn("CD_BANK", "string");
	this.dsConfirm.addColumn("TY_CASH", "string");
	this.dsConfirm.addColumn("NO_ACCOUNT", "string");
	this.dsConfirm.addColumn("NO_TRADE", "string");
	this.dsConfirm.addColumn("CD_CORP", "string");
	this.dsConfirm.addColumn("ID_USER", "string");
	this.dsConfirm.addColumn("TY_CMS", "string");

	this.dsUpdate = new Dataset();
	this.dsUpdate.addColumn("NO_INCONFIRM", "string");
	this.dsUpdate.addColumn("CD_ACCOUNT", "string");
	this.dsUpdate.addColumn("CD_DEPT_BE", "string");
	this.dsUpdate.addColumn("CD_VENDOR", "string");
	this.dsUpdate.addColumn("TY_VENDOR", "string");
	this.dsUpdate.addColumn("RM_BIGO", "string");
	this.dsUpdate.addColumn("ID_USER", "string");

	this.dsDelete = new Dataset();
	this.dsDelete.addColumn("NO_INCONFIRM", "string");
	this.dsDelete.addColumn("ID_USER", "string");
	
	this.dsAutoSlip = new Dataset();
	this.dsAutoSlip.addColumn("NO_INCONFIRM", "string");
	this.dsAutoSlip.addColumn("TM_SLIP", "string");
	this.dsAutoSlip.addColumn("YN_SLIP", "string");
	this.dsAutoSlip.addColumn("CD_CORP", "string");
	this.dsAutoSlip.addColumn("ID_USER", "string");

	this.dsAutoSlipx = new Dataset();
	this.dsAutoSlipx.addColumn("NO_SLIP", "string");
	this.dsAutoSlipx.addColumn("ID_USER", "string");	
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);
	this.gfnGridBeforeSelect(this.dxGrid2);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	this.dsSelect.setColumn(0, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
	this.dsSelect.setColumn(0, "DT_TRADE", this.dsSearch.getColumn(0, "DT_TRADE"));
	this.dsSelect.setColumn(0, "NO_ACCOUNT", this.dsSearch.getColumn(0, "NO_ACCOUNT"));
	this.dsSelect.setColumn(0, "YN_SLIP", this.dsSearch.getColumn(0, "YN_SLIP"));
	this.dsSelect.setColumn(0, "TY_CMS", this.dsSearch.getColumn(0, "TY_CMS"));
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect select2=dsSelect";
	var outData     = "dsList=select0 dsList2=select20";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); 	// 통신방법 정의 [생략가능]
}


/*
 *	입력 버튼
 */
this.fnAdd = function() {

}

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}

/*
 *	저장 버튼
 */
this.fnSave = function() {
	if (!this.gfnGridValidate(this.dxGrid2)) return;

	this.dxGrid2.updateToDataset();
	
	this.dsUpdate.clearData();
	
	for (var i = 0; i < this.dsList2.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList2, i);
		switch(flag) {
				
			case "U":
				var nrow = this.dsUpdate.addRow();
				this.dsUpdate.setColumn(nrow, "NO_INCONFIRM", this.dsList2.getColumn(i, "NO_INCONFIRM"));
				this.dsUpdate.setColumn(nrow, "CD_ACCOUNT", this.dsList2.getColumn(i, "CD_ACCOUNT"));
				this.dsUpdate.setColumn(nrow, "CD_DEPT_BE", this.dsList2.getColumn(i, "CD_DEPT_BE"));
				this.dsUpdate.setColumn(nrow, "CD_VENDOR", this.dsList2.getColumn(i, "CD_VENDOR"));
				this.dsUpdate.setColumn(nrow, "TY_VENDOR", this.dsList2.getColumn(i, "TY_VENDOR"));
				this.dsUpdate.setColumn(nrow, "RM_BIGO", this.dsList2.getColumn(i, "RM_BIGO"));
				this.dsUpdate.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);	
				break;
		}
	}
	
	if (this.dsUpdate.rowcount == 0) return;
	
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "update=dsUpdate";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); 	// 통신방법 정의 [생략가능]
}


/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}


/*
 *	출력 버튼
 */
this.fnPrint = function() {
}


/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {

	if (this.gfnIsNull(this.cfCD_CORP.form.CDTextBox.value)) {
		this.gfnAlert("법인코드를 입력 하세요.");
		this.cfCD_CORP.form.CDTextBox.setFocus();
		return false;
	}

	if (this.gfnIsNull(this.cboTY_CMS.value)) {
		this.gfnAlert("대체구분을 입력 하세요.");
		this.cboTY_CMS.setFocus();
		return false;
	}
	return true;
};

/*
 *	팝업 Validate
 */

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);
		this.gfnGridAfterSelect(this.dxGrid2);
		
	} else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}  else if(svcID == "combo") {
		var iRow = this.dsYN_SLIP.insertRow(0);
		this.dsYN_SLIP.setColumn(iRow, "CD_CODE", "");
		this.dsYN_SLIP.setColumn(iRow, "DS_CODE", "전체");
		this.cboYN_SLIP.set_index(0);

		//var iRow2 = this.dsTY_CMS.insertRow(0);
		//this.dsTY_CMS.setColumn(iRow2, "CD_CODE", "");
		//this.dsTY_CMS.setColumn(iRow2, "DS_CODE", "전체");
		this.cboTY_CMS.set_index(0);

	} else if (svcID == "autoslipN") {
		if (errorCode == 0) {
			this.fnAutoSlip("Y");
		}
		
	} else if (svcID == "autoslipY") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
}

this.fnMsgCallback = function(strId, strVal) {
	switch(strId) {
		case "dataCreate":
		case "cms":	
			this.FormBtns.Select.click();
		break;
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	var cdCorp = this.gfnIsNull(this.cfCD_CORP.form.CDTextBox.value) ? "" : this.cfCD_CORP.form.CDTextBox.value;
	
	switch(id) {
	
	// 법인코드(조회조건)
	case "cfCD_CORP": 	
		dsUserParam.setColumn(nrow, "CD_GROUP", this.cdGroup);	
		break;
		
	// 계좌번호(조회조건)
	case "cfNO_ACCOUNT": 	
		dsUserParam.setColumn(nrow, "GUBUN", "MAIN");	
		dsUserParam.setColumn(nrow, "CD_CORP", cdCorp);	
		break;		
		
	default:
	}	
	return true;
}
 
this.fnAfterCDTextChanged = function(id, codeFindData) {
	
	var arr = codeFindData;
	
	switch(id) {
	
	// 법인코드(조회조건)
	case "cfCD_CORP":
		break;
	// 계좌번호(조회조건)
	case "cfNO_ACCOUNT":
		break;		
		
	default:
	}	
	return true;
}


 
this.fnGrid_BeforuserDataSetParam = function(id, dsUserParam, nrow) {
	var cdCorp = this.gfnIsNull(this.cfCD_CORP.form.CDTextBox.value) ? "" : this.cfCD_CORP.form.CDTextBox.value;
	
	// 계정코드
	if (id == "DFX_CFACNT") {
	} 
	
	// 귀속부서
	if (id == "DFX_CFACNTUNIT") {
		dsUserParam.setColumn(nrow, "CD_GROUP", this.cdGroup);	
		dsUserParam.setColumn(nrow, "CD_CORP", cdCorp);
	} 
	
	// 거래처
	if (id == "DFX_CFVENDOR") {
		dsUserParam.setColumn(nrow, "TY_VENDOR1", "전체");
		dsUserParam.setColumn(nrow, "CD_CORP", cdCorp);
	} 	
	return true;
}

this.fnGrid_AfterCDTextChanged = function(id, codeFindData) {
	var arr = codeFindData;

	// 계좌번호
	if (id == "DFX_CFNO_ACCOUNT") {
		if (arr.length > 0) {
// 			trace("NO_ACCOUNT :: " + arr[0]["NO_ACCOUNT"]);
// 			trace("TY_GUBUN :: " + arr[0]["TY_GUBUN"]);
// 			trace("CD_BANK :: " + arr[0]["CD_BANK"]);
// 			trace("DS_BANK :: " + arr[0]["DS_BANK"]);
// 			trace("CD_MANAGEBANK :: " + arr[0]["CD_MANAGEBANK"]);
		}
	}
};
 
/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
 
/************************************************************************
 * 기타 이벤트
 ************************************************************************/
/*
 *	조회 조건 변경시 초기화
 */
this.fnSearchInit = function(obj,e) {
	if(e == null || (e.pretext != e.posttext)) {
		this.gfnSetFormStatus(this);
		this.gfnGridClear(this.dxGrid);
	}
};


this.fnSetCombo = function() {
	
	// 발행여부
	this.dsCombo = new Dataset();
	this.dsCombo.addColumn("CD_SYSTEM", "string");
	this.dsCombo.addColumn("CD_TYPE", "string");
	
	this.dsCombo.addRow();
	this.dsCombo.setColumn(0, "CD_SYSTEM", "DF");
	this.dsCombo.setColumn(0, "CD_TYPE", "Z1");	// 전표발행여부

	// 대체구분
	this.dsComboTyCms = new Dataset();
	this.dsComboTyCms.addColumn("CD_SYSTEM", "string");
	this.dsComboTyCms.addColumn("CD_TYPE", "string");
	
	this.dsComboTyCms.addRow();
	this.dsComboTyCms.setColumn(0, "CD_SYSTEM", "DF");
	this.dsComboTyCms.setColumn(0, "CD_TYPE", "L4");	// 대체종류(자금입금)

	var strSvcId    = "combo";
	var strSvcType  = "select";
	var inProc		= "_dsProc";
	var inData      = "combo=dsCombo comboTyCms=dsComboTyCms";
	var outData     = "dsYN_SLIP=combo0 dsTY_CMS=comboTyCms0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
};

// 브랜치전송
this.fnAmtIlboPrnt = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {

	this.dsCreate.clearData();
	
	var nrow = this.dsCms.addRow();
		
	this.dsCms.setColumn(nrow, "CD_CORP", this.dsList.getColumn(this.dsList.rowposition, "CD_CORP"));	// 법인코드
	this.dsCms.setColumn(nrow, "DT_PLAN", this.calDT_PLAN.value);										// 집행일자
	this.dsCms.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);										// 사용자	
	

	if (this.dsCms.rowcount == 0) return;
	
	var strSvcId    = "cms";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "cms=dsCms";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); 	// 통신방법 정의 [생략가능]
}


this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
		this.gfnGridClear(this.dxGrid2);	
	}
};


this.divData_divSplitter_ondrag = function(obj:nexacro.Div,e:nexacro.DragEventInfo)
{
	e.set_userdata("splitter");
	return true;
};


this.divData_ondragmove = function(obj:nexacro.Div,e:nexacro.DragEventInfo)
{
	if(e.userdata == "splitter") {
		this.divData.form.divSplitter.set_left(e.clientx);
		this.divData.form.resetScroll();
	}
};

// 확정
this.divData_divDataLeft_btnConfirm_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	this.dsConfirm.clearData();
	
	for (var i=0; i < this.dsList.rowcount; i++) {
		if (this.dsList.getColumn(i, "CHK") == 1) {	
			var nrow = this.dsConfirm.addRow();
			this.dsConfirm.setColumn(nrow, "DT_TRADE", this.dsList.getColumn(i, "DT_TRADE"));
			this.dsConfirm.setColumn(nrow, "CD_BANK", this.dsList.getColumn(i, "CD_BANK"));
			this.dsConfirm.setColumn(nrow, "TY_CASH", this.dsList.getColumn(i, "TY_CASH"));
			this.dsConfirm.setColumn(nrow, "NO_ACCOUNT", this.dsList.getColumn(i, "NO_ACCOUNT"));
			this.dsConfirm.setColumn(nrow, "NO_TRADE", this.dsList.getColumn(i, "NO_TRADE"));
			this.dsConfirm.setColumn(nrow, "CD_CORP", this.cfCD_CORP.form.CDTextBox.value);
			this.dsConfirm.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);	
			this.dsConfirm.setColumn(nrow, "TY_CMS", this.dsSearch.getColumn(0, "TY_CMS"));	
			this.dsConfirm.setColumn(nrow, "CD_CURR", this.dsList.getColumn(i, "CD_CURR"));
		}
	}	
	
	if (this.dsConfirm.rowcount == 0) return;

	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "confirm=dsConfirm";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); 	// 통신방법 정의 [생략가능]
};

// 확정취소
this.divData_divDataRight_btnConfirmx_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	this.dsDelete.clearData();
	
	for (var i=0; i < this.dsList2.rowcount; i++) {
		if (this.dsList2.getColumn(i, "CHK") == 1) {	
			var nrow = this.dsDelete.addRow();
			this.dsDelete.setColumn(nrow, "NO_INCONFIRM", this.dsList2.getColumn(i, "NO_INCONFIRM"));
			this.dsDelete.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);				
		}
	}	
	
	if (this.dsDelete.rowcount == 0) return;

	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "delete=dsDelete";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); 	// 통신방법 정의 [생략가능]
};


// 전표발행
this.fnSlipPub = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	
	this.fnAutoSlip("N");
	
}

// 전표조회 및 전표취소 validation check
this.fnSlipValidation = function() {
	var chkCnt = this.dsList2.getCaseCount("CHK == 1");
	
	if (chkCnt == 0) {
		return false;
	}
	
	for ( var i=0; i < this.dsList2.rowcount; i++ ) {
		if ( this.dsList2.getColumn(i, "CHK") == 1 ) {
			if ( this.gfnIsNull(this.dsList2.getColumn(i, "NO_SLIP") )) {
				this.gfnAlert("발행된 전표가 없습니다.");
				return false;
			}
		}
	}
	return true;
}

// 전표조회
this.fnSlipSelect = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	
	// 선택된 row가 있을 경우에만 팝업을 띄움
	if (!this.gfnGridIsRow(this.dxGrid2)) { return false; }
	// var chkRow = this.dsList2.findRow("CHK", 1);
	var param = {};
	param.CD_TRADE = this.dsList2.getColumn(this.dsList2.rowposition, "NO_SLIP");
	param.IUD_FLAG = "S";
	param.strYN_JUNDO_START = "";

	// 화면 오픈. 
	// CD_MODULE은 보통 같은 모듈에서 호출하는 경우가 많으니 this.FormInfo.CD_MODULE 사용
	// 타 모듈 화면 호출시 지정할것.
	//trace("this.FormInfo.CD_MODULE :: " + this.FormInfo.CD_MODULE);
	this.gfnFormOpen("DHA", "DHA_ISSUESLIP", "fnPopCallBack", param);
}

this.fnPopCallBack = function(svcID, val) {
	//if (val != false) {
		//var json = JSON.parse(val);
		
		if (svcID.indexOf("DHA_ISSUESLIP") > -1) {
			this.FormBtns.Select.click();
		}
	//}
}


// 전표취소
this.fnSlipCncl = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {

	if (!this.fnSlipValidation()) {
		return false;
	}
	
	this.gfnConfirm("전표취소 처리 하시겠습니까?","fnSlipCncl_callback");	
}


this.fnSlipCncl_callback = function(strId, val) {
	
	if (val) {
		this.dsAutoSlipx.clearData();
		
		for (var i=0; i < this.dsList2.rowcount; i++) {
			if (this.dsList2.getColumn(i, "CHK") == 1) {
				var nrow = this.dsAutoSlipx.addRow();
				this.dsAutoSlipx.setColumn(nrow, "NO_SLIP", this.dsList2.getColumn(i, "NO_SLIP"));
				this.dsAutoSlipx.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
			}
		}

		if (this.dsAutoSlipx.rowcount == 0) return;
		
		var strSvcId    = "save";
		var strSvcType  = "save";
		var inProc		= "_dsProc";
		var inData      = "autoslipx=dsAutoSlipx";
		var outData     = "";
		var strArg      = "";
		var callBackFnc = "fnCallback";
		
		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
							strSvcType , 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
							callBackFnc); 	// 통신방법 정의 [생략가능]
	}					
}

/*
 * 전표발행
 */
this.fnAutoSlip = function(slipYn) {

	this.dsAutoSlip.clearData();
	
	// 전표발행
	if (slipYn == "N") {
	
		tmSlip = this.AuthClient.ID_USER + this.gfnGetDate("milli");
		
		for (var i=0; i < this.dsList2.rowcount; i++) {
			if (this.dsList2.getColumn(i, "CHK") == 1) {	
				var nrow = this.dsAutoSlip.addRow();
				this.dsAutoSlip.setColumn(nrow, "NO_INCONFIRM", this.dsList2.getColumn(i, "NO_INCONFIRM"));
				this.dsAutoSlip.setColumn(nrow, "TM_SLIP", tmSlip);
				this.dsAutoSlip.setColumn(nrow, "YN_SLIP", slipYn);
				this.dsAutoSlip.setColumn(nrow, "CD_CORP", this.cfCD_CORP.form.CDTextBox.value);
				this.dsAutoSlip.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);				
			}
		}	
	
	// 전표발행후처리
	} else {
		var nrow = this.dsAutoSlip.addRow();
		this.dsAutoSlip.setColumn(nrow, "TM_SLIP", tmSlip);
		this.dsAutoSlip.setColumn(nrow, "YN_SLIP", slipYn);
		this.dsAutoSlip.setColumn(nrow, "CD_CORP", this.cfCD_CORP.form.CDTextBox.value);
		this.dsAutoSlip.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);	
	}
	
	if (this.dsAutoSlip.rowcount == 0) return;

	var strSvcId    = "autoslip" + slipYn;
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "autoslip=dsAutoSlip";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); 	// 통신방법 정의 [생략가능]
}]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DFLPR_ETC1_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">select2</Col>
            <Col id="SP">DFLPR_ETC_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">combo</Col>
            <Col id="SP">DZXPR_COMBO_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">confirm</Col>
            <Col id="SP">DFLPR_ETC_INSERT</Col>
          </Row>
          <Row>
            <Col id="TARGET">update</Col>
            <Col id="SP">DFLPR_ETC_UPDATE</Col>
          </Row>
          <Row>
            <Col id="TARGET">delete</Col>
            <Col id="SP">DFLPR_ETC_DELETE</Col>
          </Row>
          <Row>
            <Col id="TARGET">autoslip</Col>
            <Col id="SP">DFLPR_ETC_AUTOSLIP</Col>
          </Row>
          <Row>
            <Col id="TARGET">autoslipx</Col>
            <Col id="SP">DFLPR_ETC_AUTOSLIPX</Col>
          </Row>
          <Row>
            <Col id="TARGET">comboTyCms</Col>
            <Col id="SP">DZXPR_COMBO_SELECT</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsYN_SLIP"/>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_CORP" type="STRING" size="256"/>
          <Column id="DT_TRADE" type="STRING" size="256"/>
          <Column id="NO_ACCOUNT" type="STRING" size="256"/>
          <Column id="YN_SLIP" type="STRING" size="256"/>
          <Column id="DS_CORP" type="STRING" size="256"/>
          <Column id="TY_CMS" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
      <Dataset id="dsList2"/>
      <Dataset id="dsTY_CMS"/>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.cfCD_CORP.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_CORP"/>
      <BindItem id="item2" compid="divSearch.form.calDT_TRADE" propid="value" datasetid="dsSearch" columnid="DT_TRADE"/>
      <BindItem id="item1" compid="divSearch.form.cfNO_ACCOUNT.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="NO_ACCOUNT"/>
      <BindItem id="item3" compid="divSearch.form.cboYN_SLIP" propid="value" datasetid="dsSearch" columnid="YN_SLIP"/>
      <BindItem id="item4" compid="divSearch.form.cboTY_CMS" propid="value" datasetid="dsSearch" columnid="TY_CMS"/>
    </Bind>
  </Form>
</FDL>
