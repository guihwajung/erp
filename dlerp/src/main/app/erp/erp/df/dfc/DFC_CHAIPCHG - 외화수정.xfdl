<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="form" width="1280" height="720" titletext="차입금변동정보" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg" text="">
          <Layouts>
            <Layout>
              <Static id="sta01" taborder="0" text="관리번호" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Div id="cfNO_CHAIP" CDTextWidth="80" taborder="1" left="sta01:0.0" top="10.0" width="269" height="24.0" url="cmm::cmmCodeFind.xfdl" text="" enable="false"/>
              <Div id="cfCD_CORP" CDTextWidth="70" taborder="2" left="cfNO_CHAIP:111" top="10.0" width="269" height="24.0" url="cmm::cmmCodeFind.xfdl" text="" enable="false"/>
              <Static id="sta04" taborder="3" text="법인코드" left="378" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabel"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.pvDT_FROM;

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	// 타화면에서 호출 및 파라미터 존재시 자동 조회
	if(!this.gfnIsNull(this.getOwnerFrame().NO_CHAIP)) {
		this.divSearch.form.cfCD_CORP.form.CDTextBox.set_value(this.getOwnerFrame().CD_CORP);	// 법인코드
		this.divSearch.form.cfCD_CORP.form.DSTextBox.set_value(this.getOwnerFrame().DS_CORP);	// 법인명
		this.divSearch.form.cfNO_CHAIP.form.CDTextBox.set_value(this.getOwnerFrame().NO_CHAIP);	// 관리번호
		this.divSearch.form.cfNO_CHAIP.form.DSTextBox.set_value(this.getOwnerFrame().NM_CHAIP);	// 차입명
		this.pvDT_FROM = this.getOwnerFrame().DT_FROM;											// 차입기간(from)
		this.FormBtns.Select.click();
	}

}; 

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 ************************************************************************/
this.fnSetButton = function() {
};

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
	 this.btnPlanCreat = this.gfnFormButtonAdd("btnPlanCreat", "fnPlanCreat", "계획생성");
	 this.btnPlanPerform = this.gfnFormButtonAdd("btnPlanPerform", "fnPlanPerform", "계획/실적");
	 //this.btnApproval = this.gfnFormButtonAdd("btnApproval", "fnApproval", "전자결재상신");
	 //this.btnApprovalSearch = this.gfnFormButtonAdd("btnApprovalSearch", "fnApprovalSearch", "전자결재조회");
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	
	this.ScfCD_CORP = this.divSearch.form.cfCD_CORP;	// 법인코드
	this.ScfNO_CHAIP = this.divSearch.form.cfNO_CHAIP;	// 관리번호
	this.dxGrid = this.divData.form.objGrid;
	this.grSearch = this.FormInfo.GR_SEARCH;			//FormInfo : 화면 권한정보
	this.cdGroup = this.gfnIsNull(this.AuthClient.CD_GROUP) ? "" : this.AuthClient.CD_GROUP;			// 그룹코드	
}

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	////this.ccfDeptCode.CodeFindName = "DFX_CFVENDOR";
	////this.ccfDeptCode.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	////this.ccfDeptCode.AfterCDTextChanged = "fnAfterCDTextChanged";
	this.ScfNO_CHAIP.CodeFindName = "DFX_CFNO_CHAIP";				// 관리번호(조회조건)
	this.ScfNO_CHAIP.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.ScfNO_CHAIP.AfterCDTextChanged = "fnAfterCDTextChanged";

	this.gfnGridInit(this.dxGrid, this.dsList, "DF", "DFC_CHAIPCHG");
	this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforuserDataSetParam";
	this.dsList.addEventHandler("oncolumnchanged", this.dsList_ColumnChanged, this);
	// BUTTON, BUTTON-IN 처리
	////this.dxGrid.ExpandUp = "fnGrid_ExpandUp";	
	
	// 권한체크는 없애기로 함 2019.08.07 
}

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {

	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("NO_CHAIP", "string");
	
	this.dsInsert = new Dataset();
	this.dsInsert.addColumn("NO_CHAIP", "string");
	this.dsInsert.addColumn("DT_CHANGE", "string");
	this.dsInsert.addColumn("RT_EZA", "bigdecimal");
	this.dsInsert.addColumn("RT_SPREAD", "bigdecimal");
	this.dsInsert.addColumn("TO_CHANGE", "string");
	this.dsInsert.addColumn("AM_CHAIP_CHG", "bigdecimal");
	this.dsInsert.addColumn("AM_SANG_CHG", "bigdecimal");
	this.dsInsert.addColumn("AM_SANG2_CHG", "bigdecimal");
	this.dsInsert.addColumn("AM_SANG3_CHG", "bigdecimal");
	this.dsInsert.addColumn("AM_SANG4_CHG", "bigdecimal");
	this.dsInsert.addColumn("AM_SANG5_CHG", "bigdecimal");		
	this.dsInsert.addColumn("RM_BIGO", "string");
	this.dsInsert.addColumn("DS_PURPOSE", "string");
	this.dsInsert.addColumn("DT_DECIDE", "string");
	this.dsInsert.addColumn("QN_ATTEND", "string");
	this.dsInsert.addColumn("QN_ABSENT", "string");
	this.dsInsert.addColumn("DS_ATTEND", "string");
	this.dsInsert.addColumn("DT_PUBLIC", "string");
	
	this.dsInsert.addColumn("TY_EZA", "string"); // 이자지급유형 20200408 추가
	this.dsInsert.addColumn("TY_INTLOCK", "string"); // 이자연동방식 20200408 추가
	this.dsInsert.addColumn("TY_DANBOK", "string"); // 이자지급방식 20200408 추가
	this.dsInsert.addColumn("TR_EZASTD", "string"); // 이자지급일 20200408 추가
	this.dsInsert.addColumn("TR_INTTERM", "string"); // 이자지급주기 20200408 추가
	this.dsInsert.addColumn("TY_SUNHOO", "string"); // 이자지급기준 20200408 추가
	this.dsInsert.addColumn("TY_EZACAL", "string"); // 이자계산방식 20200408 추가
	this.dsInsert.addColumn("TY_YANGDAN", "string"); // 이자일수계산 20200408 추가
	
	this.dsInsert.addColumn("CD_CURR", "string");
	this.dsInsert.addColumn("AM_CHAIP_CHG_KRW", "bigdecimal"); // 
	this.dsInsert.addColumn("AM_SANG_CHG_KRW", "bigdecimal"); // 

	this.dsInsert.addColumn("ID_USER", "string");

	this.dsUpdate = new Dataset();
	this.dsUpdate.addColumn("NO_CHAIP", "string");
	this.dsUpdate.addColumn("DT_CHANGE", "string");
	this.dsUpdate.addColumn("RT_EZA", "bigdecimal");
	this.dsUpdate.addColumn("RT_SPREAD", "bigdecimal");
	this.dsUpdate.addColumn("TO_CHANGE", "string");
	this.dsUpdate.addColumn("AM_CHAIP_CHG", "bigdecimal");
	this.dsUpdate.addColumn("AM_SANG_CHG", "bigdecimal");
	this.dsUpdate.addColumn("AM_SANG2_CHG", "bigdecimal");
	this.dsUpdate.addColumn("AM_SANG3_CHG", "bigdecimal");
	this.dsUpdate.addColumn("AM_SANG4_CHG", "bigdecimal");
	this.dsUpdate.addColumn("AM_SANG5_CHG", "bigdecimal");	
	this.dsUpdate.addColumn("RM_BIGO", "string");
	this.dsUpdate.addColumn("DS_PURPOSE", "string");
	this.dsUpdate.addColumn("DT_DECIDE", "string");
	this.dsUpdate.addColumn("QN_ATTEND", "string");
	this.dsUpdate.addColumn("QN_ABSENT", "string");
	this.dsUpdate.addColumn("DS_ATTEND", "string");
	this.dsUpdate.addColumn("DT_PUBLIC", "string");
	
	this.dsUpdate.addColumn("TY_EZA", "string"); // 이자지급유형 20200408 추가
	this.dsUpdate.addColumn("TY_INTLOCK", "string"); // 이자연동방식 20200408 추가
	this.dsUpdate.addColumn("TY_DANBOK", "string"); // 이자지급방식 20200408 추가
	this.dsUpdate.addColumn("TR_EZASTD", "string"); // 이자지급일 20200408 추가
	this.dsUpdate.addColumn("TR_INTTERM", "string"); // 이자지급주기 20200408 추가
	this.dsUpdate.addColumn("TY_SUNHOO", "string"); // 이자지급기준 20200408 추가
	this.dsUpdate.addColumn("TY_EZACAL", "string"); // 이자계산방식 20200408 추가
	this.dsUpdate.addColumn("TY_YANGDAN", "string"); // 이자일수계산 20200408 추가
	
    this.dsInsert.addColumn("CD_CURR", "string");
	this.dsInsert.addColumn("AM_CHAIP_CHG_KRW", "bigdecimal"); // 
	this.dsInsert.addColumn("AM_SANG_CHG_KRW", "bigdecimal"); // 
	
	this.dsUpdate.addColumn("ID_USER", "string");

	this.dsDelete = new Dataset();
	this.dsDelete.addColumn("NO_CHAIP", "string");
	this.dsDelete.addColumn("DT_CHANGE", "string");

	this.dsExcute = new Dataset();
	this.dsExcute.addColumn("NO_CHAIP", "string");
	this.dsExcute.addColumn("DT_DATE", "string");
	this.dsExcute.addColumn("YN_FIRST", "string");
	this.dsExcute.addColumn("ID_USER", "string");
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	this.dsSelect.setColumn(0, "NO_CHAIP", this.ScfNO_CHAIP.form.CDTextBox.value);
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc);   // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	var nrow = this.gfnGridAdd(this.dxGrid);
	this.dsList.set_enableevent(false);
	this.dsList.setColumn(nrow, "NO_CHAIP", this.ScfNO_CHAIP.form.CDTextBox.value);		// 차입번호
	this.dsList.setColumn(nrow, "CD_CURR", this.dsList.getColumn(nrow+1, "CD_CURR"));	// 통화 
	this.dsList.setColumn(nrow, "TO_CHANGE", this.dsList.getColumn(nrow+1, "TO_CHANGE"));	// 만기일자  
	this.dsList.set_enableevent(true);
	this.dsList.set_rowposition(nrow);
	this.dxGrid.setCellPos(1);	
}

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}

/*
 *	저장 버튼
 */
this.fnSave = function() {
	if (!this.gfnGridValidate(this.dxGrid)) return;

	this.dxGrid.updateToDataset();
	
	this.dsInsert.clearData();
	this.dsUpdate.clearData();
	this.dsDelete.clearData();
	
	//trace("this.dsList :: " + this.dsList.saveXML());
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "I":
				var nrow = this.dsInsert.addRow();
				this.dsInsert.setColumn(nrow, "NO_CHAIP", this.ScfNO_CHAIP.form.CDTextBox.value);
				//this.dsInsert.setColumn(nrow, "NO_CHAIP", this.dsList.getColumn(i, "NO_CHAIP"));
				this.dsInsert.setColumn(nrow, "DT_CHANGE", this.dsList.getColumn(i, "DT_CHANGE"));
				this.dsInsert.setColumn(nrow, "RT_EZA", this.dsList.getColumn(i, "RT_EZA"));
				this.dsInsert.setColumn(nrow, "RT_SPREAD", this.dsList.getColumn(i, "RT_SPREAD"));
				this.dsInsert.setColumn(nrow, "TO_CHANGE", this.dsList.getColumn(i, "TO_CHANGE"));
				this.dsInsert.setColumn(nrow, "AM_CHAIP_CHG", this.dsList.getColumn(i, "AM_CHAIP_CHG"));
				this.dsInsert.setColumn(nrow, "AM_SANG_CHG", this.gfnNvl(this.dsList.getColumn(i, "AM_SANG_CHG"), 0));
				this.dsInsert.setColumn(nrow, "AM_SANG2_CHG", this.gfnNvl(this.dsList.getColumn(i, "AM_SANG2_CHG"), 0));
				this.dsInsert.setColumn(nrow, "AM_SANG3_CHG", this.gfnNvl(this.dsList.getColumn(i, "AM_SANG3_CHG"), 0));
				this.dsInsert.setColumn(nrow, "AM_SANG4_CHG", this.gfnNvl(this.dsList.getColumn(i, "AM_SANG4_CHG"), 0));
				this.dsInsert.setColumn(nrow, "AM_SANG5_CHG", this.gfnNvl(this.dsList.getColumn(i, "AM_SANG5_CHG"), 0));
				this.dsInsert.setColumn(nrow, "RM_BIGO", this.dsList.getColumn(i, "RM_BIGO"));
				this.dsInsert.setColumn(nrow, "DS_PURPOSE", this.dsList.getColumn(i, "DS_PURPOSE"));
				this.dsInsert.setColumn(nrow, "DT_DECIDE", this.dsList.getColumn(i, "DT_DECIDE"));
				this.dsInsert.setColumn(nrow, "QN_ATTEND", this.dsList.getColumn(i, "QN_ATTEND"));
				this.dsInsert.setColumn(nrow, "QN_ABSENT", this.dsList.getColumn(i, "QN_ABSENT"));
				this.dsInsert.setColumn(nrow, "DS_ATTEND", this.dsList.getColumn(i, "DS_ATTEND"));
				this.dsInsert.setColumn(nrow, "DT_PUBLIC", this.dsList.getColumn(i, "DT_PUBLIC"));
				
				this.dsInsert.setColumn(nrow, "TY_EZA", this.dsList.getColumn(i, "TY_EZA"));
				this.dsInsert.setColumn(nrow, "TY_INTLOCK", this.dsList.getColumn(i, "TY_INTLOCK"));
				this.dsInsert.setColumn(nrow, "TY_DANBOK", this.dsList.getColumn(i, "TY_DANBOK"));
				this.dsInsert.setColumn(nrow, "TR_EZASTD", this.dsList.getColumn(i, "TR_EZASTD"));
				this.dsInsert.setColumn(nrow, "TR_INTTERM", this.dsList.getColumn(i, "TR_INTTERM"));
				this.dsInsert.setColumn(nrow, "TY_SUNHOO", this.dsList.getColumn(i, "TY_SUNHOO"));
				this.dsInsert.setColumn(nrow, "TY_EZACAL", this.dsList.getColumn(i, "TY_EZACAL"));
				this.dsInsert.setColumn(nrow, "TY_YANGDAN", this.dsList.getColumn(i, "TY_YANGDAN"));	
				this.dsInsert.setColumn(nrow, "CD_CURR", this.dsList.getColumn(i, "CD_CURR"));	
				
				this.dsInsert.setColumn(nrow, "AM_CHAIP_CHG_KRW", this.dsList.getColumn(i, "AM_CHAIP_CHG_KRW"));
				this.dsInsert.setColumn(nrow, "AM_SANG_CHG_KRW", this.gfnNvl(this.dsList.getColumn(i, "AM_SANG_CHG_KRW"), 0));
			
				this.dsInsert.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);

				break; 
				
			case "U":
				var nrow = this.dsUpdate.addRow();
				this.dsUpdate.setColumn(nrow, "NO_CHAIP", this.ScfNO_CHAIP.form.CDTextBox.value);
				this.dsUpdate.setColumn(nrow, "DT_CHANGE", this.dsList.getColumn(i, "DT_CHANGE"));
				this.dsUpdate.setColumn(nrow, "RT_EZA", this.dsList.getColumn(i, "RT_EZA"));
				this.dsUpdate.setColumn(nrow, "RT_SPREAD", this.dsList.getColumn(i, "RT_SPREAD"));
				this.dsUpdate.setColumn(nrow, "TO_CHANGE", this.dsList.getColumn(i, "TO_CHANGE"));
				this.dsUpdate.setColumn(nrow, "AM_CHAIP_CHG", this.dsList.getColumn(i, "AM_CHAIP_CHG"));
				this.dsUpdate.setColumn(nrow, "AM_SANG_CHG", this.gfnNvl(this.dsList.getColumn(i, "AM_SANG_CHG"), 0));
				this.dsUpdate.setColumn(nrow, "AM_SANG2_CHG", this.gfnNvl(this.dsList.getColumn(i, "AM_SANG2_CHG"), 0));
				this.dsUpdate.setColumn(nrow, "AM_SANG3_CHG", this.gfnNvl(this.dsList.getColumn(i, "AM_SANG3_CHG"), 0));		
				this.dsUpdate.setColumn(nrow, "AM_SANG4_CHG", this.gfnNvl(this.dsList.getColumn(i, "AM_SANG4_CHG"), 0));
				this.dsUpdate.setColumn(nrow, "AM_SANG5_CHG", this.gfnNvl(this.dsList.getColumn(i, "AM_SANG5_CHG"), 0));				
				this.dsUpdate.setColumn(nrow, "RM_BIGO", this.dsList.getColumn(i, "RM_BIGO"));
				this.dsUpdate.setColumn(nrow, "DS_PURPOSE", this.dsList.getColumn(i, "DS_PURPOSE"));
				this.dsUpdate.setColumn(nrow, "DT_DECIDE", this.dsList.getColumn(i, "DT_DECIDE"));
				this.dsUpdate.setColumn(nrow, "QN_ATTEND", this.dsList.getColumn(i, "QN_ATTEND"));
				this.dsUpdate.setColumn(nrow, "QN_ABSENT", this.dsList.getColumn(i, "QN_ABSENT"));
				this.dsUpdate.setColumn(nrow, "DS_ATTEND", this.dsList.getColumn(i, "DS_ATTEND"));
				this.dsUpdate.setColumn(nrow, "DT_PUBLIC", this.dsList.getColumn(i, "DT_PUBLIC"));
				
				this.dsUpdate.setColumn(nrow, "TY_EZA", this.dsList.getColumn(i, "TY_EZA"));
				this.dsUpdate.setColumn(nrow, "TY_INTLOCK", this.dsList.getColumn(i, "TY_INTLOCK"));
				this.dsUpdate.setColumn(nrow, "TY_DANBOK", this.dsList.getColumn(i, "TY_DANBOK"));
				this.dsUpdate.setColumn(nrow, "TR_EZASTD", this.dsList.getColumn(i, "TR_EZASTD"));
				this.dsUpdate.setColumn(nrow, "TR_INTTERM", this.dsList.getColumn(i, "TR_INTTERM"));
				this.dsUpdate.setColumn(nrow, "TY_SUNHOO", this.dsList.getColumn(i, "TY_SUNHOO"));
				this.dsUpdate.setColumn(nrow, "TY_EZACAL", this.dsList.getColumn(i, "TY_EZACAL"));
				this.dsUpdate.setColumn(nrow, "TY_YANGDAN", this.dsList.getColumn(i, "TY_YANGDAN"));	
				this.dsUpdate.setColumn(nrow, "CD_CURR", this.dsList.getColumn(i, "CD_CURR"));	
				this.dsUpdate.setColumn(nrow, "AM_CHAIP_CHG_KRW", this.dsList.getColumn(i, "AM_CHAIP_CHG_KRW"));
				this.dsUpdate.setColumn(nrow, "AM_SANG_CHG_KRW", this.gfnNvl(this.dsList.getColumn(i, "AM_SANG_CHG_KRW"), 0));
				
				this.dsUpdate.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);

				break;
				
			case "D":
				var nrow = this.dsDelete.addRow();
				this.dsDelete.setColumn(nrow, "NO_CHAIP", this.ScfNO_CHAIP.form.CDTextBox.value);
				this.dsDelete.setColumn(nrow, "DT_CHANGE", this.dsList.getColumn(i, "DT_CHANGE"));	
				
				break;
		}
	}
	
	if (this.dsInsert.rowcount == 0 && this.dsUpdate.rowcount == 0 && this.dsDelete.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "insert=dsInsert update=dsUpdate delete=dsDelete";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {
// 	if (this.gfnIsNull(this.ccfDeptCode.form.CDTextBox.text)) {
// 		this.gfnAlert("거래처코드가 입력되지 않았습니다.");
// 		this.ccfDeptCode.form.CDTextBox.setFocus();
// 		return false;
// 	}
	return true;
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);
		//trace(this.dsList.saveXML());
	}
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	} else if(svcID == "e_create") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	} else if(svcID == "selectExc") {
		if (errorCode == 0) {
			if (this.dsRtEx.rowcount > 0)
			{
				this.dsList.setColumn(this.dsList.rowposition , "RT_EXCH", this.dsRtEx.getColumn(0, "RT_KRW_EXCH"));
			}
		} else {
			this.gfnAlert(errorMsg);
		}	
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	
	var cdCorp = this.ScfCD_CORP.form.CDTextBox.value;
	
	switch(id) {
	
	// 관리번호(조회조건)	
	case "cfNO_CHAIP": 
		dsUserParam.setColumn(nrow, "CD_CORP", this.gfnIsNull(cdCorp) ? "" : cdCorp);
		break;
		
	default:

	}		
	
	return true;
} 

this.fnAfterCDTextChanged = function(id, codeFindData) {
	var arr = codeFindData;
	
	switch(id) {
	case "ccfDeptCode":
		
		if(arr.length > 0) {
			this.dsSearch.setColumn(0, "DS_DAEPYO", arr[0]["DS_DAEPYO"]);
		}		
		//trace(this.dsSearch.saveXML());
		break;		
		
	// 관리번호(조회조건)	
	case "cfNO_CHAIP": 
		this.fnSearchInit();
		break;
		
	default:
	}	
	return true;
	
} 

this.fnGrid_BeforuserDataSetParam = function(id, dsUserParam, nrow) {
	
	switch(id) {
	case "DFX_CFVENDOR": // 거래처코드
		dsUserParam.setColumn(nrow, "TY_VENDOR1", "거래처");
		dsUserParam.setColumn(nrow, "CD_CORP", "");
		break;
	default:
	}
	
	return true;
}

 this.fnGrid_ExpandUp = function(obj:nexacro.Grid, e:nexacro.GridMouseEventInfo) {

	var colnm = this.gfnGridGetBindColumnNameByIndex(obj, e.cell);
	
	if(colnm == "URL_PROOF") {
		// 최초 작성시엔 NO_SEQ가 없기 때문에 저장 후에 파일 첨부를 진행하여야 함.
		// CD_DIR에 넣어줄 값이 없기에 저장 후 진행!
		if(this.gfnGetFlag(this.dsList, e.row) == "I"){
			this.gfnAlert("저장 후 파일첨부 진행.");
			return false;
		}
	
		var fileManager = {};
		fileManager.CD_GUBUN = "DH01";
		fileManager.CD_DIR = [this.dsList.getColumn(e.row, "CD_OWNER")];
		fileManager.IS_READONLY = false;
		
// 		trace("fileManager.CD_GUBUN :: " + fileManager.CD_GUBUN);
// 		trace("fileManager.CD_DIR :: " + fileManager.CD_DIR);
// 		trace("fileManager.IS_READONLY :: " + fileManager.IS_READONLY);
		
		this.gfnFileManager(fileManager, "fnFileCallback");
	}
}

 
/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
 

//그리드 값변경 이벤트
this.dsList_ColumnChanged = function(obj:nexacro.NormalDataset, e:nexacro.DSColChangeEventInfo)
{
	trace("그리드 값변경 이벤트 " + e.columnid + "/" + e.newvalue)
	if (this.gfnGetFlag(this.dsList, e.row) == "#")
		return;

	//
	if(e.columnid == "CD_CURR" || e.columnid == "DT_CHANGE"){
		if(e.newvalue != e.oldvalue){
			if ( !this.gfnIsNull(this.dsList.getColumn(e.row , "CD_CURR")) && !this.gfnIsNull(this.dsList.getColumn(e.row , "DT_CHANGE")) )
			{
				this.fnSetRtExchange(); 				
			} 			
		}		
	}else if(e.columnid == "RT_EXCH")
	{	
		if (this.dsList.getColumn(e.row , "AM_CHAIP_CHG") > 0)
		{
			this.fnSetRtExchangeCallback(e.row, "AM_CHAIP_CHG");
		}	
		
	}else if (e.columnid == "AM_CHAIP_CHG") 	
	{
		var rtExch = this.dsList.getColumn(e.row, "RT_EXCH"); 
		this.dsList.setColumn(e.row, "AM_CHAIP_CHG_KRW" , this.fnGetTrunc(e.newvalue * rtExch));
		this.dsList.setColumn(e.row, "AM_SANG_CHG", 0);
		this.dsList.setColumn(e.row, "AM_SANG_CHG_KRW", 0); 
	}else if (e.columnid == "AM_SANG_CHG") 
	{
		this.fnSetAmOutKrw(e.row, e.newvalue, this.dsList.getColumn(e.row, "DT_CHANGE"));
		this.dsList.setColumn(e.row, "AM_CHAIP_CHG" , 0);
		this.dsList.setColumn(e.row, "AM_CHAIP_CHG_KRW" , 0);			
	}
}

/************************************************************************
 * 기타 이벤트
 ************************************************************************/
/*
 *	조회 조건 변경시 초기화
 */
this.fnSearchInit = function(obj,e) {
	if(e == null || (e.pretext != e.posttext)) {
		this.gfnSetFormStatus(this);
		this.gfnGridClear(this.dxGrid);
	}
};

this.ccfCorp_AfterCDTextChanged = function(id) {
// 	var arr = this.ccfCorp.form.SelectedData;
// 
// 	if (arr.length > 0) {
// 		var cd_system = arr[0]["CD_SYSTEM"];
// 		var ds_system = arr[0]["DS_SYSTEM"];
// 		var cd_module = arr[0]["CD_MODULE"];
// 		var ds_module = arr[0]["DS_MODULE"];
// 	}
};

this.fnDetail = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
}

this.fnDetailCallback = function(strId, val) {
};

// 계획생성
this.fnPlanCreat = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	if(!this.gfnGridIsRow(this.dxGrid)) return;
	this.gfnConfirm("차입금 계획생성 합니다.", "fnPlanCreatCallback");
}

// 계획생성 Callback
this.fnPlanCreatCallback = function(strId, val) {

	if(val == false) return;
	
	this.dsExcute.clearData();
	this.dsExcute.addRow();
	
	this.dsExcute.setColumn(0, "NO_CHAIP", this.ScfNO_CHAIP.form.CDTextBox.value);
	this.dsExcute.setColumn(0, "DT_DATE", this.dsList.getColumn(this.dsList.rowposition,"DT_CHANGE"));
	this.dsExcute.setColumn(0, "YN_FIRST", this.dsList.getColumn(this.dsList.rowposition,"YN_FIRST"));
	this.dsExcute.setColumn(0, "ID_USER", this.AuthClient.ID_USER);
	
	var strSvcId    = "e_create";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "e_create=dsExcute"; 
	var outData     = "dsResult=e_create0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]

}

// 계획/실적
this.fnPlanPerform = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	if (!this.gfnGridIsRow(this.dxGrid)) { return false; }
	
	var param = {};
	param.OWNER_ID = "DFC_CHAIP_REGISTRATION";
	
	param.CD_CORP = this.divSearch.form.cfCD_CORP.form.CDTextBox.value;
	param.DS_CORP = this.divSearch.form.cfCD_CORP.form.DSTextBox.value;
	param.DT_FROM = this.pvDT_FROM;
	param.DT_TO = this.gfnAddMonth(this.dsList.getColumn(this.dsList.rowposition, "TO_CHANGE"), 1);	
	param.NO_CHAIP = this.divSearch.form.cfNO_CHAIP.form.CDTextBox.value;
	param.NM_CHAIP = this.divSearch.form.cfNO_CHAIP.form.DSTextBox.value;	
	
	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DFC_CHAIP_PLAN", "", param);
}



// 환율 가져오기 
this.fnSetRtExchange = function ()
{
	this.dsExchange = new Dataset();
	this.dsExchange.addColumn("TY_GUBUN", "string");
	this.dsExchange.addColumn("CN_ROW", "int");
	this.dsExchange.addColumn("VALUE", "string");
	this.dsExchange.addColumn("MIN_VALUE", "string");
	this.dsExchange.addColumn("DT_BASE", "string");
	this.dsExchange.addColumn("CD_LOCAL_CURR", "string");
	this.dsExchange.addColumn("CD_EXEC_CURR", "string");
	
	this.dsExchange.addRow();
	this.dsExchange.setColumn(0, "TY_GUBUN", "");
	this.dsExchange.setColumn(0, "CN_ROW", 0);
	this.dsExchange.setColumn(0, "VALUE", "");
	this.dsExchange.setColumn(0, "MIN_VALUE", "");
	this.dsExchange.setColumn(0, "DT_BASE", this.dsList.getColumn(this.dsList.rowposition, "DT_CHANGE"));
	this.dsExchange.setColumn(0, "CD_LOCAL_CURR", "KRW");
	this.dsExchange.setColumn(0, "CD_EXEC_CURR", this.dsList.getColumn(this.dsList.rowposition, "CD_CURR"));
	
	var strSvcId    = "selectExc";
	var strSvcType  = "select";
	var inProc		= "_dsProc";
	var inData      = "selectExc=dsExchange";
	var outData     = "dsRtEx=selectExc0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); 	// 통신방법 정의 [생략가능]
						
	
};

//환율 계산 처리 
this.fnSetRtExchangeCallback = function(row , column)
{    
	var rtExchange = this.dsList.getColumn(row, "RT_EXCH");
	
	trace("fnSetRtExchangeCallback rtExchage=>" + rtExchange);
	
	var amContKrw = nexacro.toNumber(this.dsList.getColumn(row, column )) * rtExchange;
	
	this.dsList.setColumn(row, column+"_KRW", this.fnGetTrunc(amContKrw));
	
};

//상환금액 원화계산 
this.fnSetAmOutKrw = function(vRow, val, vDate){
	trace(" fnSetAmOutKrw=>" +vDate + ":" + val );
	var sExpr = this.ucFlag +" != 'D' && "+ this.ucFlag + " != 'DU'" + "&& DT_CHANGE < '" + vDate+ "' "  ;
	var amInKrw = this.dsList.getCaseSum(sExpr , "AM_CHAIP_CHG_KRW"); 
	var amOutKrw =  this.dsList.getCaseSum(sExpr , "AM_SANG_CHG_KRW"); 
	var amIn = this.dsList.getCaseSum(sExpr , "AM_CHAIP_CHG"); 
	var amOut =  this.dsList.getCaseSum(sExpr , "AM_SANG_CHG"); 
	var amJanKrw = amInKrw - amOutKrw; // 현잔액 원화 
	var amJan = amIn - amOut;   // 현잔액 차입통화 
	var amCurrent = val ;       // 현상환액 
	
	if ( amCurrent == 0 || this.gfnIsNull(amCurrent))
	{
		amCurrentKrw = 0; 
	} else {
		amCurrentKrw = this.fnGetTrunc(amJanKrw * amCurrent / amJan);
	}	
	
	trace(" fnSetAmOutKrw=>" +amCurrentKrw + ":" + amJanKrw);
	this.dsList.setColumn(vRow, "AM_SANG_CHG_KRW" ,  amCurrentKrw);
	
}

this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if ( e.oldvalue != e.newvalue ) {
		this.gfnSetFormStatus(this);
		this.gfnGridClear(this.dxGrid);
	}
};

// 원단위 절사
this.fnGetTrunc = function(amVal){
	var returnVal = this.gfnNvl(amVal, 0);
	if(returnVal > 0){
		returnVal = Math.floor(amVal/10) * 10;
	}
	return returnVal;
}
]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DFCPR_CHAIPCHG_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">insert</Col>
            <Col id="SP">DFCPR_CHAIPCHG_INSERT</Col>
          </Row>
          <Row>
            <Col id="TARGET">update</Col>
            <Col id="SP">DFCPR_CHAIPCHG_UPDATE</Col>
          </Row>
          <Row>
            <Col id="TARGET">delete</Col>
            <Col id="SP">DFCPR_CHAIPCHG_DELETE</Col>
          </Row>
          <Row>
            <Col id="TARGET">e_create</Col>
            <Col id="SP">DFCPR_CHAIPPLAN_CREATE</Col>
          </Row>
          <Row>
            <Col id="TARGET">selectExc</Col>
            <Col id="SP">DHXPR_CURRENCY_EXCHAGE</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="NO_CHAIP" type="STRING" size="256"/>
          <Column id="CD_CORP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
      <Dataset id="dsRtEx">
        <ColumnInfo>
          <Column id="CD_CODE" type="STRING" size="256"/>
          <Column id="DS_CODE" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CD_CODE">Y</Col>
            <Col id="DS_CODE">Y</Col>
          </Row>
          <Row>
            <Col id="CD_CODE">N</Col>
            <Col id="DS_CODE">N</Col>
          </Row>
        </Rows>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.cfNO_CHAIP.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="NO_CHAIP"/>
      <BindItem id="item1" compid="divSearch.form.cfCD_CORP.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_CORP"/>
    </Bind>
  </Form>
</FDL>
