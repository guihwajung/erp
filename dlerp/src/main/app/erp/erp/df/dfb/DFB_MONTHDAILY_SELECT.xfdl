<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="계좌별거래내역조회" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg">
          <Layouts>
            <Layout>
              <Static id="sta00" taborder="3" text="법인코드" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Div id="cfCD_CORP" CDTextWidth="50" taborder="0" left="sta00:0.0" top="10.0" width="282" height="24.0" url="cmm::cmmCodeFind.xfdl" text=""/>
              <Static id="staCD_PERIOD" taborder="4" text="기준년월" top="10.0" width="92.0" height="24.0" left="cfCD_CORP:0.0" cssclass="sta_WF_SchLabelE"/>
              <Static id="sta01" taborder="5" text="계좌정보" left="staCD_PERIOD:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Div id="cfNO_ACCOUNT" CDTextWidth="120" taborder="2" left="sta01:0.0" top="10.0" width="282" height="24.0" url="cmm::cmmCodeFind.xfdl" text=""/>
              <Div id="calYM_ACCOUNT" taborder="1" left="cfNO_ACCOUNT:0.0" top="10.0" width="80" height="24.0" url="cmm::cmmCalMM.xfdl"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="1" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();				
	this.fnSetCombo();
	
	// 기준일자 포커스추가
	this.cfCD_CORP.form.CDTextBox.setFocus();
}; 

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 ************************************************************************/
this.fnSetButton = function() {
	// 입력,저장,삭제 버튼 비활성화 처리
// 	this.FormBtns.Add.set_enable(false);
// 	this.FormBtns.Save.set_enable(false);
// 	this.FormBtns.Del.set_enable(false);
};

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
	//this.btnPrintTrnsfRcpt = this.gfnFormButtonAdd("btnPrintTrnsfRcpt", "fnPrintTrnsfRcpt", "이체영수증출력"); 
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	
	this.cfCD_CORP = this.divSearch.form.cfCD_CORP;				// 법인코드
	this.calYM_ACCOUNT = this.divSearch.form.calYM_ACCOUNT;		// 기준일자
	//this.cboCD_ACCOUNT = this.divSearch.form.cboCD_ACCOUNT;		// 계정코드
	this.cfNO_ACCOUNT = this.divSearch.form.cfNO_ACCOUNT;		// 계좌정보
	
	this.dxGrid = this.divData.form.objGrid;				// 그리드
	this.grSearch = this.FormInfo.GR_SEARCH;				// 권한
	this.idGroup = this.FormInfo.ID_GROUP;					// 그룹코드(그룹ID)
}

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
		
	var vToday = this.gfnGetDate().substr(0,6);
	this.calYM_ACCOUNT.form.TextBox.set_value(vToday);		
	
	
	// 코드파인드 정의 및 펑션 init
	this.cfCD_CORP.CodeFindName = "DZX_CFCORP";					// 법인코드
	this.cfNO_ACCOUNT.CodeFindName = "DFX_CFACCOUNTNO_SUJI";	// 계좌정보
	
	this.cfCD_CORP.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.cfNO_ACCOUNT.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.cfCD_CORP.AfterCDTextChanged = "codefind_AfterCDTextChanged";
	this.cfNO_ACCOUNT.AfterCDTextChanged = "codefind_AfterCDTextChanged";
	

	//그리드 init 및 그리드펑션 int
	this.gfnGridInit(this.dxGrid, this.dsList, "DF", "DFB_MONTHDAILY_SELECT");
	

	// 법인코드 init
	if (this.gfnIsNull(this.cfCD_CORP.form.CDTextBox.value)) {
		this.cfCD_CORP.form.DSTextBox.set_value(this.AuthClient.DS_CORP); 
		this.cfCD_CORP.form.CDTextBox.set_value(this.AuthClient.CD_CORP);	
	}	

	
	
	// 권한체크
// 	if (nexacro.toNumber(this.grSearch) >= 2) {
// 		this.cfCD_CORP.set_enable(false);
// 	}	
}

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {

	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("YM_ACCOUNT", "string");
	//this.dsSelect.addColumn("CD_ACCOUNT", "string");
	this.dsSelect.addColumn("NO_ACCOUNT", "string");
	this.dsSelect.addColumn("CD_CORP", "string");

}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	this.dsSelect.setColumn(0, "YM_ACCOUNT", this.calYM_ACCOUNT.form.TextBox.value);
	//this.dsSelect.setColumn(0, "CD_ACCOUNT", this.cboCD_ACCOUNT.value);
	this.dsSelect.setColumn(0, "NO_ACCOUNT", this.cfNO_ACCOUNT.form.CDTextBox.value);
	this.dsSelect.setColumn(0, "CD_CORP", this.cfCD_CORP.form.CDTextBox.value);
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
}

/*
 *	삭제 버튼
 */
this.fnDel = function() {
}

/*
 *	저장 버튼
 */
this.fnSave = function() {
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {
	if (this.gfnIsNull(this.calYM_ACCOUNT.form.TextBox.value)) {
		this.gfnAlert("기준년월를 입력하세요!");
		this.calYM_ACCOUNT.form.TextBox.setFocus();
		return false;
	}
	
	return true;
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);
	}
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	} else if(svcID == "combo"){
// 		var iRow = this.dsCD_ACCOUNT.insertRow(0);
// 		this.dsCD_ACCOUNT.setColumn(iRow, "CD_CODE", "");
// 		this.dsCD_ACCOUNT.setColumn(iRow, "DS_CODE", "전체");
// 		this.cboCD_ACCOUNT.set_index(0);
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	switch(id) {
	
	case "cfCD_CORP": // 법인코드
		dsUserParam.setColumn(nrow, "CD_GROUP", this.gfnIsNull(this.AuthClient.CD_GROUP) ? "" : this.AuthClient.CD_GROUP);
		break;
		
	case "cfNO_ACCOUNT": // 계좌정보
		//dsUserParam.setColumn(nrow, "CD_GROUP", "");
		dsUserParam.setColumn(nrow, "CD_GROUP", this.idGroup);
		dsUserParam.setColumn(nrow, "CD_CORP", this.cfCD_CORP.form.CDTextBox.value);
		break;
		
	default:
	}	
	return true;	
	
} 
 
this.codefind_AfterCDTextChanged = function(id) {
	switch(id) {
	
	case "cfCD_CORP": // 법인코드
		this.fnSearchInit();
		break;
		
	case "cfNO_ACCOUNT": // 계좌정보
// 		if (this.gfnIsNull(this.cboCD_ACCOUNT.text)) {
// 			this.gfnAlert("계정코드를 먼저 선택해야 합니다.");
// 			this.cboCD_ACCOUNT.setFocus();
// 			return false;
// 		}
		this.fnSearchInit();
		break;
		
	default:
	}	
	return true;
} 


 
this.fnGrid_BeforuserDataSetParam = function(id, dsUserParam, nrow) {
}

this.fnGrid_AfterCDTextChanged = function(id, codeFindData) {
};
 
/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
 
/************************************************************************
 * 기타 이벤트
 ************************************************************************/
/*
 *	조회 조건 변경시 초기화
 */
this.fnSearchInit = function(obj,e) {
	if(e == null || (e.pretext != e.posttext)) {
		this.gfnSetFormStatus(this);
		this.gfnGridClear(this.dxGrid);
	}
};


this.divSearch_cboCD_ACCOUNT_onitemchanged = function(obj:nexacro.Combo,e:nexacro.ItemChangeEventInfo)
{
// 	this.cfNO_ACCOUNT.form.CDTextBox.set_value("");
// 	this.cfNO_ACCOUNT.form.DSTextBox.set_value("");
// 	this.fnSearchInit();
};


this.fnSetCombo = function() {
	
// 	this.dsCombo = new Dataset();
// 	this.dsCombo.addColumn("CD_SYSTEM", "string");
// 	this.dsCombo.addColumn("CD_TYPE", "string");
// 	
// 	// 계좌구분
// 	this.dsCombo.addRow();
// 	this.dsCombo.setColumn(0, "CD_SYSTEM", "DF");
// 	this.dsCombo.setColumn(0, "CD_TYPE", "A8");
// 	
// 	var strSvcId    = "combo";
// 	var strSvcType  = "select";
// 	var inProc		= "_dsProc";
// 	var inData      = "combo=dsCombo";
// 	var outData     = "dsCD_ACCOUNT=combo0";
// 	var strArg      = "";
// 	var callBackFnc = "fnCallback";
// 	
// 	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
// 						strSvcType , 	// transaction을 요청할 구분
// 						inProc,			// Procedure 정보 Dataset 이름
// 						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
// 						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
// 						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
// 						callBackFnc); // 통신방법 정의 [생략가능]
};]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DFBPR_MONTHDAILY_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">combo</Col>
            <Col id="SP">DZXPR_COMBO_SELECT</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsCD_ACCOUNT"/>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.calYM_ACCOUNT.form.TextBox" propid="value" datasetid="dsSearch" columnid="YM_ACCOUNT"/>
    </Bind>
  </Form>
</FDL>
