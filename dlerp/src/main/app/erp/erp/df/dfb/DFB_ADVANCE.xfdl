<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="form" width="1280" height="720" titletext="선지급등록" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg">
          <Layouts>
            <Layout>
              <Static id="sta04" taborder="3" text="법인코드" left="0" top="10.0" width="92" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Div id="cfCD_CORP" CDTextWidth="50" taborder="0" left="sta04:0.0" top="10.0" width="269" height="24.0" url="cmm::cmmCodeFind.xfdl" text=""/>
              <Static id="sta00" taborder="4" text="지급예정일자" left="cfCD_CORP:0.0" top="10.0" width="118.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Calendar id="calDT_FROM" taborder="1" left="sta00:0.0" top="10.0" width="105" height="24.0" dateformat="yyyy-MM-dd" editformat="yyyyMMdd" autoselect="true" onchanged="fnSearchInit"/>
              <Static id="staCD_TILDE" taborder="5" text="~" left="calDT_FROM:0.0" top="10.0" width="30.0" height="24.0" cssclass="sta_WF_AC"/>
              <Calendar id="calDT_TO" taborder="2" left="staCD_TILDE:0.0" top="10.0" width="105" height="24.0" dateformat="yyyy-MM-dd" editformat="yyyyMMdd" autoselect="true" onchanged="fnSearchInit"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="1" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0" oncellclick="divData_objGrid_oncellclick"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();				
	this.fnSetCombo();
	
	if ( !this.gfnIsNull(this.getOwnerFrame().CD_CORP) ) {
		this.dsSearch.set_enableevent(false);
		
		this.dsSearch.setColumn(0, "CD_CORP", this.getOwnerFrame().CD_CORP);
		this.cfCD_CORP.form.DSTextBox.set_value(this.getOwnerFrame().DS_CORP);
		this.dsSearch.setColumn(0, "DT_FROM", this.getOwnerFrame().DT_REQ_FR);
		this.dsSearch.setColumn(0, "DT_TO", this.getOwnerFrame().DT_REQ_TO);
		
		this.dsSearch.set_enableevent(true);
		
		this.FormBtns.Select.click();
	}	
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 ************************************************************************/
this.fnSetButton = function() {

};

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
// 	this.btnSlipPub = this.gfnFormButtonAdd("btnSlipPub", "fnSlipPub", "전표발행"); 
// 	this.btnSlipSelect = this.gfnFormButtonAdd("btnSlipSelect", "fnSlipSelect", "전표조회"); 
// 	this.btnSlipCncl = this.gfnFormButtonAdd("btnSlipCncl", "fnSlipCncl", "전표취소"); 
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	
	// 조회조건
	this.cfCD_CORP  = this.divSearch.form.cfCD_CORP;	// 법인코드
	this.calDT_FROM = this.divSearch.form.calDT_FROM;	// 지급예정일자(from)
	this.calDT_TO = this.divSearch.form.calDT_TO;		// 지급예정일자(to)
	
	this.dxGrid = this.divData.form.objGrid;													// 그리드
	this.grSearch = this.FormInfo.GR_SEARCH;													// 권한?
	this.cdGroup = this.gfnIsNull(this.AuthClient.CD_GROUP) ? "" : this.AuthClient.CD_GROUP;	// 그룹코드	
}

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
		
	this.cfCD_CORP.CodeFindName = "DZX_CFCORP";					// 법인코드(조회조건)
	
	this.cfCD_CORP.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.cfCD_CORP.AfterCDTextChanged = "fnAfterCDTextChanged";

	// 그리드 초기화
	this.gfnGridInit(this.dxGrid, this.dsList, "DF", "DFB_ADVANCE");		
	this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforuserDataSetParam";
	this.dxGrid.AfterCDTextChanged = "fnGrid_AfterCDTextChanged";

	// 법인코드 init
	if (this.gfnIsNull(this.cfCD_CORP.form.CDTextBox.value)) {
		this.cfCD_CORP.form.DSTextBox.set_value(this.AuthClient.DS_CORP); 
		this.cfCD_CORP.form.CDTextBox.set_value(this.AuthClient.CD_CORP);	
	}	

	var today = this.gfnGetDate();
	this.dsSearch.setColumn(0, "DT_FROM", today);
	this.dsSearch.setColumn(0, "DT_TO", today);
	
	
	// 권한체크
	if (nexacro.toNumber(this.grSearch) >= 2) {
		this.cfCD_CORP.set_enable(false);
	}	
	
	// 법인코드 포커스추가
	this.cfCD_CORP.form.CDTextBox.setFocus();	
}

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {

	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_CORP", "string");
	this.dsSelect.addColumn("DT_FROM", "string");
	this.dsSelect.addColumn("DT_TO", "string");

	this.dsInsert = new Dataset();
	this.dsInsert.addColumn("CD_CORP", "string");
	this.dsInsert.addColumn("TY_PAYMENT2", "string");
	this.dsInsert.addColumn("CD_VENDOR", "string");
	this.dsInsert.addColumn("TY_VENDOR", "string");
	this.dsInsert.addColumn("CD_DEPTINVEST", "string");
	this.dsInsert.addColumn("DT_REQ", "string");
	this.dsInsert.addColumn("AM_REQ", "bigdecimal");
	this.dsInsert.addColumn("NO_ACCOUNT", "string");
	this.dsInsert.addColumn("TY_GUBUN", "string");
	this.dsInsert.addColumn("CD_BANK", "string");
	this.dsInsert.addColumn("CD_SIDEBANK", "string");
	this.dsInsert.addColumn("CD_SUJI", "string");
	this.dsInsert.addColumn("NO_CONSULT", "string");
	this.dsInsert.addColumn("RM_BIGO", "string");
	this.dsInsert.addColumn("ID_USER", "string");

	this.dsUpdate = new Dataset();
	this.dsUpdate.addColumn("CD_CORP", "string");
	this.dsUpdate.addColumn("TY_PAYMENT2", "string");
	this.dsUpdate.addColumn("CD_VENDOR", "string");
	this.dsUpdate.addColumn("TY_VENDOR", "string");
	this.dsUpdate.addColumn("CD_DEPTINVEST", "string");
	this.dsUpdate.addColumn("DT_REQ", "string");
	this.dsUpdate.addColumn("AM_REQ", "bigdecimal");
	this.dsUpdate.addColumn("NO_ACCOUNT", "string");
	this.dsUpdate.addColumn("TY_GUBUN", "string");
	this.dsUpdate.addColumn("CD_BANK", "string");
	this.dsUpdate.addColumn("CD_SIDEBANK", "string");
	this.dsUpdate.addColumn("CD_SUJI", "string");
	this.dsUpdate.addColumn("NO_CONSULT", "string");
	this.dsUpdate.addColumn("RM_BIGO", "string");
	this.dsUpdate.addColumn("NO_REQUEST", "bigdecimal");
	this.dsUpdate.addColumn("ID_USER", "string");

	this.dsDelete = new Dataset();
	this.dsDelete.addColumn("NO_REQUEST", "bigdecimal");
	this.dsDelete.addColumn("ID_USER", "string");	
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	this.dsSelect.setColumn(0, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
	this.dsSelect.setColumn(0, "DT_FROM", this.dsSearch.getColumn(0, "DT_FROM"));
	this.dsSelect.setColumn(0, "DT_TO", this.dsSearch.getColumn(0, "DT_TO"));
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); 	// 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	var nRow = this.gfnGridAdd(this.dxGrid);
	this.dsList.setColumn(nRow, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
	this.dsList.setColumn(nRow, "DS_CORP", this.dsSearch.getColumn(0, "DS_CORP"));
}

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}

/*
 *	저장 버튼
 */
this.fnSave = function() {
	if (!this.gfnGridValidate(this.dxGrid)) return;

	this.dxGrid.updateToDataset();
	
	this.dsInsert.clearData();
	this.dsUpdate.clearData();
	this.dsDelete.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
				
			case "I":
				var nrow = this.dsInsert.addRow();
				this.dsInsert.setColumn(nrow, "CD_CORP", this.dsList.getColumn(i, "CD_CORP"));
				this.dsInsert.setColumn(nrow, "TY_PAYMENT2", this.dsList.getColumn(i, "TY_PAYMENT2"));
				this.dsInsert.setColumn(nrow, "CD_VENDOR", this.dsList.getColumn(i, "CD_VENDOR"));
				this.dsInsert.setColumn(nrow, "TY_VENDOR", this.dsList.getColumn(i, "TY_VENDOR"));
				this.dsInsert.setColumn(nrow, "CD_DEPTINVEST", this.dsList.getColumn(i, "CD_DEPTINVEST"));
				this.dsInsert.setColumn(nrow, "DT_REQ", this.dsList.getColumn(i, "DT_REQ"));
				this.dsInsert.setColumn(nrow, "AM_REQ", this.dsList.getColumn(i, "AM_REQ"));
				this.dsInsert.setColumn(nrow, "NO_ACCOUNT", this.dsList.getColumn(i, "NO_ACCOUNT"));
				this.dsInsert.setColumn(nrow, "TY_GUBUN", this.dsList.getColumn(i, "TY_GUBUN"));
				this.dsInsert.setColumn(nrow, "CD_BANK", this.dsList.getColumn(i, "CD_BANK"));
				this.dsInsert.setColumn(nrow, "CD_SIDEBANK", this.dsList.getColumn(i, "CD_SIDEBANK"));
				this.dsInsert.setColumn(nrow, "CD_SUJI", this.dsList.getColumn(i, "CD_SUJI"));
				this.dsInsert.setColumn(nrow, "NO_CONSULT", this.dsList.getColumn(i, "NO_CONSULT"));
				this.dsInsert.setColumn(nrow, "RM_BIGO", this.dsList.getColumn(i, "RM_BIGO"));
 				this.dsInsert.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
				break;
				
			case "U":
				var nrow = this.dsUpdate.addRow();
				this.dsUpdate.setColumn(nrow, "CD_CORP", this.dsList.getColumn(i, "CD_CORP"));
				this.dsUpdate.setColumn(nrow, "TY_PAYMENT2", this.dsList.getColumn(i, "TY_PAYMENT2"));
				this.dsUpdate.setColumn(nrow, "CD_VENDOR", this.dsList.getColumn(i, "CD_VENDOR"));
				this.dsUpdate.setColumn(nrow, "TY_VENDOR", this.dsList.getColumn(i, "TY_VENDOR"));
				this.dsUpdate.setColumn(nrow, "CD_DEPTINVEST", this.dsList.getColumn(i, "CD_DEPTINVEST"));
				this.dsUpdate.setColumn(nrow, "DT_REQ", this.dsList.getColumn(i, "DT_REQ"));
				this.dsUpdate.setColumn(nrow, "AM_REQ", this.dsList.getColumn(i, "AM_REQ"));
				this.dsUpdate.setColumn(nrow, "NO_ACCOUNT", this.dsList.getColumn(i, "NO_ACCOUNT"));
				this.dsUpdate.setColumn(nrow, "TY_GUBUN", this.dsList.getColumn(i, "TY_GUBUN"));
				this.dsUpdate.setColumn(nrow, "CD_BANK", this.dsList.getColumn(i, "CD_BANK"));
				this.dsUpdate.setColumn(nrow, "CD_SIDEBANK", this.dsList.getColumn(i, "CD_SIDEBANK"));
				this.dsUpdate.setColumn(nrow, "CD_SUJI", this.dsList.getColumn(i, "CD_SUJI"));
				this.dsUpdate.setColumn(nrow, "NO_CONSULT", this.dsList.getColumn(i, "NO_CONSULT"));
				this.dsUpdate.setColumn(nrow, "RM_BIGO", this.dsList.getColumn(i, "RM_BIGO"));
				this.dsUpdate.setColumn(nrow, "NO_REQUEST", this.dsList.getColumn(i, "NO_REQUEST"));
 				this.dsUpdate.setColumn(nrow, "ID_UPDATE", this.AuthClient.ID_USER);
				break;
				
			case "D":
				var nrow = this.dsDelete.addRow();
				this.dsDelete.setColumn(nrow, "NO_REQUEST", this.dsList.getColumn(i, "NO_REQUEST"));
				this.dsDelete.setColumn(nrow, "ID_UPDATE", this.AuthClient.ID_USER);
				break;
		}
	}
	
	if (this.dsInsert.rowcount == 0 && this.dsUpdate.rowcount == 0 && this.dsDelete.rowcount == 0) return;
	
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "insert=dsInsert update=dsUpdate delete=dsDelete";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); 	// 통신방법 정의 [생략가능]
}


/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {	

	if (this.gfnIsNull(this.calDT_FROM.value)) {
		this.gfnAlert("지급예정일자(FROM)을 입력 하세요.");
		this.calDT_FROM.setFocus();
		return false;
	}
	
	if (this.gfnIsNull(this.calDT_TO.value)) {
		this.gfnAlert("지급예정(TO)을 입력 하세요.");
		this.calDT_TO.setFocus();
		return false;
	}

	if ( !this.gfnIsNull(this.calDT_FROM.value) && !this.gfnIsNull(this.calDT_TO.value) ) {
		if ( this.calDT_FROM.value > this.calDT_TO.value ) {
			this.gfnAlert("지급예정일자가 잘못 입력 되었습니다..");
			this.calDT_FROM.setFocus();
			return false;
		}
	}

	return true;
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);
		
	}
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
		
	
	} else if(svcID == "combo") {
	
	}
}


/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {

	var cdCorp = this.cfCD_CORP.form.CDTextBox.value;
	
	switch(id) {
	
	// 법인코드(조회조건)
	case "cfCD_CORP": 	
		dsUserParam.setColumn(nrow, "CD_GROUP", this.cdGroup);	
		break;
		
	default:
	}	
	return true;
}
 
this.fnAfterCDTextChanged = function(id, codeFindData) {
	
	var arr = codeFindData;
	
	switch(id) {
	
	// 법인코드(조회조건)
	case "cfCD_CORP":
		break;		
		
	default:
	}	
	return true;
}


 
this.fnGrid_BeforuserDataSetParam = function(id, dsUserParam, nrow) {
	var cdCorp = this.gfnIsNull(this.dsList.getColumn(this.dsList.rowposition, "CD_CORP")) ? "" : this.dsList.getColumn(this.dsList.rowposition, "CD_CORP");

	if (id == "DZX_CFCORP") {
		dsUserParam.setColumn(nrow, "CD_GROUP", this.cdGroup);
	}

	if (id == "DFX_CFVENDOR") {
		dsUserParam.setColumn(nrow, "TY_VENDOR1", "거래처");	
		dsUserParam.setColumn(nrow, "CD_CORP", this.gfnIsNull(cdCorp) ? this.dsSearch.getColumn(0, "CD_CORP") : cdCorp);	
	}	
	
	if (id == "DFX_CFACNTUNIT") {
		dsUserParam.setColumn(nrow, "CD_GROUP", this.cdGroup);
		dsUserParam.setColumn(nrow, "CD_CORP", this.gfnIsNull(cdCorp) ? this.dsSearch.getColumn(0, "CD_CORP") : cdCorp);	
	}
	
	// 계좌(현금)
	if (id == "DFX_CFACCOUNTMATCH") {
		dsUserParam.setColumn(nrow, "TY_VENDOR", this.dsList.getColumn(this.dsList.rowposition, "TY_VENDOR"));
		dsUserParam.setColumn(nrow, "CD_PAY", this.dsList.getColumn(this.dsList.rowposition, "CD_VENDOR"));
		dsUserParam.setColumn(nrow, "TY_CASH", "C");
		dsUserParam.setColumn(nrow, "CD_CORP", cdCorp);
	} 
	
	// 수지
	if (id == "DFX_CFSUJICODE") {
		dsUserParam.setColumn(nrow, "TY_INOUT", "O");	
		dsUserParam.setColumn(nrow, "YN_USE", "Y");		
	}	
	
	// 원안품의
	if (id == "DFX_CFCONSULTDTL") {
		dsUserParam.setColumn(nrow, "CD_DEPT", this.dsList.getColumn(this.dsList.rowposition, "CD_DEPTINVEST"));		
		dsUserParam.setColumn(nrow, "DT_REQUEST", this.dsList.getColumn(this.dsList.rowposition, "DT_REQ"));	
	}	
	
	return true;
}

this.fnGrid_AfterCDTextChanged = function(id, codeFindData) {
	var arr = codeFindData;
	
	if (id == "DZX_CFCORP") {
	}
	
	if (id == "DFX_CFACNTUNIT") {
	}

	if (id == "DFX_CFVENDOR") {
		//this.dsList.setColumn(this.dsList.rowposition, "TY_VENDOR", arr[0]["TY_VENDOR"]);
	}	
	
	// 계좌(현금)
	if (id == "DFX_CFACCOUNTMATCH") {
	} 
	
	// 수지
	if (id == "DFX_CFSUJICODE") {
	}	
	
	// 원안품의
	if (id == "DFX_CFCONSULTDTL") {
	}	
};
 
/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
 
/************************************************************************
 * 기타 이벤트
 ************************************************************************/
/*
 *	조회 조건 변경시 초기화
 */
this.fnSearchInit = function(obj,e) {
	if(e == null || (e.pretext != e.posttext)) {
		this.gfnSetFormStatus(this);
		this.gfnGridClear(this.dxGrid);
	}
};


// 공통코드콤보
this.fnSetCombo = function() {
};


this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
	}
};
]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DFBPR_ADVANCE_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">insert</Col>
            <Col id="SP">DFBPR_ADVANCE_INSERT</Col>
          </Row>
          <Row>
            <Col id="TARGET">update</Col>
            <Col id="SP">DFBPR_ADVANCE_UPDATE</Col>
          </Row>
          <Row>
            <Col id="TARGET">delete</Col>
            <Col id="SP">DFBPR_ADVANCE_DELETE</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_CORP" type="STRING" size="256"/>
          <Column id="DT_FROM" type="STRING" size="256"/>
          <Column id="DT_TO" type="STRING" size="256"/>
          <Column id="DS_CORP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.cfCD_CORP.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_CORP"/>
      <BindItem id="item2" compid="divSearch.form.calDT_FROM" propid="value" datasetid="dsSearch" columnid="DT_FROM"/>
      <BindItem id="item3" compid="divSearch.form.calDT_TO" propid="value" datasetid="dsSearch" columnid="DT_TO"/>
      <BindItem id="item1" compid="divSearch.form.cfCD_CORP.form.DSTextBox" propid="value" datasetid="dsSearch" columnid="DS_CORP"/>
    </Bind>
  </Form>
</FDL>
