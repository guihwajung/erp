<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="법인카드이력관리" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg" formscrolltype="none">
          <Layouts>
            <Layout>
              <Static id="staCD_CORP" taborder="3" text="법인코드" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfCD_CORP" CDTextWidth="30" taborder="0" left="staCD_CORP:0.0" top="10.0" width="180" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
              <Static id="staNO_CARD" taborder="2" text="카드번호" left="ccfCD_CORP:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfNO_CARD" CDTextWidth="130" taborder="1" left="staNO_CARD:0.0" top="10.0" width="250" height="24.0" url="cmm::cmmCodeFind.xfdl" DSTextWidth="100"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();	
	
	if(!this.gfnIsNull(this.getOwnerFrame().CD_CORP) && !this.gfnIsNull(this.getOwnerFrame().NO_CARD)) {
		this.ccfCD_CORP.form.CDTextBox.set_value(this.getOwnerFrame().CD_CORP);
		this.ccfNO_CARD.form.CDTextBox.set_value(this.getOwnerFrame().NO_CARD);
		this.ccfCD_CORP.form.DSTextBox.set_value(this.getOwnerFrame().DS_CORP);
		this.ccfNO_CARD.form.DSTextBox.set_value(this.getOwnerFrame().NM_CARDSA);
		this.FormBtns.Select.click();
	}
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.ccfCD_CORP = this.divSearch.form.ccfCD_CORP;
	this.ccfNO_CARD = this.divSearch.form.ccfNO_CARD;
	this.dxGrid = this.divData.form.objGrid;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	this.ccfCD_CORP.CodeFindName = "DZX_CFCORP";
	this.ccfCD_CORP.AfterCDTextChanged = "codefind_AfterCDTextChanged";	
	
	this.ccfNO_CARD.CodeFindName = "DFX_CFCARD_CODEFIND";
	this.ccfNO_CARD.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.ccfNO_CARD.AfterCDTextChanged = "codefind_AfterCDTextChanged";	
	
	// 그리드 초기화
	this.gfnGridInit(this.dxGrid, this.dsList, "DF", "DFB_CARDHIS");
	
	// 셀 수정가능 여부
	//this.dxGrid.EnterCell = "fnGrid_EnterCell";
	
	// 셀 변경 후 이벤트
	//this.dxGrid.AfterEdit = "fnGrid_AfterEdit";
	
	// 그리드 코드파인드 설정
	this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforeUserDataSetParam";
	
	// BUTTON, BUTTON-IN 처리
	this.dxGrid.addEventHandler("onexpandup", this.fnGrid_ExpandUp, this);
	
};

this.fnGrid_BeforeUserDataSetParam = function(id, dsUserParam, nrow) {
    if(this.gfnIsNull(this.ccfCD_CORP.form.CDTextBox.text)) {
	   this.gfnAlert("법인코드를 먼저 입력하세요.");
	   return false;
    }
	
	switch(id) {
	case "DFX_CFCARD_CODEFIND": // 카드번호
		dsUserParam.setColumn(nrow, "CD_SUABUN", "");
		dsUserParam.setColumn(nrow, "CD_DEPT", ""); 
		dsUserParam.setColumn(nrow, "CD_CORP", this.ccfCD_CORP.form.CDTextBox.text);
		break;
	case "DFX_CFACNTUNIT": // 부서코드
		dsUserParam.setColumn(nrow, "CD_GROUP", this.FormInfo.ID_GROUP);
		dsUserParam.setColumn(nrow, "CD_CORP", this.ccfCD_CORP.form.CDTextBox.text);
		break;
	case "DFX_CFINSA": // 사용자사번
		dsUserParam.setColumn(nrow, "CD_CORP", this.ccfCD_CORP.form.CDTextBox.text);
		break;		
		
	default:
	}	
	return true;
}

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {

	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_CORP", "string");
	this.dsSelect.addColumn("NO_CARD", "string");

	this.dsInsert = new Dataset();
	this.dsInsert.addColumn("NO_CARD", "string");
	this.dsInsert.addColumn("CD_CORP", "string");
	this.dsInsert.addColumn("CD_DEPT", "string");
	this.dsInsert.addColumn("ID_RECEIVER", "string");
	this.dsInsert.addColumn("AM_HANDO", "bigdecimal");
// 	this.dsInsert.addColumn("DT_PUBLISH", "string");
 	this.dsInsert.addColumn("TY_USED", "string");
	this.dsInsert.addColumn("TY_STATUS", "string");
	this.dsInsert.addColumn("RM_BIGO", "string");
	this.dsInsert.addColumn("ID_USER", "string");
	this.dsInsert.addColumn("DT_CHG", "string");

	this.dsUpdate = new Dataset();
	this.dsUpdate.addColumn("NO_CARD", "string");
// 	this.dsUpdate.addColumn("NO_HIS", "int");
 	this.dsUpdate.addColumn("CD_CORP", "string");
	this.dsUpdate.addColumn("CD_DEPT", "string");
	this.dsUpdate.addColumn("ID_RECEIVER", "string");
	this.dsUpdate.addColumn("AM_HANDO", "bigdecimal");
	this.dsUpdate.addColumn("DT_CHG", "string");
// 	this.dsUpdate.addColumn("DT_PUBLISH", "string");
 	this.dsUpdate.addColumn("TY_USED", "string");
	this.dsUpdate.addColumn("TY_STATUS", "string");
	this.dsUpdate.addColumn("RM_BIGO", "string");
	this.dsUpdate.addColumn("ID_USER", "string");

	this.dsDelete = new Dataset();
	this.dsDelete.addColumn("NO_CARD", "string");
// 	this.dsDelete.addColumn("NO_HIS", "int");
    this.dsDelete.addColumn("DT_CHG", "string");
 	this.dsDelete.addColumn("CD_CORP", "string");
	this.dsDelete.addColumn("ID_USER", "string");
	
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	
	this.dsSelect.setColumn(0, "CD_CORP", this.ccfCD_CORP.form.CDTextBox.text);
	this.dsSelect.setColumn(0, "NO_CARD", this.ccfNO_CARD.form.CDTextBox.text.replaceAll("-",""));
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
var nRow = this.gfnGridAdd(this.dxGrid);
this.dsList.setColumn(nrow, "NO_CARD", this.divSearch.form.ccfNO_CARD.form.CDTextBox.value);
this.dsList.setColumn(nrow, "NM_CARDSA", this.divSearch.form.ccfNO_CARD.form.DSTextBox.value);
}

/*
 *	삭제 버튼
 */
this.fnDel = function() {
this.gfnGridDel(this.dxGrid);
}

/*
 *	저장 버튼
 */
this.fnSave = function() {
if (!this.gfnGridValidate(this.dxGrid)) return;
if (this.gfnIsNull(this.ccfCD_CORP)) return;

	this.dxGrid.updateToDataset();
	
	this.dsInsert.clearData();
	this.dsUpdate.clearData();
	this.dsDelete.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "I":
			var nrow = this.dsInsert.addRow();
				this.dsInsert.setColumn(nrow, "NO_CARD", this.dsList.getColumn(i, "NO_CARD").replaceAll("-",""));
				this.dsInsert.setColumn(nrow, "CD_CORP", this.ccfCD_CORP.form.CDTextBox.text);
				this.dsInsert.setColumn(nrow, "CD_DEPT", this.dsList.getColumn(i, "CD_DEPT"));
				this.dsInsert.setColumn(nrow, "ID_RECEIVER", this.dsList.getColumn(i, "ID_RECEIVER"));
				this.dsInsert.setColumn(nrow, "AM_HANDO", this.dsList.getColumn(i, "AM_HANDO"));
				this.dsInsert.setColumn(nrow, "DT_CHG", this.dsList.getColumn(i, "DT_CHG"));
				//this.dsInsert.setColumn(nrow, "DT_PUBLISH", this.dsList.getColumn(i, "DT_PUBLISH"));
				this.dsInsert.setColumn(nrow, "TY_USED", this.dsList.getColumn(i, "TY_USED"));
				this.dsInsert.setColumn(nrow, "TY_STATUS", this.dsList.getColumn(i, "TY_STATUS"));
				this.dsInsert.setColumn(nrow, "RM_BIGO", this.dsList.getColumn(i, "RM_BIGO"));
				this.dsInsert.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);			
				
				break;
				
			case "U":
				var nrow = this.dsUpdate.addRow();
				this.dsUpdate.setColumn(nrow, "NO_CARD", this.dsList.getColumn(i, "NO_CARD").replaceAll("-",""));
				//this.dsUpdate.setColumn(nrow, "NO_HIS", this.dsList.getColumn(i, "NO_HIS"));
				this.dsUpdate.setColumn(nrow, "CD_CORP", this.ccfCD_CORP.form.CDTextBox.text);
				this.dsUpdate.setColumn(nrow, "CD_DEPT", this.dsList.getColumn(i, "CD_DEPT"));
				this.dsUpdate.setColumn(nrow, "ID_RECEIVER", this.dsList.getColumn(i, "ID_RECEIVER"));
				this.dsUpdate.setColumn(nrow, "AM_HANDO", this.dsList.getColumn(i, "AM_HANDO"));
				this.dsUpdate.setColumn(nrow, "DT_CHG", this.dsList.getColumn(i, "DT_CHG"));
				//this.dsUpdate.setColumn(nrow, "DT_PUBLISH", this.dsList.getColumn(i, "DT_PUBLISH"));
				this.dsUpdate.setColumn(nrow, "TY_USED", this.dsList.getColumn(i, "TY_USED"));
				this.dsUpdate.setColumn(nrow, "TY_STATUS", this.dsList.getColumn(i, "TY_STATUS"));
				this.dsUpdate.setColumn(nrow, "RM_BIGO", this.dsList.getColumn(i, "RM_BIGO"));
				this.dsUpdate.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
				
				break;
				
			case "D":
				var nrow = this.dsDelete.addRow();
				this.dsDelete.setColumn(nrow, "NO_CARD", this.dsList.getColumn(i, "NO_CARD").replaceAll("-",""));
				//this.dsDelete.setColumn(nrow, "NO_HIS", this.dsList.getColumn(i, "NO_HIS"));
				this.dsDelete.setColumn(nrow, "DT_CHG", this.dsList.getColumn(i, "DT_CHG"));
				this.dsDelete.setColumn(nrow, "CD_CORP", this.ccfCD_CORP.form.CDTextBox.text);
				this.dsDelete.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
				
				break;
		}
	}
	
	if (this.dsInsert.rowcount == 0 && this.dsUpdate.rowcount == 0 && this.dsDelete.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "insert=dsInsert update=dsUpdate delete=dsDelete";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {
	var validate = true;
	if (this.gfnIsNull(this.ccfCD_CORP.form.CDTextBox.text)) {
		validate = false;
		// Alert후 실행할 처리
		this.fnVaidateCallback = function() {
			this.ccfCD_CORP.form.CDTextBox.setFocus();
		}
		this.gfnAlert("법인코드를 입력하세요.", "fnVaidateCallback");
	}
	
	if (this.gfnIsNull(this.ccfNO_CARD.form.CDTextBox.text)) {
		validate = false;
		// Alert후 실행할 처리
		this.fnVaidateCallback = function() {
			this.ccfNO_CARD.form.CDTextBox.setFocus();
		}
		this.gfnAlert("카드번호를 입력하세요.", "fnVaidateCallback");
	}
	
	return validate;
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);	
	}
	else if (svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.codefind_AfterCDTextChanged = function(id) {
	this.fnSearchInit();
}

this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	
	if (id == "ccfNO_CARD") {
		var cd_corp = this.ccfCD_CORP.form.CDTextBox.text;
		if(this.gfnIsNull(cd_corp)) {
			this.gfnAlert("법인코드를 먼저 입력하세요.");
			return false;
		}
		dsUserParam.setColumn(nrow, "CD_SUABUN", "");
		dsUserParam.setColumn(nrow, "CD_DEPT", ""); 
		dsUserParam.setColumn(nrow, "CD_CORP", cd_corp);
	}
	return true;
}

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
this.fnGrid_EnterCell = function(obj:nexacro.Grid, row, cell) {
// 	var colnm = this.gfnGridGetBindColumnNameByIndex(obj, cell);
// // 	if(colnm == "KEYIN") {
// // 		return false;
// // 	}
// 	return true;
}

// this.fnGrid_AfterEdit = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo) {
// 
// }
/************************************************************************
 * 기타 이벤트
 ************************************************************************/
/*
 *	조회 조건 변경시 초기화
 */
this.fnSearchInit = function(obj,e) {
	if(e == null || (e.pretext != e.posttext)) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);
	}
};]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DFBPR_CARDHIS_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">insert</Col>
            <Col id="SP">DFBPR_CARDHIS_INSERT</Col>
          </Row>
          <Row>
            <Col id="TARGET">update</Col>
            <Col id="SP">DFBPR_CARDHIS_UPDATE</Col>
          </Row>
          <Row>
            <Col id="TARGET">delete</Col>
            <Col id="SP">DFBPR_CARDHIS_DELETE</Col>
          </Row>
        </Rows>
      </Dataset>
    </Objects>
  </Form>
</FDL>
