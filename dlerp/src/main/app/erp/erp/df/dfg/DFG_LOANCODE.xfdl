<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="대여금 종류 등록" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg">
          <Layouts>
            <Layout>
              <Static id="sta00" taborder="1" text="종류코드" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Div id="ccfLoanCd" CDTextWidth="60" taborder="0" left="sta00:0.0" top="10.0" width="269" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	// 법인코드에 포커스추가
	this.ccfLoanCd.form.CDTextBox.setFocus();
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 ************************************************************************/
this.fnSetButton = function() {
}; 

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	
	this.ccfLoanCd = this.divSearch.form.ccfLoanCd;
	this.dxGrid = this.divData.form.objGrid;
	this.grSearch = this.FormInfo.GR_SEARCH;
}

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	this.ccfLoanCd.CodeFindName = "DFX_CFLOANCODE";
	
	this.ccfLoanCd.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	
	this.ccfLoanCd.AfterCDTextChanged = "fnAfterCDTextChanged";	
	
	this.gfnGridInit(this.dxGrid, this.dsList, "DF", "DFG_LOANCODE");

	this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforuserDataSetParam";
	
	// 권한체크 - 해당부서내역만 조회가능
// 	if (nexacro.toNumber(this.FormInfo.GR_SEARCH) >= 2) {
// 		this.ccfLoanCd.set_enable(false);
// 	}
}

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {

	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_LOANCODE", "string");
	
	this.dsInsert = new Dataset();
	this.dsInsert.addColumn("CD_LOAN", "string");
	this.dsInsert.addColumn("DS_LOAN", "string");
	this.dsInsert.addColumn("YN_USE", "string");
	this.dsInsert.addColumn("YN_FOREIGN", "string");
	this.dsInsert.addColumn("CD_JANG", "string");
	this.dsInsert.addColumn("CD_DAN", "string");
	this.dsInsert.addColumn("CD_EZA", "string");
	this.dsInsert.addColumn("CD_MISU", "string");
	this.dsInsert.addColumn("CD_SUNSU", "string");
	this.dsInsert.addColumn("RM_BIGO", "string");
	this.dsInsert.addColumn("ID_USER", "string");

	this.dsUpdate = new Dataset();
	this.dsUpdate.addColumn("CD_LOAN", "string");
	this.dsUpdate.addColumn("DS_LOAN", "string");
	this.dsUpdate.addColumn("YN_USE", "string");
	this.dsUpdate.addColumn("YN_FOREIGN", "string");
	this.dsUpdate.addColumn("CD_JANG", "string");
	this.dsUpdate.addColumn("CD_DAN", "string");
	this.dsUpdate.addColumn("CD_EZA", "string");
	this.dsUpdate.addColumn("CD_MISU", "string");
	this.dsUpdate.addColumn("CD_SUNSU", "string");
	this.dsUpdate.addColumn("RM_BIGO", "string");
	this.dsUpdate.addColumn("ID_USER", "string");

	this.dsDelete = new Dataset();
	this.dsDelete.addColumn("CD_LOAN", "string");

}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	this.dsSelect.setColumn(0, "CD_LOANCODE", this.ccfLoanCd.form.CDTextBox.text);
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	var  nrow = this.gfnGridAdd(this.dxGrid);
	this.dsList.setColumn(nrow, "YN_USE", "Y");
	this.dsList.setColumn(nrow, "YN_FOREIGN", "N");
}

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}

/*
 *	저장 버튼
 */
this.fnSave = function() {
	if (!this.gfnGridValidate(this.dxGrid)) return;

	this.dxGrid.updateToDataset();
	
	this.dsInsert.clearData();
	this.dsUpdate.clearData();
	this.dsDelete.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "I":
				var nrow = this.dsInsert.addRow();
				this.dsInsert.setColumn(nrow, "CD_LOAN", this.dsList.getColumn(i, "CD_LOAN"));
				this.dsInsert.setColumn(nrow, "DS_LOAN", this.dsList.getColumn(i, "DS_LOAN"));
				this.dsInsert.setColumn(nrow, "YN_USE", this.dsList.getColumn(i, "YN_USE"));
				this.dsInsert.setColumn(nrow, "YN_FOREIGN", this.dsList.getColumn(i, "YN_FOREIGN"));
				this.dsInsert.setColumn(nrow, "CD_JANG", this.dsList.getColumn(i, "CD_JANG"));
				this.dsInsert.setColumn(nrow, "CD_DAN", this.dsList.getColumn(i, "CD_DAN"));
				this.dsInsert.setColumn(nrow, "CD_EZA", this.dsList.getColumn(i, "CD_EZA"));
				this.dsInsert.setColumn(nrow, "CD_MISU", this.dsList.getColumn(i, "CD_MISU"));
				this.dsInsert.setColumn(nrow, "CD_SUNSU", this.dsList.getColumn(i, "CD_SUNSU"));
				this.dsInsert.setColumn(nrow, "RM_BIGO", this.dsList.getColumn(i, "RM_BIGO"));
				this.dsInsert.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
				break;
				
			case "U":
				var nrow = this.dsUpdate.addRow();
				this.dsUpdate.setColumn(nrow, "CD_LOAN", this.dsList.getColumn(i, "CD_LOAN"));
				this.dsUpdate.setColumn(nrow, "DS_LOAN", this.dsList.getColumn(i, "DS_LOAN"));
				this.dsUpdate.setColumn(nrow, "YN_USE", this.dsList.getColumn(i, "YN_USE"));
				this.dsUpdate.setColumn(nrow, "YN_FOREIGN", this.dsList.getColumn(i, "YN_FOREIGN"));
				this.dsUpdate.setColumn(nrow, "CD_JANG", this.dsList.getColumn(i, "CD_JANG"));
				this.dsUpdate.setColumn(nrow, "CD_DAN", this.dsList.getColumn(i, "CD_DAN"));
				this.dsUpdate.setColumn(nrow, "CD_EZA", this.dsList.getColumn(i, "CD_EZA"));
				this.dsUpdate.setColumn(nrow, "CD_MISU", this.dsList.getColumn(i, "CD_MISU"));
				this.dsUpdate.setColumn(nrow, "CD_SUNSU", this.dsList.getColumn(i, "CD_SUNSU"));
				this.dsUpdate.setColumn(nrow, "RM_BIGO", this.dsList.getColumn(i, "RM_BIGO"));
				this.dsUpdate.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
				
				
				break;
				
			case "D":
				var nrow = this.dsDelete.addRow();
				this.dsDelete.setColumn(nrow, "CD_LOAN", this.dsList.getColumn(i, "CD_LOAN"));
				break;
		}
	}
	
	if (this.dsInsert.rowcount == 0 && this.dsUpdate.rowcount == 0 && this.dsDelete.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "insert=dsInsert update=dsUpdate delete=dsDelete";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {
	return true;
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);
	}
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	if (id == "ccfLoanCd") {
		dsUserParam.setColumn(nrow, "YN_USE", "");
		dsUserParam.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
	}
	return true;
};

this.fnAfterCDTextChanged = function(id, codeFindData) {

	this.fnSearchInit();

} 
 
this.fnGrid_BeforuserDataSetParam = function(id, dsUserParam, nrow) {
	
	switch(id) {
	case "DFX_CFACNT1":
	case "DFX_CFACNT2":
	case "DFX_CFACNT3":
	case "DFX_CFACNT4":
	case "DFX_CFACNT5":
		break;
	default:
	}
	
	return true;
}

 
/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
 
/************************************************************************
 * 기타 이벤트
 ************************************************************************/
/*
 *	조회 조건 변경시 초기화
 */
this.fnSearchInit = function(obj,e) {
	if(e == null || (e.pretext != e.posttext)) {
		this.gfnSetFormStatus(this);
		this.gfnGridClear(this.dxGrid);
	}
};

]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DFGPR_LOANCODE_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">insert</Col>
            <Col id="SP">DFGPR_LOANCODE_INSERT</Col>
          </Row>
          <Row>
            <Col id="TARGET">update</Col>
            <Col id="SP">DFGPR_LOANCODE_UPDATE</Col>
          </Row>
          <Row>
            <Col id="TARGET">delete</Col>
            <Col id="SP">DFGPR_LOANCODE_DELETE</Col>
          </Row>
        </Rows>
      </Dataset>
    </Objects>
  </Form>
</FDL>
