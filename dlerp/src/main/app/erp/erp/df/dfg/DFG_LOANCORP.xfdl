<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="관계사차입대여조회" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg" formscrolltype="none">
          <Layouts>
            <Layout>
              <Static id="sta04" taborder="2" text="법인코드" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Div id="cfCD_CORP" CDTextWidth="70" taborder="0" left="sta04:0.0" top="10.0" width="269" height="24.0" url="cmm::cmmCodeFind.xfdl" text=""/>
              <Static id="staCD_PERIOD" taborder="3" text="기준년월" left="cfCD_CORP:0.0" top="10.0" height="24.0" width="92.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="calYM_WORK" taborder="1" left="staCD_PERIOD:0.0" top="10.0" width="80" height="24.0" url="cmm::cmmCalMM.xfdl"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="1" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0">
                <Formats>
                  <Format id="default"/>
                </Formats>
              </Grid>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	if (this.gfnIsNull(this.ScfCD_CORP.form.CDTextBox.value)) {
		this.ScfCD_CORP.form.DSTextBox.set_value(this.AuthClient.DS_CORP); 
		this.ScfCD_CORP.form.CDTextBox.set_value(this.AuthClient.CD_CORP);	
	}
	
	var vToday = this.gfnGetDate().substr(0,6); 
	this.calYM_WORK.form.TextBox.set_value(vToday);			
	
	// 법인코드 포커스추가
	this.ScfCD_CORP.form.CDTextBox.setFocus();
	
	// 권한체크 - 해당부서내역만 조회가능
	if (nexacro.toNumber(this.grSearch) >= 2) {
		this.ScfCD_CORP.set_enable(false);
	}	
};

 
/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	// 조회조건
	this.ScfCD_CORP  = this.divSearch.form.cfCD_CORP;				// 법인코드
	this.calYM_WORK  = this.divSearch.form.calYM_WORK;				// 기준년월
		
	this.dxGrid = this.divData.form.objGrid;		// 그리드
	
	this.grSearch = this.FormInfo.GR_SEARCH;						// 권한?
	this.cdGroup = this.gfnIsNull(this.AuthClient.CD_GROUP) ? "" : this.AuthClient.CD_GROUP;						// 그룹코드	
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {	
	this.ScfCD_CORP.CodeFindName = "DZX_CFCORP";					// 법인코드(조회조건)
	this.ScfCD_CORP.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.ScfCD_CORP.AfterCDTextChanged = "fnAfterCDTextChanged";
	
	// 그리드 초기화
	this.gfnGridInit(this.dxGrid, this.dsList, "DF", "DFG_LOANCORP");		
};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	//검색조건 데이터셋
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_CORP", "string");
	this.dsSelect.addColumn("YM_WORK", "string");
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
  /*
  *	조회 버튼
  */
this.fnSelect = function() {
	this.dsSelect.clearData();
	this.dsSelect.addRow();

	this.dsSelect.setColumn(0, "CD_CORP", this.ScfCD_CORP.form.CDTextBox.value);
	this.dsSelect.setColumn(0, "YM_WORK", this.calYM_WORK.form.TextBox.value);	
	
	var strSvcId    = "selectHeader";
	var strSvcType  = "select";
	var inProc		= "_dsProc";
	var inData      = "selectHeader=dsSelect";
	var outData     = "dsHeader=selectHeader0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// trabsaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]	
	
}

this.fnSelectData = function() {

	if (!this.fnSelectValidate()) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();

	this.dsSelect.setColumn(0, "CD_CORP", this.ScfCD_CORP.form.CDTextBox.value);
	this.dsSelect.setColumn(0, "YM_WORK", this.calYM_WORK.form.TextBox.value);
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); 	// 통신방법 정의 [생략가능]
}
/*
 *	입력 버튼
 */
this.fnAdd = function() {

}

/*
 *	삭제 버튼
 */
this.fnDel = function() {

}

/*
 *	저장 버튼
 */
this.fnSave = function() {

}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {
	if (this.gfnIsNull(this.calYM_WORK.form.TextBox.value)) {
		this.gfnAlert("기준년월은 필수입력 입니다.");
		this.calYM_WORK.form.TextBox.setFocus();
		return false;
	}
	return true;
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "selectHeader") { //그리드 헤더 
		this.fnSetGridColunm();
		
		this.fnSelectData();
	} 
	else if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);
	}
}

this.fnDeleteContentsCol = function(){
	var nIdxAddStart = this.dxGrid.getBindCellIndex("body", "AM_TOT");	//컬럼추가 인덱스
	
	//컬럼 삭제
	for(var i=0;i<this.dsHeader.rowcount;i++){	
		//데이터셋 컬럼 삭제 처리
		this.dsList.deleteColumn(this.dsHeader.getColumn(i, "CD_VENDOR"));
	}
	var colCnt = this.dxGrid.getCellCount("body");
	//그리드 컬럼 삭제 처리(초기화용)
	var delCnt = 0, delIdx = 0;
	for(var i=0;i<colCnt;i++){
		if(i > nIdxAddStart){
			delIdx = ((colCnt-1)-delCnt);
			this.dxGrid.deleteContentsCol("body", delIdx, false);
			delCnt++;
		}
	}	
}

//그리드 컬럼 셋팅
this.fnSetGridColunm = function (){
	this.dxGrid.set_enableredraw(false);
	this.dsList.set_enableevent(false);
	
	//this.fnDeleteContentsCol();
	
	this.gfnGridInit(this.dxGrid, this.dsList, "DF", "DFG_LOANCORP");


	//그리드스펙정보가져오기
	var nFindRow = this.dsGridSpec.findRowExpr( "DS_FIELD == 'AM_TOT'" );
	var NO_WIDTH = 100;
	var DS_COMBOLIST = "#,##0";
	if(nFindRow != -1 ){
		NO_WIDTH = this.dsGridSpec.getColumn(nFindRow, "NO_WIDTH");
		DS_COMBOLIST = this.dsGridSpec.getColumn(nFindRow, "DS_COMBOLIST");
	}	
	

	var apdCol = 0, colSize = NO_WIDTH;
	
	var nHeadCellIndex = 0;
	var nHeadCellIndexSub = 0;
	
	var nHeadRowCnt = this.dsHeader.rowcount;
	
	
	//셋팅
	for(var i=0;i<this.dsHeader.rowcount;i++){
		var bindCol = this.dsHeader.getColumn(i, "CD_LOANBANK");
		
		apdCol = this.dxGrid.appendContentsCol();
			
		this.dxGrid.setFormatColProperty(apdCol, "size", colSize); //헤더사이즈
		
		//body
		this.dxGrid.setCellProperty("body", apdCol	, "text", "bind:"+bindCol);		//컬럼 바인딩
		if(this.gfnRight(bindCol,1) == "T") this.dxGrid.setCellProperty("body", apdCol, "cssclass", "BACK_SoKe");	//배경색
 		this.dxGrid.setCellProperty("body", apdCol, "displaytype", "mask");
 		this.dxGrid.setCellProperty("body", apdCol, "maskeditformat", DS_COMBOLIST);
		
		//sum
		var sExpr = "expr:dataset.getSum('"+this.dsHeader.getColumn(i, "CD_LOANBANK")+"')";
		//trace("sExpr", sExpr);
 		this.dxGrid.setCellProperty("summ", apdCol	, "displaytype", "number");									//합계 타입
 		this.dxGrid.setCellProperty("summ", apdCol	, "text", sExpr);	//합계 텍스트
		
	}	
	
 	//헤더 텍스트 처리
 	var nIdxAddStart = this.gfnGetHeadCellIndex(this.dxGrid, "AM_TOT");
		
	var nIdxHead = 0;
	var nIdxHeadSub = 0;
	var nBaseCol = this.dxGrid.getBindCellIndex("body", "AM_TOT");	//세목명 컬럼 인덱스
	
	nIdxHead = nIdxAddStart;
	
 	var totCnt = this.dsHeader.rowcount;
 	for(var i=0;i<this.dsHeader.rowcount;i++){
	
		nIdxHeadSub = nIdxHead + totCnt + nBaseCol;
		nIdxHead = nIdxHead + 1;
		
 		this.dxGrid.setCellProperty( "head", nIdxHead, "text", this.dsHeader.getColumn(i, "DS_VENDOR"));	// row1
 		this.dxGrid.setCellProperty( "head", nIdxHeadSub, "text", this.dsHeader.getColumn(i, "DS_CORP"));	// row2
 	}	


 	//첫번째 헤더셀 병합 처리
	// 병합(Merge) 하려는 Cell 중 좌상단 Cell 의 Column 인덱스를 설정합니다.
	var nStartSubRow = 0;
	var nEndSubRow = 0;
	this.fnMergeContentsCell();
	
	
	this.dxGrid.set_enableredraw(true);
	this.dsList.set_enableevent(true);
};


this.fnMergeContentsCell = function() {

//  Grid 에 표시되어 있는 포맷에서 특정 Cell 들을 병합(Merge) 하여 하나의 Cell로 만드는 메소드입니다. 
	
// 	//enumBand, nStartSubRow, nStartCol, nEndSubRow, nEndCol, nFirstCell, bKeepSubCell 	
// 	var nStartSubRow = 0;	// Cell 중 좌상단 Cell 의 Sub Row 인덱스
// 	var nStartCol = 6;		// Cell 중 좌상단 Cell 의 Column 인덱스
// 	var nEndSubRow = 0; 	// Cell 중 우하단 Cell 의 Sub Row 인덱스 
// 	var nEndCol = 8;		// Cell 중 우하단 Cell 의 Column 인덱스
// 	var nFirstCell = 6;		// Cell 에 적용할 속성의 기준이 되는 Cell 의 Cell 인덱스
// 	
// 	var rtnCell = this.dxGrid.mergeContentsCell("head", nStartSubRow, nStartCol, nEndSubRow, nEndCol, nStartCol, false);	
// 	//Grid 에 표시되어 있는 포맷에서 특정 Cell 들을 병합(Merge) 하여 하나의 Cell로 만드는 메소드입니다. 
// 	//Grid.mergeContentsCell( enumBand, nStartSubRow, nStartCol, nEndSubRow, nEndCol, nFirstCell, bKeepSubCell ) 

	
	// rowspan, colspan
	var objGrid = this.dxGrid;
	var objSpec = this.dsHeader;
	var nBaseCol = this.dxGrid.getBindCellIndex("body", "AM_TOT");	//컬럼 인덱스

	//헤더 컬럼 데이터 
	var dsTitle = "";
	var nEndCol = nBaseCol;
	var nFirstCell = 2;
	for(var i=0;i<this.dsHeader.rowcount;i++){
		if (dsTitle != this.dsHeader.getColumn(i, "DS_VENDOR")){
			nEndCol = nEndCol+ 2;
			nFirstCell++;
		}
		var rtn = objGrid.mergeContentsCell("head", 0, (i+nBaseCol+1), 0, nEndCol, nFirstCell, false);
		dsTitle = this.dsHeader.getColumn(i, "DS_VENDOR");
	}
};

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnAfterCDTextChanged = function(id, codeFindData) {
	
	var arr = codeFindData;
	
	switch(id) {
	
	// 법인코드(조회조건)
	case "cfCD_CORP":
		break;
	default:
	}	
	return true;
}

this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {

	var cdCorp = this.ScfCD_CORP.form.CDTextBox.value;
	
	switch(id) {
	
	// 법인코드(조회조건)
	case "cfCD_CORP": 	
		dsUserParam.setColumn(nrow, "CD_GROUP", this.cdGroup);	
		break;
	default:
	}	
	return true;
}

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/


/************************************************************************
 * 기타 이벤트
 ************************************************************************/

this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridInit(this.dxGrid, this.dsList, "DF", "DFG_LOANCORP");
		this.gfnGridClear(this.dxGrid);				
   }
};
]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">selectHeader</Col>
            <Col id="SP">DFGPR_LOANCORP_TITLE_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DFGPR_LOANCORP_SELECT</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsHeader"/>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_CORP" type="STRING" size="256"/>
          <Column id="YM_WORK" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.cfCD_CORP.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_CORP"/>
      <BindItem id="item1" compid="divSearch.form.calYM_WORK.form.TextBox" propid="value" datasetid="dsSearch" columnid="YM_WORK"/>
    </Bind>
  </Form>
</FDL>
