<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="장기자금계획 등록" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="78.0" right="0" cssclass="div_SEARCH_Bg">
          <Layouts>
            <Layout>
              <Static id="sta00" taborder="5" text="법인코드" left="0.0" top="10.0" width="105.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Div id="ccfCD_CORP" CDTextWidth="70" taborder="0" left="sta00:0.0" top="10.0" width="269" height="24.0" url="cmm::cmmCodeFind.xfdl" text=""/>
              <Static id="sta03" taborder="6" text="작성부서" left="0.0" top="sta00:10.0" width="105.0" height="24.0" textDecoration="none" cssclass="sta_WF_SchLabel"/>
              <Div id="ccfCD_SITE" CDTextWidth="90" taborder="3" left="sta03:0.0" top="sta00:10.0" width="269" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
              <Static id="staCD_PERIOD" taborder="7" text="작성년월" left="0.0" top="10.0" height="24.0" right="859" cssclass="sta_WF_SchLabelE"/>
              <Static id="sta01" taborder="8" text="수지코드" left="0.0" top="sta00:10.0" width="105.0" height="24.0" textDecoration="none" cssclass="sta_WF_SchLabel"/>
              <Div id="ccfCD_SUJI" CDTextWidth="90" taborder="4" left="sta01:0.0" top="sta00:10.0" width="269" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
              <Static id="sta02" taborder="9" text="구분" left="0.0" top="10.0" width="105.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Combo id="cboYN_FINAL" taborder="2" text="자금집행일" left="sta02:0.0" top="10.0" width="110" height="24.0" innerdataset="dsYN_FINAL" datacolumn="DS_CODE" codecolumn="CD_CODE" index="-1" onitemchanged="divSearch_cboYN_FINAL_onitemchanged"/>
              <Div id="calYM_PLAN" taborder="1" left="cboYN_FINAL:0.0" top="10.0" width="80" height="24.0" url="cmm::cmmCalMM.xfdl"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="1" left="0" top="divSearch:25" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0" onselectchanged="divData_objGrid_onselectchanged"/>
            </Layout>
          </Layouts>
        </Div>
        <Static id="sta01" taborder="2" text="단위 : 100만원" top="63" height="20" textDecoration="none" right="0" width="78"/>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();				
	this.fnSetCombo();
	
}; 

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 ************************************************************************/
this.fnSetButton = function() {
};

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btnCreateData = this.gfnFormButtonAdd("btnCreateData", "fnCreateData", "자료생성");
	this.btnDeleteData = this.gfnFormButtonAdd("btnDeleteData", "fnDeleteData", "자료삭제(초기화)");
	this.btnElctrncPmnt = this.gfnFormButtonAdd("btnElctrncPmnt", "fnElctrncPmnt", "전자결재상신");
	this.btnElctrncPmntDoc = this.gfnFormButtonAdd("btnElctrncPmntDoc", "fnElctrncPmntDoc", "전자결재문서조회");
	this.btnElctrncPmntDelete = this.gfnFormButtonAdd("btnElctrncPmntDelete", "fnElctrncPmntDelte", "전자결재(초기화)");
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.ccfCD_CORP = this.divSearch.form.ccfCD_CORP;	// 법인코드
	this.calYM_PLAN = this.divSearch.form.calYM_PLAN;	// 작성년월
	this.cboYN_FINAL = this.divSearch.form.cboYN_FINAL;	// 구분
	this.ccfCD_SITE = this.divSearch.form.ccfCD_SITE;	// 작성부서
	this.ccfCD_SUJI = this.divSearch.form.ccfCD_SUJI;	// 수지코드
	
	this.dxGrid = this.divData.form.objGrid;		// 그리드
	this.grSearch = this.FormInfo.GR_SEARCH;		// 권한?
	this.cdGroup = this.gfnIsNull(this.AuthClient.CD_GROUP) ? "" : this.AuthClient.CD_GROUP;			// 그룹코드
}

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	this.ccfCD_CORP.CodeFindName = "DFX_CFCORP_SUJI";	// 법인코드
	this.ccfCD_SITE.CodeFindName = "DFX_CFACNTUNIT_SUJI";	// 작성부서
	this.ccfCD_SUJI.CodeFindName = "DFX_CFSUJICODE";	// 수지코드
	
	this.ccfCD_CORP.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.ccfCD_SITE.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.ccfCD_SUJI.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	
	this.ccfCD_CORP.AfterCDTextChanged = "fnAfterCDTextChanged";
	this.ccfCD_SITE.AfterCDTextChanged = "fnAfterCDTextChanged";
	this.ccfCD_SUJI.AfterCDTextChanged = "fnAfterCDTextChanged";
	
	// 그리드
	this.gfnGridInit(this.dxGrid, this.dsList, "DF", "DFA_PLANL");
	this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforuserDataSetParam";
	this.dxGrid.AfterCDTextChanged = "fnGrid_AfterCDTextChanged";	
	
	// 법인코드세션
// 	if (this.gfnIsNull(this.ccfCD_CORP.form.CDTextBox.value)) {
// 		this.ccfCD_CORP.form.DSTextBox.set_value(this.AuthClient.DS_CORP); 
// 		this.ccfCD_CORP.form.CDTextBox.set_value(this.AuthClient.CD_CORP);	
// 	}		
	
	
	// 품의일자 15일전부터 현재까지 일단 설정.
	var vToday = this.gfnGetDate().substr(0,6);
	this.calYM_PLAN.form.TextBox.set_value(vToday);		
	
	// 권한체크 - 해당부서내역만 조회가능
	if (nexacro.toNumber(this.grSearch) >= 7) {
		this.cboYN_FINAL.set_enable(false);
		this.btnCreateData.set_enable(false);
		this.btnDeleteData.set_enable(false);
		this.btnElctrncPmntDelete.set_enable(false);
	}	
	
	// 법인코드 포커스추가
	this.ccfCD_CORP.form.CDTextBox.setFocus();	
}

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {

	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("YM_PLAN", "string");
	this.dsSelect.addColumn("CD_CORP", "string");
	this.dsSelect.addColumn("CD_SITE", "string");
	this.dsSelect.addColumn("CD_SUJI", "string");
	this.dsSelect.addColumn("YN_FINAL", "string");
	this.dsSelect.addColumn("ID_USER", "string");
	this.dsSelect.addColumn("CD_DEPT", "string");
	this.dsSelect.addColumn("GR_SEARCH", "string");

	this.dsCreate = new Dataset();
	this.dsCreate.addColumn("YM_PLAN", "string");
	this.dsCreate.addColumn("CD_CORP", "string");
	this.dsCreate.addColumn("CD_SITE", "string");		
	this.dsCreate.addColumn("ID_USER", "string");

	this.dsUpdate = new Dataset();
	this.dsUpdate.addColumn("YM_PLAN", "string");
	this.dsUpdate.addColumn("CD_CORP", "string");
	this.dsUpdate.addColumn("YY_YEAR", "string");
	this.dsUpdate.addColumn("CD_SITE", "string");
	this.dsUpdate.addColumn("CD_SUJI", "string");
	this.dsUpdate.addColumn("YN_FINAL", "string");
	this.dsUpdate.addColumn("AM_01", "bigdecimal");
	this.dsUpdate.addColumn("AM_02", "bigdecimal");
	this.dsUpdate.addColumn("AM_03", "bigdecimal");
	this.dsUpdate.addColumn("AM_04", "bigdecimal");
	this.dsUpdate.addColumn("AM_05", "bigdecimal");
	this.dsUpdate.addColumn("AM_06", "bigdecimal");
	this.dsUpdate.addColumn("AM_07", "bigdecimal");
	this.dsUpdate.addColumn("AM_08", "bigdecimal");
	this.dsUpdate.addColumn("AM_09", "bigdecimal");
	this.dsUpdate.addColumn("AM_10", "bigdecimal");
	this.dsUpdate.addColumn("AM_11", "bigdecimal");
	this.dsUpdate.addColumn("AM_12", "bigdecimal");
	this.dsUpdate.addColumn("RM_BIGO_01", "string");
	this.dsUpdate.addColumn("RM_BIGO_02", "string");
	this.dsUpdate.addColumn("RM_BIGO_03", "string");
	this.dsUpdate.addColumn("RM_BIGO_04", "string");
	this.dsUpdate.addColumn("RM_BIGO_05", "string");
	this.dsUpdate.addColumn("RM_BIGO_06", "string");
	this.dsUpdate.addColumn("RM_BIGO_07", "string");
	this.dsUpdate.addColumn("RM_BIGO_08", "string");
	this.dsUpdate.addColumn("RM_BIGO_09", "string");
	this.dsUpdate.addColumn("RM_BIGO_10", "string");
	this.dsUpdate.addColumn("RM_BIGO_11", "string");
	this.dsUpdate.addColumn("RM_BIGO_12", "string");
	this.dsUpdate.addColumn("RM_BIGO", "string");
	this.dsUpdate.addColumn("ID_USER", "string");

	this.dsCreatex = new Dataset();
	this.dsCreatex.addColumn("YM_PLAN", "string");
	this.dsCreatex.addColumn("CD_CORP", "string");
	this.dsCreatex.addColumn("CD_SITE", "string");		
	this.dsCreatex.addColumn("ID_USER", "string");
	
	this.dsClearx = new Dataset();
	this.dsClearx.addColumn("YM_PLAN", "string");
	this.dsClearx.addColumn("CD_CORP", "string");
	this.dsClearx.addColumn("YN_FINAL", "string");
	this.dsClearx.addColumn("CD_SITE", "string");
	this.dsClearx.addColumn("ID_USER", "string");	

}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	this.dsSelect.setColumn(0, "YM_PLAN", this.dsSearch.getColumn(0, "YM_PLAN"));
	this.dsSelect.setColumn(0, "CD_CORP", this.dsSearch.getColumn(0, "CD_CORP"));
	this.dsSelect.setColumn(0, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
	this.dsSelect.setColumn(0, "CD_SUJI", this.dsSearch.getColumn(0, "CD_SUJI"));
	this.dsSelect.setColumn(0, "YN_FINAL", this.dsSearch.getColumn(0, "YN_FINAL"));
	this.dsSelect.setColumn(0, "ID_USER", this.AuthClient.ID_USER);
	this.dsSelect.setColumn(0, "CD_DEPT", this.AuthClient.CD_DEPT);
	this.dsSelect.setColumn(0, "GR_SEARCH", this.grSearch);
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); 	// 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
}

/*
 *	삭제 버튼
 */
this.fnDel = function() {
}

/*
 *	저장 버튼
 */
this.fnSave = function() {
	if (!this.gfnGridValidate(this.dxGrid)) return;

	this.dxGrid.updateToDataset();
	
	this.dsUpdate.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
				
			case "U":
				var nrow = this.dsUpdate.addRow();
				this.dsUpdate.setColumn(nrow, "YM_PLAN", this.dsSearch.getColumn(0, "YM_PLAN"));
				this.dsUpdate.setColumn(nrow, "CD_CORP", this.dsList.getColumn(i, "CD_CORP"));
				this.dsUpdate.setColumn(nrow, "YY_YEAR", this.dsList.getColumn(i, "YY_YEAR"));
				this.dsUpdate.setColumn(nrow, "CD_SITE", this.dsList.getColumn(i, "CD_SITE"));
				this.dsUpdate.setColumn(nrow, "CD_SUJI", this.dsList.getColumn(i, "CD_SUJI"));
				this.dsUpdate.setColumn(nrow, "YN_FINAL", this.dsList.getColumn(i, "YN_FINAL"));
				this.dsUpdate.setColumn(nrow, "AM_01", this.dsList.getColumn(i, "AM_01"));
				this.dsUpdate.setColumn(nrow, "AM_02", this.dsList.getColumn(i, "AM_02"));
				this.dsUpdate.setColumn(nrow, "AM_03", this.dsList.getColumn(i, "AM_03"));
				this.dsUpdate.setColumn(nrow, "AM_04", this.dsList.getColumn(i, "AM_04"));
				this.dsUpdate.setColumn(nrow, "AM_05", this.dsList.getColumn(i, "AM_05"));
				this.dsUpdate.setColumn(nrow, "AM_06", this.dsList.getColumn(i, "AM_06"));
				this.dsUpdate.setColumn(nrow, "AM_07", this.dsList.getColumn(i, "AM_07"));
				this.dsUpdate.setColumn(nrow, "AM_08", this.dsList.getColumn(i, "AM_08"));
				this.dsUpdate.setColumn(nrow, "AM_09", this.dsList.getColumn(i, "AM_09"));
				this.dsUpdate.setColumn(nrow, "AM_10", this.dsList.getColumn(i, "AM_10"));
				this.dsUpdate.setColumn(nrow, "AM_11", this.dsList.getColumn(i, "AM_11"));
				this.dsUpdate.setColumn(nrow, "AM_12", this.dsList.getColumn(i, "AM_12"));
				this.dsUpdate.setColumn(nrow, "RM_BIGO_01", this.dsList.getColumn(i, "RM_BIGO_01"));
				this.dsUpdate.setColumn(nrow, "RM_BIGO_02", this.dsList.getColumn(i, "RM_BIGO_02"));
				this.dsUpdate.setColumn(nrow, "RM_BIGO_03", this.dsList.getColumn(i, "RM_BIGO_03"));
				this.dsUpdate.setColumn(nrow, "RM_BIGO_04", this.dsList.getColumn(i, "RM_BIGO_04"));
				this.dsUpdate.setColumn(nrow, "RM_BIGO_05", this.dsList.getColumn(i, "RM_BIGO_05"));
				this.dsUpdate.setColumn(nrow, "RM_BIGO_06", this.dsList.getColumn(i, "RM_BIGO_06"));
				this.dsUpdate.setColumn(nrow, "RM_BIGO_07", this.dsList.getColumn(i, "RM_BIGO_07"));
				this.dsUpdate.setColumn(nrow, "RM_BIGO_08", this.dsList.getColumn(i, "RM_BIGO_08"));
				this.dsUpdate.setColumn(nrow, "RM_BIGO_09", this.dsList.getColumn(i, "RM_BIGO_09"));
				this.dsUpdate.setColumn(nrow, "RM_BIGO_10", this.dsList.getColumn(i, "RM_BIGO_10"));
				this.dsUpdate.setColumn(nrow, "RM_BIGO_11", this.dsList.getColumn(i, "RM_BIGO_11"));
				this.dsUpdate.setColumn(nrow, "RM_BIGO_12", this.dsList.getColumn(i, "RM_BIGO_12"));
				this.dsUpdate.setColumn(nrow, "RM_BIGO", this.dsList.getColumn(i, "RM_BIGO"));
				this.dsUpdate.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
				break;
		}
	}
	
	if (this.dsUpdate.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "update=dsUpdate";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); 	// 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {
	if (this.gfnIsNull(this.dsSearch.getColumn(0, "YM_PLAN"))) {
		this.gfnAlert("작성년월 입력 하세요.");
		this.calYM_PLAN.setFocus();
		return false;
	}
	
	return true;
};

/*
 *	팝업 Validate
 */
this.fnPopupValidate = function(popId) {
	
	switch(popId) {
	
	// 장기자금계획 생성
	case "DFA_DLG_PLANL_CREATE":
		break;
		
	// 장기자금계획 자료삭제(초기화)		
	case "DFA_DLG_PLANL_DELETE":	
		break;
		
	// 장기자금계획 전자결재(초기화)		
	case "DFA_DLG_APPRL_DELETE":
	
			// 결재완료가 아닌경우에는 초기화 불가
			var tyAppr = this.dsList.getColumn(this.dsList.rowposition, "TY_APPR");
			if ( tyAppr != "2" ) {
				this.gfnAlert("결재상태가 [결재완료]일때 전자결재(초기화) 가능합니다.");
				return false;
			}	
		break;		
		
	default:
	}
	
	return true;
}
/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);
	}
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	} else if (svcID == "combo") {
		//  조회조건(완료여부)
		var iRow = this.dsYN_FINAL.insertRow(0);
		this.dsYN_FINAL.setColumn(iRow, "CD_CODE", "");
		this.dsYN_FINAL.setColumn(iRow, "DS_CODE", "전체");
		this.cboYN_FINAL.set_index(2);
	} else if (svcID == "create") {
		this.gfnAlert("정상적으로 처리되었습니다.", "","cr", "fnMsgCallback");
	} else if (svcID == "createx") {
		this.gfnAlert("정상적으로 처리되었습니다.", "","crx", "fnMsgCallback");
	} else if (svcID == "clearx") {
		this.gfnAlert("정상적으로 처리되었습니다.", "","clx", "fnMsgCallback");
	}
}

this.fnMsgCallback = function(strId, strVal) {
	switch(strId) {
		case "cr":
		case "crx":	
		case "clx":	
			this.FormBtns.Select.click();
		break;
	}
}

this.fnPopCallBack = function(svcID, val) {
	if (val != false) {
		var json = JSON.parse(val);
		
		// 장기자금계획 생성 콜백
		if (svcID.indexOf("DFA_DLG_PLANL_CREATE") > -1) {
			this.fnPLANSCreate("create", json);
		}
		
		// 장기자금계획 자료삭제(초기화) 콜백
		if (svcID.indexOf("DFA_DLG_PLANL_DELETE") > -1) {
			this.fnPLANSCreate("createx", json);
		}
		
		// 장기자금계획 전자결재(초기화) 콜백
		if (svcID.indexOf("DFA_DLG_APPRL_DELETE") > -1) {
			this.fnPLANSCreate("clearx", json);
		}
	}
}

// 자료생성 및 자료삭제
this.fnPLANSCreate = function(svcId, json) {
	var varInData = "";

	if (svcId == "create") {
		this.dsCreate.clearData();
		var nrow = this.dsCreate.addRow();
		
		this.dsCreate.setColumn(nrow, "YM_PLAN", json.YM_PLAN);				// 계획년월
		this.dsCreate.setColumn(nrow, "CD_CORP", json.CD_CORP);				// 법인코드
		this.dsCreate.setColumn(nrow, "CD_SITE", json.CD_SITE);				// 작성부서		
		this.dsCreate.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);	// 사용자			
		
		if (this.dsCreate.rowcount == 0) return;
		
		varInData = svcId + "=dsCreate";
	}
	
	if (svcId == "createx") {
		this.dsCreatex.clearData();
		var nrow = this.dsCreatex.addRow();
		
		this.dsCreatex.setColumn(nrow, "YM_PLAN", json.YM_PLAN);			// 계획년월
		this.dsCreatex.setColumn(nrow, "CD_CORP", json.CD_CORP);				// 법인코드
		this.dsCreatex.setColumn(nrow, "CD_SITE", json.CD_SITE);				// 작성부서		
		this.dsCreatex.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);	// 사용자			
		
		if (this.dsCreatex.rowcount == 0) return;
		
		varInData = svcId + "=dsCreatex";
	}
	
	if (svcId == "clearx") {
		this.dsClearx.clearData();
		var nrow = this.dsClearx.addRow();
		
		this.dsClearx.setColumn(nrow, "YM_PLAN", json.YM_PLAN);
		this.dsClearx.setColumn(nrow, "CD_CORP", json.CD_CORP);
		this.dsClearx.setColumn(nrow, "YN_FINAL", json.YN_FINAL);
		this.dsClearx.setColumn(nrow, "CD_SITE", json.CD_SITE);
		this.dsClearx.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);	
		
		if (this.dsClearx.rowcount == 0) return;
		
		varInData = svcId + "=dsClearx";
	}	
	

	var strSvcId    = svcId;
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = varInData;
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); 	// 통신방법 정의 [생략가능]	
}
/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	
	var cdCorp = this.ccfCD_CORP.form.CDTextBox.value;
	
	switch(id) {
	case "ccfCD_CORP": // 법인코드
		dsUserParam.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);	
		dsUserParam.setColumn(nrow, "CD_DEPT", this.AuthClient.CD_DEPT);
		dsUserParam.setColumn(nrow, "GR_SEARCH", this.grSearch);
		break;
		
	case "ccfCD_SITE": // 작성부서
		dsUserParam.setColumn(nrow, "CD_CORP", this.ccfCD_CORP.form.CDTextBox.value);
		dsUserParam.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);	
		dsUserParam.setColumn(nrow, "CD_DEPT", this.AuthClient.CD_DEPT);
		dsUserParam.setColumn(nrow, "GR_SEARCH", this.grSearch);
		break;
		
	case "ccfCD_SUJI": // 수지코드
		dsUserParam.setColumn(nrow, "TY_INOUT", "");	
		dsUserParam.setColumn(nrow, "YN_USE", "Y");
		break;		
		
	default:
	}	
	return true;	
	
} 

this.fnAfterCDTextChanged = function(id) {
	switch(id) {
	
	case "ccfCD_CORP": // 법인코드
		//this.ccfAcntUnitCd.form.DSTextBox.set_value("");
		//this.ccfAcntUnitCd.form.CDTextBox.set_value("");
		break;
		
	case "ccfCD_SITE": // 품의부서코드
		break;

	case "ccfCD_SUJI": // 수지코드
		break;
	default:
	}	
	return true;
} 

 
this.fnGrid_BeforuserDataSetParam = function(id, dsUserParam, nrow) {
	return true;
}

this.fnGrid_AfterCDTextChanged = function(id, codeFindData) {

};
 
/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
 
/************************************************************************
 * 기타 이벤트
 ************************************************************************/
/*
 *	조회 조건 변경시 초기화
 */
this.fnSearchInit = function(obj,e) {
	if(e == null || (e.pretext != e.posttext)) {
		this.gfnSetFormStatus(this);
		this.gfnGridClear(this.dxGrid);
	}
};

this.fnSetCombo = function() {
	
	this.dsCombo = new Dataset();
	this.dsCombo.addColumn("CD_SYSTEM", "string");
	this.dsCombo.addColumn("CD_TYPE", "string");
	
	this.dsCombo.addRow();
	this.dsCombo.setColumn(0, "CD_SYSTEM", "DF");
	this.dsCombo.setColumn(0, "CD_TYPE", "A7");
	
	var strSvcId    = "combo";
	var strSvcType  = "select";
	var inProc		= "_dsProc";
	var inData      = "combo=dsCombo";
	var outData     = "dsYN_FINAL=combo0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
};

// 자료생성
this.fnCreateData = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	this.fnPopupOpen("DFA_DLG_PLANL_CREATE");
}

// 자료삭제(초기화)
this.fnDeleteData = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	this.fnPopupOpen("DFA_DLG_PLANL_DELETE");
}

this.fnPopupOpen = function(popId) {
	
	if (!this.fnPopupValidate(popId)) {
		return false;
	}
	
	var param = {};
	param.YM_PLAN = this.gfnTrim(this.dsSearch.getColumn(0, "YM_PLAN"));						// 작성년월
	param.CD_CORP = this.gfnTrim(this.ccfCD_CORP.form.CDTextBox.value);							// 법인코드
	param.DS_CORP = this.gfnTrim(this.ccfCD_CORP.form.DSTextBox.value);							// 법인명
	param.CD_SITE = this.gfnTrim(this.dsList.getColumn(this.dsList.rowposition, "CD_SITE"));	// 작성부서
	param.DS_SITE = this.gfnTrim(this.dsList.getColumn(this.dsList.rowposition, "DS_SITE"));	// 작성부서명
	param.CD_SITE_CD = this.gfnTrim(this.ccfCD_SITE.form.CDTextBox.value);	// 작성부서 (자료생성,자료생성취소 버튼에서 사용)
	param.DS_SITE_CD = this.gfnTrim(this.ccfCD_SITE.form.DSTextBox.value);	// 작성부서명 (자료생성,자료생성취소 버튼에서 사용)		
	param.YN_FINAL = this.gfnTrim(this.dsList.getColumn(this.dsList.rowposition, "YN_FINAL"));	// 구분
	
	
	var width = 425;
	var height = 330;
	
	// 화면 오픈. 
	// CD_MODULE은 보통 같은 모듈에서 호출하는 경우가 많으니 this.FormInfo.CD_MODULE 사용
	// 타 모듈 화면 호출시 지정할것.
	
	this.gfnFormOpen(this.FormInfo.CD_MODULE, popId, "fnPopCallBack", param, width, height);
}

// 전자결재
this.fnElctrncPmnt = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
// 	if(!this.gfnGridIsRow(this.dxGrid)) return;	
// 	
// 	var nICnt = this.dsList.findRow(this.ucFlag,"I");
// 	var nUCnt = this.dsList.findRow(this.ucFlag,"U");
// 	var nDCnt = this.dsList.findRow(this.ucFlag,"D");	
// 	
// 	if( nICnt > -1|| nUCnt > -1 || nDCnt > -1) { 
// 		this.gfnAlert("저장 후 처리하세요.", "");
// 		return; 
//  	}	
//  	
//  	// 결재상태 1,2 : 결재중,결재완료 시 return;
//  	var tyAppr = this.dsList.getColumn(this.dsList.rowposition, "TY_APPR");
//  	if ( tyAppr == "1" || tyAppr == "2" ) {
//  		this.gfnAlert("결재상태를 확인 바랍니다.");
//  		return;
//  	}	
// 
// 	var param = {};
// 	param.V1 = this.dsSearch.getColumn(0, "");							// 작성년월
// 	param.V2 = this.dsList.getColumn(this.dsList.rowposition, "CD_CORP");		// 법인코드
// 	param.V3 = this.dsList.getColumn(this.dsList.rowposition, "");		// 작성부서
// 	param.V4 = this.dsList.getColumn(this.dsList.rowposition, "");		// 구분	
// 	param.ID_AP = this.dsList.getColumn(this.dsList.rowposition, "NO_APPR");	// 전자결재문서번호
// 	param.DS_ETITLE = "";
// 
// 	this.gfnFormOpen("DFA", "DFA_PLANL_APP", "fnAprvDialogCallback", param, 1200, 700);

    var strFormId = "DSMEC_LONG_PLAN";
	var strSubject = "장기자금계획 상신";
	strSubject = encodeURI(strSubject);
	var url = this.gfnGetConfig("DZ" , "GW_APROVAL_URL");
	url = url + "approval/legacy/goFormLink.do?legacyFormID=" + strFormId;
	url += "&mode=DRAFT";
	url += "&ID_USER=" + this.AuthClient.ID_USER;
	url += "&DS_KEY1=" + this.dsSearch.getColumn(0, "YM_PLAN");	// 작성년월
	url += "&DS_KEY2=" + this.dsSearch.getColumn(0, "CD_CORP");	// 법인코드
	url += "&DS_KEY3=" + this.dsSearch.getColumn(0, "CD_SITE"); // 작성부서
	url += "&DS_KEY4=" + this.dsSearch.getColumn(0, "YN_FINAL"); // 구분
	url += "&DS_KEY5="
	url += "&RTN_TITLE=" + strSubject;
			
	var new_window = window.open(url,"_blank", "width=790,height=1000,menubar=no,scrollbars=no,resizable=no,status=no");
	new_window.onbeforeunload = this.fnAprvDialogCallback();
}

 this.fnAprvDialogCallback = function(svcID, value) {
	// 리턴값
	//if(value){
		// 결재완료, 결재취소, 결재상신 후에는 재조회를 한다
		this.FormBtns.Select.click();
	//}
};

// 전자결재문서조회
this.fnElctrncPmntDoc = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	if(!this.gfnGridIsRow(this.dxGrid)) return;	
	
	var nICnt = this.dsList.findRow(this.ucFlag,"I");
	var nUCnt = this.dsList.findRow(this.ucFlag,"U");
	var nDCnt = this.dsList.findRow(this.ucFlag,"D");	
	
	if( nICnt > -1|| nUCnt > -1 || nDCnt > -1) { 
		this.gfnAlert("저장 후 처리하세요.", "");
		return; 
	}	
	var nRow = this.dsList.rowposition;
	if(this.gfnIsNull(this.dsList.getColumn(this.dsList.rowposition , "NO_APPR"))){
		this.gfnAlert("결재번호 정보가 존재하지 않습니다.");
		return;
	}

    var url = this.gfnGetConfig("DZ" , "GW_APROVAL_URL");
	url = url+"approval/legacy/goFormLink.do?";
	url +="mode=complete";
	url +="&ID_USER=" + this.AuthClient.ID_USER;
	url +="&fiid=" + this.dsList.getColumn(nRow, "NO_APPR");
	var new_window = window.open(url,"_blank", "width=790,height=1000,menubar=no,scrollbars=no,resizable=no,status=no");
	new_window.onbeforeunload = this.fnAprvDialogCallback();
	
}

// 전자결재(초기화)
this.fnElctrncPmntDelte = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	this.fnPopupOpen("DFA_DLG_APPRL_DELETE");
}

this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
	}
};

this.divData_objGrid_onselectchanged = function(obj:nexacro.Grid,e:nexacro.GridSelectEventInfo)
{
	// 일선택시 비고에 해당일의 비고 셋팅해서 보여주기
	var ds = obj.getBindDataset();
	ds.set_enableevent(false);
	
	var colnm = "RM_BIGO_" + this.gfnGridGetBindColumnNameByIndex(obj, e.cell).substring(3);
	ds.setColumn(e.row, "RM_BIGO", ds.getColumn(e.row, colnm));
	
	ds.set_enableevent(true);
};
this.divSearch_cboYN_FINAL_onitemchanged = function(obj:nexacro.Combo,e:nexacro.ItemChangeEventInfo)
{
	if (e.posttext == "전체") {
		this.btnElctrncPmnt.set_enable(false);
	} else {
		this.btnElctrncPmnt.set_enable(true);
	}
};
]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DFAPR_PLANL_SELECT</Col>
          </Row>

<Row>
            <Col id="TARGET">create</Col>
            <Col id="SP">DFAPR_PLANL_CREATE</Col>
</Row>

          <Row>
            <Col id="TARGET">update</Col>
            <Col id="SP">DFAPR_PLANL_UPDATE</Col>
          </Row>

<Row>
            <Col id="TARGET">createx</Col>
            <Col id="SP">DFAPR_PLANL_CREATEX</Col>
</Row>

          <Row>
            <Col id="TARGET">combo</Col>
            <Col id="SP">DZXPR_COMBO_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">clearx</Col>
            <Col id="SP">DFAPR_PLANL_GW_CLEAR</Col>
          </Row>
          <Row>
            <Col id="TARGET">create</Col>
            <Col id="SP">DFAPR_PLANL_CREATE</Col>
          </Row>
          <Row>
            <Col id="TARGET">createx</Col>
            <Col id="SP">DFAPR_PLANL_CREATEX</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsYN_FINAL"/>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_CORP" type="STRING" size="256"/>
          <Column id="YM_PLAN" type="STRING" size="256"/>
          <Column id="CD_SITE" type="STRING" size="256"/>
          <Column id="CD_SUJI" type="STRING" size="256"/>
          <Column id="YN_FINAL" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfCD_CORP.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_CORP"/>
      <BindItem id="item2" compid="divSearch.form.ccfCD_SITE.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_SITE"/>
      <BindItem id="item3" compid="divSearch.form.ccfCD_SUJI.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_SUJI"/>
      <BindItem id="item4" compid="divSearch.form.cboYN_FINAL" propid="value" datasetid="dsSearch" columnid="YN_FINAL"/>
      <BindItem id="item5" compid="divSearch.form.calYM_PLAN.form.TextBox" propid="value" datasetid="dsSearch" columnid="YM_PLAN"/>
    </Bind>
  </Form>
</FDL>
