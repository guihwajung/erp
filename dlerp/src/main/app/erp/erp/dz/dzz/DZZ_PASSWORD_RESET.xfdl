<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="form" width="390" height="170" titletext="패스워드 초기화" onload="form_onload" onbeforeclose="form_onbeforeclose" cursor="auto">
    <Layouts>
      <Layout>
        <Div id="divData" taborder="0" text="div00" left="0" top="0" right="0" bottom="0">
          <Layouts>
            <Layout>
              <!-- 사번 -->
              <Static id="staTitle" taborder="15" text="비밀번호 초기화" left="0" top="0" height="30" right="0" uWord="popup.notice" cssclass="sta_POP_Title"/>
              <Static id="staID_USER" taborder="0" text="사번" left="0" top="staTitle:0" width="105" height="34" cssclass="sta_WF_tablelabelT"/>
              <Static id="staID_USER_Bg" taborder="2" left="staID_USER:-1" top="staID_USER:-34" height="34" cssclass="sta_WF_tablebgT" right="0"/>
              <Edit id="edtID_USER" taborder="1" left="staID_USER:5" top="staID_USER:-29" width="180" height="24" maxlength="10" inputfilter="none,comma,dot,sign,space,symbol" displaynulltext="사번을 입력하세요."/>
              <Button id="btnLoadPhone" taborder="4" text="정보확인" top="edtID_USER:-24" height="24" width="90" right="5" visible="true" onclick="btnLoadPhone_onclick"/>
              <!-- 휴대폰 -->
              <Static id="staMOBILE" taborder="0" text="휴대폰" left="0" top="staID_USER:-1" width="105" height="34" cssclass="sta_WF_tablelabel"/>
              <Static id="staMOBILE_Bg" taborder="2" left="staMOBILE:-1" top="staMOBILE:-34" height="34" cssclass="sta_WF_tablebg" right="0"/>
              <Edit id="edtMOBILE" taborder="1" left="staMOBILE:5" top="staMOBILE:-29" width="180" height="24" password="false" readonly="false" enable="true" displaynulltext="숫자만 입력하세요." inputfilter="none,symbol,sign,space,dot,alpha,comma" maxlength="11"/>
              <Button id="btnAuthNumber" taborder="4" text="인증번호 발송" top="staMOBILE:-29" height="24" width="90" right="5" visible="true" onclick="btnAuthNumber_onclick" enable="false"/>
              <!-- 인증확인 -->
              <Static id="staAUTH_NUMBER" taborder="0" text="인증확인" left="0" top="staMOBILE:-1" width="105" height="34" cssclass="sta_WF_tablelabel"/>
              <Static id="staAUTH_NUMBER_Bg" taborder="2" left="staAUTH_NUMBER:-1" top="staAUTH_NUMBER:-34" height="34" cssclass="sta_WF_tablebg" right="0"/>
              <Edit id="edtAUTH_NUMBER" taborder="1" left="staAUTH_NUMBER:5" top="staAUTH_NUMBER:-29" width="145" height="24" password="false" enable="false" inputfilter="none,alpha,comma,dot,sign,space,symbol"/>
              <Static id="staTIME" taborder="14" text="03:00" left="260" top="102" width="30" height="22" textAlign="center"/>
              <Button id="btnConfirm" taborder="4" text="인증확인" top="staAUTH_NUMBER:-29" height="24" width="90" right="5" visible="true" onclick="btnConfirm_onclick" enable="false"/>
              <!-- 닫기 -->
              <Button id="btnClose" taborder="13" text="닫기" top="136" height="24" width="90" right="5" onclick="btnClose_onclick" visible="true"/>
              <Static id="sta00" taborder="15" text="&quot;정보확인&quot; 클릭 후 &quot;인증번호 발송&quot;으로 본인확인 후&#13;&#10;변경된 비밀번호가 전송됩니다." left="6" top="131" width="283" height="28" onclick="divData_sta00_onclick" font="11px/normal &quot;Malgun Gothic&quot;"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form, e:nexacro.LoadEventInfo) {
	// -- 필수 -------------------//
	//this.gfnFormOnLoad(this);
	//this.gfnFormInfo(this);
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	this.fnSetCombo();
	this.fnInit();
}

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
	
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
	
}

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.edtID_USER     = this.divData.form.edtID_USER;
	this.edtMOBILE      = this.divData.form.edtMOBILE;
	this.edtAUTH_NUMBER = this.divData.form.edtAUTH_NUMBER;
	this.staTIME        = this.divData.form.staTIME;
	
	this.btnLoadPhone  = this.divData.form.btnLoadPhone;
	this.btnAuthNumber = this.divData.form.btnAuthNumber;
	this.btnConfirm    = this.divData.form.btnConfirm;
	this.btnClose      = this.divData.form.btnClose;
}

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	
}

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	
}

/************************************************************************
 * 콤보 데이터 조회 및 설정
 ************************************************************************/
this.fnSetCombo = function() {
	
}

/************************************************************************
 * 화면 및 검색영역 초기화
 ************************************************************************/
this.fnInit = function() {
	
}

/************************************************************************
 * 버튼 이벤트
 ************************************************************************/
/*
 * 조회 버튼
 */
this.fnSelect = function() {
	
}

/*
 * 입력 버튼
 */
this.fnAdd = function() {
	
}

/*
 * 삭제 버튼
 */
this.fnDel = function() {
	
}

/*
 * 저장 버튼
 */
this.fnSave = function() {
	
}

/*
 * 엑셀 버튼
 */
this.fnExcel = function() {
	
}

/*
 * 출력 버튼
 */
this.fnPrint = function() {
	
}

/************************************************************************
 * Validate
 ************************************************************************/
this.fnSelectValidate = function() {
	return true;
}

/************************************************************************
 * 확장버튼 이벤트
 ************************************************************************/

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 * 기본 콜백
 */
this.fnCallback = function(svcID, errorCode, errorMsg, strArg) {
	if (errorCode != 0) {
		this.gfnAlert(errorMsg);
		return;
	}
	
	if (svcID == "user") {
		if (this.dsUserInfo.rowcount == 0) {
			this.gfnAlert('해당 사용자를 찾을 수 없습니다.');
			return;
		}
		
		this.edtMOBILE.set_value(this.dsUserInfo.getColumn(0, "MOBILE"));
		this.edtMOBILE.set_enable(false);
		this.btnAuthNumber.set_enable(true);
		
		this.gfnAlert('인증번호 발송 버튼을 누르면 인증번호가 발송됩니다.');
	} else if (svcID == "authenticate") {
		this.gfnAlert("인증번호가 전송되었습니다.", function() {
			this.edtAUTH_NUMBER.set_enable(true);
			this.countdown(this.staTIME, this.edtAUTH_NUMBER, 2, 59);
			this.btnConfirm.set_enable(true);
		})
	} else if (svcID == "password") {
		this.gfnAlert("변경된 패스워드가 전송되었습니다.", function() {
			this.close();
		})
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	return true;
}

this.fnAfterCDTextChanged = function(id, codeFindData) {
	
}

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
this.fnGridBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	return true;
}

this.fnGridAfterCDTextChanged = function(id, codeFindData) {
	
}

/************************************************************************
 * 기타 이벤트
 ************************************************************************/
// 정보확인 버튼 클릭 이벤트
this.btnLoadPhone_onclick = function(obj:nexacro.Button, e:nexacro.ClickEventInfo) {
	if (this.edtID_USER.value == undefined) {
		this.gfnAlert("사번을 입력해주세요.");
		return;
	}
	
	if (this.edtMOBILE.value == undefined) {
		this.gfnAlert("등록된 휴대폰번로를 입력해주세요.");
		return;
	}

	var dec_key = nexacro.getEnvironmentVariable("evKey");
	var key = CryptoJS.enc.Hex.parse(dec_key.toString());
	
	this.dsUser.clearData();
	var nrow = this.dsUser.addRow();
	this.dsUser.setColumn(nrow, "ID_SABUN", CryptoJS.AES.encrypt(this.edtID_USER.value.toUpperCase(), key, {iv:key}).toString());
	this.dsUser.setColumn(nrow, "MOBILE", CryptoJS.AES.encrypt(this.edtMOBILE.value.toUpperCase(), key, {iv:key}).toString());
	
	var strSvcId    = "user";
	var strSvcType  = "user";
	var inProc		= "";
	var inData      = "dsUser=dsUser";
	var outData     = "dsUserInfo=output0";
	var strArg      = "";
	var callBackFnc = "fnCallback";

	this.gfnTransaction(strSvcId,		// transaction을 구분하기 위한 svc id값
						strSvcType, 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData, 		// 입력값으로 보낼 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						outData, 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc);	// 통신방법 정의 [생략가능]
}

// 인증번호발송 버튼 클릭 이벤트
this.btnAuthNumber_onclick = function(obj:nexacro.Button, e:nexacro.ClickEventInfo) {
	this.gfnConfirm('[' + this.edtMOBILE.value + ']으로 인증번호를 전송하시겠습니까?', function(svcId, isOk) {
		if (isOk) {
			var dec_key = nexacro.getEnvironmentVariable("evKey");
			var key = CryptoJS.enc.Hex.parse(dec_key.toString());
			
			this.dsAuthenticate.clearData();
			var nrow = this.dsAuthenticate.addRow();
			this.dsAuthenticate.setColumn(nrow, "ID_SABUN", CryptoJS.AES.encrypt(this.dsUserInfo.getColumn(0, "ID_SABUN"), key, {iv:key}).toString());
			this.dsAuthenticate.setColumn(nrow, "DS_HNAME", CryptoJS.AES.encrypt(this.dsUserInfo.getColumn(0, "DS_HNAME"), key, {iv:key}).toString());
			this.dsAuthenticate.setColumn(nrow, "MOBILE", CryptoJS.AES.encrypt(this.dsUserInfo.getColumn(0, "MOBILE"), key, {iv:key}).toString());
			
			var strSvcId    = "authenticate";
			var strSvcType  = "authenticate";
			var inProc		= "";
			var inData      = "dsAuthenticate=dsAuthenticate";
			var outData     = "";
			var strArg      = "";
			var callBackFnc = "fnCallback";

			this.gfnTransaction(strSvcId,		// transaction을 구분하기 위한 svc id값
								strSvcType, 	// transaction을 요청할 구분
								inProc,			// Procedure 정보 Dataset 이름
								inData, 		// 입력값으로 보낼 dataset id, a=b형태로 실제이름과 입력이름을 매칭
								outData, 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
								strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
								callBackFnc);	// 통신방법 정의 [생략가능]
		}
	});
}

// 인증확인 버튼 클릭 이벤트
this.btnConfirm_onclick = function(obj:nexacro.Button, e:nexacro.ClickEventInfo) {
	this.gfnConfirm('인증번호를 전송하시겠습니까?', function(svcId, isOk) {
		if (isOk) {			
			var dec_key = nexacro.getEnvironmentVariable("evKey");
			var key = CryptoJS.enc.Hex.parse(dec_key.toString());
			
			this.dsPassword.clearData();
			var nrow = this.dsPassword.addRow();
			this.dsPassword.setColumn(nrow, "ID_SABUN", CryptoJS.AES.encrypt(this.dsUserInfo.getColumn(0, "ID_SABUN").toUpperCase(), key, {iv:key}).toString());
			this.dsPassword.setColumn(nrow, "DS_HNAME", CryptoJS.AES.encrypt(this.dsUserInfo.getColumn(0, "DS_HNAME"), key, {iv:key}).toString());
			this.dsPassword.setColumn(nrow, "MOBILE", CryptoJS.AES.encrypt(this.dsUserInfo.getColumn(0, "MOBILE"), key, {iv:key}).toString());
			this.dsPassword.setColumn(nrow, "AUTH", CryptoJS.AES.encrypt(this.edtAUTH_NUMBER.value, key, {iv:key}).toString());
			
			var strSvcId    = "password";
			var strSvcType  = "password";
			var inProc		= "";
			var inData      = "dsPassword=dsPassword";
			var outData     = "";
			var strArg      = "";
			var callBackFnc = "fnCallback";

			this.gfnTransaction(strSvcId,		// transaction을 구분하기 위한 svc id값
								strSvcType, 	// transaction을 요청할 구분
								inProc,			// Procedure 정보 Dataset 이름
								inData, 		// 입력값으로 보낼 dataset id, a=b형태로 실제이름과 입력이름을 매칭
								outData, 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
								strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
								callBackFnc);	// 통신방법 정의 [생략가능]
		}
	});
	
}

// 닫기 버튼 클릭 이벤트
this.btnClose_onclick = function(obj:nexacro.Button, e:nexacro.ClickEventInfo) {
	this.close();
}

this.countdown = function(timer, input, minutes, seconds) {
    var time = minutes * 60 + seconds;
    var interval = setInterval(function() {
        if (time <= 0) {
            clearInterval(interval);
			input.set_enable(false);
            return;
        }
        var minutes = Math.floor( time / 60 );
        if (minutes < 10) minutes = "0" + minutes;
        var seconds = time % 60;
        if (seconds < 10) seconds = "0" + seconds; 
        var text = minutes + ':' + seconds;
		
		timer.set_text(text);
		
        time--;
    }, 1000);
}
this.divData_sta00_onclick = function(obj:nexacro.Static,e:nexacro.ClickEventInfo)
{
	
};
]]></Script>
    <Objects>
      <Dataset id="dsSp"/>
      <Dataset id="dsSearch">
        <ColumnInfo>
          <Column id="ID_SABUN" type="STRING" size="256"/>
          <Column id="MOBILE" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="dsUser">
        <ColumnInfo>
          <Column id="ID_SABUN" type="STRING" size="256"/>
          <Column id="MOBILE" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="dsUserInfo">
        <ColumnInfo>
          <Column id="ID_SABUN" type="STRING" size="256"/>
          <Column id="DS_HNAME" type="STRING" size="256"/>
          <Column id="MOBILE" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="dsAuthenticate">
        <ColumnInfo>
          <Column id="ID_SABUN" type="STRING" size="256"/>
          <Column id="DS_HNAME" type="STRING" size="256"/>
          <Column id="MOBILE" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="dsPassword">
        <ColumnInfo>
          <Column id="ID_SABUN" type="STRING" size="256"/>
          <Column id="DS_HNAME" type="STRING" size="256"/>
          <Column id="MOBILE" type="STRING" size="256"/>
          <Column id="AUTH" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
    </Objects>
  </Form>
</FDL>
