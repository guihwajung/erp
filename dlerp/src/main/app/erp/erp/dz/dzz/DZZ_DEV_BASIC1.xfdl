<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="New Form" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0" top="0" height="45" right="0" cssclass="div_SEARCH_Bg" formscrolltype="none">
          <Layouts>
            <Layout>
              <Static id="sta00" taborder="0" text="현장코드" left="10" top="10" width="60" height="25"/>
              <Div id="ccfCD_CODE" CodeFindName="DZX_CFDEPT_ORG" CDTextWidth="70" taborder="1" left="sta00:10" top="10" width="300" height="25" url="cmm::cmmCodeFind.xfdl"/>
              <Static id="sta01" taborder="2" text="일자" left="ccfCD_CODE:20" top="10" width="30" height="25" textDecoration="underline"/>
              <Calendar id="ctclDT_FROM" taborder="3" left="sta01:10" top="10" width="105" height="25" dateformat="yyyy-MM-dd" editformat="yyyyMMdd" autoselect="true"/>
              <Static id="sta02" taborder="4" text="~" left="ctclDT_FROM:5" top="10" width="10" height="25"/>
              <Calendar id="ctclDT_TO" taborder="5" left="sta02:5" top="10" width="105" height="25" dateformat="yyyy-MM-dd" editformat="yyyyMMdd" autoselect="true"/>
              <Static id="sta03" taborder="6" text="콤보" left="ctclDT_TO:20" top="10" width="30" height="25"/>
              <Combo id="ccboCD_COMBO" taborder="7" left="sta03:10" top="10" width="80" height="25" innerdataset="dsCD_COMBO" codecolumn="CD_CODE" datacolumn="DS_CODE"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();

	//조회조건 초기값 설정
	var today = this.gfnGetDate();
	this.dsSearch.setColumn(0, "DT_FROM", this.gfnAddMonth(today, -1));
	this.dsSearch.setColumn(0, "DT_TO", today);
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btnDetail = this.gfnFormButtonAdd("Detail", "fnDetail");	//상세
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {	
	this.dxGrid = this.divData.form.objGrid;
	
	this.ccfCD_CODE = this.divSearch.form.ccfCD_CODE;
	this.ctclDT_FROM = this.divSearch.form.ctclDT_FROM;
	this.ctclDT_TO = this.divSearch.form.ctclDT_TO;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	// 그리드 초기화
	this.gfnGridInit(this.dxGrid, this.dsList, "DZ", "DZZ_DEV_BASIC");
	
	//코드파인드 이벤트
	this.ccfCD_CODE.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	
	// 그리드 코드파인드 설정
	this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforeUserDataSetParam";
	
	// BUTTON, BUTTON-IN 처리
	this.dxGrid.ExpandUp = "fnGrid_ExpandUp";
};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_CODE", "string");
	this.dsSelect.addColumn("DT_FROM", "string");
	this.dsSelect.addColumn("DT_TO", "string");
	this.dsSelect.addColumn("CD_COMBO", "string");

	this.dsSave = new Dataset();
	this.dsSave.addColumn("TY_SAVE", "string");
	this.dsSave.addColumn("NO_SEQ", "int");
	this.dsSave.addColumn("CD_CODE", "string");
	this.dsSave.addColumn("DS_CODE", "string");
	this.dsSave.addColumn("DS_TEXT", "string");
	this.dsSave.addColumn("YN_CHECK", "string");
	this.dsSave.addColumn("CD_COMBO", "string");
	this.dsSave.addColumn("AM_TOTAL", "bigdecimal");
	this.dsSave.addColumn("RT_AVG", "bigdecimal");
	this.dsSave.addColumn("DT_DATE", "string");
	this.dsSave.addColumn("RM_BIGO", "string");
	this.dsSave.addColumn("DS_BUTTON", "string");
	this.dsSave.addColumn("DS_TEMP1", "string");
	this.dsSave.addColumn("DS_TEMP2", "string");
	this.dsSave.addColumn("DS_TEMP3", "string");
	this.dsSave.addColumn("DS_TEMP4", "string");
	this.dsSave.addColumn("ID_USER", "string");

}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	this.dsSelect.setColumn(0, "CD_CODE", this.dsSearch.getColumn(0, "CD_CODE"));
	this.dsSelect.setColumn(0, "DT_FROM", this.dsSearch.getColumn(0, "DT_FROM"));
	this.dsSelect.setColumn(0, "DT_TO", this.dsSearch.getColumn(0, "DT_TO"));
	this.dsSelect.setColumn(0, "CD_COMBO", this.dsSearch.getColumn(0, "CD_COMBO"));
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	var nrow = this.gfnGridAdd(this.dxGrid); // top (default), bottom, current
}

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}

/*
 *	저장 버튼
 */
this.fnSave = function() {
	// 그리드 필수항목 체크
	if (!this.gfnGridValidate(this.dxGrid)) return;	

	this.dxGrid.updateToDataset();

	this.dsSave.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "I":
			case "U":
			case "D":
				var nrow = this.dsSave.addRow();
				this.dsInsert.setColumn(nrow, "TY_SAVE", flag);
				this.dsInsert.setColumn(nrow, "NO_SEQ", this.dsSearch.getColumn(0, "NO_SEQ"));
				this.dsInsert.setColumn(nrow, "CD_CODE", this.dsList.getColumn(i, "CD_CODE"));
				this.dsInsert.setColumn(nrow, "DS_CODE", this.dsList.getColumn(i, "DS_CODE"));
				this.dsInsert.setColumn(nrow, "DS_TEXT", this.dsList.getColumn(i, "DS_TEXT"));
				this.dsInsert.setColumn(nrow, "YN_CHECK", this.dsList.getColumn(i, "YN_CHECK"));
				this.dsInsert.setColumn(nrow, "CD_COMBO", this.dsList.getColumn(i, "CD_COMBO"));
				this.dsInsert.setColumn(nrow, "AM_TOTAL", this.dsList.getColumn(i, "AM_TOTAL"));
				this.dsInsert.setColumn(nrow, "RT_AVG", this.dsList.getColumn(i, "RT_AVG"));
				this.dsInsert.setColumn(nrow, "DT_DATE", this.dsList.getColumn(i, "DT_DATE"));
				this.dsInsert.setColumn(nrow, "RM_BIGO", this.dsList.getColumn(i, "RM_BIGO"));
				this.dsInsert.setColumn(nrow, "DS_BUTTON", this.dsList.getColumn(i, "DS_BUTTON"));
				this.dsInsert.setColumn(nrow, "DS_TEMP1", this.dsList.getColumn(i, "DS_TEMP1"));
				this.dsInsert.setColumn(nrow, "DS_TEMP2", this.dsList.getColumn(i, "DS_TEMP2"));
				this.dsInsert.setColumn(nrow, "DS_TEMP3", this.dsList.getColumn(i, "DS_TEMP3"));
				this.dsInsert.setColumn(nrow, "DS_TEMP4", this.dsList.getColumn(i, "DS_TEMP4"));
				this.dsInsert.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
				break;
		}
	}
		
	if (this.dsSave.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "save=dsSave";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {
	var validate = true;

	if (this.gfnIsNull(this.dsSearch.getColumn(0,"DT_FROM"))) {
		validate = false;
		// Alert후 실행할 처리
		this.fnVaidateCallback = function() {
			this.ctclDT_FROM.setFocus();
		}
		this.gfnAlert("일자(FROM)를 입력하세요.", "fnVaidateCallback");
	}
	if (this.gfnIsNull(this.dsSearch.getColumn(0,"DT_TO"))) {
		validate = false;
		// Alert후 실행할 처리
		this.fnVaidateCallback = function() {
			this.ctclDT_TO.setFocus();
		}
		this.gfnAlert("일자(TO)를 입력하세요.", "fnVaidateCallback");
	}


	return validate;
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);	
	}
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	if (id == "ccfCD_CODE") {
		dsUserParam.setColumn(nrow, "CD_CORP", "");
	}
	return true;
}

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
 
this.fnGrid_BeforeUserDataSetParam = function(id, dsUserParam, nrow) {	
	// 그리드에서 코드파인드 id는 그리드셋팅의 코드파인드 식별ID
 	if (id == "DZX_CFDEPT_ORG") {
 		dsUserParam.setColumn(nrow, "CD_CORP", "");
 	}
	return true;
}

this.fnGrid_ExpandUp = function(obj:nexacro.Grid,e:nexacro.GridMouseEventInfo) {
	var colnm = this.gfnGridGetBindColumnNameByIndex(obj, e.cell);
	if(colnm == "DS_BUTTON") {
		this.gfnAlert("BUTTON 처리");
	}
}

/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{

	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
	}
};

this.fnDetail = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	if (!this.gfnGridIsRow(this.dxGrid)) return;
	
	var param = {};
	param.NO_SEQ = this.dsList.getColumn(this.dsList.rowposition, "NO_SEQ");
	
	this.gfnFormOpen("DZZ", "DZZ_DEV_BASIC2", "", param);
}
]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DZZPR_DEV_BASIC_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">insert</Col>
            <Col id="SP">DZZPR_DEV_BASIC_SAVE</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_CODE" type="STRING" size="256"/>
          <Column id="DS_CODE" type="STRING" size="256"/>
          <Column id="DT_FROM" type="STRING" size="256"/>
          <Column id="DT_TO" type="STRING" size="256"/>
          <Column id="CD_COMBO" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CD_CODE"/>
            <Col id="DS_CODE"/>
            <Col id="DT_FROM"/>
            <Col id="DT_TO"/>
            <Col id="CD_COMBO"/>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsCD_COMBO">
        <ColumnInfo>
          <Column id="CD_CODE" type="STRING" size="256"/>
          <Column id="DS_CODE" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CD_CODE"/>
            <Col id="DS_CODE">ALL</Col>
          </Row>
          <Row>
            <Col id="CD_CODE">Y</Col>
            <Col id="DS_CODE">Yes</Col>
          </Row>
          <Row>
            <Col id="CD_CODE">N</Col>
            <Col id="DS_CODE">No</Col>
          </Row>
        </Rows>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfCD_CODE.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_CODE"/>
      <BindItem id="item1" compid="divSearch.form.ccfCD_CODE.form.DSTextBox" propid="value" datasetid="dsSearch" columnid="DS_CODE"/>
      <BindItem id="item2" compid="divSearch.form.ctclDT_FROM" propid="value" datasetid="dsSearch" columnid="DT_FROM"/>
      <BindItem id="item3" compid="divSearch.form.ctclDT_TO" propid="value" datasetid="dsSearch" columnid="DT_TO"/>
      <BindItem id="item4" compid="divSearch.form.ccboCD_COMBO" propid="value" datasetid="dsSearch" columnid="CD_COMBO"/>
    </Bind>
  </Form>
</FDL>
