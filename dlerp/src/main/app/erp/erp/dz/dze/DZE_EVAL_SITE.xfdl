<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="New Form" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0" top="0" height="45" right="0" cssclass="div_SEARCH_Bg" formscrolltype="none">
          <Layouts>
            <Layout>
              <Static id="staYEAR" taborder="0" text="기준년도" left="10" top="10" width="50" height="25"/>
              <Div id="ctclYEAR" taborder="1" left="staYEAR:10" top="10" width="60" height="25" url="cmm::cmmCalYY.xfdl"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0" autosizingtype="row"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	this.ctclYEAR.form.TextBox.set_value( this.gfnGetDate().substr(0,4) );

	this.FormBtns.Select.click();
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {

}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btnCreate = this.gfnFormButtonAdd("btnCreate", "fnCreate");
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {	
	this.ctclYEAR = this.divSearch.form.ctclYEAR;
	this.dxGrid = this.divData.form.objGrid;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	// 그리드 초기화
	this.gfnGridInit(this.dxGrid, this.dsList, "DZ", "DZE_SITE_EVAL");
};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {

	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("EVAL_YEAR", "string");
	
	this.dsUpdate = new Dataset();
	this.dsUpdate.addColumn("TY_FLAG", "string");
	this.dsUpdate.addColumn("EVAL_YEAR", "string");
	this.dsUpdate.addColumn("EVAL_SEQ", "string");
	this.dsUpdate.addColumn("DS_EVAL_NM", "string");
	this.dsUpdate.addColumn("AM_EVAL_1", "bigdecimal");
	this.dsUpdate.addColumn("ENABLE_YN_1", "string");
	this.dsUpdate.addColumn("AM_EVAL_2", "bigdecimal");
	this.dsUpdate.addColumn("ENABLE_YN_2", "string");
	this.dsUpdate.addColumn("AM_EVAL_3", "bigdecimal");
	this.dsUpdate.addColumn("ENABLE_YN_3", "string");
	this.dsUpdate.addColumn("AM_EVAL_4", "bigdecimal");
	this.dsUpdate.addColumn("ENABLE_YN_4", "string");
	this.dsUpdate.addColumn("AM_EVAL_5", "bigdecimal");
	this.dsUpdate.addColumn("ENABLE_YN_5", "string");	
	this.dsUpdate.addColumn("RM_BIGO", "string");
	this.dsUpdate.addColumn("TY_GUBUN", "string");
	this.dsUpdate.addColumn("USE_YN", "string");
	this.dsUpdate.addColumn("USER_ID", "string");
	
	this.dsCreate = new Dataset();
	this.dsCreate.addColumn("EVAL_YEAR", "string");
	this.dsCreate.addColumn("USER_ID", "string");
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;

	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	
	this.dsSelect.setColumn(0, "EVAL_YEAR", this.dsSearch.getColumn(0, "EVAL_YEAR"));
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	var nrow = this.gfnGridAdd(this.dxGrid); // top (default), bottom, current
	
	this.dsList.setColumn(nrow, "EVAL_YEAR", 	  this.dsSearch.getColumn(0, "EVAL_YEAR"));
	this.dsList.setColumn(nrow, "ENABLE_YN_1",    'Y' );
	this.dsList.setColumn(nrow, "ENABLE_YN_2",    'Y' );
	this.dsList.setColumn(nrow, "ENABLE_YN_3",    'Y' );
	this.dsList.setColumn(nrow, "ENABLE_YN_4",    'Y' );
	this.dsList.setColumn(nrow, "ENABLE_YN_5",    'Y' );
	this.dsList.setColumn(nrow, "USE_YN",   	  'Y' );
}

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}

/*
 *	저장 버튼
 */
this.fnSave = function() {
	// 그리드 필수항목 체크
	if (!this.gfnGridValidate(this.dxGrid)) return;	

	this.dxGrid.updateToDataset();
		
	this.dsUpdate.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "I":
			case "U":
			case "D":			
				var nrow = this.dsUpdate.addRow();
				this.dsUpdate.setColumn(nrow, "TY_FLAG",      flag);
				this.dsUpdate.setColumn(nrow, "EVAL_YEAR",  this.dsList.getColumn(i, "EVAL_YEAR"));
				this.dsUpdate.setColumn(nrow, "EVAL_SEQ",   this.dsList.getColumn(i, "EVAL_SEQ"));
				this.dsUpdate.setColumn(nrow, "DS_EVAL_NM", this.dsList.getColumn(i, "DS_EVAL_NM"));
				this.dsUpdate.setColumn(nrow, "AM_EVAL_1",  this.dsList.getColumn(i, "AM_EVAL_1"));
				this.dsUpdate.setColumn(nrow, "ENABLE_YN_1",  this.dsList.getColumn(i, "ENABLE_YN_1"));
				this.dsUpdate.setColumn(nrow, "AM_EVAL_2",  this.dsList.getColumn(i, "AM_EVAL_2"));
				this.dsUpdate.setColumn(nrow, "ENABLE_YN_2",  this.dsList.getColumn(i, "ENABLE_YN_2"));
				this.dsUpdate.setColumn(nrow, "AM_EVAL_3",  this.dsList.getColumn(i, "AM_EVAL_3"));
				this.dsUpdate.setColumn(nrow, "ENABLE_YN_3",  this.dsList.getColumn(i, "ENABLE_YN_3"));
				this.dsUpdate.setColumn(nrow, "AM_EVAL_4",  this.dsList.getColumn(i, "AM_EVAL_4"));
				this.dsUpdate.setColumn(nrow, "ENABLE_YN_4",  this.dsList.getColumn(i, "ENABLE_YN_4"));
				this.dsUpdate.setColumn(nrow, "AM_EVAL_5",  this.dsList.getColumn(i, "AM_EVAL_5"));
				this.dsUpdate.setColumn(nrow, "ENABLE_YN_5",  this.dsList.getColumn(i, "ENABLE_YN_5"));
				this.dsUpdate.setColumn(nrow, "RM_BIGO",      this.dsList.getColumn(i, "RM_BIGO"));
				this.dsUpdate.setColumn(nrow, "TY_GUBUN",     this.dsList.getColumn(i, "TY_GUBUN"));
				this.dsUpdate.setColumn(nrow, "USE_YN",       this.dsList.getColumn(i, "USE_YN"));
				this.dsUpdate.setColumn(nrow, "USER_ID", 	  this.AuthClient.ID_USER);

				break;
		}
	}
	
	if (this.dsUpdate.rowcount == 0) return;
		
	
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "update=dsUpdate";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {
	var validate = true;
	/*
	if (this.gfnIsNull(this.dsSearch.getColumn(0,"CD_SYSTEM"))) {
		validate = false;
		// Alert후 실행할 처리
		this.fnVaidateCallback = function() {
			this.ccfCD_SYSTEM.form.CDTextBox.setFocus();
		}
		this.gfnAlert("시스템을 입력하세요.", "fnVaidateCallback");
	}
	*/
	return validate;
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);	
		
	}
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "create") {
		if (errorCode == 0) {
			this.fnCallback_callback = function()
			{
				this.FormBtns.Select.click();
			}
			
			this.gfnAlert("심의기준복사가 정상처리되었습니다.", "fnCallback_callback");
		} else {
			this.gfnAlert(errorMsg);
		}
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
 
/************************************************************************
 * 기타 이벤트	todo
 ************************************************************************/
 
this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
	}
};


// 심의기준복사 확장버튼 클릭 이벤트.
this.fnCreate = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	this.gfnConfirm("전년도 안전평가기준을 복사 진행하시겠습니까?", "fnCreate_callback");
}	

this.fnCreate_callback = function(strID, val)
{
	if(val == true)
	{
		this.dsCreate.clearData();
		var nrow = this.dsCreate.addRow();
		this.dsCreate.setColumn(nrow, "EVAL_YEAR",  this.dsSearch.getColumn(0, "EVAL_YEAR"));		
		this.dsCreate.setColumn(nrow, "USER_ID", 	  this.AuthClient.ID_USER);
		
		var strSvcId    = "create";
		var strSvcType  = "save";
		var inProc		= "_dsProc";
		var inData      = "create=dsCreate";
		var outData     = "";
		var strArg      = "";
		var callBackFnc = "fnCallback";
		
		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
							strSvcType , 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
							callBackFnc); // 통신방법 정의 [생략가능]
	}
}
]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DZFPR_EVAL_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">update</Col>
            <Col id="SP">DZFPR_EVAL_SAVE</Col>
          </Row>
          <Row>
            <Col id="TARGET">create</Col>
            <Col id="SP">DCDPR_EVAL_CREATE</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="EVAL_YEAR" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item1" compid="divSearch.form.ctclYEAR.form.TextBox" propid="value" datasetid="dsSearch" columnid="EVAL_YEAR"/>
    </Bind>
  </Form>
</FDL>
