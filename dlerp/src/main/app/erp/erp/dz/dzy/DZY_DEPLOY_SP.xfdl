<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="form" width="1280" height="720" titletext="평가진행현황" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="1" left="0" top="0" height="46.0" right="0" cssclass="div_SEARCH_Bg" text="">
          <Layouts>
            <Layout>
              <Static id="staDT_BASE" taborder="0" text="기준일자" left="0" top="10.0" width="92" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Calendar id="ctclDT_BASE" taborder="7" left="staDT_BASE:0.0" top="10.0" width="100" height="24.0" dateformat="yyyy-MM-dd" editformat="yyyyMMdd" autoselect="true"/>
              <Static id="staNM_DB" taborder="0" text="배포DB" top="10.0" height="24.0" cssclass="sta_WF_SchLabel" right="cboNM_DB:150" width="95"/>
              <Combo id="cboNM_DB" taborder="2" text="에코원에너지 개발" top="10" height="24" innerdataset="dsNmDatabase" codecolumn="CD_CODE" datacolumn="DS_CODE" index="2" value="DLECO_DEV" width="150" right="10"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:0" bottom="0" right="0" cssclass="div_DATA_Bg" ondragmove="divData_ondragmove1">
          <Layouts>
            <Layout>
              <Div id="divSplitter1" taborder="1" left="30%" top="0" width="5" height="100%" background="#c9c9c9" cursor="ew-resize" ondrag="divData_divSplitter1_ondrag"/>
              <Div id="divDataLeft" taborder="0" left="0" top="0" bottom="0" right="divSplitter1:5">
                <Layouts>
                  <Layout>
                    <Static id="sta01" taborder="0" text="변경된 SP 목록" left="0" top="0" width="100%" height="22" cssclass="sta_TITLE_Bg"/>
                    <Grid id="objGrid" taborder="0" left="0" top="sta01:5" bottom="0" right="0" oncellposchanged="fnGridCellPosChanged" autofittype="col"/>
                  </Layout>
                </Layouts>
              </Div>
              <Div id="divDataRight" taborder="0" left="divSplitter1:5" top="0" bottom="0" right="0" ondragmove="divData_ondragmove2">
                <Layouts>
                  <Layout>
                    <Div id="divSplitter2" taborder="1" left="50%" top="0" width="5" height="100%" background="#c9c9c9" cursor="ew-resize" ondrag="divData_divSplitter2_ondrag"/>
                    <Div id="divDataRightLeft" taborder="0" left="0" top="0" bottom="0" right="divSplitter2:5">
                      <Layouts>
                        <Layout>
                          <Static id="sta02" taborder="0" text="변경된 SP 로그" left="0" top="0" width="100%" height="22" cssclass="sta_TITLE_Bg"/>
                          <Grid id="objGridSPLog" taborder="0" left="0" top="sta02:5" bottom="0" right="0" oncellposchanged="fnGridSPLogCellPosChanged" autofittype="col"/>
                        </Layout>
                      </Layouts>
                    </Div>
                    <Div id="divDataRightRight" taborder="0" left="divSplitter2:5" top="0" bottom="0" right="0">
                      <Layouts>
                        <Layout>
                          <Static id="sta03" taborder="0" text="변경된 SP" left="0" top="0" width="100%" height="22" cssclass="sta_TITLE_Bg"/>
                          <TextArea id="txtSP" taborder="0" left="0" top="sta03:5" right="0" bottom="0"/>
                        </Layout>
                      </Layouts>
                    </Div>
                  </Layout>
                </Layouts>
              </Div>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo) {
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);
	this.gfnFormInfo(this);
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	this.fnSetCombo();
	this.fnInit();
}

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
	
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btnDeploy = this.gfnFormButtonAdd("btnDeploy", "fnDeploy");	// 배포 버튼
}

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	// 그리드영역
	this.dxGrid      = this.divData.form.divDataLeft.form.objGrid;
	this.dxGridSPLog = this.divData.form.divDataRight.form.divDataRightLeft.form.objGridSPLog;
	
	// 검색영역
	this.ctclDT_BASE = this.divSearch.form.ctclDT_BASE;
	
	// 데이터영역
	this.txtSP = this.divData.form.divDataRight.form.divDataRightRight.form.txtSP;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {	
	// 그리드 초기화
	this.gfnGridInit(this.dxGrid, this.dsList, "DZ", "DZY_DEPLOY_SP");
	this.dxGrid.BeforeUserDataSetParam = "fnGridBeforeUserDataSetParam";
	this.dxGrid.AfterCDTextChanged     = "fnGridAfterCDTextChanged";
	this.dxGrid.EnterCell              = "fnGridEnterCell";
	
	this.gfnGridInit(this.dxGridSPLog, this.dsListSPLog, "DZ", "DZY_DEPLOY_SPLOG");
	this.dxGridSPLog.BeforeUserDataSetParam = "fnGridBeforeUserDataSetParam";
	this.dxGridSPLog.AfterCDTextChanged     = "fnGridAfterCDTextChanged";
	this.dxGridSPLog.selecttype = 'row';
}

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	// SP 목록 조회
	this.dsSpSelect = new Dataset();
	this.dsSpSelect.addColumn("DAYS", "int");
	
	// SP 로그 목록 조회
	this.dsSpLogSelect = new Dataset();
	this.dsSpLogSelect.addColumn("ID_FORM", "string");
	
	// SP 배포
	this.dsDeploy = new Dataset();
	this.dsDeploy.addColumn("NM_SP", "string");
	this.dsDeploy.addColumn("NM_DB", "string");
	
	// 콤보 조회
	this.dsCombo = new Dataset();
	this.dsCombo.addColumn("CD_SYSTEM", "string");
	this.dsCombo.addColumn("CD_TYPE", "string");
}

/************************************************************************
 * 콤보 데이터 조회 및 설정
 ************************************************************************/
this.fnSetCombo = function() {
	this.dsCombo.clearData();
	this.dsCombo.addRow();
	this.dsCombo.setColumn(0, "CD_SYSTEM", "DZ");
	this.dsCombo.setColumn(0, "CD_TYPE"  , "E1");
	
	var strSvcId    = "select_combo";
	var strSvcType  = "select";
	var inProc		= "_dsProc";
	var inData      = "select_combo=dsCombo";
	var outData     = "dsNmDatabase=select_combo0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction(strSvcId,		// transaction을 구분하기 위한 svc id값
						strSvcType, 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData, 		// 입력값으로 보낼 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						outData, 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc,	// 통신방법 정의 [생략가능]
						false);
}

/************************************************************************
 * 화면 및 검색영역 초기화
 ************************************************************************/
this.fnInit = function() {
	var theDay = this.gfnAddDate(this.gfnGetDate(), -60);
	this.dsSearch.setColumn(0, "DT_BASE", theDay);
	this.dsSearch.setColumn(0, "NM_DB", "DLECO_DEV");
	
	this.gfnGridColumnColor(this.dxGrid, "NM_SP", "BACK_GangJo,Red", "YN_RAILNOT_BDGT == 'Y'");
}

/************************************************************************
 * 버튼 이벤트
 ************************************************************************/
/*
 * 조회 버튼
 */
this.fnSelect = function() {
	if (!this.gfnSearchValidate(this.divSearch, this.dsSearch)) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);
	this.dsSpSelect.clearData();
	this.dsSpSelect.addRow();
	this.dsSpSelect.setColumn(0, "DAYS", parseInt(this.gfnGetDiffDate(this.gfnGetDate(), this.dsSearch.getColumn(0, "DT_BASE"))) * -1);

	var strSvcId    = "select_sp";
	var strSvcType  = "select";
	var inProc		= "_dsProc";
	var inData      = "select_sp=dsSpSelect";
	var outData     = "dsList=select_sp0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction(strSvcId,		// transaction을 구분하기 위한 svc id값
						strSvcType, 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData, 		// 입력값으로 보낼 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						outData, 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc);	// 통신방법 정의 [생략가능]
}

this.fnSelectSPLog = function() {
	this.gfnGridBeforeSelect(this.dxGridSPLog);

	this.dsSpLogSelect.clearData();
	this.dsSpLogSelect.addRow();
	this.dsSpLogSelect.setColumn(0, "ID_FORM", this.dsList.getColumn(this.dsList.rowposition, "NM_SP"));

	var strSvcId    = "select_splog";
	var strSvcType  = "select";
	var inProc		= "_dsProc";
	var inData      = "select_splog=dsSpLogSelect";
	var outData     = "dsListSPLog=select_splog0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction(strSvcId,		// transaction을 구분하기 위한 svc id값
						strSvcType, 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData, 		// 입력값으로 보낼 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						outData, 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc);	// 통신방법 정의 [생략가능]
}

/*
 * 입력 버튼
 */
this.fnAdd = function() {
	
}

/*
 * 삭제 버튼
 */
this.fnDel = function() {
	
}

/*
 * 저장 버튼
 */
this.fnSave = function() {
	
}

/*
 * 엑셀 버튼
 */
this.fnExcel = function() {
	
}

/*
 * 출력 버튼
 */
this.fnPrint = function() {
	
}

/************************************************************************
 * Validate
 ************************************************************************/
this.fnSelectValidate = function() {
	return true;
}

/************************************************************************
 * 확장버튼 이벤트
 ************************************************************************/

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 * 기본 콜백
 */
this.fnCallback = function(svcID, errorCode, errorMsg, strArg) {
	if (errorCode != 0) {
		this.gfnAlert(errorMsg);
		return;
	}
	
	if (svcID == "select_sp") {
		this.gfnGridAfterSelect(this.dxGrid);
	} else if (svcID == "select_splog") {
		this.gfnGridAfterSelect(this.dxGridSPLog);
		this.dxGridSPLog.selectRow(0);
	} else if (svcID == "deploy_sp") {
		
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	return true;
}

this.fnAfterCDTextChanged = function(id, codeFindData) {
	
}

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
this.fnGridBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	return true;
}

this.fnGridAfterCDTextChanged = function(id, codeFindData) {
	
}

this.fnGridEnterCell = function(obj:nexacro.Grid, row, cell) {
	var colnm = this.gfnGridGetBindColumnNameByIndex(this.dxGrid, cell);	// 클릭한 cell의 컬럼명
	if (colnm == "CHK" && this.dsList.getColumn(this.dsList.rowposition, "YN_TABLE") == "Y") {
		return false;
	}
}

/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset, e:nexacro.DSColChangeEventInfo) {
	if (e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);
		this.gfnGridClear(this.dxGridSPLog);
		this.txtSP.set_value('');
	}
}

this.dsListSPLog_onvaluechanged = function(obj:nexacro.NormalDataset, e:nexacro.DSColChangeEventInfo) {
	if (e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGridSPLog);
		this.txtSP.set_value('');
	}
}

this.divData_ondragmove1 = function(obj:nexacro.Div, e:nexacro.DragEventInfo) {
	if (e.userdata == "splitter1") {
		this.divData.form.divSplitter1.set_left(e.clientx);
		this.divData.form.resetScroll();
	}
}

this.divData_divSplitter1_ondrag = function(obj:nexacro.Div, e:nexacro.DragEventInfo) {
	e.set_userdata("splitter1");
	return true;
}

this.divData_ondragmove2 = function(obj:nexacro.Div, e:nexacro.DragEventInfo) {
	if (e.userdata == "splitter2") {
		this.divData.form.divDataRight.form.divSplitter2.set_left(e.clientx);
		this.divData.form.divDataRight.form.resetScroll();
	}
}

this.divData_divSplitter2_ondrag = function(obj:nexacro.Div, e:nexacro.DragEventInfo) {
	e.set_userdata("splitter2");
	return true;
}

// 변경된 SP 목록 그리드 클릭 이벤트
this.fnGridCellPosChanged = function(obj:nexacro.Grid, e:nexacro.GridSelectEventInfo) {
	if (e.row != -1 && e.oldrow != e.row) {
		this.fnSelectSPLog();
	}
}

// 변경된 SP 로그 목록 그리드 클릭 이벤트
this.fnGridSPLogCellPosChanged = function(obj:nexacro.Grid, e:nexacro.GridSelectEventInfo) {
	if (e.row != -1 && e.oldrow != e.row) {
		this.txtSP.set_value(this.dsListSPLog.getColumn(this.dsListSPLog.rowposition, "SQLCMD"));
	}
}

this.fnDeploy = function(obj:nexacro.Button, e:nexacro.ClickEventInfo) {
	this.dsList.set_enableevent(false);
	this.dsList.filter("CHK == 1");
	
	if (this.dsList.rowcount == 0) {
		this.gfnAlert("배포 대상 SP가 선택되지 않았습니다.");
		this.dsList.filter("");
		this.dsList.set_enableevent(true);
		return
	}
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		this.dsDeploy.clearData();
		var nrow = this.dsDeploy.addRow();
		
		this.dsDeploy.setColumn(nrow, "NM_SP", this.dsList.getColumn(i, "NM_SP"));
		this.dsDeploy.setColumn(nrow, "NM_DB", this.dsSearch.getColumn(0, "NM_DB"));
		
		var strSvcId    = "deploy_sp";
		var strSvcType  = "save";
		var inProc		= "_dsProc";
		var inData      = "deploy_sp=dsDeploy";
		var outData     = "";
		var strArg      = "";
		var callBackFnc = "fnCallback";

		this.gfnTransaction(strSvcId,		// transaction을 구분하기 위한 svc id값
							strSvcType, 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData, 		// 입력값으로 보낼 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							outData, 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
							callBackFnc,	// 통신방법 정의 [생략가능]
							false);
	}
	
	this.dsList.filter("");
	this.dsList.set_enableevent(true);
}
]]></Script>
    <Objects>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select_sp</Col>
            <Col id="SP">DZYPR_SP_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">select_splog</Col>
            <Col id="SP">DZZPR_SPLOG_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">deploy_sp</Col>
            <Col id="SP">DZYPR_SP_DEPLOY</Col>
          </Row>
          <Row>
            <Col id="TARGET">select_combo</Col>
            <Col id="SP">DZXPR_COMBO_SELECT</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="DT_BASE" type="STRING" size="256"/>
          <Column id="NM_DB" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="DT_BASE"/>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsList" onvaluechanged="dsList_onvaluechanged"/>
      <Dataset id="dsListSPLog" onvaluechanged="dsListSPLog_onvaluechanged"/>
      <Dataset id="dsNmDatabase"/>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ctclDT_BASE" propid="value" datasetid="dsSearch" columnid="DT_BASE"/>
      <BindItem id="item1" compid="divSearch.form.cboNM_DB" propid="value" datasetid="dsSearch" columnid="NM_DB"/>
    </Bind>
  </Form>
</FDL>
