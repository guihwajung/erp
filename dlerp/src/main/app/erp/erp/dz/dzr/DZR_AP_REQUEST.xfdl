<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="790" titletext="결재상신" onload="form_onload" ondragmove="form_ondragmove" ondrop="form_ondrop" height="565" maxwidth="830" maxheight="640" cssclass="borderBG">
    <Layouts>
      <Layout>
        <Div id="divData" taborder="0" left="0" top="0" bottom="0" right="0" cssclass="div_DATA_Bg" ondragmove="divData_ondragmove">
          <Layouts>
            <Layout>
              <Div id="divSplitter" taborder="2" left="48.95%" top="10" width="23" height="499" background="url('theme://images/slt_WF_SplitterV.png') no-repeat center center" cursor="ew-resize" ondrag="divData_divSplitter_ondrag"/>
              <Div id="divDataLeft" taborder="0" left="0" top="0" right="divSplitter:3" height="520">
                <Layouts>
                  <Layout>
                    <Static id="sta01" taborder="1" text="부서목록" left="0" top="0" width="100%" height="35" cssclass="sta_TITLE_Bg"/>
                    <Grid id="objGrid" taborder="0" left="0" top="sta01:0" right="0" height="484" autofittype="col"/>
                  </Layout>
                </Layouts>
              </Div>
              <Div id="divDataRight" taborder="1" left="divSplitter:7" top="0" bottom="40" right="0" text="">
                <Layouts>
                  <Layout>
                    <Static id="sta00" taborder="3" text="결재선" left="0" top="285" height="35" cssclass="sta_TITLE_Bg" right="0"/>
                    <Static id="sta02" taborder="0" text="사용자목록" left="0" top="0" height="35" cssclass="sta_TITLE_Bg" right="0"/>
                    <Grid id="objGridSub2" taborder="2" left="0" top="sta00:0" height="104" right="0" autofittype="col"/>
                    <Button id="btnAdd" taborder="4" text="추가" top="251" height="26" onclick="divData_divDataRight_btnAdd_onclick" left="132" width="52"/>
                    <Edit id="edtDS_NAME" taborder="6" left="0" top="sta02:0" height="24" readonly="false" maxlength="50" width="255" onkeyup="divData_divDataRight_edtDS_NAME_onkeyup"/>
                    <Grid id="objGridSub" taborder="1" left="0" top="edtDS_NAME:10" right="0" height="172" oncelldblclick="divData_divDataRight_objGridSub_oncelldblclick" autofittype="col"/>
                    <Button id="btnDel" taborder="5" text="삭제" top="251" height="26" width="52" onclick="divData_divDataRight_btnDel_onclick" left="btnAdd:4"/>
                    <Button id="btnSch" taborder="7" top="sta02:0" height="24" width="24" icon="url('theme://images/btn_TF_Search.png')" onclick="divData_divDataRight_btnSch_onclick" text="" left="edtDS_NAME:3"/>
                    <TextArea id="txtDS_NOTE" taborder="8" left="0" top="469" height="50" right="0" oneditclick="divData_divDataRight_txtDS_NOTE_oneditclick" readonly="true" background="transparent"/>
                    <Static id="sta01" taborder="9" text="의견" left="0" top="434" height="35" cssclass="sta_TITLE_Bg" right="0"/>
                    <Button id="btnTxt" taborder="10" text="전결규정" top="290" height="26" right="0" width="76" onclick="divData_divDataRight_btnTxt_onclick" cssclass="btn_WF_function"/>
                    <Button id="btnBig" taborder="11" text="+" top="469" height="24" font="bold 16px/normal &quot;돋움&quot;" background="silver" onclick="divData_divDataRight_btnBig_onclick" right="0" width="24"/>
                    <Button id="btnPreview" taborder="14" text="의견미리보기" top="439" height="26" onclick="divData_divDataRight_btnPreview_onclick" width="88" right="0" visible="true"/>
                    <TextArea id="txtDS_NOTE_BIG" taborder="12" left="16" top="121" height="70" right="170" readonly="true" background="white" oneditclick="divData_divDataRight_txtDS_NOTE_BIG_oneditclick"/>
                    <Button id="btnSmall" taborder="13" text="-" top="249" height="24" font="bold 16px/normal &quot;돋움&quot;" background="silver" onclick="divData_divDataRight_btnSmall_onclick" right="0" width="24"/>
                    <Static id="staYnGb" taborder="15" text="" left="59" top="288" width="209" height="20" textDecoration="none" color="red"/>
                  </Layout>
                </Layouts>
              </Div>
              <Button id="btnOk" taborder="3" text="상신" top="539" height="26" onclick="divData_btnOk_onclick" width="52" right="55" cssclass="btn_WF_action"/>
              <Button id="btnCancel" taborder="4" text="취소" top="539" width="52" height="26" onclick="divData_btnCancel_onclick" right="0"/>
            </Layout>
          </Layouts>
        </Div>
        <Static id="Static00" taborder="1" left="423" top="386" width="360" height="30" visible="false" background="#ffffff" border="1px dotted"/>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();
this.popupVal = "";

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	this.divData.form.divDataRight.form.txtDS_NOTE_BIG.move(0, 249, null, 250, 0, null );
	this.divData.form.divDataRight.form.txtDS_NOTE_BIG.set_visible(false);
	this.divData.form.divDataRight.form.btnSmall.set_visible(false);
		
	this.dsParamSave.setColumn(0, "ID_AP_TYPE", this.getOwnerFrame().ID_AP_TYPE);		
	this.dsParamSave.setColumn(0, "PARAM01", this.getOwnerFrame().V_PARAM01);
	this.dsParamSave.setColumn(0, "PARAM02", this.getOwnerFrame().V_PARAM02);
	this.dsParamSave.setColumn(0, "PARAM03", this.getOwnerFrame().V_PARAM03);
	this.dsParamSave.setColumn(0, "PARAM04", this.getOwnerFrame().V_PARAM04);
	this.dsParamSave.setColumn(0, "DS_TITLE", this.getOwnerFrame().DS_TITLE);	
	
	this.FormBtns.Select.click();
};

/************************************************************************
 * 버튼 설정 
 ************************************************************************/
this.fnSetButton = function() {
	// 서브 버튼 사용(2개 그리드 중간에 있는 파란선) 상단에 공통 셋트가 하나더 생긴다
	//this.gfnUseSubBtn(true, this.divData, this.divData.form.divSplitter); // divSplitter sync
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결
 ************************************************************************/
this.fnSetExtendButton = function() {
	//this.btn1 = this.gfnFormButtonAdd("btnDefinite", "fnDefinite");			// 예산확정
	//this.btn2 = this.gfnFormButtonAdd("btnDefinitecncl", "fnDefinitecncl");	// 확정취소
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.dxGrid = this.divData.form.divDataLeft.form.objGrid;
	this.dxGridSub = this.divData.form.divDataRight.form.objGridSub;
	this.dxGridSub2 = this.divData.form.divDataRight.form.objGridSub2;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {

	this.gfnGridInit(this.dxGrid, this.dsList, "DZ", "DZG_TEAMSEARCH01", "DEPT", "LV_DEPT_ACNT");	
	this.dxGrid.set_selecttype("cell");	
	this.dxGrid.addEventHandler("onselectchanged", this.fnGrid_RowCellChanged, this);
	//this.dsList.addEventHandler("canrowposchange", this.dsList_canrowposchange, this);
		
	this.gfnGridInit(this.dxGridSub, this.dsListSub, "DZ", "DZG_USERS");
	this.dxGridSub.set_selecttype("cell");	
	//this.dxGridSub.addEventHandler("onselectchanged", this.fnGridSub_RowCellChanged, this);
	
	this.gfnGridInit(this.dxGridSub2, this.dsListSub2, "DZ", "DZR_APLINES");
	this.dxGridSub2.addEventHandler("ondrag", this.dxGridSub2_ondrag, this);
	this.dxGridSub2.addEventHandler("ondrop", this.dxGridSub2_ondrop, this);
	
}

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	
	this.dsSelectLine = new Dataset();
	this.dsSelectLine.addColumn("ID_AP_TYPE", "string");
	this.dsSelectLine.addColumn("PARAM01", "string");
	this.dsSelectLine.addColumn("PARAM02", "string");
	this.dsSelectLine.addColumn("PARAM03", "string");
	this.dsSelectLine.addColumn("PARAM04", "string");

	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_DEPT_ACNT", "string");
	this.dsSelect.addColumn("TY_USE", "string");
		
	this.dsSelectSub = new Dataset();
	this.dsSelectSub.addColumn("CD_DEPT", "string");
	this.dsSelectSub.addColumn("DS_NAME", "string");
	
	this.dsSaveSel = new Dataset();
	this.dsSaveSel.addColumn("ID_AP_OUT", "string");
	this.dsSaveSel.addColumn("ID_AP_TYPE", "string");
	this.dsSaveSel.addColumn("PARAM01", "string");
	this.dsSaveSel.addColumn("PARAM02", "string");
	this.dsSaveSel.addColumn("PARAM03", "string");
	this.dsSaveSel.addColumn("PARAM04", "string");
	this.dsSaveSel.addColumn("DS_TITLE", "string");
	this.dsSaveSel.addColumn("DS_NOTE", "string");
	this.dsSaveSel.addColumn("DS_BIGO", "string");
	this.dsSaveSel.addColumn("ID_USER", "string");
	
	this.dsSave = new Dataset();
	this.dsSave.addColumn("ID_AP", "string");
	this.dsSave.addColumn("SN_ORDER", "string");
	this.dsSave.addColumn("ID_AP_USER", "string");	
	this.dsSave.addColumn("ID_EMAIL", "string");
	this.dsSave.addColumn("YN_FINALAPP", "string");
}

/************************************************************************
 * 버튼 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);
	this.dsSelect.clearData();
	this.dsSelect.addRow();	
		
	this.dsSelect.setColumn(0, "CD_DEPT_ACNT", "00000000");
	this.dsSelect.setColumn(0, "TY_USE", "Y");

	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

// 화면 상단 텍스트 내용 조회
this.fnLineSelect = function() {	
	this.dsSelectLine.clearData();
	this.dsSelectLine.addRow();	
		
	this.dsSelectLine.setColumn(0, "ID_AP_TYPE", this.dsParamSave.getColumn(0, "ID_AP_TYPE"));
	this.dsSelectLine.setColumn(0, "PARAM01", this.dsParamSave.getColumn(0, "PARAM01"));
	this.dsSelectLine.setColumn(0, "PARAM02", this.dsParamSave.getColumn(0, "PARAM02"));
	this.dsSelectLine.setColumn(0, "PARAM03", this.dsParamSave.getColumn(0, "PARAM03"));
	this.dsSelectLine.setColumn(0, "PARAM04", this.dsParamSave.getColumn(0, "PARAM04"));

	var strSvcId    = "select_line";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select_line=dsSelectLine";
	var outData     = "dsLine=select_line0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}



/*
 *	입력 버튼
 */
this.fnAdd = function() {	
	//var nrow = this.gfnGridAdd(this.dxGridSub);	
}

/*
 *	삭제 버튼
 */ 
this.fnDel = function() {
	//this.gfnGridDel(this.dxGridSub);
}


/*
 *	엑셀 버튼
 */ 
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}
 
/************************************************************************
 * 서브 버튼 이벤트
 ************************************************************************/
// 디테일 그리드 조회
this.fnSelectSub = function() {

	if (this.dxGrid.rowcount == 0 || this.dxGrid.currentrow < 0) return;
	if (this.dsList.rowposition < 1) return;
		
	this.gfnGridBeforeSelect(this.dxGridSub);
	
	// 디테일 데이터셋 데이터 삭제
	this.dsListSub.clearData();
	
	// 디테일 파마리터 데이터셋 셋팅
	this.dsSelectSub.clearData();
	this.dsSelectSub.addRow();
	
	this.dsSelectSub.setColumn(0, "CD_DEPT", this.dsList.getColumn(this.dsList.rowposition, "CD_DEPT"));
	this.dsSelectSub.setColumn(0, "DS_NAME", this.dsSearch.getColumn(0, "DS_NAME"));

	var strSvcId    = "detail";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "d_select=dsSelectSub";
	var outData     = "dsListSub=d_select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

// 디테일2 그리드 조회
this.fnSelectSub2 = function() {
	
	if (this.dxGridSub.rowcount == 0 || this.dxGridSub.currentrow < 0) return;	
	
	//this.gfnGridBeforeSelect(this.dxGridSub2);
	
	// 디테일 데이터셋 데이터 삭제
	//this.dsListSub2.clearData();
		
	// 디테일 파마리터 데이터셋 셋팅
	this.dsSelectSub2.clearData();
	this.dsSelectSub2.addRow();
	
	this.dsSelectSub2.setColumn(0, "CD_SAUPCODE", this.dsListSub.getColumn(this.dsListSub.rowposition, "CD_SAUPCODE"));
	this.dsSelectSub2.setColumn(0, "CD_SITE", this.dsListSub.getColumn(this.dsListSub.rowposition, "CD_SITE"));
	this.dsSelectSub2.setColumn(0, "CD_DEPTAPPLY", this.dsListSub.getColumn(this.dsListSub.rowposition, "CD_DEPTAPPLY"));

	var strSvcId    = "detail2";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "d_select2=dsSelectSub2";
	var outData     = "dsListSub2=d_select20";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}



this.fnExcelSub = function() {
	this.gfnExcelExport(this.dxGridSub);
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {	
	var validate = true;
	/*
	if (this.gfnIsNull(this.dsSearch.getColumn(0,"CD_SITE"))) {
		validate = false;
		// Alert후 실행할 처리
		this.fnVaidateCallback = function() {
			this.ccfCD_SITE.form.CDTextBox.setFocus();
		}
		this.gfnAlert("사업지코드는 반드시 입력 하셔야 합니다.", "fnVaidateCallback");
	}
	*/
	return validate;
	
};
/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);	
		
		// 화면 상단 텍스트 내용 조회
		this.fnLineSelect();
	}
	else if (svcID == "detail") {
		this.gfnGridAfterSelect(this.dxGridSub);
		
		//this.gfnGridBeforeSelect(this.dxGridSub2);
	
		// 3번째 그리드의 데이터셋 데이터 삭제
		//this.dsListSub2.clearData();
	}
	else if (svcID == "savesel") {			
		if (errorCode == 0) {
			//alert(this.dsSaveSel.getColumn(0, "ID_AP_OUT"));		
			this.fnApplines();
		} else {
			this.gfnAlert(errorMsg);
		}
	}	
	else if (svcID == "save") {	
		if (errorCode == 0) {
			this.fnAppCallback = function() {
				// this.close()가 작동하지 않았고, 
				// 부모의 callback 함수로 데이터를 넘겨주기 위해 작성되었습니다.
				this.getParentContext().close(true);
			}
			this.gfnAlert("결재가 상신되었습니다.", "fnAppCallback");
		} else {
			this.gfnAlert(errorMsg);
		}		
	}	
	else if (svcID == "select_line") {		
		if(this.dsLine.rowcount > 0){
			if(this.dsLine.getColumn(0, "YN_BONSA") == "Y"){
				this.divData.form.divDataRight.form.staYnGb.set_text("(본사결재 품의서)");
			}else{
				this.divData.form.divDataRight.form.staYnGb.set_text("");
			}
		}else{
			this.divData.form.divDataRight.form.staYnGb.set_text("");
		}
		
		/*
		if(this.dsLine.rowcount > 0){
			this.divData.form.divTitle.form.staTitle.set_text(this.dsLine.getColumn(0, "DS_LINE"));
		}
		*/
	}	
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
this.fnGrid_RowCellChanged = function(obj:nexacro.Grid,e:nexacro.GridSelectEventInfo)
{
    if ((obj.oldrow > -1 && obj.oldrow == e.row)
		|| (obj.oldrow == -1 && e.oldrow != e.row)) {		
		// 마스터 그리드 클릭 이벤트(디테일 그리드 조회)
		this.dsSearch.setColumn(0, "DS_NAME", "");
		this.fnSelectSub();
		obj.oldrow = -1;
	}
};

this.fnGridSub_RowCellChanged = function(obj:nexacro.Grid,e:nexacro.GridSelectEventInfo)
{
    if ((obj.oldrow > -1 && obj.oldrow == e.row)
		|| (obj.oldrow == -1 && e.oldrow != e.row)) {
		// 마스터 그리드 클릭 이벤트(디테일 그리드 조회)
		//this.fnSelectSub2();
		obj.oldrow = -1;
	}
};
/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.fnSearchInit = function(obj,e) {
	if(e == null || (e.pretext != e.posttext)) {
		this.gfnSetFormStatus(this);
		this.gfnGridClear(this.dxGrid);
		this.gfnGridClear(this.dxGridSub);
		this.gfnGridClear(this.dxGridSub2);
	}
}

this.divData_ondragmove = function(obj:nexacro.Div,e:nexacro.DragEventInfo)
{
   if(e.userdata == "splitter") {
      this.divData.form.divSplitter.set_left(e.clientx);
      this.divData.form.resetScroll();
   }
};

this.divData_divSplitter_ondrag = function(obj:nexacro.Div,e:nexacro.DragEventInfo)
{
   e.set_userdata("splitter");
   return true;
};
this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue){
	//this.gfnGridClear(this.dxGrid);
	//this.gfnGridClear(this.dxGridSub);
	//this.gfnGridClear(this.dxGridSub2);
	}
};

// 사용자목록 조회
this.divData_divDataRight_btnSch_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	this.fnSelectSub();
};

// 결재선 추가
this.divData_divDataRight_btnAdd_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{	
	if(this.dsListSub.rowcount < 1) return;
	
	var nSubRow = this.dsListSub.rowposition;
	
	var findRowVal = this.dsListSub2.findRow("ID_AP_USER",this.dsListSub.getColumn(nSubRow, "ID_USER"));
	
	if(findRowVal >= 0){
		this.gfnAlert("이미 추가된 결재자입니다.");
		return;
	}

	var nRow = this.gfnGridAdd(this.dxGridSub2, "bottom");
	
	//this.dsListSub2.setColumn(nRow, "SN_ORDER", nRow+1);	// 순번
	var colSN_ORDER = this.dxGridSub2.getBindCellIndex("body", "SN_ORDER");
	this.dxGridSub2.setCellProperty("body", colSN_ORDER, "expr", "expr:currow+1");		// 순번
	this.dsListSub2.setColumn(nRow, "ID_AP_USER", this.dsListSub.getColumn(nSubRow, "ID_USER"));	// 사번
	this.dsListSub2.setColumn(nRow, "DS_AP_USER", this.dsListSub.getColumn(nSubRow, "DS_HNAME"));	// 결재자
	this.dsListSub2.setColumn(nRow, "ID_EMAIL", this.dsListSub.getColumn(nSubRow, "ID_EMAIL"));	// 이메일	
	this.dsListSub2.setColumn(nRow, "YN_FINAL_AP", this.dsListSub.getColumn(nSubRow, "TY_DEPT"));	// 현장구분	
};

// 결재선 삭제
this.divData_divDataRight_btnDel_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	this.dsListSub2.deleteRow(this.dsListSub2.rowposition);
};

// 상신 버튼 클릭(키값을 조회해 온다)
this.divData_btnOk_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	// 결재자가 추가 된게 없으면 실행하지 않는다.	
	if(this.dsListSub2.rowcount < 1){
		this.gfnAlert("결재자를 추가해주세요.");
		return;
	}
	
	if(this.dsLine.getColumn(0, "YN_BONSA") == "Y"){
		if(this.dsListSub2.findRow("YN_FINAL_AP", "N") < 0){
			this.gfnAlert("본사 결재자가 필요합니다.");
			return false;
		}
	}	
	
	this.dsSaveSel.clearData();
	this.dsSaveSel.addRow();	
	
	this.dsSaveSel.setColumn(0, "ID_AP_OUT", "");
	this.dsSaveSel.setColumn(0, "ID_AP_TYPE", this.dsParamSave.getColumn(0, "ID_AP_TYPE"));	
	this.dsSaveSel.setColumn(0, "PARAM01", this.dsParamSave.getColumn(0, "PARAM01"));
	this.dsSaveSel.setColumn(0, "PARAM02", this.dsParamSave.getColumn(0, "PARAM02"));
	this.dsSaveSel.setColumn(0, "PARAM03", this.dsParamSave.getColumn(0, "PARAM03"));
	this.dsSaveSel.setColumn(0, "PARAM04", this.dsParamSave.getColumn(0, "PARAM04"));
	this.dsSaveSel.setColumn(0, "DS_TITLE", this.dsParamSave.getColumn(0, "DS_TITLE"));
	this.dsSaveSel.setColumn(0, "DS_NOTE", this.dsParamSave.getColumn(0, "DS_NOTE"));
	this.dsSaveSel.setColumn(0, "DS_BIGO", "");
	this.dsSaveSel.setColumn(0, "ID_USER", this.AuthClient.ID_USER);
	
	
	var strSvcId    = "savesel";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "s_select=dsSaveSel";
	var outData     = "dsSaveSel=s_select";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
};

// 상신 저장 처리
this.fnApplines = function() {
	// 그리드 필수항목 체크``
	//if (!this.gfnGridValidate(this.dxGrid)) return;	
	
	this.dxGridSub2.updateToDataset();
	
	this.dsSave.clearData();
	
	var colSN_ORDER = this.dxGridSub2.getBindCellIndex("body", "SN_ORDER");
	for (var i = 0; i < this.dsListSub2.rowcount; i++) {
		var nrow = this.dsSave.addRow();
		
		this.dsSave.setColumn(nrow, "ID_AP", this.dsSaveSel.getColumn(0, "ID_AP_OUT"));
		this.dsSave.setColumn(nrow, "SN_ORDER", this.dxGridSub2.getCellText(i, colSN_ORDER));	// 순번을 currow로 셋팅하면 데이터셋에 반영않됨. 그래서 그리드에 텍스트를 불러옴
		this.dsSave.setColumn(nrow, "ID_AP_USER", this.dsListSub2.getColumn(i, "ID_AP_USER"));
		this.dsSave.setColumn(nrow, "ID_EMAIL", this.dsListSub2.getColumn(i, "ID_EMAIL"));
		this.dsSave.setColumn(nrow, "YN_FINALAPP", this.dsListSub2.getColumn(i, "YN_FINAL_AP"));
	}
	
	if (this.dsSave.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "save=dsSave";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

// 취소
this.divData_btnCancel_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	// this.close()가 작동하지 않았고, 
	// 부모의 callback 함수로 데이터를 넘겨주기 위해 작성되었습니다.
	this.getParentContext().close(false);
};


/************************************************************************
 * 로우 drag&drop 순번 정렬
 ************************************************************************/

this.dxGridSub2_ondrag = function(obj:nexacro.Grid, e:nexacro.GridDragEventInfo)
{
	trace("dxGridSub2_ondrag:"+e.row+","+obj._showEditing);
	if(e.row < 0 || obj._showEditing)
	{
		return false;
	}	
	
	this.dxGridSub2.set_selecttype("cell");
	trace("dxGridSub2_ondrag:1");
	sTextDragData = [];
	// 마우스로 드레그해서 움직일때 보여지는 컬럼 셋팅(Static00 에 컬럼이 셋팅된다)
	//sTextDragData.push(obj.getCellValue(e.row, obj.getBindCellIndex("body", "SN_ORDER")));
	sTextDragData.push(obj.getCellValue(e.row, obj.getBindCellIndex("body", "ID_AP_USER")));
	sTextDragData.push(obj.getCellValue(e.row, obj.getBindCellIndex("body", "DS_AP_USER")));
	sTextDragData.push(obj.getCellValue(e.row, obj.getBindCellIndex("body", "ID_EMAIL")));
	sTextDragData.push(obj.getCellValue(e.row, obj.getBindCellIndex("body", "YN_FINAL_AP")));

	var cell_rect = obj.getCellRect(e.row, e.cell);
	//alert("cell_rect left : " + cell_rect.left + "\ne.row : " + e.row + "\ncell_top : " + cell_rect.top);
	this.Static00.set_left(cell_rect.left);
	this.Static00.set_top(cell_rect.top-5);
	//this.Static00.set_width(cell_rect.width);
	this.Static00.set_height(cell_rect.height);
	this.Static00.set_text(sTextDragData.join("     "));
	this.Static00.set_tooltiptext(e.row);
	
	trace("dxGridSub2_ondrag:3");
	// 드래그가 민감해서 시간차 보이기
	this.gfnSetTimer(this, function() {
	trace("dxGridSub2_ondrag:4,"+this.IsDrag);
		if(this.IsDrag == true) {
			this.Static00.set_visible(true);
		}
	}, 300);
	return true;
};

this.DragTextMove = function(obj, e)
{
	this.IsDrag = true;
    //if( this.Static00.visible == true )
    {	
		if(e.fromobject.name == "objGridSub2" || e.fromobject.name == "Static00") {
			this.Static00.move(e.clientx+5, e.clienty-5);
		} 
    }
};

this.dxGridSub2_ondrop = function(obj:nexacro.Grid,e:nexacro.GridDragEventInfo)
{	
	trace("dxGridSub2_ondrop");
	this.dxGridSub2.set_selecttype("multiarea");
	this.IsDrag = false;
	if( this.Static00.visible == true )
	{
		this.Static00.set_visible(false);
		if(e.row < 0) return false;
		var dragRow = this.Static00.tooltiptext;
		var objDs = obj.getBindDataset();
		var oldRow = dragRow;
		var newRow = e.row;
		var minRow = 0;
		if (dragRow > e.row) {
			minRow = newRow;
		} else {
			minRow = oldRow;
		}
		var no_view = nexacro.toNumber(obj.getCellValue(minRow, obj.getBindCellIndex("body", "SN_ORDER")));
		
		objDs.moveRow(oldRow, newRow);
		for(var i = minRow; i < obj.rowcount; i++) {
			objDs.setColumn(i, "SN_ORDER", no_view++);		
		}
	}
};

this.form_ondrop = function(obj:nexacro.Form,e:nexacro.DragEventInfo)
{
	this.IsDrag = false;
	this.Static00.set_visible(false);	
};

this.form_ondragmove = function(obj:nexacro.Form,e:nexacro.DragEventInfo)
{
	trace("form_ondragmove");
	this.DragTextMove(obj, e);	
};

this.divData_divDataRight_edtDS_NAME_onkeyup = function(obj:nexacro.Edit,e:nexacro.KeyEventInfo)
{
	// 엔터클릭시 조회한다
	if (e.keycode == 13) {
		this.fnSelectSub();
	}
};

// 사용자목록 그리드 더블클릭하면 결재선에 추가
this.divData_divDataRight_objGridSub_oncelldblclick = function(obj:nexacro.Grid,e:nexacro.GridClickEventInfo)
{
	this.divData_divDataRight_btnAdd_onclick();
};

// 전결규정 스테틱 클릭시 이벤트
this.divData_divDataRight_btnTxt_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	var param = {};
	param.TXT_DESC = this.dsLine.getColumn(0, "DS_LINE");
	
	this.gfnFormOpenNonAuth("DZR", "DZR_AP_REQUEST_TXT", "", param, 400, 210);
};

/*
// 전결규정 스테틱 클릭시 이벤트
this.divData_divDataRight_staTxt_onclick = function(obj:nexacro.Static,e:nexacro.ClickEventInfo)
{
	var param = {};
	param.TXT_DESC = this.dsLine.getColumn(0, "DS_LINE");
	
	this.gfnFormOpenNonAuth("DZR", "DZR_AP_REQUEST_TXT", "", param, 400, 210);
};

// 전결규정 스테틱에 마우스 커서 들어가면 색상 변환
this.divData_divDataRight_staTxt_onmouseenter = function(obj:nexacro.Static,e:nexacro.MouseEventInfo)
{
	this.divData.form.divDataRight.form.staTxt.set_color("tomato");
};

// 전결규정 스테틱에 마우스 커서 빠져나오면 색상 변환
this.divData_divDataRight_staTxt_onmouseleave = function(obj:nexacro.Static,e:nexacro.MouseEventInfo)
{
	this.divData.form.divDataRight.form.staTxt.set_color("blue");
};
*/

// 의견란 확대
this.divData_divDataRight_btnBig_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	this.divData.form.divDataRight.form.txtDS_NOTE_BIG.set_visible(true);
	this.divData.form.divDataRight.form.btnSmall.set_visible(true);
};

// 의견란 축소
this.divData_divDataRight_btnSmall_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	this.divData.form.divDataRight.form.txtDS_NOTE_BIG.set_visible(false);
	this.divData.form.divDataRight.form.btnSmall.set_visible(false);
};

// 의견 미리보기
this.divData_divDataRight_btnPreview_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	var param = {};
	param.DS_NOTE = this.dsParamSave.getColumn(0, "DS_NOTE");
	
	this.gfnFormOpenNonAuth("DZR", "DZR_AP_VIEW", "fnDetailCallback", param, 1150, 590);
};

this.fnDetailCallback = function(strId, val) {
	if(val == true){
		this.dsParamSave.setColumn(0, "DS_NOTE", this.popupVal);
	}
};	

this.divData_divDataRight_txtDS_NOTE_oneditclick = function(obj:nexacro.TextArea,e:nexacro.EditClickEventInfo)
{
	this.divData_divDataRight_btnPreview_onclick();
};

this.divData_divDataRight_txtDS_NOTE_BIG_oneditclick = function(obj:nexacro.TextArea,e:nexacro.EditClickEventInfo)
{
	this.divData_divDataRight_btnPreview_onclick();
};
]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DHBPR_ACNTUNIT_TREELVY_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">d_select</Col>
            <Col id="SP">DZRPR_USERINFO_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">s_select</Col>
            <Col id="SP">DZRPR_APP_SAVE</Col>
          </Row>
          <Row>
            <Col id="SP">DZRPR_APPLINES_INSERT</Col>
            <Col id="TARGET">save</Col>
          </Row>
          <Row>
            <Col id="SP">DZRPR_APP_SELECT</Col>
            <Col id="TARGET">select_line</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsListSub"/>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="DS_NAME" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="DS_NAME"/>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsListSub2" useclientlayout="false">
        <ColumnInfo>
          <Column id="SN_ORDER" type="STRING" size="256"/>
          <Column id="ID_AP_USER" type="STRING" size="256"/>
          <Column id="DS_AP_USER" type="STRING" size="256"/>
          <Column id="ID_EMAIL" type="STRING" size="256"/>
          <Column id="YN_FINAL_AP" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="dsSaveSel" useclientlayout="false">
        <ColumnInfo>
          <Column id="ID_AP_OUT" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="dsParamSave">
        <ColumnInfo>
          <Column id="ID_AP_TYPE" type="STRING" size="256"/>
          <Column id="PARAM01" type="STRING" size="256"/>
          <Column id="PARAM02" type="STRING" size="256"/>
          <Column id="PARAM03" type="STRING" size="256"/>
          <Column id="PARAM04" type="STRING" size="256"/>
          <Column id="DS_TITLE" type="STRING" size="256"/>
          <Column id="DS_NOTE" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="PARAM01"/>
            <Col id="PARAM02"/>
            <Col id="PARAM03"/>
            <Col id="ID_AP_TYPE"/>
            <Col id="DS_TITLE"/>
            <Col id="PARAM04"/>
            <Col id="DS_NOTE"/>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsLine" useclientlayout="false">
        <ColumnInfo>
          <Column id="DS_LINE" type="STRING" size="256"/>
          <Column id="YN_BONSA" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divData.form.divDataRight.form.edtDS_NAME" propid="value" datasetid="dsSearch" columnid="DS_NAME"/>
      <BindItem id="item1" compid="divData.form.divDataRight.form.txtDS_NOTE" propid="value" datasetid="dsParamSave" columnid="DS_NOTE"/>
      <BindItem id="item2" compid="divData.form.divDataRight.form.txtDS_NOTE_BIG" propid="value" datasetid="dsParamSave" columnid="DS_NOTE"/>
    </Bind>
  </Form>
</FDL>
