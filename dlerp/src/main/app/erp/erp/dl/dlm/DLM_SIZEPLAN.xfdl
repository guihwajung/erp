<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="DLM_SIZEPLAN" width="1280" height="720" onload="form_onload" titletext="임대계획-면적">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg" text="" formscrolltype="none">
          <Layouts>
            <Layout>
              <Static id="staCD_ACNTUNIT" taborder="1" text="계획년도" left="0.0" top="10.0" width="92.0" height="24.0" textAlign="center" cssclass="sta_WF_SchLabelE"/>
              <Div id="ctclYR_PLAN" taborder="0" left="staCD_ACNTUNIT:0.0" top="10.0" width="60" height="24.0" url="cmm::cmmCalYY.xfdl"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="1" left="0" top="0" bottom="0" right="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DLMPR_SIZEPLAN_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">update</Col>
            <Col id="SP">DLMPR_SIZEPLAN_UPDATE</Col>
          </Row>
          <Row>
            <Col id="SP">DLMPR_SIZEPLAN_CREATE</Col>
            <Col id="TARGET">create</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="YR_PLAN" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="YR_PLAN"/>
          </Row>
        </Rows>
      </Dataset>
    </Objects>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();	
	
	this.dsSearch.setColumn(0, "YR_PLAN", this.gfnGetDate().substr(0,4));
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 ************************************************************************/
this.fnSetButton = function() {

}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btnCreate = this.gfnFormButtonAdd("Create", "fnCreate");	//자료생성
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.ctclYR_PLAN = this.divSearch.form.ctclYR_PLAN;

	this.dxGrid  = this.divData.form.objGrid;	
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	this.gfnGridInit(this.dxGrid, this.dsList, "DL", "DLM_SIZEPLAN");
	this.dxGrid.set_selecttype("cell");	
	
	this.dxGrid.AfterEdit = "fnGrid_AfterEdit";
}
/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("YR_PLAN" 	 , "string");
	
	this.dsCreate = new Dataset();
	this.dsCreate.addColumn("YR_PLAN" 	 , "string");
	this.dsCreate.addColumn("ID_INSERT"	 , "string");
	
	this.dsUpdate = new Dataset();
	this.dsUpdate.addColumn("YR_PLAN"		, "string");
	this.dsUpdate.addColumn("CD_ACNTUNIT"	, "string");
	this.dsUpdate.addColumn("TY_GUBUN"	 	, "string");
	this.dsUpdate.addColumn("NO_CHASU"	 	, "string");
	this.dsUpdate.addColumn("TY_SAEDAE"	 	, "string");
	this.dsUpdate.addColumn("NO_SIZE_01"	, "BIGDECIMAL");
	this.dsUpdate.addColumn("NO_SIZE_02"	, "BIGDECIMAL");
	this.dsUpdate.addColumn("NO_SIZE_03"	, "BIGDECIMAL");
	this.dsUpdate.addColumn("NO_SIZE_04"	, "BIGDECIMAL");
	this.dsUpdate.addColumn("NO_SIZE_05"	, "BIGDECIMAL");
	this.dsUpdate.addColumn("NO_SIZE_06"	, "BIGDECIMAL");
	this.dsUpdate.addColumn("NO_SIZE_07"	, "BIGDECIMAL");
	this.dsUpdate.addColumn("NO_SIZE_08"	, "BIGDECIMAL");
	this.dsUpdate.addColumn("NO_SIZE_09"	, "BIGDECIMAL");
	this.dsUpdate.addColumn("NO_SIZE_10"	, "BIGDECIMAL");
	this.dsUpdate.addColumn("NO_SIZE_11"	, "BIGDECIMAL");
	this.dsUpdate.addColumn("NO_SIZE_12"	, "BIGDECIMAL");
	this.dsUpdate.addColumn("ID_UPDATE"	    , "string");
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();

	this.dsSelect.setColumn(0, "YR_PLAN"     , this.dsSearch.getColumn(0, "YR_PLAN"));
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); 	// 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {

}

/*
 *	삭제 버튼
 */
this.fnDel = function() {

}

/*
 *	저장 버튼
 */
this.fnSave = function() {
	if (!this.gfnGridValidate(this.dxGrid)) return;

	this.dxGrid.updateToDataset();

	this.dsUpdate.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);

		switch(flag) {
			case "U":
				var nrow = this.dsUpdate.addRow();
				this.dsUpdate.setColumn(nrow, "YR_PLAN"		, this.dsSearch.getColumn(0, "YR_PLAN"));		//계획년도
				this.dsUpdate.setColumn(nrow, "CD_ACNTUNIT" , this.dsList.getColumn(i, "CD_ACNTUNIT"));		//사업지번호
				this.dsUpdate.setColumn(nrow, "TY_GUBUN"	, this.dsList.getColumn(i, "TY_GUBUN"));		//구분
				this.dsUpdate.setColumn(nrow, "NO_CHASU"	, this.dsList.getColumn(i, "NO_CHASU"));		//차수
				this.dsUpdate.setColumn(nrow, "TY_SAEDAE"	, this.dsList.getColumn(i, "TY_SAEDAE"));		//세대구분		
				this.dsUpdate.setColumn(nrow, "NO_SIZE_01"	, this.dsList.getColumn(i, "NO_SIZE_01"));		//1월
				this.dsUpdate.setColumn(nrow, "NO_SIZE_02"	, this.dsList.getColumn(i, "NO_SIZE_02"));		//2월
				this.dsUpdate.setColumn(nrow, "NO_SIZE_03"	, this.dsList.getColumn(i, "NO_SIZE_03"));		//3월
				this.dsUpdate.setColumn(nrow, "NO_SIZE_04"	, this.dsList.getColumn(i, "NO_SIZE_04"));		//4월
				this.dsUpdate.setColumn(nrow, "NO_SIZE_05"	, this.dsList.getColumn(i, "NO_SIZE_05"));		//5월
				this.dsUpdate.setColumn(nrow, "NO_SIZE_06"	, this.dsList.getColumn(i, "NO_SIZE_06"));		//6월
				this.dsUpdate.setColumn(nrow, "NO_SIZE_07"	, this.dsList.getColumn(i, "NO_SIZE_07"));		//7월
				this.dsUpdate.setColumn(nrow, "NO_SIZE_08"	, this.dsList.getColumn(i, "NO_SIZE_08"));		//8월
				this.dsUpdate.setColumn(nrow, "NO_SIZE_09"	, this.dsList.getColumn(i, "NO_SIZE_09"));		//9월
				this.dsUpdate.setColumn(nrow, "NO_SIZE_10"	, this.dsList.getColumn(i, "NO_SIZE_10"));		//10월
				this.dsUpdate.setColumn(nrow, "NO_SIZE_11"	, this.dsList.getColumn(i, "NO_SIZE_11"));		//11월
				this.dsUpdate.setColumn(nrow, "NO_SIZE_12"	, this.dsList.getColumn(i, "NO_SIZE_12"));		//12월
				this.dsUpdate.setColumn(nrow, "ID_UPDATE"	, this.AuthClient.ID_USER);						//수정자ID
				break;				
		}
	}
	
	if (this.dsUpdate.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "update=dsUpdate";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * 서브 버튼 이벤트
 ************************************************************************/

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
  */
this.fnSelectValidate = function() {
	if(this.gfnIsNull(this.dsSearch.getColumn(0, "YR_PLAN"))){
		this.gfnAlert("계획년도가 입력되지 않았습니다.");
		this.ctclYR_PLAN.form.TextBox.setFocus();
		return false;
	}

	return true;
};


/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);		
	} else if (svcID == "create") {
		if (errorCode == 0) {
			this.gfnAlert("자료가 생성되었습니다.");
		
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	} else if(svcID == "save"){
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
}
 
/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
this.fnGrid_AfterEdit = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo) {
	if(e.oldvalue != e.newvalue) {	
		if(e.columnid.search("NO_SIZE_") > -1) {
			var amSum = 0;	
			//1월에서12월
			for(var i=1;i<=12;i++){
				var colNo = (i).toString().padLeft(2, "0");

				amSum += nexacro.toNumber(obj.getColumn(e.row, "NO_SIZE_"+colNo),0);
			}
			//임대실적(누계) 포함
			amSum += nexacro.toNumber(obj.getColumn(e.row, "NO_SIZE_CONTRACT"),0);
			//합계
			this.dsList.setColumn(e.row, "NO_SIZE_SUM" ,amSum);
		}
	}
}
/************************************************************************
 * 기타 이벤트
 ************************************************************************/

this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
	}
};

//자료생성
this.fnCreate = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	if(!this.fnSelectValidate) return;

	this.gfnConfirm("기존자료 삭제 후 생성됩니다.\r\n계속하시겠습니까?", "fnCreate_callback");
}

this.fnCreate_callback = function(strId, val) 
{
	if(val == true) {
		this.dsCreate.clearData();
		this.dsCreate.addRow();
		
		this.dsCreate.setColumn(0, "YR_PLAN"     , this.dsSearch.getColumn(0, "YR_PLAN"));
		this.dsCreate.setColumn(0, "ID_INSERT"   , this.AuthClient.ID_USER);
		
		var strSvcId    = "create";
		var strSvcType  = "save";
		var inProc		= "_dsProc";
		var inData      = "create=dsCreate";
		var outData     = "";
		var strArg      = "";
		var callBackFnc = "fnCallback";
		
		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
							strSvcType , 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
							callBackFnc); // 통신방법 정의 [생략가능]
	}	
}
]]></Script>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ctclYR_PLAN.form.TextBox" propid="value" datasetid="dsSearch" columnid="YR_PLAN"/>
    </Bind>
  </Form>
</FDL>
