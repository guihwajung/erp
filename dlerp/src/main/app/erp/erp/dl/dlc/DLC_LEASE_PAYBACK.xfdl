<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1400" height="720" titletext="자동전표 코드등록" onload="form_onload">
    <Layouts>
      <Layout stepcount="0">
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg" formscrolltype="none" text="">
          <Layouts>
            <Layout>
              <Static id="staCD_ACNTUNIT" taborder="0" text="사업지코드" left="0.0" top="10.0" width="105.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Edit id="ctxtCD_ACNTUNIT" taborder="1" left="staCD_ACNTUNIT:0.0" top="10.0" width="80" height="24.0" readonly="true"/>
              <Edit id="ctxtDS_ACNTUNIT" taborder="2" left="ctxtCD_ACNTUNIT:0.0" top="10.0" width="200" height="24.0" readonly="true"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg" text="" ondragmove="divData_ondragmove">
          <Layouts>
            <Layout>
              <Div id="divSplitter" taborder="1" left="0" top="20%" width="100%" height="5" background="skyblue" cursor="ns-resize" ondrag="divData_divSplitter_ondrag"/>
              <Div id="divDataTop" taborder="0" left="0" top="0" bottom="divSplitter:5" right="0">
                <Layouts>
                  <Layout>
                    <Static id="sta01" taborder="0" text="계상내역" left="0" top="0" height="22" cssclass="sta_TITLE_Bg" right="0"/>
                    <Grid id="objGrid1" taborder="0" left="0" top="sta01:5" bottom="0" right="0"/>
                  </Layout>
                </Layouts>
              </Div>
              <Div id="divDataBottom" taborder="0" left="0" top="divSplitter:5" bottom="0" right="0">
                <Layouts>
                  <Layout>
                    <Button id="btnAddUpBack" taborder="2" text="수납" top="0" width="80" right="0" height="22" onclick="divData_divDataBottom_btnAddUpBack_onclick"/>
                    <Static id="sta02" taborder="0" text="반제내역" left="0" top="0" right="165" height="22" cssclass="sta_TITLE_Bg"/>
                    <Grid id="objGrid" taborder="1" left="0" top="sta02:5" bottom="0" right="0"/>
                  </Layout>
                </Layouts>
              </Div>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication(); 

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();

	this.dsSearch.setColumn(0, "CD_ACNTUNIT", this.getOwnerFrame().CD_ACNTUNIT);
	this.dsSearch.setColumn(0, "DS_ACNTUNIT", this.getOwnerFrame().DS_ACNTUNIT);
	
	
	var nrow = this.gfnGridAdd(this.dxGrid1, "", false);
	this.dsList1.set_enableevent(false);
	this.dsList1.setColumn(nrow, "NO_APPRO", this.getOwnerFrame().NO_APPRO);
	this.dsList1.setColumn(nrow, "DT_APPRO", this.getOwnerFrame().DT_APPRO);
	this.dsList1.setColumn(nrow, "AM_APPRO", this.getOwnerFrame().AM_APPRO);
	this.dsList1.setColumn(nrow, "CD_GUJA", this.getOwnerFrame().CD_GUJA);
	this.dsList1.setColumn(nrow, "DS_BANK", this.getOwnerFrame().DS_BANK);
	this.dsList1.setColumn(nrow, "DS_REMARK", this.getOwnerFrame().DS_REMARK);
	this.dsList1.setColumn(nrow, "YN_BANJEA", this.getOwnerFrame().YN_BANJEA);
	this.dsList1.setColumn(nrow, "NO_DONG", this.getOwnerFrame().NO_DONG);
	this.dsList1.setColumn(nrow, "NO_FLOOR", this.getOwnerFrame().NO_FLOOR);
	this.dsList1.setColumn(nrow, "NO_HO", this.getOwnerFrame().NO_HO);
	this.dsList1.setColumn(nrow, "DS_OWNER", this.getOwnerFrame().DS_CONTRACTOR);
	this.dsList1.set_enableevent(true);
	
	this.btnAddUpBack.set_enable(false);
	
	if (this.dsList1.rowposition >= 0)
		this.FormBtns.Select.click();
};

this.fnSetButton = function() {
}

this.fnSetExtendButton = function() {

    this.btnSlipSearch = this.gfnFormButtonAdd("btnSlipSearch", "fnSlipSearch");		
	this.btnSlipIssue = this.gfnFormButtonAdd("btnSlipIssue", "fnSlipIssue");	
	this.btnSlipCancel = this.gfnFormButtonAdd("btnSlipCancel", "fnSlipCancel");
};

this.fnSetVariable = function() {
	this.ctxtCD_ACNTUNIT = this.divSearch.form.ctxtCD_ACNTUNIT;
	this.ctxtDS_ACNTUNIT = this.divSearch.form.ctxtDS_ACNTUNIT;

	this.btnAddUpBack = this.divData.form.divDataBottom.form.btnAddUpBack;

	this.dxGrid = this.divData.form.divDataBottom.form.objGrid;
	this.dxGrid1 = this.divData.form.divDataTop.form.objGrid1;
};

this.fnSetEvent = function() {
	this.gfnGridInit(this.dxGrid1, this.dsList1, "DL", "DLC_LEASE_PAYBACK");
	this.gfnGridInit(this.dxGrid, this.dsList, "DL", "DLC_LEASE_ADDUPBACK_B");
	
 	this.gfnGridColumnColor(this.dxGrid, "", "BACK_ReadOnly", "TY_PROCESS=='1'", true);
	this.gfnGridColumnColor(this.dxGrid, "", "BACK_ReadOnly", "TY_PROCESS=='2'", true);
	
	this.dxGrid.EnterCell = "fnGrid_EnterCell";
	this.dxGrid.AfterEdit = "fnGrid_AfterEdit";
	this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforeUserDataSetParam";
}

this.fnSetParameter = function() {
	
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_ACNTUNIT", "string");
	this.dsSelect.addColumn("TY_GUBUN", "string");
	this.dsSelect.addColumn("NO_CHASU", "string");
	this.dsSelect.addColumn("NO_DONG", "string");
	this.dsSelect.addColumn("NO_FLOOR", "string");
	this.dsSelect.addColumn("NO_HO", "string");
	this.dsSelect.addColumn("NO_APPRO", "string");

	this.dsInsert = new Dataset();
	this.dsInsert.addColumn("CD_ACNTUNIT", "string");
	this.dsInsert.addColumn("TY_GUBUN", "string");
	this.dsInsert.addColumn("NO_CHASU", "string");
	this.dsInsert.addColumn("NO_DONG", "string");
	this.dsInsert.addColumn("NO_FLOOR", "string");
	this.dsInsert.addColumn("NO_HO", "string");
	this.dsInsert.addColumn("NO_APPRO", "string");
	this.dsInsert.addColumn("NO_PAYBACK", "string");
	this.dsInsert.addColumn("DT_PAYBACK", "string");
	this.dsInsert.addColumn("AM_PAYBACK", "bigdecimal");
	this.dsInsert.addColumn("TY_PROCESS", "string");
	this.dsInsert.addColumn("DT_REFUND", "string");
	this.dsInsert.addColumn("DS_REFUNDBANK", "string");
	this.dsInsert.addColumn("NO_REFUNDBANK", "string");
	this.dsInsert.addColumn("DS_OWNER", "string");
	this.dsInsert.addColumn("TY_ACCGUBUN", "string");
	this.dsInsert.addColumn("CD_BANK", "string");
	this.dsInsert.addColumn("TY_VENDOR_RE", "string");
	this.dsInsert.addColumn("CD_VENDOR_RE", "string");
	this.dsInsert.addColumn("DS_VENDOR_RE", "string");
	this.dsInsert.addColumn("ID_INSERT", "string");

	this.dsUpdate = new Dataset();
	this.dsUpdate.addColumn("CD_ACNTUNIT", "string");
	this.dsUpdate.addColumn("TY_GUBUN", "string");
	this.dsUpdate.addColumn("NO_CHASU", "string");
	this.dsUpdate.addColumn("NO_DONG", "string");
	this.dsUpdate.addColumn("NO_FLOOR", "string");
	this.dsUpdate.addColumn("NO_HO", "string");
	this.dsUpdate.addColumn("NO_APPRO", "string");
	this.dsUpdate.addColumn("NO_PAYBACK", "string");
	this.dsUpdate.addColumn("DT_PAYBACK", "string");
	this.dsUpdate.addColumn("AM_PAYBACK", "int");
	this.dsUpdate.addColumn("TY_PROCESS", "string");
	this.dsUpdate.addColumn("DT_REFUND", "string");
	this.dsUpdate.addColumn("DS_REFUNDBANK", "string");
	this.dsUpdate.addColumn("NO_REFUNDBANK", "string");
	this.dsUpdate.addColumn("DS_OWNER", "string");
	this.dsUpdate.addColumn("TY_VENDOR_RE", "string");
	this.dsUpdate.addColumn("CD_VENDOR_RE", "string");
	this.dsUpdate.addColumn("DS_VENDOR_RE", "string");
	this.dsUpdate.addColumn("ID_UPDATE", "string");

	this.dsDelete = new Dataset();
	this.dsDelete.addColumn("CD_ACNTUNIT", "string");
	this.dsDelete.addColumn("TY_GUBUN", "string");
	this.dsDelete.addColumn("NO_CHASU", "string");
	this.dsDelete.addColumn("NO_DONG", "string");
	this.dsDelete.addColumn("NO_FLOOR", "string");
	this.dsDelete.addColumn("NO_HO", "string");
	this.dsDelete.addColumn("NO_APPRO", "string");
	this.dsDelete.addColumn("NO_PAYBACK", "string");
	
	this.dsIssue = new Dataset();
	this.dsIssue.addColumn("CD_ACNTUNIT", "string");
	this.dsIssue.addColumn("TY_GUBUN", "string");
	this.dsIssue.addColumn("NO_CHASU", "string");
	this.dsIssue.addColumn("NO_APPRO", "string");
	this.dsIssue.addColumn("NO_PAYBACK", "string");
	this.dsIssue.addColumn("DT_APPRO", "string");
	this.dsIssue.addColumn("TY_PROCESS", "string");
	this.dsIssue.addColumn("AM_PAYBACK", "bigdecimal");
	this.dsIssue.addColumn("DT_RETURN", "string");
	this.dsIssue.addColumn("DS_RETURNBANK", "string");
	this.dsIssue.addColumn("NO_RETURNACCOUNT", "string");
	this.dsIssue.addColumn("TY_VENDOR_RE", "string");
	this.dsIssue.addColumn("CD_VENDOR_RE", "string");
	this.dsIssue.addColumn("DS_VENDOR_RE", "string");
	this.dsIssue.addColumn("CD_BANK", "string");
	this.dsIssue.addColumn("CD_CMS", "string");
	this.dsIssue.addColumn("ID_INSERT", "string");
	
	this.dsCancel = new Dataset();
	this.dsCancel.addColumn("CD_SLIP", "string");
	this.dsCancel.addColumn("ID_UPDATE", "string");
	
	
	
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
this.fnSelect = function() {
	if (!this.fnSelectValidation()) return;
	
	this.gfnGridBeforeSelect(this.dxGrid);

	this.dsSelect.clearData();
	this.dsSelect.addRow();
	this.dsSelect.setColumn(0, "CD_ACNTUNIT", this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(0, 6));
	this.dsSelect.setColumn(0, "TY_GUBUN", this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(6, 1));
	this.dsSelect.setColumn(0, "NO_CHASU", this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(7, 2));
	this.dsSelect.setColumn(0, "NO_DONG", this.dsList1.getColumn(0, "NO_DONG"));
	this.dsSelect.setColumn(0, "NO_FLOOR", this.dsList1.getColumn(0, "NO_FLOOR"));
	this.dsSelect.setColumn(0, "NO_HO", this.dsList1.getColumn(0, "NO_HO"));
	this.dsSelect.setColumn(0, "NO_APPRO", this.dsList1.getColumn(this.dsList1.rowposition, "NO_APPRO"));
		
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect"; 
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

this.fnAdd = function() {
	if (!this.fnAddValidation()) return;
	
	var nrow = this.gfnGridAdd(this.dxGrid);
	
	this.dsList.setColumn(nrow, "NO_APPRO", this.dsList1.getColumn(this.dsList1.rowposition, "NO_APPRO"));
	var imax = 0;
	for (var i = 0; i < this.dsList.rowcount; i++) {
		if (!this.gfnIsNull(this.dsList.getColumn(i, "NO_PAYBACK"))) {
			if (imax < nexacro.toNumber(this.dsList.getColumn(i, "NO_PAYBACK"))) {
				imax = nexacro.toNumber(this.dsList.getColumn(i, "NO_PAYBACK"));
			}
		}
	}
	this.dsList.setColumn(nrow, "NO_PAYBACK", (++imax).toString().padLeft(3, "0"));
	
	amPayback = 0;
	amAppro = 0;
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		if (!this.gfnIsNull(this.dsList.getColumn(i, "AM_PAYBACK"))) {
			amPayback += nexacro.toNumber(this.dsList.getColumn(i, "AM_PAYBACK"));
		}
	}
	
	amAppro = this.dsList1.getColumn(this.dsList1.rowposition, "AM_APPRO");
	this.dsList.setColumn(this.dsList.rowposition, "AM_PAYBACK", amAppro - amPayback);
}

this.fnDel = function() {
	if (!this.fnDelValidation()) return;

	this.gfnGridDel(this.dxGrid);
}

this.fnSave = function() {
	if (!this.gfnGridValidate(this.dxGrid)) return;
	if (!this.fnSaveValidation()) return;

	this.dxGrid.updateToDataset();
	
	this.dsInsert.clearData();
	this.dsUpdate.clearData();
	this.dsDelete.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "I":
				var nrow = this.dsInsert.addRow();
				this.dsInsert.setColumn(nrow, "CD_ACNTUNIT", this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(0, 6));
				this.dsInsert.setColumn(nrow, "TY_GUBUN", this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(6, 1));
				this.dsInsert.setColumn(nrow, "NO_CHASU", this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(7, 2));
				this.dsInsert.setColumn(nrow, "NO_DONG", this.dsList1.getColumn(0, "NO_DONG"));
				this.dsInsert.setColumn(nrow, "NO_FLOOR", this.dsList1.getColumn(0, "NO_FLOOR"));
				this.dsInsert.setColumn(nrow, "NO_HO", this.dsList1.getColumn(0, "NO_HO"));
				this.dsInsert.setColumn(nrow, "NO_APPRO", this.dsList1.getColumn(this.dsList1.rowposition, "NO_APPRO"));
				this.dsInsert.setColumn(nrow, "NO_PAYBACK", this.dsList.getColumn(i, "NO_PAYBACK"));
				this.dsInsert.setColumn(nrow, "DT_PAYBACK", this.dsList.getColumn(i, "DT_PAYBACK"));
				this.dsInsert.setColumn(nrow, "AM_PAYBACK", this.dsList.getColumn(i, "AM_PAYBACK"));
				this.dsInsert.setColumn(nrow, "TY_PROCESS", this.dsList.getColumn(i, "TY_PROCESS"));
				this.dsInsert.setColumn(nrow, "DT_REFUND", this.dsList.getColumn(i, "DT_REFUND"));
				this.dsInsert.setColumn(nrow, "DS_REFUNDBANK", this.dsList.getColumn(i, "DS_REFUNDBANK"));
				this.dsInsert.setColumn(nrow, "NO_REFUNDBANK", this.dsList.getColumn(i, "NO_REFUNDBANK"));
				this.dsInsert.setColumn(nrow, "DS_OWNER", this.dsList1.getColumn(i, "DS_OWNER"));
				this.dsInsert.setColumn(nrow, "TY_ACCGUBUN", this.dsList.getColumn(i, "TY_ACCGUBUN"));
				this.dsInsert.setColumn(nrow, "CD_BANK", this.dsList.getColumn(i, "CD_BANK"));
				this.dsInsert.setColumn(nrow, "DS_REMARK", this.dsList.getColumn(i, "DS_REMARK"));
				this.dsInsert.setColumn(nrow, "TY_VENDOR_RE", this.dsList.getColumn(i, "TY_VENDOR_RE"));
				this.dsInsert.setColumn(nrow, "CD_VENDOR_RE", this.dsList.getColumn(i, "CD_VENDOR_RE"));
				this.dsInsert.setColumn(nrow, "DS_VENDOR_RE", this.dsList.getColumn(i, "DS_VENDOR_RE"));
				this.dsInsert.setColumn(nrow, "ID_INSERT", this.AuthClient.ID_USER);
				break;
			case "U":
				var nrow = this.dsUpdate.addRow();
				this.dsUpdate.setColumn(nrow, "CD_ACNTUNIT", this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(0, 6));
				this.dsUpdate.setColumn(nrow, "TY_GUBUN", this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(6, 1));
				this.dsUpdate.setColumn(nrow, "NO_CHASU", this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(7, 2));
				this.dsUpdate.setColumn(nrow, "NO_DONG", this.dsList1.getColumn(0, "NO_DONG"));
				this.dsUpdate.setColumn(nrow, "NO_FLOOR", this.dsList1.getColumn(0, "NO_FLOOR"));
				this.dsUpdate.setColumn(nrow, "NO_HO", this.dsList1.getColumn(0, "NO_HO"));
				this.dsUpdate.setColumn(nrow, "NO_APPRO", this.dsList1.getColumn(this.dsList1.rowposition, "NO_APPRO"));
				this.dsUpdate.setColumn(nrow, "NO_PAYBACK", this.dsList.getColumn(i, "NO_PAYBACK"));
				this.dsUpdate.setColumn(nrow, "DT_PAYBACK", this.dsList.getColumn(i, "DT_PAYBACK"));
				this.dsUpdate.setColumn(nrow, "AM_PAYBACK", this.dsList.getColumn(i, "AM_PAYBACK"));
				this.dsUpdate.setColumn(nrow, "TY_PROCESS", this.dsList.getColumn(i, "TY_PROCESS"));
				this.dsUpdate.setColumn(nrow, "DS_REFUNDBANK", this.dsList.getColumn(i, "DS_REFUNDBANK"));
				this.dsUpdate.setColumn(nrow, "NO_REFUNDBANK", this.dsList.getColumn(i, "NO_REFUNDBANK"));
				this.dsUpdate.setColumn(nrow, "DS_OWNER", this.dsList1.getColumn(i, "DS_OWNER"));
				this.dsUpdate.setColumn(nrow, "TY_VENDOR_RE", this.dsList.getColumn(i, "TY_VENDOR_RE"));
				this.dsUpdate.setColumn(nrow, "CD_VENDOR_RE", this.dsList.getColumn(i, "CD_VENDOR_RE"));
				this.dsUpdate.setColumn(nrow, "DS_VENDOR_RE", this.dsList.getColumn(i, "DS_VENDOR_RE"));
				this.dsUpdate.setColumn(nrow, "ID_UPDATE", this.AuthClient.ID_USER);
				break;
			case "D":
				var nrow = this.dsDelete.addRow();
				this.dsDelete.setColumn(nrow, "CD_ACNTUNIT", this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(0, 6));
				this.dsDelete.setColumn(nrow, "TY_GUBUN", this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(6, 1));
				this.dsDelete.setColumn(nrow, "NO_CHASU", this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(7, 2));
				this.dsDelete.setColumn(nrow, "NO_DONG", this.dsList1.getColumn(0, "NO_DONG"));
				this.dsDelete.setColumn(nrow, "NO_FLOOR", this.dsList1.getColumn(0, "NO_FLOOR"));
				this.dsDelete.setColumn(nrow, "NO_HO", this.dsList1.getColumn(0, "NO_HO"));
				this.dsDelete.setColumn(nrow, "NO_APPRO", this.dsList1.getColumn(this.dsList1.rowposition, "NO_APPRO"));
				this.dsDelete.setColumn(nrow, "NO_PAYBACK", this.dsList.getColumn(i, "NO_PAYBACK"));
				break;
		}
	}
	
	if (this.dsInsert.rowcount == 0 && this.dsUpdate.rowcount == 0 && this.dsDelete.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "insert=dsInsert update=dsUpdate delete=dsDelete";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

this.fnPrint = function() {

}

/************************************************************************
 * Validate
 ************************************************************************/
this.fnSelectValidation = function() {
	var validate = true;
	if (this.gfnIsNull(this.dsSearch.getColumn(0, "CD_ACNTUNIT"))) {
		this.gfnAlert("사업지코드가 입력되지 않았습니다.");
	}
	return validate;
}

this.fnSaveValidation = function() {
	var msg = "";
	var validate = true;
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		
		if (this.gfnIsNull(flag) || flag == "D") continue;
		
		if (this.gfnNvl(this.dsList.getColumn(i, "TY_PROCESS")) == "3") {
			if (this.gfnIsNull(this.dsList.getColumn(i, "DT_REFUND"))) {
				msg += "환불일자는 반드시 입력하셔야 합니다.\n";
				validate = false;
			}
// 			if (this.gfnIsNull(this.dsList.getColumn(i, "DS_REFUNDBANK"))) {
// 				msg += "환불은행은 반드시 입력하셔야 합니다.\n";
// 				validate = false;
// 			}
// 			if (this.gfnIsNull(this.dsList.getColumn(i, "NO_REFUNDBANK"))) {
// 				msg += "환불계좌는 반드시 입력하셔야 합니다.\n";
// 				validate = false;
// 			}
			/*
			if (this.gfnIsNull(this.dsList.getColumn(i, "DS_OWNER"))) {
				msg += "예금주는 반드시 입력하셔야 합니다.\n";
				validate = false;
			}
			*/
		}
		else {
			if (!this.gfnIsNull(this.gfnTrim(this.dsList.getColumn(i, "DT_REFUND")))) {
				msg += "환불처리가 아니므로 환불일자는 입력하지 않습니다.\n";
				validate = false;
			}
			if (!this.gfnIsNull(this.dsList.getColumn(i, "DS_REFUNDBANK"))) {
				msg += "환불처리가 아니므로 환불은행는 입력하지 않습니다.\n";
				validate = false;
			}
			if (!this.gfnIsNull(this.dsList.getColumn(i, "NO_REFUNDBANK"))) {
				msg += "환불처리가 아니므로 환불계좌는 입력하지 않습니다.\n";
				validate = false;
			}
			/*
			if (!this.gfnIsNull(this.dsList.getColumn(i, "DS_OWNER"))) {
				msg += "환불처리가 아니므로 예금주는 입력하지 않습니다.\n";
				validate = false;
			}
			*/
		}
		
		if (!validate) {
			this.gfnAlert(msg);
			return validate;
		}
	}
	
	return validate;
}

this.fnAddValidation = function() {
	var amPayback = 0;
	var amPayback_left = 0;
	var amAppro = 0;

	for (var i = 0; i < this.dsList.rowcount; i++) {
		if (!this.gfnIsNull(this.dsList.getColumn(i, "AM_PAYBACK"))) {
			amPayback += nexacro.toNumber(this.dsList.getColumn(i, "AM_PAYBACK"));
		}
	}

	amAppro = nexacro.toNumber(this.dsList1.getColumn(this.dsList1.rowposition, "AM_APPRO"));
	amPayback_left = amAppro - amPayback;

	if (amPayback_left <= 0) {
		this.gfnAlert("계상내역이 모두 반제되었습니다.");
		return false;
	}
	
	return true;
}

this.fnDelValidation = function() {
	if (!this.gfnIsNull(this.dsList.getColumn(this.dsList.rowposition, "CD_CMS"))) {
		this.gfnAlert("[알림]반제동호내역이 존재합니다.\n반제된수납내역이 존재하면 삭제하여 주시기바랍니다.");
		return false;
	}

	return true;
}

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
this.fnCallback = function(svcID, errorCode, errorMsg) {
	if(svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);
		
		if (this.dsList.rowcount > 0) {
			var amPayback = 0;
			var amPayback_left = 0;
			var amAppro = 0;
			var cd_cms = "";
			
			for (var i = 0; i < this.dsList.rowcount; i++) {
				if (!this.gfnIsNull(this.dsList.getColumn(i, "AM_PAYBACK"))) {
					amPayback += nexacro.toNumber(this.dsList.getColumn(i, "AM_PAYBACK"));
					cd_cms = this.dsList.getColumn(i, "CD_CMS");
				}
			}
			
			amAppro = nexacro.toNumber(this.dsList1.getColumn(this.dsList1.rowposition, "AM_APPRO"));
			amPayback_left = amAppro - amPayback;
			
			if (amPayback_left >= 0) {
				this.btnAddUpBack.set_enable(true);
			}
			else if(this.gfnNvl(this.dsList.getColumn(this.dsList.rowposition, "TY_PROCESS")) == "1" && cd_cms == ""){
			   this.btnAddUpBack.set_enable(true);
			}
			else {
				this.btnAddUpBack.set_enable(false);
			}
		}
		else {
			this.btnAddUpBack.set_enable(false);
		}
		
		
	}
	
	else if(svcID == "issue") {
		if (errorCode == 0) {
		    this.gfnAlert("정상적으로 처리되었습니다.");
			this.FormBtns.Select.click();
		}
		else {
			this.gfnAlert(errorMsg);
		}
	}
	
	else if(svcID == "cancel") {
		if (errorCode == 0) {
		    this.gfnAlert("정상적으로 처리되었습니다.");
			this.FormBtns.Select.click();
		}
		else {
			this.gfnAlert(errorMsg);
		}
	}
	
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		}
		else {
			this.gfnAlert(errorMsg);
		}
	}
}
 
/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
 
/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
this.fnGrid_EnterCell = function(obj:nexacro.Grid, row, cell) {
	var colnm = this.gfnGridGetBindColumnNameByIndex(this.dxGrid, cell);
	var bTY_PROCESS = this.dsList.getColumn(row, "TY_PROCESS") == "3";
	
	switch (colnm) {
		case "DT_REFUND":
		case "DS_OWNER":
			if (!bTY_PROCESS) {
				return false;
			}
			break;
	}
}

this.fnGrid_AfterEdit = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo) {
	if (e.columnid == "TY_PROCESS") {
		if (e.oldvalue != e.newvalue) {
			if (this.dsList.getColumn("TY_PROCESS") != "3") {
				this.dsList.setColumn(e.row, "DT_REFUND" ,"");
				this.dsList.setColumn(e.row, "DS_REFUNDBANK" ,"");
				this.dsList.setColumn(e.row, "NO_REFUNDBANK" ,"");
				this.dsList.setColumn(e.row, "DS_OWNER" ,"");
			}
		}
	}
}

this.fnGrid_BeforeUserDataSetParam = function(id, dsUserParam, nrow){
	switch(id) {
		case "DCZ_CFACCOUNT_BYCASH":
			dsUserParam.setColumn(nrow, "TY_CASH", "20");
			dsUserParam.setColumn(nrow, "CD_CORP", this.AuthClient.CD_CORP);
			break;
		
		case "DFX_CFACCOUNTMATCH":
			dsUserParam.setColumn(nrow, "TY_VENDOR", this.dsList.getColumn(this.dsList.rowposition,"TY_VENDOR_RE"));
	    	dsUserParam.setColumn(nrow, "CD_PAY", this.dsList.getColumn(this.dsList.rowposition,"CD_VENDOR_RE"));
		    dsUserParam.setColumn(nrow, "TY_CASH", "C");
			break;
		default:
			break;
	}		
	return true;
};
 
/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo) {
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);
	}
};

this.divData_ondragmove = function(obj:nexacro.Div,e:nexacro.DragEventInfo)
{
	if(e.userdata == "splitter") {
		this.divData.form.divSplitter.set_top(e.clienty);
		this.divData.form.resetScroll();	
	}
};

this.divData_divSplitter_ondrag = function(obj:nexacro.Div,e:nexacro.DragEventInfo)
{
	e.set_userdata("splitter");
	return true;
};


this.fnSlipSearch = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
   
   if(!this.gfnGridIsRow(this.dxGrid)) return;	
	
	if( !this.gfnIsNull(this.dsList.getColumn(this.dsList.rowposition, "CD_SLIP")) ){
		var param = {};
		
		param.CD_TRADE = this.dsList.getColumn(this.dsList.rowposition,"CD_SLIP");
		//param.IUD_FLAG = "S";
		
		this.gfnFormOpen("DHA", "DHA_ISSUESLIP", "", param);
	} else {
		this.gfnAlert("전표가 생성된 행만 전표조회 가능합니다.", "");
	}
	
}


this.fnSlipIssue = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {

    var ty_process = this.dsList.getColumn(this.dsList.rowposition, "TY_PROCESS");
	var cd_cms = this.dsList.getColumn(this.dsList.rowposition, "CD_CMS");
   
   if((ty_process == "1" && cd_cms != "") ||  ty_process == "2" || ty_process == "3"){
  
    var msg = "전표발행을 하시겠습니까?";
	
	this.gfnConfirm(msg, "fnSlipIssue_callback", "");

   }
   
   else if(ty_process == "1" && cd_cms == "") {
    
	 this.gfnAlert("임대료 수납이후에 전표발행 가능합니다.");
   }
   
   else {
   
   }
}


this.fnSlipIssue_callback = function(strId, val) 
{
	if(val == true) 
	{	
		
		this.dsIssue.clearData();
		
		var row = this.dsList.rowposition;
		var nrow = this.dsIssue.addRow();
		
		
		this.dsIssue.setColumn(nrow, "CD_ACNTUNIT", this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(0, 6));
	    this.dsIssue.setColumn(nrow, "TY_GUBUN", this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(6, 1));
	    this.dsIssue.setColumn(nrow, "NO_CHASU", this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(7, 2));
		this.dsIssue.setColumn(nrow, "NO_APPRO", this.dsList.getColumn(row, "NO_APPRO"));
		this.dsIssue.setColumn(nrow, "NO_PAYBACK", this.dsList.getColumn(row, "NO_PAYBACK"));
		this.dsIssue.setColumn(nrow, "DT_APPRO", this.dsList.getColumn(row, "DT_PAYBACK"));
    	this.dsIssue.setColumn(nrow, "TY_PROCESS", this.dsList.getColumn(row, "TY_PROCESS"));
		this.dsIssue.setColumn(nrow, "AM_PAYBACK", this.dsList.getColumn(row, "AM_PAYBACK"));
		this.dsIssue.setColumn(nrow, "DT_RETURN", this.dsList.getColumn(row, "DT_RETURN"));
		this.dsIssue.setColumn(nrow, "DS_RETURNBANK", this.dsList.getColumn(row, "DS_RETURNBANK"));
		this.dsIssue.setColumn(nrow, "NO_RETURNACCOUNT", this.dsList.getColumn(row, "NO_RETURNACCOUNT"));
		this.dsIssue.setColumn(nrow, "TY_VENDOR_RE", this.dsList.getColumn(row, "TY_VENDOR_RE"));
		this.dsIssue.setColumn(nrow, "CD_VENDOR_RE", this.dsList.getColumn(row, "CD_VENDOR_RE"));
		this.dsIssue.setColumn(nrow, "DS_VENDOR_RE", this.dsList.getColumn(row, "DS_VENDOR_RE"));
		this.dsIssue.setColumn(nrow, "CD_BANK", this.dsList.getColumn(row, "CD_BANK"));
		this.dsIssue.setColumn(nrow, "CD_CMS", this.dsList.getColumn(row, "CD_CMS"));
		this.dsIssue.setColumn(nrow, "ID_INSERT", this.AuthClient.ID_USER);
		
		if (this.dsIssue.rowcount == 0) return;
		
	var strSvcId    = "issue";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "issue=dsIssue";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
		
	}
}


this.fnSlipCancel = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {

    var ty_process = this.dsList.getColumn(this.dsList.rowposition, "TY_PROCESS");
	var cd_cms = this.dsList.getColumn(this.dsList.rowposition, "CD_CMS");

     if((ty_process == "1" && cd_cms != "") || ty_process == "2" || ty_process == "3"){

     var msg = "전표취소를 진행하시겠습니까?";
   
      this.gfnConfirm(msg, "fnSlipCancel_callback", "");

    }
	else  {
    
	 this.gfnAlert("전표발행건만 취소가능합니다.");
   }
}



this.fnSlipCancel_callback = function(strId, val) 
{
	if(val == true) 
	{	
		this.dsCancel.clearData();
		
		var row = this.dsList.rowposition;
		var nrow = this.dsCancel.addRow();
		
		
		this.dsCancel.setColumn(nrow, "CD_SLIP", this.dsList.getColumn(row, "CD_SLIP"));
	    this.dsCancel.setColumn(nrow, "ID_UPDATE", this.AuthClient.ID_USER);
		
		
		if (this.dsCancel.rowcount == 0) return;
		
	    var strSvcId    = "cancel";
	    var strSvcType  = "save";
	    var inProc		= "_dsProc";
	    var inData      = "cancel=dsCancel";
	    var outData     = "";
	    var strArg      = "";
	    var callBackFnc = "fnCallback";
	
	    this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
		

	}
}


this.divData_divDataBottom_btnAddUpBack_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	if (!this.gfnGridIsRow(this.dxGrid)) return;
	
	
	
	var row = this.dsList.rowposition;
	var ty_process = this.dsList.getColumn(this.dsList.rowposition, "TY_PROCESS");
	var cd_cms = this.dsList.getColumn(this.dsList.rowposition, "CD_CMS");
	
	trace("ty_process>>>" + ty_process);
	trace("cd_cms>>>" + cd_cms);
	
	//if(ty_process == "1" && cd_cms == ""){
	if(ty_process == "1"){
		if (this.gfnIsNull(cd_cms) || cd_cms == "") {
	
			var param = {};
			param.CD_ACNTUNIT = this.dsSearch.getColumn(0, "CD_ACNTUNIT");
			param.DS_ACNTUNIT = this.dsSearch.getColumn(0, "DS_ACNTUNIT");
			param.NO_APPRO = this.dsList.getColumn(row, "NO_APPRO");
			param.NO_PAYBACK = this.dsList.getColumn(row, "NO_PAYBACK");
			param.DT_RECEIPT = this.dsList.getColumn(row, "DT_PAYBACK");
			param.AM_RECEIPT = nexacro.toNumber(this.dsList.getColumn(row, "AM_PAYBACK"));

			this.gfnFormOpen("DLC", "DLC_DLGPAYBACK", "fnAddCallback", param);
		}
	}
	 else {
	    this.gfnAlert("수납이 이미 되었거나 임대료반제 항목이 아닙니다");
	 }
	
};
this.fnAddCallback = function(svcID, val) {
    this.FormBtns.Select.click();
}]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="dsList1"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DLCPR_LEASE_PAYBACK_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">insert</Col>
            <Col id="SP">DLCPR_LEASE_PAYBACK_INSERT</Col>
          </Row>
          <Row>
            <Col id="TARGET">update</Col>
            <Col id="SP">DLCPR_LEASE_PAYBACK_UPDATE</Col>
          </Row>
          <Row>
            <Col id="TARGET">delete</Col>
            <Col id="SP">DLCPR_LEASE_PAYBACK_DELETE</Col>
          </Row>
          <Row>
            <Col id="TARGET">issue</Col>
            <Col id="SP">DLCPR_PAYBACK_AUTOSLIP_APPRO</Col>
          </Row>
          <Row>
            <Col id="TARGET">cancel</Col>
            <Col id="SP">DLCPR_PAYBACK_AUTOSLIP_CANCEL</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_ACNTUNIT" type="STRING" size="256"/>
          <Column id="DS_ACNTUNIT" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CD_ACNTUNIT"/>
            <Col id="DS_ACNTUNIT"/>
          </Row>
        </Rows>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ctxtCD_ACNTUNIT" propid="value" datasetid="dsSearch" columnid="CD_ACNTUNIT"/>
      <BindItem id="item1" compid="divSearch.form.ctxtDS_ACNTUNIT" propid="value" datasetid="dsSearch" columnid="DS_ACNTUNIT"/>
    </Bind>
  </Form>
</FDL>
