<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1400" height="720" titletext="자동전표 코드등록" onload="form_onload">
    <Layouts>
      <Layout stepcount="0">
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg" formscrolltype="none" text="">
          <Layouts>
            <Layout>
              <Static id="staCD_ACNTUNIT" taborder="0" text="사업지코드" left="0.0" top="10.0" width="105.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfCD_ACNTUNIT" CodeFindName="DRX_CFACNTUNIT" CDTextWidth="70" taborder="1" left="staCD_ACNTUNIT:0.0" top="10.0" width="350" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="30" bottom="0" right="0" cssclass="div_DATA_Bg" text="">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="15" right="0" bottom="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	if (!this.gfnIsNull(this.getOwnerFrame().CD_ACNTUNIT)) {
		this.dsSearch.setColumn(0, "CD_ACNTUNIT", this.getOwnerFrame().CD_ACNTUNIT);
		this.dsSearch.setColumn(0, "DS_ACNTUNIT", this.getOwnerFrame().DS_ACNTUNIT);
	}
	
	if (this.FormInfo.ID_GROUP == "0") {
		this.FormBtns.Excel.set_visible(false);
		this.FormBtns.Print.set_visible(false);
	}
};

this.fnSetButton = function() {
}

this.fnSetExtendButton = function() {
	this.btnPayback = this.gfnFormButtonAdd("Payback", "fnPayback");
	this.btnPayback.set_enable(false);
};

this.fnSetVariable = function() {
	this.ccfCD_ACNTUNIT = this.divSearch.form.ccfCD_ACNTUNIT;

	this.dxGrid = this.divData.form.objGrid;
};

this.fnSetEvent = function() {
	this.gfnGridInit(this.dxGrid, this.dsList, "DR", "DRC_ADDUP");
	
	this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforeUserDataSetParam";
	this.dxGrid.addEventHandler("oncelldblclick", this.dxGrid_oncelldblclick, this);
	
	this.ccfCD_ACNTUNIT.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	
}

this.fnSetParameter = function() {
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_ACNTUNIT", "string");
	this.dsSelect.addColumn("TY_GUBUN", "string");
	this.dsSelect.addColumn("NO_CHASU", "string");

	this.dsInsert = new Dataset();
	this.dsInsert.addColumn("CD_ACNTUNIT", "string");
	this.dsInsert.addColumn("TY_GUBUN", "string");
	this.dsInsert.addColumn("NO_CHASU", "string");
	this.dsInsert.addColumn("NO_APPRO", "string");
	this.dsInsert.addColumn("DT_APPRO", "string");
	this.dsInsert.addColumn("AM_APPRO", "int");
	this.dsInsert.addColumn("CD_GUJA", "string");
	this.dsInsert.addColumn("DS_REMARK", "string");
	this.dsInsert.addColumn("ID_INSERT", "string");

	this.dsUpdate = new Dataset();
	this.dsUpdate.addColumn("CD_ACNTUNIT", "string");
	this.dsUpdate.addColumn("TY_GUBUN", "string");
	this.dsUpdate.addColumn("NO_CHASU", "string");
	this.dsUpdate.addColumn("NO_APPRO", "string");
	this.dsUpdate.addColumn("DT_APPRO", "string");
	this.dsUpdate.addColumn("AM_APPRO", "int");
	this.dsUpdate.addColumn("CD_GUJA", "string");
	this.dsUpdate.addColumn("DS_REMARK", "string");
	this.dsUpdate.addColumn("ID_UPDATE", "string");

	this.dsDelete = new Dataset();
	this.dsDelete.addColumn("CD_ACNTUNIT", "string");
	this.dsDelete.addColumn("TY_GUBUN", "string");
	this.dsDelete.addColumn("NO_CHASU", "string");
	this.dsDelete.addColumn("NO_APPRO", "string");
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
this.fnSelect = function() {
	if (!this.fnSelectValidation()) return;
	
	this.gfnGridBeforeSelect(this.dxGrid);

	this.dsSelect.clearData();
	this.dsSelect.addRow();
	this.dsSelect.setColumn(0, "CD_ACNTUNIT", this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(0, 6));
	this.dsSelect.setColumn(0, "TY_GUBUN", this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(6, 1));
	this.dsSelect.setColumn(0, "NO_CHASU", this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(7, 2));
		
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect"; 
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

this.fnAdd = function() {
	var nrow = this.gfnGridAdd(this.dxGrid);
	
	if (this.dsList.rowcount == 1) {
		this.dsList.setColumn(nrow, "NO_APPRO", "0001");
	}
	else {
		var imax = 0;
		for (var i = 0; i < this.dsList.rowcount; i++) {
			if (!this.gfnIsNull(this.dsList.getColumn(i, "NO_APPRO"))) {
				if (imax < nexacro.toNumber(this.dsList.getColumn(i, "NO_APPRO"))) {
					imax = nexacro.toNumber(this.dsList.getColumn(i, "NO_APPRO"));
				}
			}
		}
		this.dsList.setColumn(nrow, "NO_APPRO", (++imax).toString().padLeft(4, "0"));
	}
}

this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}

this.fnSave = function() {
	if (!this.gfnGridValidate(this.dxGrid)) return;

	this.dxGrid.updateToDataset();

	this.dsInsert.clearData();
	this.dsUpdate.clearData();
	this.dsDelete.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "I":
				var nrow = this.dsInsert.addRow();
				this.dsInsert.setColumn(nrow, "CD_ACNTUNIT", this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(0, 6));
				this.dsInsert.setColumn(nrow, "TY_GUBUN", this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(6, 1));
				this.dsInsert.setColumn(nrow, "NO_CHASU", this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(7, 2));
				this.dsInsert.setColumn(nrow, "NO_APPRO", this.dsList.getColumn(i, "NO_APPRO"));
				this.dsInsert.setColumn(nrow, "DT_APPRO", this.dsList.getColumn(i, "DT_APPRO"));
				this.dsInsert.setColumn(nrow, "AM_APPRO", this.dsList.getColumn(i, "AM_APPRO"));
				this.dsInsert.setColumn(nrow, "CD_GUJA", this.dsList.getColumn(i, "CD_GUJA"));
				this.dsInsert.setColumn(nrow, "DS_REMARK", this.dsList.getColumn(i, "DS_REMARK"));
				this.dsInsert.setColumn(nrow, "ID_INSERT", this.AuthClient.ID_USER);
				break;
			case "U":
				var nrow = this.dsUpdate.addRow();
				this.dsUpdate.setColumn(nrow, "CD_ACNTUNIT", this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(0, 6));
				this.dsUpdate.setColumn(nrow, "TY_GUBUN", this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(6, 1));
				this.dsUpdate.setColumn(nrow, "NO_CHASU", this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(7, 2));
				this.dsUpdate.setColumn(nrow, "NO_APPRO", this.dsList.getColumn(i, "NO_APPRO"));
				this.dsUpdate.setColumn(nrow, "DT_APPRO", this.dsList.getColumn(i, "DT_APPRO"));
				this.dsUpdate.setColumn(nrow, "AM_APPRO", this.dsList.getColumn(i, "AM_APPRO"));
				this.dsUpdate.setColumn(nrow, "CD_GUJA", this.dsList.getColumn(i, "CD_GUJA"));
				this.dsUpdate.setColumn(nrow, "DS_REMARK", this.dsList.getColumn(i, "DS_REMARK"));
				this.dsUpdate.setColumn(nrow, "ID_UPDATE", this.AuthClient.ID_USER);

				break;
			case "D":
				var nrow = this.dsDelete.addRow();
				this.dsDelete.setColumn(nrow, "CD_ACNTUNIT", this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(0, 6));
				this.dsDelete.setColumn(nrow, "TY_GUBUN", this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(6, 1));
				this.dsDelete.setColumn(nrow, "NO_CHASU", this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(7, 2));
				this.dsDelete.setColumn(nrow, "NO_APPRO", this.dsList.getColumn(i, "NO_APPRO"));
				break;
		}
	}
	
	if (this.dsInsert.rowcount == 0 && this.dsUpdate.rowcount == 0 && this.dsDelete.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "insert=dsInsert update=dsUpdate delete=dsDelete";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

this.fnPrint = function() {

}

/************************************************************************
 * Validate
 ************************************************************************/
this.fnSelectValidation = function() {
	var validate = true;
	if (this.gfnIsNull(this.dsSearch.getColumn(0, "CD_ACNTUNIT"))) {
		this.fnVaidateCallback = function() {
			this.ccfCD_ACNTUNIT.form.CDTextBox.setFocus();
		}
		this.gfnAlert("사업지코드가 입력되지 않았습니다.", "fnVaidateCallback");
	}
	return validate;
}

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
this.fnCallback = function(svcID, errorCode, errorMsg) {
	if(svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);
		
		if (this.dsList.rowcount > 0)
			this.btnPayback.set_enable(true);
		else
			this.btnPayback.set_enable(false);
	}
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		}
		else {
			this.gfnAlert(errorMsg);
		}
	}
}
 
/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	if (id == "ccfCD_ACNTUNIT") {
		dsUserParam.setColumn(nrow, "CD_DEPT", this.AuthClient.CD_DEPT);
		dsUserParam.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
		dsUserParam.setColumn(nrow, "ID_GROUP", this.AuthClient.CD_CORP);
		dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
	}
	return true;
};


/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
this.fnGrid_BeforeUserDataSetParam = function(id, dsUserParam, nrow){
	switch(id) {
		case "DRX_CFAccount_CodeFind":
			dsUserParam.setColumn(nrow, "CD_ACNTUNIT", this.dsSearch.getColumn(0, "CD_ACNTUNIT"));
			break;
		default:
			break;
	}		
	return true;
};

this.dxGrid_oncelldblclick = function(obj:nexacro.Grid,e:nexacro.GridClickEventInfo) {
	if (!this.gfnGridIsRow(this.dxGrid)) return;

	var colnm = this.gfnGridGetBindColumnNameByIndex(obj, e.col);
	if (colnm == "DT_APPRO" || colnm == "CD_GUJA")
		return;
		
	this.fnPayback();
};

/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo) {
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);
	}
};

this.fnPayback = function() {
	if (!this.gfnGridIsRow(this.dxGrid)) return;
	
	var row = this.dsList.rowposition;
	
	var param = {};
	param.CD_ACNTUNIT = this.dsSearch.getColumn(0, "CD_ACNTUNIT");
	param.DS_ACNTUNIT = this.dsSearch.getColumn(0, "DS_ACNTUNIT");
	param.NO_APPRO = this.dsList.getColumn(row, "NO_APPRO");
	param.DT_APPRO = this.dsList.getColumn(row, "DT_APPRO");
	param.AM_APPRO = nexacro.toNumber(this.dsList.getColumn(row, "AM_APPRO"));
	param.CD_GUJA = this.dsList.getColumn(row, "CD_GUJA");
	param.DS_BANK = this.dsList.getColumn(row, "DS_BANK");
	param.DS_REMARK = this.dsList.getColumn(row, "DS_REMARK");
	param.YN_BANJEA = this.dsList.getColumn(row, "TY_STATUS");

	this.gfnFormOpen("DRC", "DRC_ADDUPBACK", "", param);
}
]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DRCPR_ADDUP_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">insert</Col>
            <Col id="SP">DRCPR_ADDUP_INSERT</Col>
          </Row>
          <Row>
            <Col id="TARGET">update</Col>
            <Col id="SP">DRCPR_ADDUP_UPDATE</Col>
          </Row>
          <Row>
            <Col id="TARGET">delete</Col>
            <Col id="SP">DRCPR_ADDUP_DELETE</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_ACNTUNIT" type="STRING" size="256"/>
          <Column id="DS_ACNTUNIT" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CD_ACNTUNIT"/>
            <Col id="DS_ACNTUNIT"/>
          </Row>
        </Rows>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfCD_ACNTUNIT.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_ACNTUNIT"/>
      <BindItem id="item1" compid="divSearch.form.ccfCD_ACNTUNIT.form.DSTextBox" propid="value" datasetid="dsSearch" columnid="DS_ACNTUNIT"/>
    </Bind>
  </Form>
</FDL>
