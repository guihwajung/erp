<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="form" width="1280" height="720" titletext="미수미결조회" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="1" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg" formscrolltype="none" text="">
          <Layouts>
            <Layout>
              <Edit id="ctxtCD_ACNTUNIT" taborder="0" left="0.0" top="10.0" width="80" height="24.0" value="" readonly="true"/>
              <Edit id="ctxtDS_ACNTUNIT" taborder="1" left="ctxtCD_ACNTUNIT:0.0" top="10.0" width="220" height="24.0" value="" readonly="true"/>
              <Static id="staCD_CORP" taborder="2" text="사업지코드" left="ctxtDS_ACNTUNIT:0.0" top="10.0" width="105.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Static id="staCD_CORP00" taborder="3" text="동층호" left="ctxtDS_ACNTUNIT:0.0" top="10.0" width="105.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Edit id="ctxtNO_DONG" taborder="4" left="staCD_CORP00:0.0" top="10.0" width="50" height="24.0" value="" readonly="true" maxlength="4"/>
              <Edit id="ctxtNO_FLOOR" taborder="5" left="ctxtNO_DONG:0.0" top="10.0" width="33" height="24.0" value="" readonly="true" maxlength="2"/>
              <Edit id="ctxtNO_HO" taborder="6" left="ctxtNO_FLOOR:0.0" top="10.0" width="50" height="24.0" value="" readonly="true" maxlength="3"/>
              <Static id="staCD_CORP01" taborder="7" text="계약번호" left="ctxtNO_HO:0.0" top="10.0" width="105.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Edit id="ctxtNO_CONTRACT" taborder="8" left="staCD_CORP01:0.0" top="10.0" width="50" height="24.0" value="" readonly="true" maxlength="4"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="60" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Div id="divDataTop" taborder="1" left="0" top="0" right="0" height="330">
                <Layouts>
                  <Layout>
                    <Div id="divDataTop2" taborder="1" left="0" top="-1" right="0" height="59">
                      <Layouts>
                        <Layout>
                          <Static id="sta02" taborder="0" text="계약의 합계" left="0" top="0" right="0" height="22" cssclass="sta_TITLE_Bg"/>
                          <Static id="statxtNO_JUMIN1" taborder="1" left="99" top="29" width="270" height="30" cssclass="sta_WF_tablebg"/>
                          <Static id="statxtNO_JUMIN" taborder="2" text="공급가" left="0" top="29" width="100" height="30" cssclass="sta_WF_tablelabel"/>
                          <MaskEdit id="edtAM_TOTSUP" taborder="3" left="105" top="34" width="258" height="20" format="#,###" readonly="true"/>
                          <Static id="statxtNO_JUMIN00" taborder="4" left="467" top="29" width="270" height="30" cssclass="sta_WF_tablebg"/>
                          <MaskEdit id="edtAM_TOTVAT" taborder="5" left="473" top="34" width="258" height="20" format="#,###" readonly="true"/>
                          <Static id="statxtNO_JUMIN01" taborder="6" text="부가세" left="368" top="29" width="100" height="30" cssclass="sta_WF_tablelabel"/>
                          <Static id="statxtNO_JUMIN02" taborder="7" left="835" top="29" width="270" height="30" cssclass="sta_WF_tablebg"/>
                          <MaskEdit id="edtAM_TOTAL" taborder="8" left="841" top="34" width="258" height="20" format="#,###" readonly="true"/>
                          <Static id="statxtNO_JUMIN03" taborder="9" text="합계" left="736" top="29" width="100" height="30" cssclass="sta_WF_tablelabel"/>
                        </Layout>
                      </Layouts>
                    </Div>
                    <Grid id="objGrid" taborder="0" left="0" top="70" bottom="0" right="0" oncelldblclick="divData_divDataTop_objGrid_oncelldblclick"/>
                  </Layout>
                </Layouts>
              </Div>
              <Div id="divDataBottom" taborder="0" left="0" top="divDataTop:15" bottom="0" right="0">
                <Layouts>
                  <Layout>
                    <Static id="sta02" taborder="0" text="약정내역" left="0" top="0" right="0" height="22" cssclass="sta_TITLE_Bg"/>
                    <Grid id="objGridSub" taborder="1" left="0" top="sta02:5" bottom="0" right="0"/>
                  </Layout>
                </Layouts>
              </Div>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();
/*
this.YN_CONT = "";            //계약 여부
this.YN_ITEM = "";            //수납 여부        
this.YN_TOTCONTRACT = "";     //품목별계약("N"), 일괄계약("Y")
this.NO_CONTRACT = "";        //현재 계약품목의 약정내역

this.YN_VACNT = "";
this.CD_GUJA = "";
this.NO_GUJA = "";
this.DS_BANK = "";
*/

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	
	
	// 타화면에서 오픈시 넘어오는 파라미터 처리
	if(!this.gfnIsNull(this.getOwnerFrame().CD_ACNTUNIT)) {	
		this.dsSearch.setColumn(0, "CD_ACNTUNIT", this.getOwnerFrame().CD_ACNTUNIT);
		this.ctxtDS_ACNTUNIT.set_value(this.getOwnerFrame().DS_ACNTUNIT);
		this.dsSearch.setColumn(0, "NO_DONG", this.getOwnerFrame().NO_DONG);
		this.dsSearch.setColumn(0, "NO_FLOOR", this.getOwnerFrame().NO_FLOOR);
		this.dsSearch.setColumn(0, "NO_HO", this.getOwnerFrame().NO_HO);
		this.dsSearch.setColumn(0, "NO_UNIONMEMBER", this.getOwnerFrame().NO_UNIONMEMBER);
		this.dsSearch.setColumn(0, "NO_CONTRACT", this.getOwnerFrame().NO_CONTRACT);
		//this.YN_TOTCONTRACT = this.getOwnerFrame().YN_TOTCONTRACT;
		
		this.FormBtns.Select.click();
	}	
	
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
 	//this.FormBtns.Add.set_enable(false);
 	//this.FormBtns.Save.set_enable(false);
 	//this.FormBtns.Del.set_enable(false);
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
	//this.btnItemReceipt = this.gfnFormButtonAdd("btnItemReceipt", "fnItemReceipt");  //계약금수납
	
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.ctxtCD_ACNTUNIT = this.divSearch.form.ctxtCD_ACNTUNIT;
	this.ctxtDS_ACNTUNIT = this.divSearch.form.ctxtDS_ACNTUNIT;
	
	//this.staINFO = this.divData.form.divDataTop.form.divDataTop1.form.staINFO;
	//this.edtNO_CONTRACT = this.divData.form.divDataTop.form.divDataTop1.form.edtNO_CONTRACT;
	
	this.edtAM_TOTSUP = this.divData.form.divDataTop.form.divDataTop2.form.edtAM_TOTSUP;
	this.edtAM_TOTVAT = this.divData.form.divDataTop.form.divDataTop2.form.edtAM_TOTVAT;
	this.edtAM_TOTAL = this.divData.form.divDataTop.form.divDataTop2.form.edtAM_TOTAL;

	this.dxGrid = this.divData.form.divDataTop.form.objGrid;
	this.dxGridSub = this.divData.form.divDataBottom.form.objGridSub;
	
	//this.dxGridSub.EnterCell = "fnGridSub_EnterCell";
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {	
	// 그리드 초기화
	this.gfnGridInit(this.dxGrid, this.dsList, "DR", "DRF_RECEIPTDETAIL");	
	this.gfnGridInit(this.dxGridSub, this.dsListSub, "DR", "DRF_AGREEMENTITEM");
	
	this.dxGrid.set_selecttype("cell");	
	//this.dxGrid.addEventHandler("onselectchanged", this.fnGrid_RowCellChanged, this);
	//this.dsList.addEventHandler("canrowposchange", this.dsList_canrowposchange, this);
	
	//검색조건 변경 이벤트
	//this.dsSearch.addEventHandler("onvaluechanged", this.dsSearch_Valuechanged, this);
	
};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {	
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_ACNTUNIT", "string");
	this.dsSelect.addColumn("TY_GUBUN", "string");
	this.dsSelect.addColumn("NO_CHASU", "string");
	this.dsSelect.addColumn("NO_DONG", "string");
	this.dsSelect.addColumn("NO_FLOOR", "string");
	this.dsSelect.addColumn("NO_HO", "string");
	this.dsSelect.addColumn("NO_UNIONMEMBER", "string");
	this.dsSelect.addColumn("NO_CONTRACT", "string");
		
	this.dsInsert = new Dataset();
	this.dsInsert.addColumn("CD_ACNTUNIT", "string");
	this.dsInsert.addColumn("TY_GUBUN", "string");
	this.dsInsert.addColumn("NO_CHASU", "string");
	this.dsInsert.addColumn("NO_DONG", "string");
	this.dsInsert.addColumn("NO_FLOOR", "string");
	this.dsInsert.addColumn("NO_HO", "string");
	this.dsInsert.addColumn("NO_UNIONMEMBER", "string");
	this.dsInsert.addColumn("NO_CONTRACT", "string");
	this.dsInsert.addColumn("TY_NAPIP", "string");
	this.dsInsert.addColumn("NO_NAPCHA", "string");
	this.dsInsert.addColumn("DT_STARTAGREE", "string");
	this.dsInsert.addColumn("DT_ENDAGREE", "string");
	this.dsInsert.addColumn("AM_SUPPLY", "int");
	this.dsInsert.addColumn("AM_VAT", "int");
	this.dsInsert.addColumn("AM_TOTAL", "int");
	this.dsInsert.addColumn("ID_INSERT", "string");

	this.dsUpdate = new Dataset();
	this.dsUpdate.addColumn("CD_ACNTUNIT", "string");
	this.dsUpdate.addColumn("TY_GUBUN", "string");
	this.dsUpdate.addColumn("NO_CHASU", "string");
	this.dsUpdate.addColumn("NO_DONG", "string");
	this.dsUpdate.addColumn("NO_FLOOR", "string");
	this.dsUpdate.addColumn("NO_HO", "string");
	this.dsUpdate.addColumn("NO_UNIONMEMBER", "string");
	this.dsUpdate.addColumn("NO_CONTRACT", "string");
	this.dsUpdate.addColumn("TY_NAPIP", "string");
	this.dsUpdate.addColumn("NO_NAPCHA", "string");
	this.dsUpdate.addColumn("DT_STARTAGREE", "string");
	this.dsUpdate.addColumn("DT_ENDAGREE", "string");
	this.dsUpdate.addColumn("AM_SUPPLY", "int");
	this.dsUpdate.addColumn("AM_VAT", "int");
	this.dsUpdate.addColumn("AM_TOTAL", "int");
	this.dsUpdate.addColumn("ID_UPDATE", "string");

	this.dsDelete = new Dataset();
	this.dsDelete.addColumn("CD_ACNTUNIT", "string");
	this.dsDelete.addColumn("TY_GUBUN", "string");
	this.dsDelete.addColumn("NO_CHASU", "string");
	this.dsDelete.addColumn("NO_DONG", "string");
	this.dsDelete.addColumn("NO_FLOOR", "string");
	this.dsDelete.addColumn("NO_HO", "string");
	this.dsDelete.addColumn("NO_UNIONMEMBER", "string");
	this.dsDelete.addColumn("NO_CONTRACT", "string");
	this.dsDelete.addColumn("TY_NAPIP", "string");
	this.dsDelete.addColumn("NO_NAPCHA", "string");
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsListSub.clearData();
	this.gfnGridBeforeSelect(this.dxGridSub);

	this.dsSelect.clearData();
	this.dsSelect.addRow();
	
	this.dsSelect.setColumn(0, "CD_ACNTUNIT", this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(0, 6));
	this.dsSelect.setColumn(0, "TY_GUBUN", this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(6, 1));
	this.dsSelect.setColumn(0, "NO_CHASU", this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(7, 2));
	this.dsSelect.setColumn(0, "NO_DONG", this.dsSearch.getColumn(0, "NO_DONG"));
	this.dsSelect.setColumn(0, "NO_FLOOR", this.dsSearch.getColumn(0, "NO_FLOOR"));
	this.dsSelect.setColumn(0, "NO_HO", this.dsSearch.getColumn(0, "NO_HO"));
	this.dsSelect.setColumn(0, "NO_UNIONMEMBER", this.dsSearch.getColumn(0, "NO_UNIONMEMBER"));
	this.dsSelect.setColumn(0, "NO_CONTRACT", this.dsSearch.getColumn(0, "NO_CONTRACT"));

	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect d_select=dsSelect";
	var outData     = "dsList=select0 dsListSub=d_select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	var nrow = this.gfnGridAdd(this.dxGridSub);	
	//this.gfnSetFormStatus(this, "I");	// 폼상태 업데이트
}

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	this.gfnGridDel(this.dxGridSub);
	//this.gfnSetFormStatus(this, "D");	// 폼상태 업데이트
}

/*
 *	저장 버튼
 */
this.fnSave = function() {
	if (!this.gfnGridValidate(this.dxGridSub)) return;
	
	if (!this.fnAmountChk()) return;

	this.dxGridSub.updateToDataset();
	
	this.dsInsert.clearData();
	this.dsUpdate.clearData();
	this.dsDelete.clearData();
	
	for (var i = 0; i < this.dsListSub.rowcount; i++) {
		if(this.dsListSub.getColumn(i, "NO_NAPCHA").length != 2){
			this.gfnAlert("납입차수는 2자리로 입력하셔야 합니다.");
			return;
		}
				
		if(nexacro.replaceAll(this.gfnNvl(this.dsListSub.getColumn(i, "DT_STARTAGREE"),""), "-", "") > nexacro.replaceAll(this.gfnNvl(this.dsListSub.getColumn(i, "DT_ENDAGREE"),""), "-", "")){
			this.gfnAlert("약정종료일자는 약정시작일자보다 크거나 같아야 합니다.");
			return;
		}
	
		var flag = this.gfnGetFlag(this.dsListSub, i);
		
		var tyNapip = "";
		
		if(this.dsListSub.getColumn(i, "TY_NAPIP") == "계약금"){
			tyNapip = "C";
		}else if(this.dsListSub.getColumn(i, "TY_NAPIP") == "중도금"){
			tyNapip = "J";
		}else if(this.dsListSub.getColumn(i, "TY_NAPIP") == "잔금"){
			tyNapip = "R";
		}
		
		switch(flag) {
			case "I":
				var nrow = this.dsInsert.addRow();				
				this.dsInsert.setColumn(nrow, "CD_ACNTUNIT", this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(0, 6));
				this.dsInsert.setColumn(nrow, "TY_GUBUN", this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(6, 1));
				this.dsInsert.setColumn(nrow, "NO_CHASU", this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(7, 2));
				this.dsInsert.setColumn(nrow, "NO_DONG", this.dsSearch.getColumn(0, "NO_DONG"));
				this.dsInsert.setColumn(nrow, "NO_FLOOR", this.dsSearch.getColumn(0, "NO_FLOOR"));
				this.dsInsert.setColumn(nrow, "NO_HO", this.dsSearch.getColumn(0, "NO_HO"));
				this.dsInsert.setColumn(nrow, "NO_UNIONMEMBER", this.dsSearch.getColumn(0, "NO_UNIONMEMBER"));
				this.dsInsert.setColumn(nrow, "NO_CONTRACT", this.dsSearch.getColumn(0, "NO_CONTRACT"));
				this.dsInsert.setColumn(nrow, "TY_NAPIP", tyNapip);
				this.dsInsert.setColumn(nrow, "NO_NAPCHA", this.dsListSub.getColumn(i, "NO_NAPCHA"));
				this.dsInsert.setColumn(nrow, "DT_STARTAGREE", nexacro.replaceAll(this.gfnNvl(this.dsListSub.getColumn(i, "DT_STARTAGREE"),""), "-", ""));
				this.dsInsert.setColumn(nrow, "DT_ENDAGREE", nexacro.replaceAll(this.gfnNvl(this.dsListSub.getColumn(i, "DT_ENDAGREE"),""), "-", ""));
				this.dsInsert.setColumn(nrow, "AM_SUPPLY", this.dsListSub.getColumn(i, "AM_SUPPLY"));
				this.dsInsert.setColumn(nrow, "AM_VAT", this.dsListSub.getColumn(i, "AM_VAT"));
				this.dsInsert.setColumn(nrow, "AM_TOTAL", this.dsListSub.getColumn(i, "AM_TOTAL"));
				this.dsInsert.setColumn(nrow, "ID_INSERT", this.AuthClient.ID_USER);
				break;
				
			case "U":
				var nrow = this.dsUpdate.addRow();
				this.dsUpdate.setColumn(nrow, "CD_ACNTUNIT", this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(0, 6));
				this.dsUpdate.setColumn(nrow, "TY_GUBUN", this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(6, 1));
				this.dsUpdate.setColumn(nrow, "NO_CHASU", this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(7, 2));
				this.dsUpdate.setColumn(nrow, "NO_DONG", this.dsSearch.getColumn(0, "NO_DONG"));
				this.dsUpdate.setColumn(nrow, "NO_FLOOR", this.dsSearch.getColumn(0, "NO_FLOOR"));
				this.dsUpdate.setColumn(nrow, "NO_HO", this.dsSearch.getColumn(0, "NO_HO"));
				this.dsUpdate.setColumn(nrow, "NO_UNIONMEMBER", this.dsSearch.getColumn(0, "NO_UNIONMEMBER"));
				this.dsUpdate.setColumn(nrow, "NO_CONTRACT", this.dsSearch.getColumn(0, "NO_CONTRACT"));
				this.dsUpdate.setColumn(nrow, "TY_NAPIP", tyNapip);
				this.dsUpdate.setColumn(nrow, "NO_NAPCHA", this.dsListSub.getColumn(i, "NO_NAPCHA"));
				this.dsUpdate.setColumn(nrow, "DT_STARTAGREE", nexacro.replaceAll(this.gfnNvl(this.dsListSub.getColumn(i, "DT_STARTAGREE"),""), "-", ""));
				this.dsUpdate.setColumn(nrow, "DT_ENDAGREE", nexacro.replaceAll(this.gfnNvl(this.dsListSub.getColumn(i, "DT_ENDAGREE"),""), "-", ""));
				this.dsUpdate.setColumn(nrow, "AM_SUPPLY", this.dsListSub.getColumn(i, "AM_SUPPLY"));
				this.dsUpdate.setColumn(nrow, "AM_VAT", this.dsListSub.getColumn(i, "AM_VAT"));
				this.dsUpdate.setColumn(nrow, "AM_TOTAL", this.dsListSub.getColumn(i, "AM_TOTAL"));
				this.dsUpdate.setColumn(nrow, "ID_UPDATE", this.AuthClient.ID_USER);
				break;
				
			case "D":
				var nrow = this.dsDelete.addRow();
				this.dsDelete.setColumn(nrow, "CD_ACNTUNIT", this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(0, 6));
				this.dsDelete.setColumn(nrow, "TY_GUBUN", this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(6, 1));
				this.dsDelete.setColumn(nrow, "NO_CHASU", this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(7, 2));
				this.dsDelete.setColumn(nrow, "NO_DONG", this.dsSearch.getColumn(0, "NO_DONG"));
				this.dsDelete.setColumn(nrow, "NO_FLOOR", this.dsSearch.getColumn(0, "NO_FLOOR"));
				this.dsDelete.setColumn(nrow, "NO_HO", this.dsSearch.getColumn(0, "NO_HO"));
				this.dsDelete.setColumn(nrow, "NO_UNIONMEMBER", this.dsSearch.getColumn(0, "NO_UNIONMEMBER"));
				this.dsDelete.setColumn(nrow, "NO_CONTRACT", this.dsSearch.getColumn(0, "NO_CONTRACT"));
				this.dsDelete.setColumn(nrow, "TY_NAPIP", tyNapip);
				this.dsDelete.setColumn(nrow, "NO_NAPCHA", this.dsListSub.getColumn(i, "NO_NAPCHA"));
				break;
		}
	}
	
	if (this.dsInsert.rowcount == 0 && this.dsUpdate.rowcount == 0 && this.dsDelete.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "insert=dsInsert update=dsUpdate delete=dsDelete";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

// 저장전 약정금,공급가,부가세 체크
this.fnAmountChk = function()
{		
	var AM_TOTSUPPLY = 0;	// 공급가
	var AM_TOTVAT = 0;		// 부가세
	var AM_TOTAL = 0;		// 약정금
	
	for (var i = 0; i < this.dsListSub.rowcount; i++) {
		AM_TOTSUPPLY = AM_TOTSUPPLY + this.dsListSub.getColumn(i, "AM_SUPPLY");
		AM_TOTVAT = AM_TOTVAT + this.dsListSub.getColumn(i, "AM_VAT");		
		AM_TOTAL = AM_TOTAL + this.dsListSub.getColumn(i, "AM_TOTAL");		
	}
		
	if(AM_TOTSUPPLY > this.edtAM_TOTSUP.value){
		this.gfnAlert("공급가가 잘못되었습니다.");
		return false;
	}else if(AM_TOTVAT > this.edtAM_TOTVAT.value){
		this.gfnAlert("부가세가 잘못되었습니다.");
		return false;
	}else if(AM_TOTAL > this.edtAM_TOTAL.value){
		this.gfnAlert("합계가 잘못되었습니다.");
		return false;
	}
	return true;
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {
	var validate = true;
	
		
	return validate;
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		//this.fnSetButton();
		this.gfnGridAfterSelect(this.dxGrid);
		
		this.gfnGridAfterSelect(this.dxGridSub);
		
		
		if(this.dsList.rowcount > 0){
			this.dsSearch.setColumn(0, "NO_CONTRACT", this.dsList.getColumn(this.dsList.rowposition, "NO_CONTRACT"));
			
			var AM_SUP = 0;
			var AM_VAT = 0;
			var AM_TOT = 0;
			
			for (var i = 0; i < this.dsList.rowcount; i++) {
				AM_SUP = AM_SUP + this.dsList.getColumn(i, "AM_SUPPLY");
				AM_VAT = AM_VAT + this.dsList.getColumn(i, "AM_VAT");		
				AM_TOT = AM_TOT + this.dsList.getColumn(i, "AM_AMOUNT");		
			}
			
			this.dsListInfo.setColumn(0, "AM_TOTSUP", AM_SUP);
			this.dsListInfo.setColumn(0, "AM_TOTVAT", AM_VAT);
			this.dsListInfo.setColumn(0, "AM_TOTAL", AM_TOT);
		}		
	} else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
}


/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
 /*
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	if(id == "ccfCD_DEPT_SELFACNT") {
		dsUserParam.setColumn(nrow, "LV_DEPT", this.UserInfo.LEVCD_DEPT_SELFACNT);
	}
	
	if(id == "ccfCD_DEPT_ACNT") { 
		var CD_DEPT_SELFACNT = this.dsSearch.getColumn(0, "CD_DEPT_SELFACNT");
		if(this.gfnIsNull(CD_DEPT_SELFACNT)){
			this.gfnAlert("세무단위를 먼저 선택하세요.");
			return false;
		}
		
		dsUserParam.setColumn(nrow, "CD_DEPT_SELFACNT", this.dsSearch.getColumn(0, "CD_DEPT_SELFACNT"));
		dsUserParam.setColumn(nrow, "CD_DEPT_UPPER", this.UserInfo.LEVCD_DEPT_SELFACNT);
	}		
		
	return true;
};


this.fnAfterCDTextChanged = function(id, codeFindData) {
	var arrData = codeFindData;
	if(id == "ccfCD_DEPT_SELFACNT") {
		//this.gfnSetFormStatus(this, "I");
		this.ccfCD_DEPT_ACNT.form.fnCodeFindClear();
		
	}else if(id == "ccfCD_DEPT_ACNT") {
		//this.gfnSetFormStatus(this, "I");
	}
}
*/
/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
/*
this.fnGrid_RowCellChanged = function(obj:nexacro.Grid,e:nexacro.GridSelectEventInfo)
{
    if ((obj.oldrow > -1 && obj.oldrow == e.row)
		|| (obj.oldrow == -1 && e.oldrow != e.row)) {
		
		if(this.FormInfo.TY_AUTH == "R") { return; }
		
		this.edtNO_CONTRACT.set_value(this.dsList.getColumn(e.row, "NO_CONTRACT"));
		this.NO_CONTRACT = this.dsList.getColumn(e.row, "NO_CONTRACT");
		
		// 마스터 그리드 클릭 이벤트(디테일 그리드 조회)
		this.FormBtns.SubSelect.click();
		obj.oldrow = -1;
	}
};


this.dsList_canrowposchange = function(obj:nexacro.NormalDataset,e:nexacro.DSRowPosChangeEventInfo) {
	var can_rowchange = true;
	for (var i = 0; i < this.dsListSub.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsListSub, i);
		if (flag == "I" || flag == "U" || flag == "D") {
			can_rowchange = false;
			break;
		}
	}
	if(!can_rowchange) {
		this._row = e.newrow;
		this.gfnConfirm("변경된 데이터가 있습니다.\r\n계속 진행하시겠습니까?", "dsList_canrowposchange_callback");
	}
	return can_rowchange;
}

this.dsList_canrowposchange_callback = function(strId, val) 
{
	if(val == true) {
		this.dsList.set_enableevent(false);
		this.dsList.set_rowposition(this._row);
		this.dsList.set_enableevent(true);
	}	
}


this.fnGridSub_EnterCell = function(obj:nexacro.Grid, row, cell) { 
	if(this.FormInfo.TY_AUTH == "R"){
		return false;
	}

	var colnm = this.gfnGridGetBindColumnNameByIndex(obj, cell);

	
	var flag = this.gfnGetFlag(this.dsListSub, row);	

	if(flag == "I"){
		if(colnm == "RT_DIVISION"){
			if(this.dsListSub.getColumn(row, "TY_NAPIP") == "잔금"){
				return false;
			}
		}else if(colnm == "AM_TOTAL"){
			return false;
		}
	}else{
		if(colnm == "TY_NAPIP" || colnm == "NO_NAPCHA" || colnm == "AM_TOTAL"){
			return false;
		}else if(colnm == "RT_DIVISION"){
			if(this.dsListSub.getColumn(row, "TY_NAPIP") == "잔금"){
				return false;
			}
		}
	}

}
*/

/************************************************************************
 * 기타 이벤트
 ************************************************************************/


/************************************************************************
 * 서브 버튼 이벤트
 ************************************************************************/
/*
this.fnSelectSub = function() {

	if (this.dxGrid.rowcount == 0 || this.dxGrid.currentrow < 0) return false;
	
	this.dsListSub.clearData();
	this.gfnGridBeforeSelect(this.dxGridSub);
	
	this.dsSelectSub.clearData();
	this.dsSelectSub.addRow();
	
	this.dsSelectSub.setColumn(0, "CD_ACNTUNIT", this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(0, 6));
	this.dsSelectSub.setColumn(0, "TY_GUBUN", this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(6, 1));
	this.dsSelectSub.setColumn(0, "NO_CHASU", this.dsSearch.getColumn(0, "CD_ACNTUNIT").substr(7, 2));
	this.dsSelectSub.setColumn(0, "NO_DONG", this.dsSearch.getColumn(0, "NO_DONG"));
	this.dsSelectSub.setColumn(0, "NO_FLOOR", this.dsSearch.getColumn(0, "NO_FLOOR"));
	this.dsSelectSub.setColumn(0, "NO_HO", this.dsSearch.getColumn(0, "NO_HO"));
	this.dsSelectSub.setColumn(0, "NO_UNIONMEMBER", this.dsSearch.getColumn(0, "NO_UNIONMEMBER"));
	this.dsSelectSub.setColumn(0, "NO_CONTRACT", this.dsList.getColumn(this.dsList.rowposition, "NO_CONTRACT"));

	var strSvcId    = "selectSub";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "d_select=dsSelectSub";
 	var outData     = "dsListSub=d_select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
};
*/

//검색조건 변경 이벤트
this.dsSearch_Valuechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{	
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
		this.gfnGridClear(this.dxGridSub);		
	}
};

this.dsListSub_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	
	if(e.oldvalue != e.newvalue)
	{
		if(e.columnid == "NO_NAPCHA") {
			if(this.dsListSub.getColumn(e.row, "NO_NAPCHA").length == 1){
				this.dsListSub.setColumn(e.row, "NO_NAPCHA", "0" + this.dsListSub.getColumn(e.row, "NO_NAPCHA"));
			}
		}
		
		if(e.columnid == "AM_CAL" || e.columnid == "AM_SUPPLY" || e.columnid == "AM_VAT") {
			if(e.columnid == "AM_CAL"){
				this.fnSbAM_DIVISION();	//공급가,부가세 계산 
			}
			
			this.fnSbAM_Sum();
		}
	
	
		/*
		if(this.dsListSub.getColumn(e.row, "TY_NAPIP") == "잔금"){
			this.dsListSub.setColumn(e.row, "RT_DIVISION", 0);
			
			var am_supply = 0;
			var am_vat = 0;
			var am_total = 0;
			
			for(var i = 0; i < this.dsList.rowcount; i++){
				am_supply += this.dsList.getColumn(i, "AM_SUPPLY");
				am_vat += this.dsList.getColumn(i, "AM_VAT");
				am_total += this.dsList.getColumn(i, "AM_TOT");
			}
			
			var am_supply2 = 0;
			var am_vat2 = 0;
			var am_total2 = 0;
			
			for(var i = 0; i < this.dsListSub.rowcount; i++){
				if(this.dsListSub.getColumn(i, "TY_NAPIP") == "잔금"){
					continue;
				}				
				
				am_supply2 += this.dsListSub.getColumn(i, "AM_SUPPLY");
				am_vat2 += this.dsListSub.getColumn(i, "AM_VAT");
				am_total2 += this.dsListSub.getColumn(i, "AM_TOTAL");
			}
			
			this.dsListSub.setColumn(e.row, "AM_SUPPLY", am_supply - am_supply2);
			this.dsListSub.setColumn(e.row, "AM_VAT", am_vat - am_vat2);
			this.dsListSub.setColumn(e.row, "AM_TOTAL", am_total - am_total2);

		}
		
		if(e.columnid == "RT_DIVISION") {
			var rt_division = this.dsListSub.getColumn(e.row, "RT_DIVISION");
			if (rt_division > 0){
				// 약정 신규입력 시 상단그리드(계약품목)에서 선택된 깉은 계약번호가의 
				// 공급가, 부가세, 합계의 SUM에 비율을 곱하여 자동계산되도록 수정
				var no_contract = this.dsList.getColumn(this.dsList.rowposition, "NO_CONTRACT");
				var iAM_SUPPLY = 0;
				var iAM_VAT = 0;
				var iAM_TOTAL = 0;
				
				for(var i = 0; i < this.dsList.rowcount; i++){
					if(this.dsList.getColumn(i, "NO_CONTRACT") == no_contract){
						iAM_SUPPLY += this.dsList.getColumn(i, "AM_SUPPLY");
						iAM_VAT += this.dsList.getColumn(i, "AM_VAT");
						iAM_TOTAL += this.dsList.getColumn(i, "AM_TOT");
					}
				}
				
				var am_supply = Math.round(iAM_SUPPLY * rt_division / 100, 0);
				var am_total = Math.round(iAM_TOTAL * rt_division / 100, 0);
				var am_vat = am_total - am_supply;
				
				this.dsListSub.setColumn(e.row, "AM_SUPPLY", am_supply);
				this.dsListSub.setColumn(e.row, "AM_VAT", am_vat);
				this.dsListSub.setColumn(e.row, "AM_TOTAL", am_total);
				
				this.fnSbAM_Sum();
			}
		}else if(e.columnid == "AM_SUPPLY" || e.columnid == "AM_VAT") {
			this.fnSbAM_Sum();
		}else if(e.columnid == "DT_STARTAGREE") {
			if(nexacro.replaceAll(this.dsListSub.getColumn(e.row, "DT_STARTAGREE"), "-", "").length == 8){
				this.dsListSub.setColumn(e.row, "DT_ENDAGREE", this.dsListSub.getColumn(e.row, "DT_STARTAGREE"));
			}
		}else if(e.columnid == "NO_NAPCHA") {
			if(this.dsListSub.getColumn(e.row, "NO_NAPCHA").length == 1){
				this.dsListSub.setColumn(e.row, "NO_NAPCHA", "0" + this.dsListSub.getColumn(e.row, "NO_NAPCHA"));
			}
		}
		*/
	}
};

// 공급가,부가세,약정금 합산
 this.fnSbAM_Sum = function() {
	if(this.dsListSub.rowcount < 1) return;
	
	var nRow = this.dsListSub.rowposition;
	this.dsListSub.setColumn(nRow, "AM_TOTAL", this.dsListSub.getColumn(nRow, "AM_SUPPLY") + this.dsListSub.getColumn(nRow, "AM_VAT"));		
}

// 공급가,부가세,약정금 합산
 this.fnSbAM_DIVISION = function() {
	if(this.dsListSub.rowcount < 1) return;
	
	var nRow = this.dsListSub.rowposition;
	
	var _ucTOTAL =   this.dsListSub.getColumn(nRow, "AM_CAL");
	
	if(_ucTOTAL > 0){
		var _AM_SUPPLY;
		var _AM_VAT;

		var gap_Supply;
		var gap_vat;

		var am_totalSupply = 0;
		var am_totalVat = 0;

		//공급가, 부가세 구하기
		_AM_SUPPLY = Math.floor(nexacro.toNumber(_ucTOTAL, 0) * 10 / 11);
		_AM_VAT = nexacro.toNumber(_ucTOTAL, 0) - _AM_SUPPLY;
		
		this.dsListSub.setColumn(nRow, "AM_SUPPLY", _AM_SUPPLY);
		this.dsListSub.setColumn(nRow, "AM_VAT", _AM_VAT);
		
		if(this.dsListSub.getColumn(nRow, "TY_NAPIP") == "잔금"){
			for(var i = 0; i < this.dsListSub.rowcount; i++){
				am_totalSupply += this.dsListSub.getColumn(i, "AM_SUPPLY");
				am_totalVat += this.dsListSub.getColumn(i, "AM_VAT");
			}
			
			
			gap_Supply = this.dsList.getColumn(this.dsList.rowposition, "AM_SUPPLY") - am_totalSupply;
			gap_vat = this.dsList.getColumn(this.dsList.rowposition, "AM_VAT") - am_totalVat;

			_AM_SUPPLY += gap_Supply;
			_AM_VAT += gap_vat;
		}
		
		this.dsListSub.setColumn(nRow, "AM_SUPPLY", _AM_SUPPLY);
		this.dsListSub.setColumn(nRow, "AM_VAT", _AM_VAT);		
	}	

}]]></Script>
    <Objects>
      <Dataset id="dsList" onrowposchanged="dsList_onrowposchanged"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DRFPR_ITEMCONTRACT_SELECT2</Col>
          </Row>
          <Row>
            <Col id="TARGET">d_select</Col>
            <Col id="SP">DRFPR_CONTRACTOR_ITEM_AGREEMENT_SELECT2</Col>
          </Row>
          <Row>
            <Col id="SP">DRFPR_CONTRACTOR_ITEM_AGREEMENT_INSERT</Col>
            <Col id="TARGET">insert</Col>
          </Row>
          <Row>
            <Col id="SP">DRFPR_CONTRACTOR_ITEM_AGREEMENT_UPDATE</Col>
            <Col id="TARGET">update</Col>
          </Row>
          <Row>
            <Col id="SP">DRFPR_CONTRACTOR_ITEM_AGREEMENT_DELETE</Col>
            <Col id="TARGET">delete</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsListSub" onvaluechanged="dsListSub_onvaluechanged"/>
      <Dataset id="dsSearch">
        <ColumnInfo>
          <Column id="CD_ACNTUNIT" type="STRING" size="256"/>
          <Column id="NO_DONG" type="STRING" size="256"/>
          <Column id="NO_FLOOR" type="STRING" size="256"/>
          <Column id="NO_HO" type="STRING" size="256"/>
          <Column id="NO_UNIONMEMBER" type="STRING" size="256"/>
          <Column id="NO_CONTRACT" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CD_ACNTUNIT"/>
            <Col id="NO_DONG"/>
            <Col id="NO_FLOOR"/>
            <Col id="NO_HO"/>
            <Col id="NO_UNIONMEMBER"/>
            <Col id="NO_CONTRACT"/>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsListInfo">
        <ColumnInfo>
          <Column id="AM_TOTSUP" type="STRING" size="256"/>
          <Column id="AM_TOTVAT" type="STRING" size="256"/>
          <Column id="AM_TOTAL" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="AM_TOTSUP"/>
            <Col id="AM_TOTVAT"/>
            <Col id="AM_TOTAL"/>
          </Row>
        </Rows>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ctxtCD_ACNTUNIT" propid="value" datasetid="dsSearch" columnid="CD_ACNTUNIT"/>
      <BindItem id="item1" compid="divSearch.form.ctxtNO_DONG" propid="value" datasetid="dsSearch" columnid="NO_DONG"/>
      <BindItem id="item2" compid="divSearch.form.ctxtNO_FLOOR" propid="value" datasetid="dsSearch" columnid="NO_FLOOR"/>
      <BindItem id="item3" compid="divSearch.form.ctxtNO_HO" propid="value" datasetid="dsSearch" columnid="NO_HO"/>
      <BindItem id="item6" compid="divData.form.divDataTop.form.divDataTop2.form.edtAM_TOTSUP" propid="value" datasetid="dsListInfo" columnid="AM_TOTSUP"/>
      <BindItem id="item7" compid="divData.form.divDataTop.form.divDataTop2.form.edtAM_TOTVAT" propid="value" datasetid="dsListInfo" columnid="AM_TOTVAT"/>
      <BindItem id="item12" compid="divData.form.divDataTop.form.divDataTop2.form.edtAM_TOTAL" propid="value" datasetid="dsListInfo" columnid="AM_TOTAL"/>
      <BindItem id="item5" compid="divSearch.form.ctxtNO_CONTRACT" propid="value" datasetid="dsSearch" columnid="NO_CONTRACT"/>
    </Bind>
  </Form>
</FDL>
