<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="New Form" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg" formscrolltype="none">
          <Layouts>
            <Layout>
              <Static id="staCD_SITE" taborder="3" text="현장코드" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfCD_SITE" CodeFindName="DBX_CFMAINSITE" CDTextWidth="70" taborder="0" left="staCD_SITE:0.0" top="10.0" width="300" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Static id="staTITLE" taborder="0" text="ELEV정보" left="0" top="0" width="100%" height="25" cssclass="sta_TITLE_Bg"/>
              <Grid id="objGrid" taborder="0" left="0" top="staTITLE:5" bottom="0" right="0"/>
              <Button id="btnFileDownload" taborder="2" text="엑셀자료올리기" right="0" top="5" width="120" height="24" onclick="divData_divDataBottom_btnFileDownload_onclick"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	this.fileConfig = this.gfnGetFileConfig(); //엑셀업로드	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	if( this.FormInfo.ID_GROUP == "6" || this.FormInfo.ID_GROUP == "C" ){
		this.dsSearch.setColumn(0, "CD_SITE", this.AuthClient.CD_DEPT);
		this.ccfCD_SITE.form.DSTextBox.set_value(this.AuthClient.DS_DEPT);
		this.ccfCD_SITE.form.set_readonly(true);
		
		if(this.gfnIsNull(this.getOwnerFrame().CF_CD_SITE) ) {
			this.FormBtns.Select.click();
		}
	}	
	if(!this.gfnIsNull(this.getOwnerFrame().CF_CD_SITE)) {
		this.dsSearch.setColumn(0, "CD_SITE", this.getOwnerFrame().CF_CD_SITE);
		this.ccfCD_SITE.form.DSTextBox.set_value(this.getOwnerFrame().CF_DS_SITE);
		this.FormBtns.Select.click();
	}	
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {	
	this.ccfCD_SITE = this.divSearch.form.ccfCD_SITE;
	this.dxGrid = this.divData.form.objGrid;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	this.ccfCD_SITE.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforuserDataSetParam";	
	this.dxGrid.AfterCDTextChanged = "fnGrid_AfterCDTextChanged";	
	this.gfnGridInit(this.dxGrid, this.dsList, "DB", "DBZ_ELEV");
};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_SITE", "string");
	this.dsSelect.addColumn("DS_DONG", "string");

	this.dsInsert = new Dataset();
	this.dsInsert.addColumn("CD_SITE", "string");
	this.dsInsert.addColumn("DS_DONG", "string");
	this.dsInsert.addColumn("NO_ELEV", "string");
	this.dsInsert.addColumn("DS_ELEV", "string");

	this.dsUpdate = new Dataset();
	this.dsUpdate.addColumn("CD_SITE", "string");
	this.dsUpdate.addColumn("DS_DONG", "string");
	this.dsUpdate.addColumn("NO_ELEV", "string");
	this.dsUpdate.addColumn("DS_ELEV", "string");

	this.dsDelete = new Dataset();
	this.dsDelete.addColumn("CD_SITE", "string");
	this.dsDelete.addColumn("DS_DONG", "string");
	this.dsDelete.addColumn("NO_ELEV", "string");	
};

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	
	this.dsSelect.setColumn(0, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
	this.dsSelect.setColumn(0, "DS_DONG", this.dsSearch.getColumn(0, "DS_DONG"));
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	var nrow = this.gfnGridAdd(this.dxGrid); // top (default), bottom, current
}

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}

/*
 *	저장 버튼
 */
this.fnSave = function() {
	// 그리드 필수항목 체크
	if (!this.gfnGridValidate(this.dxGrid)) return;	

	this.dxGrid.updateToDataset();
		
	this.dsInsert.clearData();
	this.dsUpdate.clearData();
	this.dsDelete.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "I":
				var nrow = this.dsInsert.addRow();
				this.dsInsert.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
				this.dsInsert.setColumn(nrow, "DS_DONG", this.dsList.getColumn(i, "DS_DONG"));
				this.dsInsert.setColumn(nrow, "NO_ELEV", this.dsList.getColumn(i, "NO_ELEV"));
				this.dsInsert.setColumn(nrow, "DS_ELEV", this.dsList.getColumn(i, "DS_ELEV"));
				break;
				
			case "U":
				var nrow = this.dsUpdate.addRow();
				this.dsUpdate.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
				this.dsUpdate.setColumn(nrow, "DS_DONG", this.dsList.getColumn(i, "DS_DONG"));
				this.dsUpdate.setColumn(nrow, "NO_ELEV", this.dsList.getColumn(i, "NO_ELEV"));
				this.dsUpdate.setColumn(nrow, "DS_ELEV", this.dsList.getColumn(i, "DS_ELEV"));
				break;
				
			case "D":
				var nrow = this.dsDelete.addRow();
				this.dsDelete.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
				this.dsDelete.setColumn(nrow, "DS_DONG", this.dsList.getColumn(i, "DS_DONG"));
				this.dsDelete.setColumn(nrow, "NO_ELEV", this.dsList.getColumn(i, "NO_ELEV"));				
				break;
		}
	}
	
	if (this.dsInsert.rowcount == 0 && this.dsUpdate.rowcount == 0 && this.dsDelete.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "insert=dsInsert update=dsUpdate delete=dsDelete";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {
	var validate = true;
	/*
	if (this.gfnIsNull(this.dsSearch.getColumn(0,"CD_SYSTEM"))) {
		validate = false;
		// Alert후 실행할 처리
		this.fnVaidateCallback = function() {
			this.ccfCD_SYSTEM.form.CDTextBox.setFocus();
		}
		this.gfnAlert("시스템을 입력하세요.", "fnVaidateCallback");
	}
	*/
	return validate;
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);	
	}
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	if (id == "ccfCD_SITE") {
		dsUserParam.setColumn(nrow, "CD_GROUP", this.AuthClient.CD_DEPT);
	}	
	return true;
}
/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
 this.fnGrid_BeforuserDataSetParam = function(id, dsUserParam, nrow)
{
	switch(id) {
		case "DBX_CFDONGHO":
			dsUserParam.setColumn(nrow, "TY_TYPE", "DONG");
			dsUserParam.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
			dsUserParam.setColumn(nrow, "VALUE1", "");
			dsUserParam.setColumn(nrow, "VALUE2", "");
		break;	
		default:
	}	
	return true;
};

 this.fnGrid_AfterCDTextChanged = function(id, codeFindData) {
	var arr = codeFindData;
	switch(id) {
		case "DBX_CFDONGHO":
 			/*this.dsList.setColumn(arr[0]["rowInfo"], "CD_CORP", arr[0]["CD_CORP"]);*/ 					
			break;
		default:
	}
};
/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화		
	}
};

this.divData_divDataBottom_btnFileDownload_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	this.gfnExcelImport("dsList", "Sheet1", "A2", "fnExcelImportCallback", "import", this);
}

this.fnExcelImportCallback = function(sImportId, dsOut, dsSheet) {
	
	for (var i = 0; i < this.dsList.getColCount(); ++i)
	{
		sColumnId = "Column" + i;
		var sColumnNm = this.gfnGridGetBindColumnNameByIndex(this.dxGrid, i);
		if (sColumnNm != "" && sColumnId != sColumnNm)
		{
			dsOut.updateColID(sColumnId, sColumnNm);
		}
	}
	
	// 양식이 일치하고 엑셀내역을 기존데이터에 Insert하지 않고
	// 엑셀내역 그대로 그리드 반영할 시 copyData
	//this.dsListSub.copyData(dsOut);
	
	this.dsList.set_enableevent(false);
	for (var i = 0; i < dsOut.rowcount; ++i) {
		var nrow = this.dsList.addRow();
		this.dsList.setColumn(nrow, this.ucFlag, "I");
		
		// 양식이 일치하는 경우 copyRow
		this.dsList.copyRow(nrow, dsOut, i);
	}
	this.dsList.set_enableevent(true);	
	this.gfnSetFormStatus(this, "I");
};]]></Script>
    <Objects>
      <Dataset id="dsList" onrowposchanged="dsList_onrowposchanged"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DBZPR_ELEV_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">insert</Col>
            <Col id="SP">DBZPR_ELEV_INSERT</Col>
          </Row>
          <Row>
            <Col id="TARGET">update</Col>
            <Col id="SP">DBZPR_ELEV_UPDATE</Col>
          </Row>
          <Row>
            <Col id="TARGET">delete</Col>
            <Col id="SP">DBZPR_ELEV_DELETE</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_SITE" type="STRING" size="256"/>
          <Column id="DS_SITE" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
      <FileDialog id="fdg00" onclose="fdg00_onclose"/>
      <FileUpTransfer id="FileUpTransfer00" onprogress="FileUpTransfer00_onprogress" onsuccess="FileUpTransfer00_onsuccess" onerror="FileUpTransfer00_onerror"/>
      <FileDownTransfer id="FileDownTransfer00"/>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfCD_SITE.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_SITE"/>
      <BindItem id="item1" compid="divSearch.form.ccfCD_SITE.form.DSTextBox" propid="value" datasetid="dsSearch" columnid="DS_SITE"/>
    </Bind>
  </Form>
</FDL>
