<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="하자보수충당금 조회" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg">
          <Layouts>
            <Layout>
              <Static id="staYM_WORK" taborder="1" text="회계년월" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="calYM_WORK" taborder="0" left="staYM_WORK:0.0" top="10.0" width="80" height="24.0" url="cmm::cmmCalMM.xfdl"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="1" left="0" top="40" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);
	// ---------------------------//
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	var today = this.gfnGetDate().substring(0,6);
	this.divSearch.form.calYM_WORK.form.TextBox.set_value(today);
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {	
	// 서브 버튼 사용
	//this.gfnUseSubBtn(true, this.divData, this.divData.form.divSplitter); // divSplitter sync
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결
 ************************************************************************/
this.fnSetExtendButton = function() {
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	
	this.calYM_WORK = this.divSearch.form.calYM_WORK;	

	this.dxGrid = this.divData.form.objGrid;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {

	this.gfnGridInit(this.dxGrid, this.dsList, "DB", "DBS_FUND");
	
	//검색조건 변경 이벤트
	this.dsSearch.addEventHandler("onvaluechanged", this.dsSearch_onvaluechanged, this);
}

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {

	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("YM_WORK", "string");

}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	
	if (!this.fnSelectValidate()) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsList.clearData();
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	this.dsSelect.setColumn(0, "YM_WORK", this.dsSearch.getColumn(0, "YM_WORK"));
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// trabsaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
	
};

/*
 *	저장 버튼
 */ 
this.fnSave = function() {

	return;

	if (!this.gfnGridValidate(this.dxGrid)) return;
	if (!this.fnSaveValidate()) return false;	
	
	this.dsSave.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "I":
			case "U":		
				var nrow = this.dsSave.addRow();
				this.dsSave.setColumn(nrow, "TY_SAVE", flag);
				this.dsSave.setColumn(nrow, "AUTH_CD_CORP", this.AuthClient.CD_CORP);
				
				break;
				
			case "D":
//				var nrow = this.dsSave.addRow();
// 				this.dsSave.setColumn(nrow, "TY_SAVE", flag);
// 				this.dsSave.setColumn(nrow, "NO_SLIPKEY", this.dsList.getColumn(i, "NO_SLIPKEY"));
// 				this.dsSave.setColumn(nrow, "CD_DEPT_BE", "");
// 				this.dsSave.setColumn(nrow, "CD_DEPT_BH", "");
// 				this.dsSave.setColumn(nrow, "DT_ACCOUNT", this.dsList.getColumn(i,"DT_ACCOUNT"));
// 				this.dsSave.setColumn(nrow, "CD_ACCOUNT", this.dsList.getColumn(i,"CD_ACCOUNT"));
// 				this.dsSave.setColumn(nrow, "TY_GUBUN", this.dsList.getColumn(i,"TY_GUBUN"));
// 				this.dsSave.setColumn(nrow, "CD_SITE", this.dsList.getColumn(i,"CD_SITE"));
// 				this.dsSave.setColumn(nrow, "TY_VENDOR", this.dsList.getColumn(i,"TY_VENDOR"));
// 				this.dsSave.setColumn(nrow, "CD_VENDOR", this.dsList.getColumn(i,"CD_VENDOR"));
// 				this.dsSave.setColumn(nrow, "DS_VENDOR", this.dsList.getColumn(i,"DS_VENDOR"));
// 				this.dsSave.setColumn(nrow, "TY_VENDOR_MI", this.dsList.getColumn(i,"TY_VENDOR_MI"));
// 				this.dsSave.setColumn(nrow, "CD_VENDOR_MI", this.dsList.getColumn(i,"CD_VENDOR_MI"));
// 				this.dsSave.setColumn(nrow, "DS_VENDOR_MI", this.dsList.getColumn(i,"DS_VENDOR_MI"));
// 				this.dsSave.setColumn(nrow, "DS_REM", this.dsList.getColumn(i,"DS_REM"));
// 				this.dsSave.setColumn(nrow, "TY_ISSUE", this.dsList.getColumn(i,"TY_ISSUE"));
// 				this.dsSave.setColumn(nrow, "AM_SUPPLY", this.dsList.getColumn(i,"AM_SUPPLY"));
// 				this.dsSave.setColumn(nrow, "AM_VAT", this.dsList.getColumn(i,"AM_VAT"));
// 				this.dsSave.setColumn(nrow, "CD_VATPROOF", this.dsList.getColumn(i,"CD_VATPROOF"));
// 				this.dsSave.setColumn(nrow, "ID_TRANS", this.AuthClient.ID_USER);				
// 				this.dsSave.setColumn(nrow, "NO_ACCOUNT", this.dsList.getColumn(i,"NO_ACCOUNT"));				
// 				this.dsSave.setColumn(nrow, "DT_REQ", this.dsList.getColumn(i,"DT_REQ"));
// 				this.dsSave.setColumn(nrow, "ISSUE_ID", this.dsList.getColumn(i,"ISSUE_ID"));
// 				this.dsSave.setColumn(nrow, "CD_CORP", this.dsList.getColumn(i,"CD_CORP"));
// 				this.dsSave.setColumn(nrow, "SEQ", i);

//				break;
		}
	}
	if (this.dsSave.rowcount == 0) return;
	
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "save=dsSave";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
};

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	
	return;
		
	var nrow = this.gfnGridAdd(this.dxGrid,"");
};

/*
 *	삭제 버튼
 */ 
this.fnDel = function() {
	return;
	
	this.gfnGridDel(this.dxGrid);
	
};
/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {
	var validate = true;
	
	if (validate && this.gfnIsNull(this.calYM_WORK.form.TextBox.value)) {
		validate = false;
		this.fnYmWorkVaidateCallback = function() {
			this.calYM_WORK.form.TextBox.setFocus();
			return false;
		}
		this.gfnAlert("회계년월을 입력하셔야 합니다.", "fnYmWorkVaidateCallback"); // gfnAlert = function (sMsgId, arrArg, sPopId, sCallback)
	}
	return validate;
};
/*
 *	저장 Validate
 */
this.fnSaveValidate = function() {
	var validate = true;
	for (var i = 1; i < this.dsList.rowcount; i++) {
		var flag = this.dsList.getColumn(i,this.ucFlag);
		if( flag == "I" ||  flag == "U" ) {
			if( nexacro.toNumber(this.dsList.getColumn(i,"AM_VAT")) > 0 && this.gfnIsNull(this.dsList.getColumn(i,"CD_VATPROOF")) ){
				validate = false;
				this.fnCdVatproofVaidateCallback = function() {
					this.dsList.set_rowposition(i);
					this.dxGrid.setCellPos( this.dxGrid.getBindCellIndex("body","CD_VATPROOF") );
					return false;
				}
				this.gfnAlert((i+1)+"행 : []는 필수입력.", "fnCdVatproofVaidateCallback");
			}
		}
	}
	return validate;
}
/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);
	}
};

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
/*
 * 조회조건 코드파인드 전
 */
this.fnBeforeUserDataSetParam = function (id, dsUserParam, nrow){
	if(id == ""){
	}
	
	return true;
};

/*
 * 그리드 코드파인드 전
 */
this.fnGrid_BeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	if (id == "") {
		dsUserParam.setColumn(nrow, "CD_SYSTEM", "DH");
		dsUserParam.setColumn(nrow, "CD_TYPE", "V10");
	}
	return true;
};

/*
 * 그리드 코드파인드 후
 */
this.fnGrid_AfterCDTextChanged = function(id, codeFindData) {
	var arrData = codeFindData;
	var rowPos = this.dsList.rowposition;

	switch(id) {
		case "DHX_CFEBILLBUY_ESERO":	//전자세금계산서번호
			if (arrData.length > 0) {
			}
		break;			
 	}
};
/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
this.dsList_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.columnid == ""){		
	}
};

/************************************************************************
 * 확장버튼 이벤트
 ************************************************************************/

/************************************************************************
 * 기타 이벤트
 ************************************************************************/
/*
 *	조회 조건 변경시 초기화
 */
this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);
	}
};]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DBSPR_FUND_SELECT</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch">
        <ColumnInfo>
          <Column id="YM_WORK" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item1" compid="divSearch.form.calYM_WORK.form.TextBox" propid="value" datasetid="dsSearch" columnid="YM_WORK"/>
    </Bind>
  </Form>
</FDL>
