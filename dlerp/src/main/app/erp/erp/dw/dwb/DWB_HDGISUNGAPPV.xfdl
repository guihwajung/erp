<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="DWB_HDGISUNGAPPV" width="1280" height="720" titletext="기성승인작업(본사)" onload="DWB_HDGISUNGAPPV_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="1" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg" text="">
          <Layouts>
            <Layout>
              <Static id="staCD_SITE" taborder="3" text="현장코드" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Div id="ccfCD_SITE" CodeFindName="DZX_CFSITE" CDTextWidth="80" taborder="0" left="staCD_SITE:0.0" top="10.0" width="250" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
              <Combo id="ccboNO_DGR" taborder="1" left="ccfCD_SITE:0.0" top="10.0" width="80" height="24.0" innerdataset="dsNO_DGR" codecolumn="NO_DGR" datacolumn="DS_DGR" index="-1" text="" value=""/>
              <Static id="staYM_WORK" taborder="1" text="기성년월" left="ccboNO_DGR:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ctclYM_WORK" taborder="2" left="staYM_WORK:0.0" top="10.0" width="80" height="24.0" dateformat="yyyy-mm" editformat="yyyymm" url="cmm::cmmCalMM.xfdl"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg" ondragmove="divData_ondragmove">
          <Layouts>
            <Layout>
              <Div id="divDataLeft" taborder="0" left="0" top="0" bottom="3" right="8">
                <Layouts>
                  <Layout>
                    <Static id="sta01" taborder="1" left="0" top="-20" width="100.00%" height="22" cssclass="sta_TITLE_Bg"/>
                    <Grid id="objGrid" taborder="0" left="0" top="sta01:5" bottom="0" right="10" oncelldblclick="divData_divDataLeft_objGrid_oncelldblclick">
                      <Formats>
                        <Format id="default"/>
                      </Formats>
                    </Grid>
                  </Layout>
                </Layouts>
              </Div>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DWBPR_HDGISUNGAPPV_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">d_select</Col>
            <Col id="SP">DWBPR_HDGISUNGMONTHDTL_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">combo</Col>
            <Col id="SP">DWBPR_HDGISUNGMONTH_MAX_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">appr</Col>
            <Col id="SP">DWBPR_HDGISUNGAPPV_CONFIRM_OK</Col>
          </Row>
          <Row>
            <Col id="TARGET">cancel</Col>
            <Col id="SP">DWBPR_HDGISUNGAPPV_CONFIRM_CANCEL</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsListSub"/>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_SITE" type="STRING" size="256"/>
          <Column id="YM_WORK" type="STRING" size="256"/>
          <Column id="NO_DGR" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CD_SITE"/>
            <Col id="YM_WORK"/>
            <Col id="NO_DGR"/>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsNO_DGR">
        <ColumnInfo>
          <Column id="NO_DGR" type="STRING" size="256"/>
          <Column id="DS_DGR" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
      <Dataset id="dsListSubCal">
        <ColumnInfo>
          <Column id="DT_HDGISUNG" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfCD_SITE.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_SITE"/>
      <BindItem id="item1" compid="divSearch.form.ctclYM_WORK.form.TextBox" propid="value" datasetid="dsSearch" columnid="YM_WORK"/>
      <BindItem id="item2" compid="divSearch.form.ccboNO_DGR" propid="value" datasetid="dsSearch" columnid="NO_DGR"/>
    </Bind>
    <Script type="xscript5.1"><![CDATA[this.DWB_HDGISUNGAPPV_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
   // -- 필수 -------------------//
   this.gfnFormOnLoad(this);   
   this.gfnFormInfo(this);      
   // ---------------------------//
   
   this.fnSetButton();
   this.fnSetExtendButton();
   this.fnSetVariable();
   this.fnSetEvent();
   this.fnSetParameter();
   
   this.fnSetCombo();

   var today = this.gfnGetDate();
   this.dsSearch.setColumn(0, "YM_WORK", today.substr(0,6));

	// 기성차수 조회조건 보이기/숨기기
	this.YN_DGR = this.gfnGetConfig("DW" , "YN_DGR");
	if(this.YN_DGR != "Y")
	{
		this.divSearch.form.ccboNO_DGR.set_width(0);
		this.divSearch.form.ccboNO_DGR.set_readonly(true);
		this.divSearch.form.resetScroll();
	}
	else if(this.YN_DGR == "Y")
	{
		this.divSearch.form.ccboNO_DGR.set_width(100);
		this.divSearch.form.ccboNO_DGR.set_readonly(false);
		this.divSearch.form.resetScroll();
	}
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 ************************************************************************/
this.fnSetButton = function() {
   // 서브 버튼 사용
   //this.gfnUseSubBtn(true, this.divData, this.divData.form.divSplitter); // divSplitter sync
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btnAppr = this.gfnFormButtonAdd("btnAppr", "fnAppr");
	this.btnCancel = this.gfnFormButtonAdd("btnCancel", "fnCancel");
	this.btnDetail = this.gfnFormButtonAdd("btnDetail", "fnDetail");
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
   this.ccfCD_SITE = this.divSearch.form.ccfCD_SITE;
   this.ctclYM_WORK = this.divSearch.form.ctclYM_WORK;

   this.dxGrid = this.divData.form.divDataLeft.form.objGrid;
   /*this.dxGridSub = this.divData.form.divDataRight.form.objGridSub;*/
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {   

   this.gfnGridInit(this.dxGrid, this.dsList, "DW", "DWB_HDGISUNGAPPV_M");
   
   this.dxGrid.set_selecttype("cell");   
   this.dxGrid.addEventHandler("onselectchanged", this.fnGrid_RowCellChanged, this);
   this.dsList.addEventHandler("canrowposchange", this.dsList_canrowposchange, this);
      
   /*this.gfnGridInit(this.dxGridSub, this.dsListSub, "DW", "DWB_HDGISUNGAPPV_D");*/
}

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
    this.dsSelect = new Dataset();
    this.dsSelect.addColumn("CD_SITE", "string");
    this.dsSelect.addColumn("YM_WORK", "string");
    this.dsSelect.addColumn("NO_DGR", "string");
	this.dsSelect.addColumn("GR_SEARCH", "string");
	this.dsSelect.addColumn("DS_CONTMETHOD", "string");

	this.dsSelectSub = new Dataset();
	this.dsSelectSub.addColumn("CD_SITE", "string");
	this.dsSelectSub.addColumn("YM_WORK", "string");
	this.dsSelectSub.addColumn("NO_HADOCONT", "string"); 
	this.dsSelectSub.addColumn("NO_DGR", "string");
	this.dsSelectSub.addColumn("CD_VENDOR", "string");
}


/************************************************************************
 * 버튼 이벤트
 ************************************************************************/
  /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;

	this.gfnGridBeforeSelect(this.dxGrid);
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	
	this.dsSelect.setColumn(0, "CD_SITE", this.divSearch.form.ccfCD_SITE.form.CDTextBox.value);
	this.dsSelect.setColumn(0, "YM_WORK", this.divSearch.form.ctclYM_WORK.form.TextBox.value);
 	this.dsSelect.setColumn(0, "NO_DGR", this.dsSearch.getColumn(0, "NO_DGR"));
	this.dsSelect.setColumn(0, "GR_SEARCH", this.FormInfo.GR_SEARCH);
	this.dsSelect.setColumn(0, "DS_CONTMETHOD", this.FormInfo.DS_PARAM);
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}


/*
 *   입력 버튼
 */
this.fnAdd = function() {
   //this.gfnGridAdd(this.dxGrid);
}

/*
 *   삭제 버튼
 */ 
this.fnDel = function() {
   //this.gfnGridDel(this.dxGrid);
}

/*
 *   저장 버튼
 
this.fnSave = function() {

}
 */



/*
 *   엑셀 버튼
 */ 
this.fnExcel = function() {
   this.gfnExcelExport(this.dxGrid);
}

/*
 *   출력 버튼
 */
this.fnPrint = function() {
}
 
/************************************************************************
 * 서브 버튼 이벤트
 ************************************************************************/
 // 디테일 그리드 조회
this.fnSelectSub = function() {
//     if (this.dsSearch.getColumn(0,"CD_ROLE") == "") {
// 		//this.gfnAlert("Role 코드를 입력하세요.");
// 	return;
// 	}

	if (this.dxGrid.rowcount == 0 || this.dxGrid.currentrow < 0) return false;
	
	this.gfnGridBeforeSelect(this.dxGridSub);
	
	// 디테일 데이터셋 데이터 삭제
	this.dsListSub.clearData();
	
	/*
	var cd_role = this.dsList.getColumn(this.dsList.rowposition, "CD_ROLE");	
	if (this.gfnIsNull(cd_role)) {
		return false;
	}
	*/
	
	// 디테일 파라미터 데이터셋 셋팅
	this.dsSelectSub.clearData();
	this.dsSelectSub.addRow();
	this.dsSelectSub.setColumn(0, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
    this.dsSelectSub.setColumn(0, "YM_WORK", this.divSearch.form.ctclYM_WORK.form.TextBox.value);
    this.dsSelectSub.setColumn(0, "NO_HADOCONT", this.dsList.getColumn(this.dsList.rowposition, "NO_HADOCONT"));
    this.dsSelectSub.setColumn(0, "NO_DGR", this.dsSearch.getColumn(0, "NO_DGR"));
	this.dsSelectSub.setColumn(0, "CD_VENDOR", this.dsList.getColumn(this.dsList.rowposition, "CD_VENDOR"));
	
	var strSvcId    = "detail";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "d_select=dsSelectSub";
	var outData     = "dsListSub=d_select0 dsListSubCal=d_select1";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}


/************************************************************************
 * Validate
 ************************************************************************/
this.fnSelectValidate = function() {
	var validate = true;
	
// 	if (this.gfnIsNull(this.dsSearch.getColumn(0,"CD_SITE"))) {
// 		validate = false;
// 	
// 		this.fnVaidateCallback = function() {
// 			this.ccfCD_SITE.form.CDTextBox.setFocus();
// 		}
// 		this.gfnAlert("현장코드를 입력하세요.", "fnVaidateCallback");
// 	}
	
	
	if(this.gfnIsNull(this.dsSearch.getColumn(0,"YM_WORK"))){
		validate = false;
	
		this.fnVaidateCallback = function() {
			this.divSearch.form.ctclYM_WORK.form.TextBox.setFocus();
		}
		this.gfnAlert("기성년월을 입력하세요.", "fnVaidateCallback");
	}
	
	return validate;
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);	
		
		}
	else if(svcID == "detail") {
		if (errorCode == 0) {
			this.gfnGridAfterSelect(this.dxGridSub);
		} else {
			//this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "combo")
	{
		this.divSearch.form.ccboNO_DGR.set_index(0);
	}
	else if(svcID == "appr")
	{
		if (errorCode == 0) {
			this.fnafter = function(){
				this.FormBtns.Select.click();
			};
			this.gfnAlert("기성승인이 정상 처리되었습니다.", "fnafter");	
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "cancel")
	{
		if (errorCode == 0) {
			this.fnafter = function(){
				this.FormBtns.Select.click();
			};
			this.gfnAlert("승인취소가 정상 처리되었습니다.", "fnafter");
		} else {
			this.gfnAlert(errorMsg);
		}
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/

 
/************************************************************************
 * 그리드 이벤트
 ************************************************************************/

this.fnGrid_RowCellChanged = function(obj:nexacro.Grid,e:nexacro.GridSelectEventInfo)
{
    if ((obj.oldrow > -1 && obj.oldrow == e.row)
      || (obj.oldrow == -1 && e.oldrow != e.row)) {
      this.FormBtns.SubSelect.click();
      obj.oldrow = -1;
   }
};

this.dsList_canrowposchange = function(obj:nexacro.NormalDataset,e:nexacro.DSRowPosChangeEventInfo) {
   var can_rowchange = true;
   for (var i = 0; i < this.dsListSub.rowcount; i++) {
      var flag = this.gfnGetFlag(this.dsListSub, i);
      if (flag == "I" || flag == "U" || flag == "D") {
         can_rowchange = false;
      }
   }
   if(!can_rowchange) {
      this._row = e.newrow;
      this.gfnConfirm("변경된 데이터가 있습니다.\r\n계속 진행하시겠습니까?", "dsList_canrowposchange_callback");
   }
   return can_rowchange;
}



/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.fnSearchInit = function(obj,e) {
   if(e == null || (e.pretext != e.posttext)) {
      this.gfnSetFormStatus(this);
      this.gfnGridClear(this.dxGrid);
      /*this.gfnGridClear(this.dxGridSub);*/
   }
}

this.divData_ondragmove = function(obj:nexacro.Div,e:nexacro.DragEventInfo)
{
   if(e.userdata == "splitter") {
      this.divData.form.divSplitter.set_left(e.clientx);
      this.divData.form.resetScroll();
   }
};

this.divData_divSplitter_ondrag = function(obj:nexacro.Div,e:nexacro.DragEventInfo)
{
   e.set_userdata("splitter");
   return true;
};

this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
   if(e.oldvalue != e.newvalue){
	  this.gfnGridClear(this.dxGrid);
	  /*this.gfnGridClear(this.dxGridSub);*/
	  
	  if(e.columnid == "CD_SITE" || e.columnid == "YM_WORK"){
	  this.fnSetCombo();
	  }
   }
}

this.fnSetCombo = function()
{
	this.dsCombo = new Dataset();
	this.dsCombo.addColumn("CD_SITE", "string");
	this.dsCombo.addColumn("YM_WORK", "string");
	this.dsCombo.addColumn("DS_CONTMETHOD", "string");
	
	this.dsCombo.addRow();
	this.dsCombo.setColumn(0, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
	this.dsCombo.setColumn(0, "YM_WORK", this.dsSearch.getColumn(0, "YM_WORK").substr(0,6));
	this.dsCombo.setColumn(0, "DS_CONTMETHOD", this.FormInfo.DS_PARAM);

	var strSvcId    = "combo";
	var strSvcType  = "select";
	var inProc		= "_dsProc";
	var inData      = "combo=dsCombo";
	var outData     = "dsNO_DGR=combo0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc);   // 통신방법 정의 [생략가능]
}

// 아래부터는 확장버튼 이벤트
this.fnAppr = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	if(this.dsList.findRow("CHK", "1") < 0){
		this.gfnAlert("기성승인 하실 정보를 선택하시기 바랍니다.");
		return false;
	}
	
	var msg = "현장코드 : [" + this.dsSearch.getColumn(0, "CD_SITE") + "] " + this.divSearch.form.ccfCD_SITE.form.DSTextBox.text
			+ "\n기성년월 : [" + this.dsSearch.getColumn(0, "YM_WORK").substr(0,6) + "]"
			+ "\n기성승인상태가 [미승인]인 건만 [승인]처리 됩니다."
			+ "\n\n[기성승인] 하시겠습니까?";
			
	this.gfnConfirm(msg, "fnExecute", "CONFIRM");
	
	
	
	/*
	this.dsAppr = new Dataset();
	this.dsAppr.addColumn("CD_SITE", "string");
	this.dsAppr.addColumn("NO_HADOCONT", "string");
	this.dsAppr.addColumn("YM_WORK", "string");
	this.dsAppr.addColumn("ID_UPDATE", "string");
	this.dsAppr.addColumn("NO_DGR", "string");
	this.dsAppr.addColumn("CD_VENDOR", "string");

	
	var row = -1;

	while(1)
	{
		row = this.dsList.findRow("CHK", "1", row+1);
		
		if(row < 0) break;
		
		var nrow = this.dsAppr.addRow();
		this.dsAppr.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
		this.dsAppr.setColumn(nrow, "NO_HADOCONT", this.dsList.getColumn(row, "NO_HADOCONT"));
		this.dsAppr.setColumn(nrow, "YM_WORK", this.divSearch.form.ctclYM_WORK.form.TextBox.value);
		this.dsAppr.setColumn(nrow, "ID_UPDATE", this.AuthClient.ID_USER);
		this.dsAppr.setColumn(nrow, "NO_DGR", this.dsSearch.getColumn(0, "NO_DGR"));
		this.dsAppr.setColumn(nrow, "CD_VENDOR", this.dsList.getColumn(row, "CD_VENDOR"));
	};
	
	if (this.dsAppr.rowcount == 0) return;
		
	var strSvcId    = "appr";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "appr=dsAppr";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
	*/
}

this.fnCancel = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	if(this.dsList.findRow("CHK", "1") < 0){
		this.gfnAlert("승인취소 하실 정보를 선택하시기 바랍니다.");
		return false;
	}
	
	var msg = "현장코드 : [" + this.dsSearch.getColumn(0, "CD_SITE") + "] " + this.divSearch.form.ccfCD_SITE.form.DSTextBox.text
			+ "\n기성년월 : [" + this.dsSearch.getColumn(0, "YM_WORK").substr(0,6) + "]"
			+ "\n기성확정상태가 [승인]인 건만 [승인취소]처리 됩니다."
			+ "\n\n[기성승인취소] 하시겠습니까?";
			
	this.gfnConfirm(msg, "fnExecute", "CANCEL");
	
	/*
	this.dsCancel = new Dataset();
	this.dsCancel.addColumn("CD_SITE", "string");
	this.dsCancel.addColumn("NO_HADOCONT", "string");
	this.dsCancel.addColumn("YM_WORK", "string");
	this.dsCancel.addColumn("ID_UPDATE", "string");
	this.dsCancel.addColumn("NO_DGR", "string");
	this.dsCancel.addColumn("CD_VENDOR", "string");
	
	var row = -1;
	
	while(1)
	{
		row = this.dsList.findRow("CHK", "1", row + 1);
		
		if(row < 0) break;
		
		var nrow = this.dsCancel.addRow();
		this.dsCancel.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
		this.dsCancel.setColumn(nrow, "NO_HADOCONT", this.dsList.getColumn(row, "NO_HADOCONT"));
		this.dsCancel.setColumn(nrow, "YM_WORK", this.divSearch.form.ctclYM_WORK.form.TextBox.value);
		this.dsCancel.setColumn(nrow, "ID_UPDATE", this.AuthClient.ID_USER);
		this.dsCancel.setColumn(nrow, "NO_DGR", this.dsSearch.getColumn(0, "NO_DGR"));
		this.dsCancel.setColumn(nrow, "CD_VENDOR", this.dsList.getColumn(row, "CD_VENDOR"));
	};
	
	if (this.dsCancel.rowcount == 0) return;
		
	var strSvcId    = "cancel";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "cancel=dsCancel";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
	*/
}

this.fnExecute = function(ty_wrk ,val)
{
	if(val != true){
		return;
	}
	
	if(ty_wrk == "CONFIRM"){
		this.dsAppr = new Dataset();
		this.dsAppr.addColumn("CD_SITE", "string");
		this.dsAppr.addColumn("NO_HADOCONT", "string");
		this.dsAppr.addColumn("YM_WORK", "string");
		this.dsAppr.addColumn("ID_UPDATE", "string");
		this.dsAppr.addColumn("NO_DGR", "string");
		this.dsAppr.addColumn("CD_VENDOR", "string");
		this.dsAppr.addColumn("TY_LEVEL", "string");
		
		var row = -1;

		while(1)
		{
			row = this.dsList.findRow("CHK", "1", row+1);
			
			if(row < 0) break;
			
			var nrow = this.dsAppr.addRow();
			this.dsAppr.setColumn(nrow, "CD_SITE", this.dsList.getColumn(row, "CD_SITE"));
			this.dsAppr.setColumn(nrow, "NO_HADOCONT", this.dsList.getColumn(row, "NO_HADOCONT"));
			this.dsAppr.setColumn(nrow, "YM_WORK", this.divSearch.form.ctclYM_WORK.form.TextBox.value);
			this.dsAppr.setColumn(nrow, "ID_UPDATE", this.AuthClient.ID_USER);
			this.dsAppr.setColumn(nrow, "NO_DGR", this.dsSearch.getColumn(0, "NO_DGR"));
			this.dsAppr.setColumn(nrow, "CD_VENDOR", this.dsList.getColumn(row, "CD_VENDOR"));
			this.dsAppr.setColumn(nrow, "TY_LEVEL", "2");
		};
		
		if (this.dsAppr.rowcount == 0) return;
			
		var strSvcId    = "appr";
		var strSvcType  = "save";
		var inProc		= "_dsProc";
		var inData      = "appr=dsAppr";
		var outData     = "";
		var strArg      = "";
		var callBackFnc = "fnCallback";
		
		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
							strSvcType , 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
							callBackFnc); // 통신방법 정의 [생략가능]
						
	}else if(ty_wrk == "CANCEL"){
		this.dsCancel = new Dataset();
		this.dsCancel.addColumn("CD_SITE", "string");
		this.dsCancel.addColumn("NO_HADOCONT", "string");
		this.dsCancel.addColumn("YM_WORK", "string");
		this.dsCancel.addColumn("ID_UPDATE", "string");
		this.dsCancel.addColumn("NO_DGR", "string");
		this.dsCancel.addColumn("CD_VENDOR", "string");
		this.dsCancel.addColumn("TY_LEVEL", "string");
		
		var row = -1;
		
		while(1)
		{
			row = this.dsList.findRow("CHK", "1", row + 1);
			
			if(row < 0) break;
			
			var nrow = this.dsCancel.addRow();
			this.dsCancel.setColumn(nrow, "CD_SITE", this.dsList.getColumn(row, "CD_SITE"));
			this.dsCancel.setColumn(nrow, "NO_HADOCONT", this.dsList.getColumn(row, "NO_HADOCONT"));
			this.dsCancel.setColumn(nrow, "YM_WORK", this.divSearch.form.ctclYM_WORK.form.TextBox.value);
			this.dsCancel.setColumn(nrow, "ID_UPDATE", this.AuthClient.ID_USER);
			this.dsCancel.setColumn(nrow, "NO_DGR", this.dsSearch.getColumn(0, "NO_DGR"));
			this.dsCancel.setColumn(nrow, "CD_VENDOR", this.dsList.getColumn(row, "CD_VENDOR"));
			this.dsCancel.setColumn(nrow, "TY_LEVEL", "2");
		};
		
		if (this.dsCancel.rowcount == 0) return;
			
		var strSvcId    = "cancel";
		var strSvcType  = "save";
		var inProc		= "_dsProc";
		var inData      = "cancel=dsCancel";
		var outData     = "";
		var strArg      = "";
		var callBackFnc = "fnCallback";
		
		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
							strSvcType , 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
							callBackFnc); // 통신방법 정의 [생략가능]
	}
}

this.fnDetail = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	var param = {};
	var rowposition = this.dsList.rowposition;
	
	param.CD_SITE = this.dsSearch.getColumn(0, "CD_SITE");
	param.DS_SITE = this.divSearch.form.ccfCD_SITE.form.DSTextBox.text;
	param.YM_WORK = this.dsSearch.getColumn(0, "YM_WORK");
	
	if(rowposition > -1){
		param.NO_HADOCONT = this.dsList.getColumn(rowposition, "NO_HADOCONT");
		param.DS_HADOCONT = this.dsList.getColumn(rowposition, "DS_HADOCONT");
		
		param.CD_VENDOR = this.dsList.getColumn(rowposition, "CD_VENDOR");
		param.DS_VENDOR = this.dsList.getColumn(rowposition, "DS_VENDOR");
		
		
		param.DS_STATUS1 = this.dsList.getColumn(rowposition, "DS_PERMITB2B");
		param.DS_STATUS2 = this.dsList.getColumn(rowposition, "DS_PERMIT");
		param.DS_STATUS3 = this.dsList.getColumn(rowposition, "DS_PERMITPM");
		
	}
	
	param.NO_DGR = this.dsSearch.getColumn(0, "NO_DGR");
	param.DS_CONTMETHOD = this.FormInfo.DS_PARAM;
	param.TY_CONTS = this.dsList.getColumn(rowposition, "TY_CONTS");
	
	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DWB_HDGISUNGMONTH_DETAIL", "fnDialogCallback", param); 
}

this.divData_divDataLeft_objGrid_oncelldblclick = function(obj:nexacro.Grid,e:nexacro.GridClickEventInfo)
{
	this.fnDetail();
};
]]></Script>
  </Form>
</FDL>
