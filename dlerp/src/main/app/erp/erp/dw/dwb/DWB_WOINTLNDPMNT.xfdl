<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="New Form" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg" formscrolltype="none">
          <Layouts>
            <Layout>
              <Static id="staCD_SITE" taborder="0" text="현장코드" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfCD_SITE" CodeFindName="DZX_CFSITE" CDTextWidth="80" taborder="1" left="staCD_SITE:0.0" top="10.0" width="250" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
              <Static id="staYR_WORK" taborder="2" text="기준년도" left="ccfCD_SITE:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ctclYR_WORK" taborder="6" left="staYR_WORK:0.0" top="10.0" width="60" height="24.0" url="cmm::cmmCalYY.xfdl"/>
              <Static id="staNO_SEQ" taborder="4" text="대여차수" left="ctclYR_WORK:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfNO_SEQ" CodeFindName="DWX_CFWOINTLND_01" CDTextWidth="40" taborder="3" left="staNO_SEQ:0.0" top="10.0" width="250" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
              <Static id="staYM_WORK" taborder="5" text="기성년월" left="ccfNO_SEQ:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ctclYM_WORK" taborder="7" left="staYM_WORK:0.0" top="10.0" width="80" height="24.0" dateformat="yyyy-mm" editformat="yyyymm" url="cmm::cmmCalMM.xfdl" enableevent="true" enable="false"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	if(!this.gfnIsNull(this.getOwnerFrame().CD_SITE) && !this.gfnIsNull(this.getOwnerFrame().YR_WORK) 
	&& !this.gfnIsNull(this.getOwnerFrame().NO_SEQ) && !this.gfnIsNull(this.getOwnerFrame().YM_WORK))
	{
		this.dsSearch.setColumn(0, "CD_SITE", this.getOwnerFrame().CD_SITE);
		this.divSearch.form.ccfCD_SITE.form.DSTextBox.set_value(this.getOwnerFrame().DS_SITE);
		this.dsSearch.setColumn(0, "YR_WORK", this.getOwnerFrame().YR_WORK);
		this.dsSearch.setColumn(0, "NO_SEQ", this.getOwnerFrame().NO_SEQ);
		this.divSearch.form.ccfNO_SEQ.form.DSTextBox.set_value(this.getOwnerFrame().DS_RMKS);
		this.dsSearch.setColumn(0, "YM_WORK", this.getOwnerFrame().YM_WORK);
		
		this.FormBtns.Select.click();
	}
	else
	{
		var today = this.gfnGetDate();
		this.dsSearch.setColumn(0, "YR_WORK", today.substr(0,4));
	}
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
	//this.FormBtns.Add.set_enable(false);
	//this.FormBtns.Del.set_enable(false);
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btnSlipIssue = this.gfnFormButtonAdd("btnSlipIssue", "fnSlipIssue");
	this.btnSlipSearch = this.gfnFormButtonAdd("btnSlipSearch", "fnSlipSearch");
	this.btnSlipCancel = this.gfnFormButtonAdd("btnSlipCancel", "fnSlipCancel");
	this.btnSlipIssueSap = this.gfnFormButtonAdd("btnSlipIssueSap", "fnSlipIssueSap");
	this.btnSlipCancelSap = this.gfnFormButtonAdd("btnSlipCancelSap", "fnSlipCancelSap");
	
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {	
	this.ccfCD_SITE = this.divSearch.form.ccfCD_SITE;
	this.ccfNO_SEQ = this.divSearch.form.ccfNO_SEQ;
	this.ctclYR_WORK = this.divSearch.form.ctclYR_WORK;
	
	this.dxGrid = this.divData.form.objGrid;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	this.ccfNO_SEQ.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.ccfNO_SEQ.AfterCDTextChanged = "ccfNO_SEQ_AfterCDTextChanged";

	// 그리드 초기화
	this.gfnGridInit(this.dxGrid, this.dsList, "DW", "DWB_WOINTLNDPMNT");

	// row 수정가능 여부
	this.dxGrid.EnterCell = "fnGrid_EnterCell";
};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("TY_WRK", "string");
	this.dsSelect.addColumn("YR_WORK", "string");
	this.dsSelect.addColumn("NO_SEQ", "string");
	this.dsSelect.addColumn("CD_SITE", "string");
	this.dsSelect.addColumn("YM_WORK", "string");
	
	this.dsSave = new Dataset();
	this.dsSave.addColumn("TY_WRK", "string");
	this.dsSave.addColumn("ID_USER", "string");
	this.dsSave.addColumn("YR_WORK", "string");
	this.dsSave.addColumn("NO_SEQ", "string");
	this.dsSave.addColumn("CD_VENDOR", "string");
	this.dsSave.addColumn("CD_SITE", "string");
	this.dsSave.addColumn("NO_HADOCONT", "string");
	this.dsSave.addColumn("YM_WORK", "string");
	this.dsSave.addColumn("NO_DGR", "string");
	this.dsSave.addColumn("AM_PAYMENT", "bigdecimal");
	this.dsSave.addColumn("DS_RMKS", "string");
	this.dsSave.addColumn("NO_ERPKEY", "string");
	this.dsSave.addColumn("NO_SLIP", "string");
	
	this.dsExec = new Dataset();
	this.dsExec.addColumn("TY_WRK", "string");
	this.dsExec.addColumn("ID_USER", "string");
	this.dsExec.addColumn("YR_WORK", "string");
	this.dsExec.addColumn("NO_SEQ", "string");
	this.dsExec.addColumn("CD_VENDOR", "string");
	this.dsExec.addColumn("CD_SITE", "string");
	this.dsExec.addColumn("NO_HADOCONT", "string");
	this.dsExec.addColumn("YM_WORK", "string");
	this.dsExec.addColumn("NO_DGR", "string");
	this.dsExec.addColumn("CD_DEPT", "string");
	this.dsExec.addColumn("NO_SLIP", "string");
	
	this.dsSapAuto = new Dataset();
	this.dsSapAuto.addColumn("TY_WRK", "string");
	this.dsSapAuto.addColumn("CD_AUTOSLIP", "string");
	this.dsSapAuto.addColumn("NO_ERPKEY", "string");
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();

	this.dsSelect.setColumn(0, "TY_WRK", "Q");
	this.dsSelect.setColumn(0, "YR_WORK", this.dsSearch.getColumn(0, "YR_WORK").substr(0,4));
	this.dsSelect.setColumn(0, "NO_SEQ", this.dsSearch.getColumn(0, "NO_SEQ"));
	this.dsSelect.setColumn(0, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
	this.dsSelect.setColumn(0, "YM_WORK", this.dsSearch.getColumn(0, "YM_WORK").substr(0,6));

	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]

}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	var nrow = this.gfnGridAdd(this.dxGrid); // top (default), bottom, current
}

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}

/*
 *	저장 버튼
 */
this.fnSave = function() {
	// 그리드 필수항목 체크
	if (!this.gfnGridValidate(this.dxGrid)) return;	

	// save SP 한개로 사용하는 경우
	this.dsSave.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "I":
			case "U":
			case "D":
				var nrow = this.dsSave.addRow();
				this.dsSave.setColumn(nrow, "TY_WRK", flag);
				this.dsSave.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
				this.dsSave.setColumn(nrow, "YR_WORK", this.dsSearch.getColumn(0, "YR_WORK"));
				this.dsSave.setColumn(nrow, "NO_SEQ", this.dsSearch.getColumn(0, "NO_SEQ"));
				this.dsSave.setColumn(nrow, "CD_VENDOR", this.dsList.getColumn(i, "CD_VENDOR"));
				this.dsSave.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
				this.dsSave.setColumn(nrow, "NO_HADOCONT", this.dsList.getColumn(i, "NO_HADOCONT"));
				this.dsSave.setColumn(nrow, "YM_WORK", this.dsSearch.getColumn(0, "YM_WORK"));
				this.dsSave.setColumn(nrow, "NO_DGR", this.dsList.getColumn(i, "NO_DGR"));
				this.dsSave.setColumn(nrow, "AM_PAYMENT", this.dsList.getColumn(i, "AM_PAYMENT"));
				this.dsSave.setColumn(nrow, "DS_RMKS", this.dsList.getColumn(i, "DS_RMKS"));
				this.dsSave.setColumn(nrow, "NO_ERPKEY", this.dsList.getColumn(i, "NO_ERPKEY"));
				this.dsSave.setColumn(nrow, "NO_SLIP", this.dsList.getColumn(i, "NO_SLIP"));				
				break;
		}
	}
		
	if (this.dsSave.rowcount == 0) return;
	
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "save=dsSave";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {
	var validate = true;

	if (this.gfnIsNull(this.dsSearch.getColumn(0, "CD_SITE"))) {
		validate = false;
		// Alert후 실행할 처리
		this.fnVaidateCallback = function() {
			this.ccfCD_SITE.form.CDTextBox.setFocus();
		}
		this.gfnAlert("현장코드를 입력하세요.", "fnVaidateCallback");
	}
	else if (this.gfnIsNull(this.dsSearch.getColumn(0, "YR_WORK"))) {
		validate = false;
		// Alert후 실행할 처리
		this.fnVaidateCallback = function() {
			this.ctclYR_WORK.form.TextBox.setFocus();
		}
		this.gfnAlert("기준년도를 입력하세요.", "fnVaidateCallback");
	}
	else if (this.gfnIsNull(this.dsSearch.getColumn(0, "NO_SEQ"))) {
		validate = false;
		// Alert후 실행할 처리
		this.fnVaidateCallback = function() {
			this.ccfNO_SEQ.form.CDTextBox.setFocus();
		}
		this.gfnAlert("대여차수를 입력하세요.", "fnVaidateCallback");
	}
	else if (this.gfnIsNull(this.dsSearch.getColumn(0, "YM_WORK"))) {
		validate = false;
		// Alert후 실행할 처리
		this.fnVaidateCallback = function() {
			this.ctclYM_WORK.form.TextBox.setFocus();
		}
		this.gfnAlert("기준년월을 입력하세요.", "fnVaidateCallback");
	}
	
	return validate;
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg, args)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);	
	}
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "exec")
	{
		if (errorCode == 0) {
			if(args == "SLPPUB")	
			{
				this.fnCMPL_callback = function()
				{
					this.FormBtns.Select.click();
				}	
				this.gfnAlert("무이자대여(반제) 전표발행 정상 처리되었습니다.", "fnCMPL_callback");
			}
			else if(args == "SLPCNC")
			{
				this.fnCNC_callback = function()
				{
					this.FormBtns.Select.click();
				}
				this.gfnAlert("무이자대여(반제) 전표취소 정상 처리되었습니다.", "fnCNC_callback");
			}
		} else {
			this.gfnAlert(errorMsg);
		}
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {

	if (id == "ccfNO_SEQ") {
		if(this.gfnIsNull(this.dsSearch.getColumn(0, "YR_WORK")))
		{
			this.gfnAlert("기준년도를 입력하세요.", "fnVaidateCallback");
			
			return false;
		}
		
		dsUserParam.setColumn(nrow, "YR_WORK", this.dsSearch.getColumn(0, "YR_WORK"));
	}
	
	return true;
}


this.ccfNO_SEQ_AfterCDTextChanged = function(id, codeFindData) {	
	var arr = codeFindData;
	
	this.divSearch.form.ccfNO_SEQ.form.DSTextBox.set_value("");
	this.dsSearch.setColumn(0, "YM_WORK", "");
	
	if(arr.length > 0)
	{
		//this.divSearch.form.ccfNO_SEQ.form.DSTextBox.set_value(arr[0]["DT_REQPERD"]);
		this.divSearch.form.ccfNO_SEQ.form.DSTextBox.set_value(arr[0]["DS_RMKS"]);		
		this.dsSearch.setColumn(0, "YM_WORK", arr[0]["YM_WORK"]);
	}
	
}
/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
 this.fnGrid_EnterCell = function(obj:nexacro.Grid, row, cell) {
	// 수정가능 true, false 처리하려는 컬럼에 대해서만 return 처리할것. 
	var colnm = this.gfnGridGetBindColumnNameByIndex(this.dxGrid, cell);	// 클릭한 cell의 컬럼명
	
	// 선택 컬럼이면 return true;
	if(colnm == "CHK") return;
	
	// 클릭했을때 클릭한 cell을 수정 가능 or 불가능 상태로 만든다.
	// YN_EDIT 값이 Y일때만 수정가능상태
	if(this.dsList.getColumn(row, "YN_EDIT") == "N") {
		return false;
	}
		
}

/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
	}
};

// 조회값이 변경되었을 때. (기준년도 변경 관련되어 만든 함수)
this.dsSearch_oncolumnchanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.columnid == "YR_WORK")
	{
		if(e.oldvalue != e.newvalue)
		{
			this.dsSearch.setColumn(0, "NO_SEQ","");
			this.divSearch.form.ccfNO_SEQ.form.DSTextBox.set_value("");
			this.dsSearch.setColumn(0, "YM_WORK","");
		}
	}
};


 // 전표발행 버튼 클릭
 this.fnSlipIssue = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	// 선택된 row가 있을 경우에만 팝업을 띄움
	//if (!this.gfnGridIsRow(this.dxGrid)) { return false; }	
	
	if(this.dsList.findRow("CHK", "Y") < 0){
		this.gfnAlert("전표발행 하실 정보를 선택하시기 바랍니다.");
		return false;
	}
	
	var chkCnt = 0;
	for (var i = 0; i < this.dsList.rowcount; i++) {
		if(this.dsList.getColumn(i, "CHK") == "Y"){
			chkCnt = chkCnt + 1;
		}
	}
		
	var msg = "기준년도 : " +  this.dsSearch.getColumn(0, "YR_WORK").substr(0,4) + " 년도, 대여차수 : " + this.dsSearch.getColumn(0, "NO_SEQ") + " 차"
			+ "\n현장코드 : [" + this.dsSearch.getColumn(0, "CD_SITE") + "] " + this.ccfCD_SITE.form.DSTextBox.value
			+ "\n기성년월 : [" + this.dsSearch.getColumn(0, "YM_WORK").substr(0,6) + "]"
			+ "\n발행건수 : [" + chkCnt + "]"
			+ "\n\n무이자대여(반제) 전표발행을 하시겠습니까?";
	
	this.gfnConfirm(msg, "dsList_slipIssue_callback");
}

// 전표발행 버튼 클릭 후 callback
this.dsList_slipIssue_callback = function(strId, val) 
{
	if(val == true) {
		var tyWrk = "SLPPUB";	

		this.fnExecSlip(tyWrk);	
	}	
}
	
 // 전표조회 버튼 클릭시 팝업화면 호출
 this.fnSlipSearch = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	// 선택된 row가 있을 경우에만 팝업을 띄움
	if (!this.gfnGridIsRow(this.dxGrid)) { return false; }
	
	var param = {};
	param.NO_ERPKEY = this.dsList.getColumn(this.dsList.rowposition, "NO_ERPKEY");

	// 화면 오픈. 
	// CD_MODULE은 보통 같은 모듈에서 호출하는 경우가 많으니 this.FormInfo.CD_MODULE 사용
	// 타 모듈 화면 호출시 지정할것.	
	this.gfnFormOpen("DHA", "DHA_ERPKEY_SLIP", "", param);
}

 // 전표취소 버튼 클릭
 this.fnSlipCancel = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	
	if(this.dsList.findRow("CHK", "Y") < 0){
		this.gfnAlert("전표취소 하실 정보를 선택하시기 바랍니다.");
		return false;
	}
	
	var chkCnt = 0;
	for (var i = 0; i < this.dsList.rowcount; i++) {
		if(this.dsList.getColumn(i, "CHK") == "Y"){
			chkCnt = chkCnt + 1;
		}
	}
		
	var msg = "기준년도 : " +  this.dsSearch.getColumn(0, "YR_WORK").substr(0,4) + " 년도, 대여차수 : " + this.dsSearch.getColumn(0, "NO_SEQ") + " 차"
			+ "\n현장코드 : [" + this.dsSearch.getColumn(0, "CD_SITE") + "] " + this.ccfCD_SITE.form.DSTextBox.value
			+ "\n기성년월 : [" + this.dsSearch.getColumn(0, "YM_WORK").substr(0,6) + "]"
			+ "\n취소건수 : [" + chkCnt + "]"
			+ "\n\n무이자대여(반제) 전표취소 하시겠습니까?";
	
	this.gfnConfirm(msg, "dsList_slipCancel_callback");

}

// 전표취소 버튼 클릭 후 callback
this.dsList_slipCancel_callback = function(strId, val) 
{
	if(val == true) {
		var tyWrk = "SLPCNC";	

		this.fnExecSlip(tyWrk);	
	}	
}	


// 전표발행, 전표취소가 다건으로 변경되어 새로 만듬.
this.fnExecSlip = function(tyWrk) {
	this.dsExec.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		if(this.dsList.getColumn(i, "CHK") == "Y"){
			var nrow = this.dsExec.addRow();

			this.dsExec.setColumn(nrow, "TY_WRK", tyWrk);
			this.dsExec.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
			this.dsExec.setColumn(nrow, "YR_WORK", this.dsSearch.getColumn(0, "YR_WORK").substr(0,4));
			this.dsExec.setColumn(nrow, "NO_SEQ", this.dsSearch.getColumn(0, "NO_SEQ"));
			this.dsExec.setColumn(nrow, "CD_VENDOR", this.dsList.getColumn(i, "CD_VENDOR"));
			this.dsExec.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
			this.dsExec.setColumn(nrow, "NO_HADOCONT", this.dsList.getColumn(i, "NO_HADOCONT"));
			this.dsExec.setColumn(nrow, "YM_WORK", this.dsSearch.getColumn(0, "YM_WORK").substr(0,6));
			this.dsExec.setColumn(nrow, "NO_DGR", this.dsList.getColumn(i, "NO_DGR"));
			this.dsExec.setColumn(nrow, "CD_DEPT", this.AuthClient.CD_DEPT);
			this.dsExec.setColumn(nrow, "NO_SLIP", this.dsList.getColumn(i, "NO_SLIP"));
		}
	}
	
	if (this.dsExec.rowcount == 0) return;
	
	var strSvcId    = "exec";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "exec=dsExec";
	var outData     = "";
	var strArg      = tyWrk;
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

this.fnSlipIssueSap = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	if(this.dsList.findRow("CHK", "Y") < 0){
		this.gfnAlert("전표발행(SAP) 하실 정보를 선택하시기 바랍니다.");
		return false;
	}
	
	var chkCnt = 0;
	for (var i = 0; i < this.dsList.rowcount; i++) {
		if(this.dsList.getColumn(i, "CHK") == "Y"){
			chkCnt = chkCnt + 1;
		}
	}
	
	var msg = "기준년도 : " +  this.dsSearch.getColumn(0, "YR_WORK").substr(0,4) + " 년도, 대여차수 : " + this.dsSearch.getColumn(0, "NO_SEQ") + " 차"
			+ "\n현장코드 : [" + this.dsSearch.getColumn(0, "CD_SITE") + "] " + this.ccfCD_SITE.form.DSTextBox.value
			+ "\n기성년월 : [" + this.dsSearch.getColumn(0, "YM_WORK").substr(0,6) + "]"
			+ "\n발행건수 : [" + chkCnt + "]"
			+ "\n\n전표발행(SAP) 진행하시겠습니까?";
	
	this.gfnConfirm(msg, "fnSlipIssueSap_callback");
}

this.fnSlipIssueSap_callback = function(strID, val)
{	
	if(val == true) {
		this.dsSapAuto.clearData();
		
		var arrOut = [];
		this._cntChk = 0;
		for (var i = 0; i < this.dsList.rowcount; i++) {
			if(this.dsList.getColumn(i, "CHK") == "Y"){
				var nrow = this.dsSapAuto.addRow();

				this.dsSapAuto.setColumn(nrow, "TY_WRK", "Q");
				this.dsSapAuto.setColumn(nrow, "CD_AUTOSLIP", "DWB0005");
				this.dsSapAuto.setColumn(nrow, "NO_ERPKEY", this.dsList.getColumn(i, "NO_ERPKEY"));
				
				// 체크박스 다중건 조회 건수에 맞게 리턴 dataset 추가
				arrOut.push("dsListSap" + this._cntChk + "=sapauto" + this._cntChk);
				this["dsListSap"+this._cntChk] = new Dataset();
				this._cntChk++;
			}
		}
		
		var strSvcId    = "sapauto";
		var strSvcType  = "select";
		var inProc		= "_dsProc";
		var inData      = "sapauto=dsSapAuto";
		var outData     = arrOut.join(' ');
		var strArg      = "";
		var callBackFnc = "fnSlipIssueSap_Callback";
		
		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
							strSvcType , 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
							callBackFnc); // 통신방법 정의 [생략가능]
	}
}


this.fnSlipCancelSap = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	if(this.dsList.findRow("CHK", "Y") < 0){
		this.gfnAlert("전표취소(ERP) 하실 정보를 선택하시기 바랍니다.");
		return false;
	}
	
	var chkCnt = 0;
	for (var i = 0; i < this.dsList.rowcount; i++) {
		if(this.dsList.getColumn(i, "CHK") == "Y"){
			chkCnt = chkCnt + 1;
		}
	}
	
	var msg = "기준년도 : " +  this.dsSearch.getColumn(0, "YR_WORK").substr(0,4) + " 년도, 대여차수 : " + this.dsSearch.getColumn(0, "NO_SEQ") + " 차"
			+ "\n현장코드 : [" + this.dsSearch.getColumn(0, "CD_SITE") + "] " + this.ccfCD_SITE.form.DSTextBox.value
			+ "\n기성년월 : [" + this.dsSearch.getColumn(0, "YM_WORK").substr(0,6) + "]"
			+ "\n발행건수 : [" + chkCnt + "]"
			+ "\n\n전표취소(SAP) 진행하시겠습니까?";
	
	this.gfnConfirm(msg, "fnSlipCancelSap_callback");
}

this.fnSlipCancelSap_callback = function(strID, val)
{	
	if(val == true) {
		this.dsSapAuto.clearData();
		
		var arrOut = [];
		this._cntChk = 0;
		for (var i = 0; i < this.dsList.rowcount; i++) {
			if(this.dsList.getColumn(i, "CHK") == "Y"){
				var nrow = this.dsSapAuto.addRow();

				this.dsSapAuto.setColumn(nrow, "TY_WRK", "Q");
				this.dsSapAuto.setColumn(nrow, "CD_AUTOSLIP", "DWB0005");
				this.dsSapAuto.setColumn(nrow, "NO_ERPKEY", this.dsList.getColumn(i, "NO_ERPKEY"));
				
				// 체크박스 다중건 조회 건수에 맞게 리턴 dataset 추가
				arrOut.push("dsListSap" + this._cntChk + "=sapcancel" + this._cntChk);
				this["dsListSap"+this._cntChk] = new Dataset();
				this._cntChk++;
			}
		}
		
		var strSvcId    = "sapcancel";
		var strSvcType  = "select";
		var inProc		= "_dsProc";
		var inData      = "sapcancel=dsSapAuto";
        var outData     = arrOut.join(' ');
		var strArg      = "";
		var callBackFnc = "fnSlipIssueSap_Callback";
		
		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
							strSvcType , 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
							callBackFnc); // 통신방법 정의 [생략가능]
	}
}


this.fnSlipIssueSap_Callback = function(svcID, errorCode, errorMsg) {
	if(errorCode != 0) {
		this.gfnAlert(errorMsg);
		return false;
	}
	
	if(svcID == "sapauto") {
		// 전표발행 다중건 처리용 Dataset 생성
		var ds = new Dataset();
		ds.addColumn("NO_ERPKEY", "string");
		ds.addColumn("CD_TRADE", "string");
		ds.addColumn("ID_USER", "string");
		
		// 다중조회된 데이터셋에서 가져오기
		for(var c = 0; c < this._cntChk; c++) {
			for(var i = 0; i < this["dsListSap"+c].rowcount; i++) {
				var nrow = ds.addRow(); 
				ds.setColumn(nrow, "NO_ERPKEY", this["dsListSap"+c].getColumn(i, "NO_ERPKEY"));
				ds.setColumn(nrow, "CD_TRADE", this["dsListSap"+c].getColumn(i, "CD_TRADE"));
				ds.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
			}
		}
	
		// 전표발행 다중건 처리
		this.gfnSlipIssueDs(ds, "fnSlipIssueSap_Complete");
		
	}
	else if(svcID == "sapcancel") {
		// 전표취소(SAP) 다중건 처리용 Dataset 생성
		var ds = new Dataset();
		ds.addColumn("NO_ERPKEY", "string");
		ds.addColumn("CD_TRADE", "string");
		ds.addColumn("ID_USER", "string");
		ds.addColumn("BUKRS", "string");
		ds.addColumn("BELNR", "string");
		ds.addColumn("GJAHR", "string");      
		 
		// 다중조회된 데이터셋에서 가져오기
		for(var c = 0; c < this._cntChk; c++) {
			for(var i = 0; i < this["dsListSap"+c].rowcount; i++) {
				var nrow = ds.addRow(); 
				ds.setColumn(nrow, "NO_ERPKEY", this["dsListSap"+c].getColumn(i, "NO_ERPKEY"));
				ds.setColumn(nrow, "CD_TRADE", this["dsListSap"+c].getColumn(i, "CD_TRADE"));
				ds.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
				ds.setColumn(nrow, "BUKRS", this["dsListSap"+c].getColumn(i, "BUKRS"));
				ds.setColumn(nrow, "BELNR", this["dsListSap"+c].getColumn(i, "BELNR"));
				ds.setColumn(nrow, "GJAHR", this["dsListSap"+c].getColumn(i, "GJAHR"));
			}
		}

		// 전표취소(SAP) 다중건 처리
		this.gfnSlipCancelDs(ds, "fnSlipCancelSap_Complete");
	}
}

this.fnSlipIssueSap_Complete = function(svcID, errorCode, errorMsg) {
// 	if(errorCode != 0) {
// 		this.gfnAlert(errorMsg);
// 		return false;
// 	}
	
	this.fnSlipIssueSap_Complete_callback = function()
	{
		this.fnSelect();
	}
	
	this.gfnAlert("전표발행(SAP)가 정상처리되었습니다.", "fnSlipIssueSap_Complete_callback");
}
 
this.fnSlipCancelSap_Complete = function(svcID, errorCode, errorMsg) {
// 	if(errorCode != 0) {
// 		this.gfnAlert(errorMsg);
// 		return false;
// 	}
	
	this.fnSlipCancelSap_Complete_callback = function()
	{
		this.fnSelect();
	}
	this.gfnAlert("전표취소(SAP)가 정상처리되었습니다.", "fnSlipCancelSap_Complete_callback");
}]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DWBPR_WOINTLNDPMNT_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">save</Col>
            <Col id="SP">DWBPR_WOINTLNDPMNT_SAVE</Col>
          </Row>
          <Row>
            <Col id="TARGET">exec</Col>
            <Col id="SP">DWBPR_WOINTLNDPMNT_EXECUTE</Col>
          </Row>
          <Row>
            <Col id="TARGET">sapauto</Col>
            <Col id="SP">DWZPR_SAP_AUTOSLIP_ISSUE_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">sapcancel</Col>
            <Col id="SP">DWZPR_SAP_AUTOSLIP_CANCEL_SELECT</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged" oncolumnchanged="dsSearch_oncolumnchanged">
        <ColumnInfo>
          <Column id="CD_SITE" type="STRING" size="256"/>
          <Column id="YR_WORK" type="STRING" size="256"/>
          <Column id="NO_SEQ" type="STRING" size="256"/>
          <Column id="YM_WORK" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CD_SITE"/>
            <Col id="YR_WORK"/>
            <Col id="NO_SEQ"/>
            <Col id="YM_WORK"/>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsListSap"/>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfCD_SITE.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_SITE"/>
      <BindItem id="item1" compid="divSearch.form.ctclYR_WORK.form.TextBox" propid="value" datasetid="dsSearch" columnid="YR_WORK"/>
      <BindItem id="item2" compid="divSearch.form.ccfNO_SEQ.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="NO_SEQ"/>
      <BindItem id="item3" compid="divSearch.form.ctclYM_WORK.form.TextBox" propid="value" datasetid="dsSearch" columnid="YM_WORK"/>
    </Bind>
  </Form>
</FDL>
