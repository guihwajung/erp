<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="실행예산순번변경" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg">
          <Layouts>
            <Layout>
              <Static id="staCD_SITE" taborder="0" text="현장코드" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfCD_SITE" CodeFindName="DZX_CFSITE" CDTextWidth="80" taborder="1" left="staCD_SITE:0.0" top="10.0" width="250" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg" ondragmove="divData_ondragmove">
          <Layouts>
            <Layout>
              <Div id="divSplitter" taborder="1" left="30%" top="0" width="5" height="100%" background="skyblue" cursor="ew-resize" ondrag="divData_divSplitter_ondrag"/>
              <Div id="divDataLeft" taborder="0" left="0" top="0" bottom="0" right="divSplitter:5">
                <Layouts>
                  <Layout>
                    <Grid id="objGrid" taborder="0" left="0" top="5" bottom="0" right="0"/>
                  </Layout>
                </Layouts>
              </Div>
              <Div id="divDataRight" taborder="0" left="divSplitter:50" top="0" bottom="0" right="0">
                <Layouts>
                  <Layout>
                    <Grid id="objGridSub" taborder="0" left="0" top="5" bottom="0" right="0"/>
                  </Layout>
                </Layouts>
              </Div>
              <Button id="btnUp" taborder="3" text="▲" left="divDataLeft:15" top="34.74%" width="30" height="30" onclick="divData_btnUp_onclick"/>
              <Button id="btnDown" taborder="4" text="▼" left="divDataLeft:15" top="54.59%" width="30" height="30" onclick="divData_btnDown_onclick"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();
this.insertYn = "N";
this.cursorRow;
this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();

	// 이전 화면에서 데이터 받기.
	if(!this.gfnIsNull(this.getOwnerFrame().CD_SITE) && !this.gfnIsNull(this.getOwnerFrame().NO_SILHENG)) {
		this.dsSearch.setColumn(0, "CD_SITE", this.getOwnerFrame().CD_SITE);
		this.divSearch.form.ccfCD_SITE.form.DSTextBox.set_value(this.getOwnerFrame().DS_SITE);
	
		this.FormBtns.Select.click();
	}
	//상태값에 따라서 버튼 사용유무 변경
	this.fnSelectStatus();
	//this.divSearch_chkYN_DOKUB_onchanged(this.divSearch.form.chkYN_DOKUB, {postvalue:this.divSearch.form.chkYN_DOKUB.value});
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 ************************************************************************/
this.fnSetButton = function() {
	// 서브 버튼 사용
	//this.gfnUseSubBtn(true, this.divData, this.divData.form.divSplitter); // divSplitter sync
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결
 ************************************************************************/
this.fnSetExtendButton = function() {
	//this.btn1 = this.gfnFormButtonAdd("Detail", "fnDetail1");
	this.btn1 = this.gfnFormButtonAdd("btnExcelUp", "fnExcelUp");
	this.btn2 = this.gfnFormButtonAdd("btnSilhengTree", "fnSilhengTree");
	this.btn3 = this.gfnFormButtonAdd("btnDeleteAll", "fnDeleteAll");  
	this.btn4 = this.gfnFormButtonAdd("btnRequest", "fnRequest");  
	this.btn5 = this.gfnFormButtonAdd("btnRequestCancel", "fnRequestCancel"); 
	this.btn6 = this.gfnFormButtonAdd("btnSetSortAll", "fnSetSortAll"); 
	

};



/************************************************************************
 * 페이지 연결 : 실행예산 엑셀업로드
 ************************************************************************/
this.fnExcelUp = function() {
	var param = {};
	
	param.CD_SITE = this.dsSearch.getColumn(0, "CD_SITE");
	param.DS_SITE = this.divSearch.form.ccfCD_SITE.form.DSTextBox.text;
	
	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DWA_FROMEXCEL", "fnExcelCallback", param);
}

this.fnExcelCallback = function(){
	this.fnSelectStatus();
	this.FormBtns.Select.click();
	//this.FormBtns.SubSelect.click();
}

/************************************************************************
 * 페이지 연결 : 실행예산 전체내역
 ************************************************************************/
this.fnSilhengTree = function() {
	var param = {};
	
	param.CD_SITE = this.dsSearch.getColumn(0, "CD_SITE");
	param.DS_SITE = this.divSearch.form.ccfCD_SITE.form.DSTextBox.text;
	
	/*this.gfnFormOpen(this.FormInfo.CD_MODULE, "DWA_SILHENGREGEXCELVT", "", param);*/
	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DWA_SILHENGCOMPAREITEM", "", param);
	
}

//실행내역일괄삭제
this.fnDeleteAll = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
   var cdSite = this.dsSearch.getColumn(0, "CD_SITE");
   var dsSite = this.divSearch.form.ccfCD_SITE.form.DSTextBox.text;

   this.gfnConfirm("현장코드 : ["+cdSite+"]"+dsSite+"\r\n예산번호 : ["+noSilheng+"] 가설예산["+dsSilheng+"]\r\n실행예산내역을 일괄삭제 하시겠습니까?", "fnRunDeleteAll");
}   

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.ccfCD_SITE = this.divSearch.form.ccfCD_SITE;

	this.dxGrid = this.divData.form.divDataLeft.form.objGrid;
	this.dxGridSub = this.divData.form.divDataRight.form.objGridSub;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {	
	this.gfnGridInit(this.dxGrid, this.dsList, "DW", "DWA_SILHENGSORTTREE","DS_COST","GR_COST");
	this.dxGrid.set_selecttype("cell");
	this.dxGrid.addEventHandler("onselectchanged", this.fnGrid_RowCellChanged, this);
	
	// 트리 접는 로직.
	this.dxGrid.set_treeinitstatus("collapse,all");
	
	this.ccfCD_SITE.AfterCDTextChanged = "ccfCD_SITE_AfterCDTextChanged";	
	
	this.dxGridSub.BeforeUserDataSetParam = "fnGridSub_BeforeUserDataSetParam";
	
	this.gfnGridInit(this.dxGridSub, this.dsListSub, "DW", "DWA_SILHENGSORT");


	var qn_dokub_idx = this.dxGridSub.getBindCellIndex("body", "QN_EXDOKUB");
	var up_dokub_idx = this.dxGridSub.getBindCellIndex("body", "UP_EXDOKUB");
	var am_dokub_idx = this.dxGridSub.getBindCellIndex("body", "AM_EXDOKUB");
	var qn_silheng_idx = this.dxGridSub.getBindCellIndex("body", "QN_EXSILHENG");
	var up_silheng_idx = this.dxGridSub.getBindCellIndex("body", "UP_EXSILHENG");
	var am_silheng_idx = this.dxGridSub.getBindCellIndex("body", "AM_EXSILHENG");
	 
	
	//단위가 식이면 수량 수정불가(금액수정가능)
	//this.divData.form.divDataRight.form.objGridSub.setCellProperty("body", 11, "edittype", "expr:DS_UNIT=='식' || DS_UNIT=='LS' || DS_UNIT=='L/S'?'none':'text'");
	
	 
	//this.divData.form.divDataRight.form.objGridSub.setCellProperty("body", 14, "edittype", "expr:DS_UNIT=='식' || DS_UNIT=='LS' || DS_UNIT=='L/S'?'none':'text'");
	
	//단위가 식이면 금액 수정가능 
	//this.divData.form.divDataRight.form.objGridSub.setCellProperty("body", 13, "edittype", "expr:DS_UNIT=='식' || DS_UNIT=='LS' || DS_UNIT=='L/S'?'text':'none'");
	//this.divData.form.divDataRight.form.objGridSub.setCellProperty("body", 16, "edittype", "expr:DS_UNIT=='식' || DS_UNIT=='LS' || DS_UNIT=='L/S'?'text':'none'");
	
	//신규이면서 식이 아니면 단가 수정가능
	//this.divData.form.divDataRight.form.objGridSub.setCellProperty("body", 12, "edittype", "expr: YN_NEW =='Y' && DS_UNIT!='식' && DS_UNIT!='LS' && DS_UNIT!='L/S'?'text':'none'");
	//this.divData.form.divDataRight.form.objGridSub.setCellProperty("body", 15, "edittype", "expr: YN_NEW =='Y' && DS_UNIT!='식' && DS_UNIT!='LS' && DS_UNIT!='L/S'?'text':'none'");
	
}

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {

	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_SITE", "string");
	//this.dsSelect.addColumn("NO_SILHENG", "string");
	
	
	this.dsSelectSub = new Dataset();
	this.dsSelectSub.addColumn("CD_SITE", "string");
	//this.dsSelectSub.addColumn("NO_SILHENG", "string");
	this.dsSelectSub.addColumn("CD_UPPER", "string");
	//this.dsSelectSub.addColumn("CD_PREVIOUS", "string");
	this.dsSelectSub.addColumn("YN_AMT", "string");
	
	this.dsSave = new Dataset();
	this.dsSave.addColumn("TY_SAVE", "string");
	this.dsSave.addColumn("CD_SITE", "string");
	this.dsSave.addColumn("NO_SILHENG", "string");
	this.dsSave.addColumn("CD_COST", "string");
	this.dsSave.addColumn("CD_UPPER", "string");
	this.dsSave.addColumn("CD_PREVIOUS", "string");
	this.dsSave.addColumn("YN_COST", "string");
	this.dsSave.addColumn("CD_ITEM", "string");
	this.dsSave.addColumn("DS_COST", "string");
	this.dsSave.addColumn("SZ_SIZE", "string");
	this.dsSave.addColumn("DS_UNIT", "string");
	this.dsSave.addColumn("CD_GBIMOK", "string");
	this.dsSave.addColumn("QN_TT_DOKUB", "bigdecimal");
	this.dsSave.addColumn("UP_TT_DOKUB", "bigdecimal");
	this.dsSave.addColumn("AM_TT_DOKUB", "bigdecimal");
	this.dsSave.addColumn("QN_EXDOKUB", "bigdecimal");
	this.dsSave.addColumn("UP_EXDOKUB", "bigdecimal");
	this.dsSave.addColumn("AM_EXDOKUB", "bigdecimal");
	this.dsSave.addColumn("QN_EXDOKUB", "bigdecimal");
	this.dsSave.addColumn("UP_EXDOKUB", "bigdecimal");
	this.dsSave.addColumn("AM_EXDOKUB", "bigdecimal");
	this.dsSave.addColumn("QN_TT_SILHENG", "bigdecimal");
	this.dsSave.addColumn("UP_TT_SILHENG", "bigdecimal");
	this.dsSave.addColumn("AM_TT_SILHENG", "bigdecimal");
	this.dsSave.addColumn("QN_EXSILHENG", "bigdecimal");
	this.dsSave.addColumn("UP_EXSILHENG", "bigdecimal");
	this.dsSave.addColumn("AM_EXSILHENG", "bigdecimal");
	this.dsSave.addColumn("RM_BIGO", "string");
	this.dsSave.addColumn("CD_RP", "string");
	this.dsSave.addColumn("CD_STDITEM", "string");
	this.dsSave.addColumn("CD_STD", "string");
	this.dsSave.addColumn("ID_USER", "string");
	this.dsSave.addColumn("NO_SORT", "string");
	
	this.dsSave.addColumn("QN_TT_SILSI", "bigdecimal");
	this.dsSave.addColumn("UP_TT_SILSI", "bigdecimal");
	this.dsSave.addColumn("AM_TT_SILSI", "bigdecimal");
	this.dsSave.addColumn("QN_EXSILSI", "bigdecimal");
	this.dsSave.addColumn("UP_EXSILSI", "bigdecimal");
	this.dsSave.addColumn("AM_EXSILSI", "bigdecimal");
	
	this.dsAfterSave = new Dataset();
	this.dsAfterSave.addColumn("CD_SITE", "string");
	this.dsAfterSave.addColumn("NO_SILHENG", "string");
	this.dsAfterSave.addColumn("YN_DKCHANGE", "string");
	
	this.dsDelete = new Dataset();
	this.dsDelete.addColumn("ID_USER", "string");
	this.dsDelete.addColumn("CD_SITE", "string");
	this.dsDelete.addColumn("NO_SILHENG", "string");
	
	this.dsErrorMsg = new Dataset();
	this.dsErrorMsg.addColumn("CD_SITE", "string");
	this.dsErrorMsg.addColumn("NO_SILHENG", "string");
	
	this.dsStatus= new Dataset();
	this.dsStatus.addColumn("CD_SITE", "string");
	this.dsStatus.addColumn("NO_SILHENG", "string");
	
	this.dsSort = new Dataset();
	this.dsSort.addColumn("CD_SITE", "string");
}

/************************************************************************
 * 버튼 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	//if (!this.fnSelectValidate()) return false;

	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	
	this.dsSelect.addRow();
	
	this.dsSelect.setColumn(0, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
	//this.dsSelect.setColumn(0, "NO_SILHENG", this.dsSearch.getColumn(0, "NO_SILHENG"));
	
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
	
	this.cursorRow = this.dsList.getColumn(this.dsList.rowposition ,"CD_DKCOST");
	
	
	this.FormBtns.SubSelect.click();
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	var nrow = this.gfnGridAdd(this.dxGridSub);
	
	this.dsListSub.set_enableevent(false);
	this.dsListSub.setColumn(nrow, "CD_PREVIOUS", this.dsList.getColumn(this.dsList.rowposition, "CD_DKCOST"));
	this.dsListSub.setColumn(nrow, "CD_UPPER", this.dsList.getColumn(this.dsList.rowposition, "CD_COST"));
	this.dsListSub.setColumn(nrow, "YN_NEW", "Y");
	var max = parseInt(parseInt(this.dsListSub.getMax("nexacro.toNumber(CD_ITEM)"))+ 1); 
// 	var sort = parseInt(parseInt(this.dsListSub.getMax("nexacro.toNumber(NO_SORT)"))+ 1); 
// 
// 	var maxOrg = parseInt(parseInt(this.dsListSub.getMax("nexacro.toNumber(CD_ITEM)"))); 
// 	var maxIdx = this.dsListSub.findRowExpr("nexacro.toNumber(CD_ITEM) ="+maxOrg);
// 	
// 	if(maxIdx > -1){
// 		var orgData = this.dsListSub.getColumn(maxIdx,"CD_ITEM");
// 	}
	

	if(!this.gfnIsNull(this.dsListSub.getMax("nexacro.toNumber(CD_ITEM)"))){
		this.dsListSub.setColumn(nrow, "CD_ITEM", nexacro.toNumber(max));
	}
	
	
	trace("### CD_PREVIOUS: "+this.dsListSub.getColumn(nrow,"CD_PREVIOUS"));
	trace("### CD_UPPER: "+this.dsListSub.getColumn(nrow,"CD_UPPER"));
	this.dsListSub.set_enableevent(true);		
	
	this.insertYn = "Y";
}

/*
 *	삭제 버튼
 */ 
this.fnDel = function() {
	//this.gfnGridDel(this.dxGridSub, "YN_COST");
	this.gfnGridDel(this.dxGridSub);
}

/*
 *	저장 버튼
 */ 
this.fnSave = function() {
	if (!this.gfnGridValidate(this.dxGridSub)) return;

	this.dsSave.clearData();
	
	trace("#### dsListSub.getRowCount:"+this.dsListSub.getRowCount());
	trace("#### dsListSub.rowcount:"+this.dsListSub.rowcount);
	for (var i = 0; i < this.dsListSub.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsListSub, i);
		switch(flag) {
			case "I":
			case "U":
			case "D":
				var nrow = this.dsSave.addRow();
				this.dsSave.setColumn(nrow, "TY_SAVE", flag);
				this.dsSave.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
				this.dsSave.setColumn(nrow, "NO_SILHENG", this.dsSearch.getColumn(0, "NO_SILHENG"));
				this.dsSave.setColumn(nrow, "CD_COST", this.dsListSub.getColumn(i, "CD_COST"));
				this.dsSave.setColumn(nrow, "CD_UPPER", this.dsListSub.getColumn(i, "CD_UPPER"));
				this.dsSave.setColumn(nrow, "CD_PREVIOUS", this.dsListSub.getColumn(i, "CD_PREVIOUS"));
				this.dsSave.setColumn(nrow, "YN_COST", this.dsListSub.getColumn(i, "YN_COST"));
				this.dsSave.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
				this.dsSave.setColumn(nrow, "NO_SORT", this.dsListSub.getColumn(i, "NO_SORT"));
				
				break;
		}
	}
		
	if (this.dsSave.rowcount == 0) return;
	//저장 시 커서 위치를 보존한다.
	this.cursorRow = this.dsList.getColumn(this.dsList.rowposition ,"CD_DKCOST");
	
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "save=dsSave";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */ 
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
	this.gfnExcelExport(this.dxGridSub);

}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}
 
/************************************************************************
 * 서브 버튼 이벤트
 ************************************************************************/
this.fnSelectSub = function() {
	if (this.dxGrid.rowcount == 0 || this.dxGrid.currentrow < 0) return false;
	this.gfnGridBeforeSelect(this.dxGridSub);
	
	this.dsSelectSub.clearData();
	
	this.dsSelectSub.addRow();
	
	this.dsSelectSub.setColumn(0, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
	//this.dsSelectSub.setColumn(0, "NO_SILHENG", this.dsSearch.getColumn(0, "NO_SILHENG"));
	this.dsSelectSub.setColumn(0, "CD_UPPER", this.dsList.getColumn(this.dsList.rowposition, "CD_COST"));
	this.dsSelectSub.setColumn(0, "YN_AMT", this.dsSearch.getColumn(0, "YN_AMT"));
	
	var strSvcId    = "selectSub";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "selectSub=dsSelectSub";
	var outData     = "dsListSub=selectSub0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}


//실행예산 상태를 조회
this.fnSelectStatus=function(){
	this.dsStatus.clearData();
	
	var nrow = this.dsStatus.addRow();
	this.dsStatus.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));			
	this.dsStatus.setColumn(nrow, "NO_SILHENG", this.dsSearch.getColumn(0, "NO_SILHENG"));	
	//alert("### NO_SILHENG :"+this.dsStatus.getColumn(nrow,"NO_SILHENG"));
	var strSvcId    = "status";
	var strSvcType  = "select";
	var inProc		= "_dsProc";
	var inData      = "status=dsStatus";
	var outData     = "dsStatusResult=status0";
	var strArg      = "";
	var callBackFnc = "fnCallback";

	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
};


this.fnAddSub = function() {
	var nRow = this.gfnGridAdd(this.dxGridSub);
	
}
this.fnDelSub = function() {
	this.gfnGridDel(this.dxGridSub);
}
this.fnSaveSub = function() {
	if (!this.gfnGridValidate(this.dxGridSub)) return;


}

this.fnExcelSub = function() {
	this.gfnExcelExport(this.dxGridSub);
}

/************************************************************************
 * Validate
 ************************************************************************/
this.fnSelectValidate = function() {	
	var validate = true;
	
	if (this.gfnIsNull(this.dsSearch.getColumn(0,"CD_SITE"))) {
		validate = false;
		// Alert후 실행할 처리
		this.fnVaidateCallback = function() {
			this.ccfCD_SITE.form.CDTextBox.setFocus();
		}
		this.gfnAlert("현장코드는 반드시 입력 하셔야 합니다.", "fnVaidateCallback");
		return validate;
	}
	
		
	return validate;
	
};
/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);
		this._gfnGridTreeOpen(this.dxGrid, 1);
		this.fnSelectStatus();
		
		//저장 전 선택 index를 tree에서 찾는다.
		var nDsIdx = this.dsList.findRowNF( "CD_DKCOST", this.cursorRow );
		
		var arrDsIdx = new Array();
		
		//선택 index의 tree 상위공종을 모두 찾아서 펴기
		while(nDsIdx > -1)
		{
			nDsIdx = this.dxGrid.getTreeParentRow(nDsIdx, true);
			if (nDsIdx > -1)
			{
				arrDsIdx.push(nDsIdx);
			}				
		}
		
		for (var i=(arrDsIdx.length - 1); i>=0; i--)
		{
			var nGrdIdx = this.dxGrid.getTreeRow(arrDsIdx[i]);
			//tree open
			this.dxGrid.setTreeStatus(nGrdIdx, true);
		}
		//trace("nDsIdx : "+nDsIdx);
		//저장 전 tree 위치 선택
		this.dsList.set_rowposition(this.dsList.findRowNF( "CD_DKCOST", this.cursorRow ));
		this.fnSelectSub();
		
	}
	else if (svcID == "selectSub") {
		this.gfnGridAfterSelect(this.dxGridSub);	
		this.insertYn = "N";
	}
	else if(svcID == "save") {
		trace("save");
		if (errorCode == 0) {
		trace("save1");
			this.FormBtns.Select.click();
			
		} else {
		trace("save2");
			this.gfnAlert(errorMsg);
		}
	}
	else if (svcID == "status") {
		var silhengStatus = this.dsStatusResult.getColumn(0,"SILHENG_STATUS");
		
		if(silhengStatus == "0" || silhengStatus == "" ||silhengStatus == "3"){
			this.btn4.set_enable(true);
			this.btn5.set_enable(false);
		}else if(silhengStatus == "1"){
			this.btn4.set_enable(false);
			this.btn5.set_enable(true);
		}else{
			this.btn4.set_enable(false);
			this.btn5.set_enable(false);
		}
	}else if (svcID == "sort") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
			
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	
	
}


this.fnGrid_RowCellChanged = function(obj:nexacro.Grid,e:nexacro.GridSelectEventInfo)
{
    if ((obj.oldrow > -1 && obj.oldrow == e.row)
		|| (obj.oldrow == -1 && e.oldrow != e.row)) {
		this.FormBtns.SubSelect.click();
		obj.oldrow = -1;
	}
};


/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.fnSearchInit = function(obj,e) {
	if(e == null || (e.pretext != e.posttext)) {
		this.gfnSetFormStatus(this);
		this.gfnGridClear(this.dxGrid);
		this.gfnGridClear(this.dxGridSub);
	}
}

this.divData_ondragmove = function(obj:nexacro.Div,e:nexacro.DragEventInfo)
{
	if(e.userdata == "splitter") {
		this.divData.form.divSplitter.set_left(e.clientx);
		this.divData.form.resetScroll();
	}
};

this.divData_divSplitter_ondrag = function(obj:nexacro.Div,e:nexacro.DragEventInfo)
{
	e.set_userdata("splitter");
	return true;
};


this.divData_btnUp_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	
// 	if(this.insertYn == "Y"){
// 		this.gfnAlert("신규 공종이 있을 경우 위치이동이 불가합니다.", "");
// 		return false;
// 	}
	var rows = this.dxGridSub.getSelectedDatasetRows();	
	var lastIdx = nexacro.toNumber(rows[rows.length-1]-rows.length);
	var preSort = this.dsListSub.getColumn(rows[rows.length-1],"NO_SORT");
	if(rows[0] < 2){
	
		return false;
	}
	
	this.dsListSub.set_enableevent(false);
	
	this.dxGridSub.set_selecttype("cell"); 
	this.dxGridSub.set_selecttype("area"); 
	
	for(var i = 0; i < rows.length; i++) {
		var rowIdx = nexacro.toNumber(rows[i]);
		var mRowIdx = rowIdx -rows.length;
		
		var sort = this.dsListSub.getColumn(rowIdx,"NO_SORT");
		var msort = nexacro.toNumber(sort) - 1;
		if(msort < 1){
			return false;
		}
		
		
		this.dsListSub.setColumn(rowIdx, "nx_flag", "U");
		this.dsListSub.setColumn(rowIdx,"NO_SORT", msort);
			
		bUpdate = true;
	}
	
  	this.dsListSub.setColumn(nexacro.toNumber(lastIdx ), "nx_flag", "U");
	
  	this.dsListSub.setColumn(nexacro.toNumber(lastIdx ),"NO_SORT", preSort);
	
	
	this.dxGridSub.selectArea( rows[0]-1, 0, rows[rows.length-1]-1, 12 ) ;
	this.dsListSub.set_keystring( "S:NO_SORT" );
	this.dsListSub.set_enableevent(true);		
	if(bUpdate) {
		this.gfnSetFormStatus(this, "U");
	}
};



this.divData_btnDown_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
// 	if(this.insertYn == "Y"){
// 		this.gfnAlert("신규 공종이 있을 경우 위치이동이 불가합니다.", "");
// 		return false;
// 	}
	
	var rows = this.dxGridSub.getSelectedDatasetRows();	
	var firstIdx = nexacro.toNumber(rows[0]+rows.length);
	var preSort = this.dsListSub.getColumn(rows[0],"NO_SORT");
	if(rows[rows.length-1] == this.dsListSub.getRowCount()-1 ){
		return false;
	}
	
	this.dsListSub.set_enableevent(false);
	
	this.dxGridSub.set_selecttype("cell"); 
	this.dxGridSub.set_selecttype("area"); 
	
	for(var i = 0; i < rows.length; i++) {
		var rowIdx = nexacro.toNumber(rows[i]);
		var mRowIdx = rowIdx -rows.length;
		
		var sort = this.dsListSub.getColumn(rowIdx,"NO_SORT");
		//var msort = nexacro.toNumber(this.dsListSub.getColumn(rowIdx,"NO_SORT")) - rows.length;
		var msort = nexacro.toNumber(sort) + 1;
		if(msort < 1){
			return false;
		}
		
		
		this.dsListSub.setColumn(rowIdx, "nx_flag", "U");
		//this.dsListSub.setColumn(mRowIdx, "nx_flag", "U");
		this.dsListSub.setColumn(rowIdx,"NO_SORT", msort);
		//this.dsListSub.setColumn(mRowIdx,"NO_SORT", sort);
			
		bUpdate = true;
	}
	
	
 	this.dsListSub.setColumn(nexacro.toNumber(firstIdx ), "nx_flag", "U");
 	this.dsListSub.setColumn(nexacro.toNumber(firstIdx ),"NO_SORT", preSort);
	
	//var endRow = rows[0]+rows.length+1 > this.dsListSub.getRowCount() ? this.dsListSub.getRowCount()-1 : rows[0]+rows.length+rows.length-1;
	this.dxGridSub.selectArea( rows[0]+1, 0, rows[rows.length-1]+1, 12 ) ;
	
	this.dsListSub.set_keystring( "S:NO_SORT" );
	this.dsListSub.set_enableevent(true);		
	if(bUpdate) {
		this.gfnSetFormStatus(this, "U");
	}
};




this.fnSetSortAll = function() {
	if(this.gfnIsNull(this.dsSearch.getColumn(0, "CD_SITE"))){
		this.gfnAlert("현장코드는 반드시 입력 하셔야 합니다.", "fnVaidateCallback");
		return;
	}

	this.dsSort.clearData();
	var nrow = this.dsSort.addRow();
	this.dsSort.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
	
		
	if (this.dsSort.rowcount == 0) return;
	
	var strSvcId    = "sort";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "sort=dsSort";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DWAPR_SILHENGSORTTREE_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">selectSub</Col>
            <Col id="SP">DWAPR_SILHENGSORT_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">save</Col>
            <Col id="SP">DWAPR_SILHENGSORT_SAVE</Col>
          </Row>
          <Row>
            <Col id="TARGET">status</Col>
            <Col id="SP">DWAPR_SILHENG_CHANGE_STATUS</Col>
          </Row>
          <Row>
            <Col id="SP">DWAPR_NO_SORT_SIBLING_ALL_SAVE</Col>
            <Col id="TARGET">sort</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsListSub" onvaluechanged="dsListSub_onvaluechanged"/>
      <Dataset id="dsSearch">
        <ColumnInfo>
          <Column id="CD_SITE" type="STRING" size="256"/>
          <Column id="NO_SILHENG" type="STRING" size="256"/>
          <Column id="YN_AMT" type="STRING" size="256"/>
          <Column id="CHK_REQ" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="YN_AMT">N</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsStatusResult">
        <ColumnInfo>
          <Column id="SILHENG_STATUS" type="STRING" size="256"/>
          <Column id="EP_NO" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfCD_SITE.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_SITE"/>
    </Bind>
  </Form>
</FDL>
