<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="DWA_SITEBUDGET" width="1280" height="720" titletext="CBS내역등록" onload="DWA_SITEBUDGET_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg" text="">
          <Layouts>
            <Layout>
              <Div id="ccfCD_SYSTEM" CodeFindName="DZX_CFSITE" CDTextWidth="80" taborder="0" left="0.0" top="10.0" width="250" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
              <Static id="staCD_CORP" taborder="0" text="실행번호" left="ccfCD_SYSTEM:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfNO_SILHENG" CodeFindName="DWX_CFNO_SILHENG_01" CDTextWidth="80" taborder="2" left="staCD_CORP:0.0" top="10.0" width="250" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
              <Static id="staCD_SYSTEM" taborder="1" text="현장코드" left="ccfNO_SILHENG:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Objects>
      <Dataset id="dsList" oncolumnchanged="dsList_oncolumnchanged">
        <ColumnInfo>
          <Column id="CD_DKCOST" type="STRING" size="256"/>
          <Column id="DS_ITEM" type="STRING" size="256"/>
          <Column id="SZ_SIZE" type="STRING" size="256"/>
          <Column id="DS_UNIT" type="STRING" size="256"/>
          <Column id="CD_GBIMOK" type="STRING" size="256"/>
          <Column id="QN_DESIGN" type="BIGDECIMAL" size="256"/>
          <Column id="UP_DESIGN" type="BIGDECIMAL" size="256"/>
          <Column id="AM_DESIGN" type="BIGDECIMAL" size="256"/>
          <Column id="QN_TT_DOKUB" type="BIGDECIMAL" size="256"/>
          <Column id="UP_TT_DOKUB" type="BIGDECIMAL" size="256"/>
          <Column id="AM_TT_DOKUB" type="BIGDECIMAL" size="256"/>
          <Column id="QN_EXSILHENG" type="BIGDECIMAL" size="256"/>
          <Column id="UP_EXSILHENG" type="BIGDECIMAL" size="256"/>
          <Column id="AM_EXSILHENG" type="BIGDECIMAL" size="256"/>
          <Column id="QN_TT_SILHENG" type="BIGDECIMAL" size="256"/>
          <Column id="UP_TT_SILHENG" type="BIGDECIMAL" size="256"/>
          <Column id="AM_TT_SILHENG" type="BIGDECIMAL" size="256"/>
          <Column id="CD_STCOST" type="STRING" size="256"/>
          <Column id="DS_STDCOST" type="STRING" size="256"/>
          <Column id="CD_RP" type="STRING" size="256"/>
          <Column id="NM_RP" type="STRING" size="256"/>
          <Column id="CD_STD" type="STRING" size="256"/>
          <Column id="DS_STD" type="STRING" size="256"/>
          <Column id="RM_BIGO" type="STRING" size="256"/>
          <Column id="ERR_MSG" type="STRING" size="256"/>
          <Column id="CD_COST" type="STRING" size="256"/>
          <Column id="CD_COST1" type="STRING" size="256"/>
          <Column id="CD_COST2" type="STRING" size="256"/>
          <Column id="CD_COST3" type="STRING" size="256"/>
          <Column id="CD_COST4" type="STRING" size="256"/>
          <Column id="CD_COST5" type="STRING" size="256"/>
          <Column id="CD_COST6" type="STRING" size="256"/>
          <Column id="CD_COST7" type="STRING" size="256"/>
          <Column id="CD_COST8" type="STRING" size="256"/>
          <Column id="CD_COST9" type="STRING" size="256"/>
          <Column id="CD_COST10" type="STRING" size="256"/>
          <Column id="CD_COST11" type="STRING" size="256"/>
          <Column id="CD_COST12" type="STRING" size="256"/>
          <Column id="nx_flag" type="STRING" size="32"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DWAPR_SILHENGWBS_SELECT</Col>
          </Row>
          <Row>
            <Col id="SP">DWAPR_SILHENG2EXCEL_INSERT</Col>
            <Col id="TARGET">init</Col>
          </Row>
          <Row>
            <Col id="SP">DWAPR_SILHENGEXCEL_SAVE</Col>
            <Col id="TARGET">save</Col>
          </Row>
          <Row>
            <Col id="SP">DWAPR_SILHENGEXCEL_INSERTERROR</Col>
            <Col id="TARGET">save0</Col>
          </Row>
          <Row>
            <Col id="TARGET">save1</Col>
            <Col id="SP">DWAPR_SILHENGEXCEL_INSERTCHANGE</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_SITE" type="STRING" size="256"/>
          <Column id="NO_SILHENG" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CD_SITE"/>
            <Col id="NO_SILHENG"/>
          </Row>
        </Rows>
      </Dataset>
    </Objects>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.DWA_SITEBUDGET_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	if(!this.gfnIsNull(this.getOwnerFrame().CD_SITE) && !this.gfnIsNull(this.getOwnerFrame().NO_SILHENG)) {

		this.dsSearch.setColumn(0, "CD_SITE", this.getOwnerFrame().CD_SITE);	// 현장코드
		this.ccfCD_SYSTEM.form.DSTextBox.set_value(this.getOwnerFrame().DS_SITE);	// 현장코드명
		this.ccfCD_SYSTEM.form.fnFitToContents();
		this.dsSearch.setColumn(0, "NO_SILHENG", this.getOwnerFrame().NO_SILHENG);	// 실행번호
		this.ccfNO_SILHENG.form.DSTextBox.set_value(this.getOwnerFrame().DS_SILHENG);	 // 실행번호명
		this.ccfNO_SILHENG.form.fnFitToContents();
		
		this.FormBtns.Select.click();
		
		//this.fnExcelUpload();
	}
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 ************************************************************************/
this.fnSetButton = function() {
// 	var id_group = this.FormInfo.ID_GROUP;
// 	var gr_search = this.FormInfo.GR_SEARCH;
// 	var cd_role = this.FormInfo.CD_ROLE;
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결
 ************************************************************************/
this.fnSetExtendButton = function() {
	//this.btn1 = this.gfnFormButtonAdd("btnIEMS", "fnIEMSUpLoad");
	//this.btn2 = this.gfnFormButtonAdd("btnExcel", "fnExcelLoad");
	this.btn3 = this.gfnFormButtonAdd("btnApply", "fnApply");
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.ccfCD_SYSTEM = this.divSearch.form.ccfCD_SYSTEM;
	this.ccfNO_SILHENG = this.divSearch.form.ccfNO_SILHENG;
	this.dxGrid = this.divData.form.objGrid;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	this.ccfCD_SYSTEM.CodeFindName = "DZX_CFSITE"
	this.ccfNO_SILHENG.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	

	this.gfnGridInit(this.dxGrid, this.dsList, "DW", "DWA_FROMWBS");
}
/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {

	this.dsInit = new Dataset();
	this.dsInit.addColumn("CD_SITE", "string");
	this.dsInit.addColumn("NO_SILHENG", "string");
	
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_SITE", "string");
	this.dsSelect.addColumn("NO_SILHENG", "string");

	this.dsSave = new Dataset();
	this.dsSave.addColumn("FLAG", "string");
	this.dsSave.addColumn("CD_SITE", "string");
	this.dsSave.addColumn("NO_SILHENG", "string");
	this.dsSave.addColumn("CD_DKCOST", "string");
	this.dsSave.addColumn("DS_ITEM", "string");
	this.dsSave.addColumn("SZ_SIZE", "string");
	this.dsSave.addColumn("DS_UNIT", "string");
	this.dsSave.addColumn("CD_GBIMOK", "string");
	this.dsSave.addColumn("QN_DESIGN", "bigdecimal");
	this.dsSave.addColumn("UP_DESIGN", "bigdecimal");
	this.dsSave.addColumn("AM_DESIGN", "bigdecimal");
	this.dsSave.addColumn("QN_TT_DOKUB", "bigdecimal");
	this.dsSave.addColumn("UP_TT_DOKUB", "bigdecimal");
	this.dsSave.addColumn("AM_TT_DOKUB", "bigdecimal");
	this.dsSave.addColumn("QN_TT_SILHENG", "bigdecimal");
	this.dsSave.addColumn("UP_TT_SILHENG", "bigdecimal");
	this.dsSave.addColumn("AM_TT_SILHENG", "bigdecimal");
	this.dsSave.addColumn("QN_EXSILHENG", "bigdecimal");
	this.dsSave.addColumn("UP_EXSILHENG", "bigdecimal");
	this.dsSave.addColumn("AM_EXSILHENG", "bigdecimal");
	this.dsSave.addColumn("CD_RP", "string");
	this.dsSave.addColumn("CD_STCOST", "string");
	this.dsSave.addColumn("RM_BIGO", "string");
	this.dsSave.addColumn("CD_COST", "string");
	this.dsSave.addColumn("CD_COST1", "string");
	this.dsSave.addColumn("CD_COST2", "string");
	this.dsSave.addColumn("CD_COST3", "string");
	this.dsSave.addColumn("CD_COST4", "string");
	this.dsSave.addColumn("CD_COST5", "string");
	this.dsSave.addColumn("CD_COST6", "string");
	this.dsSave.addColumn("CD_COST7", "string");
	this.dsSave.addColumn("CD_COST8", "string");
	this.dsSave.addColumn("CD_COST9", "string");
	this.dsSave.addColumn("CD_COST10", "string");
	this.dsSave.addColumn("CD_COST11", "string");
	this.dsSave.addColumn("CD_COST12", "string");
	this.dsSave.addColumn("CD_STD", "string");

	this.dsSave0 = new Dataset();
	this.dsSave0.addColumn("CD_SITE", "string");
	this.dsSave0.addColumn("NO_SILHENG", "string");

	this.dsSave1 = new Dataset();
	this.dsSave1.addColumn("CD_SITE", "string");
	this.dsSave1.addColumn("NO_SILHENG", "string");
	this.dsSave1.addColumn("ID_USER", "string");

}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {

	if (!this.fnSelectValidate()) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	
	this.dsSelect.setColumn(0, "CD_SITE", this.ccfCD_SYSTEM.form.CDTextBox.text);
	this.dsSelect.setColumn(0, "NO_SILHENG", this.ccfNO_SILHENG.form.CDTextBox.value);

	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}



/*
 *	입력 버튼
 */
this.fnAdd = function() {
	this.gfnGridAdd(this.dxGrid);
}

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}

/*
 *	저장 버튼
 */
this.fnSave = function() {
	if (!this.gfnGridValidate(this.dxGrid)) return;

	this.dxGrid.updateToDataset();
	
	this.dsSave.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		if(flag == "I" || flag == "U" || flag == "D"){
		
			var nrow = this.dsSave.addRow();
			
			this.dsSave.setColumn(nrow, "FLAG", flag);
			this.dsSave.setColumn(nrow, "CD_SITE", this.ccfCD_SYSTEM.form.CDTextBox.text);
			this.dsSave.setColumn(nrow, "NO_SILHENG", this.ccfNO_SILHENG.form.CDTextBox.value);
			this.dsSave.setColumn(nrow, "CD_DKCOST", this.dsList.getColumn(i, "CD_DKCOST"));
			this.dsSave.setColumn(nrow, "DS_ITEM", this.dsList.getColumn(i, "DS_ITEM"));
			this.dsSave.setColumn(nrow, "SZ_SIZE", this.dsList.getColumn(i, "SZ_SIZE"));
			this.dsSave.setColumn(nrow, "DS_UNIT", this.dsList.getColumn(i, "DS_UNIT"));
			this.dsSave.setColumn(nrow, "CD_GBIMOK", this.dsList.getColumn(i, "CD_GBIMOK"));
			this.dsSave.setColumn(nrow, "QN_DESIGN", this.dsList.getColumn(i, "QN_DESIGN"));
			this.dsSave.setColumn(nrow, "UP_DESIGN", this.dsList.getColumn(i, "UP_DESIGN"));
			this.dsSave.setColumn(nrow, "AM_DESIGN", this.dsList.getColumn(i, "AM_DESIGN"));
			this.dsSave.setColumn(nrow, "QN_TT_DOKUB", this.dsList.getColumn(i, "QN_TT_DOKUB"));
			this.dsSave.setColumn(nrow, "UP_TT_DOKUB", this.dsList.getColumn(i, "UP_TT_DOKUB"));
			this.dsSave.setColumn(nrow, "AM_TT_DOKUB", this.dsList.getColumn(i, "AM_TT_DOKUB"));
			this.dsSave.setColumn(nrow, "QN_TT_SILHENG", this.dsList.getColumn(i, "QN_TT_SILHENG"));
			this.dsSave.setColumn(nrow, "UP_TT_SILHENG", this.dsList.getColumn(i, "UP_TT_SILHENG"));
			this.dsSave.setColumn(nrow, "AM_TT_SILHENG", this.dsList.getColumn(i, "AM_TT_SILHENG"));
			this.dsSave.setColumn(nrow, "QN_EXSILHENG", this.dsList.getColumn(i, "QN_EXSILHENG"));
			this.dsSave.setColumn(nrow, "UP_EXSILHENG", this.dsList.getColumn(i, "UP_EXSILHENG"));
			this.dsSave.setColumn(nrow, "AM_EXSILHENG", this.dsList.getColumn(i, "AM_EXSILHENG"));
			this.dsSave.setColumn(nrow, "CD_RP", this.dsList.getColumn(i, "CD_RP"));
			this.dsSave.setColumn(nrow, "CD_STCOST", this.dsList.getColumn(i, "CD_STCOST"));
			this.dsSave.setColumn(nrow, "RM_BIGO", this.dsList.getColumn(i, "RM_BIGO"));
			this.dsSave.setColumn(nrow, "CD_COST", this.dsList.getColumn(i, "CD_COST"));
			this.dsSave.setColumn(nrow, "CD_COST1", this.dsList.getColumn(i, "CD_COST1"));
			this.dsSave.setColumn(nrow, "CD_COST2", this.dsList.getColumn(i, "CD_COST2"));
			this.dsSave.setColumn(nrow, "CD_COST3", this.dsList.getColumn(i, "CD_COST3"));
			this.dsSave.setColumn(nrow, "CD_COST4", this.dsList.getColumn(i, "CD_COST4"));
			this.dsSave.setColumn(nrow, "CD_COST5", this.dsList.getColumn(i, "CD_COST5"));
			this.dsSave.setColumn(nrow, "CD_COST6", this.dsList.getColumn(i, "CD_COST6"));
			this.dsSave.setColumn(nrow, "CD_COST7", this.dsList.getColumn(i, "CD_COST7"));
			this.dsSave.setColumn(nrow, "CD_COST8", this.dsList.getColumn(i, "CD_COST8"));
			this.dsSave.setColumn(nrow, "CD_COST9", this.dsList.getColumn(i, "CD_COST9"));
			this.dsSave.setColumn(nrow, "CD_COST10", this.dsList.getColumn(i, "CD_COST10"));
			this.dsSave.setColumn(nrow, "CD_COST11", this.dsList.getColumn(i, "CD_COST11"));
			this.dsSave.setColumn(nrow, "CD_COST12", this.dsList.getColumn(i, "CD_COST12"));
			this.dsSave.setColumn(nrow, "CD_STD", this.dsList.getColumn(i, "CD_STD"));
			
		}
	}
	
	if (this.dsSave.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "save=dsSave";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
  */
this.fnSelectValidate = function() {
	var validate = true;
	if (this.gfnIsNull(this.ccfCD_SYSTEM.form.CDTextBox.text)) {
		validate = false;
		// Alert후 실행할 처리
		this.fnVaidateCallback = function() {
			this.ccfCD_SYSTEM.form.CDTextBox.setFocus();
		}
		this.gfnAlert("현장코드를 입력하세요.", "fnVaidateCallback");
	}else if (this.gfnIsNull(this.ccfNO_SILHENG.form.CDTextBox.text)) {
		validate = false;
		// Alert후 실행할 처리
		this.fnVaidateCallback = function() {
			this.ccfNO_SILHENG.form.CDTextBox.setFocus();
		}
		this.gfnAlert("실행번호를 입력하세요.", "fnVaidateCallback");
	}
	return validate;
};


/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{

	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);	
	}
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.fnInsertError();
			//this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}	else if(svcID == "saveapply") {
		if (errorCode == 0) {
			this.fnInsertError();
			//this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "saveafter"){
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}		
	}
	 /*
	else if(svcID == "saveinit"){
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	*/
};

this.fnCallbackIEMS = function(strID, value){
	if(value){
		this.FormBtns.Select.click();
	}
};


/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/

this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	
	if( id== "ccfCD_SYSTEM" ){
	
		dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
		dsUserParam.setColumn(nrow, "CD_DEPT", this.AuthClient.CD_DEPT);
		dsUserParam.setColumn(nrow, "CD_CORP", this.AuthClient.CD_CORP);
				
	}else if (id == "ccfNO_SILHENG") {
	
// 		if (this.gfnIsNull(this.ccfCD_DEPT_ORG.form.CDTextBox.value)) {
// 			this.gfnAlert("서브모듈을 먼저 입력하세요.");
// 			return false;
// 		}
		dsUserParam.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));	// 현장코드
	}
	return true;
}

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/

/************************************************************************
 * 기타 이벤트
 ***********************************************************************/
this.fnExcelUpload = function(){

	this.dsInit.clearData();
	
	var nrow = this.dsInit.addRow();
	this.dsInit.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));			
	this.dsInit.setColumn(nrow, "NO_SILHENG", this.dsSearch.getColumn(0, "NO_SILHENG"));	
		
	var strSvcId    = "saveinit";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "init=dsInit";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
};

this.fnInsertError=function(){
	this.dsSave0.clearData();
	
	var nrow = this.dsSave0.addRow();
	this.dsSave0.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));			
	this.dsSave0.setColumn(nrow, "NO_SILHENG", this.dsSearch.getColumn(0, "NO_SILHENG"));	
		
	var strSvcId    = "saveafter";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "save0=dsSave0";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
};

this.fnApply = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {

	this.dsSave1.clearData();
	
	var nrow = this.dsSave1.addRow();
	this.dsSave1.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));			
	this.dsSave1.setColumn(nrow, "NO_SILHENG", this.dsSearch.getColumn(0, "NO_SILHENG"));	
	this.dsSave1.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
	
	var strSvcId    = "saveapply";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "save1=dsSave1";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
};

/*
this.fnExcelLoad = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {

	this.gfnExcelImport("dsList","","A3","fnExcelImportCallback","import",this);
};

this.fnExcelImportCallback = function(sImportId, dsOut, dsSheet) {
	// 다중 시트 처리시 양식의 해당 시트여부를 체크하고자 할땐 dsSheet 시트명 체크
// 	if (dsSheet.rowcount > 1) {
// 		trace(dsSheet.getColumn(1, "sheetname"));
// 	}
	
	// 엑셀 양식과 그리드 컬럼이 그대로 일치 하는경우 아래와 같이 처리.
	// 아닌경우는 이부분 주석처리
	for (var i=0; i< this.dsList.getColCount(); i++)
	{
		sColumnId = "Column"+i;
		var sColumnNm = this.gfnGridGetBindColumnNameByIndex(this.dxGrid, i);
		if (sColumnNm != "" && sColumnId != sColumnNm)
		{
			dsOut.updateColID(sColumnId, sColumnNm);
		}
	}
	
	// 양식이 일치하고 엑셀내역을 기존데이터에 Insert하지 않고
	// 엑셀내역 그대로 그리드 반영할 시 copyData
	//this.dsListSub.copyData(dsOut);
	
	this.dsList.set_enableevent(false);
	for (var i=0; i<dsOut.rowcount; i++) {
		var srow = this.dsList.findRow("CD_COST", dsOut.getColumn(i, "CD_COST"));
		if(this.gfnIsNull(dsOut.getColumn(i, "CD_COST"))){
			srow = -1;
		}
		if(srow > -1){
			this.dsList.setColumn(srow, this.ucFlag, "U");
			this.dsList.copyRow(srow, dsOut, i);
		}else{
			var nrow = this.dsList.addRow();
			this.dsList.setColumn(nrow, this.ucFlag, "I");
		
			// 양식이 일치하는 경우 copyRow
			this.dsList.copyRow(nrow, dsOut, i);
		}
		
		
		// 양식과 일치하지 않는 경우 아래와 같이 컬럼별로 처리.
// 		this.dsListSub.setColumn(nrow, "CD_SYSTEM", dsOut.getColumn(i, "Column1"));
// 		this.dsListSub.setColumn(nrow, "CD_TYPE", dsOut.getColumn(i, "Column2"));

	}
	this.dsList.set_enableevent(true);
	
	this.gfnSetFormStatus(this, "I");
};
*/

this.dsList_oncolumnchanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
// 	if(e.col == 9 || e.col == 21){
// 		this.dsList.setColumn(e.row, "AM_DESIGN", Math.floor(this.dsList.getColumn(e.row, "QN_DESIGN") * this.dsList.getColumn(e.row, "UP_DESIGN")));
// 	}else if(e.col == 0 || e.col == 29){
// 		this.dsList.setColumn(e.row, "AM_TT_DOKUB", Math.floor(this.dsList.getColumn(e.row, "QN_TT_DOKUB") * this.dsList.getColumn(e.row, "UP_TT_DOKUB")));
// 	}else if(e.col == 34 || e.col == 19){
// 		this.dsList.setColumn(e.row, "AM_EXSILHENG", Math.floor(this.dsList.getColumn(e.row, "QN_EXSILHENG") * this.dsList.getColumn(e.row, "UP_EXSILHENG")));
// 	}else if(e.col == 13 || e.col == 15){
// 		this.dsList.setColumn(e.row, "AM_TT_SILHENG", Math.floor(this.dsList.getColumn(e.row, "QN_TT_SILHENG") * this.dsList.getColumn(e.row, "UP_TT_SILHENG")));
// 	}
	// 이벤트 오류로 인한 col이 아닌 columnid로 체크로직 변경.
	if(e.columnid == "QN_DESIGN" || e.columnid == "UP_DESIGN"){
		this.dsList.setColumn(e.row, "AM_DESIGN", Math.floor(this.dsList.getColumn(e.row, "QN_DESIGN") * this.dsList.getColumn(e.row, "UP_DESIGN")));
	}else if(e.columnid == "QN_TT_DOKUB" || e.columnid == "UP_TT_DOKUB"){
		this.dsList.setColumn(e.row, "AM_TT_DOKUB", Math.floor(this.dsList.getColumn(e.row, "QN_TT_DOKUB") * this.dsList.getColumn(e.row, "UP_TT_DOKUB")));
	}else if(e.columnid == "QN_EXSILHENG" || e.columnid == "UP_EXSILHENG"){
		this.dsList.setColumn(e.row, "AM_EXSILHENG", Math.floor(this.dsList.getColumn(e.row, "QN_EXSILHENG") * this.dsList.getColumn(e.row, "UP_EXSILHENG")));
	}else if(e.columnid == "QN_TT_SILHENG" || e.columnid == "UP_TT_SILHENG"){
		this.dsList.setColumn(e.row, "AM_TT_SILHENG", Math.floor(this.dsList.getColumn(e.row, "QN_TT_SILHENG") * this.dsList.getColumn(e.row, "UP_TT_SILHENG")));
	}
};
/*
this.fnIEMSUpLoad = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {

	var param = {};
	param.pCd_Site = this.dsSearch.getColumn(0, "CD_SITE");
	param.pNO_Silheng = this.dsSearch.getColumn(0, "NO_SILHENG");	
	
	// 화면 오픈. 
	// CD_MODULE은 보통 같은 모듈에서 호출하는 경우가 많으니 this.FormInfo.CD_MODULE 사용
	// 타 모듈 화면 호출시 지정할것.
	this.gfnFormOpenNonAuth("DWA", "DWA_IEMSDLG", "fnCallbackIEMS", param, 400, 210);
}
*/
this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue)
	{
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
		
		if(e.columnid == "CD_SITE")
		{
			this.dsSearch.setColumn(0, "NO_SILHENG", "");
			this.divSearch.form.ccfNO_SILHENG.form.DSTextBox.set_value("");
		}
	}
};
]]></Script>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfCD_SYSTEM.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_SITE"/>
      <BindItem id="item1" compid="divSearch.form.ccfNO_SILHENG.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="NO_SILHENG"/>
    </Bind>
  </Form>
</FDL>
