<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="원가안분조정내역" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg">
          <Layouts>
            <Layout>
              <Static id="staCD_SITE" taborder="1" text="현장코드" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfCD_SITE" CodeFindName="DZX_CFSITE" CDTextWidth="80" taborder="0" left="staCD_SITE:0.0" top="10.0" width="200" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
              <Static id="staYM_WORK" taborder="6" text="작업년월" left="ccfCD_SITE:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ctclYM_WORK" taborder="1" left="staYM_WORK:0.0" top="10.0" width="80" height="24.0" url="cmm::cmmCalMM.xfdl"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg" ondragmove="divData_ondragmove">
          <Layouts>
            <Layout>
              <Div id="divSplitter" taborder="1" left="0" top="40%" width="100%" height="5" background="skyblue" cursor="ns-resize" ondrag="divData_divSplitter_ondrag"/>
              <Div id="divDataTop" taborder="0" left="0" top="0" bottom="divSplitter:5" right="0">
                <Layouts>
                  <Layout>
                    <Grid id="objGrid" taborder="0" left="0" top="sta01:5" bottom="0" right="0"/>
                  </Layout>
                </Layouts>
              </Div>
              <Div id="divDataBottom" taborder="0" left="0" top="divSplitter:5" bottom="0" right="0">
                <Layouts>
                  <Layout>
                    <Static id="sta00" taborder="1" text="※ 비주간사 안분금액을 수정하여 실안분금액을 조정하십시오." left="10" top="4" width="520" height="20" textDecoration="none" color="#ef0000" font="bold 12px/normal &quot;Dotum&quot;"/>
                    <Grid id="objGridSub" taborder="0" left="0" top="sta00:5" bottom="0" right="0"/>
                  </Layout>
                </Layouts>
              </Div>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	if(!this.gfnIsNull(this.getOwnerFrame().CD_SITE) && !this.gfnIsNull(this.getOwnerFrame().YM_WORK))
	{
		this.dsSearch.setColumn(0, "CD_SITE", this.getOwnerFrame().CD_SITE);
		this.divSearch.form.ccfCD_SITE.form.DSTextBox.set_value(this.getOwnerFrame().DS_SITE);
		this.dsSearch.setColumn(0, "YM_WORK", (this.getOwnerFrame().YM_WORK).substr(0,6));
		
		this.FormBtns.Select.click();
	}
	else
	{
		var today = this.gfnGetDate();
		this.dsSearch.setColumn(0, "YM_WORK", today.substr(0,6));
	}
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 ************************************************************************/
this.fnSetButton = function() {
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btnJtJibun = this.gfnFormButtonAdd("btnJtJibun", "fnJtJibun");
	this.btnJtSlip = this.gfnFormButtonAdd("btnJtSlip", "fnJtSlip");
	this.btnJtCrt = this.gfnFormButtonAdd("btnJtCrt", "fnJtCrt");
	this.btnJtDel = this.gfnFormButtonAdd("btnJtDel", "fnJtDel");
	this.btnJtMagam = this.gfnFormButtonAdd("btnJtMagam", "fnJtMagam");
	this.btnJtMagamCancel = this.gfnFormButtonAdd("btnJtMagamCancel", "fnJtMagamCancel");
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.dxGrid = this.divData.form.divDataTop.form.objGrid;
	this.dxGridSub = this.divData.form.divDataBottom.form.objGridSub;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {	
	this.gfnGridInit(this.dxGrid, this.dsList, "DW", "DWD_JTDIVMASTER");
	this.dxGrid.set_selecttype("cell");	
	this.dxGrid.addEventHandler("onselectchanged", this.fnGrid_RowCellChanged, this);
	this.dsList.addEventHandler("canrowposchange", this.dsList_canrowposchange, this);
		
	this.gfnGridInit(this.dxGridSub, this.dsListSub, "DW", "DWD_JTDIVDETAIL");
}

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("TY_WRK", "string");
	this.dsSelect.addColumn("CD_SITE", "string");
	this.dsSelect.addColumn("YM_WORK", "string");
	
	this.dsSelectSub = new Dataset();
	this.dsSelectSub.addColumn("TY_WRK", "string");
	this.dsSelectSub.addColumn("CD_SITE", "string");
	this.dsSelectSub.addColumn("YM_WORK", "string");
	this.dsSelectSub.addColumn("CD_VENDOR", "string");
	
	this.dsSave = new Dataset();
	this.dsSave.addColumn("TY_WRK", "string");
	this.dsSave.addColumn("ID_USER", "string");
	this.dsSave.addColumn("CD_SITE", "string");
	this.dsSave.addColumn("YM_WORK", "string");
	this.dsSave.addColumn("CD_VENDOR", "string");
	this.dsSave.addColumn("CD_ACCOUNT", "string");
	this.dsSave.addColumn("AM_AJTAXBILL", "bigdecimal");
	this.dsSave.addColumn("AM_AJVAT", "bigdecimal");
	this.dsSave.addColumn("AM_AJBILL", "bigdecimal");
	this.dsSave.addColumn("AM_AJETC", "bigdecimal");
	this.dsSave.addColumn("DS_RMKS", "string");
	
	this.dsSave.addColumn("AM_STLTAXBILL", "bigdecimal");
	this.dsSave.addColumn("AM_STLVAT", "bigdecimal");
	this.dsSave.addColumn("AM_STLBILL", "bigdecimal");
	this.dsSave.addColumn("AM_STLETC", "bigdecimal");
	
	this.dsExecute = new Dataset();
	this.dsExecute.addColumn("TY_WRK", "string");
	this.dsExecute.addColumn("ID_USER", "string");
	this.dsExecute.addColumn("CD_SITE", "string");
	this.dsExecute.addColumn("YM_WORK", "string");
}

/************************************************************************
 * 버튼 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;
	
	this.dsListSub.clearData();
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	this.dsSelect.setColumn(0, "TY_WRK", "Q");
	this.dsSelect.setColumn(0, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
	this.dsSelect.setColumn(0, "YM_WORK", this.dsSearch.getColumn(0, "YM_WORK").substr(0,6));

	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	//this.gfnGridAdd(this.dxGrid);
}

/*
 *	삭제 버튼
 */ 
this.fnDel = function() {
	//this.gfnGridDel(this.dxGrid);
}

/*
 *	저장 버튼
 */ 
this.fnSave = function() {
	// 저장을 하단 그리드로 진행함.
	if (!this.gfnGridValidate(this.dxGridSub)) return;

	this.dxGridSub.updateToDataset();
	
	this.dsSave.clearData();
	
	for (var i = 0; i < this.dsListSub.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsListSub, i);
		switch(flag) {
			case "I":
			case "U":
			case "D":
				var nrow = this.dsSave.addRow();
				this.dsSave.setColumn(nrow, "TY_WRK", flag);
				this.dsSave.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
				this.dsSave.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
				this.dsSave.setColumn(nrow, "YM_WORK", this.dsSearch.getColumn(0, "YM_WORK").substr(0,6));
				this.dsSave.setColumn(nrow, "CD_VENDOR", this.dsList.getColumn(this.dsList.rowposition, "CD_VENDOR"));
				this.dsSave.setColumn(nrow, "CD_ACCOUNT", this.dsListSub.getColumn(i, "CD_ACCOUNT"));
				this.dsSave.setColumn(nrow, "AM_AJTAXBILL", this.dsListSub.getColumn(i, "AM_AJTAXBILL"));
				this.dsSave.setColumn(nrow, "AM_AJVAT", this.dsListSub.getColumn(i, "AM_AJVAT"));
				this.dsSave.setColumn(nrow, "AM_AJBILL", this.dsListSub.getColumn(i, "AM_AJBILL"));
				this.dsSave.setColumn(nrow, "AM_AJETC", this.dsListSub.getColumn(i, "AM_AJETC"));
				this.dsSave.setColumn(nrow, "DS_RMKS", this.dsListSub.getColumn(i, "DS_RMKS"));
				
				this.dsSave.setColumn(nrow, "AM_STLTAXBILL", this.dsListSub.getColumn(i, "AM_STLTAXBILL"));
				this.dsSave.setColumn(nrow, "AM_STLVAT", this.dsListSub.getColumn(i, "AM_STLVAT"));
				this.dsSave.setColumn(nrow, "AM_STLBILL", this.dsListSub.getColumn(i, "AM_STLBILL"));
				this.dsSave.setColumn(nrow, "AM_STLETC", this.dsListSub.getColumn(i, "AM_STLETC"));				
				break;
		}
	}
		
	if (this.dsSave.rowcount == 0) return;
	
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "save=dsSave";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */ 
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGridSub);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}
 
/************************************************************************
 * 서브 버튼 이벤트
 ************************************************************************/
this.fnSelectSub = function() {
	if (this.dxGrid.rowcount == 0 || this.dxGrid.currentrow < 0) return false;
	
	this.dsListSub.clearData();
	
	var cd_vendor = this.dsList.getColumn(this.dsList.rowposition, "CD_VENDOR");
	if (this.gfnIsNull(cd_vendor)){
		return false;
	}
	
	this.gfnGridBeforeSelect(this.dxGridSub);
	
	this.dsSelectSub.clearData();
	this.dsSelectSub.addRow();
	this.dsSelectSub.setColumn(0, "TY_WRK", "Q");
	this.dsSelectSub.setColumn(0, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
	this.dsSelectSub.setColumn(0, "YM_WORK", this.dsSearch.getColumn(0, "YM_WORK").substr(0,6));
	this.dsSelectSub.setColumn(0, "CD_VENDOR", this.dsList.getColumn(this.dsList.rowposition, "CD_VENDOR"));

	var strSvcId    = "detail";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "d_select=dsSelectSub";
	var outData     = "dsListSub=d_select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

this.fnExcelSub = function() {
	this.gfnExcelExport(this.dxGridSub);
}

/************************************************************************
 * Validate
 ************************************************************************/
this.fnSelectValidate = function() {
	var validate = true;
	
	if (this.gfnIsNull(this.dsSearch.getColumn(0, "CD_SITE"))) {
		validate = false;
		
		this.fnVaidateCallback = function() {
			this.divSearch.form.ccfCD_SITE.form.CDTextBox.setFocus();
		}
		this.gfnAlert("현장코드를 입력하세요.", "fnVaidateCallback");
	}
	
	if (this.gfnIsNull(this.dsSearch.getColumn(0, "YM_WORK"))) {
		validate = false;
		
		this.fnVaidateCallback = function() {
			this.divSearch.form.ctclYM_WORK.setFocus();
		}
		this.gfnAlert("작업년월를 입력하세요.", "fnVaidateCallback");
	}
	
	return validate;
};
/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg, strArg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);	
	}
	else if (svcID == "detail") {
		this.gfnGridAfterSelect(this.dxGridSub);	
	}
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "execute") {
		if (errorCode == 0) {
			var json = this.gfnArgsToJson(strArg);
			strArg = json.gubun;
			
			var msg = "";
			switch(strArg)
			{
				case "CRT_DIV" :
					msg += "안분자료생성이 ";
					break;
				case "CNC_DIV" :
					msg += "안분전표삭제가 ";
					break;
				case "OK_MAGAM" :
					msg += "원가안분확정이 ";
					break;
				case "CNC_MAGAM" :
					msg += "원가안분확정취소가 ";
					break;
				
			}
			
			msg += "정상 처리되었습니다.";
			
			this.gfnAlert(msg);
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
this.fnGrid_RowCellChanged = function(obj:nexacro.Grid,e:nexacro.GridSelectEventInfo)
{
    if ((obj.oldrow > -1 && obj.oldrow == e.row)
		|| (obj.oldrow == -1 && e.oldrow != e.row)) {
		//this.FormBtns.SubSelect.click();
		this.fnSelectSub();
		obj.oldrow = -1;
	}
};

this.dsList_canrowposchange = function(obj:nexacro.NormalDataset,e:nexacro.DSRowPosChangeEventInfo) {
	var can_rowchange = true;
	for (var i = 0; i < this.dsListSub.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsListSub, i);
		if (flag == "I" || flag == "U" || flag == "D") {
			can_rowchange = false;
			break;
		}
	}
	if(!can_rowchange) {
		this._row = e.newrow;
		this.gfnConfirm("변경된 데이터가 있습니다.\r\n계속 진행하시겠습니까?", "dsList_canrowposchange_callback");
	}
	return can_rowchange;
}

this.dsList_canrowposchange_callback = function(strId, val) 
{
	if(val == true) {
		this.dsList.set_enableevent(false);
		this.dsList.set_rowposition(this._row);
		this.dsList.set_enableevent(true);
	}	
}

/*
 *	서브 그리드 코드파인드
 */ 
this.fnGridSub_BeforeUserDataSetParam = function(id, dsUserParam, nrow) {

 	if (id == "DZX_CFUSERGROUP") {
		var cd_system = this.dsListSub.getColumn(this.dsListSub.rowposition, "CD_SYSTEM");
		if(this.gfnIsNull(cd_system)) {
			this.gfnAlert("시스템코드를 먼저 입력하세요.");
			return false;
		}
 		dsUserParam.setColumn(nrow, "CD_MODULE", this.dsListSub.getColumn(this.dsListSub.rowposition, "CD_SYSTEM"));
 	}
	return true;
}

/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
		this.gfnGridClear(this.dxGridSub);	
	}
};

this.divData_ondragmove = function(obj:nexacro.Div,e:nexacro.DragEventInfo)
{
	if(e.userdata == "splitter") {
		this.divData.form.divSplitter.set_top(e.clienty);
		this.divData.form.resetScroll();	
	}
};

this.divData_divSplitter_ondrag = function(obj:nexacro.Div,e:nexacro.DragEventInfo)
{
	e.set_userdata("splitter");
	return true;
};

this.dsListSub_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue)
	{
		var nrow = this.dsListSub.rowposition;
		
		// 조정금액 세금계산서
		if(e.columnid == "AM_AJTAXBILL")
		{
			var AM_AJTAXBILL = nexacro.toNumber(e.newvalue, 0);
			var AM_AJVAT = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_AJVAT"),0);
			var AM_AJBILL = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_AJBILL"),0);
			var AM_AJETC = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_AJETC"),0);

			// 조정금액 합계
			this.dsListSub.setColumn(nrow, "AM_AJSUM", AM_AJTAXBILL + AM_AJVAT + AM_AJBILL + AM_AJETC);
			
			var AM_TAXBILL = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_TAXBILL"),0);
			var AM_STLTAXBILL = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_STLTAXBILL"),0);
			var AM_JTAXBILL = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_JTAXBILL"),0);
			
			// 실안분 세금계산서
			this.dsListSub.setColumn(nrow, "AM_STAXBILL", AM_TAXBILL + AM_STLTAXBILL + AM_AJTAXBILL - AM_JTAXBILL);
		}
		// 선급정산금액 세금계산서
		else if(e.columnid == "AM_STLTAXBILL")
		{
			var AM_STLTAXBILL = nexacro.toNumber(e.newvalue, 0);
			var AM_STLVAT = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_STLVAT"),0);
			var AM_STLBILL = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_STLBILL"),0);
			var AM_STLETC = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_STLETC"),0);

			// 선급정산금액 합계
			this.dsListSub.setColumn(nrow, "AM_STLSUM", AM_STLTAXBILL + AM_STLVAT + AM_STLBILL + AM_STLETC);
			
			var AM_TAXBILL = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_TAXBILL"),0);
			var AM_AJTAXBILL = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_AJTAXBILL"),0);
			var AM_JTAXBILL = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_JTAXBILL"),0);
			
			// 실안분 세금계산서
			this.dsListSub.setColumn(nrow, "AM_STAXBILL", AM_TAXBILL + AM_STLTAXBILL + AM_AJTAXBILL - AM_JTAXBILL);
		}
		// 조정금액 부가세
		else if(e.columnid == "AM_AJVAT")
		{
			var AM_AJTAXBILL = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_AJTAXBILL"),0);
			var AM_AJVAT = nexacro.toNumber(e.newvalue, 0);
			var AM_AJBILL = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_AJBILL"),0);
			var AM_AJETC = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_AJETC"),0);

			// 조정금액 합계
			this.dsListSub.setColumn(nrow, "AM_AJSUM", AM_AJTAXBILL + AM_AJVAT + AM_AJBILL + AM_AJETC);
			
			var AM_VAT = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_VAT"),0);
			var AM_STLVAT = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_STLVAT"),0);
			var AM_JVAT = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_JVAT"),0);
			
			// 실안분 부가세
			this.dsListSub.setColumn(nrow, "AM_SVAT", AM_VAT + AM_STLVAT + AM_AJVAT - AM_JVAT);
		}
		// 선급정산금액 부가세
		else if(e.columnid == "AM_STLVAT")
		{
			var AM_STLTAXBILL = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_STLTAXBILL"),0);
			var AM_STLVAT = nexacro.toNumber(e.newvalue, 0);
			var AM_STLBILL = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_STLBILL"),0);
			var AM_STLETC = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_STLETC"),0);

			// 선급정산금액 합계
			this.dsListSub.setColumn(nrow, "AM_STLSUM", AM_STLTAXBILL + AM_STLVAT + AM_STLBILL + AM_STLETC);
			
			var AM_VAT = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_VAT"),0);
			var AM_AJVAT = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_AJVAT"),0);
			var AM_JVAT = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_JVAT"),0);
			
			// 실안분 부가세
			this.dsListSub.setColumn(nrow, "AM_SVAT", AM_VAT + AM_STLVAT + AM_AJVAT - AM_JVAT);
		}
		// 조정금액 계산서
		else if(e.columnid == "AM_AJBILL")
		{
			var AM_AJTAXBILL = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_AJTAXBILL"),0);
			var AM_AJVAT = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_AJVAT"),0);
			var AM_AJBILL = nexacro.toNumber(e.newvalue, 0);
			var AM_AJETC = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_AJETC"),0);

			// 조정금액 합계
			this.dsListSub.setColumn(nrow, "AM_AJSUM", AM_AJTAXBILL + AM_AJVAT + AM_AJBILL + AM_AJETC);
			
			var AM_BILL = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_BILL"),0);
			var AM_STLBILL = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_STLBILL"),0);
			var AM_JBILL = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_JBILL"),0);
			
			// 실안분 계산서
			this.dsListSub.setColumn(nrow, "AM_SBILL", AM_BILL + AM_STLBILL + AM_AJBILL - AM_JBILL);
		}
		// 선급정산금액 계산서
		else if(e.columnid == "AM_STLBILL")
		{
			var AM_STLTAXBILL = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_STLTAXBILL"),0);
			var AM_STLVAT = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_STLVAT"),0);
			var AM_STLBILL = nexacro.toNumber(e.newvalue, 0);
			var AM_STLETC = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_STLETC"),0);

			// 선급정산금액 합계
			this.dsListSub.setColumn(nrow, "AM_STLSUM", AM_STLTAXBILL + AM_STLVAT + AM_STLBILL + AM_STLETC);
			
			var AM_BILL = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_BILL"),0);
			var AM_AJBILL = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_AJBILL"),0);
			var AM_JBILL = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_JBILL"),0);
			
			// 실안분 계산서
			this.dsListSub.setColumn(nrow, "AM_SBILL", AM_BILL + AM_STLBILL + AM_AJBILL - AM_JBILL);
		}
		// 조정금액 기타금액
		else if(e.columnid == "AM_AJETC")
		{
			var AM_AJTAXBILL = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_AJTAXBILL"),0);
			var AM_AJVAT = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_AJVAT"),0);
			var AM_AJBILL = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_AJBILL"),0);
			var AM_AJETC = nexacro.toNumber(e.newvalue, 0);

			// 조정금액 합계
			this.dsListSub.setColumn(nrow, "AM_AJSUM", AM_AJTAXBILL + AM_AJVAT + AM_AJBILL + AM_AJETC);
			
			var AM_ETC = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_ETC"),0);
			var AM_STLETC = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_STLETC"),0);
			var AM_JETC = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_JETC"),0);
			
			// 실안분 기타금액
			this.dsListSub.setColumn(nrow, "AM_SETC", AM_ETC + AM_STLETC + AM_AJETC - AM_JETC);
		}
		// 선급정산금액 기타금액
		else if(e.columnid == "AM_STLETC")
		{
			var AM_STLTAXBILL = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_STLTAXBILL"),0);
			var AM_STLVAT = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_STLVAT"),0);
			var AM_STLBILL = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_STLBILL"),0);
			var AM_STLETC = nexacro.toNumber(e.newvalue, 0);

			// 선급정산금액 합계
			this.dsListSub.setColumn(nrow, "AM_AJSUM", AM_STLTAXBILL + AM_STLVAT + AM_STLBILL + AM_STLETC);
			
			var AM_ETC = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_ETC"),0);
			var AM_STLETC = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_STLETC"),0);
			var AM_JETC = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_JETC"),0);
			
			// 실안분 기타금액
			this.dsListSub.setColumn(nrow, "AM_SETC", AM_ETC + AM_STLETC + AM_AJETC - AM_JETC);
		}
		//실안분 세금계산서
		else if(e.columnid == "AM_STAXBILL")
		{
			var AM_STAXBILL = nexacro.toNumber(e.newvalue, 0);
			var AM_SVAT = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_SVAT"),0);
			var AM_SBILL = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_SBILL"),0);
			var AM_SETC = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_SETC"),0);
			
			// 실안분 합계
			this.dsListSub.setColumn(nrow, "AM_SSUM", AM_STAXBILL + AM_SVAT + AM_SBILL + AM_SETC);
		}
		//실안분 부가세
		else if(e.columnid == "AM_SVAT")
		{
			var AM_STAXBILL = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_STAXBILL"),0);
			var AM_SVAT = nexacro.toNumber(e.newvalue, 0);
			var AM_SBILL = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_SBILL"),0);
			var AM_SETC = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_SETC"),0);
			
			// 실안분 합계
			this.dsListSub.setColumn(nrow, "AM_SSUM", AM_STAXBILL + AM_SVAT + AM_SBILL + AM_SETC);
		}
		//실안분 계산서
		else if(e.columnid == "AM_SBILL")
		{
			var AM_STAXBILL = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_STAXBILL"),0);
			var AM_SVAT = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_SVAT"),0);
			var AM_SBILL = nexacro.toNumber(e.newvalue, 0);
			var AM_SETC = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_SETC"),0);
			
			// 실안분 합계
			this.dsListSub.setColumn(nrow, "AM_SSUM", AM_STAXBILL + AM_SVAT + AM_SBILL + AM_SETC);
		}
		//실안분 기타금액
		else if(e.columnid == "AM_SETC")
		{
			var AM_STAXBILL = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_STAXBILL"),0);
			var AM_SVAT = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_SVAT"),0);
			var AM_SBILL = nexacro.toNumber(this.dsListSub.getColumn(nrow, "AM_SBILL"),0);
			var AM_SETC = nexacro.toNumber(e.newvalue, 0);
			
			// 실안분 합계
			this.dsListSub.setColumn(nrow, "AM_SSUM", AM_STAXBILL + AM_SVAT + AM_SBILL + AM_SETC);
		}
	}
};


// 아래부터는 확장버튼.
this.fnJtJibun = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	var param = {};
	
	param.CD_SITE = this.dsSearch.getColumn(0, "CD_SITE");
	param.DS_SITE = this.divSearch.form.ccfCD_SITE.form.DSTextBox.text;
	param.YM_WORK = this.dsSearch.getColumn(0, "YM_WORK").substr(0,6);
	
	this.gfnFormOpen("DWD", "DWD_JTMAGAMJIBUN", "", param); 
}

this.fnJtSlip = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	var param = {};
	
	param.CD_SITE = this.dsSearch.getColumn(0, "CD_SITE");
	param.DS_SITE = this.divSearch.form.ccfCD_SITE.form.DSTextBox.text;
	param.YM_WORK = this.dsSearch.getColumn(0, "YM_WORK").substr(0,6);
	
	this.gfnFormOpen("DWD", "DWD_JTSLIP", "", param); 
}

this.fnJtCrt = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	var msg = "현장코드 : [" + this.dsSearch.getColumn(0, "CD_SITE") + "]" + this.divSearch.form.ccfCD_SITE.form.DSTextBox.text
			+ "\n작업년월 : [" + this.dsSearch.getColumn(0, "YM_WORK").substr(0,6) + "]"
			+ "\n안분자료생성 후 대상정보는 수정하실 수 없습니다."
			+ "\n\n안분자료생성 처리하시겠습니까?";
			
	this.gfnConfirm(msg, "fnJt_callback", "CRT_DIV");
}

this.fnJtDel = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	var msg = "현장코드 : [" + this.dsSearch.getColumn(0, "CD_SITE") + "]" + this.divSearch.form.ccfCD_SITE.form.DSTextBox.text
			+ "\n작업년월 : [" + this.dsSearch.getColumn(0, "YM_WORK").substr(0,6) + "]"
			+ "\n\n안분자료삭제 처리하시겠습니까?";
			
	this.gfnConfirm(msg, "fnJt_callback", "CNC_DIV");
}

this.fnJtMagam = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	var msg = "현장코드 : [" + this.dsSearch.getColumn(0, "CD_SITE") + "]" + this.divSearch.form.ccfCD_SITE.form.DSTextBox.text
			+ "\n작업년월 : [" + this.dsSearch.getColumn(0, "YM_WORK").substr(0,6) + "]"
			+ "\n원가안분확정 후 안분자료정보는 수정하실 수 없습니다."
			+ "\n\n원가안분확정 처리하시겠습니까?";
			
	this.gfnConfirm(msg, "fnJt_callback", "OK_MAGAM");
}

this.fnJtMagamCancel = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	var msg = "현장코드 : [" + this.dsSearch.getColumn(0, "CD_SITE") + "]" + this.divSearch.form.ccfCD_SITE.form.DSTextBox.text
			+ "\n작업년월 : [" + this.dsSearch.getColumn(0, "YM_WORK").substr(0,6) + "]"
			+ "\n\n원가안분확정취소 처리하시겠습니까?";
			
	this.gfnConfirm(msg, "fnJt_callback", "CNC_MAGAM");
}

this.fnJt_callback = function(strId, val) {
	if(val == true)
	{
		this.dsExecute.clearData();
		var nrow = this.dsExecute.addRow();
		
		this.dsExecute.setColumn(nrow, "TY_WRK", strId);
		this.dsExecute.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
		this.dsExecute.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
		this.dsExecute.setColumn(nrow, "YM_WORK", this.dsSearch.getColumn(0, "YM_WORK").substr(0,6));

		if (this.dsExecute.rowcount == 0) return;
			
		var strSvcId    = "execute";
		var strSvcType  = "save";
		var inProc		= "_dsProc";
		var inData      = "execute=dsExecute";
		var outData     = "";
		var strArg      = "gubun=" + strId;
		var callBackFnc = "fnCallback";

		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
							strSvcType , 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
							callBackFnc); 	// 통신방법 정의 [생략가능]
	}
}]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DWDPR_JTCOSTDIVDETAIL_MASTER_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">d_select</Col>
            <Col id="SP">DWDPR_JTCOSTDIVDETAIL_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">save</Col>
            <Col id="SP">DWDPR_JTCOSTDIVDETAIL_SAVE</Col>
          </Row>
          <Row>
            <Col id="TARGET">execute</Col>
            <Col id="SP">DWDPR_JTCOSTDIV_EXECUTE</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsListSub" onvaluechanged="dsListSub_onvaluechanged"/>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_SITE" type="STRING" size="256"/>
          <Column id="YM_WORK" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfCD_SITE.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_SITE"/>
      <BindItem id="item1" compid="divSearch.form.ctclYM_WORK.form.TextBox" propid="value" datasetid="dsSearch" columnid="YM_WORK"/>
    </Bind>
  </Form>
</FDL>
