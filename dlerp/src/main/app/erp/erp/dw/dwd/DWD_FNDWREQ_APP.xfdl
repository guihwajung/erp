<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="New Form" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg" formscrolltype="none">
          <Layouts>
            <Layout>
              <Static id="staCD_SITE" taborder="1" text="현장코드" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfCD_SITE" CodeFindName="DZX_CFSITE" AfterCDTextChanged="ccfCD_SITE_AfterCDTextChanged" CDTextWidth="80" taborder="0" left="staCD_SITE:0.0" top="10.0" width="250" height="24.0" FitToContents="true" url="cmm::cmmCodeFind.xfdl" enable="false"/>
              <Static id="staYM_WORK" taborder="1" text="작업년월" left="ccfCD_SITE:0.0" top="10.0" width="92.0" height="24.0" textAlign="center" cssclass="sta_WF_SchLabelE"/>
              <Div id="ctclYM_WORK" taborder="1" left="staYM_WORK:0.0" top="10.0" width="80" height="24.0" url="cmm::cmmCalMM.xfdl" enable="false"/>
              <Static id="staCD_PRGS" taborder="1" text="진행상태" left="ctclYM_WORK:0.0" top="10.0" width="92.0" height="24.0" textAlign="center" cssclass="sta_WF_SchLabel"/>
              <Combo id="ccboCD_PRGS" taborder="1" left="staCD_PRGS:0.0" top="10.0" width="150" height="24.0" innerdataset="dsCD_PRGS" codecolumn="CD_CODE" datacolumn="DS_CODE" index="-1" readonly="false" enable="false"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Div id="divDataApprLeft" taborder="4" left="0" top="0" background="" height="79" border="1px solid #c9c6c3" width="700">
                <Layouts>
                  <Layout>
                    <Static id="staApprNm" taborder="0" text="월별자금청구집계 품의서" left="0" top="4" textDecoration="none" right="0" background="" bottom="0" font="normal 20pt/normal &quot;Arial&quot;" textAlign="center"/>
                  </Layout>
                </Layouts>
              </Div>
              <Div id="divDataAppr" taborder="3" left="divDataApprLeft:10" top="0" right="0" height="80">
                <Layouts>
                  <Layout>
                    <Grid id="objGridAppr" taborder="0" left="0" top="0" bottom="0" right="0"/>
                  </Layout>
                </Layouts>
              </Div>
              <Div id="divData01" taborder="0" left="0" top="divDataAppr:10" height="157" right="0" cssclass="div_DATA_Bg">
                <Layouts>
                  <Layout>
                    <Grid id="objGrid01" taborder="0" left="0" top="5" bottom="0" right="0"/>
                  </Layout>
                </Layouts>
              </Div>
              <Div id="divData03" taborder="0" left="0" bottom="0" height="127" right="0" cssclass="div_DATA_Bg">
                <Layouts>
                  <Layout>
                    <Static id="staTitle" taborder="0" text="※자금소요계획 對 실적" left="0" top="0" width="100.00%" height="30" cssclass="sta_TITLE_Bg" textAlign="left"/>
                    <Grid id="objGrid03" taborder="0" left="0" top="staTitle:5" bottom="0" right="0"/>
                  </Layout>
                </Layouts>
              </Div>
              <Div id="divData02" taborder="0" left="0" top="divData01:5" bottom="divData03:5" right="0" cssclass="div_DATA_Bg">
                <Layouts>
                  <Layout>
                    <Static id="staTitle" taborder="0" text="차이내역" left="0" top="0" width="100.00%" height="30" cssclass="sta_TITLE_Bg" textAlign="left"/>
                    <Grid id="objGrid02" taborder="0" left="0" top="staTitle:5" bottom="0" right="0"/>
                  </Layout>
                </Layouts>
              </Div>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	this.fnSetCombo();
	
	// 타화면에서 오픈시 넘어오는 파라미터 처리
	if(!this.gfnIsNull(this.getOwnerFrame().PARAM01) && !this.gfnIsNull(this.getOwnerFrame().PARAM02)) {
		
		this.dsSearch.setColumn(0, "CD_SITE", this.getOwnerFrame().PARAM01);
		this.divSearch.form.ccfCD_SITE.form.fnCodeFindLoad();
		this.dsSearch.setColumn(0, "YM_WORK", this.getOwnerFrame().PARAM02);
		
		this.dsSearch.setColumn(0, "YN_LINK", this.getOwnerFrame().YN_LINK);	// 화면에서 팝업을 호출할경우 N, 링크를 통해서 화면을 오픈할경우 null 이다
		this.dsSearch.setColumn(0, "ID_AP", this.getOwnerFrame().ID_AP);		// 전자결재문서번호		
	
		this.ccfCD_SITE.form.fnFitToContents();
		
		// 결재상태값 조회 후 그리드 조회한다
		this.fnApprSel();
	}
	else
	{
		var today = this.gfnGetDate();
		this.dsSearch.setColumn(0, "YM_WORK", today.substr(0,6));
	}
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
	//this.FormBtns.Add.set_enable(false);
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btnAprvCmpl = this.gfnFormButtonAdd("btnAprvCmpl", "fnAprvCmpl");
	this.btnAprvCnc = this.gfnFormButtonAdd("btnAprvCnc", "fnAprvCnc");
	this.btnAprvInf = this.gfnFormButtonAdd("btnAprvInf", "fnAprvInf");
	this.btnAprvSang = this.gfnFormButtonAdd("btnAprvSang", "fnAprvSang");
	this.btnApCnl = this.gfnFormButtonAdd("btnApCnl", "fnApCnl");
	this.btnFile = this.gfnFormButtonAdd("btnFile", "fnFile");
};


/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {	
	this.ccfCD_SITE = this.divSearch.form.ccfCD_SITE;
	this.dxGrid = this.divData.form.divData01.form.objGrid01;
	this.dxGrid2 = this.divData.form.divData02.form.objGrid02;
	this.dxGrid3 = this.divData.form.divData03.form.objGrid03;
	
	// 결재관련
	this.dxGridAppr = this.divData.form.divDataAppr.form.objGridAppr;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	// 그리드 초기화
	this.gfnGridInit(this.dxGrid, this.dsList, "DW", "DWD_FNDWREQ");
	this.gfnGridInit(this.dxGrid2, this.dsList1, "DW", "DWD_FNDWREQDIFF");
	this.gfnGridInit(this.dxGrid3, this.dsList2, "DW", "DWD_FNDWREQPLNVSRSLT");
	
	this.dxGrid.EnterCell = "fnGrid_EnterCell";
	this.dxGrid2.EnterCell = "fnGrid_EnterCell";
	this.dxGrid3.EnterCell = "fnGrid_EnterCell";
	
	// 결재관련
	this.gfnGridInit(this.dxGridAppr, this.dsListAplines, "DZ", "DZR_APLINES_01");
	this.dxGridAppr.set_extendsizetype("none");
	this.dxGridAppr.set_scrollbartype("none default");	// 가로 스크롤이 생기지 않게 셋팅
	var colDS_NOTE = this.dxGridAppr.getBindCellIndex("body", "DS_NOTE");
	this.dxGridAppr.setCellProperty("body", colDS_NOTE, "tooltiptext", "expr:DS_NOTE==''?'':DS_NOTE" );	// 의견컬럼 툴팁추가
};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("TY_WRK", "string");
	this.dsSelect.addColumn("CD_SITE", "string");
	this.dsSelect.addColumn("YM_WORK", "string");

	this.dsSave = new Dataset();
	this.dsSave.addColumn("TY_WRK", "string");
	this.dsSave.addColumn("ID_USER", "string");
	this.dsSave.addColumn("CD_SITE", "string");
	this.dsSave.addColumn("YM_WORK", "string");
	this.dsSave.addColumn("CD_REQ", "string");
	this.dsSave.addColumn("AM_CASH_HQ", "bigdecimal");
	this.dsSave.addColumn("AM_NOTE_HQ", "bigdecimal");
	this.dsSave.addColumn("AM_CASH_SIT", "bigdecimal");
	this.dsSave.addColumn("AM_NOTE_SIT", "bigdecimal");
	this.dsSave.addColumn("AM_CASH_BAL", "bigdecimal");
	this.dsSave.addColumn("AM_CASH_UNDSPT", "bigdecimal");
	this.dsSave.addColumn("AM_CASH_SEXP", "bigdecimal");
	this.dsSave.addColumn("AM_MCST", "bigdecimal");
	this.dsSave.addColumn("DS_RMKS", "string");
	
	this.dsSave1 = new Dataset();
	this.dsSave1.addColumn("TY_WRK", "string");
	this.dsSave1.addColumn("ID_USER", "string");
	this.dsSave1.addColumn("CD_SITE", "string");
	this.dsSave1.addColumn("YM_WORK", "string");
	this.dsSave1.addColumn("SN_SEQ", "int");
	this.dsSave1.addColumn("NO_SLIP", "string");
	this.dsSave1.addColumn("CD_VNDR", "string");
	this.dsSave1.addColumn("TY_PAY", "string");
	this.dsSave1.addColumn("AM_SLIP", "bigdecimal");
	this.dsSave1.addColumn("CD_PAY", "string");
	this.dsSave1.addColumn("YN_PRTLPAY", "string");
	this.dsSave1.addColumn("AM_DIFF", "bigdecimal");
	this.dsSave1.addColumn("DS_CTS", "string");
	this.dsSave1.addColumn("DS_RSN", "string");
	this.dsSave1.addColumn("TP_MTD", "string");
	this.dsSave1.addColumn("DT_PAYMENT", "string");
	
	this.dsSave2 = new Dataset();
	this.dsSave2.addColumn("TY_WRK", "string");
	this.dsSave2.addColumn("ID_USER", "string");
	this.dsSave2.addColumn("CD_SITE", "string");
	this.dsSave2.addColumn("YM_WORK", "string");
	this.dsSave2.addColumn("CD_CLS", "string");
	this.dsSave2.addColumn("CD_DIV", "string");
	this.dsSave2.addColumn("DS_RSN", "string");
	
	this.dsSapSave = new Dataset();
	this.dsSapSave.addColumn("TY_WRK", "string");
	this.dsSapSave.addColumn("ID_USER", "string");
	this.dsSapSave.addColumn("MANDT", "string");
	this.dsSapSave.addColumn("PSPID", "string");
	this.dsSapSave.addColumn("ZYYMM", "string");
	this.dsSapSave.addColumn("ZDEGR", "string");
	this.dsSapSave.addColumn("ZGBN", "string");
	this.dsSapSave.addColumn("ZGBN_NM", "string");
	this.dsSapSave.addColumn("ZBON_AMT1", "bigdecimal");
	this.dsSapSave.addColumn("ZBON_AMT2", "bigdecimal");
	this.dsSapSave.addColumn("ZBON_AMT3", "bigdecimal");
	this.dsSapSave.addColumn("ZHUN_AMT1", "bigdecimal");
	this.dsSapSave.addColumn("ZHUN_AMT2", "bigdecimal");
	this.dsSapSave.addColumn("ZHUN_AMT3", "bigdecimal");
	this.dsSapSave.addColumn("ZHUN_AMT4", "bigdecimal");
	this.dsSapSave.addColumn("ZHUN_AMT5", "bigdecimal");
	this.dsSapSave.addColumn("ZHUN_AMT6", "bigdecimal");
	this.dsSapSave.addColumn("ZTOT_AMT1", "bigdecimal");
	this.dsSapSave.addColumn("ZTOT_AMT2", "bigdecimal");
	this.dsSapSave.addColumn("ZTOT_AMT3", "bigdecimal");
	this.dsSapSave.addColumn("ZJAJ_AMT", "bigdecimal");
	this.dsSapSave.addColumn("ZSTS", "string");
	this.dsSapSave.addColumn("ZDOCNUM", "string");
	this.dsSapSave.addColumn("CURRENCY", "string");
	this.dsSapSave.addColumn("AENAM", "string");
	
	this.dsExecute = new Dataset();
	this.dsExecute.addColumn("TY_WRK", "string");
	this.dsExecute.addColumn("ID_USER", "string");
	this.dsExecute.addColumn("CD_SITE", "string");
	this.dsExecute.addColumn("YM_WORK", "string");
	
	this.dsAttchCnt = new Dataset();
	this.dsAttchCnt.addColumn("CD_SITE", "string");
	this.dsAttchCnt.addColumn("YM_WORK", "string");
	
	// 결재관련
	this.dsExecAppr = new Dataset();
	this.dsExecAppr.addColumn("ID_AP", "string");
	this.dsExecAppr.addColumn("V_PARAM01", "string");
	this.dsExecAppr.addColumn("V_PARAM02", "string");
	this.dsExecAppr.addColumn("V_PARAM03", "string");
	this.dsExecAppr.addColumn("V_PARAM04", "string");
	this.dsExecAppr.addColumn("ST_APPR", "string");
	this.dsExecAppr.addColumn("ID_USER", "string");	
	
	// 결재관련 상태
	this.dsSelectAppr = new Dataset();
	this.dsSelectAppr.addColumn("ID_AP", "string");
	this.dsSelectAppr.addColumn("ID_USER", "string");
	
	// 결재선 그리드
	this.dsAplines = new Dataset();
	this.dsAplines.addColumn("ID_AP", "string");
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	
	this.dsSelect.setColumn(0, "TY_WRK", "Q");
	this.dsSelect.setColumn(0, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
	this.dsSelect.setColumn(0, "YM_WORK", this.dsSearch.getColumn(0, "YM_WORK").substr(0,6));
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc);   // 통신방법 정의 [생략가능]
}

this.fnSelect1 = function() {
	if (!this.fnSelectValidate()) return false;
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	
	this.dsSelect.setColumn(0, "TY_WRK", "Q");
	this.dsSelect.setColumn(0, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
	this.dsSelect.setColumn(0, "YM_WORK", this.dsSearch.getColumn(0, "YM_WORK").substr(0,6));
	
	var strSvcId    = "select1";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select1=dsSelect";
	var outData     = "dsList1=select10";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc);   // 통신방법 정의 [생략가능]
}

this.fnSelect2 = function() {
	if (!this.fnSelectValidate()) return false;
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	
	this.dsSelect.setColumn(0, "TY_WRK", "Q");
	this.dsSelect.setColumn(0, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
	this.dsSelect.setColumn(0, "YM_WORK", this.dsSearch.getColumn(0, "YM_WORK").substr(0,6));
	
	var strSvcId    = "select2";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select2=dsSelect";
	var outData     = "dsList2=select20";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	var nrow = this.gfnGridAdd(this.dxGrid2); // top (default), bottom, current
}

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	//this.gfnGridDel(this.dxGrid);
	
}

/*
 *	저장 버튼
 */
this.fnSave = function() {
	if (!this.gfnGridValidate(this.dxGrid)) return;
	
	this.dsSave.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "I" :
			case "U" :
			case "D" :
				var nrow = this.dsSave.addRow();
				this.dsSave.setColumn(nrow, "TY_WRK", flag);
				this.dsSave.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
				this.dsSave.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
				this.dsSave.setColumn(nrow, "YM_WORK", this.dsSearch.getColumn(0, "YM_WORK").substr(0,6));
				this.dsSave.setColumn(nrow, "CD_REQ", this.dsList.getColumn(i, "CD_REQ"));
				this.dsSave.setColumn(nrow, "AM_CASH_HQ", this.dsList.getColumn(i, "AM_CASH_HQ"));
				this.dsSave.setColumn(nrow, "AM_NOTE_HQ", this.dsList.getColumn(i, "AM_NOTE_HQ"));
				this.dsSave.setColumn(nrow, "AM_CASH_SIT", this.dsList.getColumn(i, "AM_CASH_SIT"));
				this.dsSave.setColumn(nrow, "AM_NOTE_SIT", this.dsList.getColumn(i, "AM_NOTE_SIT"));
				this.dsSave.setColumn(nrow, "AM_CASH_BAL", this.dsList.getColumn(i, "AM_CASH_BAL"));
				this.dsSave.setColumn(nrow, "AM_CASH_UNDSPT", this.dsList.getColumn(i, "AM_CASH_UNDSPT"));
				this.dsSave.setColumn(nrow, "AM_CASH_SEXP", this.dsList.getColumn(i, "AM_CASH_SEXP"));
				this.dsSave.setColumn(nrow, "AM_MCST", this.dsList.getColumn(i, "AM_MCST"));
				this.dsSave.setColumn(nrow, "DS_RMKS", this.dsList.getColumn(i, "DS_RMKS"));
		}
	}
		
		var strSvcId    = "save";
		var strSvcType  = "save";
		var inProc		= "_dsProc";
		var inData      = "save=dsSave";
		var outData     = "";
		var strArg      = "";
		var callBackFnc = "fnCallback";
		
		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
							strSvcType , 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
							callBackFnc); // 통신방법 정의 [생략가능]
}

this.fnSave1 = function() {
	if (!this.gfnGridValidate(this.dxGrid2)) return;
	
	this.dsSave1.clearData();

	for (var i = 0; i < this.dsList1.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList1, i);
		switch(flag) {
			case "I" :
			case "U" :
			case "D" :
				var nrow = this.dsSave1.addRow();
				this.dsSave1.setColumn(nrow, "TY_WRK", flag);
				this.dsSave1.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
				this.dsSave1.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
				this.dsSave1.setColumn(nrow, "YM_WORK", this.dsSearch.getColumn(0, "YM_WORK").substr(0,6));
				this.dsSave1.setColumn(nrow, "SN_SEQ", this.dsList1.getColumn(i, "SN_SEQ"));
				this.dsSave1.setColumn(nrow, "NO_SLIP", this.dsList1.getColumn(i, "NO_SLIP"));
				this.dsSave1.setColumn(nrow, "CD_VNDR", this.dsList1.getColumn(i, "CD_VNDR"));
				this.dsSave1.setColumn(nrow, "TY_PAY", this.dsList1.getColumn(i, "TY_PAY"));
				this.dsSave1.setColumn(nrow, "AM_SLIP", this.dsList1.getColumn(i, "AM_SLIP"));
				this.dsSave1.setColumn(nrow, "CD_PAY", this.dsList1.getColumn(i, "CD_PAY"));
				this.dsSave1.setColumn(nrow, "YN_PRTLPAY", this.dsList1.getColumn(i, "YN_PRTLPAY"));
				this.dsSave1.setColumn(nrow, "AM_DIFF", this.dsList1.getColumn(i, "AM_DIFF"));
				this.dsSave1.setColumn(nrow, "DS_CTS", this.dsList1.getColumn(i, "DS_CTS"));
				this.dsSave1.setColumn(nrow, "DS_RSN", this.dsList1.getColumn(i, "DS_RSN"));
				this.dsSave1.setColumn(nrow, "TP_MTD", this.dsList1.getColumn(i, "TP_MTD"));
				this.dsSave1.setColumn(nrow, "DT_PAYMENT", this.dsList1.getColumn(i, "DT_PAYMENT"));
		}
	}
		
		var strSvcId    = "save1";
		var strSvcType  = "save";
		var inProc		= "_dsProc";
		var inData      = "save1=dsSave1";
		var outData     = "";
		var strArg      = "";
		var callBackFnc = "fnCallback";
		
		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
							strSvcType , 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
							callBackFnc); // 통신방법 정의 [생략가능]
}

this.fnSave2 = function() {
	if (!this.gfnGridValidate(this.dxGrid3)) return;
	
	this.dsSave2.clearData();
	
	for (var i = 0; i < this.dsList2.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList2, i);
		switch(flag) {
			case "I" :
			case "U" :
			case "D" :
				var nrow = this.dsSave2.addRow();
				this.dsSave2.setColumn(nrow, "TY_WRK", flag);
				this.dsSave2.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
				this.dsSave2.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
				this.dsSave2.setColumn(nrow, "YM_WORK", this.dsSearch.getColumn(0, "YM_WORK"));
				this.dsSave2.setColumn(nrow, "CD_CLS", this.dsList2.getColumn(i, "CD_CLS"));
				this.dsSave2.setColumn(nrow, "CD_DIV", this.dsList2.getColumn(i, "CD_DIV"));
				this.dsSave2.setColumn(nrow, "DS_RSN", this.dsList2.getColumn(i, "DS_RSN"));
		}
	}
		
		var strSvcId    = "save2";
		var strSvcType  = "save";
		var inProc		= "_dsProc";
		var inData      = "save2=dsSave2";
		var outData     = "";
		var strArg      = "";
		var callBackFnc = "fnCallback";
		
		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
							strSvcType , 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
							callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {
	var validate = true;
	
	if (this.gfnIsNull(this.dsSearch.getColumn(0, "CD_SITE"))) {
		validate = false;
		//Alert후 실행할 처리
		this.fnVaidateCallback = function() {
			this.divSearch.form.ccfCD_SITE.form.CDTextBox.setFocus();
		}
		this.gfnAlert("현장코드를 입력하세요.", "fnVaidateCallback");
	}
	else if (this.gfnIsNull(this.dsSearch.getColumn(0, "YM_WORK"))) {
		validate = false;
		//Alert후 실행할 처리
		this.fnVaidateCallback = function() {
			this.divSearch.form.ctclYM_WORK.form.TextBox.setFocus();
		}
		this.gfnAlert("작업년월을 입력하세요.", "fnVaidateCallback");
	}
	
	return validate;
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		if(this.dsList.rowcount < 1) return;
	
		this.dsSearch.setColumn(0, "CD_RPGS", this.dsList.getColumn(0, "CD_PRGS"));

 		this.fnSelect1();
 		this.fnSelect2();
		
		// 첨부파일 갯수 조회
		this.fnAttchCnt();
		
		// 확장버튼 활성화 or 비활성화 처리
		this.fnBtnEnable();	// 결재관련
		
		// 결재선 조회
		this.fnSelectAppr();
	}
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.fnSave1();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "save1") {
		if (errorCode == 0) {
			this.fnSave2();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "save2") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "combo") {
		this.divSearch.form.ccboCD_PRGS.set_index(0);
	}
	else if(svcID == "select_sap") {
		if (errorCode == 0) {
			this.fnSap();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "sap") {
		if(this.dsSap.rowcount < 1) return;
		
		this.fnSapSave();
	}
	else if(svcID == "sap_save") {
		if (errorCode == 0) {
			this.fnExecute("AGG");
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "execute") {
		if (errorCode == 0) {		
			this.fnExecute_callback = function()
			{	
				this.FormBtns.Select.click();
			}
		
			this.gfnAlert("자금청구집계가 정상처리되었습니다.", "", "", "fnExecute_callback");
		} else {
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "attch_cnt") {
		if(this.dsListAttchCnt.rowcount > 0) {
			this.btnFile.set_text("파일첨부("+this.dsListAttchCnt.getColumn(0, "CNT")+")");
		}else{
			this.btnFile.set_text("파일첨부");
		}
		this.btnFile.set_fittocontents("width");	// 버튼 텍스트 길이에 맞게 길이 자동조정
		this.divTopBtn.form.resetScroll();	// 확장버튼 영역DIV
	}	
	else if(svcID == "aplines") {
		if(this.dsListAplines.rowcount > 0) {
			this.dxGridAppr.setRealRowSize(0, 24);
		}		
	}	
	else if (svcID == "apprsel") {	// 결재관련
		// 링크 통해서 화면이 오픈되었을 경우에 this.fnExec() 실행한다
		if(this.dsSearch.getColumn(0, "YN_LINK") != "N"){
			if(this.dsListAppr.rowcount < 1){
				this.fnApprselnullCallback = function() {
					this.getParentContext().close(true);
					return;
				}
				this.gfnAlert("품의서를 열수없습니다.", "fnApprselnullCallback");				
			}
			
			if(this.dsListAppr.getColumn(0,"ST_APPR") == "05"){
				this.fnApprselCallback = function() {
					this.getParentContext().close(true);
				}
				this.gfnAlert("결재가 취소되었습니다.", "fnApprselCallback");
			}else{
				this.fnExecAppr();
			}
		}else{
			this.FormBtns.Select.click();
		}
	}	
	else if(svcID == "execAppr") {	// 결재관련	
		if (errorCode == 0) {
			// 화면 로드시에 링크 통해서 화면이 오픈되었을경우에만 처리후에 조회한다
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {

//     if (id == "ccfNO_BID") {
// 		if(this.gfnIsNull(this.dsSearch.getColumn(0, "CD_SITE")))
// 		{
// 			this.gfnAlert("현장코드를 입력해주세요.");
// 			return false;
// 		}
//         dsUserParam.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
//     }
	
    return true;
}

this.fnAfterCDTextChanged = function(id, codeFindData) {
// 	if(id == "ccfCD_SITE") {
// 		// 현장코드 변경시 입찰번호 초기화
// 		this.ccfNO_BID.form.fnCodeFindClear();
// 	}
}

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
 this.fnGrid_EnterCell = function(obj:nexacro.Grid, row, cell) {
	/*
	var colnm = this.gfnGridGetBindColumnNameByIndex(this.dxGrid, cell);
	
	if(this.dsList.getColumn(e.row, "YN_EDIT") != "Y") {
		return false;
	}
	*/
	return false;
}
/************************************************************************
 * 기타 이벤트
 ************************************************************************/
 
 
this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
		this.gfnGridClear(this.dxGrid2);	
		this.gfnGridClear(this.dxGrid3);
		
	}
};

this.fnSetCombo = function() {
	
	this.dsCombo = new Dataset();
	this.dsCombo.addColumn("CD_SYSTEM", "string");
	this.dsCombo.addColumn("CD_TYPE", "string");
	this.dsCombo.addColumn("YN_USE", "string");
	this.dsCombo.addColumn("YN_ALL", "string");
	
	this.dsCombo.addRow();
	this.dsCombo.setColumn(0, "CD_SYSTEM", "DW");
	this.dsCombo.setColumn(0, "CD_TYPE", "69");
	this.dsCombo.setColumn(0, "YN_USE", "Y");
	this.dsCombo.setColumn(0, "YN_ALL", "N");
	
	var strSvcId    = "combo";
	var strSvcType  = "select";
	var inProc		= "_dsProc";
	var inData      = "combo=dsCombo";
	var outData     = "dsCD_PRGS=combo0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

this.fnFndWreqAgg = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	if (!this.fnSelectValidate()) return false;
	
	var msg = "현장코드 : [" + this.dsSearch.getColumn(0, "CD_SITE") + "] " + this.divSearch.form.ccfCD_SITE.form.DSTextBox.text + "\n"
			+ "작업년월 : [" + this.dsSearch.getColumn(0, "YM_WORK").substr(0,6) + "]" + "\n"
			+ "기존 자료 삭제 후 재집계 처리 됩니다. \n\n"
			+ "자급첨구집계 처리 하시겠습니까?";
			
	this.gfnConfirm(msg, "fnFndWreqAgg_callback");
}

this.fnFndWreqAgg_callback = function(strId, val)
{
	if(val == true)
	{
		this.dsSelectSap = new Dataset();
		this.dsSelectSap.addColumn("TY_WRK", "string");
		this.dsSelectSap.addColumn("DS_PARAM", "string");
		this.dsSelectSap.addColumn("DS_VALUE", "string");
	
		this.dsSelectSap.clearData();
		this.dsSelectSap.addRow();
		
		var ds_value = [];
		ds_value.push(this.dsSearch.getColumn(0, "CD_SITE"));
		ds_value.push(this.dsSearch.getColumn(0, "YM_WORK").substr(0,6));
		
		this.dsSelectSap.setColumn(0, "TY_WRK", "Q");
		this.dsSelectSap.setColumn(0, "DS_PARAM", this.FormInfo.DS_PARAM);
		this.dsSelectSap.setColumn(0, "DS_VALUE", ds_value.join(','));
		
		// SAP 호출
		var strSvcId    = "select_sap";
		var strSvcType  = "select";
		var inProc		= "_dsProc";
		var inData      = "select_sap=dsSelectSap";
		var outData     = "dsFunc=select_sap0 dsInParam=select_sap1";
		var strArg      = "";
		var callBackFnc = "fnCallback";
		
		this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
							strSvcType , 	// transaction을 요청할 구분
							inProc,			// Procedure 정보 Dataset 이름
							inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
							outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
							strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
							callBackFnc); // 통신방법 정의 [생략가능]
	}
}


this.fnUnpdStmHq = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	var param = {};
	
	param.CD_SITE = this.dsSearch.getColumn(0, "CD_SITE");
	param.DS_SITE = this.divSearch.form.ccfCD_SITE.form.DSTextBox.text;
	param.DT_MAGAM = this.gfnGetLastDate(this.dsSearch.getColumn(0, "YM_WORK").substr(0,6));

	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DWD_ZPSR9350", "", param);
}

this.fnUnpdStmSit = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	var param = {};
	
	param.CD_SITE = this.dsSearch.getColumn(0, "CD_SITE");
	param.DS_SITE = this.divSearch.form.ccfCD_SITE.form.DSTextBox.text;
	param.DT_MAGAM = this.gfnGetLastDate(this.dsSearch.getColumn(0, "YM_WORK").substr(0,6));

	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DWD_ZPSR1020", "", param);
}

this.fnUnpdStmDm = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	var param = {};
	
	param.CD_SITE = this.dsSearch.getColumn(0, "CD_SITE");
	param.DS_SITE = this.divSearch.form.ccfCD_SITE.form.DSTextBox.text;
	param.DT_MAGAM = this.gfnGetLastDate(this.dsSearch.getColumn(0, "YM_WORK").substr(0,6));

	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DWD_ZPSR6350", "", param);
}

this.fnFndWreqChkLst = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	var param = {};
	
	param.CD_SITE = this.dsSearch.getColumn(0, "CD_SITE");
	param.DS_SITE = this.divSearch.form.ccfCD_SITE.form.DSTextBox.text;
	param.DT_MAGAM = this.gfnGetLastDate(this.dsSearch.getColumn(0, "YM_WORK").substr(0,6));

	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DWD_ZPSR6060", "", param);
}

this.fnFndReqDpln = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	var param = {};
	
	param.CD_SITE = this.dsSearch.getColumn(0, "CD_SITE");
	param.DS_SITE = this.divSearch.form.ccfCD_SITE.form.DSTextBox.text;
	param.YM_WORK = this.dsSearch.getColumn(0, "YM_WORK").substr(0,6);

	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DWD_FNDREQDPLN", "", param);
}

this.fnFndReqSexp = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	var param = {};
	
	param.CD_SITE = this.dsSearch.getColumn(0, "CD_SITE");
	param.DS_SITE = this.divSearch.form.ccfCD_SITE.form.DSTextBox.text;
	param.YM_WORK = this.dsSearch.getColumn(0, "YM_WORK");
	param.FR_WORK = this.dsSearch.getColumn(0, "YM_WORK").substr(0,4) + "01";
	
	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DWD_FNDREQSEXP", "", param);
}

this.dsList_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
 	if(this.dsList.rowcount < 1) return;
 	
 	if(e.oldvalue != e.newvalue)
 	{
	}
};

this.fnSap = function() {

	this._dsProcSap.clearData();
	var nrow = this._dsProcSap.addRow();
	this._dsProcSap.setColumn(nrow, "TARGET", "select");
	this._dsProcSap.setColumn(nrow, "SP", this.dsFunc.getColumn(0, "NM_RFC"));
	
	this.dsSelectSap = new Dataset();
	
	// IN 파라미터 셋팅
	for(var i = 0 ; i < this.dsInParam.rowcount; i++) {
		this.dsSelectSap.addColumn(this.dsInParam.getColumn(i, "IN_PARAM"), "string");
	}
	
	nrow = this.dsSelectSap.addRow();	
	for(var i = 0 ; i < this.dsInParam.rowcount; i++) {
		this.dsSelectSap.setColumn(nrow, this.dsInParam.getColumn(i, "IN_PARAM"), this.dsInParam.getColumn(i, "IN_VALUE"));
	}	
	
	// SAP 호출
	var strSvcId    = "sap";
	var strSvcType  = "sap";
	var inProc		= "_dsProcSap";
	var inData      = "select=dsSelectSap";
	var outData     = "dsExport=export dsSap=OT_ITAB";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

this.fnSapSave = function()
{
	this.dsSapSave.clearData();
	
	for (var i = 0; i < this.dsSap.rowcount; i++) {
		var nrow = this.dsSapSave.addRow();
		this.dsSapSave.setColumn(nrow, "TY_WRK", "I");
		this.dsSapSave.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
		this.dsSapSave.setColumn(nrow, "MANDT", this.dsSap.getColumn(i, "MANDT"));
		this.dsSapSave.setColumn(nrow, "PSPID", this.dsSap.getColumn(i, "PSPID"));
		this.dsSapSave.setColumn(nrow, "ZYYMM", this.dsSap.getColumn(i, "ZYYMM"));
		this.dsSapSave.setColumn(nrow, "ZDEGR", this.dsSap.getColumn(i, "ZDEGR"));
		this.dsSapSave.setColumn(nrow, "ZGBN", this.dsSap.getColumn(i, "ZGBN"));
		this.dsSapSave.setColumn(nrow, "ZGBN_NM", this.dsSap.getColumn(i, "ZGBN_NM"));
		this.dsSapSave.setColumn(nrow, "ZBON_AMT1", this.dsSap.getColumn(i, "ZBON_AMT1"));
		this.dsSapSave.setColumn(nrow, "ZBON_AMT2", this.dsSap.getColumn(i, "ZBON_AMT2"));
		this.dsSapSave.setColumn(nrow, "ZBON_AMT3", this.dsSap.getColumn(i, "ZBON_AMT3"));
		this.dsSapSave.setColumn(nrow, "ZHUN_AMT1", this.dsSap.getColumn(i, "ZHUN_AMT1"));
		this.dsSapSave.setColumn(nrow, "ZHUN_AMT2", this.dsSap.getColumn(i, "ZHUN_AMT2"));
		this.dsSapSave.setColumn(nrow, "ZHUN_AMT3", this.dsSap.getColumn(i, "ZHUN_AMT3"));
		this.dsSapSave.setColumn(nrow, "ZHUN_AMT4", this.dsSap.getColumn(i, "ZHUN_AMT4"));
		this.dsSapSave.setColumn(nrow, "ZHUN_AMT5", this.dsSap.getColumn(i, "ZHUN_AMT5"));
		this.dsSapSave.setColumn(nrow, "ZHUN_AMT6", this.dsSap.getColumn(i, "ZHUN_AMT6"));
		this.dsSapSave.setColumn(nrow, "ZTOT_AMT1", this.dsSap.getColumn(i, "ZTOT_AMT1"));
		this.dsSapSave.setColumn(nrow, "ZTOT_AMT2", this.dsSap.getColumn(i, "ZTOT_AMT2"));
		this.dsSapSave.setColumn(nrow, "ZTOT_AMT3", this.dsSap.getColumn(i, "ZTOT_AMT3"));
		this.dsSapSave.setColumn(nrow, "ZJAJ_AMT", this.dsSap.getColumn(i, "ZJAJ_AMT"));
		this.dsSapSave.setColumn(nrow, "ZSTS", this.dsSap.getColumn(i, "ZSTS"));
		this.dsSapSave.setColumn(nrow, "ZDOCNUM", this.dsSap.getColumn(i, "ZDOCNUM"));
		this.dsSapSave.setColumn(nrow, "CURRENCY", this.dsSap.getColumn(i, "CURRENCY"));
		this.dsSapSave.setColumn(nrow, "AENAM", this.dsSap.getColumn(i, "AENAM"));
	}
		
	var strSvcId    = "sap_save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "sap_save=dsSapSave";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

this.fnExecute = function(ty_wrk)
{
	this.dsExecute.clearData();
	
	var nrow = this.dsExecute.addRow();
	this.dsExecute.setColumn(nrow, "TY_WRK", ty_wrk);
	this.dsExecute.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
	this.dsExecute.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
	this.dsExecute.setColumn(nrow, "YM_WORK", this.dsSearch.getColumn(0, "YM_WORK").substr(0,6));

	var strSvcId    = "execute";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "execute=dsExecute";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

this.fnFile = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	
	var fileManager = {};
	
    fileManager.CD_GUBUN = "DW15";
	fileManager.CD_DIR = [this.dsSearch.getColumn(0,"CD_SITE"), this.dsSearch.getColumn(0, "YM_WORK").substr(0,6)];
	
	if(!this.gfnIsNull(this.dsSearch.getColumn(0, "ID_AP"))) {
		// 결제상태가 01,02,03일때만 첨부못하고 다운로드만 가능
		if(this.dsListAppr.getColumn(0, "ST_APPR") == "01" || this.dsListAppr.getColumn(0, "ST_APPR") == "02" || this.dsListAppr.getColumn(0, "ST_APPR") == "03"){			
			fileManager.IS_READONLY = true;
		}else{			
			fileManager.IS_READONLY = false;
		}		
	} else {
		fileManager.IS_READONLY = false;
	}	
	
    this.gfnFileManager(fileManager, "fnFileCallback");	
};


this.fnFileCallback = function() {
	// 첨부파일 갯수 조회
	this.fnAttchCnt();
	
	//this.fnSelect();
};

// 첨부파일 갯수 조회
this.fnAttchCnt = function() {	
	this.dsAttchCnt.clearData();
	this.dsAttchCnt.addRow();
	
	this.dsAttchCnt.setColumn(0, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
	this.dsAttchCnt.setColumn(0, "YM_WORK", this.dsSearch.getColumn(0, "YM_WORK").substr(0,6));
		
	var strSvcId    = "attch_cnt";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "attch_cnt=dsAttchCnt";
	var outData     = "dsListAttchCnt=attch_cnt0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}


//*** 아래는 결재관련 소스 ***//

 // 승인 버튼 클릭 이벤트
 this.fnAprvCmpl = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	// 선택된 row가 있을 경우에만 팝업을 띄움
	//if (!this.gfnGridIsRow(this.dxGrid)) { return false; }

	var param = {};
	
	param.ID_AP = this.dsSearch.getColumn(0, "ID_AP");
	param.V_PARAM01 = this.dsSearch.getColumn(0, "CD_SITE");
	param.V_PARAM02 = this.dsSearch.getColumn(0, "YM_WORK").substr(0,6);
	param.V_PARAM03 = "";
	param.V_PARAM04 = "";
	param.ST_APPR = "03";

	this.gfnFormOpenNonAuth("DZR", "DZR_AP_NOTE", "fnAprvDialogCallback", param, 430, 210);
}

 // 반려 버튼 클릭 이벤트
 this.fnAprvCnc = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	// 선택된 row가 있을 경우에만 팝업을 띄움
	//if (!this.gfnGridIsRow(this.dxGrid)) { return false; }
	
	var param = {};
	
	param.ID_AP = this.dsSearch.getColumn(0, "ID_AP");
	param.V_PARAM01 = this.dsSearch.getColumn(0, "CD_SITE");
	param.V_PARAM02 = this.dsSearch.getColumn(0, "YM_WORK").substr(0,6);
	param.V_PARAM03 = "";
	param.V_PARAM04 = "";
	param.ST_APPR = "04";

	this.gfnFormOpenNonAuth("DZR", "DZR_AP_NOTE", "fnAprvDialogCallback", param, 430, 210);
}

 // 결재취소 버튼 클릭 이벤트
 this.fnApCnl = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	// 선택된 row가 있을 경우에만 팝업을 띄움
	//if (!this.gfnGridIsRow(this.dxGrid)) { return false; }
	
	var param = {};
	
	param.ID_AP = this.dsSearch.getColumn(0, "ID_AP");
	param.V_PARAM01 = this.dsSearch.getColumn(0, "CD_SITE");
	param.V_PARAM02 = this.dsSearch.getColumn(0, "YM_WORK").substr(0,6);
	param.V_PARAM03 = "";
	param.V_PARAM04 = "";
	param.ST_APPR = "05";

	this.gfnFormOpenNonAuth("DZR", "DZR_AP_NOTE", "fnAprvDialogCallback", param, 430, 210);
}


this.fnAprvDialogCallback = function(svcID, value) {	
	// 리턴값	
	if(value){	
		this.getParentContext().close(true);
	}
};

 // 결재정보 버튼 클릭 이벤트
 this.fnAprvInf = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	// 선택된 row가 있을 경우에만 팝업을 띄움
	//if (!this.gfnGridIsRow(this.dxGrid)) { return false; }
		
	var param = {};
	
	param.ID_AP = this.dsListAppr.getColumn(0, "ID_AP");	

	this.gfnFormOpenNonAuth("DZR", "DZR_APLINES", "", param, 830, 400);
}


// 결제상신
 this.fnAprvSang = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	//if (!this.gfnGridIsRow(this.dxGrid)) { return false; }

	var param = {};
	var nRow = this.dsList.rowposition;
	
	param.ID_AP_TYPE = "DW04";
	param.V_PARAM01 = this.dsSearch.getColumn(0, "CD_SITE");
	param.V_PARAM02 = this.dsSearch.getColumn(0, "YM_WORK").substr(0,6);
	param.V_PARAM03 = "";
	param.V_PARAM04 = "";
	param.DS_TITLE =  "월별자금청구집계 품의서";

	this.gfnFormOpenNonAuth("DZR", "DZR_AP_REQUEST", "fnDialogCallback", param, 900, 650);
 }
 
 this.fnDialogCallback = function(svcID, value) {
	// 리턴값
	if(value == true){
		this.getParentContext().close(true);
	}
};

// 결재상태값 조회
this.fnApprSel = function() {
	this.dsSelectAppr.clearData();
	this.dsSelectAppr.addRow();	
	
	this.dsSelectAppr.setColumn(0, "ID_AP", this.dsSearch.getColumn(0, "ID_AP"));	
	this.dsSelectAppr.setColumn(0, "ID_USER", this.AuthClient.ID_USER);

	var strSvcId    = "apprsel";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "appr_select=dsSelectAppr";
	var outData     = "dsListAppr=appr_select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

// 확장버튼 활성화 or 비활성화처리
this.fnBtnEnable = function() {
	if(this.gfnIsNull(this.dsListAppr.getColumn(0, "ID_AP"))){	// 결재번호
		this.btnAprvCmpl.set_enable(false);		// 승인(03)
		this.btnAprvCnc.set_enable(false);		// 반려(04)
		this.btnApCnl.set_enable(false);		// 결제취소(05)
		this.btnAprvInf.set_enable(false);		// 결제정보
		this.btnAprvSang.set_enable(true);		// 결제상신
	}else{
		if(this.dsListAppr.getColumn(0, "ST_APPR") == "01"){	// 결재상태
			if(this.dsListAppr.getColumn(0, "YN_USER") == "Y"){				
				if(this.dsListAppr.getColumn(0, "YN_APP") == "Y"){
					this.btnAprvCmpl.set_enable(true);
				}else{
					this.btnAprvCmpl.set_enable(false);
				}
				
				this.btnAprvCnc.set_enable(false);
				this.btnApCnl.set_enable(true);				
			}else{		
				if(this.dsListAppr.getColumn(0, "YN_APP") == "Y"){
					this.btnAprvCmpl.set_enable(true);
					this.btnAprvCnc.set_enable(true);
				}else{
					this.btnAprvCmpl.set_enable(false);
					this.btnAprvCnc.set_enable(false);
				}
				
				this.btnApCnl.set_enable(false);				
			}
			
			this.btnAprvInf.set_enable(true);
			this.btnAprvSang.set_enable(false);			
		}else if(this.dsListAppr.getColumn(0, "ST_APPR") == "02"){
			if(this.dsListAppr.getColumn(0, "YN_USER") == "Y"){				
				if(this.dsListAppr.getColumn(0, "YN_APP") == "Y"){
					this.btnAprvCmpl.set_enable(true);
				}else{
					this.btnAprvCmpl.set_enable(false);
				}
				
				this.btnAprvCnc.set_enable(false);
				this.btnApCnl.set_enable(false);				
			}else{		
				if(this.dsListAppr.getColumn(0, "YN_APP") == "Y"){
					this.btnAprvCmpl.set_enable(true);
					this.btnAprvCnc.set_enable(true);
				}else{
					this.btnAprvCmpl.set_enable(false);
					this.btnAprvCnc.set_enable(false);
				}
				
				this.btnApCnl.set_enable(false);				
			}
			
			this.btnAprvInf.set_enable(true);
			this.btnAprvSang.set_enable(false);
		}else if(this.dsListAppr.getColumn(0, "ST_APPR") == "03"){
			this.btnAprvCmpl.set_enable(false);
			this.btnAprvCnc.set_enable(false);
			this.btnApCnl.set_enable(false);
			this.btnAprvInf.set_enable(true);
			this.btnAprvSang.set_enable(false);
		}else if(this.dsListAppr.getColumn(0, "ST_APPR") == "04"){
			this.btnAprvCmpl.set_enable(false);
			this.btnAprvCnc.set_enable(false);
			this.btnApCnl.set_enable(false);
			this.btnAprvInf.set_enable(true);
			this.btnAprvSang.set_enable(true);
			this.btnAprvSang.set_text("재상신");	// 반려 상태일때는 결재상신 버튼이 재상신으로 셋팅한다
		}else if(this.dsListAppr.getColumn(0, "ST_APPR") == "05"){
			this.btnAprvCmpl.set_enable(false);
			this.btnAprvCnc.set_enable(false);
			this.btnApCnl.set_enable(false);
			this.btnAprvInf.set_enable(false);
			this.btnAprvSang.set_enable(true);
		}
	}	
}


/*
 *	결재완료 or 취소 처리
 */
this.fnExecAppr = function() {

	this.dsExecAppr.clearData();
	
	this.dsExecAppr.addRow();
	
	this.dsExecAppr.setColumn(0, "ID_AP", this.dsSearch.getColumn(0, "ID_AP"));
	this.dsExecAppr.setColumn(0, "V_PARAM01", this.dsSearch.getColumn(0, "CD_SITE"));
	this.dsExecAppr.setColumn(0, "V_PARAM02", this.dsSearch.getColumn(0, "YM_WORK").substr(0,6));
	this.dsExecAppr.setColumn(0, "V_PARAM03", "");
	this.dsExecAppr.setColumn(0, "V_PARAM04", "");
	this.dsExecAppr.setColumn(0, "ST_APPR", "02");
	this.dsExecAppr.setColumn(0, "ID_USER", this.AuthClient.ID_USER);
	
	if (this.dsExecAppr.rowcount == 0) return;
	
	var strSvcId    = "execAppr";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "execAppr=dsExecAppr";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

 /*
  *	결재선그리드 조회
  */
this.fnSelectAppr = function() {	
	this.dsAplines.clearData();
	this.dsAplines.addRow();
	
	this.dsAplines.setColumn(0, "ID_AP", this.dsSearch.getColumn(0, "ID_AP"));
		
	var strSvcId    = "aplines";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "aplines=dsAplines";
	var outData     = "dsListAplines=aplines0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}


]]></Script>
    <Objects>
      <Dataset id="dsList" onvaluechanged="dsList_onvaluechanged"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DWDPR_FNDWREQ_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">save</Col>
            <Col id="SP">DWDPR_FNDWREQ_SAVE</Col>
          </Row>
          <Row>
            <Col id="TARGET">execute</Col>
            <Col id="SP">DWDPR_FNDWREQ_EXECUTE</Col>
          </Row>
          <Row>
            <Col id="TARGET">sap_save</Col>
            <Col id="SP">DWDPR_FNDWREQAGG_SAP_SAVE</Col>
          </Row>
          <Row>
            <Col id="TARGET">select1</Col>
            <Col id="SP">DWDPR_FNDWREQDIFF_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">save1</Col>
            <Col id="SP">DWDPR_FNDWREQDIFF_SAVE</Col>
          </Row>
          <Row>
            <Col id="TARGET">select2</Col>
            <Col id="SP">DWDPR_FNDWREQPLNVSRSLT_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">save2</Col>
            <Col id="SP">DWDPR_FNDWREQPLNVSRSLT_SAVE</Col>
          </Row>
          <Row>
            <Col id="TARGET">combo</Col>
            <Col id="SP">DZXPR_COMBO_COMMON_SELECT_01</Col>
          </Row>
          <Row>
            <Col id="TARGET">select_sap</Col>
            <Col id="SP">DWXPR_RFCINFO_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">appr_select</Col>
            <Col id="SP">DZRPR_AP_STATE_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">aplines</Col>
            <Col id="SP">DZRPR_APPLINES_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">execAppr</Col>
            <Col id="SP">DZZPR_APPROVAL_CALLBACK</Col>
          </Row>
          <Row>
            <Col id="SP">DZRPR_FILE_SELECT_01</Col>
            <Col id="TARGET">attch_cnt</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_SITE" type="STRING" size="256"/>
          <Column id="YM_WORK" type="STRING" size="256"/>
          <Column id="YN_LINK" type="STRING" size="256"/>
          <Column id="ID_AP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
      <Dataset id="dsList1"/>
      <Dataset id="dsList2"/>
      <Dataset id="dsCD_PRGS">
        <ColumnInfo>
          <Column id="CD_CODE" type="STRING" size="256"/>
          <Column id="DS_CODE" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="dsFunc"/>
      <Dataset id="dsInParam"/>
      <Dataset id="_dsProcSap">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="dsSap"/>
      <Dataset id="dsListAppr">
        <ColumnInfo>
          <Column id="ID_AP" type="STRING" size="256"/>
          <Column id="ID_AP_TYPE" type="STRING" size="256"/>
          <Column id="DS_AP_TYPE" type="STRING" size="256"/>
          <Column id="DS_TITLE" type="STRING" size="256"/>
          <Column id="ST_APPR" type="STRING" size="256"/>
          <Column id="YN_USER" type="STRING" size="256"/>
          <Column id="YN_APP" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="dsListAplines" useclientlayout="false"/>
      <Dataset id="dsListAttchCnt" useclientlayout="false">
        <ColumnInfo>
          <Column id="CNT" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfCD_SITE.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_SITE"/>
      <BindItem id="item1" compid="divSearch.form.ctclYM_WORK.form.TextBox" propid="value" datasetid="dsSearch" columnid="YM_WORK"/>
    </Bind>
  </Form>
</FDL>
