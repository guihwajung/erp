<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="발주요청내역" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg">
          <Layouts>
            <Layout>
              <Static id="staCD_SITE" taborder="3" text="현장코드" left="0.0" top="10.0" width="118.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfCD_SITE" CodeFindName="DZX_CFSITE" CDTextWidth="80" taborder="0" left="staCD_SITE:0.0" top="10.0" width="250" height="24.0" url="cmm::cmmCodeFind.xfdl" readonly="true"/>
              <Static id="staNO_PR" taborder="2" text="요청번호" left="ccfCD_SITE:0.0" top="10.0" width="118.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfNO_PR" CodeFindName="DWX_CFPR_01" CDTextWidth="100" taborder="1" left="staNO_PR:0.0" top="10.0" width="250" height="24.0" url="cmm::cmmCodeFind.xfdl" enable="false"/>
              <CheckBox id="chkYN_DOKUB" taborder="4" text="도급" top="10.0" width="50" height="24.0" truevalue="Y" falsevalue="N" onchanged="divSearch_chkYN_DOKUB_onchanged" left="ccfNO_PR:0.0"/>
              <CheckBox id="chkYN_HADO_JAN" taborder="5" text="잔여존재여부" top="10.0" width="99" height="24.0" truevalue="Y" falsevalue="N" left="chkYN_DOKUB:0.0" onchanged="divSearch_chkYN_HADO_JAN_onchanged" value="N"/>
              <Static id="staTY_APPROVAL" taborder="6" text="비목" left="chkYN_HADO_JAN:0.0" top="10.0" width="118.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Combo id="ccboCD_BIMOK" taborder="7" left="staTY_APPROVAL:0.0" top="10.0" width="80" height="24.0" codecolumn="CD_CODE" datacolumn="DS_CODE" index="-1" text="전체" value="1" innerdataset="dsCD_BIMOK" onitemchanged="divSearch_ccboCD_BIMOK_onitemchanged"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg" ondragmove="divData_ondragmove">
          <Layouts>
            <Layout>
              <Div id="divSplitter" taborder="1" left="50%" top="0" width="5" height="100%" background="skyblue" cursor="ew-resize" ondrag="divData_divSplitter_ondrag"/>
              <Button id="btnSend_Right" taborder="3" text="▶" right="divSplitter:0" top="40%" width="30" height="40" onclick="divData_btnSend_Right_onclick"/>
              <Button id="btnSend_Left" taborder="3" text="◀" right="divSplitter:0" top="60%" width="30" height="40" onclick="divData_btnSend_Left_onclick"/>
              <Div id="divDataLeft" taborder="0" left="0" top="0" bottom="0" right="btnSend_Left:0">
                <Layouts>
                  <Layout>
                    <Static id="sta01" taborder="0" text="승인내역" left="0" top="0" width="100%" height="22" cssclass="sta_TITLE_Bg"/>
                    <Grid id="objGrid" taborder="0" left="0" top="sta01:5" bottom="0" right="0"/>
                  </Layout>
                </Layouts>
              </Div>
              <Div id="divDataRight" taborder="0" left="divSplitter:5" top="0" bottom="0" right="0">
                <Layouts>
                  <Layout>
                    <Static id="sta02" taborder="1" text="발주내역" left="0" top="0" width="100%" height="22" cssclass="sta_TITLE_Bg"/>
                    <Grid id="objGridSub" taborder="0" left="0" top="sta02:5" bottom="0" right="0"/>
                  </Layout>
                </Layouts>
              </Div>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
		
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	this.fnSetCombo();
	
	// 이전화면에서 데이터 받기.
	if(!this.gfnIsNull(this.getOwnerFrame().CD_SITE) && !this.gfnIsNull(this.getOwnerFrame().NO_HADOCONT)) {
		this.dsSearch.setColumn(0, "CD_SITE", this.getOwnerFrame().CD_SITE);
		this.dsSearch.setColumn(0, "DS_SITE", this.getOwnerFrame().DS_SITE);
		this.dsSearch.setColumn(0, "NO_HADOCONT", this.getOwnerFrame().NO_HADOCONT);
		this.dsSearch.setColumn(0, "DS_HADOCONT", this.getOwnerFrame().DS_HADOCONT);
		
		this.divSearch.form.ccfCD_SITE.form.DSTextBox.set_value(this.getOwnerFrame().DS_SITE);
		this.divSearch.form.ccfCD_SITE.form.fnFitToContents();

		this.dsSearch.setColumn(0, "CD_RP", this.getOwnerFrame().CD_RP);
		this.dsList.setColumn(0, "NM_RP", this.getOwnerFrame().NM_RP);
		
		this.FormBtns.Select.click();
	}
	this.divSearch.form.chkYN_HADO_JAN.set_value("Y");
	this.divSearch.form.chkYN_DOKUB.set_value("Y");
	
	this.divSearch_chkYN_DOKUB_onchanged(this.divSearch.form.chkYN_DOKUB, {postvalue:this.divSearch.form.chkYN_DOKUB.value});	
	this.divSearch_chkYN_HADO_JAN_onchanged(this.divSearch.form.chkYN_HADO_JAN,{postvalue:this.divSearch.form.chkYN_HADO_JAN.value});	
};


/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 ************************************************************************/
this.fnSetButton = function() {
	// Select, Add, Del, Save, Excel, Print
	// TODO : set_enable로 Add창이 비활성화가 되지않아 우선 안 보이게 설정.
	//this.FormBtns.Add.set_visible(false);
	//this.FormBtns.Add.set_enable(false);

}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btn1 = this.gfnFormButtonAdd("Costtuja", "fnCosttuja");
	this.btn2 = this.gfnFormButtonAdd( "btnIcstCalc" , "fnIcstCalc");
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.ccfCD_SITE = this.divSearch.form.ccfCD_SITE;
	this.ccfNO_PR = this.divSearch.form.ccfNO_PR;
	//this.ccfCD_RP = this.divSearch.form.ccfCD_RP;

	this.dxGrid = this.divData.form.divDataLeft.form.objGrid;
	this.dxGridSub = this.divData.form.divDataRight.form.objGridSub;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {	
	this.ccfCD_SITE.AfterCDTextChanged = "ccfCD_SITE_AfterCDTextChanged";
	
	this.ccfNO_PR.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	this.ccfNO_PR.AfterCDTextChanged = "ccfNO_PR_AfterCDTextChanged";

	//this.ccfCD_RP.CodeFindName = "DWX_CFRP";
	//this.ccfCD_RP.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";	
	
	// 그리드 코드파인드 설정
	this.dxGridSub.BeforeUserDataSetParam = "fnGridSub_BeforeUserDataSetParam";
	
 	this.gfnGridInit(this.dxGrid, this.dsList, "DW", "DWD_SHGONGSA_DETAIL_TREE", "DS_COST", "GR_COST");
	this.dxGrid.sort = "false";
	
	this.gfnGridInit(this.dxGridSub, this.dsListSub, "DW", "DWD_SHGONGSA_DETAIL", "DS_COST", "GR_COST");

	this.dxGridSub.addEventHandler("onselectchanged", this.fnGridSub_RowCellChanged, this);
	this.dsListSub.addEventHandler("canrowposchange", this.dsListSub_canrowposchange, this);
	// 셀 수정가능 여부
	this.dxGridSub.EnterCell = "fnGrid_EnterCell";
	
	// 트리 전체 접는 로직.
	this.dxGrid.set_treeinitstatus("collapse,all");
	
};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_SITE", "string");
	this.dsSelect.addColumn("NO_HADOCONT", "string");
	this.dsSelect.addColumn("CD_RP", "string");
	this.dsSelect.addColumn("CD_GBIMOK", "string");
	
	
	this.dsSave = new Dataset();
	this.dsSave.addColumn("TY_SAVE", "string");
	this.dsSave.addColumn("CD_SITE", "string");
	this.dsSave.addColumn("NO_HADOCONT", "string");
	this.dsSave.addColumn("CD_COST", "string");
	this.dsSave.addColumn("CD_ITEM", "string");
	this.dsSave.addColumn("QN_TT_DOKUB", "bigdecimal");
	this.dsSave.addColumn("UP_TT_DOKUB", "bigdecimal");
	this.dsSave.addColumn("AM_TT_DOKUB", "bigdecimal");
	this.dsSave.addColumn("QN_TT_SILHENG", "bigdecimal");
	this.dsSave.addColumn("UP_TT_SILHENG", "bigdecimal");
	this.dsSave.addColumn("AM_TT_SILHENG", "bigdecimal");
	this.dsSave.addColumn("QN_TT_HADO", "bigdecimal");
	this.dsSave.addColumn("UP_TT_HADO", "bigdecimal");
	this.dsSave.addColumn("AM_TT_HADO", "bigdecimal");
	this.dsSave.addColumn("CD_STDCOST", "string");
	this.dsSave.addColumn("SZ_SIZE_SITE", "string");

	this.dsExec = new Dataset();
	this.dsExec.addColumn("TY_WRK", "string");
	this.dsExec.addColumn("ID_USER", "string");
	this.dsExec.addColumn("CD_SITE", "string");
	this.dsExec.addColumn("NO_HADOCONT", "string");
	
}

/************************************************************************
 * 버튼 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;
	
	this.gfnGridBeforeSelect(this.dxGridSub);
 	this.gfnGridBeforeSelect(this.dxGrid);

 	this.dsSelect.clearData();
 	this.dsSelect.addRow();
 	this.dsSelect.setColumn(0, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
	this.dsSelect.setColumn(0, "NO_HADOCONT", this.dsSearch.getColumn(0, "NO_HADOCONT"));
 	this.dsSelect.setColumn(0, "CD_RP", this.dsSearch.getColumn(0, "CD_RP"));
	this.dsSelect.setColumn(0, "CD_GBIMOK",this.dsSearch.getColumn(0, "CD_GBIMOK"));

 	var strSvcId    = "select";
 	var strSvcType  = "grid";
 	var inProc		= "_dsProc";
 	var inData      = "select=dsSelect";
 	var outData     = "dsList=select0 dsListSub=select1";
 	var strArg      = "";
 	var callBackFnc = "fnCallback";

 	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
 						strSvcType , 	// transaction을 요청할 구분
 						inProc,			// Procedure 정보 Dataset 이름
 						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
 						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
 						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
 						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {

}

/*
 *	삭제 버튼
 */ 
this.fnDel = function() {
	this.gfnGridDel(this.dxGridSub, "YN_COST");
}

/*
 *	저장 버튼
 */ 
this.fnSave = function() {
	if (!this.gfnGridValidate(this.dxGridSub)) return;
	
	this.dxGridSub.updateToDataset();
	
	this.dsSave.clearData();
	
	for (var i = 0; i < this.dsListSub.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsListSub, i);
	
		switch(flag) {
			case "I":
			case "U":
			case "D":
				var nrow = this.dsSave.addRow();
				this.dsSave.setColumn(nrow, "TY_SAVE", flag);
				this.dsSave.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
				this.dsSave.setColumn(nrow, "NO_HADOCONT", this.dsSearch.getColumn(0, "NO_HADOCONT"));
				this.dsSave.setColumn(nrow, "CD_COST", this.dsListSub.getColumn(i, "CD_COST"));
				this.dsSave.setColumn(nrow, "CD_ITEM", this.dsListSub.getColumn(i, "CD_ITEM"));
				this.dsSave.setColumn(nrow, "QN_TT_DOKUB", this.dsListSub.getColumn(i, "QN_TT_DOKUB"));
				this.dsSave.setColumn(nrow, "UP_TT_DOKUB", this.dsListSub.getColumn(i, "UP_TT_DOKUB"));
				this.dsSave.setColumn(nrow, "AM_TT_DOKUB", this.dsListSub.getColumn(i, "AM_TT_DOKUB"));
				this.dsSave.setColumn(nrow, "QN_TT_SILHENG", this.dsListSub.getColumn(i, "QN_TT_SILHENG"));
				this.dsSave.setColumn(nrow, "UP_TT_SILHENG", this.dsListSub.getColumn(i, "UP_TT_SILHENG"));
				this.dsSave.setColumn(nrow, "AM_TT_SILHENG", this.dsListSub.getColumn(i, "AM_TT_SILHENG"));
				this.dsSave.setColumn(nrow, "QN_TT_HADO", this.dsListSub.getColumn(i, "QN_TT_HADO"));
				this.dsSave.setColumn(nrow, "UP_TT_HADO", this.dsListSub.getColumn(i, "UP_TT_HADO"));
				this.dsSave.setColumn(nrow, "AM_TT_HADO", this.dsListSub.getColumn(i, "AM_TT_HADO"));
				this.dsSave.setColumn(nrow, "CD_STDCOST", this.dsListSub.getColumn(i, "CD_STDCOST"));
				this.dsSave.setColumn(nrow, "SZ_SIZE_SITE", this.dsListSub.getColumn(i, "SZ_SIZE_SITE"));
				
								
				break;
		}
	}

	if (this.dsSave.rowcount == 0) return;
	
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "save=dsSave";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
						
}



/*
    저장 후 실행처리
*/
this.fnExec = function() {

	this.dsExec.clearData();
	
	this.dsExec.addRow();
	
	this.dsExec.setColumn(nrow, "TY_WRK", "CALC");
	this.dsExec.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
	this.dsExec.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
	this.dsExec.setColumn(nrow, "NO_HADOCONT", this.dsSearch.getColumn(0, "NO_HADOCONT"));
	
	if (this.dsExec.rowcount == 0) return;
	
	var strSvcId    = "exec";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "exec=dsExec";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */ 
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {

}
 

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {
	var validate = true;

	if (this.gfnIsNull(this.dsSearch.getColumn(0, "CD_SITE"))) {
		validate = false;
		//Alert후 실행할 처리
		this.fnVaidateCallback = function() {
			this.ccfCD_SITE.form.CDTextBox.setFocus();
		}
		this.gfnAlert("현장코드를 입력하세요.", "fnVaidateCallback");
	}
	
	if (this.gfnIsNull(this.dsSearch.getColumn(0, "NO_HADOCONT"))) {
		validate = false;
		//Alert후 실행할 처리
		this.fnVaidateCallback = function() {
			this.ccfNO_PR.form.CDTextBox.setFocus();
		}
		this.gfnAlert("구매요청번호를 입력하세요.", "fnVaidateCallback");
	}
	
	return validate;
};
/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGridSub);	
		this.gfnGridAfterSelect(this.dxGrid);	
		
		// 트리의 레벨2까지만 펼침
		if(this.dsList.rowcount > 0){
			this.dxGrid.setTreeStatus(1, true);			
		}
		
		//직영건 작업불가
		if(this.dsSearch.getColumn(0, "NO_HADOCONT") == "직영"){
			trace("직영");
			this.FormBtns.Del.set_enable(false);
			this.FormBtns.Save.set_enable(false);
		}
		
	}else if(svcID == "save") {
		this.gfnGridAfterSelect(this.dxGridSub);	
		this.gfnGridAfterSelect(this.dxGrid);	
	
		this.FormBtns.Select.click();
	}else if(svcID == "exec") {
		this.gfnGridAfterSelect(this.dxGridSub);	
		this.gfnGridAfterSelect(this.dxGrid);	
		
		this.FormBtns.Select.click();
	}
	
}
/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {

	if (id == "ccfNO_PR") {
		if(this.gfnIsNull(this.dsSearch.getColumn(0, "CD_SITE")))
		{
			this.gfnAlert("현장코드를 입력하세요.", "fnVaidateCallback");
			
			return false;
		}
		dsUserParam.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));

	}
		if (id == "ccfCD_RP") {
	
		dsUserParam.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));	// 현장코드
	}
	
	return true;
}

this.ccfCD_SITE_AfterCDTextChanged = function(id, codeFindData) {
	// 코드,명칭 외 추가 컬럼 처리
	//var arr = codeFindData; //this.ccfCD_DEPT_ORG.form.SelectedData; 둘다 사용가능
	
	this.dsSearch.setColumn(0, "NO_HADOCONT","");
	this.dsSearch.setColumn(0, "DS_HADOCONT","");

	this.fnSearchInit();
}

this.ccfNO_PR_AfterCDTextChanged = function(id, codeFindData) {
	// 코드,명칭 외 추가 컬럼 처리
	//var arr = codeFindData; //this.ccfCD_DEPT_ORG.form.SelectedData; 둘다 사용가능
	
	this.fnSearchInit();
}

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
 this.fnGridSub_BeforeUserDataSetParam = function(id, dsUserParam, nrow) {	
	// 그리드에서 코드파인드 id는 그리드셋팅의 코드파인드 식별ID
 	if (id == "DQX_CBSITEMALL") {
 		dsUserParam.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
 	}
	return true;
}
this.fnGridSub_RowCellChanged = function(obj:nexacro.Grid,e:nexacro.GridSelectEventInfo)
{
    if ((obj.oldrow > -1 && obj.oldrow == e.row)
		|| (obj.oldrow == -1 && e.oldrow != e.row)) {
		//this.FormBtns.SubSelect.click();
		
		var cd_cost = this.dsListSub.getColumn(this.dsListSub.rowposition, "CD_COST");
		
		for (var nrow = 0; nrow < this.dsList.rowcount; nrow++) {
			if(this.dsList.getColumn(nrow, "CD_COST") == cd_cost)
			{
				this.dsList.set_rowposition(nrow);

				break;
			}
		}

		obj.oldrow = -1;
	}
};

this.dsListSub_canrowposchange = function(obj:nexacro.NormalDataset,e:nexacro.DSRowPosChangeEventInfo) {
	// TODO : 현재 켜놓으면 Insert 후에 우측 그리드에 좌클릭을 하면 해당 문구가 뜸. 왜일까..
// 	var can_rowchange = true;
// 	for (var i = 0; i < this.dsListSub.rowcount; i++) {
// 		var flag = this.gfnGetFlag(this.dsListSub, i);
// 		if (flag == "I" || flag == "U" || flag == "D") {
// 			can_rowchange = false;
// 			break;
// 		}
// 	}
// 	
// 	if(!can_rowchange) {
// 		this._row = e.newrow;
// 		this.gfnConfirm("변경된 데이터가 있습니다.\r\n계속 진행하시겠습니까?", "dsListSub_canrowposchange_callback");
// 	}
// 	
// 	return can_rowchange;
}

this.fnGrid_EnterCell = function(obj:nexacro.Grid, row, cell) {
	var colnm = this.gfnGridGetBindColumnNameByIndex(this.dxGridSub, cell);

	if(colnm == "AM_TT_DOKUB"){
		if(this.dsListSub.getColumn(row, "YN_EDIT") == "Y" && this.dsListSub.getColumn(row, "YN_LSUNIT") == "Y" && this.dsListSub.getColumn(row, "YN_EDIT_D") == "Y"){
			return true;
		}
	}else if(colnm == "AM_TT_SILHENG"){
		if(this.dsListSub.getColumn(row, "YN_EDIT") == "Y" && this.dsListSub.getColumn(row, "YN_LSUNIT") == "Y" && this.dsListSub.getColumn(row, "YN_EDIT_S") == "Y"){
			return true;
		}
	}else if(colnm == "AM_TT_HADO"){
		if(this.dsListSub.getColumn(row, "YN_EDIT") == "Y" && this.dsListSub.getColumn(row, "YN_LSUNIT") == "Y" && this.dsListSub.getColumn(row, "YN_EDIT_H") == "Y"){
			return true;
		}
	}else if(colnm == "QN_TT_DOKUB"){
		if(this.dsListSub.getColumn(row, "YN_EDIT") == "Y" && this.dsListSub.getColumn(row, "YN_LSUNIT") != "Y" && this.dsListSub.getColumn(row, "YN_EDIT_D") == "Y"){
			return true;
		}
	}else if(colnm == "QN_TT_SILHENG"){
		if(this.dsListSub.getColumn(row, "YN_EDIT") == "Y" && this.dsListSub.getColumn(row, "YN_LSUNIT") != "Y" && this.dsListSub.getColumn(row, "YN_EDIT_S") == "Y"){
			return true;
		}
	}
	/*
	else if(colnm == "QN_TT_HADO"){
		if(this.dsListSub.getColumn(row, "YN_EDIT") == "Y" && this.dsListSub.getColumn(row, "YN_EDIT_H") == "Y"){
			if(this.dsListSub.getColumn(row, "YN_LSUNIT") != "Y") return true;
			else return false;
		}
	}
	*/
	else if(colnm == "UP_TT_HADO"){
		if(this.dsListSub.getColumn(row, "YN_EDIT") == "Y" /*&& this.dsListSub.getColumn(row, "YN_LSUNIT") != "Y" */&& this.dsListSub.getColumn(row, "YN_EDIT_H") == "Y"/* && this.dsListSub.getColumn(row, "YN_UPRC_H") == "Y"*/){
			if(this.dsListSub.getColumn(row, "YN_LSUNIT") != "Y" && this.dsListSub.getColumn(row, "YN_UPRC_H") == "Y") return true;
			else return false;
		}
	}
}
/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.fnSearchInit = function(obj,e) {
	if(e == null || (e.pretext != e.posttext)) {
		this.gfnSetFormStatus(this);
		this.gfnGridClear(this.dxGrid);
		this.gfnGridClear(this.dxGridSub);
	}
}

this.divData_ondragmove = function(obj:nexacro.Div,e:nexacro.DragEventInfo)
{
	if(e.userdata == "splitter") {
		this.divData.form.divSplitter.set_left(e.clientx);
		this.divData.form.resetScroll();
	}
};

this.divData_divSplitter_ondrag = function(obj:nexacro.Div,e:nexacro.DragEventInfo)
{
	e.set_userdata("splitter");
	return true;
};

// ▶ 버튼 클릭.
this.divData_btnSend_Right_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{	
	if(this.dsSearch.getColumn(0, "NO_HADOCONT") == "직영"){
		this.gfnAlert("직영건의 경우 발주내역 수정을 할 수 없습니다.");
		return false;
	}
	var rows = this.dxGrid.getSelectedDatasetRows();
	
	for(var i = 0; i < rows.length; i++)
	{
		var nrow = rows[i];
		
		// 발주내역에 있는지 확인.
		for(var j = 0; j < this.dsListSub.getRowCount(); j++)
		{
			if(this.dsList.getColumn(nrow, "CD_COST") == this.dsListSub.getColumn(j, "CD_COST"))
			{
				this.gfnAlert("발주내역에 공종번호 " + this.dsList.getColumn(nrow, "CD_COST") + "이 존재합니다.");
				return false;
			}
		}
	}
	
	this.dsListSub.set_enableevent(false);
	
	for(var i = 0; i < rows.length; i++)
	{
		var nrow = rows[i];
	
		// YN_COST가 N이라면 최하위 노드가 아님.
		if(this.dsList.getColumn(nrow,"YN_COST") == "N") continue;
		
		var listRow = this.dsListSub.addRow();
		//var listRow = this.gfnGridAdd(this.dxGrid, "bottom");
		
		// QN_TT_HADO / UP_TT_HADO / AM_TT_HADO 가 왼쪽 그리드에는 컬럼이 없어 null로 넘어옴. 
		this.dsListSub.copyRow(listRow, this.dsList, nrow);
		this.dsListSub.setColumn(listRow, this.ucFlag, "I");
		this.dsListSub.setColumn(listRow, "QN_TT_SILHENG", this.dsList.getColumn(nrow, "QN_SILHENG_MI"));
		this.dsListSub.setColumn(listRow, "UP_TT_SILHENG", this.dsList.getColumn(nrow, "UP_SILHENG_MI"));
		this.dsListSub.setColumn(listRow, "AM_TT_SILHENG", this.dsList.getColumn(nrow, "AM_SILHENG_MI"));
		this.dsListSub.setColumn(listRow, "QN_TT_HADO", this.dsList.getColumn(nrow, "QN_SILHENG_MI"));
		this.dsListSub.setColumn(listRow, "UP_TT_HADO", this.dsList.getColumn(nrow, "UP_SILHENG_MI"));
		this.dsListSub.setColumn(listRow, "AM_TT_HADO", this.dsList.getColumn(nrow, "AM_SILHENG_MI"));
		this.dsListSub.setColumn(listRow, "QN_SILHENG_MI", this.dsListSub.getColumn(listRow, "QN_TT_HADO"));
		this.dsListSub.setColumn(listRow, "UP_SILHENG_MI", this.dsListSub.getColumn(listRow, "UP_TT_HADO"));
		this.dsListSub.setColumn(listRow, "AM_SILHENG_MI", this.dsListSub.getColumn(listRow, "AM_TT_HADO"));
		
	}

	this.gfnSetFormStatus(this, "I");
	this.dsListSub.set_enableevent(true);

}

// ◀ 버튼 클릭
this.divData_btnSend_Left_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	if(this.dsSearch.getColumn(0, "NO_HADOCONT") == "직영"){
		this.gfnAlert("직영건의 경우 발주내역 수정을 할 수 없습니다.");
		return false;
	}
	
	this.fnDel();
};

// 아래부터는 확장버튼 이벤트.
this.fnCosttuja = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	//if (!this.gfnGridIsRow(this.dxGrid)) { return false; }
	var param = {};
	
	param.CD_SITE = this.dsSearch.getColumn(0, "CD_SITE");
	param.DS_SITE = this.divSearch.form.ccfCD_SITE.form.DSTextBox.text;
	param.CD_COST = this.dsList.getColumn(this.dsList.rowposition, "CD_COST");
	param.CD_DKCOST = this.dsList.getColumn(this.dsList.rowposition, "CD_DKCOST");
	param.DS_COST = this.dsList.getColumn(this.dsList.rowposition, "DS_COST");
	param.SZ_SIZE = this.dsList.getColumn(this.dsList.rowposition, "SZ_SIZE");
	param.DS_UNIT = this.dsList.getColumn(this.dsList.rowposition, "DS_UNIT");
	
	// 화면 오픈. 
	// CD_MODULE은 보통 같은 모듈에서 호출하는 경우가 많으니 this.FormInfo.CD_MODULE 사용
	// 타 모듈 화면 호출시 지정할것.
	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DWX_COSTTUJA", "", param);
	
};


this.fnIcstCalc = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	//if (!this.gfnGridIsRow(this.dxGrid)) { return false; }
	
	this.fnExec();
	//this.gfnAlert("개발중인 화면입니다");
	
}


this.dsListSub_oncolumnchanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue){
		if(e.columnid == "AM_TT_DOKUB"){
			this.dsListSub.setColumn(e.row, "UP_TT_DOKUB", this.dsListSub.getColumn(e.row, "AM_TT_DOKUB"));
		}else if(e.columnid == "AM_TT_SILHENG"){
			this.dsListSub.setColumn(e.row, "UP_TT_SILHENG", this.dsListSub.getColumn(e.row, "AM_TT_SILHENG"));
			
			this.dsListSub.setColumn(e.row, "AM_TT_HADO", this.dsListSub.getColumn(e.row, "AM_TT_SILHENG"));
			this.dsListSub.setColumn(e.row, "UP_TT_HADO", this.dsListSub.getColumn(e.row, "AM_TT_HADO"));
		}else if(e.columnid == "AM_TT_HADO"){
			this.dsListSub.setColumn(e.row, "UP_TT_HADO", this.dsListSub.getColumn(e.row, "AM_TT_HADO"));
		}else if(e.columnid == "QN_TT_DOKUB"){
			var UP_TT_DOKUB = nexacro.toNumber(this.dsListSub.getColumn(e.row, "UP_TT_DOKUB"),0);
			var QN_TT_DOKUB = nexacro.toNumber(this.dsListSub.getColumn(e.row, "QN_TT_DOKUB"),0);
			
			this.dsListSub.setColumn(e.row, "AM_TT_DOKUB", nexacro.toNumber((UP_TT_DOKUB * QN_TT_DOKUB).toFixed(0)),0);
		}else if(e.columnid == "QN_TT_SILHENG"){
			var UP_TT_SILHENG = nexacro.toNumber(this.dsListSub.getColumn(e.row, "UP_TT_SILHENG"),0);
			var QN_TT_SILHENG = nexacro.toNumber(this.dsListSub.getColumn(e.row, "QN_TT_SILHENG"),0);
			
			this.dsListSub.setColumn(e.row, "AM_TT_SILHENG",nexacro.toNumber((UP_TT_SILHENG * QN_TT_SILHENG).toFixed(0)),0);
			this.dsListSub.setColumn(e.row, "QN_TT_HADO", this.dsListSub.getColumn(e.row, "QN_TT_SILHENG"));			
			
			var QN_TT_HADO = nexacro.toNumber(this.dsListSub.getColumn(e.row, "QN_TT_HADO"),0);
			var UP_TT_HADO = nexacro.toNumber(this.dsListSub.getColumn(e.row, "UP_TT_HADO"),0);
			this.dsListSub.setColumn(e.row, "AM_TT_HADO", nexacro.toNumber((QN_TT_HADO * UP_TT_HADO).toFixed(0)),0);
			//this.dsListSub.setColumn(e.row, "AM_TT_SILHENG", nexacro.round(Math.floor(this.dsListSub.getColumn(e.row, "QN_TT_SILHENG") * this.dsListSub.getColumn(e.row, "UP_TT_SILHENG"))));
			//this.dsListSub.setColumn(e.row, "AM_TT_HADO", nexacro.round(Math.floor(this.dsListSub.getColumn(e.row, "QN_TT_HADO") * this.dsListSub.getColumn(e.row, "UP_TT_HADO"))));
		}else if(e.columnid == "QN_TT_HADO" || e.columnid == "UP_TT_HADO"){
			var QN_TT_HADO = nexacro.toNumber(this.dsListSub.getColumn(e.row, "QN_TT_HADO"),0);
			var UP_TT_HADO = nexacro.toNumber(this.dsListSub.getColumn(e.row, "UP_TT_HADO"),0);
		
			this.dsListSub.setColumn(e.row, "AM_TT_HADO", nexacro.toNumber((QN_TT_HADO * UP_TT_HADO).toFixed(0)),0);
		}
	}
};
this.divSearch_chkYN_DOKUB_onchanged = function(obj:nexacro.CheckBox,e:nexacro.CheckBoxChangedEventInfo)
{
	var QN_TT_DOKUB_Index = this.dxGrid.getBindCellIndex("body", "QN_TT_DOKUB");
	var UP_TT_DOKUB_Index = this.dxGrid.getBindCellIndex("body", "UP_TT_DOKUB");
	var AM_TT_DOKUB_Index = this.dxGrid.getBindCellIndex("body", "AM_TT_DOKUB");
	
	var QN_TT_DOKUB_SUB_Index = this.dxGridSub.getBindCellIndex("body", "QN_TT_DOKUB");
	var UP_TT_DOKUB_SUB_Index = this.dxGridSub.getBindCellIndex("body", "UP_TT_DOKUB");
	var AM_TT_DOKUB_SUB_Index = this.dxGridSub.getBindCellIndex("body", "AM_TT_DOKUB");
	
	if(obj.isChecked())
	{
		this.dxGrid.setRealColSize("body", QN_TT_DOKUB_Index, 70);
		this.dxGrid.setRealColSize("body", UP_TT_DOKUB_Index, 90);
		this.dxGrid.setRealColSize("body", AM_TT_DOKUB_Index, 100);
		this.dxGridSub.setRealColSize("body", QN_TT_DOKUB_SUB_Index, 70);
		this.dxGridSub.setRealColSize("body", UP_TT_DOKUB_SUB_Index, 90);
		this.dxGridSub.setRealColSize("body", AM_TT_DOKUB_SUB_Index, 100);
	}
	else
	{
		this.dxGrid.setRealColSize("body", QN_TT_DOKUB_Index, 0);
		this.dxGrid.setRealColSize("body", UP_TT_DOKUB_Index, 0);
		this.dxGrid.setRealColSize("body", AM_TT_DOKUB_Index, 0);
		this.dxGridSub.setRealColSize("body", QN_TT_DOKUB_SUB_Index, 0);
		this.dxGridSub.setRealColSize("body", UP_TT_DOKUB_SUB_Index, 0);
		this.dxGridSub.setRealColSize("body", AM_TT_DOKUB_SUB_Index, 0);
	}
};

this.divSearch_chkYN_HADO_JAN_onchanged = function(obj:nexacro.CheckBox,e:nexacro.CheckBoxChangedEventInfo)
{
	if(obj.isChecked())
	{
		this.dsList.set_filterstr("YN_COST!='Y' || (AM_SILHENG_MI != '' || AM_SILHENG_MI != '0') ");
	}
	else
	{
		this.dsList.set_filterstr("");
	}
	
};


this.fnSetCombo = function()
{
	this.dsCombo = new Dataset();
	this.dsCombo.addColumn("CD_SYSTEM", "string");
	this.dsCombo.addColumn("CD_TYPE", "string");

	this.dsCombo.addRow();
	this.dsCombo.setColumn(0, "CD_SYSTEM", "DW");
	this.dsCombo.setColumn(0, "CD_TYPE", "16");
	
	var strSvcId    = "combo";
	var strSvcType  = "select";
	var inProc		= "_dsProc";
	var inData      = "combo=dsCombo";
	var outData     = "dsCD_BIMOK=combo0";
	var strArg      = "";
	var callBackFnc = "fnCallbackCombo";

	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}


this.fnCallbackCombo = function(svcID, errorCode, errorMsg)
{
	if(svcID == "combo") {
		this.dsCD_BIMOK.insertRow(0);
		this.dsCD_BIMOK.setColumn(0, "CD_CODE","");
		this.dsCD_BIMOK.setColumn(0, "DS_CODE","전체");
		this.divSearch.form.ccboCD_BIMOK.set_index(0);

	}
};
this.divSearch_ccboCD_BIMOK_onitemchanged = function(obj:nexacro.Combo,e:nexacro.ItemChangeEventInfo)
{
	/*this.dsList.set_filterstr("YN_COST!= 'Y' || (CD_GBIMOK == '"+e.postvalue+"') ");*/
};
]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DWDPR_SHGONGSA_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">save</Col>
            <Col id="SP">DWDPR_HDSILHENG_SAVE</Col>
          </Row>
          <Row>
            <Col id="TARGET">combo</Col>
            <Col id="SP">DZXPR_COMBO_SELECT</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsListSub" oncolumnchanged="dsListSub_oncolumnchanged"/>
      <Dataset id="dsSearch">
        <ColumnInfo>
          <Column id="CD_SITE" type="STRING" size="256"/>
          <Column id="DS_SITE" type="STRING" size="256"/>
          <Column id="NO_HADOCONT" type="STRING" size="256"/>
          <Column id="DS_HADOCONT" type="STRING" size="256"/>
          <Column id="CD_RP" type="STRING" size="256"/>
          <Column id="CD_GBIMOK" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
      <Dataset id="dsCD_BIMOK">
        <ColumnInfo>
          <Column id="CD_CODE" type="STRING" size="256"/>
          <Column id="DS_CODE" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfCD_SITE.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_SITE"/>
      <BindItem id="item1" compid="divSearch.form.ccfNO_PR.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="NO_HADOCONT"/>
      <BindItem id="item3" compid="divSearch.form.ccfCD_SITE.form.DSTextBox" propid="value" datasetid="dsSearch" columnid="DS_SITE"/>
      <BindItem id="item4" compid="divSearch.form.ccfNO_PR.form.DSTextBox" propid="value" datasetid="dsSearch" columnid="DS_HADOCONT"/>
      <BindItem id="item2" compid="divSearch.form.ccboCD_BIMOK" propid="value" datasetid="dsSearch" columnid="CD_GBIMOK"/>
    </Bind>
  </Form>
</FDL>
