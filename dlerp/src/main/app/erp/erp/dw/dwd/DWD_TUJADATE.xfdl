<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="일투입명세서" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg" formscrolltype="none">
          <Layouts>
            <Layout>
              <Static id="staCD_SITE" taborder="1" text="현장코드" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfCD_SITE" CodeFindName="DZX_CFSITE" CDTextWidth="80" taborder="0" left="staCD_SITE:0.0" top="10.0" width="200" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
              <Static id="staYM_WORK" taborder="6" text="기성년월" left="ccfCD_SITE:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ctclYM_WORK" taborder="1" left="staYM_WORK:0.0" top="10.0" width="80" height="24.0" url="cmm::cmmCalMM.xfdl"/>
              <Static id="staDT_DATE" taborder="6" text="발생일자" left="ctclYM_WORK:0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabel"/>
              <Calendar id="ctclDT_DATE_FROM" taborder="1" left="staDT_DATE:0.0" top="10.0" width="105" height="24.0" dateformat="yyyy-MM-dd" editformat="yyyyMMdd" autoselect="true" value=""/>
              <Static id="sta_range" taborder="1" text="~" left="ctclDT_DATE_FROM:0.0" top="10.0" width="30.0" height="24.0" cssclass="sta_WF_AC"/>
              <Calendar id="ctclDT_DATE_TO" taborder="1" left="sta_range:0.0" top="10.0" width="105" height="24.0" dateformat="yyyy-MM-dd" editformat="yyyyMMdd" autoselect="true" value=""/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	if(!this.gfnIsNull(this.getOwnerFrame().CD_SITE) && !this.gfnIsNull(this.getOwnerFrame().DS_SITE)
	 && !this.gfnIsNull(this.getOwnerFrame().YM_WORK))
	 {
		this.dsSearch.setColumn(0, "CD_SITE", this.getOwnerFrame().CD_SITE);
		this.divSearch.form.ccfCD_SITE.form.DSTextBox.set_value(this.getOwnerFrame().DS_SITE);
		this.dsSearch.setColumn(0, "YM_WORK", (this.getOwnerFrame().YM_WORK).substr(0,6));
// 		this.dsSearch.setColumn(0, "DT_DATE_FROM", this.dsSearch.getColumn(0, "YM_WORK") + "01");
// 		this.dsSearch.setColumn(0, "DT_DATE_TO", this.gfnGetLastDate(this.dsSearch.getColumn(0, "YM_WORK")));

		this.FormBtns.Select.click();
	 }
	 else
	 {
	 this.divSearch.form.ctclYM_WORK.form.TextBox.set_value(this.gfnGetDate().substr(0,6));
// 		var today = this.gfnGetDate();
// 		today = today.substr(0, 6);
// 		this.dsSearch.setColumn(0, "YM_WORK", today);
// 		this.dsSearch.setColumn(0, "DT_DATE_FROM", today + "01");
// 		this.dsSearch.setColumn(0, "DT_DATE_TO", this.gfnGetLastDate(today));
	 }
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
	this.FormBtns.Add.set_enable(false);
	this.FormBtns.Del.set_enable(false);

}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btnSelect = this.gfnFormButtonAdd("btnSelect", "fnMagamSelect");
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {	
	this.dxGrid = this.divData.form.objGrid;
	
	this.dsSave = new Dataset();
	this.dsSave.addColumn("TY_SAVE", "string");
	this.dsSave.addColumn("ID_USER", "string");
	this.dsSave.addColumn("CD_SITE", "string");
	this.dsSave.addColumn("YM_WORK", "string");
	this.dsSave.addColumn("CD_COST", "string");
	this.dsSave.addColumn("CD_DKCOST", "string");
	this.dsSave.addColumn("NO_SERIAL", "string");
	
	this.dsSave.addColumn("QN_QUANTITY", "bigdecimal");
	this.dsSave.addColumn("AM_KUMYAEK", "bigdecimal");
	this.dsSave.addColumn("CD_ACCOUNT", "string");
	this.dsSave.addColumn("RM_DESC", "string");
	this.dsSave.addColumn("CD_BIMOK", "string");
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	// 그리드 초기화
	this.gfnGridInit(this.dxGrid, this.dsList, "DW", "DWD_TUJADATE");
	this.dxGrid.addEventHandler("onselectchanged", this.dxGrid_RowCellChanged, this);
	this.dxGrid.BeforeUserDataSetParam = "fnGrid_BeforeUserDataSetParam";

	// 그리드 코드파인드 값 변경
	this.dxGrid.AfterCDTextChanged = "fnGrid_AfterCDTextChanged";
	
};

this.fnGrid_AfterCDTextChanged = function(id, codeFindData) {
	if(id == "DWX_CFHADO_JIK") {
		var arr = codeFindData;
		if(arr.length > 0) {
// 			var NO_HADOCONT = arr[0].NO_HADOCONT;
// 			var GRID_DATA = this.dsList.getColumn(this.dsList.rowposition,"NO_HADOCONT")
// 			if(NO_HADOCONT != GRID_DATA){
				this.dsList.setColumn(this.dsList.rowposition,"CD_COST","");
				this.dsList.setColumn(this.dsList.rowposition,"CD_DKCOST","");
				this.dsList.setColumn(this.dsList.rowposition,"DS_COST","");
			/*}*/
		}
	}
	
	return true;
};
/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_SITE", "string");
	this.dsSelect.addColumn("YM_WORK", "string");
	this.dsSelect.addColumn("DT_DATE_FROM", "string");
	this.dsSelect.addColumn("DT_DATE_TO", "string");
}

this.fnGrid_BeforeUserDataSetParam = function(id, dsUserParam, nrow) {	
	// 그리드에서 코드파인드 id는 그리드셋팅의 코드파인드 식별ID
	if (id == "DWX_CFHADO_JIK") {  
		dsUserParam.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
		dsUserParam.setColumn(nrow, "NO_HADOCONT", this.dsList.getColumn(this.dsList.rowposition, "NO_HADOCONT"));
	}else if (id == "DWX_CFCOST_BATSEL") {  
		if(this.gfnIsNull(this.dsList.getColumn(this.dsList.rowposition, "NO_HADOCONT"))){
			this.gfnAlert("계약번호를 선택후 공종코드 선택이 가능합니다.");
			return false;
		}
		dsUserParam.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
		dsUserParam.setColumn(nrow, "NO_HADOCONT", this.dsList.getColumn(this.dsList.rowposition, "NO_HADOCONT"));
	}
	return true;
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	
	this.dsSelect.setColumn(0, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
	this.dsSelect.setColumn(0, "YM_WORK", this.dsSearch.getColumn(0, "YM_WORK"));
	this.dsSelect.setColumn(0, "DT_DATE_FROM", this.dsSearch.getColumn(0, "DT_DATE_FROM"));
	this.dsSelect.setColumn(0, "DT_DATE_TO", this.dsSearch.getColumn(0, "DT_DATE_TO"));
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	var nrow = this.gfnGridAdd(this.dxGrid); // top (default), bottom, current
	this.dsList.setColumn(nrow,"TY_SYSTEM","USR");
}

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}

/*
 *	저장 버튼
 */
this.fnSave = function() {
	// 그리드 필수항목 체크
	if (!this.gfnGridValidate(this.dxGrid)) return;	
	
	this.dxGrid.updateToDataset();
	
	this.dsSave.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "I":
			case "U":
			case "D":
				var nrow = this.dsSave.addRow();
				this.dsSave.setColumn(nrow, "TY_SAVE", flag);
				this.dsSave.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
				this.dsSave.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0,"CD_SITE"));
				this.dsSave.setColumn(nrow, "YM_WORK", this.dsSearch.getColumn(0,"YM_WORK"));
				//this.dsSave.setColumn(nrow, "CD_COST", this.dsList.getColumn(i, "CD_COST"));
				this.dsSave.setColumn(nrow, "CD_DKCOST", this.dsList.getColumn(i, "CD_DKCOST"));
				this.dsSave.setColumn(nrow, "NO_SERIAL", this.dsList.getColumn(i, "NO_SERIAL"));
				
				this.dsSave.setColumn(nrow, "QN_QUANTITY", this.dsList.getColumn(i, "QN_QUANTITY"));
				this.dsSave.setColumn(nrow, "AM_KUMYAEK", this.dsList.getColumn(i, "AM_KUMYAEK"));
				this.dsSave.setColumn(nrow, "CD_ACCOUNT", "61010"+this.dsList.getColumn(i, "CD_BIMOK"));
				this.dsSave.setColumn(nrow, "CD_BIMOK", this.dsList.getColumn(i, "CD_BIMOK"));
				this.dsSave.setColumn(nrow, "RM_DESC", this.dsList.getColumn(i, "RM_DESC"));
				
				break;
		}
	}
	
	if (this.dsSave.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "save=dsSave";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/*
 *	마감자료보기 버튼(확장버튼)
 */
this.fnMagamSelect = function(){
 	var param = {};
 	param.CD_SITE = this.dsSearch.getColumn(0, "CD_SITE");
	param.DS_SITE = this.divSearch.form.ccfCD_SITE.form.DSTextBox.text;	
 	param.YM_WORK = this.dsSearch.getColumn(0, "YM_WORK");
	
	this.gfnFormOpen("DWD", "DWD_TUJADATE_FINISH", "", param);
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {
	var validate = true;
	
	if (this.gfnIsNull(this.dsSearch.getColumn(0, "CD_SITE"))) {
		validate = false;
		// Alert후 실행할 처리
		this.fnVaidateCallback = function() {
			this.divSearch.form.ccfCD_SITE.form.CDTextBox.setFocus();
		}
		this.gfnAlert("현장코드를 입력하세요.", "fnVaidateCallback");
	}
	else if (this.gfnIsNull(this.dsSearch.getColumn(0, "YM_WORK"))) {
		validate = false;
		// Alert후 실행할 처리
		this.fnVaidateCallback = function() {
			this.divSearch.form.ctclYM_WORK.setFocus();
		}
		this.gfnAlert("기성년월을 입력하세요.", "fnVaidateCallback");
	}
	
	return validate;
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);	
	}
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
this.dxGrid_RowCellChanged = function(obj:nexacro.Grid,e:nexacro.GridSelectEventInfo)
{
	var colnm = this.gfnGridGetBindColumnNameByIndex(this.dxGrid, e.cell);	// 컬럼 인덱스로 컬럼명 가져오기
	var rows = obj.getSelectedDatasetRows();
	var sum = 0;
	var bRet = "";
	var nGrdSpcRow = this.dsGridSpec.findRow("DS_FIELD", colnm);
	
	for(var i = 0; i < rows.length; i++) {
		/*var am = this.dsList.getColumn(rows[i], colnm);*/
		var am = this.gfnIsNull(this.dsList.getColumn(rows[i], colnm)) ? 0 : this.dsList.getColumn(rows[i], colnm);
		
		//bRet = nexacro.isNumeric(am); 
		bRet = isNaN(am); // 문자:true, 숫자:false
		//alert(am+":::"+bRet);
		if(bRet){
			break;
		}
		
		trace("TY_CELLTYPE ====> ", this.dsGridSpec.getColumn(nGrdSpcRow, "TY_CELLTYPE"));
		
		if(this.dsGridSpec.getColumn(nGrdSpcRow, "TY_CELLTYPE") == "TEXT"){
			bRet = true;
		}else{
			// TY_CELLTYPE이 "INT", "DOUBLE"인 경우에 적용
			if(!this.gfnIsNull(am)) {
				sum += am;
			}
		}
	}
	
	var colDS_HADOCONT = this.dxGrid.getBindCellIndex("body", "DS_HADOCONT");
	
	if(!bRet){	// 숫자면 합계표시, 문자면 null
		this.dxGrid.setCellProperty("summ", colDS_HADOCONT, "text", "선택합계=" + this.gfnAppendComma(sum));
	}else{
		this.dxGrid.setCellProperty("summ", colDS_HADOCONT, "text", "");
	}
}
/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
		
		if(e.columnid == "YM_WORK" && (e.newvalue != "" || !this.gfnIsNull(e.newvalue)))
		{
// 			var ym_work = (e.newvalue).substr(0,6);
// 			this.dsSearch.setColumn(0, "DT_DATE_FROM", ym_work + "01");
// 			this.dsSearch.setColumn(0, "DT_DATE_TO", this.gfnGetLastDate(ym_work));
		}
	}
};

]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DWDPR_TUJADATE_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">save</Col>
            <Col id="SP">DWDPR_COSTTUJAUSR_SAVE</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_SITE" type="STRING" size="256"/>
          <Column id="YM_WORK" type="STRING" size="256"/>
          <Column id="DT_DATE_FROM" type="STRING" size="256"/>
          <Column id="DT_DATE_TO" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfCD_SITE.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_SITE"/>
      <BindItem id="item1" compid="divSearch.form.ctclYM_WORK.form.TextBox" propid="value" datasetid="dsSearch" columnid="YM_WORK"/>
      <BindItem id="item2" compid="divSearch.form.ctclDT_DATE_FROM" propid="value" datasetid="dsSearch" columnid="DT_DATE_FROM"/>
      <BindItem id="item3" compid="divSearch.form.ctclDT_DATE_TO" propid="value" datasetid="dsSearch" columnid="DT_DATE_TO"/>
    </Bind>
  </Form>
</FDL>
