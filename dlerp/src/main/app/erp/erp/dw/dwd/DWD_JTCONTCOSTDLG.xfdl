<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="430" height="200" titletext="직영계약명공종코드가져오기" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divData" taborder="0" left="0" top="0" right="0" cssclass="div_DATA_Bg" text="" height="200">
          <Layouts>
            <Layout>
              <Static id="staTITLE" taborder="0" text="계약번호, 공종코드 일괄변경" left="0" top="0" width="100%" height="30" cssclass="sta_TITLE_Bg" textAlign="center"/>
              <Static id="staCD_SITE" taborder="1" text="계약번호" left="0" top="staTITLE:5" width="100" height="30" cssclass="sta_WF_tablelabel" textAlign="center"/>
              <Static id="staYM_WORK" taborder="4" text="공종코드" left="0" top="staCD_SITE:-1" width="100" height="30" cssclass="sta_WF_tablelabel" textAlign="center"/>
              <Static id="staBg1" taborder="5" left="staCD_SITE:-1" top="staTITLE:5" right="0%" height="30" cssclass="sta_WF_tablebg"/>
              <Static id="staBg2" taborder="6" left="staYM_WORK:-1" top="staBg1:-1" right="0%" height="30" cssclass="sta_WF_tablebg"/>
              <Static id="staMsg01" taborder="3" text="직영 건을 대상으로만 계약번호 및 공종코드가 조회됩니다." left="10" top="103" height="30" textAlign="center" font="normal bold 10pt/normal &quot;Arial&quot;" onclick="divData_staMsg01_onclick" right="10"/>
              <Static id="staMsg02" taborder="2" text="※ 확인 후 호출화면에서 저장 버튼을 클릭하세요." left="15" top="138" height="30" textAlign="center" font="normal bold 10pt/normal &quot;Arial&quot;" color="red" right="10"/>
              <Button id="btnOk" taborder="7" text="확인" left="34.65%" top="178" width="60" height="20" onclick="divData_btnOk_onclick" cssclass="btnExt"/>
              <Button id="btnCancel" taborder="8" text="닫기" left="54.65%" top="178" width="60" height="20" onclick="divData_btnCancel_onclick" cssclass="btnExt"/>
              <Div id="ccfNO_HADOCONT" CDTextWidth="80" taborder="9" left="105" top="38" width="250" height="25" url="cmm::cmmCodeFind.xfdl" CodeFindName="DWX_CFHADO_JIK"/>
              <Div id="ccfNO_COST" CDTextWidth="80" taborder="10" left="105" top="68" width="250" height="25" url="cmm::cmmCodeFind.xfdl" CodeFindName="DWX_CFCOST_BATSEL"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this._CHECK = false;

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	// 이전 화면에서 데이터 받기.
	this.dsData.setColumn(0, "CD_SITE", this.getOwnerFrame().CD_SITE);
	//this.dsData.setColumn(0, "NO_HADOCONT", this.getOwnerFrame().NO_HADOCONT);
	this.dsData.setColumn(0, "DS_SITE", this.getOwnerFrame().DS_SITE);
	
	this.divData.form.ccfNO_HADOCONT.form.CDTextBox.set_value(this.getOwnerFrame().CD_HADO);
	this.divData.form.ccfNO_HADOCONT.form.DSTextBox.set_value(this.getOwnerFrame().DS_HADOCONT);
	
// 	this.dsData.setColumn(0, "YM_WORK", this.getOwnerFrame().YM_WORK);
// 	this.dsData.setColumn(0, "FR_WORK", this.getOwnerFrame().FR_WORK);
// 	this.dsData.setColumn(0, "TO_WORK", this.getOwnerFrame().TO_WORK);
};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {

}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {

};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {	

};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	this.divData.form.ccfNO_HADOCONT.BeforeUserDataSetParam = 'fnBeforeUserDataSetParam';
	this.divData.form.ccfNO_COST.BeforeUserDataSetParam = 'fnBeforeUserDataSetParam';
	
};

//코드파인드의 파라미터 값을 넘겨줄때 사용하는 함수
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	if (id == "ccfNO_HADOCONT") {
		var cd_site = this.dsData.getColumn(0, "CD_SITE");
		if (this.gfnIsNull(cd_site)) {
 			this.gfnAlert("현장코드를 먼저 입력하세요.");
 			return false;
 		}
		dsUserParam.setColumn(nrow, "CD_SITE", cd_site);	// 현장코드
	}
	if (id == "ccfNO_COST") {
		this.divData.form.ccfNO_HADOCONT.form.CDTextFieldName= "CD_COST";
		this.divData.form.ccfNO_HADOCONT.form.DSTextFieldName= "DS_COST";
	
		var cd_site = this.dsData.getColumn(0, "CD_SITE");
		var no_hadocont = this.divData.form.ccfNO_HADOCONT.form.CDTextBox.value;
		if (this.gfnIsNull(cd_site)) {
 			this.gfnAlert("현장코드를 먼저 입력하세요.");
 			return false;
 		}else if (this.gfnIsNull(no_hadocont)) {
 			this.gfnAlert("계약번호를 먼저 입력하세요.");
 			return false;
 		}
		dsUserParam.setColumn(nrow, "CD_SITE", cd_site);	// 현장코드
		dsUserParam.setColumn(nrow, "NO_HADOCONT", no_hadocont);
	}
	return true;
}

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("TY_WRK", "string");
	this.dsSelect.addColumn("DS_PARAM", "string");
	this.dsSelect.addColumn("DS_VALUE", "string");
	
	this.dsSaveHead = new Dataset();
	this.dsSaveHead.addColumn("TY_WRK", "string");
	this.dsSaveHead.addColumn("ID_USER", "string");
	this.dsSaveHead.addColumn("BUKRS", "string");
	this.dsSaveHead.addColumn("BELNR", "string");
	this.dsSaveHead.addColumn("GJAHR", "string");
	this.dsSaveHead.addColumn("BLART", "string");
	this.dsSaveHead.addColumn("BLDAT", "string");
	this.dsSaveHead.addColumn("BUDAT", "string");
	this.dsSaveHead.addColumn("MONAT", "string");
	this.dsSaveHead.addColumn("CPUDT", "string");
	this.dsSaveHead.addColumn("CPUTM", "string");
	this.dsSaveHead.addColumn("USNAM", "string");
	this.dsSaveHead.addColumn("XBLNR", "string");
	this.dsSaveHead.addColumn("STBLG", "string");
	this.dsSaveHead.addColumn("STJAH", "string");
	this.dsSaveHead.addColumn("BKTXT", "string");
	this.dsSaveHead.addColumn("WAERS", "string");
	this.dsSaveHead.addColumn("BSTAT", "string");
	
	this.dsSaveItem = new Dataset();
	this.dsSaveItem.addColumn("TY_WRK", "string");
	this.dsSaveItem.addColumn("ID_USER", "string");
	this.dsSaveItem.addColumn("BUKRS", "string");
	this.dsSaveItem.addColumn("BELNR", "string");
	this.dsSaveItem.addColumn("GJAHR", "string");
	this.dsSaveItem.addColumn("BUZEI", "string");
	this.dsSaveItem.addColumn("AUGDT", "string");
	this.dsSaveItem.addColumn("AUGCP", "string");
	this.dsSaveItem.addColumn("AUGBL", "string");
	this.dsSaveItem.addColumn("KOART", "string");
	this.dsSaveItem.addColumn("SHKZG", "string");
	this.dsSaveItem.addColumn("GSBER", "string");
	this.dsSaveItem.addColumn("MWSKZ", "string");
	this.dsSaveItem.addColumn("DMBTR", "bigdecimal");
	this.dsSaveItem.addColumn("WRBTR", "bigdecimal");
	this.dsSaveItem.addColumn("PSWBT", "bigdecimal");
	this.dsSaveItem.addColumn("PSWSL", "bigdecimal");
	this.dsSaveItem.addColumn("WMWST", "bigdecimal");
	this.dsSaveItem.addColumn("HWBAS", "bigdecimal");
	this.dsSaveItem.addColumn("FWBAS", "bigdecimal");
	this.dsSaveItem.addColumn("VALUT", "string");
	this.dsSaveItem.addColumn("ZUONR", "string");
	this.dsSaveItem.addColumn("SGTXT", "string");
	this.dsSaveItem.addColumn("KOKRS", "string");
	this.dsSaveItem.addColumn("KOSTL", "string");
	this.dsSaveItem.addColumn("AUFNR", "string");
	this.dsSaveItem.addColumn("PERNR", "string");
	this.dsSaveItem.addColumn("SAKNR", "string");
	this.dsSaveItem.addColumn("HKONT", "string");
	this.dsSaveItem.addColumn("KUNNR", "string");
	this.dsSaveItem.addColumn("LIFNR", "string");
	this.dsSaveItem.addColumn("HZUON", "string");
	this.dsSaveItem.addColumn("ZFBDT", "string");
	this.dsSaveItem.addColumn("ZTERM", "string");
	this.dsSaveItem.addColumn("ZLSCH", "string");
	this.dsSaveItem.addColumn("ZLSPR", "string");
	this.dsSaveItem.addColumn("ZBFIX", "string");
	this.dsSaveItem.addColumn("HBKID", "string");
	this.dsSaveItem.addColumn("BVTYP", "string");
	this.dsSaveItem.addColumn("PRCTR", "string");
	this.dsSaveItem.addColumn("FISTL", "string");
	this.dsSaveItem.addColumn("XREF1", "string");
	this.dsSaveItem.addColumn("XREF2", "string");
	this.dsSaveItem.addColumn("XREF3", "string");
	this.dsSaveItem.addColumn("BUPLA", "string");
	this.dsSaveItem.addColumn("SECCO", "string");
	this.dsSaveItem.addColumn("HKTID", "string");
	this.dsSaveItem.addColumn("BSCHL", "string");
	
	this.dsExecute = new Dataset();
	this.dsExecute.addColumn("TY_WRK", "string");
	this.dsExecute.addColumn("ID_USER", "string");
	this.dsExecute.addColumn("CD_SITE", "string");
	this.dsExecute.addColumn("YM_WORK", "string");
	this.dsExecute.addColumn("FR_WORK", "string");
	this.dsExecute.addColumn("TO_WORK", "string");
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 this.fnSelect = function()
 {
	if (!this.fnSelectValidate()) return false;
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	
	var ds_value = [];
	ds_value.push(this.dsData.getColumn(0, "CD_SITE"));
	ds_value.push(this.dsData.getColumn(0, "FR_WORK"));
	ds_value.push(this.dsData.getColumn(0, "TO_WORK"));
	
	this.dsSelect.setColumn(0, "TY_WRK", "Q");
	this.dsSelect.setColumn(0, "DS_PARAM", this.FormInfo.DS_PARAM);
	this.dsSelect.setColumn(0, "DS_VALUE", ds_value.join(','));
	
	// SAP 호출
	var strSvcId    = "select";
	var strSvcType  = "select";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsFunc=select0 dsInParam=select1 dsOutTables=select2";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
 }
 
 
this.fnSap = function() {
	this._dsProcSap.clearData();
	var nrow = this._dsProcSap.addRow();
	this._dsProcSap.setColumn(nrow, "TARGET", "select");
	this._dsProcSap.setColumn(nrow, "SP", this.dsFunc.getColumn(0, "NM_RFC"));
	
	
	this.dsSelectSap = new Dataset();
	
	// IN 파라미터 셋팅
	for(var i = 0 ; i < this.dsInParam.rowcount; i++) {
		this.dsSelectSap.addColumn(this.dsInParam.getColumn(i, "IN_PARAM"), "string");
	}
	
	nrow = this.dsSelectSap.addRow();	
	for(var i = 0 ; i < this.dsInParam.rowcount; i++) {
		this.dsSelectSap.setColumn(nrow, this.dsInParam.getColumn(i, "IN_PARAM"), this.dsInParam.getColumn(i, "IN_VALUE"));
	}	
	
	var outList = "";
	for(var i = 0 ; i < this.dsOutTables.rowcount; i++) {
		outList += " dsList" + (i+1) + "=" + this.dsOutTables.getColumn(i, "NM_OUT");
	}
	
	// SAP 호출
	var strSvcId    = "sap";
	var strSvcType  = "sap";
	var inProc		= "_dsProcSap";
	var inData      = "select=dsSelectSap";
	var outData     = "dsExport=export" + outList;
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

this.fnSaveHead = function()
{
	this.dsSaveHead.clearData();

	for (var i = 0; i < this.dsList1.rowcount; i++) {
		var nrow = this.dsSaveHead.addRow();
		this.dsSaveHead.setColumn(nrow, "TY_WRK", "I");
		this.dsSaveHead.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
		this.dsSaveHead.setColumn(nrow, "BUKRS", this.dsList1.getColumn(i, "BUKRS"));
		this.dsSaveHead.setColumn(nrow, "BELNR", this.dsList1.getColumn(i, "BELNR"));
		this.dsSaveHead.setColumn(nrow, "GJAHR", this.dsList1.getColumn(i, "GJAHR"));
		this.dsSaveHead.setColumn(nrow, "BLART", this.dsList1.getColumn(i, "BLART"));
		this.dsSaveHead.setColumn(nrow, "BLDAT", this.dsList1.getColumn(i, "BLDAT"));
		this.dsSaveHead.setColumn(nrow, "BUDAT", this.dsList1.getColumn(i, "BUDAT"));
		this.dsSaveHead.setColumn(nrow, "MONAT", this.dsList1.getColumn(i, "MONAT"));
		this.dsSaveHead.setColumn(nrow, "CPUDT", this.dsList1.getColumn(i, "CPUDT"));
		this.dsSaveHead.setColumn(nrow, "CPUTM", this.dsList1.getColumn(i, "CPUTM"));
		this.dsSaveHead.setColumn(nrow, "USNAM", this.dsList1.getColumn(i, "USNAM"));
		this.dsSaveHead.setColumn(nrow, "XBLNR", this.dsList1.getColumn(i, "XBLNR"));
		this.dsSaveHead.setColumn(nrow, "STBLG", this.dsList1.getColumn(i, "STBLG"));
		this.dsSaveHead.setColumn(nrow, "STJAH", this.dsList1.getColumn(i, "STJAH"));
		this.dsSaveHead.setColumn(nrow, "BKTXT", this.dsList1.getColumn(i, "BKTXT"));
		this.dsSaveHead.setColumn(nrow, "WAERS", this.dsList1.getColumn(i, "WAERS"));
		this.dsSaveHead.setColumn(nrow, "BSTAT", this.dsList1.getColumn(i, "BSTAT"));
	}
	
	if (this.dsSaveHead.rowcount == 0) return;
	
		
	var strSvcId    = "save_head";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "save_head=dsSaveHead";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

this.fnSaveItem = function()
{
	this.dsSaveItem.clearData();

	for (var i = 0; i < this.dsList2.rowcount; i++) {
		var nrow = this.dsSaveItem.addRow();
		this.dsSaveItem.setColumn(nrow, "TY_WRK", "I");
		this.dsSaveItem.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
		this.dsSaveItem.setColumn(nrow, "BUKRS", this.dsList2.getColumn(i, "BUKRS"));
		this.dsSaveItem.setColumn(nrow, "BELNR", this.dsList2.getColumn(i, "BELNR"));
		this.dsSaveItem.setColumn(nrow, "GJAHR", this.dsList2.getColumn(i, "GJAHR"));
		this.dsSaveItem.setColumn(nrow, "BUZEI", this.dsList2.getColumn(i, "BUZEI"));
		this.dsSaveItem.setColumn(nrow, "AUGDT", this.dsList2.getColumn(i, "AUGDT"));
		this.dsSaveItem.setColumn(nrow, "AUGCP", this.dsList2.getColumn(i, "AUGCP"));
		this.dsSaveItem.setColumn(nrow, "AUGBL", this.dsList2.getColumn(i, "AUGBL"));
		this.dsSaveItem.setColumn(nrow, "KOART", this.dsList2.getColumn(i, "KOART"));
		this.dsSaveItem.setColumn(nrow, "SHKZG", this.dsList2.getColumn(i, "SHKZG"));
		this.dsSaveItem.setColumn(nrow, "GSBER", this.dsList2.getColumn(i, "GSBER"));
		this.dsSaveItem.setColumn(nrow, "MWSKZ", this.dsList2.getColumn(i, "MWSKZ"));
		this.dsSaveItem.setColumn(nrow, "DMBTR", this.dsList2.getColumn(i, "DMBTR"));
		this.dsSaveItem.setColumn(nrow, "WRBTR", this.dsList2.getColumn(i, "WRBTR"));
		this.dsSaveItem.setColumn(nrow, "PSWBT", this.dsList2.getColumn(i, "PSWBT"));
		this.dsSaveItem.setColumn(nrow, "PSWSL", this.dsList2.getColumn(i, "PSWSL"));
		this.dsSaveItem.setColumn(nrow, "WMWST", this.dsList2.getColumn(i, "WMWST"));
		this.dsSaveItem.setColumn(nrow, "HWBAS", this.dsList2.getColumn(i, "HWBAS"));
		this.dsSaveItem.setColumn(nrow, "FWBAS", this.dsList2.getColumn(i, "FWBAS"));
		this.dsSaveItem.setColumn(nrow, "VALUT", this.dsList2.getColumn(i, "VALUT"));
		this.dsSaveItem.setColumn(nrow, "ZUONR", this.dsList2.getColumn(i, "ZUONR"));
		this.dsSaveItem.setColumn(nrow, "SGTXT", this.dsList2.getColumn(i, "SGTXT"));
		this.dsSaveItem.setColumn(nrow, "KOKRS", this.dsList2.getColumn(i, "KOKRS"));
		this.dsSaveItem.setColumn(nrow, "KOSTL", this.dsList2.getColumn(i, "KOSTL"));
		this.dsSaveItem.setColumn(nrow, "AUFNR", this.dsList2.getColumn(i, "AUFNR"));
		this.dsSaveItem.setColumn(nrow, "PERNR", this.dsList2.getColumn(i, "PERNR"));
		this.dsSaveItem.setColumn(nrow, "SAKNR", this.dsList2.getColumn(i, "SAKNR"));
		this.dsSaveItem.setColumn(nrow, "HKONT", this.dsList2.getColumn(i, "HKONT"));
		this.dsSaveItem.setColumn(nrow, "KUNNR", this.dsList2.getColumn(i, "KUNNR"));
		this.dsSaveItem.setColumn(nrow, "LIFNR", this.dsList2.getColumn(i, "LIFNR"));
		this.dsSaveItem.setColumn(nrow, "HZUON", this.dsList2.getColumn(i, "HZUON"));
		this.dsSaveItem.setColumn(nrow, "ZFBDT", this.dsList2.getColumn(i, "ZFBDT"));
		this.dsSaveItem.setColumn(nrow, "ZTERM", this.dsList2.getColumn(i, "ZTERM"));
		this.dsSaveItem.setColumn(nrow, "ZLSCH", this.dsList2.getColumn(i, "ZLSCH"));
		this.dsSaveItem.setColumn(nrow, "ZLSPR", this.dsList2.getColumn(i, "ZLSPR"));
		this.dsSaveItem.setColumn(nrow, "ZBFIX", this.dsList2.getColumn(i, "ZBFIX"));
		this.dsSaveItem.setColumn(nrow, "HBKID", this.dsList2.getColumn(i, "HBKID"));
		this.dsSaveItem.setColumn(nrow, "BVTYP", this.dsList2.getColumn(i, "BVTYP"));
		this.dsSaveItem.setColumn(nrow, "PRCTR", this.dsList2.getColumn(i, "PRCTR"));
		this.dsSaveItem.setColumn(nrow, "FISTL", this.dsList2.getColumn(i, "FISTL"));
		this.dsSaveItem.setColumn(nrow, "XREF1", this.dsList2.getColumn(i, "XREF1"));
		this.dsSaveItem.setColumn(nrow, "XREF2", this.dsList2.getColumn(i, "XREF2"));
		this.dsSaveItem.setColumn(nrow, "XREF3", this.dsList2.getColumn(i, "XREF3"));
		this.dsSaveItem.setColumn(nrow, "BUPLA", this.dsList2.getColumn(i, "BUPLA"));
		this.dsSaveItem.setColumn(nrow, "SECCO", this.dsList2.getColumn(i, "SECCO"));
		this.dsSaveItem.setColumn(nrow, "HKTID", this.dsList2.getColumn(i, "HKTID"));
		this.dsSaveItem.setColumn(nrow, "BSCHL", this.dsList2.getColumn(i, "BSCHL"));
	}
		
	if (this.dsSaveItem.rowcount == 0) return;
	
	var strSvcId    = "save_item";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "save_item=dsSaveItem";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}


this.fnExecute = function()
{
	this.dsExecute.clearData();
	
	var nrow = this.dsExecute.addRow();
	this.dsExecute.setColumn(nrow, "TY_WRK", "GET_SAP");
	this.dsExecute.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
	this.dsExecute.setColumn(nrow, "CD_SITE", this.dsData.getColumn(0, "CD_SITE"));
	this.dsExecute.setColumn(nrow, "YM_WORK", this.dsData.getColumn(0, "YM_WORK"));
	this.dsExecute.setColumn(nrow, "FR_WORK", this.dsData.getColumn(0, "FR_WORK"));
	this.dsExecute.setColumn(nrow, "TO_WORK", this.dsData.getColumn(0, "TO_WORK"));

	if (this.dsExecute.rowcount == 0) return;
	
	var strSvcId    = "execute";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "execute=dsExecute";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}
/************************************************************************
 * Validate
 ************************************************************************/

this.fnSelectValidate = function() {
	var validate = true;
	var ym_work_lastday = this.gfnGetLastDate(this.dsData.getColumn(0, "YM_WORK"));

	if(this.gfnIsNull(this.dsData.getColumn(0, "CD_SITE"))) {
		validate = false;

		this.gfnAlert("현장코드를 입력하세요.");
	}else if(this.gfnIsNull(this.dsData.getColumn(0, "YM_WORK"))) {
		validate = false;

		this.gfnAlert("작업년월을 입력하세요.");
	}else if(this.gfnIsNull(this.dsData.getColumn(0, "FR_WORK"))) {
		validate = false;
		// Alert후 실행할 처리
		this.fnVaidateCallback = function() {
			this.divData.form.ctcl_FR_WORK.setFocus();
		}
		this.gfnAlert("회계시작일자를 입력하세요.", "fnVaidateCallback");
	}
	else if(this.gfnIsNull(this.dsData.getColumn(0, "TO_WORK"))) {
		validate = false;
		// Alert후 실행할 처리
		this.fnVaidateCallback = function() {
			this.divData.form.ctcl_TO_WORK.setFocus();
		}
		this.gfnAlert("회계종료일자를 입력하세요.", "fnVaidateCallback");
	}
	else if(ym_work_lastday < this.dsData.getColumn(0, "TO_WORK")) {
		validate = false;
		// Alert후 실행할 처리
		this.fnVaidateCallback = function() {
			this.divData.form.ctcl_TO_WORK.setFocus();
		}
		this.gfnAlert("회계종료일자는 작업년월의 말일자를 초과해서 입력하실 수 없습니다.", "fnVaidateCallback");
	}
	return validate;
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		if(this.dsFunc.rowcount > 0 && this.dsInParam.rowcount > 0) {
			//this.fnSap();
			this.fnSaveHead();
		}
	}
	else if(svcID == "sap") {
		if(this.dsList1.rowcount > 0)
		{
			this.fnSaveHead();
		}
	}
	else if (svcID == "save_head") {
		if(errorCode == 0)
		{
			if(this.dsList2.rowcount > 0)
			{
				this.fnSaveItem();
			}
			//this.fnExecute();
		}else
		{
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "save_item") {
		if(errorCode == 0)
		{
			this.fnExecute();
		}else
		{
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "execute")
	{
		if(errorCode == 0)
		{
			this._CHECK = true;
			
			this.gfnAlert("정상적으로 처리되었습니다.");
		}
		else
		{
			this.gfnAlert(errorMsg);
		}
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/

/************************************************************************"
 * 그리드 이벤트
 ************************************************************************/
 
/************************************************************************
 * 기타 이벤트
 ************************************************************************/
 
// 확인 버튼 클릭
this.divData_btnOk_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	/*this.fnSelect();*/
	/*this.fnExecute();*/
	var json = {};
	json.CD_HADO = this.divData.form.ccfNO_HADOCONT.form.CDTextBox.value;
	json.DS_HADOCONT = this.divData.form.ccfNO_HADOCONT.form.DSTextBox.value;
	json.CD_DKCOST = this.divData.form.ccfNO_COST.form.CDTextBox.value;
	json.DS_COST = this.divData.form.ccfNO_COST.form.DSTextBox.value;
	
	this.getParentContext().close(JSON.stringify(json));
};

// 취소 버튼 클릭
this.divData_btnCancel_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	// this.close()가 작동하지 않았고, 
	// 부모의 callback 함수로 데이터를 넘겨주기 위해 작성되었습니다.
	this.getParentContext().close(this._CHECK);
};

this.divData_staMsg01_onclick = function(obj:nexacro.Static,e:nexacro.ClickEventInfo)
{
	
};

this.dsData_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	
	if(e.oldvalue != e.newvalue){
		if(e.columnid =="NO_HADOCONT"){
			this.divData.form.ccfNO_COST.form.CDTextBox.set_value("");
			this.divData.form.ccfNO_COST.form.DSTextBox.set_value("");

		}
	}
};
]]></Script>
    <Objects>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DWXPR_RFCINFO_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">save_head</Col>
            <Col id="SP">SIFPR_SITESLIPHD_SAVE</Col>
          </Row>
          <Row>
            <Col id="TARGET">save_item</Col>
            <Col id="SP">SIFPR_SITESLIPDT_SAVE</Col>
          </Row>
          <Row>
            <Col id="TARGET">execute</Col>
            <Col id="SP">DWDPR_JTCOST_DH_CREATE</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsData" onvaluechanged="dsData_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_SITE" type="STRING" size="256"/>
          <Column id="DS_SITE" type="STRING" size="256"/>
          <Column id="NO_HADOCONT" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
      <Dataset id="dsFunc"/>
      <Dataset id="dsInParam"/>
      <Dataset id="_dsProcSap">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="dsOutTables"/>
      <Dataset id="dsList1"/>
      <Dataset id="dsList2"/>
      <Dataset id="dsExport"/>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divData.form.ccfNO_HADOCONT.form.CDTextBox" propid="value" datasetid="dsData" columnid="NO_HADOCONT"/>
    </Bind>
  </Form>
</FDL>
