<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="현장간접비" onload="form_onload">
    <Layouts>
      <Layout stepcount="0">
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg" formscrolltype="none" text="">
          <Layouts>
            <Layout>
              <Static id="staCD_SITE" taborder="2" text="현장코드" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfCD_SITE" CodeFindName="DZX_CFSITE" CDTextWidth="70" taborder="3" left="staCD_SITE:0.0" top="10.0" width="250" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="30" bottom="0" right="0" cssclass="div_DATA_Bg" text="">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="15" right="0" bottom="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	//this.fnSetCombo();
	
	//this.dsSearch.setColumn(0, "DT_START", this.gfnGetDate());
	//this.dsSearch.setColumn(0, "DT_END", this.gfnGetDate());
	//this.dsSearch.setColumn(0, "YN_RECEIPT", "N");
};

this.fnSetButton = function() {
}

this.fnSetExtendButton = function() {
	//this.btnBatchReceipt = this.gfnFormButtonAdd("BatchReceipt", "fnBatchReceipt");
	//this.btnReceiptDetail = this.gfnFormButtonAdd("ReceiptDetail", "fnReceiptDetail");
	//this.btnReceiptExcel = this.gfnFormButtonAdd("ReceiptExcel", "fnReceiptExcel");
};

this.fnSetVariable = function() {
	this.ccfCD_SITE = this.divSearch.form.ccfCD_SITE;
	
	this.dxGrid = this.divData.form.objGrid;
};

this.fnSetEvent = function() {
	this.gfnGridInit(this.dxGrid, this.dsList, "DW", "DWZ_SITE_INDIRECT");
	
	this.ccfCD_SITE.BeforeUserDataSetParam = "fnBeforeUserDataSetParam";
	
}

this.fnSetParameter = function() {
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_SITE", "string");

	this.dsUpdate = new Dataset();
	this.dsUpdate.addColumn("TY_WRK", "string");
	this.dsUpdate.addColumn("ID_USER", "string");
	this.dsUpdate.addColumn("CD_SITE", "string");
	this.dsUpdate.addColumn("CD_CBS", "string");
	this.dsUpdate.addColumn("CD_CAL", "string");
	this.dsUpdate.addColumn("RT_CAL_1", "bigdecimal");
	this.dsUpdate.addColumn("RT_CAL_2", "bigdecimal");


	
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
this.fnSelect = function() {
	if (!this.fnSelectValidation()) return;
	
	this.gfnGridBeforeSelect(this.dxGrid);

	this.dsSelect.clearData();
	this.dsSelect.addRow();
	this.dsSelect.setColumn(0, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
		
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect"; 
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

this.fnAdd = function() {
	var nrow = this.gfnGridAdd(this.dxGrid, "top");
}

this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}

this.fnSave = function() {
	if (!this.gfnGridValidate(this.dxGrid)) return;

	this.dxGrid.updateToDataset();

	this.dsDelete.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "D":
				var nrow = this.dsDelete.addRow();
				this.dsDelete.setColumn(nrow, "CD_ACNTUNIT", this.dsSearch.getColumn(0, "CD_ACNTUNIT"));
				this.dsDelete.setColumn(nrow, "TY_GUBUN", this.dsList.getColumn(i, "TY_GUBUN"));
				this.dsDelete.setColumn(nrow, "NO_CHASU", this.dsList.getColumn(i, "NO_CHASU"));
				this.dsDelete.setColumn(nrow, "NO_SEQ", this.dsList.getColumn(i, "NO_SEQ"));
				this.dsDelete.setColumn(nrow, "DT_RECEIPT", nexacro.replaceAll(this.dsList.getColumn(i, "DT_RECEIPT"), "-", ""));
				this.dsDelete.setColumn(nrow, "ID_INSERT", this.AuthClient.ID_USER);
				break;
		}
	}
	
	if (this.dsDelete.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "delete=dsDelete";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

this.fnPrint = function() {

}

this.fnSetCombo = function() {
	
	this.dsCombo = new Dataset();
	this.dsCombo.addColumn("CD_SYSTEM", "string");
	this.dsCombo.addColumn("CD_TYPE", "string");
	
	this.dsCombo.addRow();
	this.dsCombo.setColumn(0, "CD_SYSTEM", "DW");
	this.dsCombo.setColumn(0, "CD_TYPE", "R10");
	
	
	
	var strSvcId    = "combo";
	var strSvcType  = "select";
	var inProc		= "_dsProc";
	var inData      = "combo=dsCombo";
	var outData     = "dsTY_WORK=combo0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc,false); // 통신방법 정의 [생략가능]
};


/************************************************************************
 * Validate
 ************************************************************************/
this.fnSelectValidation = function() {
	var validate = true;
	if (this.gfnIsNull(this.dsSearch.getColumn(0, "CD_ACNTUNIT"))) {
		this.fnVaidateCallback = function() {
			this.ccfCD_ACNTUNIT.form.CDTextBox.setFocus();
		}
		this.gfnAlert("사업지코드가 입력되지 않았습니다.", "fnVaidateCallback");
	}
	if (this.gfnIsNull(this.dsSearch.getColumn(0, "DT_START"))) {
		this.fnVaidateCallback = function() {
			this.ctclDT_START.setFocus();
		}
		this.gfnAlert("입금기간(FROM)이 입력되지 않았습니다.", "fnVaidateCallback");
	}
	if (this.gfnIsNull(this.dsSearch.getColumn(0, "DT_END"))) {
		this.fnVaidateCallback = function() {
			this.ctclDT_END.setFocus();
		}
		this.gfnAlert("입금기간(TO)이 입력되지 않았습니다.", "fnVaidateCallback");
	}
	if (this.gfnGetDiffDate(this.dsSearch.getColumn(0, "DT_START"), this.dsSearch.getColumn(0, "DT_END")) < 0) {
		this.gfnAlert("입금기간(TO)은 입금기간(FROM)보다 크거나 같아야 합니다.");
	}
	return validate;
}

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
this.fnCallback = function(svcID, errorCode, errorMsg) {
	if(svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);
		
		this.FormBtns.Del.set_enable(this.dsSearch.getColumn(0, "YN_RECEIPT") == "N");
	}
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		}
		else {
			this.gfnAlert(errorMsg);
		}
	}
	else if(svcID == "batch") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		}
		else {
			this.gfnAlert(errorMsg);
		}
	}
}
 
/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/
this.fnBeforeUserDataSetParam = function(id, dsUserParam, nrow) {
	if (id == "ccfCD_SITE") {
		dsUserParam.setColumn(nrow, "CD_DEPT", this.AuthClient.CD_DEPT);
		dsUserParam.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
		dsUserParam.setColumn(nrow, "ID_GROUP", this.FormInfo.ID_GROUP);
		dsUserParam.setColumn(nrow, "GR_SEARCH", this.FormInfo.GR_SEARCH);
	}
	
	return true;
};


/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
 
/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo) {
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);
	}
};


this.fnPopupCallback = function(svcID, val) {
	this.FormBtns.Select.click();
}
]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DWZPR_SITE_INDIRECT_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">save</Col>
            <Col id="SP">DWZPR_SITE_INDIRECT_SAVE</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_ACNTUNIT" type="STRING" size="256"/>
          <Column id="DS_ACNTUNIT" type="STRING" size="256"/>
          <Column id="DT_START" type="STRING" size="256"/>
          <Column id="DT_END" type="STRING" size="256"/>
          <Column id="TY_WORK" type="STRING" size="256"/>
          <Column id="CD_SITE" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CD_ACNTUNIT"/>
            <Col id="DS_ACNTUNIT"/>
            <Col id="DT_START"/>
          </Row>
        </Rows>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfCD_SITE.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_SITE"/>
      <BindItem id="item1" compid="divSearch.form.ccfCD_SITE.form.DSTextBox" propid="value" datasetid="dsSearch" columnid="DS_SITE"/>
      <BindItem id="item2" compid="divSearch.form.ctclDT_START" propid="value" datasetid="dsSearch" columnid="DT_START"/>
      <BindItem id="item3" compid="divSearch.form.ctclDT_END" propid="value" datasetid="dsSearch" columnid="DT_END"/>
      <BindItem id="item4" compid="divSearch.form.ccboYN_RECEIPT" propid="value" datasetid="dsSearch" columnid="YN_RECEIPT"/>
      <BindItem id="item5" compid="divSearch.form.ccboTY_WORK" propid="value" datasetid="dsSearch" columnid="TY_WORK"/>
    </Bind>
  </Form>
</FDL>
