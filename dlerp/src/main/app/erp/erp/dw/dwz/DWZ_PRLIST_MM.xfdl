<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="발주의뢰(자재)" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg">
          <Layouts>
            <Layout>
              <Static id="staCD_SITE" taborder="1" text="현장코드" left="0.0" top="10.0" width="92.0" height="24.0" cssclass="sta_WF_SchLabelE"/>
              <Div id="ccfCD_SITE" CodeFindName="DZX_CFSITE" CDTextWidth="80" taborder="0" left="staCD_SITE:0.0" top="10.0" width="250" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();

};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 ************************************************************************/
this.fnSetButton = function() {
// 	var id_group = this.FormInfo.ID_GROUP;
// 	var gr_search = this.FormInfo.GR_SEARCH;
// 	var cd_role = this.FormInfo.CD_ROLE;
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결
 ************************************************************************/
this.fnSetExtendButton = function() {
	this.btn1 = this.gfnFormButtonAdd("Silhengtohado", "fnSilhengtohado");
	this.btn2 = this.gfnFormButtonAdd("btnOrdePlan", "fnOrdePlan");
//	this.btn3 = this.gfnFormButtonAdd("btnHadoStatus", "fnHadoStatus");	
	//this.btnAPP = this.gfnFormButtonAdd("btnAPP", "fnAPP");
	//this.btnPoDetail = this.gfnFormButtonAdd("btnPoDetail", "fnPoDetail");
	this.btnExplain = this.gfnFormButtonAdd("btnExplain", "fnExplain");
	//this.btnAPP = this.gfnFormButtonAdd("btnAPP", "fnAPP");		// 품의서
	this.btnAddVendor = this.gfnFormButtonAdd("btnAddVendor", "fnAddVendor");	
};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {
	this.ccfCD_SITE = this.divSearch.form.ccfCD_SITE;
	this.dxGrid = this.divData.form.objGrid;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	this.ccfCD_SITE.CodeFindName = "DZX_CFSITE"
	this.gfnGridInit(this.dxGrid, this.dsList, "DW", "DWZ_PRLIST");
	
	this.dxGrid.addEventHandler("onselectchanged", this.fnGrid_RowCellChanged, this);
	
}
/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {

	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("TY_WRK", "string");
	this.dsSelect.addColumn("CD_SITE", "string");

	this.dsSave = new Dataset();
	this.dsSave.addColumn("TY_WRK", "string");
	this.dsSave.addColumn("ID_USER", "string");
	this.dsSave.addColumn("CD_SITE", "string");
	this.dsSave.addColumn("NO_PR", "string");
	this.dsSave.addColumn("DS_PR", "string");
	this.dsSave.addColumn("CD_VENDOR", "string");
	this.dsSave.addColumn("DS_VENDOR", "string");
	this.dsSave.addColumn("DS_PRESIDENT", "string");
	this.dsSave.addColumn("TY_BUSINESS", "string");
	this.dsSave.addColumn("NO_TEL", "string");
	this.dsSave.addColumn("NO_FAX", "string");
	this.dsSave.addColumn("AT_ADDR", "string");
	this.dsSave.addColumn("YN_IMSINO", "string");
	this.dsSave.addColumn("DT_HDCONT", "string");
	this.dsSave.addColumn("AM_PL_HADO", "bigdecimal");
	this.dsSave.addColumn("DT_KONGSA_FROM", "string");
	this.dsSave.addColumn("DT_KONGSA_TO", "string");
	this.dsSave.addColumn("DS_REMARK", "string");
	this.dsSave.addColumn("DS_CONTMETHOD", "string");
	this.dsSave.addColumn("DT_BAL", "string");
	this.dsSave.addColumn("SN_SEQ", "string");
	
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	
	this.dsSelect.setColumn(0, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
	this.dsSelect.setColumn(0, "TY_WRK", "DM");

	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}



/*
 *	입력 버튼
 */
this.fnAdd = function() {
	this.gfnGridAdd(this.dxGrid);
}

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}

/*
 *	저장 버튼
 */
this.fnSave = function() {
	// 그리드 필수항목 체크
	if (!this.gfnGridValidate(this.dxGrid)) return;	

	this.dxGrid.updateToDataset();
	
	this.dsSave.clearData();
	
	for (var i = 0; i < this.dsList.rowcount; i++) {
		var flag = this.gfnGetFlag(this.dsList, i);
		switch(flag) {
			case "I":
			case "U":
			case "D":
				var nrow = this.dsSave.addRow();
				this.dsSave.setColumn(nrow, "TY_WRK", flag);
				this.dsSave.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
				this.dsSave.setColumn(nrow, "CD_SITE", this.dsSearch.getColumn(0,"CD_SITE"));
				this.dsSave.setColumn(nrow, "NO_PR", this.dsList.getColumn(i, "NO_PR"));
				this.dsSave.setColumn(nrow, "DS_PR", this.dsList.getColumn(i, "DS_PR"));
				this.dsSave.setColumn(nrow, "CD_VENDOR", this.dsList.getColumn(i, "CD_VENDOR"));
				this.dsSave.setColumn(nrow, "DS_VENDOR", this.dsList.getColumn(i, "DS_VENDOR"));
				this.dsSave.setColumn(nrow, "DS_PRESIDENT", this.dsList.getColumn(i, "DS_PRESIDENT"));
				this.dsSave.setColumn(nrow, "TY_BUSINESS", this.dsList.getColumn(i, "TY_BUSINESS"));
				this.dsSave.setColumn(nrow, "NO_TEL", this.dsList.getColumn(i, "NO_TEL"));
				this.dsSave.setColumn(nrow, "NO_FAX", this.dsList.getColumn(i, "NO_FAX"));
				this.dsSave.setColumn(nrow, "AT_ADDR", this.dsList.getColumn(i, "AT_ADDR"));
				this.dsSave.setColumn(nrow, "YN_IMSINO", this.dsList.getColumn(i, "YN_IMSINO"));
				this.dsSave.setColumn(nrow, "DT_HDCONT", this.dsList.getColumn(i, "DT_HDCONT"));
				this.dsSave.setColumn(nrow, "AM_PL_HADO", this.dsList.getColumn(i, "AM_PL_HADO"));
				this.dsSave.setColumn(nrow, "DT_KONGSA_FROM", this.dsList.getColumn(i, "DT_KONGSA_FROM"));
				this.dsSave.setColumn(nrow, "DT_KONGSA_TO", this.dsList.getColumn(i, "DT_KONGSA_TO"));
				this.dsSave.setColumn(nrow, "DS_REMARK", this.dsList.getColumn(i, "DS_REMARK"));
				//this.dsSave.setColumn(nrow, "DS_CONTMETHOD", this.dsList.getColumn(i, "TY_CONTH"));
				this.dsSave.setColumn(nrow, "DS_CONTMETHOD", "40");
				this.dsSave.setColumn(nrow, "DT_BAL", this.dsList.getColumn(i, "DT_BAL"));
				this.dsSave.setColumn(nrow, "SN_SEQ", this.dsList.getColumn(i, "SN_SEQ"));
				break;
		}
	}
	
	if (this.dsSave.rowcount == 0) return;
		
	var strSvcId    = "save";
	var strSvcType  = "save";
	var inProc		= "_dsProc";
	var inData      = "save=dsSave";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
  */
this.fnSelectValidate = function() {
	var validate = true;
	if (this.gfnIsNull(this.ccfCD_SITE.form.CDTextBox.text)) {
		validate = false;
		// Alert후 실행할 처리
		this.fnVaidateCallback = function() {
			this.ccfCD_SITE.form.CDTextBox.setFocus();
		}
		this.gfnAlert("현장코드를 입력하세요.", "fnVaidateCallback");
	}
	
	return validate;
};


/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);	
		
		this.fnBtnCheckAll();
	}
	else if(svcID == "save") {
		if (errorCode == 0) {
			this.FormBtns.Select.click();
		} else {
			this.gfnAlert(errorMsg);
		}
	}
}
 
/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
this.fnGrid_RowCellChanged = function(obj:nexacro.Grid,e:nexacro.GridSelectEventInfo)
{
	 if ((obj.oldrow > -1 && obj.oldrow == e.row)
		|| (obj.oldrow == -1 && e.oldrow != e.row)) {
		this.fnBtnCheckAll();
		obj.oldrow = -1;
	}
}
/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
	}
};

// 외주내역작성 버튼 클릭 이벤트
this.fnSilhengtohado = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	if(!this.gfnGridIsRow(this.dxGrid))
	{
		this.gfnAlert("자재계약건을 선택하세요.");
		return false;
	}
	
	var param = {};
	param.CD_SITE = this.dsSearch.getColumn(0, "CD_SITE");
	param.DS_SITE = this.ccfCD_SITE.form.DSTextBox.text;
	param.NO_PR = this.dsList.getColumn(this.dsList.rowposition, "NO_PR");
	param.DS_PR = this.dsList.getColumn(this.dsList.rowposition, "DS_PR");
	param.DS_PARAM = this.FormInfo.DS_PARAM;
	
	// 화면 오픈. 
	// CD_MODULE은 보통 같은 모듈에서 호출하는 경우가 많으니 this.FormInfo.CD_MODULE 사용
	// 타 모듈 화면 호출시 지정할것.
	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DWA_SILHENGTOPR", "fnSilhengtohado_callback", param);
	
}

this.fnSilhengtohado_callback = function()
{
	this.FormBtns.Select.click();
}

// 발주요청 버튼 클릭 이벤트
this.fnOrdePlan = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	if(!this.gfnGridIsRow(this.dxGrid))
	{
		this.gfnAlert("자재계약건을 선택하세요.");
		return false;
	}
	
	var param = {};
	param.CD_SITE = this.dsSearch.getColumn(0, "CD_SITE");
	param.DS_SITE = this.ccfCD_SITE.form.DSTextBox.text;
	
	// 차후 NO_BID는 삭제 예정.
	param.NO_BID = this.dsList.getColumn(this.dsList.rowposition, "NO_PR");
	param.NO_PR = this.dsList.getColumn(this.dsList.rowposition, "NO_PR");

	param.DS_SUBCON = this.dsList.getColumn(this.dsList.rowposition, "DS_PR");

	if(this.dsList.getColumn(this.dsList.rowposition, "DS_STATUS") != "변경계약" && this.dsList.getColumn(this.dsList.rowposition, "DS_STATUS") != "완료")
	{
		//if((this.dsList.getColumn(this.dsList.rowposition, "TY_CONTH") == "40" || this.dsList.getColumn(this.dsList.rowposition, "TY_CONTH") == "50") )
// 		if((this.dsList.getColumn(this.dsList.rowposition, "TY_CONTH") == "40") )
// 		{	
// 			this.gfnFormOpen("DCB", "DCB_ORDERPLANSR_SITE_DM", "", param); 
// 		}
// 		else
// 		{
// 			// 화면 오픈. 
// 			// CD_MODULE은 보통 같은 모듈에서 호출하는 경우가 많으니 this.FormInfo.CD_MODULE 사용
// 			// 타 모듈 화면 호출시 지정할것.
// 			this.gfnFormOpen("DCB", "DCB_ORDERPLANSR_SITE", "", param); 
// 		}
		this.gfnFormOpen("DCB", "DCB_ORDERPLANSR_SITE_DM", "fnOrdePlan_callback", param); 
	}
	else
	{
		this.gfnFormOpen("DCC", "DCC_REQCHGCONTRACT", "fnOrdePlan_callback", param, 1030, 640); 
	}
}

this.fnOrdePlan_callback = function()
{
	this.FormBtns.Select.click();
}

// 
// this.fnAPP = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
// 	if(!this.gfnGridIsRow(this.dxGrid))
// 	{
// 		this.gfnAlert("자재계약건을 선택하세요.");
// 		return false;
// 	}
// 	
// 	var param = {};
// 	var nRow = this.dsList.rowposition;
// 	
// 	param.PARAM01 = this.dsSearch.getColumn(0,"CD_SITE");
// 	param.PARAM02 = this.dsList.getColumn(nRow, "NO_PR");
// 	param.ID_AP = this.dsList.getColumn(nRow, "NO_ELAPDOC");	// 전자결재문서번호
// 	param.YN_LINK = "N";	// 화면에서 팝업을 호출할경우 N, 링크를 통해서 화면을 오픈할경우 null 이다
// 	
// 	// 화면 오픈. 
// 	// CD_MODULE은 보통 같은 모듈에서 호출하는 경우가 많으니 this.FormInfo.CD_MODULE 사용
// 	// 타 모듈 화면 호출시 지정할것.
// 	this.gfnFormOpen("DCB", "DCB_ORDERPLANSR_SITE_APPROVAL", "fnAprvDialogCallback", param);
// 	
// }

 this.fnAprvDialogCallback = function(svcID, value) {
	// 리턴값
	if(value){
		// 결재완료, 결재취소, 결재상신 후에는 재조회를 한다
		this.FormBtns.Select.click();
	}
};



this.fnPoDetail = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	if(!this.gfnGridIsRow(this.dxGrid))
	{
		this.gfnAlert("자재계약건을 선택하세요.");
		return false;
	}
	
	var param = {};
	var nRow = this.dsList.rowposition;
	
	param.CD_SITE = this.dsSearch.getColumn(0, "CD_SITE");
	param.DS_SITE = this.divSearch.form.ccfCD_SITE.form.DSTextBox.text;
	param.NO_CONT = this.dsList.getColumn(nRow, "NO_CONT");
	//param.DS_SUBCON = this.divSearch.form.ccfNO_BID.form.DSTextBox.text;
	
	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DMA_PO_DETAIL", "fnPoDetail_callback", param);	
}

this.fnPoDetail_callback = function()
{
	this.FormBtns.Select.click();
}


this.fnExplain = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	if(!this.gfnGridIsRow(this.dxGrid))
	{
		this.gfnAlert("자재계약건을 선택하세요.");
		return false;
	}
	
	var param = {};
	var nRow = this.dsList.rowposition;
	
	param.NO_BID = this.dsList.getColumn(nRow, "NO_BID");
	param.NO_PR = this.dsList.getColumn(nRow, "NO_PR");
	
	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DCB_EXPLAIN_JOINBID_SITE", "fnExplain_callback", param);	
}

this.fnExplain_callback = function()
{
	this.FormBtns.Select.click();
}

// 
// // 계약이력조회 버튼 클릭 이벤트
// this.fnHadoStatus = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
// 	if(!this.gfnGridIsRow(this.dxGrid))
// 	{
// 		this.gfnAlert("외주계약건을 선택하세요.");
// 		return false;
// 	}
// 	
// 	var param = {};
// 	param.CD_SITE = this.dsSearch.getColumn(0, "CD_SITE");
// 	param.DS_SITE = this.ccfCD_SITE.form.DSTextBox.text;
// 	param.NO_HADOCONT = this.dsList.getColumn(this.dsList.rowposition, "NO_HADOCONT");
// 	param.DS_HADOCONT = this.dsList.getColumn(this.dsList.rowposition, "DS_HADOCONT");
// 	
// 	// 화면 오픈. 
// 	// CD_MODULE은 보통 같은 모듈에서 호출하는 경우가 많으니 this.FormInfo.CD_MODULE 사용
// 	// 타 모듈 화면 호출시 지정할것.
// 	this.gfnFormOpen("DWZ", "DWZ_HADOSTATUS", "", param); 
// 
// 
// }

// row 변경 선택시 발생 이벤트
/*
this.dsList_onrowposchanged = function(obj:nexacro.NormalDataset,e:nexacro.DSRowPosChangeEventInfo)
{
	if(this.dsList.rowcount < 1) return;
	
	if(this.dsList.getColumn(this.dsList.rowposition, "TY_CONTH") == "40" || this.dsList.getColumn(this.dsList.rowposition, "TY_CONTH") == "50" )
	{
		if(this.dsList.getColumn(this.dsList.rowposition, "DS_STATUS") == "변경계약")
		{
			this.btn2.set_text("변경구매요청");
		}
		else
		{
			this.btn2.set_text("자재구매요청");
		}
	}
	else
	{
		// 해당 row의 컬럼값을 외주발주의뢰 버튼 텍스트로 변경한다
		var btnOrderplan = this.dsList.getColumn(this.dsList.rowposition, "BTN_ORDERPLAN");
		this.btn2.set_text(btnOrderplan);
	}
	//this.btn2.set_fittocontents("width");
	this.btn2.parent.fnSetBtn();
	//this.btn2.parent.parent;
};
*/

this.fnBtnCheckAll = function()
{
	this.gfnBtnCheck(this.btn1, this.dsList);
	this.gfnBtnCheck(this.btn2, this.dsList);
	//this.gfnBtnCheck(this.btnAPP, this.dsList);
	//this.gfnBtnCheck(this.btnPoDetail, this.dsList);
	this.gfnBtnCheck(this.btnExplain, this.dsList);
	
	if(this.dsList.getColumn(this.dsList.rowposition, "NO_PR").indexOf("-00001") > 0)
	{
		this.btnAddVendor.set_enable(true);
	}
	else
	{
		this.btnAddVendor.set_enable(false);
	}
}

this.dsList_canrowposchange = function(obj:nexacro.NormalDataset,e:nexacro.DSRowPosChangeEventInfo)
{
	if(e.oldrow != e.newrow)
	{
		if(!this.gfnIsNull(this.dsList.getColumn(e.newrow, "NO_BID")))
		{
			this.btnExplain.set_enable(true);
		}
		else
		{
			this.btnExplain.set_enable(false);
		}
	}
};


this.fnAPP = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {
	if (!this.gfnGridIsRow(this.dxGrid)) { return false; }
	//if (this.dsList.rowcount < 1) { return false; }
	
	var param = {};
	var nRow = this.dsList.rowposition;
	
	param.PARAM01 = this.dsSearch.getColumn(0,"CD_SITE");
	param.PARAM02 = this.dsList.getColumn(nRow, "NO_PR");
	param.ID_AP = this.dsList.getColumn(nRow, "NO_ELAPDOC");	// 전자결재문서번호
	param.YN_LINK = "N";	// 화면에서 팝업을 호출할경우 N, 링크를 통해서 화면을 오픈할경우 null 이다
	
	// 화면 오픈. 
	// CD_MODULE은 보통 같은 모듈에서 호출하는 경우가 많으니 this.FormInfo.CD_MODULE 사용
	// 타 모듈 화면 호출시 지정할것.
	this.gfnFormOpen("DMB", "DMB_ORDERPLANSR_SITE_APPROVAL", "fnAprvDialogCallback", param);
	
}

 this.fnAprvDialogCallback = function(svcID, value) {
	// 리턴값
	if(value){
		// 결재완료, 결재취소, 결재상신 후에는 재조회를 한다
		this.FormBtns.Select.click();
	}
};

// 업체추가 버튼 이벤트
this.fnAddVendor = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	var param = {};
	param.CD_SITE = this.dsSearch.getColumn(0, "CD_SITE");
	param.DS_SITE = this.divSearch.form.ccfCD_SITE.form.DSTextBox.text;
	param.NO_PR = this.dsList.getColumn(this.dsList.rowposition, "NO_PR");
	param.DS_PR = this.dsList.getColumn(this.dsList.rowposition, "DS_PR");
	
	this.gfnFormOpen(this.FormInfo.CD_MODULE, "DCB_ORDERPLANSR_SITE_DM_ADDVENDOR_DLG", "fnAddVendorCallback", param, 800, 500);
};]]></Script>
    <Objects>
      <Dataset id="dsList" canrowposchange="dsList_canrowposchange"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DWZPR_PRLIST_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">save</Col>
            <Col id="SP">DWZPR_PR_SAVE</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_SITE" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="CD_SITE"/>
          </Row>
        </Rows>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfCD_SITE.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_SITE"/>
    </Bind>
  </Form>
</FDL>
