<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="form" width="1280" height="720" titletext="New Form" onload="form_onload">
    <Layouts>
      <Layout>
        <Div id="divSearch" taborder="0" left="0.0" top="10.0" height="46.0" right="0" cssclass="div_SEARCH_Bg" formscrolltype="none">
          <Layouts>
            <Layout>
              <Static id="staCD_SITE" taborder="1" text="현장코드" left="0.0" top="10.0" width="105.0" height="24.0" textDecoration="none" cssclass="sta_WF_SchLabel"/>
              <Div id="ccfCD_SITE" CodeFindName="DZX_CFSITE" CDTextWidth="80" taborder="0" left="staCD_SITE:0.0" top="10.0" width="250" height="24.0" url="cmm::cmmCodeFind.xfdl"/>
              <Static id="staCD_ORD" taborder="3" text="계약형태" left="ccfCD_SITE:0.0" top="10.0" width="105.0" height="24.0" textDecoration="none" textAlign="center" cssclass="sta_WF_SchLabel"/>
              <Combo id="ccboCD_ORD" taborder="4" left="staCD_ORD:0.0" top="10.0" width="100" height="24.0" innerdataset="dsCD_ORD" codecolumn="CD_CODE" datacolumn="DS_CODE"/>
              <Static id="staDS_LICCOST" taborder="5" text="등록공종명" left="ccboCD_ORD:0.0" top="10.0" width="105.0" height="24.0" textDecoration="none" textAlign="center" cssclass="sta_WF_SchLabel"/>
              <Edit id="ctxtDS_LICCOST" taborder="6" left="staDS_LICCOST:0.0" top="10.0" width="200" height="24.0" value=""/>
              <Static id="staDS_PR" taborder="7" text="요청명" left="ctxtDS_LICCOST:0.0" top="10.0" width="105.0" height="24.0" textDecoration="none" textAlign="center" cssclass="sta_WF_SchLabel"/>
              <Edit id="ctxtDS_PR" taborder="8" left="staDS_PR:0.0" top="10.0" width="200" height="24.0" value=""/>
              <CheckBox id="cchkYN_DETAIL" taborder="9" text="입찰상세" left="ctxtDS_PR:0.0" top="10.0" width="100" height="24.0" onchanged="divSearch_cchkYN_DETAIL_onchanged"/>
            </Layout>
          </Layouts>
        </Div>
        <Div id="divData" taborder="0" left="0" top="divSearch:10" bottom="0" right="0" cssclass="div_DATA_Bg">
          <Layouts>
            <Layout>
              <Grid id="objGrid" taborder="0" left="0" top="0" bottom="0" right="0"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.objApp = this.gfnGetApplication();

this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// -- 필수 -------------------//
	this.gfnFormOnLoad(this);	
	this.gfnFormInfo(this);		
	// ---------------------------//
	
	this.fnSetButton();
	this.fnSetExtendButton();
	this.fnSetVariable();
	this.fnSetEvent();
	this.fnSetParameter();
	
	this.fnSetCombo();
	
	this.divSearch_cchkYN_DETAIL_onchanged(this.divSearch.form.cchkYN_DETAIL, {postvalue:this.divSearch.form.cchkYN_DETAIL.value});

};

/************************************************************************
 * 버튼 설정 : 화면(Tab) 전환시 마다 호출
 * 서브버튼 사용 및 공통버튼 강제 제어시 여기서 처리
 ************************************************************************/
this.fnSetButton = function() {
}

/************************************************************************
 * 확장 버튼 : 화면별 버튼 설정 ID, function 연결 (화면버튼관리)
 ************************************************************************/
this.fnSetExtendButton = function() {

};

/************************************************************************
 * 변수 선언
 ************************************************************************/
this.fnSetVariable = function() {	
	this.dxGrid = this.divData.form.objGrid;
};

/************************************************************************
 * 이벤트 설정
 ************************************************************************/
this.fnSetEvent = function() {
	// 그리드 초기화
	this.gfnGridInit(this.dxGrid, this.dsList, "DW", "DWZ_ORDPROGRESS");
};

/************************************************************************
 * 파라미터 설정
 ************************************************************************/
this.fnSetParameter = function() {
	this.dsSelect = new Dataset();
	this.dsSelect.addColumn("CD_SITE", "string");
	this.dsSelect.addColumn("CD_ORD", "string");
	this.dsSelect.addColumn("DS_LICCOST", "string");
	this.dsSelect.addColumn("DS_PR", "string");
	this.dsSelect.addColumn("TY_SYSTEM", "string");
}

/************************************************************************
 * 컨트롤 이벤트
 ************************************************************************/
 /*
  *	조회 버튼
  */
this.fnSelect = function() {
	if (!this.fnSelectValidate()) return false;
	
	this.gfnGridBeforeSelect(this.dxGrid);
	
	this.dsSelect.clearData();
	this.dsSelect.addRow();
	
	this.dsSelect.setColumn(0, "CD_SITE", this.dsSearch.getColumn(0, "CD_SITE"));
	this.dsSelect.setColumn(0, "CD_ORD", this.dsSearch.getColumn(0, "CD_ORD"));
	this.dsSelect.setColumn(0, "DS_LICCOST", this.dsSearch.getColumn(0, "DS_LICCOST"));
	this.dsSelect.setColumn(0, "DS_PR", this.dsSearch.getColumn(0, "DS_PR"));
	this.dsSelect.setColumn(0, "TY_SYSTEM", this.FormInfo.DS_PARAM);
	
	var strSvcId    = "select";
	var strSvcType  = "grid";
	var inProc		= "_dsProc";
	var inData      = "select=dsSelect";
	var outData     = "dsList=select0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	입력 버튼
 */
this.fnAdd = function() {
	var nrow = this.gfnGridAdd(this.dxGrid); // top (default), bottom, current
}

/*
 *	삭제 버튼
 */
this.fnDel = function() {
	this.gfnGridDel(this.dxGrid);
}

/*
 *	저장 버튼
 */
this.fnSave = function() {
// 	// 그리드 필수항목 체크
// 	if (!this.gfnGridValidate(this.dxGrid)) return;	
// 
// 	this.dxGrid.updateToDataset();
// 		
// 	this.dsInsert.clearData();
// 	this.dsUpdate.clearData();
// 	this.dsDelete.clearData();
// 	
// 	for (var i = 0; i < this.dsList.rowcount; i++) {
// 		var flag = this.gfnGetFlag(this.dsList, i);
// 		switch(flag) {
// 			case "I":
// 				var nrow = this.dsInsert.addRow();
// // 				this.dsInsert.setColumn(nrow, "CD_CORP", this.dsList.getColumn(i, "CD_CORP"));
// // 				this.dsInsert.setColumn(nrow, "NO_CORP", this.dsList.getColumn(i, "NO_CORP").replace(/-/g, ''));
// // 				this.dsInsert.setColumn(nrow, "ID_USER", this.AuthClient.ID_USER);
// 				break;
// 				
// 			case "U":
// 				var nrow = this.dsUpdate.addRow();
// // 				this.dsUpdate.setColumn(nrow, "CD_CORP", this.dsList.getColumn(i, "CD_CORP"));
// // 				this.dsUpdate.setColumn(nrow, "NO_CORP", this.dsList.getColumn(i, "NO_CORP").replace(/-/g, ''));
// // 				this.dsUpdate.setColumn(nrow, "ID_UPDATE", this.AuthClient.ID_USER);
// 				break;
// 				
// 			case "D":
// 				var nrow = this.dsDelete.addRow();
// //				this.dsDelete.setColumn(nrow, "CD_CORP", this.dsList.getColumn(i, "CD_CORP"));
// 				break;
// 		}
// 	}
// 	
// 	if (this.dsInsert.rowcount == 0 && this.dsUpdate.rowcount == 0 && this.dsDelete.rowcount == 0) return;
// 		
// 	// save SP 한개로 사용하는 경우
// 	/*
// 	this.dsSave.clearData();
// 	
// 	for (var i = 0; i < this.dsList.rowcount; i++) {
// 		var flag = this.gfnGetFlag(this.dsList, i);
// 		switch(flag) {
// 			case "I":
// 			case "U":
// 			case "D":
// 				var nrow = this.dsSave.addRow();
// 				this.dsSave.setColumn(nrow, "TY_FLAG", flag);
// 				this.dsSave.setColumn(nrow, "NO_IDX", this.dsList.getColumn(i, "NO_IDX"));
// 				break;
// 		}
// 	}
// 		
// 	if (this.dsSave.rowcount == 0) return;
// 	*/
// 		
// 	var strSvcId    = "save";
// 	var strSvcType  = "save";
// 	var inProc		= "_dsProc";
// 	var inData      = "insert=dsInsert update=dsUpdate delete=dsDelete";
// 	//var inData      = "save=dsSave";
// 	var outData     = "";
// 	var strArg      = "";
// 	var callBackFnc = "fnCallback";
// 	
// 	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
// 						strSvcType , 	// transaction을 요청할 구분
// 						inProc,			// Procedure 정보 Dataset 이름
// 						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
// 						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
// 						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
// 						callBackFnc); // 통신방법 정의 [생략가능]
}

/*
 *	엑셀 버튼
 */
this.fnExcel = function() {
	this.gfnExcelExport(this.dxGrid);
}

/*
 *	출력 버튼
 */
this.fnPrint = function() {
}

/************************************************************************
 * Validate
 ************************************************************************/
/*
 *	조회 Validate
 */
this.fnSelectValidate = function() {
	var validate = true;
	/*
	if (this.gfnIsNull(this.dsSearch.getColumn(0,"CD_SYSTEM"))) {
		validate = false;
		// Alert후 실행할 처리
		this.fnVaidateCallback = function() {
			this.ccfCD_SYSTEM.form.CDTextBox.setFocus();
		}
		this.gfnAlert("시스템을 입력하세요.", "fnVaidateCallback");
	}
	*/
	return validate;
};

/************************************************************************
 * 콜백 이벤트
 ************************************************************************/
/*
 *	콜백 처리
 */
this.fnCallback = function(svcID, errorCode, errorMsg)
{
	if (svcID == "select") {
		this.gfnGridAfterSelect(this.dxGrid);	
	}
	else if(svcID == "combo") {
		if (errorCode == 0) {
			var nrow = this.dsCD_ORD.insertRow(0);
			this.dsCD_ORD.setColumn(nrow, "CD_CODE", "");
			this.dsCD_ORD.setColumn(nrow, "DS_CODE", "전체");
			this.divSearch.form.ccboCD_ORD.set_index(0);
		} else {
			this.gfnAlert(errorMsg);
		}
	}
}

/************************************************************************
 * 코드파인드 이벤트
 ************************************************************************/

/************************************************************************
 * 그리드 이벤트
 ************************************************************************/
 
/************************************************************************
 * 기타 이벤트
 ************************************************************************/
this.dsSearch_onvaluechanged = function(obj:nexacro.NormalDataset,e:nexacro.DSColChangeEventInfo)
{
	if(e.oldvalue != e.newvalue) {
		this.gfnSetFormStatus(this);	// 폼상태 초기화
		this.gfnGridClear(this.dxGrid);	
	}
};


this.fnSetCombo = function()
{
	this.dsCombo = new Dataset();
	this.dsCombo.addColumn("CD_SYSTEM", "string");
	this.dsCombo.addColumn("CD_TYPE", "string");
	this.dsCombo.addColumn("YN_USE", "string");
	this.dsCombo.addColumn("YN_MAND", "string");
	
	this.dsCombo.clearData();
	this.dsCombo.addRow();
	
	this.dsCombo.setColumn(0, "CD_SYSTEM", "DW");
	this.dsCombo.setColumn(0, "CD_TYPE", "81");
	this.dsCombo.setColumn(0, "YN_USE", "Y");
	this.dsCombo.setColumn(0, "YN_MAND", "Y");
	
	var strSvcId    = "combo";
	var strSvcType  = "select";
	var inProc		= "_dsProc";
	var inData      = "combo=dsCombo";
	var outData     = "dsCD_ORD=combo0";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 			// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc); // 통신방법 정의 [생략가능]
}

// 입찰상세 체크박스 이벤트
this.divSearch_cchkYN_DETAIL_onchanged = function(obj:nexacro.CheckBox,e:nexacro.CheckBoxChangedEventInfo)
{
	var width = 100;
	
	if(e.postvalue == false) width = 0;
	
	for(var i = 11; i <= 30; i++)
	{
		var index = this.dxGrid.getBindCellIndex("body", "C"+ i.toString().padLeft(2,"0"));
		this.dxGrid.setRealColSize("body", index, width);
	}
};
]]></Script>
    <Objects>
      <Dataset id="dsList"/>
      <Dataset id="_dsProc">
        <ColumnInfo>
          <Column id="TARGET" type="STRING" size="256"/>
          <Column id="SP" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="TARGET">select</Col>
            <Col id="SP">DWZPR_ORDPROGRESS_SELECT</Col>
          </Row>
          <Row>
            <Col id="TARGET">combo</Col>
            <Col id="SP">DZXPR_COMBO_COMMON_SAVE_01</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="dsSearch" onvaluechanged="dsSearch_onvaluechanged">
        <ColumnInfo>
          <Column id="CD_SITE" type="STRING" size="256"/>
          <Column id="CD_ORD" type="STRING" size="256"/>
          <Column id="DS_LICCOST" type="STRING" size="256"/>
          <Column id="DS_PR" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
      <Dataset id="dsCD_ORD">
        <ColumnInfo>
          <Column id="CD_CODE" type="STRING" size="256"/>
          <Column id="DS_CODE" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divSearch.form.ccfCD_SITE.form.CDTextBox" propid="value" datasetid="dsSearch" columnid="CD_SITE"/>
      <BindItem id="item1" compid="divSearch.form.ccboCD_ORD" propid="value" datasetid="dsSearch" columnid="CD_ORD"/>
      <BindItem id="item2" compid="divSearch.form.ctxtDS_LICCOST" propid="value" datasetid="dsSearch" columnid="DS_LICCOST"/>
      <BindItem id="item3" compid="divSearch.form.ctxtDS_PR" propid="value" datasetid="dsSearch" columnid="DS_PR"/>
    </Bind>
  </Form>
</FDL>
