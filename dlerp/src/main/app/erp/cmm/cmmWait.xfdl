<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="cmmWait" width="340" height="160" titletext="확인" onload="form_onload" onbeforeclose="cmmWait_onbeforeclose">
    <Layouts>
      <Layout height="160" width="340">
        <Static id="staTitle" taborder="0" text="작업대기" left="0" top="0" height="33" right="0" uWord="popup.confirm" cssclass="sta_POP_Title"/>
        <Button id="btnClose" taborder="1" top="0" width="26" height="33" cssclass="btn_WF_CloseBtnPop" right="0" onclick="btnClose_onclick"/>
        <Static id="sta00" taborder="2" text="대기순번" left="60" top="94" width="94" height="26" color="blue" font="20px/normal &quot;맑은 고딕&quot;"/>
        <Static id="staWait" taborder="3" left="173" top="94" width="94" height="26" font="20px/normal &quot;맑은 고딕&quot;"/>
        <Static id="sta01" taborder="4" text="※ 시스템 과부하 방지를 위한 작업대기중입니다.&#13;&#10;   기다리시면 순번대로 진행됩니다." left="15" top="44" width="312" height="33"/>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[
/************************************************************************************************
 * FORM 변수 선언 영역
 ************************************************************************************************/
this._Interval;
this._IntervalStop = false;
this.queueNum = -100;

/***********************************************************************************************
* FORM EVENT 영역(onload)
/***********************************************************************************************/
this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	this.gfnFormOnLoad(this); //초기화[필수]
	
	var queueName = this.getOwnerFrame().QUEUE_NAME;
	var queueSize = this.getOwnerFrame().QUEUE_SIZE;
	
	if(queueName != null && queueSize != null) {
		var objForm = this;
		objForm.fnSelect(queueName, queueSize);
		this._Interval = this.gfnSetInterval(this, function() {
			if (this._IntervalStop) return;
			objForm.fnSelect(queueName, queueSize);
		}, 1000);
		this._Interval.start();
	}
};
/************************************************************************************************
* TRANSACTION 서비스 호출 처리
************************************************************************************************/

/************************************************************************************************
 * CALLBACK 콜백 처리부분
 ************************************************************************************************/

 /************************************************************************************************
 * 사용자 FUNCTION 영역
 ************************************************************************************************/
/**
* @description 메세지설정
*/
this.fnSelect = function (queueName, queueSize)
{
	
	var strSvcId    = "quewait";
	var strSvcType  = "service/quewait";
	var inProc		= "";
	var inData      = "";
	var outData     = "";
	var strArg      = "QUEUE_NAME="+queueName+" QUEUE_SIZE="+queueSize+" QUEUE_NUM="+ this.queueNum;
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcType , 	// transaction을 요청할 구분
						inProc,			// Procedure 정보 Dataset 이름
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc,
						true); 	// 통신방법 정의 [생략가능]
};

this.fnCallback = function(svcID, errorCode, errorMsg) {
	if(svcID == "quewait") {
		if(errorCode == 0) {
			this.queueNum = errorMsg;
			this._IntervalStop = true;
			if(this._Interval != null) {
				this._Interval.destroy();
				this._Interval = null;
			}
			this.close(this.queueNum);
		} 
		else if(errorCode == -100) {
			var spl_msg = errorMsg.split('/');

			this.queueNum = Number(spl_msg[0]);
			this.staWait.set_text(spl_msg[1]);
		} 
		else if(errorCode == -101) {
			this.staWait.set_text(errorMsg);
		}
		else {
			if(this._Interval != null) {
				this._Interval.destroy();
				this._Interval = null;
			}
		}
	}
}

this.cmmWait_onbeforeclose = function(obj:nexacro.Form,e:nexacro.CloseEventInfo)
{
	this._IntervalStop = true;
	if(this._Interval != null) {
		this._Interval.destroy();
		this._Interval = null;
	}	
};

this.btnClose_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	this.close();
};
]]></Script>
  </Form>
</FDL>
